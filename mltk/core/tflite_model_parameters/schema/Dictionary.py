# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Dictionary(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Dictionary()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDictionary(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Dictionary
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Dictionary
    def SchemaVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Dictionary
    def Entries(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Entry import Entry
            obj = Entry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Dictionary
    def EntriesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Dictionary
    def EntriesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Start(builder): builder.StartObject(2)
def DictionaryStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddSchemaVersion(builder, schemaVersion): builder.PrependUint8Slot(0, schemaVersion, 0)
def DictionaryAddSchemaVersion(builder, schemaVersion):
    """This method is deprecated. Please switch to AddSchemaVersion."""
    return AddSchemaVersion(builder, schemaVersion)
def AddEntries(builder, entries): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(entries), 0)
def DictionaryAddEntries(builder, entries):
    """This method is deprecated. Please switch to AddEntries."""
    return AddEntries(builder, entries)
def StartEntriesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DictionaryStartEntriesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartEntriesVector(builder, numElems)
def End(builder): return builder.EndObject()
def DictionaryEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)