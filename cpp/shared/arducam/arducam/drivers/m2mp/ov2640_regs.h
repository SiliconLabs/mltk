
#pragma once

#include "arducam_m_2mp_driver.h"


/* DSP register bank FF=0x00*/

#define QS                      0x44
#define HSIZE                   0x51
#define VSIZE                   0x52
#define XOFFL                   0x53
#define YOFFL                   0x54
#define VHYX                    0x55
#define DPRP                    0x56
#define TEST                    0x57
#define ZMOW                    0x5A
#define ZMOH                    0x5B
#define ZMHH                    0x5C
#define BPADDR                  0x7C
#define BPDATA                  0x7D
#define SIZEL                   0x8C
#define HSIZE8                  0xC0
#define VSIZE8                  0xC1
#define CTRL1                   0xC3
#define MS_SP                   0xF0
#define SS_ID                   0xF7
#define SS_CTRL                 0xF7
#define MC_AL                   0xFA
#define MC_AH                   0xFB
#define MC_D                    0xFC
#define P_CMD                   0xFD
#define P_STATUS                0xFE

#define CTRLI                   0x50
#define CTRLI_LP_DP             0x80
#define CTRLI_ROUND             0x40

#define CTRL0                   0xC2
#define CTRL0_AEC_EN            0x80
#define CTRL0_AEC_SEL           0x40
#define CTRL0_STAT_SEL          0x20
#define CTRL0_VFIRST            0x10
#define CTRL0_YUV422            0x08
#define CTRL0_YUV_EN            0x04
#define CTRL0_RGB_EN            0x02
#define CTRL0_RAW_EN            0x01

#define CTRL2                   0x86
#define CTRL2_DCW_EN            0x20
#define CTRL2_SDE_EN            0x10
#define CTRL2_UV_ADJ_EN         0x08
#define CTRL2_UV_AVG_EN         0x04
#define CTRL2_CMX_EN            0x01

#define CTRL3                   0x87
#define CTRL3_BPC_EN            0x80
#define CTRL3_WPC_EN            0x40
#define R_DVP_SP                0xD3
#define R_DVP_SP_AUTO_MODE      0x80

#define R_BYPASS                0x05
#define R_BYPASS_DSP_EN         0x00
#define R_BYPASS_DSP_BYPAS      0x01

#define IMAGE_MODE              0xDA
#define IMAGE_MODE_Y8_DVP_EN    0x40
#define IMAGE_MODE_JPEG_EN      0x10
#define IMAGE_MODE_YUV422       0x00
#define IMAGE_MODE_RAW10        0x04
#define IMAGE_MODE_RGB565       0x08
#define IMAGE_MODE_HREF_VSYNC   0x02
#define IMAGE_MODE_LBYTE_FIRST  0x01
#define IMAGE_MODE_GET_FMT(x)   ((x)&0xC)

#define RESET                   0xE0
#define RESET_MICROC            0x40
#define RESET_SCCB              0x20
#define RESET_JPEG              0x10
#define RESET_DVP               0x04
#define RESET_IPU               0x02
#define RESET_CIF               0x01

#define MC_BIST                 0xF9
#define MC_BIST_RESET           0x80
#define MC_BIST_BOOT_ROM_SEL    0x40
#define MC_BIST_12KB_SEL        0x20
#define MC_BIST_12KB_MASK       0x30
#define MC_BIST_512KB_SEL       0x08
#define MC_BIST_512KB_MASK      0x0C
#define MC_BIST_BUSY_BIT_R      0x02
#define MC_BIST_MC_RES_ONE_SH_W 0x02
#define MC_BIST_LAUNCH          0x01

#define BANK_SEL                0xFF
#define BANK_SEL_DSP            0x00
#define BANK_SEL_SENSOR         0x01

/* Sensor register bank FF=0x01*/

#define GAIN                0x00
#define COM1                0x03
#define REG_PID             0x0A
#define REG_VER             0x0B
#define COM4                0x0D
#define AEC                 0x10

#define CLKRC               0x11
#define CLKRC_DOUBLE        0x80
#define CLKRC_DIVIDER_MASK  0x3F

#define COM10               0x15
#define HSTART              0x17
#define HSTOP               0x18
#define VSTART              0x19
#define VSTOP               0x1A
#define MIDH                0x1C
#define MIDL                0x1D
#define AEW                 0x24
#define AEB                 0x25
#define REG2A               0x2A
#define FRARL               0x2B
#define ADDVSL              0x2D
#define ADDVSH              0x2E
#define YAVG                0x2F
#define HSDY                0x30
#define HEDY                0x31
#define ARCOM2              0x34
#define REG45               0x45
#define FLL                 0x46
#define FLH                 0x47
#define COM19               0x48
#define ZOOMS               0x49
#define COM22               0x4B
#define COM25               0x4E
#define BD50                0x4F
#define BD60                0x50
#define REG5D               0x5D
#define REG5E               0x5E
#define REG5F               0x5F
#define REG60               0x60
#define HISTO_LOW           0x61
#define HISTO_HIGH          0x62

#define REG04               0x04
#define REG04_DEFAULT       0x28
#define REG04_HFLIP_IMG     0x80
#define REG04_VFLIP_IMG     0x40
#define REG04_VREF_EN       0x10
#define REG04_HREF_EN       0x08
#define REG04_SET(x)        (REG04_DEFAULT|x)

#define REG08               0x08
#define COM2                0x09
#define COM2_STDBY          0x10
#define COM2_OUT_DRIVE_1x   0x00
#define COM2_OUT_DRIVE_2x   0x01
#define COM2_OUT_DRIVE_3x   0x02
#define COM2_OUT_DRIVE_4x   0x03

#define COM3                0x0C
#define COM3_DEFAULT        0x38
#define COM3_BAND_50Hz      0x04
#define COM3_BAND_60Hz      0x00
#define COM3_BAND_AUTO      0x02
#define COM3_BAND_SET(x)    (COM3_DEFAULT|x)

#define COM7                0x12
#define COM7_SRST           0x80
#define COM7_RES_UXGA       0x00 /* UXGA */
#define COM7_RES_SVGA       0x40 /* SVGA */
#define COM7_RES_CIF        0x20 /* CIF  */
#define COM7_ZOOM_EN        0x04 /* Enable Zoom */
#define COM7_COLOR_BAR      0x02 /* Enable Color Bar Test */
#define COM7_GET_RES(x)     ((x)&0x70)

#define COM8                0x13
#define COM8_DEFAULT        0xC0
#define COM8_BNDF_EN        0x20 /* Enable Banding filter */
#define COM8_AGC_EN         0x04 /* AGC Auto/Manual control selection */
#define COM8_AEC_EN         0x01 /* Auto/Manual Exposure control */
#define COM8_SET(x)         (COM8_DEFAULT|x)
#define COM8_SET_AEC(r,x)   (((r)&0xFE)|((x)&1))

#define COM9                0x14 /* AGC gain ceiling */
#define COM9_DEFAULT        0x08
#define COM9_AGC_GAIN_2x    0x00 /* AGC:    2x */
#define COM9_AGC_GAIN_4x    0x01 /* AGC:    4x */
#define COM9_AGC_GAIN_8x    0x02 /* AGC:    8x */
#define COM9_AGC_GAIN_16x   0x03 /* AGC:   16x */
#define COM9_AGC_GAIN_32x   0x04 /* AGC:   32x */
#define COM9_AGC_GAIN_64x   0x05 /* AGC:   64x */
#define COM9_AGC_GAIN_128x  0x06 /* AGC:  128x */
#define COM9_AGC_SET(x)     (COM9_DEFAULT|(x<<5))

#define CTRL1_AWB           0x08 /* Enable AWB */

#define VV                  0x26
#define VV_AGC_TH_SET(h,l)  ((h<<4)|(l&0x0F))

#define REG32               0x32
#define REG32_UXGA          0x36
#define REG32_SVGA          0x09
#define REG32_CIF           0x00

#define VAL_SET(x, mask, rshift, lshift) ((((x) >> rshift) & mask) << lshift)

#define CTRLI_V_DIV_SET(x)      VAL_SET(x, 0x3, 0, 3)
#define CTRLI_H_DIV_SET(x)      VAL_SET(x, 0x3, 0, 0)

#define SIZEL_HSIZE8_11_SET(x)  VAL_SET(x, 0x1, 11, 6)
#define SIZEL_HSIZE8_SET(x)     VAL_SET(x, 0x7, 0, 3)
#define SIZEL_VSIZE8_SET(x)     VAL_SET(x, 0x7, 0, 0)

#define HSIZE8_SET(x)           VAL_SET(x, 0xFF, 3, 0)
#define VSIZE8_SET(x)           VAL_SET(x, 0xFF, 3, 0)

#define HSIZE_SET(x)            VAL_SET(x, 0xFF, 2, 0)
#define VSIZE_SET(x)            VAL_SET(x, 0xFF, 2, 0)

#define XOFFL_SET(x)            VAL_SET(x, 0xFF, 0, 0)
#define YOFFL_SET(x)            VAL_SET(x, 0xFF, 0, 0)

#define VHYX_VSIZE_SET(x)       VAL_SET(x, 0x1, (8+2), 7)
#define VHYX_HSIZE_SET(x)       VAL_SET(x, 0x1, (8+2), 3)
#define VHYX_YOFF_SET(x)        VAL_SET(x, 0x3, 8, 4)
#define VHYX_XOFF_SET(x)        VAL_SET(x, 0x3, 8, 0)

#define TEST_HSIZE_SET(x)       VAL_SET(x, 0x1, (9+2), 7)

#define ZMOW_OUTW_SET(x)        VAL_SET(x, 0xFF, 2, 0)
#define ZMOH_OUTH_SET(x)        VAL_SET(x, 0xFF, 2, 0)

#define ZMHH_ZSPEED_SET(x)      VAL_SET(x, 0x0F, 0, 4)
#define ZMHH_OUTH_SET(x)        VAL_SET(x, 0x1, (8+2), 2)
#define ZMHH_OUTW_SET(x)        VAL_SET(x, 0x3, (8+2), 0)



#define CIF_WIDTH       (400)
#define CIF_HEIGHT      (296)

#define SVGA_WIDTH      (800)
#define SVGA_HEIGHT     (600)

#define UXGA_WIDTH      (1600)
#define UXGA_HEIGHT     (1200)





static const reg_addr_value_t ov2640_default_regs[] =
{
    { 0xff, 0x00 },
    { 0x2c, 0xff },
    { 0x2e, 0xdf },
    { 0xff, 0x01 },
    { 0x3c, 0x32 },
    { 0x11, 0x00 },
    { 0x09, 0x02 },
    { 0x04, 0x28 },
    { 0x13, 0xe5 },
    { 0x14, 0x48 },
    { 0x2c, 0x0c },
    { 0x33, 0x78 },
    { 0x3a, 0x33 },
    { 0x3b, 0xfB },
    { 0x3e, 0x00 },
    { 0x43, 0x11 },
    { 0x16, 0x10 },
    { 0x39, 0x92 },
    { 0x35, 0xda },
    { 0x22, 0x1a },
    { 0x37, 0xc3 },
    { 0x23, 0x00 },
    { 0x34, 0xc0 },
    { 0x36, 0x1a },
    { 0x06, 0x88 },
    { 0x07, 0xc0 },
    { 0x0d, 0x87 },
    { 0x0e, 0x41 },
    { 0x4c, 0x00 },
    { 0x48, 0x00 },
    { 0x5B, 0x00 },
    { 0x42, 0x03 },
    { 0x4a, 0x81 },
    { 0x21, 0x99 },
    { 0x24, 0x40 },
    { 0x25, 0x38 },
    { 0x26, 0x82 },
    { 0x5c, 0x00 },
    { 0x63, 0x00 },
    { 0x61, 0x70 },
    { 0x62, 0x80 },
    { 0x7c, 0x05 },
    { 0x20, 0x80 },
    { 0x28, 0x30 },
    { 0x6c, 0x00 },
    { 0x6d, 0x80 },
    { 0x6e, 0x00 },
    { 0x70, 0x02 },
    { 0x71, 0x94 },
    { 0x73, 0xc1 },
    { 0x12, 0x40 },
    { 0x17, 0x11 },
    { 0x18, 0x43 },
    { 0x19, 0x00 },
    { 0x1a, 0x4b },
    { 0x32, 0x09 },
    { 0x37, 0xc0 },
    { 0x4f, 0x60 },
    { 0x50, 0xa8 },
    { 0x6d, 0x00 },
    { 0x3d, 0x38 },
    { 0x46, 0x3f },
    { 0x4f, 0x60 },
    { 0x0c, 0x3c },
    { 0xff, 0x00 },
    { 0xe5, 0x7f },
    { 0xf9, 0xc0 },
    { 0x41, 0x24 },
    { 0xe0, 0x14 },
    { 0x76, 0xff },
    { 0x33, 0xa0 },
    { 0x42, 0x20 },
    { 0x43, 0x18 },
    { 0x4c, 0x00 },
    { 0x87, 0xd5 },
    { 0x88, 0x3f },
    { 0xd7, 0x03 },
    { 0xd9, 0x10 },
    { 0xd3, 0x82 },
    { 0xc8, 0x08 },
    { 0xc9, 0x80 },
    { 0x7c, 0x00 },
    { 0x7d, 0x00 },
    { 0x7c, 0x03 },
    { 0x7d, 0x48 },
    { 0x7d, 0x48 },
    { 0x7c, 0x08 },
    { 0x7d, 0x20 },
    { 0x7d, 0x10 },
    { 0x7d, 0x0e },
    { 0x90, 0x00 },
    { 0x91, 0x0e },
    { 0x91, 0x1a },
    { 0x91, 0x31 },
    { 0x91, 0x5a },
    { 0x91, 0x69 },
    { 0x91, 0x75 },
    { 0x91, 0x7e },
    { 0x91, 0x88 },
    { 0x91, 0x8f },
    { 0x91, 0x96 },
    { 0x91, 0xa3 },
    { 0x91, 0xaf },
    { 0x91, 0xc4 },
    { 0x91, 0xd7 },
    { 0x91, 0xe8 },
    { 0x91, 0x20 },
    { 0x92, 0x00 },
    { 0x93, 0x06 },
    { 0x93, 0xe3 },
    { 0x93, 0x05 },
    { 0x93, 0x05 },
    { 0x93, 0x00 },
    { 0x93, 0x04 },
    { 0x93, 0x00 },
    { 0x93, 0x00 },
    { 0x93, 0x00 },
    { 0x93, 0x00 },
    { 0x93, 0x00 },
    { 0x93, 0x00 },
    { 0x93, 0x00 },
    { 0x96, 0x00 },
    { 0x97, 0x08 },
    { 0x97, 0x19 },
    { 0x97, 0x02 },
    { 0x97, 0x0c },
    { 0x97, 0x24 },
    { 0x97, 0x30 },
    { 0x97, 0x28 },
    { 0x97, 0x26 },
    { 0x97, 0x02 },
    { 0x97, 0x98 },
    { 0x97, 0x80 },
    { 0x97, 0x00 },
    { 0x97, 0x00 },
    { 0xc3, 0xed },
    { 0xa4, 0x00 },
    { 0xa8, 0x00 },
    { 0xc5, 0x11 },
    { 0xc6, 0x51 },
    { 0xbf, 0x80 },
    { 0xc7, 0x10 },
    { 0xb6, 0x66 },
    { 0xb8, 0xA5 },
    { 0xb7, 0x64 },
    { 0xb9, 0x7C },
    { 0xb3, 0xaf },
    { 0xb4, 0x97 },
    { 0xb5, 0xFF },
    { 0xb0, 0xC5 },
    { 0xb1, 0x94 },
    { 0xb2, 0x0f },
    { 0xc4, 0x5c },
    { 0xc0, 0x64 },
    { 0xc1, 0x4B },
    { 0x8c, 0x00 },
    { 0x86, 0x3D },
    { 0x50, 0x00 },
    { 0x51, 0xC8 },
    { 0x52, 0x96 },
    { 0x53, 0x00 },
    { 0x54, 0x00 },
    { 0x55, 0x00 },
    { 0x5a, 0xC8 },
    { 0x5b, 0x96 },
    { 0x5c, 0x00 },
    { 0xd3, 0x00 },   //{ 0xd3, 0x7f },
    { 0xc3, 0xed },
    { 0x7f, 0x00 },
    { 0xda, 0x00 },
    { 0xe5, 0x1f },
    { 0xe1, 0x67 },
    { 0xe0, 0x00 },
    { 0xdd, 0x7f },
    { 0x05, 0x00 },

    { 0x12, 0x40 },
    { 0xd3, 0x04 },   //{ 0xd3, 0x7f },
    { 0xc0, 0x16 },
    { 0xC1, 0x12 },
    { 0x8c, 0x00 },
    { 0x86, 0x3d },
    { 0x50, 0x00 },
    { 0x51, 0x2C },
    { 0x52, 0x24 },
    { 0x53, 0x00 },
    { 0x54, 0x00 },
    { 0x55, 0x00 },
    { 0x5A, 0x2c },
    { 0x5b, 0x24 },
    { 0x5c, 0x00 },
    { REG_ADDR_ACTION, REG_ACTION_TERMINATE },
};


static const uint8_t ov2640_brightness_regs[ARDUCAM_BRIGHTNESS_LEVELS + 1][5] =
{
    { BPADDR, BPDATA, BPADDR, BPDATA, BPDATA },
    { 0x00, 0x04, 0x09, 0x00, 0x00 }, /* -2 */
    { 0x00, 0x04, 0x09, 0x10, 0x00 }, /* -1 */
    { 0x00, 0x04, 0x09, 0x20, 0x00 }, /*  0 */
    { 0x00, 0x04, 0x09, 0x30, 0x00 }, /* +1 */
    { 0x00, 0x04, 0x09, 0x40, 0x00 }, /* +2 */
};

static const uint8_t ov2640_contrast_regs[ARDUCAM_CONTRAST_LEVELS+1][7] =
{
    { BPADDR, BPDATA, BPADDR, BPDATA, BPDATA, BPDATA, BPDATA },
    { 0x00, 0x04, 0x07, 0x20, 0x18, 0x34, 0x06 }, /* -2 */
    { 0x00, 0x04, 0x07, 0x20, 0x1c, 0x2a, 0x06 }, /* -1 */
    { 0x00, 0x04, 0x07, 0x20, 0x20, 0x20, 0x06 }, /*  0 */
    { 0x00, 0x04, 0x07, 0x20, 0x24, 0x16, 0x06 }, /* +1 */
    { 0x00, 0x04, 0x07, 0x20, 0x28, 0x0c, 0x06 }, /* +2 */
};

static const uint8_t ov2640_saturation_regs[ARDUCAM_SATURATION_LEVELS + 1][5] =
{
    { BPADDR, BPDATA, BPADDR, BPDATA, BPDATA },
    { 0x00, 0x02, 0x03, 0x28, 0x28 }, /* -2 */
    { 0x00, 0x02, 0x03, 0x38, 0x38 }, /* -1 */
    { 0x00, 0x02, 0x03, 0x48, 0x48 }, /*  0 */
    { 0x00, 0x02, 0x03, 0x58, 0x58 }, /* +1 */
    { 0x00, 0x02, 0x03, 0x58, 0x58 }, /* +2 */
};

static const uint8_t ov2640_special_effect_regs[ARDUCAM_SPECIALEFFECT_COUNT + 1][5] =
{
    { BPADDR, BPDATA, BPADDR, BPDATA, BPDATA },
    [1+ARDUCAM_SPECIALEFFECT_NONE]        = { 0x00, 0x00, 0x05, 0x80, 0x80 },
    [1+ARDUCAM_SPECIALEFFECT_NEGATIVE]    = { 0x00, 0x40, 0x05, 0x80, 0x80 },
    [1+ARDUCAM_SPECIALEFFECT_GRAY]        = { 0x00, 0x18, 0x05, 0x80, 0x80 },
    [1+ARDUCAM_SPECIALEFFECT_SEPIA]       = { 0x00, 0x58, 0x05, 0x80, 0x80 },
    [1+ARDUCAM_SPECIALEFFECT_BLUISH]      = { 0x00, 0x18, 0x05, 0xA0, 0x40 },
    [1+ARDUCAM_SPECIALEFFECT_REDDISH]     = { 0x00, 0x18, 0x05, 0x40, 0xC0 },
    [1+ARDUCAM_SPECIALEFFECT_GREENISH]    = { 0x00, 0x18, 0x05, 0x40, 0x40 },
    [1+ARDUCAM_SPECIALEFFECT_ANTIQUE]     = { 0x00, 0x18, 0x05, 0x40, 0xA6 },
};


static const reg_addr_value_t ov2640_jpeg_regs[] =
{
    { 0xe0, 0x14 },
    { 0xe1, 0x77 },
    { 0xe5, 0x1f },
    { 0xd7, 0x03 },
    { 0xda, 0x10 },
    { 0xe0, 0x00 },
    { 0xFF, 0x01 },
    { 0x04, 0x08 },
    {REG_ADDR_ACTION, REG_ACTION_TERMINATE},
};

static const reg_addr_value_t ov2640_yuv422_regs[] =
{
    { BANK_SEL, BANK_SEL_DSP },
    { R_BYPASS, R_BYPASS_DSP_EN },
    { IMAGE_MODE, IMAGE_MODE_YUV422 },
    { 0xD7, 0x03 },
    { 0x33,          0xa0},
    { 0xe5,          0x1f},
    { 0xe1,          0x67},
    { RESET,         0x00},
    { R_BYPASS,      R_BYPASS_DSP_EN},
    { REG_ADDR_ACTION, REG_ACTION_TERMINATE},
};

static const reg_addr_value_t ov2640_rgb565_regs[] =
{
    { BANK_SEL, BANK_SEL_DSP },
    { R_BYPASS, R_BYPASS_DSP_EN },
    { IMAGE_MODE, IMAGE_MODE_RGB565 },
    { 0xD7, 0x03 },
    { RESET,         0x00},
    { R_BYPASS,      R_BYPASS_DSP_EN},
    { REG_ADDR_ACTION, REG_ACTION_TERMINATE},
};

static const reg_addr_value_t ov2640_cif[] =
{
    { 0xff, 0x01 },
    { 0x12, 0x40 },
    { 0x17, 0x11 },
    { 0x18, 0x43 },
    { 0x19, 0x00 },
    { 0x1a, 0x4b },
    { 0x32, 0x09 },
    { 0x4f, 0xca },
    { 0x50, 0xa8 },
    { 0x5a, 0x23 },
    { 0x6d, 0x00 },
    { 0x39, 0x12 },
    { 0x35, 0xda },
    { 0x22, 0x1a },
    { 0x37, 0xc3 },
    { 0x23, 0x00 },
    { 0x34, 0xc0 },
    { 0x36, 0x1a },
    { 0x06, 0x88 },
    { 0x07, 0xc0 },
    { 0x0d, 0x87 },
    { 0x0e, 0x41 },
    { 0x4c, 0x00 },
    { 0xff, 0x00 },
    { 0xe0, 0x04 },
    { 0xc0, 0x64 },
    { 0xc1, 0x4b },
    { 0x86, 0x35 },
    { 0x50, 0x89 },
    { 0x51, 0xc8 },
    { 0x52, 0x96 },
    { 0x53, 0x00 },
    { 0x54, 0x00 },
    { 0x55, 0x00 },
    { 0x57, 0x00 },
    { 0x5a, 0x58 },
    { 0x5b, 0x48 },
    { 0x5c, 0x00 },
    { 0xe0, 0x00 },
    {REG_ADDR_ACTION, REG_ACTION_TERMINATE},
};


/* 800x600 */
static const reg_addr_value_t ov2640_svga[] =
{
    {0xff, 0x01},
    {0x11, 0x01},
    {0x12, 0x00}, // Bit[6:4]: Resolution selection//0x02Ϊ����
    {0x17, 0x11}, // HREFST[10:3]
    {0x18, 0x75}, // HREFEND[10:3]
    {0x32, 0x36}, // Bit[5:3]: HREFEND[2:0]; Bit[2:0]: HREFST[2:0]
    {0x19, 0x01}, // VSTRT[9:2]
    {0x1a, 0x97}, // VEND[9:2]
    {0x03, 0x0f}, // Bit[3:2]: VEND[1:0]; Bit[1:0]: VSTRT[1:0]
    {0x37, 0x40},
    {0x4f, 0xbb},
    {0x50, 0x9c},
    {0x5a, 0x57},
    {0x6d, 0x80},
    {0x3d, 0x34},
    {0x39, 0x02},
    {0x35, 0x88},
    {0x22, 0x0a},
    {0x37, 0x40},
    {0x34, 0xa0},
    {0x06, 0x02},
    {0x0d, 0xb7},
    {0x0e, 0x01},

    {0xff, 0x00},
    {0xe0, 0x04},
    {0xc0, 0xc8},
    {0xc1, 0x96},
    {0x86, 0x35},
    {0x50, 0x89},
    {0x51, 0x90},
    {0x52, 0x2c},
    {0x53, 0x00},
    {0x54, 0x00},
    {0x55, 0x88},
    {0x57, 0x00},
    {0x5a, 0xc8},
    {0x5b, 0x96},
    {0x5c, 0x00},
    {0xd3, 0x02},
    {0xe0, 0x00},

    {REG_ADDR_ACTION, REG_ACTION_TERMINATE},
};

   /* 1600x1200 */
static const reg_addr_value_t ov2640_uxga[] =
{
    {0xff, 0x01},
    {0x11, 0x01},
    {0x12, 0x00}, // Bit[6:4]: Resolution selection//0x02Ϊ����
    {0x17, 0x11}, // HREFST[10:3]
    {0x18, 0x75}, // HREFEND[10:3]
    {0x32, 0x36}, // Bit[5:3]: HREFEND[2:0]; Bit[2:0]: HREFST[2:0]
    {0x19, 0x01}, // VSTRT[9:2]
    {0x1a, 0x97}, // VEND[9:2]
    {0x03, 0x0f}, // Bit[3:2]: VEND[1:0]; Bit[1:0]: VSTRT[1:0]
    {0x37, 0x40},
    {0x4f, 0xbb},
    {0x50, 0x9c},
    {0x5a, 0x57},
    {0x6d, 0x80},
    {0x3d, 0x34},
    {0x39, 0x02},
    {0x35, 0x88},
    {0x22, 0x0a},
    {0x37, 0x40},
    {0x34, 0xa0},
    {0x06, 0x02},
    {0x0d, 0xb7},
    {0x0e, 0x01},

    {0xff, 0x00},
    {0xe0, 0x04},
    {0xc0, 0xc8},
    {0xc1, 0x96},
    {0x86, 0x3d},
    {0x50, 0x00},
    {0x51, 0x90},
    {0x52, 0x2c},
    {0x53, 0x00},
    {0x54, 0x00},
    {0x55, 0x88},
    {0x57, 0x00},
    {0x5a, 0x90},
    {0x5b, 0x2C},
    {0x5c, 0x05},              //bit2->1;bit[1:0]->1
    {0xd3, 0x02},
    {0xe0, 0x00},

    {REG_ADDR_ACTION, REG_ACTION_TERMINATE},
};



