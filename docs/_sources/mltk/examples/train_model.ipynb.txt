{

 "cells": [

  {

   "cell_type": "markdown",

   "metadata": {},

   "source": [

    "# Model Training API Examples\n",

    "\n",

    "This demonstrates how to use the [train_model](../../docs/python_api/operations.html#train-model) API.\n",

    "\n",

    "Refer to the [Model Training](../../docs/guides/model_training.md) guide for more details.\n",

    "\n",

    "__NOTES:__  \n",

    "\n",

    "- Click here: [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/siliconlabs/mltk/blob/master/mltk/examples/train_model.ipynb) to run this example interactively in your browser  \n",

    "- Refer to the [Notebook Examples Guide](../../docs/guides/notebook_examples_guide.md) for how to run this example locally in VSCode  "

   ]

  },

  {

   "cell_type": "markdown",

   "metadata": {},

   "source": [

    "## Install MLTK Python Package"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 1,

   "metadata": {},

   "outputs": [],

   "source": [

    "# Install the MLTK Python package (if necessary)\n",

    "!pip install --upgrade silabs-mltk"

   ]

  },

  {

   "cell_type": "markdown",

   "metadata": {},

   "source": [

    "## Import Python Packages"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 2,

   "metadata": {},

   "outputs": [],

   "source": [

    "# Import the necessary MLTK APIs\n",

    "from mltk.core import train_model"

   ]

  },

  {

   "cell_type": "markdown",

   "metadata": {},

   "source": [

    "## Example 1: Train as a “dry run”\n",

    "\n",

    "Before fully training a model, sometimes it is useful to do a “dry run” to ensure everything is working.   \n",

    "This can be done by append `-test` to the model name. \n",

    "With this, the model is trained for one epoch on a subset of the training data, and a model archive with `-test` append to the name is generated.\n",

    "\n",

    "__NOTE:__ Internally, the [load_mltk_model](../../docs/python_api/core/utilities.html#load-mltk-model) API is used to load the model.  \n",

    "See [Model Search Path](../../docs/guides/model_search_path.md) for how to update the model search path for your model."

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 3,

   "metadata": {},

   "outputs": [

    {

     "name": "stdout",

     "output_type": "stream",

     "text": [

      "WARNING:tensorflow:From c:\\Users\\reed\\workspace\\silabs\\mltk\\.venv\\lib\\site-packages\\tensorflow\\python\\ops\\array_ops.py:5043: calling gather (from tensorflow.python.ops.array_ops) with validate_indices is deprecated and will be removed in a future version.\n",

      "Instructions for updating:\n",

      "The `validate_indices` argument has no effect. Indices are always validated on CPU and never validated on GPU.\n",

      "Epoch 1/1\n"

     ]

    },

    {

     "data": {

      "application/vnd.jupyter.widget-view+json": {

       "model_id": "7a0fcf1fb60c4d8ab2f7bc90c2d65492",

       "version_major": 2,

       "version_minor": 0

      },

      "text/plain": [

       "0/3           ETA: ?s - "

      ]

     },

     "metadata": {},

     "output_type": "display_data"

    },

    {

     "name": "stdout",

     "output_type": "stream",

     "text": [

      "INFO:tensorflow:Assets written to: E:\\tmpk3eacx80\\assets\n"

     ]

    }

   ],

   "source": [

    "# Train the  model as a dry run by adding '-test' to the model  name\n",

    "training_results = train_model('image_example1-test')"

   ]

  },

  {

   "cell_type": "markdown",

   "metadata": {},

   "source": [

    "## Example 2: Train for 10 epochs\n",

    "\n",

    "The model specification typically contains the number of training epochs.\n",

    "Optionally, the `epochs` arguments can be used to override the model specification.\n",

    "\n",

    "__NOTE:__ Internally, the [load_mltk_model](../../docs/python_api/core/utilities.html#load-mltk-model) API is used to load the model.  \n",

    "See [Model Search Path](../../docs/guides/model_search_path.md) for how to update the model search path for your model."

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 4,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "application/vnd.jupyter.widget-view+json": {

       "model_id": "f76338f9d9604399959414bc7f78135a",

       "version_major": 2,

       "version_minor": 0

      },

      "text/plain": [

       "Training:   0%|           0/10 ETA: ?s,  ?epochs/s"

      ]

     },

     "metadata": {},

     "output_type": "display_data"

    },

    {

     "name": "stdout",

     "output_type": "stream",

     "text": [

      "Epoch 1/10\n"

     ]

    },

    {

     "data": {

      "application/vnd.jupyter.widget-view+json": {

       "model_id": "adbd51d595e2407a81510270e9610541",

       "version_major": 2,

       "version_minor": 0

      },

      "text/plain": [

       "0/65           ETA: ?s - "

      ]

     },

     "metadata": {},

     "output_type": "display_data"

    },

    {

     "name": "stdout",

     "output_type": "stream",

     "text": [

      "WARNING:tensorflow:Callback method `on_train_batch_begin` is slow compared to the batch time (batch time: 0.0128s vs `on_train_batch_begin` time: 0.0883s). Check your callbacks.\n",

      "WARNING:tensorflow:Callback method `on_train_batch_end` is slow compared to the batch time (batch time: 0.0128s vs `on_train_batch_end` time: 0.0423s). Check your callbacks.\n",

      "Epoch 2/10\n"

     ]

    },

    {

     "data": {

      "application/vnd.jupyter.widget-view+json": {

       "model_id": "ea3e0c6250514c14b097200c598cd320",

       "version_major": 2,

       "version_minor": 0

      },

      "text/plain": [

       "0/65           ETA: ?s - "

      ]

     },

     "metadata": {},

     "output_type": "display_data"

    },

    {

     "name": "stdout",

     "output_type": "stream",

     "text": [

      "Epoch 3/10\n"

     ]

    },

    {

     "data": {

      "application/vnd.jupyter.widget-view+json": {

       "model_id": "3056828663d34103a77825b6cb664db1",

       "version_major": 2,

       "version_minor": 0

      },

      "text/plain": [

       "0/65           ETA: ?s - "

      ]

     },

     "metadata": {},

     "output_type": "display_data"

    },

    {

     "name": "stdout",

     "output_type": "stream",

     "text": [

      "Epoch 4/10\n"

     ]

    },

    {

     "data": {

      "application/vnd.jupyter.widget-view+json": {

       "model_id": "7c9485afa8ea42c7abaa75cdde139b2c",

       "version_major": 2,

       "version_minor": 0

      },

      "text/plain": [

       "0/65           ETA: ?s - "

      ]

     },

     "metadata": {},

     "output_type": "display_data"

    },

    {

     "name": "stdout",

     "output_type": "stream",

     "text": [

      "Epoch 5/10\n"

     ]

    },

    {

     "data": {

      "application/vnd.jupyter.widget-view+json": {

       "model_id": "654980b985ff4701ba7771ff3e0c389e",

       "version_major": 2,

       "version_minor": 0

      },

      "text/plain": [

       "0/65           ETA: ?s - "

      ]

     },

     "metadata": {},

     "output_type": "display_data"

    },

    {

     "name": "stdout",

     "output_type": "stream",

     "text": [

      "Epoch 6/10\n"

     ]

    },

    {

     "data": {

      "application/vnd.jupyter.widget-view+json": {

       "model_id": "a5eaae303bab44539dd1dce42c719cf2",

       "version_major": 2,

       "version_minor": 0

      },

      "text/plain": [

       "0/65           ETA: ?s - "

      ]

     },

     "metadata": {},

     "output_type": "display_data"

    },

    {

     "name": "stdout",

     "output_type": "stream",

     "text": [

      "Epoch 7/10\n"

     ]

    },

    {

     "data": {

      "application/vnd.jupyter.widget-view+json": {

       "model_id": "1b0f153f242b4718a178f1dde2caa90d",

       "version_major": 2,

       "version_minor": 0

      },

      "text/plain": [

       "0/65           ETA: ?s - "

      ]

     },

     "metadata": {},

     "output_type": "display_data"

    },

    {

     "name": "stdout",

     "output_type": "stream",

     "text": [

      "Epoch 8/10\n"

     ]

    },

    {

     "data": {

      "application/vnd.jupyter.widget-view+json": {

       "model_id": "54d5ff3c8c3b4f1994508195a942994a",

       "version_major": 2,

       "version_minor": 0

      },

      "text/plain": [

       "0/65           ETA: ?s - "

      ]

     },

     "metadata": {},

     "output_type": "display_data"

    },

    {

     "name": "stdout",

     "output_type": "stream",

     "text": [

      "Epoch 9/10\n"

     ]

    },

    {

     "data": {

      "application/vnd.jupyter.widget-view+json": {

       "model_id": "5538af5f187a49be939220a35bf93604",

       "version_major": 2,

       "version_minor": 0

      },

      "text/plain": [

       "0/65           ETA: ?s - "

      ]

     },

     "metadata": {},

     "output_type": "display_data"

    },

    {

     "name": "stdout",

     "output_type": "stream",

     "text": [

      "Epoch 10/10\n"

     ]

    },

    {

     "data": {

      "application/vnd.jupyter.widget-view+json": {

       "model_id": "c79b9eec4723431b89d1d5bdb0d33970",

       "version_major": 2,

       "version_minor": 0

      },

      "text/plain": [

       "0/65           ETA: ?s - "

      ]

     },

     "metadata": {},

     "output_type": "display_data"

    },

    {

     "data": {

      "image/png": "",

      "text/plain": [

       "<Figure size 432x432 with 2 Axes>"

      ]

     },

     "metadata": {

      "needs_background": "light"

     },

     "output_type": "display_data"

    },

    {

     "name": "stdout",

     "output_type": "stream",

     "text": [

      "INFO:tensorflow:Assets written to: E:\\tmp36ynf338\\assets\n"

     ]

    }

   ],

   "source": [

    "# Train the model for 10 epochs then show the training results\n",

    "training_results = train_model('image_example1', epochs=10, show=True)"

   ]

  }

 ],

 "metadata": {

  "interpreter": {

   "hash": "d2cfb25ea30f37ddda2085817c91f6bd2a4a914387b5b179eb21bf4600b69cf8"

  },

  "kernelspec": {

   "display_name": "Python 3.9.7 64-bit ('.venv': venv)",

   "name": "python3"

  },

  "language_info": {

   "codemirror_mode": {

    "name": "ipython",

    "version": 3

   },

   "file_extension": ".py",

   "mimetype": "text/x-python",

   "name": "python",

   "nbconvert_exporter": "python",

   "pygments_lexer": "ipython3",

   "version": "3.9.7"

  },

  "orig_nbformat": 4

 },

 "nbformat": 4,

 "nbformat_minor": 2

}

