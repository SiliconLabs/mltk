Search.setIndex({"docnames": ["cpp/shared/uart_stream/examples/data_test/README", "docs/audio/audio_feature_generator", "docs/audio/audio_utilities", "docs/audio/keyword_spotting_overview", "docs/command_line/classify_audio", "docs/command_line/classify_audio_cli_help", "docs/command_line/classify_image", "docs/command_line/classify_image_cli_help", "docs/command_line/commander", "docs/command_line/commander_cli_help", "docs/command_line/evaluate", "docs/command_line/evaluate_cli_help", "docs/command_line/fingerprint_reader", "docs/command_line/fingerprint_reader_cli_help", "docs/command_line/index", "docs/command_line/profile", "docs/command_line/profile_cli_help", "docs/command_line/quantize", "docs/command_line/quantize_cli_help", "docs/command_line/ssh", "docs/command_line/ssh_cli_help", "docs/command_line/summarize", "docs/command_line/summarize_cli_help", "docs/command_line/tensorboard", "docs/command_line/tensorboard_cli_help", "docs/command_line/train", "docs/command_line/train_cli_help", "docs/command_line/update_params", "docs/command_line/update_params_cli_help", "docs/command_line/view", "docs/command_line/view_audio", "docs/command_line/view_audio_cli_help", "docs/command_line/view_cli_help", "docs/cpp_development/build_options", "docs/cpp_development/command_line", "docs/cpp_development/examples/audio_classifier", "docs/cpp_development/examples/ble_audio_classifier", "docs/cpp_development/examples/fingerprint_authenticator", "docs/cpp_development/examples/hello_world", "docs/cpp_development/examples/image_classifier", "docs/cpp_development/examples/index", "docs/cpp_development/examples/model_profiler", "docs/cpp_development/index", "docs/cpp_development/simplicity_studio", "docs/cpp_development/vscode", "docs/cpp_development/wrappers/audio_feature_generator_wrapper", "docs/cpp_development/wrappers/index", "docs/cpp_development/wrappers/mvp_wrapper", "docs/cpp_development/wrappers/tflite_micro_wrapper", "docs/examples", "docs/faq/how_to_debug_model_during_training", "docs/faq/how_to_reduce_model_size", "docs/faq/how_to_run_model_on_embedded", "docs/faq/index", "docs/faq/linux_why_is_gpu_not_working", "docs/faq/where_is_my_trained_model", "docs/faq/why_does_eval_not_work_with_tflite", "docs/faq/why_is_model_not_working_on_embedded", "docs/faq/windows_tensorflow_dll_error", "docs/guides/index", "docs/guides/model_archive", "docs/guides/model_evaluation", "docs/guides/model_parameters", "docs/guides/model_profiler", "docs/guides/model_profiler_utility", "docs/guides/model_quantization", "docs/guides/model_search_path", "docs/guides/model_specification", "docs/guides/model_summary", "docs/guides/model_training", "docs/guides/model_training_monitor", "docs/guides/model_training_via_ssh", "docs/guides/model_visualizer", "docs/guides/notebook_examples_guide", "docs/installation", "docs/other/environment_variables", "docs/other/quick_reference", "docs/other/settings_file", "docs/other/supported_hardware", "docs/overview", "docs/python_api/data_preprocessing/audio", "docs/python_api/data_preprocessing/audio_data_generator", "docs/python_api/data_preprocessing/audio_data_generator_params", "docs/python_api/data_preprocessing/audio_feature_generator", "docs/python_api/data_preprocessing/audio_feature_generator_settings", "docs/python_api/data_preprocessing/image", "docs/python_api/data_preprocessing/image_data_generator", "docs/python_api/data_preprocessing/image_data_generator_params", "docs/python_api/data_preprocessing/index", "docs/python_api/data_preprocessing/list_directory", "docs/python_api/data_preprocessing/normalize", "docs/python_api/data_preprocessing/tf_dataset", "docs/python_api/data_preprocessing/utilities", "docs/python_api/datasets/accelerometer/tflm_magic_wand", "docs/python_api/datasets/audio/background_noise/ambient", "docs/python_api/datasets/audio/background_noise/brd2601", "docs/python_api/datasets/audio/background_noise/esc50", "docs/python_api/datasets/audio/direction_commands", "docs/python_api/datasets/audio/mit_ir_survey", "docs/python_api/datasets/audio/ml_commons/keywords", "docs/python_api/datasets/audio/ml_commons/voice", "docs/python_api/datasets/audio/on_off", "docs/python_api/datasets/audio/speech_commands_v2", "docs/python_api/datasets/audio/ten_digits", "docs/python_api/datasets/audio/yes_no", "docs/python_api/datasets/image/cifar10", "docs/python_api/datasets/image/fashion_mnist", "docs/python_api/datasets/image/mnist", "docs/python_api/datasets/image/rock_paper_scissors_v1", "docs/python_api/datasets/image/rock_paper_scissors_v2", "docs/python_api/datasets/index", "docs/python_api/index", "docs/python_api/keras_model", "docs/python_api/mltk_model/audio_dataset_mixin", "docs/python_api/mltk_model/dataset_mixin", "docs/python_api/mltk_model/evaluate_autoencoder_mixin", "docs/python_api/mltk_model/evaluate_classifier_mixin", "docs/python_api/mltk_model/evaluate_mixin", "docs/python_api/mltk_model/image_dataset_mixin", "docs/python_api/mltk_model/index", "docs/python_api/mltk_model/mltk_dataset", "docs/python_api/mltk_model/model", "docs/python_api/mltk_model/model_event", "docs/python_api/mltk_model/ssh_mixin", "docs/python_api/mltk_model/train_mixin", "docs/python_api/mltk_model/utilities", "docs/python_api/mltk_model/weights_and_biases_mixin", "docs/python_api/models/common_models", "docs/python_api/models/examples/audio_example1", "docs/python_api/models/examples/audio_tf_dataset", "docs/python_api/models/examples/autoencoder_example", "docs/python_api/models/examples/basic_example", "docs/python_api/models/examples/basic_tf_dataset_example", "docs/python_api/models/examples/binary_classification", "docs/python_api/models/examples/conv1d_example", "docs/python_api/models/examples/image_example1", "docs/python_api/models/examples/image_tf_dataset", "docs/python_api/models/examples/index", "docs/python_api/models/examples/siamese_contrastive", "docs/python_api/models/index", "docs/python_api/models/siliconlabs/fingerprint_signature_generator", "docs/python_api/models/siliconlabs/index", "docs/python_api/models/siliconlabs/keyword_spotting_alexa", "docs/python_api/models/siliconlabs/keyword_spotting_mobilenetv2", "docs/python_api/models/siliconlabs/keyword_spotting_numbers", "docs/python_api/models/siliconlabs/keyword_spotting_on_off", "docs/python_api/models/siliconlabs/keyword_spotting_on_off_v2", "docs/python_api/models/siliconlabs/keyword_spotting_on_off_v3", "docs/python_api/models/siliconlabs/keyword_spotting_pacman", "docs/python_api/models/siliconlabs/keyword_spotting_pacman_v2", "docs/python_api/models/siliconlabs/keyword_spotting_pacman_v3", "docs/python_api/models/siliconlabs/keyword_spotting_with_transfer_learning", "docs/python_api/models/siliconlabs/rock_paper_scissors", "docs/python_api/models/tflite_micro/index", "docs/python_api/models/tflite_micro/tflite_micro_magic_wand", "docs/python_api/models/tflite_micro/tflite_micro_speech", "docs/python_api/models/tinyml/anomaly_detection", "docs/python_api/models/tinyml/image_classification", "docs/python_api/models/tinyml/index", "docs/python_api/models/tinyml/keyword_spotting", "docs/python_api/models/tinyml/visual_wake_words", "docs/python_api/operations/evaluate", "docs/python_api/operations/index", "docs/python_api/operations/profile", "docs/python_api/operations/quantize", "docs/python_api/operations/summarize", "docs/python_api/operations/train", "docs/python_api/operations/update_model_parameters", "docs/python_api/operations/view", "docs/python_api/tflite_micro_model/accelerator", "docs/python_api/tflite_micro_model/index", "docs/python_api/tflite_micro_model/layer_error", "docs/python_api/tflite_micro_model/model", "docs/python_api/tflite_micro_model/model_details", "docs/python_api/tflite_micro_model/profiled_layer_result", "docs/python_api/tflite_micro_model/wrapper", "docs/python_api/tflite_model/activation", "docs/python_api/tflite_model/add_layer", "docs/python_api/tflite_model/conv2d_layer", "docs/python_api/tflite_model/conv2d_layer_options", "docs/python_api/tflite_model/conv_params", "docs/python_api/tflite_model/depthwise_conv2d_layer", "docs/python_api/tflite_model/depthwise_conv2d_layer_options", "docs/python_api/tflite_model/depthwise_conv_params", "docs/python_api/tflite_model/dequantize_layer", "docs/python_api/tflite_model/dictionary.fbs", "docs/python_api/tflite_model/fully_connected_layer", "docs/python_api/tflite_model/fully_connected_layer_options", "docs/python_api/tflite_model/fully_connected_params", "docs/python_api/tflite_model/index", "docs/python_api/tflite_model/layer", "docs/python_api/tflite_model/model", "docs/python_api/tflite_model/padding", "docs/python_api/tflite_model/parameters", "docs/python_api/tflite_model/pooling2d_layer", "docs/python_api/tflite_model/pooling2d_layer_options", "docs/python_api/tflite_model/pooling_params", "docs/python_api/tflite_model/quantization", "docs/python_api/tflite_model/quantize_layer", "docs/python_api/tflite_model/reshape_layer", "docs/python_api/tflite_model/shape", "docs/python_api/tflite_model/tensor", "docs/python_api/tflite_model/transpose_conv_layer", "docs/python_api/tflite_model/transpose_conv_layer_options", "docs/python_api/tflite_model/transpose_conv_params", "docs/python_api/tflite_model/unidirectional_sequence_lstm_layer", "docs/python_api/tflite_model/unidirectional_sequence_lstm_layer_options", "docs/python_api/utils/archive", "docs/python_api/utils/archive_downloader", "docs/python_api/utils/audio_dataset_generator/augmentation", "docs/python_api/utils/audio_dataset_generator/generation_config", "docs/python_api/utils/audio_dataset_generator/generator", "docs/python_api/utils/audio_dataset_generator/index", "docs/python_api/utils/audio_dataset_generator/keyword", "docs/python_api/utils/audio_dataset_generator/voice", "docs/python_api/utils/audio_dataset_generator/voice_pitch", "docs/python_api/utils/audio_dataset_generator/voice_rate", "docs/python_api/utils/bin2header", "docs/python_api/utils/cmake", "docs/python_api/utils/gpu", "docs/python_api/utils/hasher", "docs/python_api/utils/index", "docs/python_api/utils/jlink_stream/command_stream", "docs/python_api/utils/jlink_stream/data_stream", "docs/python_api/utils/jlink_stream/index", "docs/python_api/utils/jlink_stream/jlink_stream", "docs/python_api/utils/jlink_stream/stream_options", "docs/python_api/utils/logger", "docs/python_api/utils/path", "docs/python_api/utils/process_pool", "docs/python_api/utils/python", "docs/python_api/utils/serial_reader/index", "docs/python_api/utils/serial_reader/serial_reader", "docs/python_api/utils/shell_cmd", "docs/python_api/utils/signal_handler", "docs/python_api/utils/string_formatting", "docs/python_api/utils/system", "docs/python_api/utils/uart_stream/index", "docs/python_api/utils/uart_stream/uart_stream", "docs/tutorials", "docs/why_mltk", "index", "mltk/examples/audio_feature_generator", "mltk/examples/evaluate_model", "mltk/examples/profile_model", "mltk/examples/quantize_model", "mltk/examples/summarize_model", "mltk/examples/tflite_micro_model", "mltk/examples/tflite_model", "mltk/examples/train_model", "mltk/examples/update_params", "mltk/examples/view_model", "mltk/tutorials/README", "mltk/tutorials/add_existing_script_to_mltk", "mltk/tutorials/cloud_logging_with_wandb", "mltk/tutorials/cloud_training_with_vast_ai", "mltk/tutorials/fingerprint_authentication", "mltk/tutorials/image_classification", "mltk/tutorials/keyword_spotting_alexa", "mltk/tutorials/keyword_spotting_on_off", "mltk/tutorials/keyword_spotting_pacman", "mltk/tutorials/keyword_spotting_with_transfer_learning", "mltk/tutorials/model_debugging", "mltk/tutorials/model_optimization", "mltk/tutorials/model_quantization_tips", "mltk/tutorials/onnx_to_tflite", "mltk/tutorials/quantized_lstm", "mltk/tutorials/synthetic_audio_dataset_generation"], "filenames": ["cpp\\shared\\uart_stream\\examples\\data_test\\README.md", "docs\\audio\\audio_feature_generator.md", "docs\\audio\\audio_utilities.md", "docs\\audio\\keyword_spotting_overview.rst", "docs\\command_line\\classify_audio.md", "docs\\command_line\\classify_audio_cli_help.md", "docs\\command_line\\classify_image.md", "docs\\command_line\\classify_image_cli_help.md", "docs\\command_line\\commander.md", "docs\\command_line\\commander_cli_help.md", "docs\\command_line\\evaluate.md", "docs\\command_line\\evaluate_cli_help.md", "docs\\command_line\\fingerprint_reader.md", "docs\\command_line\\fingerprint_reader_cli_help.md", "docs\\command_line\\index.md", "docs\\command_line\\profile.md", "docs\\command_line\\profile_cli_help.md", "docs\\command_line\\quantize.md", "docs\\command_line\\quantize_cli_help.md", "docs\\command_line\\ssh.md", "docs\\command_line\\ssh_cli_help.md", "docs\\command_line\\summarize.md", "docs\\command_line\\summarize_cli_help.md", "docs\\command_line\\tensorboard.md", "docs\\command_line\\tensorboard_cli_help.md", "docs\\command_line\\train.md", "docs\\command_line\\train_cli_help.md", "docs\\command_line\\update_params.md", "docs\\command_line\\update_params_cli_help.md", "docs\\command_line\\view.md", "docs\\command_line\\view_audio.md", "docs\\command_line\\view_audio_cli_help.md", "docs\\command_line\\view_cli_help.md", "docs\\cpp_development\\build_options.md", "docs\\cpp_development\\command_line.md", "docs\\cpp_development\\examples\\audio_classifier.md", "docs\\cpp_development\\examples\\ble_audio_classifier.md", "docs\\cpp_development\\examples\\fingerprint_authenticator.md", "docs\\cpp_development\\examples\\hello_world.md", "docs\\cpp_development\\examples\\image_classifier.md", "docs\\cpp_development\\examples\\index.md", "docs\\cpp_development\\examples\\model_profiler.md", "docs\\cpp_development\\index.md", "docs\\cpp_development\\simplicity_studio.md", "docs\\cpp_development\\vscode.md", "docs\\cpp_development\\wrappers\\audio_feature_generator_wrapper.md", "docs\\cpp_development\\wrappers\\index.md", "docs\\cpp_development\\wrappers\\mvp_wrapper.md", "docs\\cpp_development\\wrappers\\tflite_micro_wrapper.md", "docs\\examples.md", "docs\\faq\\how_to_debug_model_during_training.md", "docs\\faq\\how_to_reduce_model_size.md", "docs\\faq\\how_to_run_model_on_embedded.md", "docs\\faq\\index.md", "docs\\faq\\linux_why_is_gpu_not_working.md", "docs\\faq\\where_is_my_trained_model.md", "docs\\faq\\why_does_eval_not_work_with_tflite.md", "docs\\faq\\why_is_model_not_working_on_embedded.md", "docs\\faq\\windows_tensorflow_dll_error.md", "docs\\guides\\index.md", "docs\\guides\\model_archive.md", "docs\\guides\\model_evaluation.md", "docs\\guides\\model_parameters.md", "docs\\guides\\model_profiler.md", "docs\\guides\\model_profiler_utility.md", "docs\\guides\\model_quantization.md", "docs\\guides\\model_search_path.md", "docs\\guides\\model_specification.md", "docs\\guides\\model_summary.md", "docs\\guides\\model_training.md", "docs\\guides\\model_training_monitor.md", "docs\\guides\\model_training_via_ssh.md", "docs\\guides\\model_visualizer.md", "docs\\guides\\notebook_examples_guide.md", "docs\\installation.md", "docs\\other\\environment_variables.md", "docs\\other\\quick_reference.md", "docs\\other\\settings_file.md", "docs\\other\\supported_hardware.md", "docs\\overview.rst", "docs\\python_api\\data_preprocessing\\audio.rst", "docs\\python_api\\data_preprocessing\\audio_data_generator.rst", "docs\\python_api\\data_preprocessing\\audio_data_generator_params.rst", "docs\\python_api\\data_preprocessing\\audio_feature_generator.rst", "docs\\python_api\\data_preprocessing\\audio_feature_generator_settings.rst", "docs\\python_api\\data_preprocessing\\image.rst", "docs\\python_api\\data_preprocessing\\image_data_generator.rst", "docs\\python_api\\data_preprocessing\\image_data_generator_params.rst", "docs\\python_api\\data_preprocessing\\index.md", "docs\\python_api\\data_preprocessing\\list_directory.rst", "docs\\python_api\\data_preprocessing\\normalize.rst", "docs\\python_api\\data_preprocessing\\tf_dataset.rst", "docs\\python_api\\data_preprocessing\\utilities.md", "docs\\python_api\\datasets\\accelerometer\\tflm_magic_wand.rst", "docs\\python_api\\datasets\\audio\\background_noise\\ambient.rst", "docs\\python_api\\datasets\\audio\\background_noise\\brd2601.rst", "docs\\python_api\\datasets\\audio\\background_noise\\esc50.rst", "docs\\python_api\\datasets\\audio\\direction_commands.rst", "docs\\python_api\\datasets\\audio\\mit_ir_survey.rst", "docs\\python_api\\datasets\\audio\\ml_commons\\keywords.rst", "docs\\python_api\\datasets\\audio\\ml_commons\\voice.rst", "docs\\python_api\\datasets\\audio\\on_off.rst", "docs\\python_api\\datasets\\audio\\speech_commands_v2.rst", "docs\\python_api\\datasets\\audio\\ten_digits.rst", "docs\\python_api\\datasets\\audio\\yes_no.rst", "docs\\python_api\\datasets\\image\\cifar10.rst", "docs\\python_api\\datasets\\image\\fashion_mnist.rst", "docs\\python_api\\datasets\\image\\mnist.rst", "docs\\python_api\\datasets\\image\\rock_paper_scissors_v1.rst", "docs\\python_api\\datasets\\image\\rock_paper_scissors_v2.rst", "docs\\python_api\\datasets\\index.md", "docs\\python_api\\index.md", "docs\\python_api\\keras_model.md", "docs\\python_api\\mltk_model\\audio_dataset_mixin.rst", "docs\\python_api\\mltk_model\\dataset_mixin.rst", "docs\\python_api\\mltk_model\\evaluate_autoencoder_mixin.rst", "docs\\python_api\\mltk_model\\evaluate_classifier_mixin.rst", "docs\\python_api\\mltk_model\\evaluate_mixin.rst", "docs\\python_api\\mltk_model\\image_dataset_mixin.rst", "docs\\python_api\\mltk_model\\index.md", "docs\\python_api\\mltk_model\\mltk_dataset.rst", "docs\\python_api\\mltk_model\\model.rst", "docs\\python_api\\mltk_model\\model_event.rst", "docs\\python_api\\mltk_model\\ssh_mixin.rst", "docs\\python_api\\mltk_model\\train_mixin.rst", "docs\\python_api\\mltk_model\\utilities.md", "docs\\python_api\\mltk_model\\weights_and_biases_mixin.rst", "docs\\python_api\\models\\common_models.md", "docs\\python_api\\models\\examples\\audio_example1.md", "docs\\python_api\\models\\examples\\audio_tf_dataset.md", "docs\\python_api\\models\\examples\\autoencoder_example.md", "docs\\python_api\\models\\examples\\basic_example.md", "docs\\python_api\\models\\examples\\basic_tf_dataset_example.md", "docs\\python_api\\models\\examples\\binary_classification.md", "docs\\python_api\\models\\examples\\conv1d_example.md", "docs\\python_api\\models\\examples\\image_example1.md", "docs\\python_api\\models\\examples\\image_tf_dataset.md", "docs\\python_api\\models\\examples\\index.md", "docs\\python_api\\models\\examples\\siamese_contrastive.md", "docs\\python_api\\models\\index.md", "docs\\python_api\\models\\siliconlabs\\fingerprint_signature_generator.md", "docs\\python_api\\models\\siliconlabs\\index.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_alexa.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_mobilenetv2.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_numbers.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_on_off.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_on_off_v2.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_on_off_v3.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_pacman.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_pacman_v2.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_pacman_v3.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_with_transfer_learning.md", "docs\\python_api\\models\\siliconlabs\\rock_paper_scissors.md", "docs\\python_api\\models\\tflite_micro\\index.md", "docs\\python_api\\models\\tflite_micro\\tflite_micro_magic_wand.md", "docs\\python_api\\models\\tflite_micro\\tflite_micro_speech.md", "docs\\python_api\\models\\tinyml\\anomaly_detection.md", "docs\\python_api\\models\\tinyml\\image_classification.md", "docs\\python_api\\models\\tinyml\\index.md", "docs\\python_api\\models\\tinyml\\keyword_spotting.md", "docs\\python_api\\models\\tinyml\\visual_wake_words.md", "docs\\python_api\\operations\\evaluate.md", "docs\\python_api\\operations\\index.md", "docs\\python_api\\operations\\profile.md", "docs\\python_api\\operations\\quantize.md", "docs\\python_api\\operations\\summarize.md", "docs\\python_api\\operations\\train.md", "docs\\python_api\\operations\\update_model_parameters.md", "docs\\python_api\\operations\\view.md", "docs\\python_api\\tflite_micro_model\\accelerator.rst", "docs\\python_api\\tflite_micro_model\\index.md", "docs\\python_api\\tflite_micro_model\\layer_error.rst", "docs\\python_api\\tflite_micro_model\\model.rst", "docs\\python_api\\tflite_micro_model\\model_details.rst", "docs\\python_api\\tflite_micro_model\\profiled_layer_result.rst", "docs\\python_api\\tflite_micro_model\\wrapper.rst", "docs\\python_api\\tflite_model\\activation.rst", "docs\\python_api\\tflite_model\\add_layer.rst", "docs\\python_api\\tflite_model\\conv2d_layer.rst", "docs\\python_api\\tflite_model\\conv2d_layer_options.rst", "docs\\python_api\\tflite_model\\conv_params.rst", "docs\\python_api\\tflite_model\\depthwise_conv2d_layer.rst", "docs\\python_api\\tflite_model\\depthwise_conv2d_layer_options.rst", "docs\\python_api\\tflite_model\\depthwise_conv_params.rst", "docs\\python_api\\tflite_model\\dequantize_layer.rst", "docs\\python_api\\tflite_model\\dictionary.fbs.md", "docs\\python_api\\tflite_model\\fully_connected_layer.rst", "docs\\python_api\\tflite_model\\fully_connected_layer_options.rst", "docs\\python_api\\tflite_model\\fully_connected_params.rst", "docs\\python_api\\tflite_model\\index.md", "docs\\python_api\\tflite_model\\layer.rst", "docs\\python_api\\tflite_model\\model.rst", "docs\\python_api\\tflite_model\\padding.rst", "docs\\python_api\\tflite_model\\parameters.rst", "docs\\python_api\\tflite_model\\pooling2d_layer.rst", "docs\\python_api\\tflite_model\\pooling2d_layer_options.rst", "docs\\python_api\\tflite_model\\pooling_params.rst", "docs\\python_api\\tflite_model\\quantization.rst", "docs\\python_api\\tflite_model\\quantize_layer.rst", "docs\\python_api\\tflite_model\\reshape_layer.rst", "docs\\python_api\\tflite_model\\shape.rst", "docs\\python_api\\tflite_model\\tensor.rst", "docs\\python_api\\tflite_model\\transpose_conv_layer.rst", "docs\\python_api\\tflite_model\\transpose_conv_layer_options.rst", "docs\\python_api\\tflite_model\\transpose_conv_params.rst", "docs\\python_api\\tflite_model\\unidirectional_sequence_lstm_layer.rst", "docs\\python_api\\tflite_model\\unidirectional_sequence_lstm_layer_options.rst", "docs\\python_api\\utils\\archive.rst", "docs\\python_api\\utils\\archive_downloader.rst", "docs\\python_api\\utils\\audio_dataset_generator\\augmentation.rst", "docs\\python_api\\utils\\audio_dataset_generator\\generation_config.rst", "docs\\python_api\\utils\\audio_dataset_generator\\generator.rst", "docs\\python_api\\utils\\audio_dataset_generator\\index.md", "docs\\python_api\\utils\\audio_dataset_generator\\keyword.rst", "docs\\python_api\\utils\\audio_dataset_generator\\voice.rst", "docs\\python_api\\utils\\audio_dataset_generator\\voice_pitch.rst", "docs\\python_api\\utils\\audio_dataset_generator\\voice_rate.rst", "docs\\python_api\\utils\\bin2header.rst", "docs\\python_api\\utils\\cmake.rst", "docs\\python_api\\utils\\gpu.rst", "docs\\python_api\\utils\\hasher.rst", "docs\\python_api\\utils\\index.md", "docs\\python_api\\utils\\jlink_stream\\command_stream.rst", "docs\\python_api\\utils\\jlink_stream\\data_stream.rst", "docs\\python_api\\utils\\jlink_stream\\index.md", "docs\\python_api\\utils\\jlink_stream\\jlink_stream.rst", "docs\\python_api\\utils\\jlink_stream\\stream_options.rst", "docs\\python_api\\utils\\logger.rst", "docs\\python_api\\utils\\path.rst", "docs\\python_api\\utils\\process_pool.rst", "docs\\python_api\\utils\\python.rst", "docs\\python_api\\utils\\serial_reader\\index.md", "docs\\python_api\\utils\\serial_reader\\serial_reader.rst", "docs\\python_api\\utils\\shell_cmd.rst", "docs\\python_api\\utils\\signal_handler.rst", "docs\\python_api\\utils\\string_formatting.rst", "docs\\python_api\\utils\\system.rst", "docs\\python_api\\utils\\uart_stream\\index.md", "docs\\python_api\\utils\\uart_stream\\uart_stream.rst", "docs\\tutorials.md", "docs\\why_mltk.md", "index.md", "mltk\\examples\\audio_feature_generator.ipynb", "mltk\\examples\\evaluate_model.ipynb", "mltk\\examples\\profile_model.ipynb", "mltk\\examples\\quantize_model.ipynb", "mltk\\examples\\summarize_model.ipynb", "mltk\\examples\\tflite_micro_model.ipynb", "mltk\\examples\\tflite_model.ipynb", "mltk\\examples\\train_model.ipynb", "mltk\\examples\\update_params.ipynb", "mltk\\examples\\view_model.ipynb", "mltk\\tutorials\\README.md", "mltk\\tutorials\\add_existing_script_to_mltk.ipynb", "mltk\\tutorials\\cloud_logging_with_wandb.ipynb", "mltk\\tutorials\\cloud_training_with_vast_ai.ipynb", "mltk\\tutorials\\fingerprint_authentication.ipynb", "mltk\\tutorials\\image_classification.ipynb", "mltk\\tutorials\\keyword_spotting_alexa.ipynb", "mltk\\tutorials\\keyword_spotting_on_off.ipynb", "mltk\\tutorials\\keyword_spotting_pacman.ipynb", "mltk\\tutorials\\keyword_spotting_with_transfer_learning.ipynb", "mltk\\tutorials\\model_debugging.ipynb", "mltk\\tutorials\\model_optimization.ipynb", "mltk\\tutorials\\model_quantization_tips.ipynb", "mltk\\tutorials\\onnx_to_tflite.ipynb", "mltk\\tutorials\\quantized_lstm.ipynb", "mltk\\tutorials\\synthetic_audio_dataset_generation.ipynb"], "titles": ["UART Stream Data Test", "Audio Feature Generator", "Audio Utilities", "Keyword Spotting Overview", "classify_audio", "&lt;no title&gt;", "classify_image", "&lt;no title&gt;", "commander", "&lt;no title&gt;", "evaluate", "&lt;no title&gt;", "fingerprint_reader", "&lt;no title&gt;", "Command-Line", "profile", "&lt;no title&gt;", "quantize", "&lt;no title&gt;", "ssh", "&lt;no title&gt;", "summarize", "&lt;no title&gt;", "tensorboard", "&lt;no title&gt;", "train", "&lt;no title&gt;", "update_params", "&lt;no title&gt;", "view", "view_audio", "&lt;no title&gt;", "&lt;no title&gt;", "C++ Build Options", "Command-Line Development", "Audio Classifier", "BLE Audio Classifier", "Fingerprint Authenticator", "Hello World", "Image Classifier", "C++ Examples", "Model Profiler", "C++ Development", "Simplicity Studio Development", "Visual Studio Code Development", "AudioFeatureGenerator Python Wrapper", "C++ Python Wrappers", "MVP Python Wrapper", "Tensorflow-Lite Micro Python Wrapper", "API Examples", "How can I debug my model during training?", "How can I reduce my model\u2019s size?", "How do I run my model on an embedded device?", "Frequently Asked Questions", "Linux: Why isn\u2019t the GPU working?", "Where is my trained model?", "Why does the Keras (.h5) model work during evaluation but the TF-Lite (.tflite) does not?", "Why is the model not returning correct results on the embedded device?", "Windows: I am seeing a DLL error when importing Tensorflow", "Modeling Guides", "Model Archive File", "Model Evaluation", "Model Parameters", "Model Profiler", "Model Profiler Utility", "Model Quantization", "Model Search Path", "Model Specification", "Model Summary", "Model Training", "Model Training Monitor", "Model Training via SSH", "Model Visualizer", "Notebook Examples Guide", "Installation", "Environment Variables", "Quick Reference", "Settings File", "Supported Hardware", "Overview", "mltk.core.preprocess.utils.audio", "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator", "mltk.core.preprocess.audio.parallel_generator.ParallelProcessParams", "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator", "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings", "mltk.core.preprocess.utils.image", "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator", "mltk.core.preprocess.image.parallel_generator.ParallelProcessParams", "Data Preprocessing", "mltk.core.preprocess.utils.list_directory", "mltk.core.preprocess.utils.normalize", "mltk.core.preprocess.utils.tf_dataset", "Common Utilities", "mltk.datasets.accelerometer.tflm_magic_wand", "mltk.datasets.audio.background_noise.ambient", "mltk.datasets.audio.background_noise.brd2601", "mltk.datasets.audio.background_noise.esc50", "mltk.datasets.audio.direction_commands", "mltk.datasets.audio.mit_ir_survey", "mltk.datasets.audio.mlcommons.ml_commons_keywords", "mltk.datasets.audio.mlcommons.ml_commons_voice", "mltk.datasets.audio.on_off", "mltk.datasets.audio.speech_commands.speech_commands_v2", "mltk.datasets.audio.ten_digits", "mltk.datasets.audio.yes_no", "mltk.datasets.image.cifar10", "mltk.datasets.image.fashion_mnist", "mltk.datasets.image.mnist", "mltk.datasets.image.rock_paper_scissors_v1", "mltk.datasets.image.rock_paper_scissors_v2", "Reference Datasets", "API Reference", "Keras Model", "mltk.core.AudioDatasetMixin", "mltk.core.DatasetMixin", "mltk.core.EvaluateAutoEncoderMixin", "mltk.core.EvaluateClassifierMixin", "mltk.core.EvaluateMixin", "mltk.core.ImageDatasetMixin", "MLTK Model", "mltk.core.MltkDataset", "mltk.core.MltkModel", "mltk.core.MltkModelEvent", "mltk.core.SshMixin", "mltk.core.TrainMixin", "Model Utilities", "mltk.core.WeightsAndBiasesMixin", "Common Model Architectures", "audio_example1", "audio_tf_dataset", "autoencoder_example", "basic_example", "basic_tf_dataset_example", "binary_classification", "conv1d_example", "image_example1", "image_tf_dataset", "Example Models", "siamese_contrastive", "Reference Models", "fingerprint_signature_generator", "Silicon Lab\u2019s Models", "keyword_spotting_alexa", "keyword_spotting_mobilenetv2", "keyword_spotting_numbers", "keyword_spotting_on_off", "keyword_spotting_on_off_v2", "keyword_spotting_on_off_v3", "keyword_spotting_pacman", "keyword_spotting_pacman_v2", "keyword_spotting_pacman_v3", "keyword_spotting_with_transfer_learning", "rock_paper_scissors", "Tensorflow-Lite Micro Models", "tflite_micro_magic_wand", "tflite_micro_speech", "anomaly_detection", "image_classification", "TinyML Models", "keyword_spotting", "visual_wake_words", "evaluate_model", "Model Operations", "profile_model", "quantize_model", "summarize_model", "train_model", "update_model_parameters", "view_model", "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator", "Tensorflow-Lite Micro Model", "mltk.core.tflite_micro.TfliteMicroLayerError", "mltk.core.tflite_micro.TfliteMicroModel", "mltk.core.tflite_micro.TfliteMicroModelDetails", "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult", "mltk.core.tflite_micro.TfliteMicro", "mltk.core.TfliteActivation", "mltk.core.TfliteAddLayer", "mltk.core.TfliteConv2dLayer", "mltk.core.TfliteConv2DLayerOptions", "mltk.core.TfliteConvParams", "mltk.core.TfliteDepthwiseConv2dLayer", "mltk.core.TfliteDepthwiseConv2DLayerOptions", "mltk.core.TfliteDepthwiseConvParams", "mltk.core.TfliteDequantizeLayer", "FlatbufferDictionary", "mltk.core.TfliteFullyConnectedLayer", "mltk.core.TfliteFullyConnectedLayerOptions", "mltk.core.TfliteFullyConnectedParams", "Tensorflow-Lite Model", "mltk.core.TfliteLayer", "mltk.core.TfliteModel", "mltk.core.TflitePadding", "mltk.core.TfliteModelParameters", "mltk.core.TflitePooling2dLayer", "mltk.core.TflitePool2DLayerOptions", "mltk.core.TflitePoolParams", "mltk.core.TfliteQuantization", "mltk.core.TfliteQuantizeLayer", "mltk.core.TfliteReshapeLayer", "mltk.core.TfliteShape", "mltk.core.TfliteTensor", "mltk.core.TfliteTransposeConvLayer", "mltk.core.TfliteTransposeConvLayerOptions", "mltk.core.TfliteTransposeConvParams", "mltk.core.TfliteUnidirectionalLstmLayer", "mltk.core.TfliteUnidirectionalLstmLayerOptions", "mltk.utils.archive", "mltk.utils.archive_downloader", "mltk.utils.audio_dataset_generator.Augmentation", "mltk.utils.audio_dataset_generator.GenerationConfig", "mltk.utils.audio_dataset_generator.AudioDatasetGenerator", "Audio Dataset Generator", "mltk.utils.audio_dataset_generator.Keyword", "mltk.utils.audio_dataset_generator.Voice", "mltk.utils.audio_dataset_generator.VoicePitch", "mltk.utils.audio_dataset_generator.VoiceRate", "mltk.utils.bin2header", "mltk.utils.cmake", "mltk.utils.gpu", "mltk.utils.hasher", "Utilities", "mltk.utils.jlink_stream.JlinkCommandStream", "mltk.utils.jlink_stream.JLinkDataStream", "J-Link Stream", "mltk.utils.jlink_stream.JlinkStream", "mltk.utils.jlink_stream.JlinkStreamOptions", "mltk.utils.logger", "mltk.utils.path", "mltk.utils.process_pool.ProcessPool", "mltk.utils.python", "Serial Reader", "mltk.utils.serial_reader.SerialReader", "mltk.utils.shell_cmd", "mltk.utils.signal_handler.SignalHandler", "mltk.utils.string_formatting", "mltk.utils.system", "UART Stream", "mltk.utils.uart_stream.UartStream", "Tutorials", "Why MLTK?", "Silicon Labs Machine Learning Toolkit (MLTK)", "Audio Feature Generator Example", "Model Evaluation API Examples", "Model Profiler API Examples", "Model Quantization API Examples", "Model Summary API Examples", "TF-Lite Micro Model API Examples", "TF-Lite Model API Examples", "Model Training API Examples", "Update Model Parameters API Examples", "Model Visualizer API Examples", "Tutorials", "Add an Existing Script to the MLTK", "Cloud Logging with Weights &amp; Biases", "Cloud Training with vast.ai", "Fingerprint Authentication", "Image Classification - Rock, Paper, Scissors", "Keyword Spotting - Alexa", "Keyword Spotting - On/Off", "Keyword Spotting - Pac-Man", "Keyword Spotting with Transfer Learning", "Model Debugging", "Model Optimization for MVP Hardware Accelerator", "Model Quantization Tips", "ONNX to TF-Lite Model Conversion", "Quantized LSTM", "Synthetic Audio Dataset Generation"], "terms": {"thi": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 89, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 181, 184, 185, 186, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 223, 224, 225, 227, 228, 229, 230, 231, 233, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 258, 262, 264, 266, 267], "variou": [0, 1, 2, 19, 20, 34, 42, 49, 59, 60, 61, 62, 67, 69, 70, 71, 72, 78, 79, 92, 96, 98, 111, 119, 122, 123, 126, 131, 132, 136, 139, 141, 143, 144, 145, 147, 148, 150, 151, 152, 161, 221, 239, 240, 248, 252, 253, 256, 257, 258, 259, 260, 262, 263, 265], "input": [0, 1, 8, 9, 10, 11, 35, 36, 41, 56, 61, 62, 63, 65, 67, 80, 81, 86, 90, 113, 114, 115, 116, 117, 118, 121, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 172, 175, 177, 178, 180, 181, 183, 184, 186, 188, 190, 191, 192, 194, 198, 199, 202, 204, 205, 217, 242, 243, 244, 245, 246, 248, 249, 250, 251, 253, 256, 257, 258, 259, 260, 261, 263, 267], "output": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 27, 28, 33, 35, 36, 41, 44, 51, 57, 61, 62, 63, 65, 68, 71, 80, 81, 83, 86, 90, 124, 126, 127, 128, 129, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 166, 167, 172, 175, 177, 178, 180, 181, 183, 184, 186, 188, 190, 191, 192, 193, 194, 198, 199, 202, 204, 205, 211, 217, 233, 242, 244, 246, 248, 250, 251, 255, 256, 257, 259, 260, 263, 264, 266], "featur": [0, 2, 14, 30, 35, 36, 46, 49, 52, 59, 61, 62, 63, 67, 68, 70, 71, 72, 74, 78, 79, 80, 81, 83, 84, 86, 89, 91, 96, 127, 129, 133, 142, 144, 146, 147, 149, 150, 152, 237, 238, 240, 241, 244, 246, 251, 252, 253, 255, 256, 257, 258, 261, 263, 266], "uartstream": [0, 49, 237, 258], "librari": [0, 1, 34, 42, 45, 46, 48, 49, 71, 80, 81, 83, 129, 163, 169, 175, 224, 225, 230, 237, 238, 241, 258, 259, 260], "contain": [0, 1, 14, 25, 26, 27, 28, 42, 50, 55, 57, 66, 67, 68, 69, 71, 75, 76, 81, 86, 98, 99, 100, 102, 105, 106, 107, 108, 109, 113, 114, 118, 121, 122, 124, 130, 135, 138, 140, 142, 151, 152, 161, 163, 166, 172, 185, 191, 207, 211, 215, 216, 230, 232, 240, 249, 254, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266], "both": [0, 39, 42, 57, 61, 68, 71, 89, 138, 140, 142, 144, 147, 150, 230, 238, 255], "firmwar": [0, 1, 27, 28, 35, 37, 39, 57, 256, 257, 258, 259], "applic": [0, 1, 2, 4, 5, 27, 28, 33, 35, 36, 37, 38, 39, 40, 41, 42, 45, 47, 48, 51, 52, 57, 74, 78, 99, 100, 102, 124, 127, 128, 129, 136, 139, 140, 143, 145, 148, 151, 152, 155, 157, 163, 238, 240, 241, 253, 257, 259, 261, 263, 266, 267], "plu": [0, 48, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 259], "python": [0, 2, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 35, 49, 50, 57, 60, 66, 67, 70, 71, 73, 75, 76, 80, 81, 83, 85, 86, 91, 92, 97, 101, 103, 104, 105, 111, 113, 114, 118, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 167, 175, 177, 178, 181, 184, 185, 186, 190, 191, 193, 194, 198, 199, 202, 205, 211, 215, 216, 218, 220, 221, 223, 224, 225, 229, 237, 238, 241, 253, 254, 255, 258, 263, 264, 267], "script": [0, 1, 14, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 35, 42, 45, 46, 47, 48, 50, 57, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 111, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 166, 167, 177, 178, 181, 184, 186, 190, 193, 194, 198, 199, 202, 205, 219, 221, 223, 224, 225, 230, 236, 237, 238, 239, 241, 244, 245, 246, 250, 251, 254, 255, 256, 258, 259, 260, 262, 263, 264, 265, 266, 267], "work": [0, 1, 2, 4, 5, 15, 16, 19, 20, 25, 26, 35, 36, 37, 39, 44, 48, 51, 53, 57, 62, 63, 66, 68, 69, 72, 74, 81, 86, 100, 102, 107, 113, 118, 122, 126, 131, 136, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 215, 216, 224, 233, 237, 240, 244, 249, 250, 251, 253, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267], "togeth": [0, 1, 102, 258], "across": [0, 91, 129, 136, 142, 144, 146, 147, 149, 150, 229, 255, 260, 264, 266, 267], "see": [0, 1, 2, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 44, 49, 52, 53, 57, 59, 61, 62, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 81, 84, 89, 91, 98, 99, 102, 105, 111, 119, 121, 122, 124, 126, 128, 129, 131, 132, 133, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 163, 170, 189, 191, 207, 208, 211, 212, 213, 217, 218, 219, 220, 225, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 240, 241, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267], "sourc": [0, 14, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 57, 71, 74, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 240, 241, 253, 255, 256, 257, 259, 261, 263, 264, 265, 267], "code": [0, 33, 40, 43, 46, 50, 52, 57, 73, 74, 77, 88, 102, 110, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 179, 182, 187, 195, 203, 206, 207, 208, 211, 214, 215, 216, 217, 218, 219, 220, 221, 225, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 240, 241, 244, 247, 248, 253, 254, 255, 256, 257, 258, 259, 260, 265, 266, 267], "exampl": [0, 1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 35, 36, 37, 38, 39, 41, 45, 47, 48, 52, 55, 57, 74, 81, 83, 84, 91, 93, 99, 102, 105, 106, 107, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 143, 145, 146, 148, 149, 151, 152, 154, 155, 161, 163, 165, 166, 167, 168, 176, 191, 192, 215, 216, 228, 235, 238, 240, 252, 253, 257, 258, 259, 260, 261, 263, 264, 265, 266], "github": [0, 1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 74, 84, 88, 93, 95, 96, 108, 109, 110, 124, 127, 128, 129, 131, 132, 134, 136, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 193, 207, 208, 217, 218, 219, 220, 221, 225, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 241, 242, 244, 246, 247, 248, 250, 251, 253, 256, 257, 258, 259, 260, 261, 263, 265, 267], "cpp": [0, 1, 34, 36, 40, 42, 43, 44, 46, 237, 238], "share": [0, 1, 36, 40, 42, 43, 45, 46, 48, 57, 71, 100, 107, 138, 140, 142, 143, 144, 147, 150, 151, 156, 157, 159, 160, 237, 238, 240, 241, 254, 255, 256, 259, 260, 263], "uart_stream": [0, 221, 237], "data_test": [0, 238], "0": [0, 1, 2, 4, 5, 6, 7, 23, 24, 25, 26, 35, 37, 39, 50, 57, 62, 67, 70, 74, 75, 80, 81, 83, 84, 85, 86, 89, 91, 98, 99, 100, 102, 105, 106, 107, 113, 114, 118, 119, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 166, 168, 172, 176, 177, 178, 180, 181, 183, 184, 186, 188, 190, 191, 192, 194, 196, 198, 199, 200, 202, 204, 205, 209, 212, 213, 219, 222, 229, 235, 236, 237, 238, 242, 244, 246, 247, 248, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267], "mltk": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 46, 49, 50, 52, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 88, 92, 110, 111, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 189, 212, 221, 224, 231, 237, 239, 252, 254, 258, 261, 263, 264, 265, 266, 267], "c": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 34, 35, 36, 37, 39, 41, 43, 45, 47, 48, 52, 57, 58, 71, 74, 77, 78, 81, 102, 105, 133, 157, 175, 217, 224, 234, 237, 238, 241, 242, 244, 245, 246, 249, 250, 251, 255, 257, 259, 260, 261, 263, 264, 265], "develop": [0, 1, 4, 6, 7, 12, 13, 14, 15, 16, 36, 40, 45, 46, 47, 48, 57, 61, 62, 69, 71, 77, 78, 95, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 239, 241, 244, 253, 254, 256, 257, 259, 260, 263, 265, 266, 267], "doc": [0, 1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 81, 83, 84, 91, 111, 113, 128, 129, 131, 132, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 163, 211, 229, 248, 253, 257, 258, 259, 265, 267], "set": [0, 1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 19, 20, 23, 24, 30, 31, 33, 35, 36, 44, 50, 61, 62, 66, 69, 70, 75, 80, 81, 83, 84, 86, 87, 89, 91, 102, 106, 107, 113, 114, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 174, 175, 185, 191, 193, 215, 216, 223, 227, 228, 230, 236, 240, 241, 242, 245, 248, 250, 253, 256, 264, 267], "up": [0, 2, 35, 36, 43, 62, 67, 69, 74, 81, 84, 86, 97, 102, 128, 129, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 159, 208, 231, 238, 239, 255, 258, 259, 260, 261, 263, 265], "your": [0, 1, 2, 4, 5, 23, 24, 30, 31, 34, 35, 36, 37, 39, 41, 43, 44, 49, 50, 52, 56, 64, 67, 69, 72, 73, 74, 77, 86, 102, 113, 114, 118, 124, 126, 127, 128, 129, 133, 135, 136, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 157, 159, 160, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "environ": [0, 1, 19, 20, 50, 66, 73, 74, 77, 91, 98, 102, 111, 123, 144, 146, 147, 149, 228, 229, 233, 241, 253, 255, 257, 258, 259, 260, 267], "note": [0, 1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 19, 20, 23, 24, 27, 28, 30, 31, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 48, 61, 62, 63, 65, 68, 70, 71, 72, 73, 74, 77, 81, 83, 84, 86, 91, 113, 114, 115, 116, 118, 121, 122, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 169, 175, 177, 178, 181, 184, 186, 190, 194, 198, 199, 202, 205, 211, 215, 216, 219, 223, 224, 225, 227, 229, 230, 232, 237, 238, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 256, 258, 260, 261, 262, 263, 264, 265, 266], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 169, 171, 173, 174, 175, 176, 177, 178, 181, 184, 185, 186, 189, 190, 191, 192, 193, 194, 198, 199, 201, 202, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267], "need": [0, 1, 15, 16, 17, 18, 21, 22, 23, 24, 29, 32, 34, 35, 36, 43, 44, 45, 47, 48, 51, 52, 57, 59, 62, 63, 67, 68, 70, 71, 72, 81, 86, 119, 124, 129, 131, 132, 133, 134, 135, 136, 138, 140, 142, 144, 145, 146, 147, 149, 150, 151, 154, 155, 175, 191, 238, 242, 244, 246, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267], "built": [0, 1, 2, 4, 5, 6, 7, 12, 13, 15, 16, 34, 35, 36, 37, 38, 39, 41, 43, 44, 52, 57, 63, 67, 68, 69, 72, 74, 122, 125, 127, 129, 136, 146, 149, 163, 165, 169, 176, 192, 241, 244, 246, 251, 253, 256, 257, 258, 259, 260, 261, 265], "embed": [0, 1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 23, 24, 27, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 53, 56, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 76, 78, 79, 131, 132, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 162, 163, 221, 222, 224, 225, 231, 237, 238, 239, 241, 242, 244, 248, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265], "1": [0, 1, 4, 5, 6, 7, 10, 11, 19, 20, 23, 24, 37, 39, 64, 67, 74, 75, 77, 81, 83, 84, 86, 89, 91, 97, 99, 100, 101, 103, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 122, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 175, 176, 180, 183, 185, 191, 192, 201, 212, 215, 216, 219, 223, 228, 229, 230, 236, 237, 238, 242, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267], "connect": [0, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 19, 20, 27, 28, 36, 37, 39, 43, 44, 63, 64, 72, 77, 144, 156, 163, 187, 188, 206, 222, 225, 232, 238, 244, 255, 256, 257, 258, 259, 260, 261, 263], "support": [0, 2, 6, 7, 10, 11, 12, 13, 15, 16, 19, 20, 25, 26, 27, 28, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 48, 52, 57, 58, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 77, 80, 86, 102, 113, 114, 118, 124, 138, 142, 144, 147, 150, 155, 161, 163, 166, 169, 172, 175, 176, 192, 211, 239, 241, 242, 244, 246, 248, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 266, 267], "board": [0, 1, 4, 6, 7, 12, 13, 14, 15, 16, 35, 36, 37, 39, 44, 77, 78, 95, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 244, 255, 256, 257, 258, 259, 260, 263, 266], "e": [0, 1, 2, 4, 5, 10, 11, 14, 15, 16, 23, 24, 25, 26, 27, 28, 33, 34, 36, 37, 39, 41, 43, 44, 45, 47, 48, 50, 51, 52, 56, 57, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 78, 81, 83, 84, 86, 89, 91, 98, 102, 105, 106, 107, 113, 114, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 166, 174, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 198, 199, 202, 204, 205, 212, 213, 217, 218, 221, 229, 230, 231, 234, 235, 240, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "g": [0, 1, 2, 4, 5, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25, 26, 27, 28, 33, 34, 37, 39, 41, 43, 44, 45, 47, 48, 50, 52, 56, 57, 60, 62, 64, 66, 67, 69, 70, 71, 74, 75, 78, 81, 83, 86, 89, 91, 98, 105, 106, 107, 113, 114, 118, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 166, 175, 176, 185, 192, 193, 212, 213, 217, 221, 230, 231, 234, 235, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267], "brd2601b": 0, "pc": [0, 1, 4, 5, 6, 7, 12, 13, 14, 34, 42, 73, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 253, 256, 257, 258, 260, 262, 265], "2": [0, 1, 19, 20, 23, 24, 35, 37, 50, 64, 67, 73, 74, 75, 78, 84, 86, 91, 96, 107, 113, 114, 118, 119, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 174, 176, 193, 212, 219, 235, 242, 253, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267], "creat": [0, 1, 2, 10, 11, 19, 20, 33, 35, 36, 37, 39, 41, 43, 45, 47, 48, 49, 50, 55, 57, 59, 60, 61, 65, 67, 69, 71, 73, 74, 78, 79, 81, 84, 86, 91, 113, 118, 119, 121, 123, 124, 127, 128, 129, 131, 132, 134, 136, 137, 138, 142, 144, 146, 147, 149, 150, 151, 166, 174, 193, 219, 220, 227, 228, 229, 230, 239, 240, 253, 254, 261, 262, 266, 267], "modifi": [0, 17, 18, 27, 28, 35, 36, 37, 39, 41, 45, 47, 48, 62, 65, 68, 78, 122, 124, 143, 145, 148, 152, 156, 167, 205, 240, 245, 248, 250, 254, 256, 257, 258, 259, 260, 263], "file": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 45, 47, 48, 50, 52, 55, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 113, 118, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 170, 175, 185, 189, 191, 193, 207, 208, 211, 217, 220, 227, 228, 230, 232, 233, 239, 240, 241, 242, 243, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267], "repo": [0, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 52, 78, 160, 169, 175, 237, 238, 258], "root": [0, 19, 20, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 52, 66, 71, 74, 78, 91, 111, 119, 121, 142, 144, 147, 150, 207, 208, 218, 229, 255, 258, 264], "user_opt": [0, 33, 34, 35, 36, 37, 39, 41, 45, 47, 48, 52, 78, 218, 258], "cmake": [0, 33, 38, 42, 78, 258], "add": [0, 1, 2, 27, 28, 33, 34, 35, 36, 37, 39, 41, 44, 45, 47, 48, 50, 52, 57, 61, 65, 67, 69, 70, 81, 82, 84, 87, 89, 91, 121, 124, 127, 128, 129, 131, 132, 133, 135, 136, 138, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 157, 167, 175, 177, 191, 192, 193, 218, 227, 228, 229, 239, 242, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266], "follow": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 39, 40, 41, 42, 43, 44, 46, 51, 53, 54, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 88, 89, 91, 92, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 170, 174, 189, 193, 212, 215, 216, 221, 224, 228, 231, 237, 239, 240, 241, 242, 243, 244, 247, 248, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "mltk_set": [0, 33, 35, 36, 37, 39, 41, 44, 45, 47, 48, 52, 78, 258], "mltk_target": [0, 45, 47, 48, 218], "mltk_uart_stream_data_test": 0, "mltk_platform_nam": [0, 44, 78, 258], "brd2601": [0, 33, 36, 37, 39, 44, 142, 144, 146, 147, 149, 150, 244, 257, 258, 259, 260, 261, 266], "chang": [0, 27, 28, 35, 36, 56, 64, 67, 69, 70, 71, 86, 91, 100, 102, 124, 126, 138, 142, 143, 144, 145, 147, 148, 150, 151, 152, 191, 228, 233, 248, 253, 254, 255, 257, 258, 259, 261, 263, 265, 267], "platform": [0, 2, 33, 36, 41, 42, 43, 44, 78, 163, 212, 218, 241, 244, 256, 257, 258, 259, 260], "": [0, 1, 4, 5, 6, 7, 8, 10, 11, 14, 15, 16, 17, 18, 21, 22, 23, 24, 27, 28, 29, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 50, 52, 53, 56, 57, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 81, 83, 84, 86, 91, 95, 97, 99, 100, 101, 102, 103, 104, 111, 113, 114, 118, 121, 122, 123, 124, 125, 126, 128, 129, 130, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 169, 171, 172, 174, 175, 176, 177, 178, 181, 184, 185, 186, 190, 191, 192, 193, 194, 198, 199, 202, 205, 208, 211, 214, 215, 216, 220, 227, 228, 229, 230, 233, 235, 238, 239, 241, 242, 244, 245, 246, 248, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267], "name": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 49, 50, 52, 55, 59, 60, 62, 63, 66, 68, 69, 70, 71, 75, 77, 78, 81, 86, 89, 91, 102, 111, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 169, 171, 173, 174, 175, 177, 178, 181, 184, 185, 186, 190, 191, 193, 194, 198, 199, 202, 205, 208, 211, 214, 215, 216, 217, 218, 223, 225, 227, 228, 229, 230, 232, 236, 238, 239, 240, 242, 243, 244, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267], "necessari": [0, 1, 34, 41, 43, 44, 50, 70, 71, 73, 74, 80, 81, 83, 118, 124, 125, 129, 130, 133, 135, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 157, 159, 160, 176, 191, 192, 211, 228, 229, 230, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 258, 259, 260, 263, 265, 266, 267], "3": [0, 1, 4, 5, 19, 20, 35, 37, 67, 73, 74, 75, 86, 99, 105, 107, 118, 121, 122, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 176, 192, 215, 216, 219, 230, 235, 242, 245, 249, 253, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266], "invok": [0, 1, 19, 20, 45, 46, 61, 62, 63, 65, 67, 69, 70, 71, 91, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 144, 146, 147, 149, 150, 152, 161, 172, 175, 191, 211, 218, 229, 232, 233, 240, 242, 253, 255, 256, 257, 258, 259, 261, 262, 264, 266], "target": [0, 1, 4, 5, 8, 9, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 59, 62, 63, 64, 80, 81, 86, 113, 114, 118, 124, 218, 239, 241, 255, 257, 258, 259, 260, 263, 265], "mltk_uart_stream_data_test_download": 0, "which": [0, 1, 6, 7, 12, 13, 15, 16, 23, 24, 25, 26, 30, 31, 35, 36, 37, 39, 41, 42, 44, 46, 47, 50, 51, 52, 55, 57, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 74, 81, 86, 89, 91, 98, 100, 102, 107, 113, 114, 118, 121, 122, 124, 127, 128, 129, 133, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 166, 185, 191, 193, 215, 216, 223, 229, 232, 236, 238, 240, 242, 243, 248, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "build": [0, 8, 9, 15, 16, 17, 18, 21, 22, 27, 28, 29, 32, 42, 43, 52, 63, 67, 68, 69, 72, 74, 78, 100, 122, 124, 125, 127, 129, 130, 131, 132, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 163, 165, 168, 218, 240, 241, 244, 246, 251, 253, 254, 255, 257, 259, 263, 264, 267], "program": [0, 4, 5, 6, 7, 12, 13, 15, 16, 27, 28, 35, 37, 39, 44, 52, 60, 65, 67, 69, 70, 76, 146, 149, 256, 257, 258, 259, 260, 261, 267], "4": [0, 19, 20, 37, 39, 64, 74, 75, 78, 81, 86, 91, 98, 99, 102, 107, 118, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 176, 211, 219, 242, 247, 249, 250, 253, 255, 257, 258, 259, 260, 261, 263, 265, 266, 267], "run": [0, 1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 25, 26, 46, 47, 48, 49, 50, 53, 55, 58, 59, 60, 61, 62, 63, 65, 71, 73, 74, 75, 81, 86, 102, 111, 113, 114, 115, 116, 117, 118, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 173, 175, 191, 224, 225, 227, 229, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 254, 255, 264, 266, 267], "from": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 57, 58, 60, 61, 62, 63, 64, 65, 68, 69, 72, 73, 74, 80, 81, 82, 83, 84, 86, 87, 94, 96, 98, 99, 102, 105, 107, 113, 114, 118, 119, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 147, 148, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 166, 167, 170, 174, 175, 177, 178, 181, 184, 186, 189, 190, 191, 193, 194, 198, 199, 202, 205, 207, 208, 212, 213, 215, 216, 217, 219, 221, 223, 224, 225, 227, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 262, 263, 264, 267], "virtual": [0, 19, 20, 50, 71, 73, 74, 123, 253, 255, 257, 258, 262], "py": [0, 1, 2, 8, 9, 17, 18, 27, 28, 30, 31, 35, 36, 43, 44, 50, 55, 60, 61, 66, 67, 69, 74, 75, 102, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 165, 166, 168, 207, 208, 212, 217, 218, 219, 220, 224, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 242, 244, 245, 246, 249, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267], "verifi": [0, 8, 9, 74, 208, 248, 255, 257, 258, 259, 267], "transfer": [0, 141, 151, 221, 223, 224, 225, 238, 239, 259], "between": [0, 4, 5, 6, 7, 42, 45, 46, 57, 61, 81, 86, 91, 113, 114, 118, 122, 127, 131, 132, 133, 138, 140, 142, 143, 144, 146, 147, 148, 149, 150, 161, 201, 215, 216, 221, 224, 225, 229, 232, 237, 238, 240, 241, 243, 253, 256, 257, 259, 260, 263, 266], "dev": [0, 1, 2, 34, 43, 44, 71, 78, 142, 144, 146, 147, 148, 149, 150, 258, 259, 260], "us": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 169, 172, 173, 174, 175, 176, 178, 181, 185, 186, 189, 191, 192, 193, 202, 205, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 227, 229, 230, 232, 233, 236, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 260, 262, 263, 264, 265, 267], "audiofeaturegener": [1, 4, 5, 30, 31, 42, 57, 62, 80, 81, 84, 88, 113, 121, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 259, 266], "i": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 53, 54, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 83, 84, 85, 86, 89, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 166, 167, 170, 172, 174, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "softwar": [1, 43, 44, 51, 62, 127, 159, 241, 255, 265], "convert": [1, 2, 8, 9, 35, 36, 37, 39, 41, 46, 52, 56, 57, 61, 68, 69, 76, 80, 81, 83, 84, 85, 86, 88, 90, 91, 96, 99, 100, 102, 118, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 160, 176, 191, 192, 215, 216, 218, 230, 232, 235, 239, 240, 241, 242, 244, 245, 246, 248, 249, 251, 253, 258, 260, 261, 264, 267], "stream": [1, 2, 4, 5, 35, 49, 62, 84, 98, 125, 142, 143, 144, 146, 147, 149, 217, 221, 222, 223, 225, 227, 238, 240, 241, 258, 259, 260, 263], "spectrogram": [1, 4, 5, 14, 30, 31, 42, 45, 46, 57, 62, 80, 81, 83, 84, 88, 113, 127, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 240, 241, 242, 256, 257, 258, 260, 263], "ar": [1, 2, 4, 5, 6, 7, 10, 11, 14, 17, 18, 19, 20, 25, 26, 27, 28, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 48, 49, 52, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 86, 88, 89, 91, 92, 97, 99, 100, 101, 102, 103, 104, 105, 106, 110, 113, 114, 118, 119, 121, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 158, 161, 162, 163, 167, 174, 175, 176, 185, 191, 192, 193, 211, 212, 215, 216, 221, 228, 229, 230, 240, 241, 242, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267], "classif": [1, 4, 5, 6, 7, 12, 13, 35, 36, 57, 67, 116, 119, 128, 129, 131, 132, 133, 135, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 157, 158, 159, 160, 161, 239, 241, 242, 253, 256, 258, 259, 260, 261, 263, 265, 266], "machin": [1, 3, 19, 20, 23, 24, 35, 36, 37, 51, 59, 62, 67, 69, 71, 72, 78, 79, 100, 102, 123, 129, 136, 142, 144, 146, 147, 149, 150, 239, 240, 253, 254, 258, 261, 262, 263, 265, 267], "learn": [1, 3, 23, 24, 34, 35, 36, 37, 43, 44, 51, 59, 62, 67, 69, 70, 71, 72, 78, 79, 100, 102, 124, 128, 129, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 159, 160, 239, 240, 253, 254, 255, 258, 262, 263, 265, 266, 267], "model": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 40, 42, 45, 46, 47, 48, 49, 53, 73, 74, 75, 77, 79, 81, 84, 86, 88, 91, 99, 100, 102, 110, 111, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 126, 161, 163, 165, 166, 167, 168, 169, 172, 173, 174, 175, 177, 178, 181, 184, 185, 186, 190, 191, 193, 194, 198, 199, 201, 202, 205, 228, 231, 239, 241, 253, 254, 267], "make": [1, 14, 27, 28, 45, 47, 48, 51, 61, 67, 102, 122, 127, 129, 131, 132, 133, 138, 142, 144, 146, 147, 149, 150, 151, 215, 216, 227, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267], "predict": [1, 61, 81, 86, 115, 116, 117, 138, 140, 161, 191, 240, 242, 243, 248, 256, 257, 259, 260, 261, 263, 265], "content": [1, 8, 9, 36, 71, 76, 99, 124, 172, 217, 240, 241, 262, 265], "A": [1, 2, 6, 7, 12, 13, 23, 24, 36, 37, 39, 41, 44, 51, 60, 61, 65, 70, 71, 73, 81, 84, 86, 89, 91, 102, 113, 114, 118, 121, 122, 124, 126, 127, 128, 129, 131, 132, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 165, 172, 185, 189, 191, 214, 215, 216, 229, 233, 238, 240, 244, 247, 248, 253, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267], "common": [1, 2, 33, 35, 36, 51, 57, 62, 65, 67, 76, 88, 91, 96, 98, 102, 107, 111, 139, 142, 143, 145, 148, 151, 152, 230, 245, 250, 256, 257, 258, 259, 263, 265, 266], "case": [1, 4, 5, 6, 7, 12, 13, 15, 16, 21, 22, 39, 51, 57, 62, 65, 67, 69, 80, 81, 84, 85, 86, 99, 113, 114, 118, 120, 122, 124, 127, 130, 142, 144, 146, 147, 151, 156, 161, 174, 175, 191, 193, 208, 213, 215, 216, 218, 228, 230, 245, 250, 255, 257, 258, 259, 261, 262, 264, 267], "keyword": [1, 2, 4, 5, 10, 11, 17, 18, 25, 26, 35, 36, 40, 65, 97, 98, 101, 102, 103, 104, 121, 122, 124, 127, 128, 129, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 158, 159, 161, 210, 211, 212, 214, 215, 216, 221, 230, 239, 242, 255, 256, 257, 266, 267], "spot": [1, 2, 4, 5, 35, 36, 98, 99, 127, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 158, 159, 239, 242, 255, 263, 264, 267], "refer": [1, 2, 4, 5, 6, 7, 12, 13, 15, 16, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 49, 52, 56, 58, 64, 67, 73, 74, 80, 81, 83, 91, 98, 112, 113, 114, 115, 116, 117, 118, 120, 121, 124, 138, 140, 155, 156, 158, 160, 163, 172, 175, 177, 178, 181, 184, 186, 190, 191, 194, 197, 198, 199, 201, 202, 205, 211, 227, 230, 235, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267], "more": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 49, 51, 52, 56, 57, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 84, 86, 89, 91, 99, 102, 105, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 131, 132, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 163, 170, 189, 191, 197, 211, 212, 215, 216, 229, 240, 241, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "detail": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 49, 52, 56, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 84, 89, 91, 98, 99, 102, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 124, 131, 132, 140, 144, 146, 147, 149, 150, 151, 156, 161, 163, 172, 173, 191, 197, 208, 211, 212, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267], "how": [1, 2, 3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 34, 35, 36, 37, 38, 39, 41, 43, 44, 49, 53, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 71, 72, 73, 74, 79, 86, 91, 98, 113, 114, 118, 121, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267], "detect": [1, 2, 3, 4, 5, 6, 7, 35, 36, 37, 39, 40, 61, 62, 83, 84, 99, 127, 128, 129, 130, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 158, 160, 234, 239, 243, 246, 251, 256, 257, 258, 260, 263, 267], "tutori": [1, 2, 6, 7, 12, 13, 35, 36, 37, 39, 59, 61, 69, 71, 73, 86, 97, 101, 103, 104, 124, 126, 131, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 211, 212, 240, 253, 254, 255, 258, 262, 264, 266, 267], "complet": [1, 2, 17, 18, 19, 20, 25, 26, 55, 59, 61, 62, 64, 65, 67, 69, 71, 74, 76, 128, 140, 142, 144, 146, 147, 149, 150, 166, 211, 229, 231, 245, 246, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264], "guid": [1, 2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 36, 37, 39, 41, 43, 44, 49, 54, 61, 62, 63, 64, 69, 74, 77, 84, 114, 115, 116, 117, 121, 124, 129, 131, 132, 136, 138, 140, 142, 144, 146, 147, 149, 150, 151, 161, 163, 165, 166, 167, 168, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 265], "an": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 23, 24, 25, 26, 29, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 48, 49, 53, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 73, 74, 76, 77, 79, 80, 81, 84, 85, 86, 89, 91, 95, 96, 98, 113, 114, 118, 119, 121, 122, 124, 125, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 161, 162, 163, 166, 168, 174, 175, 176, 185, 191, 192, 193, 208, 213, 215, 216, 218, 220, 221, 225, 228, 230, 231, 232, 233, 238, 239, 240, 241, 242, 243, 244, 256, 257, 258, 260, 261, 262, 264, 265, 267], "ml": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 25, 26, 59, 61, 65, 68, 69, 72, 127, 130, 135, 140, 142, 144, 147, 150, 152, 159, 163, 239, 240, 241, 242, 253, 256, 257, 259, 260, 263, 264, 266, 267], "There": [1, 52, 57, 71, 142, 144, 147, 150, 229, 241, 255, 256, 257, 258, 259, 260, 261, 266], "three": [1, 39, 42, 63, 71, 74, 91, 102, 103, 122, 144, 151, 215, 216, 229, 239, 242, 261, 266], "main": [1, 43, 81, 93, 143, 145, 148, 151, 154, 217, 229, 260, 264, 265], "part": [1, 47, 74, 81, 99, 102, 113, 114, 118, 122, 142, 143, 144, 146, 147, 149, 176, 192, 215, 216, 253, 256, 257, 258, 259, 261, 265, 267], "provid": [1, 2, 3, 4, 5, 10, 11, 14, 15, 16, 19, 20, 21, 22, 23, 24, 27, 28, 29, 32, 45, 48, 49, 59, 63, 66, 67, 68, 70, 71, 73, 76, 79, 80, 83, 84, 86, 89, 91, 94, 96, 97, 101, 103, 104, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 169, 172, 174, 185, 193, 211, 212, 213, 220, 232, 239, 241, 252, 253, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267], "packag": [1, 2, 8, 9, 33, 34, 43, 45, 47, 48, 66, 71, 73, 75, 81, 97, 101, 103, 104, 111, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 170, 189, 211, 212, 221, 224, 229, 230, 237, 241, 253, 254, 255, 258, 263, 265, 267], "wrap": [1, 64, 86, 175, 230], "host": [1, 19, 20, 23, 24, 29, 32, 33, 42, 44, 46, 64, 168, 176, 192, 240, 255], "graphic": [1, 2, 61, 254], "view": [1, 12, 13, 14, 17, 18, 23, 24, 30, 31, 32, 35, 36, 37, 38, 39, 41, 44, 49, 59, 70, 74, 76, 84, 128, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 162, 168, 174, 193, 240, 241, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267], "real": [1, 2, 4, 5, 14, 30, 31, 40, 61, 62, 84, 86, 98, 176, 192, 240, 257, 258, 259, 260, 263], "time": [1, 2, 4, 5, 6, 7, 14, 15, 16, 30, 31, 35, 37, 40, 51, 61, 62, 63, 67, 68, 69, 70, 72, 73, 81, 84, 86, 102, 113, 114, 118, 127, 128, 129, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 162, 163, 168, 174, 175, 193, 205, 211, 223, 227, 228, 229, 230, 231, 232, 235, 238, 239, 240, 241, 242, 244, 246, 248, 251, 253, 254, 255, 256, 257, 258, 260, 261, 263, 265, 266, 267], "document": [1, 2, 7, 13, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 52, 59, 61, 69, 70, 71, 73, 83, 112, 113, 114, 126, 151, 241, 252, 254, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266], "about": [1, 14, 34, 35, 36, 39, 42, 43, 44, 48, 59, 63, 65, 68, 70, 71, 81, 124, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 172, 223, 246, 254, 256, 258, 261], "tool": [1, 8, 9, 23, 24, 35, 36, 37, 39, 41, 42, 52, 70, 71, 72, 102, 239, 241, 253, 256, 257, 258, 259, 260, 262, 263, 265, 267], "offer": [1, 2, 74, 92, 240, 241, 252, 253, 255, 257, 259, 260, 263, 264, 267], "These": [1, 35, 36, 47, 49, 51, 52, 62, 67, 69, 77, 92, 102, 121, 124, 128, 129, 131, 132, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 240, 242, 244, 245, 246, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 266, 267], "select": [1, 15, 16, 33, 35, 36, 37, 38, 39, 41, 43, 50, 64, 73, 81, 86, 89, 91, 96, 113, 114, 118, 142, 144, 147, 150, 191, 251, 257, 262, 264], "view_audio": [1, 2, 14, 31, 143, 145, 148, 151, 256, 257, 258, 259, 260, 263], "command": [1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 16, 19, 20, 23, 24, 27, 28, 30, 31, 42, 43, 44, 50, 54, 55, 59, 60, 64, 66, 70, 73, 74, 78, 84, 111, 115, 119, 121, 123, 124, 126, 218, 222, 228, 233, 237, 238, 239, 241, 244, 246, 251, 254, 255, 261, 262, 263, 266], "save": [1, 12, 13, 25, 26, 37, 39, 69, 80, 81, 85, 86, 89, 113, 118, 122, 124, 126, 128, 138, 140, 144, 146, 149, 191, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 257, 260, 261, 264, 265, 266], "specif": [1, 8, 9, 14, 19, 20, 25, 26, 30, 31, 33, 37, 39, 41, 44, 49, 50, 55, 57, 59, 60, 63, 65, 66, 68, 70, 71, 72, 74, 77, 84, 111, 114, 115, 116, 119, 121, 122, 123, 125, 127, 137, 139, 161, 163, 166, 175, 177, 178, 180, 181, 183, 184, 185, 186, 188, 190, 191, 193, 194, 196, 197, 198, 199, 202, 204, 205, 215, 216, 240, 241, 244, 245, 246, 248, 249, 251, 252, 253, 254, 256, 258, 260, 262, 265], "train": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 35, 36, 42, 45, 46, 49, 51, 52, 53, 54, 57, 59, 60, 61, 62, 65, 66, 73, 74, 76, 77, 81, 86, 88, 89, 93, 98, 99, 100, 102, 105, 106, 107, 111, 112, 113, 114, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 147, 148, 150, 151, 152, 154, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 214, 239, 241, 242, 243, 245, 248, 250, 253, 262, 264, 265, 266, 267], "intern": [1, 2, 43, 44, 57, 69, 70, 71, 80, 81, 83, 86, 96, 121, 126, 143, 144, 145, 147, 148, 151, 161, 229, 249, 254, 258, 259, 266], "dynam": [1, 35, 41, 62, 67, 69, 83, 84, 129, 142, 144, 146, 147, 148, 149, 150, 255, 257, 258, 259, 260, 261], "dataset": [1, 6, 7, 10, 11, 12, 13, 25, 26, 57, 65, 69, 71, 76, 77, 81, 86, 89, 91, 111, 113, 114, 115, 116, 117, 118, 119, 120, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 152, 154, 161, 211, 221, 239, 242, 246, 248, 251, 253, 254, 261, 263, 264, 266], "At": [1, 35, 36, 43, 62, 67, 69, 73, 100, 124, 129, 131, 132, 136, 142, 143, 144, 146, 147, 149, 150, 193, 248, 253, 255, 257, 258, 259, 261, 264, 267], "end": [1, 27, 28, 35, 37, 39, 41, 52, 61, 65, 67, 69, 80, 85, 98, 102, 113, 114, 118, 121, 122, 124, 126, 131, 132, 136, 142, 143, 144, 146, 147, 156, 159, 176, 192, 215, 216, 239, 240, 253, 255, 257, 259, 261, 262, 263, 267], "emb": [1, 59, 62, 240, 241, 254, 257, 259], "tflite": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 29, 32, 33, 35, 36, 37, 39, 40, 41, 47, 48, 52, 53, 55, 57, 60, 62, 63, 64, 67, 68, 69, 72, 74, 75, 84, 93, 111, 119, 121, 122, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 161, 163, 165, 167, 168, 169, 170, 172, 175, 177, 178, 179, 181, 182, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 198, 199, 201, 202, 203, 205, 206, 239, 240, 246, 250, 251, 253, 256, 257, 258, 259, 260, 263, 264, 265, 266], "copi": [1, 19, 20, 35, 36, 37, 39, 41, 43, 52, 71, 74, 84, 86, 102, 122, 142, 143, 144, 146, 147, 149, 150, 172, 174, 193, 210, 215, 216, 219, 228, 253, 255, 256, 257, 259, 260, 263, 267], "project": [1, 23, 24, 35, 36, 37, 38, 39, 41, 43, 45, 47, 48, 52, 70, 96, 126, 205, 218, 240, 257, 259, 263], "pars": [1, 67, 240], "correspond": [1, 2, 4, 5, 33, 37, 62, 71, 81, 86, 89, 91, 105, 106, 107, 113, 114, 118, 121, 124, 125, 128, 129, 130, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 161, 165, 166, 191, 211, 212, 230, 235, 238, 240, 242, 256, 257, 258, 259, 260, 265, 267], "header": [1, 8, 9, 37, 39, 41, 163, 217, 258, 259], "imag": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 24, 40, 57, 61, 67, 70, 81, 82, 83, 88, 91, 113, 118, 121, 124, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 144, 146, 147, 149, 150, 152, 156, 157, 158, 159, 160, 161, 176, 192, 239, 242, 243, 246, 248, 251, 253, 256, 258, 259, 260, 261, 265], "load": [1, 2, 4, 5, 10, 11, 15, 16, 17, 18, 21, 22, 25, 26, 29, 32, 35, 41, 45, 47, 48, 50, 52, 58, 60, 67, 69, 76, 81, 86, 89, 91, 98, 102, 105, 106, 107, 108, 109, 113, 114, 118, 120, 121, 122, 124, 125, 127, 129, 130, 131, 132, 136, 138, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 159, 161, 163, 165, 166, 168, 172, 173, 175, 189, 191, 193, 211, 212, 217, 230, 231, 240, 244, 245, 246, 249, 251, 253, 255, 256, 259, 263, 264, 267], "onto": [1, 60, 64, 255, 256, 265], "tensorflow": [1, 8, 9, 15, 16, 23, 24, 33, 35, 36, 39, 41, 42, 44, 46, 47, 52, 53, 54, 59, 61, 62, 63, 69, 70, 74, 75, 80, 85, 91, 102, 107, 111, 112, 113, 114, 118, 122, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 166, 191, 193, 219, 229, 239, 241, 242, 244, 245, 247, 248, 249, 250, 253, 255, 257, 258, 259, 260, 264, 265], "lite": [1, 15, 16, 21, 22, 33, 35, 36, 39, 41, 42, 46, 47, 49, 52, 53, 57, 61, 62, 63, 69, 111, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 163, 169, 172, 173, 175, 193, 239, 241, 244, 245, 249, 250, 253, 260, 264], "micro": [1, 15, 16, 33, 35, 36, 39, 41, 42, 46, 47, 49, 52, 62, 63, 65, 67, 69, 76, 80, 81, 83, 111, 136, 139, 154, 155, 163, 169, 172, 173, 175, 246, 248, 250, 251, 253, 259, 260, 265, 266], "interpret": [1, 39, 41, 42, 46, 48, 50, 52, 65, 73, 76, 111, 122, 136, 138, 169, 170, 172, 173, 175, 191, 215, 216, 229, 240, 259, 262], "On": [1, 4, 5, 6, 7, 12, 13, 35, 37, 39, 43, 71, 77, 102, 141, 145, 146, 147, 239, 255, 257], "runtim": [1, 2, 35, 36, 41, 45, 47, 48, 57, 62, 63, 77, 124, 128, 130, 131, 132, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 173, 201, 205, 242, 244, 246, 247, 250, 251, 253, 256, 257, 259, 260, 263, 264, 265], "read": [1, 8, 9, 15, 16, 37, 39, 75, 80, 81, 83, 85, 86, 99, 100, 111, 129, 131, 132, 136, 142, 144, 146, 147, 149, 150, 221, 223, 225, 231, 232, 237, 238, 253, 256, 257, 259, 265], "microphon": [1, 4, 5, 14, 35, 36, 40, 62, 67, 95, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 240, 257, 258, 259, 260, 263], "b": [1, 17, 18, 21, 22, 29, 32, 34, 71, 81, 84, 131, 132, 133, 135, 138, 140, 152, 248, 253, 254, 255, 259], "sent": [1, 36, 211, 223, 238, 255, 258, 259, 260, 267], "where": [1, 12, 13, 14, 17, 18, 19, 20, 27, 28, 35, 36, 37, 39, 41, 52, 53, 60, 64, 65, 70, 71, 77, 81, 86, 89, 91, 98, 100, 102, 121, 122, 128, 130, 135, 138, 140, 142, 144, 147, 150, 152, 161, 163, 172, 185, 193, 207, 208, 211, 212, 215, 216, 254, 255, 256, 259, 264, 265, 267], "exact": [1, 45, 57, 68, 81, 86, 155, 229, 240, 255, 256, 259, 265], "same": [1, 10, 11, 17, 18, 23, 24, 25, 26, 35, 36, 37, 39, 45, 55, 57, 61, 65, 67, 69, 70, 86, 89, 102, 113, 114, 118, 119, 122, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 191, 192, 207, 214, 215, 216, 230, 240, 242, 243, 244, 246, 247, 248, 250, 253, 255, 256, 257, 258, 259, 260, 263, 264, 265, 267], "algorithm": [1, 42, 45, 46, 57, 61, 143, 145, 148, 151, 152, 208, 220, 240, 256, 257, 259, 260], "were": [1, 47, 57, 61, 102, 121, 124, 144, 146, 147, 149, 153, 156, 163, 232, 240, 242, 244, 245, 246, 248, 249, 251, 257, 258, 259, 260, 263, 265, 266], "dure": [1, 10, 11, 17, 18, 23, 24, 25, 26, 33, 42, 53, 54, 57, 60, 62, 67, 70, 81, 88, 111, 112, 113, 114, 115, 116, 117, 118, 122, 124, 129, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 161, 232, 239, 240, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265], "classifi": [1, 4, 5, 6, 7, 14, 40, 52, 61, 62, 67, 96, 113, 118, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 240, 246, 251, 256, 257, 260, 261, 263, 265, 266], "d": [1, 4, 5, 12, 13, 15, 16, 27, 28, 81, 84, 86, 129, 136, 142, 144, 146, 147, 149, 150, 174, 193, 230, 235, 238, 259, 267], "notifi": [1, 36, 40, 254], "also": [1, 2, 4, 5, 19, 20, 27, 28, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 49, 51, 55, 57, 60, 61, 62, 63, 65, 67, 68, 70, 71, 72, 74, 78, 80, 81, 86, 91, 96, 100, 102, 119, 122, 124, 129, 130, 131, 132, 133, 134, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 175, 176, 191, 192, 215, 216, 230, 237, 240, 242, 246, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267], "ensur": [1, 14, 25, 26, 34, 43, 44, 54, 56, 58, 69, 70, 71, 74, 89, 102, 113, 114, 118, 128, 129, 135, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 155, 175, 238, 240, 248, 249, 253, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267], "type": [1, 39, 50, 56, 62, 63, 65, 67, 68, 75, 80, 81, 83, 84, 85, 86, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 213, 214, 217, 218, 219, 220, 222, 223, 225, 227, 228, 229, 230, 232, 233, 235, 236, 238, 242, 243, 244, 246, 247, 248, 250, 251, 253, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 267], "wa": [1, 4, 5, 19, 20, 35, 36, 37, 61, 62, 63, 71, 83, 91, 98, 102, 122, 126, 138, 140, 142, 144, 145, 146, 147, 149, 150, 151, 152, 157, 159, 163, 169, 174, 191, 199, 223, 232, 240, 242, 243, 248, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267], "should": [1, 2, 6, 7, 10, 11, 12, 13, 37, 39, 43, 44, 50, 57, 61, 62, 65, 66, 67, 69, 70, 71, 73, 74, 75, 81, 84, 86, 89, 91, 102, 113, 114, 115, 116, 117, 118, 119, 121, 122, 124, 125, 127, 128, 131, 132, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 161, 163, 191, 212, 225, 229, 238, 240, 246, 251, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "allow": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 19, 20, 25, 26, 27, 28, 30, 31, 33, 39, 41, 42, 45, 46, 47, 48, 52, 57, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 81, 85, 86, 88, 89, 91, 121, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 166, 169, 170, 175, 185, 189, 193, 212, 221, 224, 225, 229, 230, 231, 237, 238, 239, 240, 248, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267], "better": [1, 67, 70, 124, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 239, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 266, 267], "perform": [1, 10, 11, 14, 35, 36, 40, 41, 61, 65, 86, 96, 100, 113, 114, 118, 124, 129, 131, 132, 136, 143, 145, 148, 151, 161, 191, 253, 256, 257, 258, 259, 260, 261, 263, 266, 267], "automat": [1, 4, 5, 6, 7, 12, 13, 15, 16, 17, 18, 23, 24, 33, 35, 36, 37, 39, 41, 44, 51, 52, 57, 60, 65, 67, 70, 71, 81, 85, 86, 89, 91, 113, 114, 118, 120, 121, 124, 126, 129, 131, 132, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 163, 191, 208, 211, 217, 219, 220, 229, 232, 240, 253, 254, 255, 256, 257, 258, 259, 264, 266], "lock": [1, 229, 240], "step": [1, 33, 44, 50, 62, 71, 73, 74, 81, 84, 86, 113, 114, 115, 116, 117, 118, 124, 126, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 191, 240, 254, 256, 257, 258, 259, 260, 261, 262, 263], "design": [1, 35, 36, 37, 102, 131, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 240, 256, 257, 260, 261, 263, 265], "onli": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 19, 20, 27, 28, 33, 35, 36, 37, 39, 41, 44, 57, 62, 63, 65, 67, 68, 71, 72, 75, 80, 81, 86, 89, 91, 102, 113, 114, 115, 116, 118, 120, 121, 122, 124, 125, 126, 127, 129, 131, 132, 133, 136, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 156, 161, 163, 167, 175, 191, 192, 208, 211, 213, 215, 216, 218, 223, 228, 236, 238, 241, 244, 246, 248, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267], "distribut": [1, 59, 60, 62, 71, 86, 240, 241, 255, 261, 264, 265, 266], "singl": [1, 33, 44, 50, 60, 81, 86, 102, 191, 229, 230, 255, 262, 267], "come": [1, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 64, 67, 70, 110, 139, 143, 148, 177, 178, 181, 184, 186, 190, 194, 198, 199, 202, 205, 221, 242, 253, 255, 257, 259, 262, 263, 264, 265, 266], "full": [1, 15, 16, 34, 43, 44, 71, 74, 77, 99, 102, 124, 140, 142, 143, 171, 188, 218, 228, 255, 256, 258, 259, 264, 267], "larg": [1, 23, 24, 51, 70, 71, 81, 86, 99, 124, 128, 129, 136, 142, 144, 146, 147, 149, 150, 161, 255, 258, 259, 260, 263, 264, 266, 267], "base": [1, 12, 13, 29, 32, 35, 36, 39, 44, 63, 64, 67, 69, 76, 81, 86, 102, 113, 114, 115, 116, 117, 118, 123, 124, 126, 127, 130, 131, 142, 143, 144, 145, 146, 147, 149, 150, 151, 160, 161, 191, 210, 211, 212, 213, 217, 228, 253, 255, 257, 258, 259, 260, 266, 267], "googl": [1, 2, 45, 49, 59, 62, 69, 128, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 185, 211, 212, 230, 240, 241, 252, 255, 256, 257, 258, 259, 261, 263, 265], "microfrontend": [1, 45, 83, 146, 149, 156, 159], "call": [1, 19, 20, 35, 36, 57, 61, 70, 81, 83, 86, 99, 113, 114, 118, 120, 121, 122, 126, 127, 129, 131, 132, 136, 138, 140, 142, 144, 146, 147, 149, 150, 161, 174, 175, 189, 191, 211, 215, 216, 219, 225, 229, 238, 240, 248, 253, 254, 256, 257, 259, 262, 265, 266], "frontend": [1, 81, 83, 134, 143, 144, 148, 242, 265], "receiv": [1, 37, 61, 161, 222, 223, 232, 237, 238, 255, 258], "raw": [1, 4, 5, 6, 7, 12, 13, 35, 51, 57, 80, 81, 83, 86, 88, 95, 108, 109, 134, 140, 142, 144, 146, 148, 149, 150, 156, 159, 242, 244, 246, 247, 248, 250, 251, 256, 257, 258, 259, 261, 266], "produc": [1, 61, 133, 138, 140, 176, 192, 256, 257], "filter": [1, 35, 36, 62, 65, 67, 69, 84, 127, 128, 129, 133, 134, 135, 138, 140, 142, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 157, 159, 160, 178, 180, 181, 183, 188, 195, 202, 204, 244, 246, 247, 248, 250, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266], "bank": 1, "vector": [1, 131, 133, 135, 138, 140, 152, 191, 253, 256, 257, 263, 265], "valu": [1, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 27, 28, 35, 41, 47, 51, 61, 62, 67, 69, 71, 80, 81, 83, 84, 86, 90, 105, 107, 113, 114, 115, 116, 117, 118, 121, 122, 124, 126, 127, 128, 129, 130, 131, 132, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 161, 163, 166, 172, 174, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 204, 205, 209, 212, 213, 214, 215, 216, 223, 227, 228, 229, 230, 235, 242, 248, 253, 254, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267], "expect": [1, 14, 39, 56, 61, 80, 114, 118, 120, 121, 127, 134, 140, 142, 143, 144, 147, 148, 150, 156, 161, 242, 244, 245, 246, 249, 251, 257, 259, 260, 264, 265], "16": [1, 39, 62, 84, 97, 101, 102, 103, 104, 124, 127, 128, 129, 130, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 160, 211, 242, 244, 246, 247, 248, 250, 251, 257, 258, 259, 260, 263, 265, 266, 267], "bit": [1, 34, 39, 43, 44, 62, 84, 86, 97, 101, 102, 103, 104, 176, 192, 211, 238, 257, 259, 264, 266], "pcm": [1, 97, 99, 100, 101, 102, 103, 104, 211], "configur": [1, 19, 20, 23, 24, 25, 26, 33, 35, 36, 37, 39, 41, 45, 47, 48, 50, 59, 62, 63, 65, 67, 69, 77, 81, 83, 86, 90, 114, 120, 124, 126, 131, 132, 134, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 159, 160, 163, 210, 211, 212, 218, 225, 226, 253, 254, 258, 267], "sampl": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 23, 24, 35, 49, 51, 57, 61, 62, 65, 67, 70, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 120, 122, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 191, 209, 210, 213, 214, 215, 216, 240, 246, 248, 251, 253, 255, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267], "rate": [1, 44, 62, 63, 80, 83, 84, 91, 96, 102, 113, 124, 128, 129, 130, 134, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 209, 210, 212, 216, 232, 238, 242, 244, 247, 254, 257, 259, 260, 261, 263, 265, 267], "signal": [1, 2, 62, 84, 140, 142, 144, 147, 150, 234, 236, 258, 259, 260], "goe": [1, 35, 36, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 257, 259, 263], "through": [1, 10, 11, 12, 13, 37, 50, 61, 62, 80, 81, 96, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 176, 191, 248, 254, 256, 257, 258, 259, 261, 263, 265, 266], "pre": [1, 2, 15, 16, 17, 18, 21, 22, 29, 32, 37, 74, 88, 111, 113, 118, 127, 128, 129, 130, 135, 136, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 239, 240, 241, 256, 257, 258, 260, 261, 265, 266], "emphasi": 1, "option": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 39, 41, 43, 45, 47, 48, 50, 52, 61, 62, 63, 65, 67, 68, 69, 70, 72, 74, 75, 77, 78, 81, 86, 89, 91, 113, 114, 118, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 175, 177, 178, 179, 181, 182, 184, 185, 186, 187, 190, 193, 194, 195, 198, 199, 202, 203, 205, 206, 207, 211, 215, 216, 218, 222, 225, 226, 227, 228, 229, 238, 243, 244, 247, 249, 253, 254, 256, 257, 258, 259, 260, 261, 263, 265], "get": [1, 8, 9, 14, 34, 43, 44, 56, 70, 71, 73, 74, 82, 84, 86, 87, 113, 121, 124, 129, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 174, 177, 178, 181, 184, 186, 190, 191, 193, 194, 198, 199, 202, 205, 227, 230, 242, 248, 254, 255, 256, 258, 259, 260, 261, 264, 265, 266, 267], "slice": [1, 122, 215, 216], "potenti": [1, 99, 124], "overlap": [1, 122, 215, 216], "frame": [1, 62, 84], "window": [1, 2, 4, 5, 14, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 47, 48, 53, 62, 64, 74, 75, 77, 78, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 159, 236, 241, 255, 259, 260, 263], "function": [1, 65, 67, 69, 75, 80, 81, 83, 85, 86, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 120, 121, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 207, 208, 217, 218, 219, 220, 227, 228, 229, 230, 233, 235, 236, 244, 245, 246, 249, 251, 253, 255, 257, 258, 259, 260, 263, 264], "appli": [1, 4, 5, 23, 24, 35, 43, 62, 65, 67, 70, 81, 86, 90, 98, 113, 114, 118, 124, 127, 128, 129, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 192, 209, 211, 212, 256, 258, 259, 260, 261, 263, 264, 266, 267], "each": [1, 8, 9, 10, 11, 23, 24, 35, 36, 39, 41, 49, 57, 61, 62, 65, 67, 68, 70, 75, 81, 85, 86, 89, 91, 96, 98, 99, 102, 105, 106, 107, 113, 114, 118, 121, 122, 124, 127, 128, 129, 130, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 161, 163, 166, 172, 175, 191, 211, 212, 215, 216, 217, 223, 229, 232, 233, 240, 248, 252, 253, 254, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267], "afterward": 1, "we": [1, 2, 19, 20, 34, 35, 36, 43, 44, 50, 55, 57, 60, 61, 67, 68, 69, 72, 86, 98, 100, 102, 113, 118, 119, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 229, 242, 246, 248, 251, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "do": [1, 19, 20, 25, 26, 43, 53, 69, 71, 84, 86, 89, 102, 113, 114, 118, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 191, 208, 218, 230, 242, 249, 253, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267], "fourier": 1, "transform": [1, 81, 82, 86, 87, 129, 142, 144, 146, 147, 149, 150, 257, 259, 260, 264, 265], "short": [1, 96, 100, 142, 144, 146, 147, 148, 149, 150, 259, 266], "calcul": [1, 4, 5, 6, 7, 27, 28, 35, 61, 62, 63, 83, 84, 91, 113, 114, 118, 128, 129, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 161, 167, 178, 180, 181, 183, 186, 188, 192, 194, 196, 202, 204, 208, 240, 256, 257, 259, 264, 265], "power": [1, 37, 62, 100, 151, 152, 257, 258, 259, 267], "spectrum": 1, "subsequ": [1, 81, 86, 113, 118, 223, 257], "comput": [1, 19, 20, 23, 24, 51, 62, 70, 74, 77, 84, 86, 102, 124, 128, 129, 136, 142, 146, 149, 255, 259, 260, 261, 263, 264, 266], "slight": 1, "modif": [1, 27, 28, 86], "so": [1, 43, 51, 57, 67, 69, 70, 71, 81, 83, 102, 113, 118, 124, 129, 132, 133, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 192, 214, 240, 242, 248, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "can": [1, 2, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 23, 24, 27, 28, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 49, 52, 53, 55, 57, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 81, 86, 89, 91, 98, 100, 102, 106, 107, 113, 114, 118, 121, 122, 124, 125, 128, 129, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 163, 175, 185, 191, 193, 207, 215, 216, 223, 228, 229, 230, 240, 241, 242, 244, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "linux": [1, 2, 14, 33, 34, 35, 37, 38, 39, 41, 42, 43, 45, 47, 48, 53, 64, 74, 75, 78, 236, 241, 255], "sl_ml_audio_feature_gener": 1, "gecko_sdk": [1, 43], "audio_feature_gener": [1, 81, 113, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 259, 260], "execut": [1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 19, 20, 25, 26, 35, 39, 40, 42, 45, 47, 48, 51, 52, 57, 59, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 78, 80, 85, 86, 121, 122, 123, 129, 136, 142, 144, 146, 147, 149, 150, 152, 163, 170, 172, 175, 228, 229, 230, 233, 236, 240, 241, 244, 246, 251, 253, 255, 256, 257, 258, 259, 260, 262, 263, 265, 267], "becaus": [1, 57, 67, 143, 240, 255, 257, 259, 261, 263, 264, 266], "devic": [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 27, 28, 35, 36, 37, 39, 41, 43, 45, 47, 48, 53, 56, 60, 61, 62, 64, 65, 67, 68, 69, 76, 77, 78, 79, 99, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 174, 221, 222, 223, 224, 225, 228, 231, 237, 238, 239, 240, 242, 253, 254, 255, 256, 258, 260, 261, 263, 264, 265, 267], "mai": [1, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 25, 26, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 53, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 88, 95, 100, 110, 111, 113, 114, 118, 119, 121, 122, 124, 127, 128, 129, 131, 132, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 161, 162, 175, 176, 192, 211, 214, 215, 216, 221, 223, 233, 238, 241, 242, 243, 246, 248, 251, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "hopefulli": [1, 140, 240, 257, 259, 263], "lead": [1, 67, 86, 122, 143, 145, 146, 148, 149, 151, 152, 215, 216, 240, 257], "accur": [1, 10, 14, 144, 240, 257, 259, 260, 261, 264, 265, 266], "pybind11": [1, 46], "binari": [1, 33, 52, 58, 61, 62, 76, 81, 86, 113, 118, 122, 131, 133, 137, 138, 140, 143, 161, 176, 185, 189, 191, 192, 193, 217, 221, 224, 225, 232, 237, 238, 253, 259], "api": [1, 10, 15, 17, 21, 25, 27, 29, 45, 47, 48, 59, 60, 66, 73, 74, 83, 88, 89, 91, 92, 113, 114, 115, 116, 117, 121, 124, 127, 128, 129, 131, 132, 134, 135, 136, 137, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 175, 185, 191, 193, 211, 219, 221, 223, 225, 238, 240, 241, 242, 253, 254, 255, 257, 259, 261, 262, 265, 266, 267], "found": [1, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 52, 55, 58, 59, 61, 62, 63, 65, 67, 68, 69, 72, 84, 86, 88, 89, 91, 107, 110, 122, 124, 125, 130, 133, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 172, 174, 191, 193, 208, 215, 216, 221, 227, 228, 230, 232, 244, 245, 246, 247, 248, 249, 250, 251, 253, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267], "here": [1, 34, 35, 36, 37, 39, 43, 44, 53, 58, 61, 64, 67, 69, 80, 83, 86, 99, 128, 129, 131, 132, 134, 136, 140, 145, 146, 149, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 265, 267], "core": [1, 62, 65, 67, 71, 74, 88, 102, 111, 119, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 189, 229, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 265], "preprocess": [1, 67, 111, 113, 118, 127, 128, 129, 131, 132, 133, 134, 135, 136, 140, 152, 155, 156, 157, 159, 160, 242, 248, 253, 255, 260, 265, 266], "audio_feature_generator_wrapp": [1, 42, 45], "when": [1, 4, 5, 6, 7, 12, 13, 23, 24, 27, 28, 35, 36, 37, 39, 40, 41, 43, 45, 47, 48, 51, 52, 53, 57, 61, 62, 65, 69, 70, 71, 73, 75, 78, 84, 86, 89, 91, 102, 113, 114, 118, 120, 121, 122, 124, 126, 127, 128, 129, 131, 132, 136, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 163, 167, 175, 192, 211, 215, 216, 219, 229, 234, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267], "instal": [1, 2, 14, 45, 47, 48, 50, 58, 64, 70, 73, 75, 77, 86, 111, 129, 142, 144, 146, 147, 149, 150, 211, 230, 253, 254, 258, 261, 263, 267], "local": [1, 2, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 23, 24, 27, 28, 29, 32, 34, 35, 37, 39, 43, 49, 63, 72, 73, 77, 123, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 163, 168, 191, 207, 208, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 261, 262, 263, 265, 267], "dll": [1, 53], "directori": [1, 2, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 25, 26, 27, 28, 33, 34, 42, 43, 44, 45, 47, 48, 55, 66, 67, 69, 70, 75, 77, 80, 81, 82, 85, 86, 87, 89, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 118, 121, 122, 123, 124, 129, 133, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 157, 159, 160, 161, 163, 166, 167, 207, 208, 211, 212, 218, 228, 230, 233, 236, 242, 255, 256, 257, 258, 259, 263, 264, 265, 267], "recommend": [1, 2, 4, 5, 33, 62, 65, 73, 74, 81, 151, 255, 256, 257, 258, 259, 260, 262, 267], "wai": [1, 19, 20, 51, 52, 57, 62, 70, 71, 84, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 229, 255, 256, 257, 258, 259, 260, 261, 263, 264, 266, 267], "apply_frontend": [1, 80, 81, 83, 129, 142, 143, 144, 146, 147, 148, 149, 150, 242, 260, 266], "keyword_spotting_on_off_v3": [1, 2, 19, 20, 35, 67, 71, 255, 259], "basic": [1, 2, 19, 20, 34, 61, 68, 69, 70, 71, 74, 119, 128, 129, 131, 132, 134, 135, 136, 137, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 163, 193, 246, 253, 255, 256, 258, 260, 263, 265, 267], "In": [1, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 35, 36, 37, 39, 44, 51, 57, 61, 62, 63, 65, 67, 68, 71, 72, 74, 80, 81, 84, 85, 86, 96, 113, 114, 118, 120, 122, 124, 128, 130, 131, 132, 138, 140, 142, 143, 144, 145, 146, 147, 149, 151, 155, 174, 191, 193, 208, 212, 213, 215, 216, 218, 229, 241, 242, 244, 245, 246, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "defin": [1, 19, 20, 25, 26, 33, 35, 41, 44, 50, 52, 57, 61, 62, 67, 69, 71, 75, 76, 83, 84, 119, 121, 124, 128, 129, 131, 132, 133, 135, 136, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 161, 185, 189, 205, 212, 228, 240, 253, 254, 255, 256, 258, 260, 262, 264, 265, 266, 267], "object": [1, 61, 67, 69, 71, 84, 111, 112, 113, 118, 119, 121, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 167, 169, 174, 176, 177, 178, 181, 184, 185, 186, 190, 191, 192, 193, 194, 198, 199, 202, 205, 220, 227, 228, 229, 230, 232, 233, 235, 253, 261], "inherit": [1, 61, 67, 69, 119, 129, 131, 132, 136, 142, 144, 146, 147, 149, 150, 185, 193, 253, 257, 259, 265], "datasetmixin": [1, 67, 69, 119, 120, 129, 130, 131, 132, 136, 138, 142, 144, 146, 147, 149, 150, 154, 253, 254, 259], "class": [1, 4, 5, 6, 7, 10, 11, 35, 36, 39, 61, 62, 69, 71, 80, 81, 82, 83, 84, 86, 87, 89, 91, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 166, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 213, 214, 215, 216, 219, 222, 223, 225, 226, 227, 229, 230, 232, 234, 235, 238, 242, 243, 246, 247, 248, 250, 251, 253, 254, 255, 256, 260, 261, 263, 266], "mymodel": [1, 61, 67, 69, 71, 115, 116, 117, 119, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 253, 254, 256, 257, 259, 260, 261, 263, 266], "mltkmodel": [1, 10, 11, 15, 16, 25, 26, 27, 28, 49, 61, 62, 71, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 250, 253, 254, 257, 259, 266], "trainmixin": [1, 61, 65, 67, 69, 71, 119, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 240, 245, 253, 254, 256, 257, 259], "evaluateclassifiermixin": [1, 67, 69, 71, 119, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 159, 160, 253, 254, 257, 259], "pass": [1, 10, 11, 71, 81, 86, 113, 114, 118, 119, 121, 122, 124, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 159, 160, 176, 211, 230, 253, 254, 255, 257, 259, 260, 263, 267], "frontend_set": [1, 81, 83, 84, 113, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 258, 259, 260, 263], "audiofeaturegeneratorset": [1, 62, 80, 81, 83, 113, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 258, 259, 260, 263], "sample_rate_hz": [1, 62, 81, 83, 84, 91, 98, 113, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 258, 259, 260, 263], "16000": [1, 83, 84, 94, 95, 96, 98, 102, 128, 129, 142, 143, 144, 146, 147, 148, 149, 150, 151, 155, 242, 258, 259, 260, 263], "sample_length_m": [1, 62, 81, 82, 83, 84, 113, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 258, 259, 260, 263], "1000": [1, 23, 24, 62, 70, 81, 83, 84, 89, 91, 124, 127, 128, 129, 134, 136, 142, 143, 144, 145, 146, 147, 149, 150, 151, 154, 155, 229, 242, 250, 259, 260, 263, 265, 266], "buffer": [1, 41, 57, 142, 143, 144, 146, 147, 149, 150, 172, 173, 176, 191, 192, 223, 232, 238, 258, 259, 260, 263, 264], "enough": [1, 39, 143, 144, 147, 150, 255, 257, 258, 259, 260, 261, 263], "captur": [1, 2, 4, 5, 12, 13, 35, 37, 40, 95, 102, 142, 144, 147, 150, 231, 256, 257, 258, 259, 260], "window_size_m": [1, 62, 83, 84, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 258, 259, 260, 263], "30": [1, 80, 83, 84, 128, 129, 130, 134, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 242, 244, 247, 257, 258, 259, 260, 263, 267], "window_step_m": [1, 62, 83, 84, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 258, 259, 260, 263], "10": [1, 19, 20, 34, 37, 39, 43, 44, 62, 67, 69, 73, 74, 78, 83, 84, 105, 106, 107, 113, 114, 118, 124, 128, 129, 130, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 176, 192, 212, 242, 244, 246, 247, 250, 253, 255, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267], "filterbank_n_channel": [1, 62, 83, 84, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 258, 259, 260, 263], "104": [1, 143, 144, 147, 150, 151, 157, 242, 259, 260, 263], "want": [1, 35, 36, 57, 64, 73, 86, 100, 102, 113, 118, 119, 124, 129, 131, 132, 133, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 241, 242, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267], "possibl": [1, 54, 62, 81, 84, 86, 122, 124, 125, 142, 144, 145, 146, 147, 148, 149, 150, 151, 211, 212, 215, 216, 256, 257, 258, 259, 260, 261, 264, 267], "while": [1, 2, 4, 5, 6, 7, 12, 13, 19, 20, 35, 37, 41, 44, 51, 58, 61, 67, 68, 69, 71, 81, 86, 89, 119, 129, 131, 132, 136, 138, 140, 142, 144, 146, 147, 149, 150, 151, 161, 163, 166, 172, 174, 175, 208, 218, 223, 229, 230, 237, 238, 244, 245, 246, 249, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267], "still": [1, 33, 81, 86, 142, 143, 144, 147, 150, 255, 258, 259, 260, 261, 263, 267], "effici": [1, 14, 15, 16, 59, 61, 63, 67, 81, 88, 127, 142, 143, 144, 146, 147, 149, 150, 241, 244, 255, 257, 258, 259, 260, 261, 263, 264, 265], "hardwar": [1, 6, 7, 12, 13, 14, 15, 16, 33, 41, 42, 44, 46, 51, 64, 73, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 167, 169, 172, 175, 239, 255, 259, 264, 265], "filterbank_upper_band_limit": [1, 62, 83, 84, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 258, 259, 260, 263], "7500": [1, 83, 84, 134, 142, 144, 147, 150, 155, 242, 258, 259, 260], "filterbank_lower_band_limit": [1, 62, 83, 84, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 258, 259, 260, 263], "125": [1, 83, 84, 128, 134, 142, 143, 144, 146, 147, 149, 150, 151, 152, 155, 242, 257, 258, 259, 260, 263], "mic": [1, 142, 144, 146, 147, 148, 149, 150, 258, 259, 260], "seem": [1, 142, 144, 146, 147, 148, 149, 150, 258, 259, 260, 266], "have": [1, 2, 4, 5, 6, 7, 12, 13, 23, 24, 35, 36, 37, 39, 44, 46, 51, 54, 55, 60, 61, 62, 65, 67, 68, 69, 71, 73, 74, 81, 86, 89, 91, 100, 102, 113, 114, 115, 116, 117, 118, 121, 122, 124, 127, 129, 131, 132, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 163, 185, 191, 193, 215, 216, 218, 229, 232, 245, 250, 253, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267], "lot": [1, 41, 142, 144, 146, 147, 148, 149, 150, 255, 258, 259, 260, 267], "nois": [1, 2, 62, 67, 81, 84, 86, 113, 114, 118, 129, 135, 140, 142, 143, 144, 146, 147, 148, 149, 150, 152, 257, 258, 259, 260, 263], "lower": [1, 2, 23, 24, 39, 70, 71, 81, 86, 90, 122, 124, 140, 142, 144, 146, 147, 148, 149, 150, 215, 216, 228, 255, 256, 258, 259, 260, 264], "frequenc": [1, 23, 24, 62, 70, 84, 96, 124, 128, 129, 136, 142, 144, 146, 147, 148, 149, 150, 156, 159, 258, 259, 260, 263, 266], "noise_reduction_en": [1, 2, 62, 83, 84, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 258, 259, 260, 263], "true": [1, 23, 24, 50, 63, 67, 69, 70, 71, 80, 81, 83, 84, 85, 86, 89, 90, 91, 93, 102, 113, 114, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 168, 175, 176, 191, 192, 199, 201, 207, 208, 211, 212, 213, 215, 216, 217, 218, 223, 225, 227, 228, 229, 230, 232, 234, 235, 237, 238, 242, 243, 244, 246, 248, 249, 251, 253, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "enabl": [1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 41, 43, 44, 46, 50, 61, 62, 67, 70, 72, 81, 83, 84, 86, 91, 98, 99, 100, 111, 115, 116, 121, 122, 124, 128, 129, 134, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 156, 161, 169, 172, 175, 218, 221, 224, 225, 240, 241, 246, 251, 254, 256, 257, 258, 259, 260, 261, 263, 265, 267], "reduct": [1, 2, 62, 84, 129, 138, 142, 144, 146, 147, 148, 149, 150, 258, 259, 260, 263], "block": [1, 62, 84, 127, 129, 140, 142, 144, 146, 147, 148, 149, 150, 238, 255, 256, 258, 259, 260, 262, 263], "help": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 39, 41, 43, 44, 51, 52, 58, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 84, 95, 102, 119, 124, 129, 131, 132, 133, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 175, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267], "ignor": [1, 35, 36, 39, 86, 102, 113, 114, 115, 116, 117, 118, 122, 124, 127, 142, 144, 146, 147, 149, 150, 163, 191, 215, 216, 218, 230, 232, 256, 258, 259, 260, 267], "background": [1, 71, 81, 86, 142, 143, 144, 146, 147, 148, 149, 150, 257, 258, 259, 260], "field": [1, 65, 66, 70, 121, 122, 124, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 163, 191, 211, 215, 216, 219, 255, 257, 258, 259, 260, 261, 267], "noise_reduction_smoothing_bit": [1, 62, 83, 84, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 258, 259, 260, 263], "noise_reduction_even_smooth": [1, 62, 83, 84, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 258, 259, 260, 263], "025": [1, 83, 84, 128, 142, 143, 144, 146, 147, 149, 150, 151, 155, 258, 259, 260, 263], "noise_reduction_odd_smooth": [1, 62, 83, 84, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 258, 259, 260, 263], "06": [1, 83, 84, 128, 142, 143, 144, 146, 147, 148, 149, 150, 151, 155, 246, 247, 250, 251, 257, 258, 259, 260, 263, 265], "noise_reduction_min_signal_remain": [1, 62, 83, 84, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 258, 259, 260, 263], "40": [1, 83, 84, 129, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 159, 242, 257, 258, 259, 260, 263, 267], "fairli": [1, 142, 144, 147, 150, 151, 258, 259, 260, 261, 267], "small": [1, 65, 102, 120, 129, 131, 132, 136, 138, 142, 144, 146, 147, 149, 150, 151, 163, 253, 255, 257, 258, 259, 260, 263, 265, 267], "But": [1, 57, 142, 144, 147, 150, 258, 259, 260], "ha": [1, 4, 5, 6, 7, 8, 9, 14, 21, 22, 35, 36, 37, 39, 42, 44, 51, 57, 58, 60, 62, 63, 65, 70, 71, 74, 81, 84, 86, 89, 91, 99, 111, 113, 114, 118, 121, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 174, 176, 178, 181, 185, 191, 192, 193, 202, 207, 208, 211, 215, 216, 228, 232, 236, 242, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267], "been": [1, 4, 5, 6, 7, 12, 13, 14, 21, 22, 35, 36, 57, 62, 65, 71, 74, 100, 121, 122, 124, 130, 140, 142, 144, 146, 147, 149, 150, 163, 208, 211, 215, 216, 218, 232, 245, 250, 253, 255, 257, 258, 259, 260, 261, 263, 265, 267], "give": [1, 4, 5, 6, 7, 14, 39, 86, 102, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 207, 242, 248, 257, 258, 259, 260], "good": [1, 67, 69, 142, 144, 146, 147, 149, 150, 255, 257, 258, 259, 260, 264, 266], "result": [1, 2, 4, 5, 6, 7, 10, 11, 15, 16, 19, 20, 25, 26, 35, 36, 39, 53, 56, 60, 62, 63, 113, 115, 116, 117, 118, 122, 124, 128, 129, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 161, 163, 166, 169, 172, 174, 191, 215, 216, 229, 242, 243, 244, 249, 254, 256, 257, 258, 259, 260, 264, 265], "some": [1, 4, 5, 6, 7, 21, 22, 27, 28, 33, 34, 35, 36, 43, 44, 48, 57, 67, 68, 73, 74, 76, 86, 91, 102, 124, 128, 129, 133, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 191, 228, 247, 248, 253, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265], "actual": [1, 48, 61, 63, 67, 69, 76, 133, 138, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 228, 248, 253, 255, 256, 257, 258, 259, 260, 261, 263], "mostli": [1, 142, 144, 147, 150, 257, 258, 259, 260], "untouch": [1, 62, 122, 142, 144, 147, 150, 215, 216, 250, 258, 259, 260], "dc_notch_filter_en": [1, 62, 84, 129, 142, 144, 146, 147, 148, 149, 150, 242, 258, 259, 260], "dc": [1, 62, 84, 129, 142, 144, 146, 147, 148, 149, 150, 258, 259, 260], "notch": [1, 62, 84, 129, 142, 144, 146, 147, 148, 149, 150, 258, 259, 260], "remov": [1, 45, 47, 48, 84, 89, 91, 102, 122, 124, 142, 144, 146, 147, 149, 150, 174, 191, 193, 207, 208, 215, 216, 228, 241, 255, 256, 257, 258, 259, 260, 261, 263, 267], "dc_notch_filter_coeffici": [1, 62, 84, 129, 142, 144, 146, 147, 148, 149, 150, 242, 258, 259, 260], "95": [1, 84, 128, 129, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 159, 242, 256, 257, 258, 259, 260, 261, 263, 265], "quantize_dynamic_scale_en": [1, 62, 83, 84, 129, 142, 144, 146, 147, 148, 149, 150, 242, 258, 259, 260], "quantiz": [1, 4, 5, 10, 11, 14, 15, 16, 18, 25, 26, 37, 39, 41, 49, 51, 57, 59, 60, 62, 67, 68, 69, 76, 83, 84, 114, 119, 121, 122, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 161, 162, 165, 166, 170, 180, 183, 188, 191, 196, 197, 198, 201, 204, 239, 240, 241, 242, 243, 244, 246, 248, 249, 251, 253, 256, 257, 258, 259, 260, 263], "uint16": [1, 80, 81, 83, 142, 144, 147, 148, 150, 185, 193, 242, 258, 259, 260, 264], "int8": [1, 39, 56, 57, 61, 65, 67, 69, 80, 81, 83, 85, 119, 124, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 185, 193, 242, 243, 244, 246, 247, 248, 250, 253, 257, 258, 259, 260, 263, 264, 265], "quantize_dynamic_scale_range_db": [1, 62, 83, 84, 129, 142, 144, 146, 147, 148, 149, 150, 242, 258, 259, 260], "paramet": [1, 14, 17, 18, 27, 28, 30, 31, 39, 49, 51, 59, 61, 65, 68, 76, 80, 81, 83, 84, 85, 86, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 114, 118, 120, 121, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 178, 180, 181, 183, 184, 185, 186, 188, 190, 191, 193, 194, 196, 197, 198, 199, 201, 202, 204, 205, 207, 208, 210, 211, 214, 217, 218, 219, 220, 222, 223, 225, 227, 228, 229, 230, 232, 233, 235, 236, 238, 241, 242, 253, 255, 261, 263, 264, 265, 266], "thei": [1, 6, 7, 49, 62, 67, 70, 84, 89, 91, 102, 113, 114, 118, 121, 122, 127, 128, 129, 140, 142, 143, 144, 145, 146, 147, 149, 150, 152, 155, 215, 216, 252, 255, 256, 257, 258, 259, 260, 265, 267], "includ": [1, 15, 16, 33, 52, 57, 62, 66, 67, 68, 69, 76, 81, 82, 84, 86, 87, 89, 91, 99, 102, 121, 122, 124, 127, 128, 129, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 160, 163, 166, 207, 213, 215, 216, 217, 228, 241, 253, 254, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267], "http": [1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 58, 67, 72, 74, 76, 81, 84, 86, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 121, 122, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 168, 191, 193, 221, 241, 242, 244, 246, 247, 248, 250, 251, 253, 255, 257, 258, 259, 260, 261, 265, 267], "siliconlab": [1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 67, 74, 84, 88, 95, 108, 109, 110, 124, 127, 128, 129, 131, 132, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 162, 221, 241, 242, 244, 247, 248, 253, 258, 259], "io": [1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 67, 84, 121, 124, 127, 128, 129, 131, 132, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 157, 217, 233, 237, 248, 253, 257, 258, 259, 261], "model_paramet": [1, 27, 28, 62, 67, 84, 121, 128, 129, 131, 132, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 248, 250, 253, 256, 258, 259, 264, 266], "html": [1, 6, 7, 12, 13, 33, 34, 37, 39, 41, 43, 44, 81, 84, 124, 128, 129, 131, 132, 133, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 157, 163, 248, 253, 257, 258, 259, 260, 265, 267], "my_model": [1, 4, 5, 10, 11, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 37, 39, 41, 50, 52, 55, 56, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 84, 113, 114, 115, 116, 117, 118, 119, 120, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 191, 244, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266], "updat": [1, 10, 11, 14, 17, 18, 27, 28, 34, 43, 44, 49, 50, 60, 61, 71, 84, 91, 122, 124, 126, 129, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 161, 162, 167, 169, 174, 175, 191, 193, 212, 230, 243, 244, 246, 247, 249, 251, 254, 255, 256, 258, 259, 260, 265, 267], "data": [1, 2, 4, 5, 8, 9, 23, 24, 30, 31, 35, 36, 39, 41, 46, 50, 56, 61, 62, 63, 64, 65, 67, 69, 70, 71, 77, 80, 81, 83, 85, 86, 89, 90, 91, 92, 96, 98, 99, 102, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 169, 172, 173, 175, 177, 178, 181, 184, 185, 186, 190, 191, 193, 194, 198, 199, 201, 202, 205, 215, 216, 217, 220, 221, 222, 223, 224, 225, 227, 229, 231, 232, 237, 238, 239, 240, 244, 247, 249, 253, 261, 263, 267], "pipelin": [1, 70, 127, 129, 136, 142, 144, 146, 147, 149, 150, 254, 260, 264], "import": [1, 53, 61, 67, 69, 71, 74, 83, 84, 111, 119, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 170, 189, 191, 212, 224, 229, 230, 231, 237, 253, 254, 255, 256, 258, 259, 260, 261, 263, 265, 267], "audio_util": [1, 4, 5, 30, 31, 83, 129, 142, 144, 146, 147, 149, 150, 242, 259, 260, 266], "augmented_sampl": [1, 129, 142, 144, 146, 147, 149, 150, 260, 266], "dtype": [1, 57, 62, 80, 81, 82, 83, 86, 87, 90, 91, 121, 128, 129, 130, 132, 134, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 185, 191, 193, 201, 217, 242, 247, 248, 258, 260, 264, 265, 266], "np": [1, 57, 81, 83, 86, 90, 91, 113, 114, 118, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 177, 178, 181, 184, 186, 190, 191, 194, 198, 199, 202, 205, 242, 248, 253, 256, 258, 259, 260, 264, 265, 266], "via": [1, 14, 19, 33, 34, 44, 59, 61, 63, 65, 68, 69, 70, 72, 73, 74, 77, 86, 122, 123, 215, 216, 221, 222, 224, 225, 237, 238, 241, 246, 250, 251, 254, 255, 256, 257, 258, 259, 260], "interfac": [1, 2, 14, 23, 24, 29, 32, 41, 46, 48, 59, 63, 64, 111, 124, 126, 221, 224, 225, 241, 254, 255], "thu": [1, 51, 67, 113, 114, 118, 127, 140, 229, 253, 255, 256, 259, 260, 263, 266, 267], "It": [1, 2, 4, 5, 10, 11, 23, 24, 33, 35, 44, 52, 57, 61, 64, 65, 81, 82, 86, 87, 89, 91, 99, 102, 113, 114, 118, 127, 131, 132, 140, 141, 142, 143, 144, 145, 148, 149, 150, 152, 240, 253, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266], "adjust": [1, 2, 80, 81, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 242, 255, 257, 258, 259, 260, 261, 265, 267], "affect": [1, 2, 113, 114, 118, 126, 143, 144, 145, 147, 148, 150, 151], "To": [1, 2, 14, 34, 35, 36, 37, 39, 41, 43, 45, 47, 48, 50, 51, 52, 61, 64, 67, 70, 71, 73, 78, 102, 138, 140, 144, 146, 147, 149, 150, 176, 192, 240, 242, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267], "issu": [1, 2, 14, 19, 20, 43, 45, 47, 48, 57, 58, 61, 62, 63, 65, 68, 69, 70, 71, 72, 74, 96, 119, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 222, 233, 234, 239, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265], "wxpython": [1, 2, 30, 31, 259], "sever": [2, 34, 37, 39, 40, 41, 43, 44, 46, 51, 52, 58, 61, 67, 69, 71, 142, 144, 146, 147, 149, 150, 240, 253, 256, 257, 259, 260, 264, 265, 266], "aid": [2, 48, 57, 67, 69, 129, 136, 142, 144, 146, 147, 149, 150, 151, 229, 241, 253, 256, 257, 258, 259, 260, 264, 267], "custom": [2, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 33, 59, 61, 67, 69, 71, 81, 86, 89, 91, 111, 115, 116, 117, 121, 124, 126, 128, 133, 135, 138, 140, 142, 143, 144, 145, 147, 148, 150, 151, 152, 239, 240, 241, 256, 257, 259, 260, 263, 266, 267], "depend": [2, 51, 67, 74, 75, 84, 86, 102, 114, 144, 254, 255, 257, 266, 267], "usecas": [2, 256], "overview": [2, 74, 98, 111, 266], "abil": [2, 61, 259], "print": [2, 6, 7, 21, 22, 35, 36, 38, 39, 40, 54, 102, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 166, 170, 189, 191, 212, 227, 228, 231, 237, 242, 243, 244, 246, 250, 253, 255, 256, 257, 259, 263, 265, 267], "termin": [2, 4, 5, 19, 20, 23, 24, 38, 39, 71, 124, 236, 256, 257, 259, 260, 261, 263], "audio_classifi": [2, 4, 5, 27, 28, 35, 128, 129, 143, 145, 148, 151, 155, 258, 259], "flow": [2, 19, 20, 62, 70, 71, 86, 135, 152, 193, 237, 238, 239, 254, 257, 259, 266], "recogn": [2, 4, 5, 259], "classify_audio": [2, 5, 14, 74, 78, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 256, 257, 258, 259, 260, 261, 263, 266], "verbos": [2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 62, 67, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 166, 218, 230, 253, 255, 257, 258, 259, 261, 266], "threshold": [2, 4, 5, 6, 7, 36, 39, 61, 62, 80, 81, 84, 124, 128, 129, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 161, 250, 257, 259], "150": [2, 143, 147, 148, 150, 151, 159, 257, 259, 260, 263], "255": [2, 4, 5, 6, 7, 35, 36, 57, 85, 105, 107, 128, 129, 131, 132, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 253, 257, 259, 264, 265], "mean": [2, 39, 56, 62, 81, 86, 90, 100, 122, 127, 136, 138, 140, 143, 144, 151, 215, 216, 229, 242, 248, 255, 256, 257, 259, 263, 265, 266], "easier": [2, 15, 16, 48, 142, 144, 146, 147, 149, 150, 267], "higher": [2, 4, 5, 6, 7, 35, 36, 71, 81, 128, 129, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 256, 257, 259], "fals": [2, 23, 24, 63, 70, 71, 77, 80, 81, 84, 85, 86, 89, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 168, 172, 175, 176, 191, 192, 199, 201, 207, 208, 211, 215, 216, 218, 219, 220, 222, 223, 225, 227, 228, 229, 230, 232, 234, 235, 242, 250, 253, 255, 256, 257, 259, 263, 265, 266, 267], "posit": [2, 23, 24, 62, 70, 84, 122, 124, 128, 129, 136, 142, 146, 149, 161, 176, 192, 212, 215, 216, 258, 267], "sai": [2, 23, 24, 55, 57, 70, 98, 102, 124, 128, 129, 136, 142, 144, 146, 147, 149, 150, 258, 259, 260, 267], "off": [2, 35, 36, 102, 131, 140, 141, 145, 146, 147, 159, 239, 255], "process": [2, 4, 5, 6, 7, 10, 11, 15, 16, 25, 26, 35, 36, 37, 39, 45, 49, 51, 57, 62, 67, 71, 80, 81, 83, 85, 86, 87, 88, 89, 91, 92, 98, 111, 113, 118, 122, 126, 127, 129, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 161, 163, 166, 211, 225, 229, 236, 240, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266], "occur": [2, 57, 238], "much": [2, 4, 5, 6, 7, 23, 24, 70, 71, 102, 142, 143, 146, 149, 212, 240, 255, 257, 259, 261, 265, 267], "faster": [2, 51, 229, 255, 257, 259], "compar": [2, 10, 11, 37, 51, 61, 96, 99, 115, 122, 124, 126, 140, 161, 215, 216, 254, 256, 257, 259, 265], "artifici": [2, 257], "delai": [2, 258], "would": [2, 4, 5, 60, 67, 86, 95, 98, 124, 127, 129, 136, 142, 144, 146, 147, 149, 150, 241, 253, 256, 257, 259, 261, 266, 267], "why": [2, 53, 142, 144, 146, 147, 149, 150, 241, 259], "matter": [2, 267], "keyword_spotting_mobilenetv2": [2, 151, 261, 263], "loop": [2, 4, 5, 6, 7, 35, 39, 62, 67, 86, 94, 113, 114, 118, 124, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 257, 259], "200m": [2, 4, 5, 259], "200": [2, 4, 5, 113, 114, 118, 133, 140, 142, 143, 145, 146, 148, 149, 150, 151, 152, 157, 212, 257, 259, 260, 267], "left": [2, 36, 67, 69, 97, 102, 122, 128, 129, 143, 148, 149, 150, 159, 215, 216, 239, 255, 256, 257, 259, 260, 261, 263, 265], "right": [2, 36, 50, 64, 67, 69, 73, 97, 102, 122, 128, 129, 140, 143, 148, 149, 150, 159, 215, 216, 239, 255, 256, 257, 260, 261, 262, 263, 265], "down": [2, 23, 24, 36, 51, 67, 69, 70, 81, 97, 102, 124, 128, 129, 136, 142, 143, 144, 146, 147, 148, 149, 150, 159, 229, 239, 255, 260, 261, 263, 265], "stop": [2, 36, 54, 89, 91, 97, 102, 113, 114, 118, 121, 122, 124, 128, 129, 134, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 155, 159, 200, 209, 213, 215, 216, 232, 239, 251, 255, 257, 260, 261, 262, 263], "go": [2, 36, 73, 74, 97, 102, 143, 148, 149, 150, 159, 239, 260, 261, 263, 264], "after": [2, 4, 5, 17, 18, 19, 20, 23, 24, 25, 26, 35, 36, 37, 39, 41, 43, 44, 52, 55, 60, 62, 64, 65, 67, 69, 70, 71, 74, 76, 81, 86, 91, 102, 119, 122, 123, 124, 128, 129, 134, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 166, 215, 216, 223, 232, 242, 244, 245, 246, 249, 250, 251, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267], "awhil": [2, 8, 9, 44, 242, 246, 251, 257, 259, 263, 265, 267], "ctrl": [2, 19, 20, 71, 73, 234], "wav": [2, 4, 5, 80, 83, 91, 94, 97, 101, 102, 103, 104, 129, 142, 144, 146, 147, 148, 149, 150, 211, 242, 259, 260, 267], "user": [2, 8, 9, 12, 13, 19, 20, 35, 36, 37, 40, 43, 62, 67, 71, 75, 77, 131, 132, 163, 193, 228, 239, 242, 244, 245, 246, 249, 250, 251, 253, 255, 256, 257, 258, 259, 263, 265], "home": [2, 4, 5, 77, 228, 236, 255, 259, 263], "audio_classify_record": [2, 259], "dump_audio": 2, "avi": 2, "video": [2, 4, 5, 148, 149, 150, 259, 260, 266], "jpg": [2, 4, 5, 39, 81, 85, 86, 91, 129, 142, 144, 146, 147, 149, 150, 256, 257, 259], "assum": [2, 14, 60, 62, 65, 80, 85, 122, 124, 156, 215, 216, 229, 236, 245, 250, 255, 257, 259, 261, 263, 264], "you": [2, 14, 23, 24, 33, 34, 35, 37, 39, 41, 43, 44, 45, 47, 48, 50, 54, 56, 57, 58, 64, 67, 70, 71, 73, 74, 76, 81, 86, 102, 113, 114, 118, 124, 126, 127, 129, 130, 131, 132, 134, 136, 140, 142, 145, 146, 149, 151, 175, 185, 191, 193, 240, 241, 246, 248, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "entir": [2, 72, 89, 91, 124, 142, 144, 146, 147, 149, 259, 260], "If": [2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 48, 50, 52, 54, 56, 62, 65, 66, 67, 69, 70, 71, 74, 75, 80, 81, 84, 85, 86, 89, 91, 102, 113, 114, 115, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 172, 174, 175, 176, 191, 192, 193, 207, 208, 211, 213, 215, 216, 217, 218, 220, 223, 227, 228, 229, 230, 232, 233, 236, 238, 241, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267], "red": [2, 35, 36, 37, 39, 261, 263], "led": [2, 4, 5, 6, 7, 35, 36, 37, 39, 257, 259, 261, 263], "turn": [2, 35, 36, 39, 259, 261, 263], "activ": [2, 4, 5, 6, 7, 14, 19, 20, 23, 24, 35, 36, 37, 39, 62, 67, 69, 70, 71, 74, 83, 84, 96, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 169, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 194, 195, 196, 204, 205, 206, 211, 225, 229, 230, 242, 244, 246, 247, 248, 250, 251, 253, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265], "green": [2, 35, 36, 37, 39, 261, 263], "addition": [2, 6, 7, 12, 13, 23, 24, 36, 51, 55, 57, 61, 65, 69, 74, 78, 81, 144, 240, 243, 253, 257, 259, 260, 263, 264, 265, 266], "serial": [2, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 35, 36, 38, 39, 62, 77, 86, 121, 163, 185, 193, 221, 228, 232, 238, 257, 258, 259], "log": [2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 44, 55, 60, 62, 67, 69, 70, 71, 76, 77, 113, 118, 121, 124, 126, 128, 129, 136, 138, 140, 142, 144, 146, 147, 149, 150, 161, 166, 167, 175, 218, 227, 230, 239, 246, 251, 255, 256, 257, 258, 259, 265], "update_param": [2, 14, 28, 52, 60, 62, 256, 257, 258, 259, 260], "re": [2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 27, 28, 34, 43, 44, 57, 74, 80, 89, 91, 96, 102, 113, 118, 124, 126, 129, 130, 131, 132, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 191, 207, 222, 228, 231, 232, 242, 248, 253, 255, 256, 257, 258, 259, 261, 263, 265, 267], "differ": [2, 6, 7, 35, 36, 37, 39, 41, 52, 58, 61, 71, 86, 100, 102, 113, 114, 118, 124, 126, 128, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 240, 253, 254, 255, 256, 257, 259, 260, 261, 263, 265, 267], "disabl": [2, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 23, 24, 35, 36, 41, 62, 70, 71, 81, 84, 86, 89, 91, 100, 124, 126, 128, 129, 134, 136, 142, 144, 146, 147, 148, 149, 150, 154, 163, 175, 219, 223, 229, 257, 258, 259, 260], "modul": [2, 6, 7, 12, 13, 14, 37, 39, 50, 58, 62, 66, 67, 84, 86, 91, 92, 113, 114, 118, 122, 125, 215, 216, 229, 230, 256, 257], "fe": [2, 62, 128, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 259, 263], "experiment": [2, 4, 5, 30, 31, 70, 124, 129, 136, 142, 144, 146, 147, 149, 150, 156, 159, 241, 257, 259, 260, 263, 264, 266], "audiodatasetgener": [2, 97, 101, 103, 104, 212, 259, 267], "text": [2, 12, 13, 14, 21, 35, 36, 59, 60, 64, 67, 68, 70, 120, 122, 140, 146, 162, 210, 215, 216, 240, 255, 256, 257, 258, 259, 263, 267], "speech": [2, 62, 84, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 211, 250, 255, 258, 259, 266, 267], "tt": [2, 258, 267], "servic": [2, 35, 36, 54, 73, 212, 241, 255, 257, 258], "cloud": [2, 10, 11, 14, 15, 16, 19, 20, 25, 26, 59, 69, 70, 71, 73, 74, 75, 123, 126, 129, 136, 142, 144, 146, 147, 149, 150, 161, 163, 166, 211, 212, 239, 241, 258], "gcp": [2, 211, 212], "microsoft": [2, 34, 42, 43, 44, 58, 74, 212, 258, 259], "azur": [2, 211, 212], "amazon": [2, 212, 258, 259], "web": [2, 36, 49, 72, 102, 126, 212, 239, 251, 252, 255, 257, 259, 260], "aw": [2, 211, 212], "inform": [2, 8, 9, 14, 48, 59, 60, 63, 67, 68, 70, 71, 76, 156, 177, 178, 181, 184, 186, 190, 191, 194, 198, 199, 201, 202, 205, 246, 256, 258, 261, 264, 265], "audio": [4, 5, 12, 13, 14, 30, 31, 40, 45, 46, 49, 52, 57, 62, 67, 70, 88, 89, 91, 113, 128, 129, 134, 136, 137, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 209, 210, 211, 215, 216, 221, 224, 239, 240, 241, 256, 257, 261], "util": [4, 8, 9, 14, 29, 30, 32, 34, 35, 36, 41, 43, 44, 59, 63, 67, 70, 83, 88, 111, 113, 114, 118, 119, 128, 129, 130, 131, 134, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 212, 224, 231, 237, 240, 241, 242, 244, 247, 248, 253, 254, 255, 256, 258, 260, 263, 265, 267], "app": [4, 5, 6, 7, 12, 13, 15, 16, 27, 28, 29, 32, 35, 36, 37, 39, 40, 41, 42, 44, 72, 76, 102, 140, 142, 146, 147, 149, 150, 191, 238, 251, 257, 258, 259, 260, 265], "event": [4, 5, 61, 96, 121, 122, 124, 232, 238, 241, 256, 257, 259, 260, 266], "own": [4, 5, 8, 9, 30, 31, 71, 74, 100, 129, 136, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 255, 256, 257, 259, 260, 261, 267], "risk": [4, 5, 30, 31, 259], "either": [4, 5, 27, 28, 39, 49, 62, 65, 81, 84, 86, 91, 102, 113, 114, 118, 124, 130, 142, 146, 149, 163, 165, 167, 168, 174, 175, 176, 191, 192, 193, 207, 210, 217, 228, 252, 253, 256, 257, 258, 259, 265], "OR": [4, 5, 19, 20, 25, 26, 44, 81, 102, 118, 125, 167, 176, 185, 191, 192, 193, 208, 228, 259], "given": [4, 5, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 39, 41, 52, 60, 61, 62, 63, 64, 67, 68, 69, 72, 77, 80, 81, 84, 85, 86, 89, 90, 91, 98, 102, 113, 114, 115, 116, 117, 118, 120, 121, 122, 124, 125, 127, 132, 135, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 161, 163, 165, 166, 167, 168, 169, 172, 174, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 196, 198, 199, 202, 204, 205, 207, 208, 211, 215, 216, 217, 220, 227, 228, 229, 230, 232, 235, 236, 238, 240, 242, 243, 246, 250, 251, 253, 256, 257, 259, 260, 261, 263, 264, 266], "system": [4, 5, 33, 34, 43, 44, 61, 71, 75, 81, 86, 91, 176, 192, 229, 254, 255, 259, 260], "dataflow": [4, 5, 259], "tflite_micro": [4, 5, 27, 28, 67, 111, 153, 170, 242, 247, 250, 259], "tflite_micro_speech": [4, 5, 27, 28, 62, 67, 69, 240, 250, 259], "For": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 39, 55, 57, 59, 61, 62, 63, 65, 67, 68, 69, 71, 72, 81, 89, 91, 102, 113, 114, 118, 124, 127, 129, 130, 131, 132, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 161, 232, 244, 246, 251, 253, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267], "simul": [4, 5, 15, 16, 41, 47, 62, 64, 67, 95, 98, 102, 119, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 175, 253, 255, 261, 263, 265], "latenc": [4, 5, 6, 7, 51, 63, 144, 152, 240, 255, 257, 259, 260, 261, 264], "take": [4, 5, 8, 9, 35, 44, 51, 62, 67, 74, 81, 86, 89, 124, 128, 129, 131, 132, 140, 143, 145, 151, 154, 155, 230, 242, 246, 251, 253, 255, 257, 259, 260, 261, 263, 265, 267], "per": [4, 5, 10, 11, 12, 13, 81, 86, 89, 91, 102, 113, 114, 118, 122, 124, 129, 138, 142, 144, 146, 147, 149, 150, 161, 163, 180, 183, 191, 204, 211, 255, 256, 257, 259, 260, 264, 267], "workspac": [4, 5, 10, 11, 15, 16, 29, 32, 52, 55, 60, 62, 63, 67, 68, 71, 72, 77, 123, 244, 245, 246, 249, 250, 251, 255, 257, 259, 263, 265], "averag": [4, 5, 6, 7, 35, 36, 39, 62, 127, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 161, 243, 246, 251, 256, 257, 259, 263, 265, 266], "1200m": [4, 5, 142, 259], "drop": [4, 5, 6, 7, 64, 72, 76, 106, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 238, 251, 256, 257, 259, 260, 265, 266], "older": [4, 5, 6, 7, 128, 129, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 257, 259], "than": [4, 5, 6, 7, 15, 16, 17, 18, 21, 22, 29, 32, 35, 36, 39, 41, 61, 62, 77, 84, 86, 99, 102, 124, 128, 129, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 163, 168, 223, 238, 250, 255, 256, 257, 258, 259, 261, 263, 264, 265, 266], "now": [4, 5, 6, 7, 43, 73, 126, 128, 129, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 242, 253, 255, 256, 257, 258, 259, 260, 263, 265], "minu": [4, 5, 6, 7, 62, 84, 128, 129, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 257, 259, 267], "minimum": [4, 5, 6, 7, 35, 62, 67, 69, 124, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 257, 259], "count": [4, 5, 6, 7, 10, 11, 89, 91, 113, 114, 118, 120, 122, 124, 128, 130, 131, 132, 133, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 176, 192, 200, 209, 211, 212, 213, 215, 216, 244, 247, 253, 257, 259, 260, 265, 267], "must": [4, 5, 6, 7, 12, 13, 15, 16, 23, 24, 27, 28, 33, 37, 39, 41, 44, 45, 47, 48, 56, 57, 61, 63, 65, 67, 69, 70, 71, 74, 80, 81, 83, 86, 91, 113, 114, 118, 119, 121, 122, 123, 124, 126, 127, 128, 129, 131, 132, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 161, 167, 169, 175, 176, 185, 191, 192, 193, 211, 213, 215, 216, 218, 223, 224, 225, 229, 230, 237, 241, 242, 244, 248, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267], "last": [4, 5, 6, 7, 25, 26, 69, 84, 89, 91, 113, 114, 118, 124, 126, 127, 130, 133, 144, 152, 174, 193, 256, 257, 259, 263, 266], "befor": [4, 5, 6, 7, 15, 16, 19, 20, 21, 22, 23, 24, 29, 32, 34, 37, 43, 45, 47, 48, 62, 69, 71, 74, 80, 81, 84, 86, 89, 91, 102, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 127, 128, 129, 131, 132, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 161, 163, 166, 168, 207, 208, 212, 215, 216, 217, 218, 229, 232, 233, 238, 242, 249, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267], "175": [4, 5, 152, 257, 259], "infer": [4, 5, 6, 7, 12, 13, 35, 36, 42, 49, 62, 63, 86, 124, 128, 129, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 172, 175, 191, 201, 242, 244, 247, 254, 255, 257, 258, 259, 260, 263, 264, 265], "within": [4, 5, 51, 85, 122, 129, 138, 142, 144, 146, 147, 149, 150, 215, 216, 228, 239, 240, 256, 257, 258, 259, 260, 263, 264, 265, 266], "least": [4, 5, 81, 86, 122, 215, 216, 258, 259, 267], "suppress": [4, 5, 6, 7, 257, 259], "750m": [4, 5, 259], "onc": [4, 5, 19, 20, 35, 36, 57, 70, 71, 74, 102, 111, 113, 118, 119, 124, 126, 129, 135, 142, 144, 146, 147, 149, 150, 152, 255, 256, 257, 258, 259, 260, 262, 265, 267], "wait": [4, 5, 19, 20, 35, 37, 124, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 168, 211, 212, 223, 229, 231, 232, 237, 238, 259, 267], "john": [4, 5, 259], "750": [4, 5, 35, 36, 128, 129, 143, 145, 151, 155, 160, 250, 259, 263], "dump": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 61, 71, 129, 130, 133, 135, 136, 140, 142, 144, 146, 147, 149, 150, 152, 161, 233, 243, 257, 259, 260], "argument": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 66, 67, 69, 70, 81, 83, 86, 89, 91, 113, 114, 115, 118, 121, 122, 124, 125, 126, 127, 129, 131, 132, 136, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 163, 167, 172, 176, 192, 193, 208, 211, 213, 215, 216, 220, 223, 227, 228, 229, 230, 244, 246, 249, 251, 253, 256, 257, 258, 259, 260, 263, 265], "path": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 52, 59, 67, 68, 71, 73, 75, 77, 80, 81, 85, 86, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 118, 121, 122, 123, 124, 125, 126, 128, 129, 130, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 159, 161, 163, 165, 166, 167, 168, 175, 191, 193, 207, 208, 211, 217, 218, 220, 230, 233, 236, 241, 242, 244, 246, 247, 248, 249, 250, 251, 256, 257, 258, 259, 260, 261, 267], "archiv": [4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 41, 43, 44, 55, 59, 61, 62, 66, 68, 69, 71, 72, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 113, 118, 121, 122, 125, 128, 146, 149, 151, 155, 161, 166, 167, 208, 241, 242, 243, 246, 249, 250, 251, 254, 255, 257, 258, 259, 260, 261, 264, 266, 267], "zip": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 55, 60, 62, 64, 65, 66, 71, 77, 96, 98, 121, 125, 128, 129, 130, 132, 133, 134, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 208, 242, 245, 250, 254, 255, 256, 257, 258, 259, 260, 265, 266], "previous": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 37, 71, 83, 146, 149, 151, 165, 167, 168, 175, 208, 217, 223, 253, 256, 257, 259, 260, 261], "default": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 41, 52, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 75, 77, 81, 84, 86, 91, 102, 113, 114, 115, 116, 117, 118, 121, 122, 124, 126, 127, 128, 129, 130, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 161, 163, 167, 172, 174, 176, 191, 192, 193, 208, 215, 216, 218, 225, 228, 230, 242, 248, 255, 257, 258, 259, 262, 263, 265, 266], "none": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 39, 67, 80, 81, 84, 85, 86, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 169, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 191, 193, 195, 196, 197, 201, 202, 203, 204, 206, 207, 208, 210, 211, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 242, 244, 246, 247, 248, 250, 251, 256, 257, 259, 260, 261, 263, 265, 266], "requir": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 37, 39, 43, 44, 47, 48, 57, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 76, 81, 84, 86, 91, 102, 119, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 167, 173, 174, 199, 201, 211, 239, 240, 241, 244, 246, 247, 248, 251, 253, 254, 255, 259, 263, 264, 266, 267], "acceler": [4, 5, 6, 7, 12, 13, 15, 16, 27, 28, 33, 37, 39, 41, 42, 46, 47, 51, 64, 73, 78, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 167, 169, 172, 173, 174, 175, 218, 239, 242, 244, 247, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266], "omit": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 41, 62, 67, 74, 75, 80, 81, 86, 89, 91, 102, 113, 118, 127, 128, 129, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 161, 163, 167, 207, 208, 213, 217, 218, 228, 232, 233, 257, 259], "kernel": [4, 5, 15, 16, 27, 28, 33, 37, 39, 41, 42, 46, 47, 63, 73, 138, 144, 163, 167, 169, 172, 173, 175, 178, 179, 180, 181, 182, 183, 192, 194, 196, 202, 203, 204, 205, 242, 248, 259, 266], "NOT": [4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 25, 26, 27, 28, 80, 85, 113, 118, 140, 142, 144, 147, 150, 163, 167, 175, 177, 178, 181, 184, 186, 190, 191, 194, 198, 199, 202, 205, 208, 213, 241, 244, 250, 257, 258, 259, 267], "sinc": [4, 5, 71, 86, 102, 113, 114, 118, 119, 124, 129, 131, 132, 134, 136, 142, 144, 146, 147, 148, 149, 150, 151, 152, 244, 246, 251, 253, 255, 256, 257, 259, 260, 261, 263, 265], "hw": [4, 5, 259], "slow": [4, 5, 23, 24, 62, 70, 81, 84, 91, 124, 128, 129, 136, 142, 144, 146, 147, 149, 150, 229, 255, 258, 259, 263, 267], "otherwis": [4, 5, 43, 56, 80, 84, 85, 86, 122, 125, 126, 138, 140, 142, 143, 145, 146, 148, 149, 151, 152, 156, 161, 168, 174, 191, 193, 208, 215, 216, 223, 225, 230, 256, 257, 259, 267], "port": [4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 23, 24, 29, 32, 35, 36, 44, 64, 70, 77, 163, 168, 221, 231, 232, 238, 255, 257, 258, 259], "com": [4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 34, 35, 36, 43, 44, 45, 47, 48, 58, 71, 74, 77, 88, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 127, 130, 134, 136, 137, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 162, 193, 221, 232, 238, 241, 242, 244, 246, 247, 248, 250, 251, 257, 258, 259, 265, 267], "attempt": [4, 5, 6, 7, 12, 13, 15, 16, 61, 113, 114, 118, 163, 243, 257, 259], "determin": [4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 30, 31, 47, 51, 63, 67, 69, 81, 86, 89, 102, 113, 114, 118, 124, 140, 142, 143, 144, 145, 148, 151, 152, 156, 167, 175, 176, 192, 208, 217, 240, 241, 244, 246, 247, 250, 251, 255, 257, 259, 260, 265, 266, 267], "v": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 52, 57, 73, 84, 130, 140, 161, 174, 193, 235, 256, 257, 259], "consol": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 62, 67, 161, 189, 227, 248, 255, 256, 257, 258, 259], "window_dur": [4, 5, 6, 7, 128, 129, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 257, 259], "w": [4, 5, 6, 7, 10, 11, 17, 18, 25, 26, 142, 144, 147, 150, 223, 227, 254, 257, 259, 265, 267], "durat": [4, 5, 6, 7, 128, 129, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 255, 257, 259], "m": [4, 5, 6, 7, 35, 36, 62, 74, 84, 102, 128, 133, 134, 135, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 157, 159, 160, 235, 246, 250, 251, 257, 259, 263], "control": [4, 5, 6, 7, 37, 39, 41, 62, 81, 84, 86, 89, 91, 102, 127, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 237, 238, 257, 259, 260, 261, 262, 263], "smooth": [4, 5, 6, 7, 62, 84, 128, 129, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 257, 259], "all": [4, 5, 6, 7, 10, 11, 14, 25, 26, 33, 35, 41, 42, 43, 44, 55, 57, 61, 63, 64, 67, 68, 69, 70, 71, 73, 76, 81, 84, 86, 89, 91, 99, 100, 102, 105, 106, 107, 113, 114, 115, 116, 118, 121, 122, 123, 125, 128, 129, 131, 132, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 160, 161, 163, 174, 191, 193, 207, 211, 212, 213, 215, 216, 227, 228, 229, 230, 232, 236, 238, 241, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267], "longer": [4, 5, 6, 7, 74, 102, 124, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 175, 255, 257, 258, 259, 263], "millisecond": [4, 5, 6, 7, 35, 62, 67, 84, 113, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 257, 259, 263], "confid": [4, 5, 6, 7, 36, 128, 129, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 242, 257, 259, 263], "correct": [4, 5, 6, 7, 36, 53, 56, 128, 129, 138, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 191, 242, 257, 259], "miss": [4, 5, 6, 7, 128, 129, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 257, 259], "number": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 25, 26, 35, 39, 47, 51, 61, 62, 63, 64, 67, 68, 69, 77, 81, 84, 85, 86, 89, 91, 102, 113, 114, 115, 116, 117, 118, 121, 122, 124, 127, 128, 129, 133, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 161, 163, 166, 169, 172, 174, 175, 176, 177, 178, 181, 184, 186, 190, 191, 192, 194, 197, 198, 199, 200, 201, 202, 205, 209, 211, 213, 215, 216, 218, 219, 228, 229, 238, 249, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267], "t": [4, 5, 6, 7, 23, 24, 33, 53, 70, 91, 98, 100, 102, 106, 122, 124, 126, 127, 128, 129, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 155, 156, 163, 208, 215, 216, 228, 255, 257, 259, 260, 263, 264], "consid": [4, 5, 6, 7, 10, 11, 37, 39, 62, 80, 81, 84, 89, 102, 115, 122, 124, 128, 129, 138, 140, 142, 143, 144, 145, 146, 147, 151, 152, 155, 161, 215, 216, 240, 241, 246, 251, 256, 257, 259, 266, 267], "increas": [4, 5, 6, 7, 57, 67, 81, 86, 124, 127, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 175, 255, 257, 259, 260, 261, 263, 267], "precis": [4, 5, 6, 7, 128, 129, 143, 145, 151, 152, 155, 161, 235, 243, 254, 257, 259, 265], "cost": [4, 5, 6, 7, 86, 128, 129, 143, 145, 148, 151, 152, 155, 255, 257, 259, 260, 263, 264], "recal": [4, 5, 6, 7, 57, 128, 129, 142, 143, 144, 145, 147, 150, 151, 152, 155, 161, 243, 254, 256, 257, 259, 262, 264, 265], "amount": [4, 5, 6, 7, 35, 62, 67, 71, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 163, 168, 173, 211, 223, 232, 238, 255, 256, 257, 259, 260, 263], "new": [4, 5, 35, 36, 37, 39, 41, 43, 50, 52, 61, 62, 65, 67, 69, 74, 84, 91, 96, 102, 113, 114, 118, 122, 124, 128, 129, 143, 145, 148, 151, 155, 169, 174, 191, 193, 215, 216, 219, 228, 230, 232, 239, 245, 248, 250, 256, 257, 258, 259, 261, 265, 266, 267], "l": [4, 5, 6, 7, 70, 138, 230, 255, 257, 259], "non": [4, 5, 23, 24, 60, 68, 70, 80, 85, 100, 122, 124, 126, 127, 128, 129, 133, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 157, 163, 215, 216, 228, 238, 243, 246, 250, 251, 253, 256, 257, 258, 259, 265, 267], "specifi": [4, 5, 19, 20, 23, 24, 25, 26, 33, 34, 35, 36, 37, 39, 41, 47, 52, 58, 59, 61, 62, 64, 67, 68, 69, 70, 71, 75, 81, 83, 86, 89, 91, 96, 102, 113, 114, 118, 122, 123, 124, 126, 127, 128, 129, 131, 132, 134, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 161, 175, 185, 191, 193, 207, 208, 211, 212, 214, 215, 216, 223, 229, 238, 244, 245, 246, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267], "volum": [4, 5, 62, 67, 81, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 250, 258, 259], "u": [4, 5, 34, 43, 44, 58, 122, 215, 216, 246, 251, 259, 263, 265, 267], "gain": [4, 5, 62, 84, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 239, 253, 255, 259, 260, 266], "scaler": [4, 5, 62, 67, 128, 129, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 180, 183, 188, 191, 197, 204, 259, 264], "amplitud": [4, 5, 62, 67, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 259], "x": [4, 5, 6, 7, 36, 39, 57, 81, 86, 90, 113, 114, 115, 116, 117, 118, 120, 122, 124, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 146, 147, 148, 149, 150, 152, 154, 156, 161, 176, 178, 181, 191, 194, 201, 202, 212, 215, 216, 229, 242, 248, 253, 256, 257, 259, 264, 265, 266, 267], "gener": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 40, 41, 42, 44, 45, 46, 49, 50, 52, 57, 59, 60, 61, 63, 65, 68, 69, 70, 72, 76, 80, 81, 83, 84, 85, 86, 88, 89, 91, 97, 101, 103, 104, 111, 113, 114, 117, 118, 119, 120, 121, 122, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 166, 167, 168, 173, 175, 177, 178, 181, 184, 185, 186, 189, 190, 191, 193, 194, 198, 199, 202, 205, 207, 208, 210, 211, 213, 214, 217, 220, 221, 236, 239, 240, 241, 246, 248, 249, 250, 251, 253, 254, 255, 261, 263, 264, 265, 266], "unquant": [4, 5, 121, 124, 259], "mp4": [4, 5, 259], "z": [4, 5, 12, 13, 62, 84, 122, 215, 216, 259], "sensit": [4, 5, 6, 7, 35, 36, 61, 155, 257, 259], "float": [4, 5, 6, 7, 10, 11, 27, 28, 39, 56, 57, 62, 81, 84, 86, 89, 90, 91, 102, 113, 114, 118, 124, 126, 127, 138, 140, 142, 144, 146, 147, 150, 161, 163, 166, 168, 174, 176, 185, 192, 193, 197, 205, 211, 217, 222, 223, 225, 229, 232, 235, 238, 257, 259, 264, 266], "indic": [4, 5, 6, 7, 35, 36, 39, 51, 61, 62, 75, 84, 86, 89, 91, 102, 113, 118, 124, 136, 143, 172, 176, 192, 238, 242, 243, 257, 259, 264, 265, 266], "less": [4, 5, 6, 7, 61, 102, 124, 138, 140, 143, 145, 148, 151, 163, 223, 238, 255, 256, 257, 259, 263, 264, 267], "By": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 23, 24, 33, 35, 36, 61, 64, 68, 70, 71, 81, 86, 91, 98, 114, 121, 124, 128, 129, 135, 136, 146, 149, 152, 156, 161, 191, 248, 254, 255, 257, 258, 259, 261, 263], "download": [4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 19, 20, 34, 43, 48, 58, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 123, 129, 130, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 159, 160, 208, 242, 246, 250, 251, 253, 255, 256, 257, 258, 259, 262, 263, 267], "overrid": [4, 5, 6, 7, 12, 13, 15, 16, 25, 26, 35, 39, 41, 52, 69, 75, 77, 86, 113, 114, 118, 123, 124, 128, 129, 136, 142, 143, 145, 146, 147, 148, 149, 150, 151, 155, 166, 249, 257, 259, 263], "altern": [4, 5, 6, 7, 12, 13, 15, 16, 35, 37, 39, 43, 44, 53, 62, 63, 67, 68, 74, 125, 143, 145, 185, 193, 211, 251, 257, 258, 259, 260, 261, 263, 267], "exist": [4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 33, 66, 73, 74, 91, 131, 142, 144, 146, 147, 149, 150, 176, 191, 192, 228, 229, 230, 239, 255, 257, 259, 264, 265, 266], "test": [4, 5, 6, 7, 10, 11, 12, 13, 25, 26, 34, 43, 44, 50, 61, 69, 93, 102, 105, 106, 107, 113, 114, 118, 120, 121, 122, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 168, 207, 215, 216, 228, 237, 246, 249, 251, 253, 256, 260, 262, 265, 266], "unit": [4, 5, 6, 7, 12, 13, 15, 16, 62, 67, 69, 133, 140, 155, 163, 176, 186, 212, 235, 256, 257, 259, 260, 266, 267], "show": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 44, 49, 61, 71, 124, 138, 140, 161, 166, 208, 243, 244, 245, 246, 249, 251, 255, 256, 257, 259, 260, 266], "messag": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 54, 63, 124, 161, 163, 172, 230, 256, 257, 259, 260], "exit": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 125, 219, 244, 256, 257, 259, 260], "usag": [5, 7, 9, 11, 13, 16, 18, 20, 22, 24, 26, 28, 31, 32, 51, 59, 65, 81, 83, 84, 86, 129, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 191, 219, 229, 240, 255, 256, 257, 259, 260, 265, 267], "rgb": [6, 14, 39, 40, 86, 118, 160], "camera": [6, 7, 14, 39, 40, 57, 256, 257, 260], "arducam": [6, 7, 39, 257], "www": [6, 7, 12, 13, 23, 24, 34, 43, 44, 70, 97, 99, 100, 101, 102, 103, 104, 105, 122, 124, 129, 131, 132, 133, 136, 138, 140, 142, 143, 145, 146, 148, 149, 151, 152, 157, 160, 253, 257, 259, 265, 267], "product": [6, 7, 12, 13, 37, 39, 78, 241, 258, 267], "2mp": [6, 7], "spi": [6, 7, 8, 9, 39], "b0067": [6, 7], "arduino": [6, 7], "onlin": [6, 7, 12, 13, 35, 36, 37, 38, 39, 41, 52, 71, 255, 260], "cpp_develop": [6, 7, 12, 13], "image_classi": [6, 7], "fier": [6, 7], "setup": [6, 7, 12, 13, 54, 75, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 256, 257, 259, 260], "image_classif": [6, 7, 65, 67, 68, 72, 240], "rock_paper_scissor": [6, 7, 39, 108, 109, 257], "mvp": [6, 7, 15, 16, 33, 37, 39, 41, 42, 46, 51, 78, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 239, 254, 255, 256, 257, 258, 259, 260, 261, 265, 266], "again": [6, 7, 35, 37, 142, 143, 144, 146, 147, 149, 150, 152, 248, 255, 257, 259, 263], "uniqu": [6, 7, 37, 40, 62, 140, 173, 214, 239, 256, 257, 267], "everi": [6, 7, 10, 11, 23, 24, 70, 113, 114, 115, 118, 124, 128, 129, 136, 140, 143, 145, 146, 148, 149, 151, 152, 161, 255, 257, 259], "closer": [6, 7, 146, 149, 257, 266], "suffici": [6, 7, 39, 257], "prior": [6, 7, 257], "improv": [6, 7, 12, 13, 23, 24, 81, 86, 91, 124, 128, 129, 130, 134, 135, 136, 140, 143, 145, 146, 148, 149, 151, 152, 155, 175, 239, 255, 257, 259, 260, 261, 263, 264, 265, 266], "throughput": [6, 7, 12, 13, 91, 129, 136, 142, 144, 146, 147, 149, 150, 175, 255, 257], "image_classifi": [6, 7, 39, 152, 257], "classify_imag": [7, 14, 37, 78, 152, 256, 257, 260], "silicon": [8, 14, 35, 36, 42, 43, 44, 139, 145, 240, 246, 250, 253, 255, 256, 257, 259, 260, 263], "lab": [8, 14, 35, 36, 42, 43, 44, 139, 145, 240, 246, 250, 253, 255, 256, 257, 259, 260, 263], "simplic": [8, 9, 14, 42, 44, 77, 142, 228, 240, 256, 257, 260], "warn": [8, 9, 86, 144, 146, 147, 149, 150, 227, 230, 244, 245, 246, 249, 251, 256, 257, 259, 265], "dri": [8, 9, 242, 259], "silab": [8, 9, 43, 45, 47, 48, 71, 73, 74, 136, 142, 144, 147, 150, 160, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 259, 260, 263, 265, 267], "github_siliconlab": [8, 9, 242, 265], "venv": [8, 9, 34, 43, 44, 71, 74, 244, 245, 246, 249, 251, 257, 259, 263, 265], "lib": [8, 9, 244, 245, 246, 249, 251, 257, 259, 263, 265], "site": [8, 9, 244, 245, 246, 249, 251, 257, 259, 263, 265], "tf_kera": [8, 9, 127], "src": [8, 9, 127, 228, 244, 246, 247, 248, 250, 251], "loss": [8, 9, 23, 24, 67, 69, 70, 113, 114, 115, 118, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 253, 254, 255, 257, 259, 260, 261, 263], "2976": [8, 9], "tf": [8, 9, 21, 22, 49, 53, 57, 65, 67, 69, 70, 76, 80, 85, 91, 107, 113, 114, 115, 116, 117, 118, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 163, 169, 172, 173, 175, 239, 253, 256, 260, 264, 266], "sparse_softmax_cross_entropi": [8, 9], "deprec": [8, 9, 86, 259], "pleas": [8, 9, 59, 81, 86, 99, 102, 242, 246, 251, 253, 255, 257, 259, 265], "compat": [8, 9, 91, 127, 175, 176, 192, 265], "v1": [8, 9, 134, 136, 156, 159, 160, 255, 265, 267], "instead": [8, 9, 15, 16, 27, 28, 35, 37, 39, 41, 47, 52, 71, 73, 74, 81, 86, 113, 114, 118, 122, 124, 144, 167, 215, 216, 229, 240, 253, 255, 257, 259, 263], "extract": [8, 9, 35, 36, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 121, 127, 129, 133, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 160, 207, 208, 242, 255, 256, 257, 259, 261, 263, 265], "commander_win32_x64_1v15p3b1357": [8, 9], "15": [8, 9, 39, 62, 84, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 242, 244, 246, 247, 253, 257, 259, 260, 261, 263, 265, 267], "patient": [8, 9, 242, 246, 251, 255, 257, 263, 265], "list": [8, 9, 10, 11, 53, 62, 66, 71, 75, 77, 81, 86, 89, 91, 94, 98, 102, 113, 114, 115, 118, 121, 122, 123, 124, 125, 127, 130, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 161, 163, 166, 169, 172, 173, 175, 177, 178, 180, 181, 183, 184, 185, 186, 190, 191, 193, 194, 197, 198, 199, 201, 202, 204, 205, 207, 211, 212, 213, 215, 216, 217, 218, 227, 228, 230, 232, 233, 235, 238, 242, 248, 255, 257, 265, 267], "below": [8, 9, 27, 28, 39, 62, 71, 80, 81, 84, 113, 114, 118, 134, 136, 143, 145, 148, 151, 152, 156, 232, 255, 256, 257, 258, 259, 261, 263, 264, 265, 267], "its": [8, 9, 14, 17, 18, 37, 39, 51, 60, 61, 67, 71, 81, 86, 89, 105, 106, 107, 122, 125, 129, 135, 136, 138, 140, 142, 144, 146, 147, 149, 150, 151, 152, 188, 201, 208, 213, 215, 216, 229, 230, 253, 255, 256, 257, 258, 259, 260, 261, 263, 265], "descript": [8, 9, 14, 27, 28, 40, 44, 49, 59, 63, 67, 69, 76, 111, 113, 114, 118, 119, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 167, 173, 191, 239, 240, 242, 246, 247, 250, 251, 253, 257, 258, 259], "version": [8, 9, 50, 62, 67, 69, 74, 86, 102, 119, 121, 122, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 169, 173, 175, 185, 208, 215, 216, 230, 241, 242, 246, 247, 248, 250, 251, 253, 254, 256, 257, 259, 260, 263, 265, 267], "displai": [8, 9, 10, 11, 25, 26, 37, 39, 61, 64, 70, 138, 140, 161, 191, 243, 255, 256, 257, 259, 260], "h": [8, 9, 19, 20, 23, 24, 29, 32, 35, 36, 62, 71, 81, 84, 217, 235, 255, 265], "adapt": [8, 9, 77, 133, 138, 140, 152, 157, 159, 228, 257, 260], "aem": [8, 9], "advanc": [8, 9, 240, 265], "energi": [8, 9, 15, 16, 36, 61, 63, 68, 72, 162, 163, 174, 244, 246, 247, 251, 257, 259, 260, 263, 265], "monitor": [8, 9, 14, 23, 44, 59, 67, 124, 128, 129, 130, 134, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 229, 241, 254, 257, 259], "combin": [8, 9, 129, 136, 142, 144, 146, 147, 149, 150, 160, 211, 253, 259], "one": [8, 9, 10, 11, 17, 18, 19, 20, 25, 26, 36, 39, 44, 50, 51, 54, 67, 71, 77, 81, 83, 86, 102, 103, 113, 114, 118, 119, 122, 124, 126, 129, 132, 136, 138, 140, 142, 144, 146, 147, 149, 150, 151, 161, 163, 172, 175, 185, 191, 193, 215, 216, 228, 229, 239, 240, 242, 249, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267], "ctune": [8, 9], "ebl": [8, 9], "encrypt": [8, 9], "decrypt": [8, 9], "other": [8, 9, 10, 11, 19, 20, 44, 50, 61, 62, 67, 69, 70, 71, 74, 81, 86, 89, 91, 102, 115, 119, 121, 122, 124, 126, 129, 131, 132, 136, 142, 144, 146, 147, 149, 150, 161, 163, 191, 215, 216, 238, 253, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267], "handl": [8, 9, 57, 67, 122, 148, 149, 150, 215, 216, 236], "extflash": [8, 9], "extern": [8, 9, 163, 240, 257, 264], "flash": [8, 9, 27, 28, 35, 37, 39, 41, 51, 52, 63, 65, 128, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 244, 247, 254, 255, 256, 257, 258, 259, 260, 263, 265], "write": [8, 9, 23, 24, 39, 41, 52, 70, 75, 80, 85, 111, 124, 128, 129, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 191, 223, 225, 227, 232, 233, 237, 238, 257, 265, 267], "gbl": [8, 9], "manufactur": [8, 9], "provis": [8, 9], "nvm3": [8, 9], "ota": [8, 9], "postbuild": [8, 9], "post": [8, 9, 10, 11, 15, 16, 25, 26, 65, 67, 122, 124, 143, 150, 161, 163, 166, 254, 265], "parser": [8, 9], "readmem": [8, 9], "memori": [8, 9, 14, 17, 27, 28, 37, 39, 41, 47, 48, 51, 52, 59, 63, 81, 86, 105, 106, 107, 128, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 231, 235, 241, 242, 244, 246, 247, 250, 251, 254, 256, 257, 258, 259, 260, 263, 264, 265, 266], "rp": [8, 9], "rtt": [8, 9], "secur": [8, 9, 71, 241, 255], "element": [8, 9, 10, 11, 39, 62, 86, 89, 113, 114, 115, 118, 135, 152, 161, 197, 199, 200, 230], "swo": [8, 9], "tokendump": [8, 9], "token": [8, 9, 267], "tokenhead": [8, 9], "group": [8, 9, 60, 89, 92, 126, 142, 144, 147, 150, 214, 256, 259], "current": [8, 9, 17, 18, 19, 20, 35, 36, 37, 65, 66, 73, 74, 78, 84, 89, 113, 114, 118, 124, 126, 129, 136, 142, 143, 144, 146, 147, 149, 150, 163, 177, 178, 181, 184, 185, 186, 190, 191, 192, 193, 194, 198, 199, 202, 205, 212, 218, 228, 230, 233, 235, 236, 244, 257, 260, 261, 263, 265, 266, 267], "vuart": [8, 9], "done": [8, 9, 39, 57, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 81, 86, 121, 122, 128, 131, 132, 143, 199, 211, 215, 216, 231, 240, 242, 249, 250, 253, 255, 256, 257, 258, 259, 260, 263, 265, 266], "evaluate_model": [10, 49, 61, 66, 115, 116, 117, 119, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 162, 243, 253, 257, 259], "valid": [10, 11, 23, 24, 57, 65, 70, 81, 86, 89, 91, 93, 102, 113, 114, 118, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 192, 214, 215, 216, 242, 244, 246, 247, 248, 250, 251, 253, 255, 256, 257, 259, 260, 263, 265, 266, 267], "summari": [10, 11, 14, 15, 16, 21, 22, 25, 26, 59, 60, 62, 113, 114, 118, 120, 121, 122, 124, 131, 132, 161, 162, 163, 165, 185, 189, 191, 193, 211, 212, 240, 241, 242, 244, 250, 253, 254, 256, 260, 263, 265, 267], "model_evalu": [10, 11], "h5": [10, 11, 17, 18, 21, 22, 25, 26, 29, 32, 53, 55, 60, 68, 72, 121, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 165, 168, 246, 251, 253, 256, 257, 259, 261, 266], "float32": [10, 11, 39, 51, 56, 61, 62, 65, 76, 80, 81, 83, 85, 90, 91, 121, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 185, 191, 242, 243, 244, 246, 248, 253, 257, 259, 260, 264], "audio_example1": [10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 62, 67, 69], "limit": [10, 11, 25, 26, 34, 43, 44, 89, 91, 102, 113, 114, 118, 122, 138, 156, 159, 161, 163, 215, 216, 223, 229, 255, 259, 264, 265, 267], "max": [10, 11, 62, 81, 84, 124, 127, 138, 142, 144, 176, 180, 183, 188, 196, 204, 212, 228, 255, 256, 263, 265, 267], "100": [10, 11, 25, 26, 67, 81, 113, 114, 118, 119, 124, 128, 129, 131, 132, 133, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 212, 237, 242, 243, 244, 250, 253, 256, 257, 259, 265, 267], "auto": [10, 11, 62, 67, 84, 115, 118, 124, 130, 137, 146, 149, 156, 161, 208], "encod": [10, 11, 67, 81, 86, 91, 102, 113, 115, 118, 122, 129, 130, 132, 136, 137, 142, 144, 146, 147, 149, 150, 156, 161, 191, 215, 216, 258, 260], "fully_connected_autoencod": [10, 11], "dir": [10, 11, 12, 13, 17, 18, 25, 26, 44, 70, 126, 140, 161, 218, 228, 244, 246, 247, 248, 250, 251, 256], "eval": [10, 11, 60, 113, 115, 118, 140, 161, 256], "kera": [10, 11, 17, 18, 21, 22, 25, 26, 29, 32, 53, 60, 61, 69, 70, 81, 85, 86, 107, 111, 113, 114, 118, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 161, 166, 168, 240, 248, 253, 256, 260, 261, 263, 264, 265, 266], "weight": [10, 11, 17, 18, 23, 24, 25, 26, 27, 28, 51, 59, 61, 62, 65, 69, 70, 76, 86, 113, 114, 118, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 161, 166, 167, 180, 183, 186, 188, 204, 205, 239, 240, 243, 246, 250, 251, 253, 256, 257, 258, 259, 263, 265], "previou": [10, 11, 17, 18, 25, 26, 51, 70, 126, 144, 152, 161, 175, 223, 227, 228, 230, 255, 257, 260, 264], "session": [10, 11, 17, 18, 19, 20, 25, 26, 102, 123, 124, 126, 161, 211, 254, 255], "absolut": [10, 11, 17, 18, 25, 26, 71, 86, 89, 102, 121, 124, 126, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 161, 176, 192, 223, 228, 260], "best": [10, 11, 17, 18, 25, 26, 124, 128, 151, 161, 166, 246, 251, 254, 255, 257, 258, 259, 260, 261, 264, 266, 267], "find": [10, 11, 17, 18, 25, 26, 35, 36, 41, 71, 73, 122, 125, 127, 138, 140, 142, 143, 144, 146, 147, 149, 150, 161, 163, 215, 216, 230, 232, 238, 242, 254, 255, 256, 257, 259, 260, 265], "filenam": [10, 11, 17, 18, 25, 26, 67, 69, 70, 81, 82, 86, 87, 89, 91, 102, 121, 124, 142, 143, 144, 147, 148, 150, 161, 191, 208, 228, 235, 248, 256, 265], "evaluateautoencod": [10, 11], "mixin": [10, 11, 19, 20, 61, 67, 69, 71, 114, 115, 116, 119, 121, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 253, 257, 259], "comma": [10, 11, 161, 230], "seper": [10, 11, 161, 255], "first": [10, 11, 29, 32, 34, 35, 36, 37, 39, 41, 43, 44, 50, 52, 54, 63, 68, 70, 72, 73, 81, 84, 86, 99, 102, 113, 114, 115, 118, 122, 131, 132, 146, 149, 161, 163, 165, 174, 177, 193, 200, 209, 213, 215, 216, 218, 242, 244, 246, 248, 251, 253, 255, 256, 257, 259, 260, 262, 263, 264, 266], "normal": [10, 11, 37, 62, 74, 81, 84, 86, 115, 124, 130, 136, 140, 144, 146, 149, 156, 161, 175, 191, 228, 242, 248, 257], "abnorm": [10, 11, 115, 130, 161], "independ": [10, 11, 115, 124, 126, 161, 240, 264, 266], "place": [10, 11, 37, 41, 81, 86, 90, 94, 96, 102, 122, 161, 199], "upper": [10, 11, 73, 86, 122, 156, 159, 161, 215, 216, 228, 255, 259, 264], "decod": [10, 11, 80, 85, 130, 142, 144, 146, 147, 149, 150, 161], "diagram": [10, 11, 25, 26, 60, 61, 161, 162, 166, 243, 256, 257, 261, 265], "arch": [10, 11], "doe": [10, 11, 15, 16, 25, 26, 53, 57, 62, 63, 68, 69, 71, 72, 80, 81, 84, 85, 89, 100, 113, 114, 118, 119, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 174, 177, 178, 181, 184, 186, 190, 193, 194, 198, 199, 202, 205, 214, 230, 241, 244, 246, 251, 253, 256, 257, 258, 259, 260, 261, 264, 265], "thing": [10, 11, 25, 26, 51, 230, 255, 256, 257, 259, 265], "upload": [10, 11, 15, 16, 19, 20, 25, 26, 63, 64, 72, 123, 126, 146, 149, 161, 163, 166, 254, 255], "evalu": [11, 14, 25, 26, 49, 53, 59, 60, 65, 66, 76, 88, 96, 102, 113, 114, 115, 116, 117, 118, 119, 120, 122, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 239, 240, 241, 253, 254, 260, 263], "fingerprint": [12, 13, 14, 40, 140, 141, 239, 257, 260], "authent": [12, 13, 40, 140, 141, 239], "eader": [12, 13], "r503": [12, 13, 37, 256], "adafruit": [12, 13, 258], "4651": [12, 13], "fingerprint_": [12, 13], "ee": [12, 13, 212, 267], "fingerprint_authent": [12, 13, 256], "sequenc": [12, 13, 37, 61, 69, 81, 113, 114, 118, 255, 256, 259, 265, 266], "finger": [12, 13, 37, 140, 256], "With": [12, 13, 19, 20, 35, 36, 37, 39, 41, 44, 57, 62, 63, 69, 70, 71, 84, 86, 122, 124, 152, 215, 216, 249, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267], "integ": [12, 13, 23, 24, 35, 65, 70, 81, 86, 91, 105, 106, 107, 113, 114, 118, 121, 122, 124, 127, 128, 129, 136, 138, 146, 149, 166, 176, 191, 192, 197, 200, 215, 216, 217, 229, 235, 257, 264, 265], "collect": [12, 13, 96, 98, 140, 144, 147, 150, 185, 240, 253, 254, 256, 257, 259, 260, 264, 266], "5": [12, 13, 19, 20, 61, 62, 67, 69, 74, 75, 81, 84, 91, 107, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 176, 229, 242, 244, 246, 247, 249, 250, 251, 253, 257, 259, 260, 263, 265, 267], "reader": [12, 13, 37], "fingerprint_read": [13, 14, 37, 78, 140, 256, 257, 260], "describ": [14, 34, 43, 44, 59, 61, 62, 63, 65, 68, 69, 71, 72, 73, 74, 239, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267], "avail": [14, 19, 20, 34, 40, 41, 43, 44, 46, 61, 62, 63, 65, 68, 69, 70, 71, 72, 74, 81, 86, 88, 91, 96, 100, 107, 115, 116, 119, 126, 129, 136, 142, 144, 146, 147, 149, 150, 162, 163, 211, 221, 223, 228, 229, 238, 241, 246, 251, 254, 255, 257, 258, 260, 261, 263, 266, 267], "prompt": [14, 43, 73, 102, 255], "access": [14, 43, 45, 47, 48, 61, 62, 63, 65, 68, 69, 72, 73, 76, 111, 154, 189, 191, 193, 230, 240, 255, 256, 257, 259, 260, 264, 267], "mltk_pyvenv": [14, 50, 74], "bat": [14, 43, 44, 74], "bin": [14, 43, 44, 74, 144, 148, 156, 159, 176, 185, 192, 193, 259, 260, 263, 265, 266], "profil": [14, 16, 17, 23, 24, 33, 37, 39, 40, 49, 51, 52, 59, 60, 66, 78, 111, 119, 122, 124, 126, 129, 131, 132, 133, 134, 136, 138, 162, 163, 170, 172, 174, 175, 231, 240, 241, 253, 254, 256], "etc": [14, 27, 28, 67, 113, 114, 118, 124, 146, 149, 161, 240, 254, 256, 257, 258, 259, 267], "addit": [14, 16, 28, 46, 51, 57, 62, 65, 68, 74, 76, 77, 86, 119, 121, 122, 124, 126, 127, 128, 129, 142, 143, 145, 146, 147, 148, 149, 150, 151, 155, 156, 163, 177, 178, 181, 184, 186, 190, 191, 194, 198, 199, 202, 205, 211, 213, 218, 248, 250, 253, 256, 257, 259, 260, 263, 264, 265, 266], "flag": [14, 63, 68, 71, 72, 124, 232, 255, 257, 259], "append": [14, 25, 26, 69, 71, 125, 129, 133, 136, 138, 140, 142, 143, 144, 146, 147, 149, 150, 154, 217, 228, 229, 230, 249, 256, 257, 259], "tensorboard": [14, 24, 59, 67, 74, 124, 128, 129, 136, 146, 149, 241], "ssh": [14, 20, 59, 69, 123, 241, 254, 257, 258, 259], "remot": [14, 19, 20, 63, 64, 72, 73, 123, 241, 251, 256, 257, 259, 265], "server": [14, 19, 20, 23, 24, 29, 32, 59, 63, 70, 71, 72, 73, 74, 126, 168, 251, 255, 256, 257, 259, 265], "reduc": [14, 15, 16, 17, 41, 53, 59, 65, 124, 151, 163, 192, 229, 240, 241, 254, 255, 257, 259, 260, 263, 264, 265, 266, 267], "footprint": [14, 17, 241], "summar": [14, 22, 49, 62, 113, 114, 118, 128, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 165, 240, 256, 257, 259, 260], "graph": [14, 23, 24, 29, 32, 70, 72, 91, 124, 128, 129, 136, 146, 149, 168, 240, 251, 256, 257, 259, 260], "interact": [14, 29, 32, 59, 61, 72, 102, 162, 168, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 256, 257, 259, 260, 265, 266], "visual": [14, 23, 24, 29, 30, 34, 42, 43, 45, 47, 48, 50, 58, 59, 61, 70, 74, 86, 124, 128, 129, 136, 138, 146, 149, 158, 160, 168, 240, 241, 254, 255, 256, 260, 262], "ani": [15, 16, 19, 20, 25, 26, 27, 28, 33, 35, 36, 37, 39, 41, 44, 48, 50, 62, 63, 67, 68, 70, 71, 72, 73, 74, 76, 81, 84, 86, 102, 113, 114, 118, 119, 121, 122, 123, 124, 126, 129, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 176, 192, 215, 216, 223, 230, 232, 238, 241, 254, 255, 256, 257, 259, 260, 262, 263, 265], "profile_model": [15, 49, 63, 66, 74, 119, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 162, 170, 175, 231, 244, 247, 253, 265], "model_profil": [15, 16, 27, 28], "image_example1": [15, 16, 25, 26, 29, 32, 33, 41, 61, 63, 66, 67, 69, 71, 243, 244, 245, 246, 247, 248, 249, 251, 257, 260], "estim": [15, 16, 63, 138, 140, 144, 147, 150, 163, 169, 175, 247, 256, 257, 259, 265], "without": [15, 16, 27, 28, 48, 62, 68, 74, 86, 102, 124, 142, 143, 144, 145, 147, 148, 150, 152, 165, 191, 208, 232, 241, 255, 257, 258, 259, 260, 264, 266], "some_model": [15, 16], "One": [15, 16, 17, 18, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 57, 70, 81, 86, 96, 102, 114, 120, 122, 124, 125, 133, 191, 223, 255, 256, 257, 259], "compil": [15, 16, 34, 43, 44, 67, 69, 96, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 169, 175, 231, 253, 256, 257, 259, 260, 261, 263], "rather": [15, 16, 17, 18, 21, 22, 29, 32, 41, 86, 102, 143, 144, 145, 148, 152, 168, 250, 257, 264], "o": [15, 16, 17, 18, 21, 22, 27, 28, 71, 75, 77, 91, 134, 140, 142, 143, 144, 146, 147, 148, 149, 150, 212, 218, 228, 229, 234, 236, 242, 244, 246, 247, 248, 250, 251, 257, 258, 265, 267], "report": [15, 16, 124, 163, 254, 257, 263], "format": [15, 16, 19, 20, 25, 26, 34, 36, 43, 44, 56, 57, 60, 62, 64, 71, 77, 81, 84, 102, 122, 124, 138, 146, 149, 154, 163, 173, 175, 189, 215, 216, 217, 219, 235, 239, 253, 257, 259, 264], "return": [15, 16, 53, 56, 61, 63, 67, 69, 71, 80, 81, 83, 84, 85, 86, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 242, 244, 248, 253, 255, 256, 257, 258, 259, 260, 261, 263, 265], "unformat": [15, 16], "metric": [15, 16, 23, 24, 67, 69, 70, 99, 113, 114, 118, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 166, 169, 175, 239, 241, 247, 253, 256, 257, 259, 260, 261, 263, 264, 266], "cpu": [15, 16, 41, 51, 63, 71, 81, 86, 91, 128, 129, 130, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 174, 229, 244, 247, 254, 258, 260, 263, 265], "cycl": [15, 16, 41, 47, 51, 57, 63, 128, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 174, 244, 247, 257, 259, 260, 263, 265], "extra": [15, 16, 86, 146, 149, 242], "info": [15, 16, 62, 67, 71, 105, 107, 111, 126, 128, 140, 142, 143, 144, 145, 147, 150, 151, 155, 191, 227, 229, 244, 245, 246, 249, 250, 251, 256, 259, 263, 265], "quantize_model": [17, 49, 65, 121, 122, 162, 245], "mltk_model": [17, 18, 61, 62, 66, 67, 69, 115, 121, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 166, 242, 253, 256, 257, 259, 266], "tflite_convert": [17, 18, 56, 57, 65, 67, 69, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 245, 253, 257, 259, 264, 266], "model_quant": [17, 18], "associ": [17, 18, 27, 28, 35, 36, 37, 39, 91, 102, 163, 165, 172, 177, 178, 181, 184, 186, 190, 191, 194, 198, 199, 201, 202, 205, 255, 256, 257, 258, 259, 260, 261, 263, 265], "structur": [17, 18, 27, 28, 42, 62, 76, 89, 91, 111, 134, 167, 207, 241, 256, 257, 259, 267], "back": [19, 20, 35, 36, 142, 144, 147, 150, 248, 257], "open": [19, 20, 23, 24, 50, 64, 71, 72, 73, 102, 142, 144, 147, 150, 222, 223, 224, 225, 228, 232, 233, 238, 244, 246, 247, 248, 250, 251, 255, 257, 258, 259, 260, 262, 263, 265, 267], "user_set": [19, 20, 66, 75, 77, 123, 228, 254, 255], "yaml": [19, 20, 27, 28, 66, 75, 77, 123, 228, 254, 255], "config": [19, 20, 34, 35, 36, 37, 39, 41, 52, 77, 126, 128, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 177, 178, 181, 184, 186, 190, 194, 198, 199, 202, 205, 211, 212, 242, 246, 248, 250, 255, 257, 258, 259, 263, 265, 267], "export": [19, 20, 71, 75, 91, 123, 146, 149, 229, 240, 265], "variabl": [19, 20, 33, 36, 37, 39, 41, 44, 66, 71, 77, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 123, 124, 126, 144, 146, 147, 149, 205, 217, 218, 228, 229, 230, 233, 241, 257, 259, 260, 262], "6": [19, 20, 36, 37, 39, 81, 84, 86, 90, 99, 107, 128, 129, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 176, 192, 238, 242, 244, 246, 247, 249, 250, 253, 255, 257, 259, 260, 263, 264, 265, 266], "startup": [19, 20, 35, 36, 37, 39, 255], "shell": [19, 20, 71, 123, 233, 256, 257, 259, 260], "7": [19, 20, 37, 75, 107, 128, 129, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 168, 222, 242, 244, 246, 247, 249, 250, 251, 253, 257, 259, 260, 263, 265], "detach": [19, 20, 71], "subprocess": [19, 20, 71, 81, 86, 91, 129, 136, 142, 144, 146, 147, 149, 150, 229, 246, 251, 259, 260], "continu": [19, 20, 43, 71, 124, 133, 142, 144, 146, 147, 149, 150, 212, 237, 244, 245, 246, 249, 251, 253, 256, 257, 258, 259, 260, 261, 262, 267], "even": [19, 20, 62, 71, 84, 102, 134, 255, 257, 259, 264, 267], "prematur": [19, 20, 71, 255], "close": [19, 20, 43, 102, 140, 222, 223, 225, 232, 238, 255, 256, 264, 266, 267], "8": [19, 20, 39, 67, 69, 81, 84, 89, 91, 107, 122, 124, 127, 128, 129, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 191, 215, 216, 238, 242, 244, 246, 247, 249, 250, 251, 253, 255, 257, 259, 260, 263, 264, 265, 266, 267], "poll": [19, 20, 71], "abort": [19, 20, 37, 71, 232, 255], "9": [19, 20, 34, 43, 44, 73, 74, 75, 105, 106, 107, 127, 128, 129, 130, 133, 134, 135, 136, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 230, 242, 244, 246, 247, 249, 250, 251, 253, 255, 257, 258, 259, 260, 261, 263, 265, 266], "11": [19, 20, 34, 43, 44, 73, 74, 130, 134, 135, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 242, 244, 246, 250, 251, 257, 259, 260, 263, 265, 266], "12": [19, 20, 34, 43, 44, 73, 74, 75, 81, 127, 128, 134, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 157, 159, 160, 230, 242, 244, 246, 250, 257, 258, 259, 260, 263, 264, 265, 266, 267], "shutdown": [19, 20, 129, 136, 142, 144, 146, 147, 149, 150, 211, 229], "credenti": [19, 20, 70, 71, 211, 258, 267], "line": [19, 20, 27, 28, 42, 43, 44, 45, 47, 48, 61, 63, 64, 65, 68, 69, 70, 72, 74, 77, 78, 111, 122, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 215, 216, 217, 230, 233, 241, 255, 258, 261, 263, 265, 267], "ssh4": [19, 20, 255], "vast": [19, 20, 71, 123, 239, 240, 254, 257, 258, 259, 260, 261, 263], "ai": [19, 20, 71, 123, 150, 239, 240, 254, 257, 258, 259, 260, 261, 263, 265, 267], "p": [19, 20, 23, 24, 27, 28, 29, 32, 67, 71, 73, 86, 102, 129, 135, 140, 142, 144, 146, 147, 149, 150, 152, 255, 257, 260], "18492": [19, 20], "id_vast_ai": [19, 20, 71, 255], "start": [19, 20, 23, 24, 29, 30, 31, 32, 35, 36, 39, 41, 52, 64, 71, 73, 89, 91, 113, 114, 118, 122, 129, 131, 132, 136, 139, 142, 144, 146, 147, 149, 150, 151, 156, 200, 209, 213, 215, 216, 229, 231, 232, 238, 246, 251, 253, 259, 260, 261, 263, 267], "later": [19, 20, 57, 62, 65, 71, 87, 124, 142, 143, 144, 145, 146, 147, 148, 149, 151, 185, 193, 245, 248, 250, 255, 257, 259, 264], "resum": [19, 20, 25, 26, 71, 124, 126, 166, 255], "store": [19, 20, 25, 26, 59, 60, 71, 121, 144, 147, 175, 254, 255, 256, 265], "retriev": [19, 20, 39, 61, 62, 136, 146, 149, 191, 231, 242, 248, 261, 264], "disconnect": [19, 20, 71, 225], "discard": [19, 20, 122, 146, 149, 215, 216], "forc": [19, 20, 35, 36, 37, 39, 41, 52, 71, 140, 144, 185, 193, 219, 246, 251, 255, 258, 259, 265], "sshmixin": [19, 20, 142, 146, 149], "model_training_via_ssh": [19, 20], "cancel": [19, 20], "mltk_command": [19, 20], "hostnam": [19, 20, 77, 255], "login": [19, 20, 71, 254], "22": [19, 20, 71, 128, 129, 134, 138, 140, 142, 143, 144, 147, 148, 150, 151, 156, 157, 160, 242, 244, 246, 251, 256, 259, 260, 263], "myserv": [19, 20, 71], "192": [19, 20, 64, 71, 140, 156, 242, 263], "168": [19, 20, 64, 71, 147, 150, 159, 263], "56": [19, 20, 71, 128, 142, 143, 144, 147, 150, 151, 242, 259, 260, 263], "ubuntu": [19, 20, 34, 43, 44, 71], "456": [19, 20, 71, 263], "worksp": [19, 20], "identity_fil": [19, 20], "kei": [19, 20, 62, 84, 113, 114, 118, 121, 122, 133, 142, 151, 163, 174, 177, 178, 181, 184, 185, 186, 190, 191, 193, 194, 198, 199, 202, 205, 215, 216, 230, 248, 254, 261, 264, 265, 267], "privat": [19, 20, 71, 255, 267], "pem": [19, 20], "listen": [19, 20, 23, 24, 29, 32, 35, 64, 71, 168, 258, 259], "password": [19, 20, 255], "clean": [19, 20, 25, 26, 45, 47, 48, 70, 102, 119, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 166, 207, 218, 253, 255, 257, 259, 262, 263, 267], "AND": [19, 20, 124, 125, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 241], "summarize_model": [21, 49, 68, 122, 162, 246, 250], "model_summari": [21, 22], "someth": [23, 24, 35, 36, 255, 256, 257, 262, 264], "often": [23, 24, 124], "abl": [23, 24, 35, 36, 38, 39, 41, 47, 51, 61, 63, 73, 126, 240, 255, 257, 258, 262, 265], "measur": [23, 24, 61, 63, 124, 230], "workflow": [23, 24], "track": [23, 24, 70, 131, 132, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 253, 254, 257, 259, 261], "experi": [23, 24, 126, 254, 256, 259], "like": [23, 24, 67, 69, 71, 74, 84, 86, 102, 113, 114, 118, 121, 124, 126, 127, 144, 145, 147, 150, 174, 191, 193, 227, 232, 233, 240, 253, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267], "accuraci": [23, 24, 51, 59, 61, 67, 70, 96, 99, 124, 128, 129, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 240, 241, 243, 253, 254, 256, 260, 263, 264, 265, 266], "dimension": [23, 24, 70, 138, 257], "space": [23, 24, 41, 70, 98, 122, 138, 140, 215, 216, 256], "org": [23, 24, 34, 43, 44, 70, 81, 99, 100, 102, 122, 124, 127, 129, 130, 131, 132, 136, 138, 140, 143, 145, 146, 148, 149, 151, 152, 155, 156, 157, 159, 160, 163, 253, 257, 259, 260, 267], "get_start": [23, 24], "model_training_monitor": [23, 24], "being": [23, 24, 35, 36, 54, 56, 67, 86, 122, 138, 142, 144, 146, 147, 169, 219, 241, 253, 255, 257, 259, 262, 264, 266], "properti": [23, 24, 36, 62, 65, 67, 69, 70, 71, 81, 84, 86, 87, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 129, 131, 132, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 161, 163, 166, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 213, 214, 215, 216, 223, 225, 226, 229, 230, 232, 238, 248, 253, 256, 257, 258, 259], "dict": [23, 24, 70, 71, 81, 84, 86, 89, 91, 113, 114, 118, 120, 122, 124, 126, 128, 129, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 159, 160, 161, 163, 166, 167, 172, 173, 174, 177, 178, 181, 184, 185, 186, 190, 191, 193, 194, 198, 199, 202, 205, 211, 218, 223, 229, 230, 232, 233, 238, 257, 261, 266], "histogram_freq": [23, 24, 70, 124, 128, 129, 136, 146, 149], "epoch": [23, 24, 25, 26, 67, 70, 113, 114, 118, 119, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 165, 166, 244, 246, 251, 253, 255, 257, 258, 259, 263], "histogram": [23, 24, 70, 124, 128, 129, 136, 146, 149], "layer": [23, 24, 41, 48, 57, 62, 65, 68, 70, 72, 85, 113, 114, 118, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 171, 172, 174, 175, 177, 178, 179, 180, 181, 183, 184, 186, 187, 188, 190, 191, 192, 194, 195, 196, 198, 199, 202, 203, 204, 205, 206, 239, 244, 246, 250, 251, 253, 256, 257, 259, 260, 261, 263, 265], "won": [23, 24, 70, 102, 124, 126, 128, 129, 136, 146, 149, 264], "split": [23, 24, 70, 81, 86, 89, 91, 102, 122, 124, 128, 129, 130, 131, 132, 136, 142, 144, 146, 147, 149, 150, 215, 216, 230, 253, 257], "write_graph": [23, 24, 70, 124, 128, 129, 136, 146, 149], "whether": [23, 24, 64, 70, 81, 86, 113, 114, 118, 122, 124, 127, 128, 129, 136, 138, 146, 149, 176, 192, 215, 216, 255], "becom": [23, 24, 70, 124, 128, 129, 136, 146, 149, 255, 257], "quit": [23, 24, 70, 124, 128, 129, 136, 146, 149, 257], "write_imag": [23, 24, 70, 124, 128, 129, 136, 146, 149], "update_freq": [23, 24, 70, 124, 128, 129, 136, 146, 149], "batch": [23, 24, 67, 70, 81, 82, 85, 86, 87, 89, 90, 91, 113, 114, 115, 116, 117, 118, 124, 128, 129, 131, 132, 136, 140, 142, 143, 144, 146, 147, 149, 150, 154, 191, 205, 229, 253, 260, 265], "let": [23, 24, 44, 70, 124, 128, 129, 136, 143, 145, 146, 148, 149, 151, 152, 242, 254, 255, 257, 259, 263, 265], "callback": [23, 24, 50, 57, 81, 86, 89, 91, 115, 116, 117, 121, 122, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 159, 160, 161, 175, 207, 211, 228, 229, 232, 233, 234, 253, 256], "too": [23, 24, 70, 122, 124, 128, 129, 136, 146, 149, 163, 215, 216, 256, 257, 258, 259, 260, 263, 267], "frequent": [23, 24, 70, 124, 128, 129, 136, 146, 149, 241, 255, 259], "profile_batch": [23, 24, 70, 124, 128, 129, 136, 146, 149], "characterist": [23, 24, 36, 61, 70, 124, 128, 129, 136, 146, 149, 161, 257, 258, 267], "neg": [23, 24, 61, 70, 124, 128, 129, 136, 146, 149, 154, 176, 192, 255, 259], "tupl": [23, 24, 70, 80, 81, 84, 86, 89, 91, 93, 102, 105, 106, 107, 113, 114, 118, 121, 122, 124, 127, 128, 129, 131, 132, 136, 138, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 163, 166, 174, 175, 178, 181, 191, 193, 194, 200, 202, 208, 215, 216, 219, 228, 232, 233, 253], "pair": [23, 24, 70, 71, 84, 124, 128, 129, 136, 138, 140, 146, 149, 174, 176, 185, 192, 193], "signifi": [23, 24, 37, 70, 124, 128, 129, 136, 146, 149], "rang": [23, 24, 57, 62, 70, 81, 84, 86, 99, 105, 106, 107, 122, 124, 128, 129, 131, 132, 133, 136, 138, 140, 142, 144, 146, 147, 149, 157, 215, 216, 229, 253, 255, 256, 259, 263, 264, 266], "second": [23, 24, 63, 70, 86, 99, 102, 124, 128, 129, 136, 141, 146, 149, 163, 174, 177, 211, 223, 232, 238, 255, 257, 259, 260, 263, 265], "keyword_spotting_on_ff_v2": [23, 24], "webpag": [23, 24, 36, 41, 59, 63, 64, 70, 72, 76, 251, 254, 255, 257, 259], "gui": [23, 24, 30, 31, 34, 43, 44, 70, 191, 259, 263], "separ": [23, 24, 98, 122, 129, 136, 142, 144, 146, 147, 149, 150, 215, 216, 225, 229, 255, 260], "localhost": [23, 24, 64, 251, 255], "6002": [23, 24], "launch": [23, 24, 50, 70, 262, 263], "webbrows": [23, 24, 29, 32, 168], "train_model": [25, 49, 66, 69, 119, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 162, 249, 253, 262], "model_train": [25, 26], "dryrun": [25, 26, 120, 129, 131, 132, 136, 142, 144, 146, 147, 149, 150, 253], "checkpoint": [25, 26, 67, 69, 124, 128, 129, 130, 134, 135, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 257, 259], "43": [25, 26, 27, 28, 62, 135, 138, 140, 142, 143, 144, 147, 150, 151, 242, 250, 257, 259, 260, 263, 266], "everyth": [25, 26, 59, 67, 69, 142, 144, 146, 147, 149, 240, 249, 257, 259, 263, 267], "quickli": [25, 26, 69, 71, 146, 151, 239, 241, 255, 258, 260, 261], "dry": [25, 26, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 253, 255], "size": [25, 26, 41, 53, 62, 63, 67, 81, 84, 86, 89, 91, 113, 114, 118, 122, 127, 128, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 167, 178, 181, 191, 194, 200, 202, 205, 215, 216, 229, 235, 238, 244, 246, 247, 250, 251, 255, 258, 259, 260, 261, 263, 264, 265], "initi": [25, 26, 37, 126, 129, 142, 144, 146, 147, 149, 150, 151, 211, 219, 254, 259, 260], "histori": [25, 26, 60, 124, 126, 166, 254], "update_model_paramet": [27, 49, 62, 121, 162, 250], "metadata": [27, 28, 35, 36, 62, 65, 67, 121, 131, 132, 167, 175, 177, 178, 181, 184, 186, 190, 191, 193, 194, 198, 199, 202, 205, 248, 250, 253, 267], "taken": [27, 28, 35, 102, 155, 156, 160, 167, 212, 224, 231, 237, 257, 259], "param": [27, 28, 57, 62, 81, 86, 134, 140, 143, 144, 148, 156, 166, 167, 178, 181, 186, 194, 202, 208, 246, 248, 250, 251, 257, 259], "json": [27, 28, 50, 60, 64, 163, 208, 230, 267], "int": [27, 28, 57, 62, 80, 81, 83, 84, 85, 86, 89, 91, 94, 95, 96, 98, 113, 118, 122, 124, 126, 127, 129, 132, 133, 134, 135, 138, 140, 142, 143, 144, 146, 147, 148, 149, 150, 152, 154, 156, 161, 163, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 211, 213, 215, 216, 217, 218, 223, 225, 227, 229, 230, 232, 233, 235, 236, 238, 242, 260, 264, 266], "str": [27, 28, 62, 80, 81, 85, 86, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 118, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 136, 138, 140, 142, 143, 144, 146, 147, 148, 149, 150, 154, 161, 163, 165, 166, 167, 168, 169, 171, 173, 175, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 198, 199, 201, 202, 203, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 225, 227, 228, 229, 230, 232, 233, 235, 236, 238, 242, 248, 253, 256, 265], "made": [27, 28, 35, 36, 45, 48, 71, 107, 124, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 241, 248, 257, 259], "my_param": [27, 28, 185, 193], "my": [27, 28, 53, 61, 67, 69, 70, 73, 74, 191, 257, 267], "great": [27, 28, 67, 69, 257, 259, 266], "my_custom_param": [27, 28, 62], "led_period_m": [27, 28], "runtime_memory_s": [27, 28, 62, 128, 130, 133, 134, 135, 138, 140, 143, 145, 148, 151, 152, 154, 155, 156, 157, 159, 160, 163, 167, 173, 242, 257], "cmsi": [27, 28, 63, 167], "view_model": [29, 49, 72, 162, 251], "netron": [29, 32, 72, 76, 140, 191, 251, 265], "model_visu": [29, 32], "8080": [29, 32, 64, 251, 255], "augment": [30, 31, 76, 81, 86, 88, 98, 115, 116, 129, 133, 134, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 211, 212, 255, 260], "parallelaudiodatagener": [30, 31, 50, 62, 67, 83, 86, 88, 113, 128, 134, 137, 143, 145, 148, 151, 155, 255, 261], "doesn": [33, 100, 124, 128, 129, 134, 135, 136, 138, 140, 143, 145, 146, 148, 149, 152, 155, 228, 255, 257], "veri": [33, 63, 68, 72, 74, 94, 102, 142, 143, 145, 146, 148, 149, 151, 152, 230, 244, 246, 251, 253, 255, 257, 258, 259, 261, 263, 267], "begin": [33, 35, 36, 69, 80, 113, 114, 118, 122, 124, 142, 143, 144, 146, 147, 149, 150, 156, 176, 192, 215, 216, 255, 258, 260, 266, 267], "debug": [33, 53, 62, 67, 81, 86, 89, 91, 128, 133, 134, 135, 140, 143, 144, 145, 146, 148, 149, 151, 152, 155, 156, 218, 221, 224, 225, 227, 229, 239, 250, 256, 257, 258, 264], "oper": [33, 37, 44, 51, 61, 62, 65, 68, 69, 71, 72, 91, 111, 114, 119, 122, 124, 128, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 174, 177, 178, 181, 184, 186, 190, 194, 198, 199, 202, 205, 215, 216, 241, 244, 247, 255, 256, 257, 259, 260, 263], "gecko": [33, 35, 36, 37, 39, 41, 45, 78, 257, 259, 265], "sdk": [33, 35, 36, 37, 39, 41, 45, 257, 259, 265], "tflm": [33, 37, 39, 41, 47, 48, 52, 80, 81, 83, 138, 163, 169, 170, 173, 175, 240, 242, 266], "phase": [33, 146, 149, 257], "find_packag": 33, "mltk_find_packag": 33, "wrapper": [33, 57, 74, 83, 111, 169, 172, 175, 190, 197, 200, 201, 241, 242, 253], "mltk_tflite_micro_wrapp": [33, 48], "symbol": [33, 89, 91, 218, 228], "releas": [33, 34, 37, 44, 102, 265], "fulli": [33, 62, 63, 65, 68, 69, 72, 73, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 165, 187, 206, 244, 245, 246, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 263], "optim": [33, 41, 67, 68, 69, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 218, 239, 246, 247, 250, 251, 253, 257, 259, 260, 261, 265, 266], "ON": [33, 35, 36, 41, 258], "disassembl": 33, "assembli": 33, "instruct": [33, 58, 155, 169, 175, 256, 257, 258, 259, 260, 267], "mltk_model_profil": [33, 34, 41, 44, 64], "hint": [33, 37, 39, 41, 69, 70, 71, 140, 248, 255, 258, 259], "just": [33, 37, 39, 41, 50, 67, 113, 114, 118, 121, 126, 129, 130, 131, 132, 133, 136, 138, 140, 142, 144, 146, 147, 149, 150, 208, 230, 241, 242, 244, 248, 253, 255, 256, 259, 261, 262, 263, 266, 267], "search": [33, 37, 39, 41, 59, 67, 75, 77, 89, 91, 99, 122, 128, 142, 144, 147, 150, 175, 215, 216, 228, 230, 241, 246, 247, 249, 250, 251, 255, 257, 258, 265], "model_search_path": [33, 37, 39, 41], "mltk_audio_classifi": [33, 35, 258], "few": [34, 43, 44, 65, 114, 228, 240, 255, 257, 259, 261], "long": [34, 43, 44, 51, 70, 102, 140, 142, 145, 255, 257, 260, 261, 266, 267], "en": [34, 43, 44, 58, 99, 100, 265, 267], "win32": [34, 43, 44], "fileio": [34, 43, 44], "maximum": [34, 43, 44, 81, 86, 89, 91, 115, 116, 122, 124, 138, 140, 161, 211, 213, 215, 216, 223, 228, 229, 232, 238, 255, 256], "tab": [34, 43, 44, 50, 122, 215, 216, 257, 259], "registri": [34, 43, 44], "studio": [34, 42, 45, 47, 48, 50, 74, 142, 240, 255, 256, 257, 258, 260, 262], "3rd": [34, 43, 44, 102, 126, 142, 144, 146, 147, 149, 150, 254, 267], "parti": [34, 43, 44, 94, 126, 129, 142, 144, 146, 147, 149, 150, 254, 255, 267], "visualstudio": [34, 43, 44], "Be": [34, 43, 44, 73, 255, 256, 257, 258, 259, 262, 263, 265], "sure": [34, 43, 44, 50, 57, 73, 74, 84, 124, 127, 131, 132, 140, 144, 147, 150, 253, 255, 256, 257, 258, 259, 262, 263, 265, 267], "check": [34, 39, 41, 43, 44, 52, 124, 231, 255, 263, 267], "desktop": [34, 44, 78, 255, 258], "workload": [34, 43, 44, 255], "sudo": [34, 43, 44, 54, 71, 77, 255], "apt": [34, 43, 44, 71, 77, 255], "y": [34, 43, 44, 71, 77, 81, 86, 113, 114, 118, 120, 122, 124, 127, 129, 130, 131, 132, 133, 136, 138, 140, 142, 144, 146, 147, 149, 150, 156, 161, 191, 215, 216, 229, 235, 253, 255, 256, 257, 265], "ppa": [34, 43, 44], "toolchain": [34, 43, 44, 45, 47, 48], "r": [34, 43, 44, 122, 142, 144, 147, 150, 215, 216, 223, 224, 225, 231, 232, 265, 267], "deadsnak": [34, 43, 44], "essenti": [34, 43, 44], "ninja": [34, 43, 44], "gdb": [34, 43], "p7zip": [34, 43, 44, 71, 77, 255], "lf": [34, 43, 44], "python3": [34, 43, 44, 74, 267], "libusb": [34, 43, 44], "libgl1": [34, 43, 44], "high": [34, 39, 43, 44, 256, 260, 266, 267], "compress": [34, 43, 44, 59, 61, 162, 256, 258, 261], "ratio": [34, 43, 44, 61, 160, 163, 176, 192], "asset": [34, 43, 44, 94, 142, 146, 149, 244, 245, 246, 249, 251], "64": [34, 43, 44, 67, 69, 102, 124, 127, 128, 129, 131, 132, 133, 134, 136, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 157, 159, 160, 242, 246, 250, 253, 257, 258, 259, 260, 263, 265], "scm": [34, 43, 44], "navig": [34, 43, 44, 254, 255, 257, 259], "cd": [34, 43, 44, 45, 47, 48, 50, 55, 74, 255, 263], "desir": [34, 62, 74, 84, 255, 259, 260, 266], "dcmake_toolchain_fil": 34, "gcc": [34, 45, 47, 48], "win64_toolchain": 34, "linux_toolchain": 34, "ex": [34, 44, 50, 246, 251, 257], "microcontrol": [35, 36], "word": [35, 36, 99, 102, 122, 142, 143, 144, 146, 147, 149, 150, 158, 159, 160, 212, 215, 216, 258, 259, 263, 267], "record": [35, 36, 41, 95, 96, 98, 99, 102, 144, 146, 147, 148, 149, 150, 156, 166, 169, 172, 175, 257, 258, 260, 265], "written": [35, 36, 57, 80, 85, 223, 238, 244, 245, 246, 249, 251, 267], "vcom": [35, 36, 258], "alexa": [35, 141, 142, 212, 239], "demo": [35, 37, 39, 40, 42, 153, 239, 259, 267], "voic": [35, 99, 142, 144, 147, 150, 209, 210, 211, 212, 215, 216, 258, 259, 267], "av": [35, 239, 258], "two": [35, 36, 61, 68, 71, 81, 86, 89, 91, 102, 103, 113, 114, 118, 122, 133, 138, 140, 143, 144, 145, 147, 148, 150, 151, 152, 163, 176, 192, 215, 216, 239, 242, 255, 256, 257, 258, 259, 260, 261, 264, 266, 267], "audio_classifier_config": 35, "led1": [35, 36], "led0": [35, 36], "regular": [35, 36, 113, 114, 118, 122, 126, 127, 134, 145, 148, 215, 216], "interv": [35, 36, 86, 124], "score": [35, 36, 102, 115, 128, 161, 253, 255], "top": [35, 36, 43, 49, 50, 61, 64, 67, 69, 73, 106, 127, 252, 255, 256, 257, 259, 262, 263], "trigger": [35, 36, 121, 122, 124, 146, 149, 172, 254, 258, 267], "light": [35, 36, 253, 257, 259], "respond": [35, 36], "greater": [35, 36, 138, 163], "blink": [35, 36], "500": [35, 36, 113, 114, 118, 144, 152, 257, 259], "clear": [35, 36, 70, 84, 114, 129, 140, 142, 144, 146, 147, 149, 150, 174, 193, 256], "map": [35, 36, 37, 39, 62, 67, 71, 84, 86, 113, 114, 118, 122, 132, 133, 140, 144, 147, 149, 150, 152, 154, 161, 185, 215, 216, 242, 257, 261, 264], "silenc": [35, 36, 80, 81, 89, 91, 95, 102, 142, 143, 144, 146, 147, 149, 150, 258, 259, 260], "unknown": [35, 36, 37, 81, 89, 91, 121, 124, 129, 142, 143, 144, 146, 147, 149, 150, 159, 175, 257, 258, 260, 261], "usual": [35, 36, 51, 65, 129, 143, 145, 151, 255, 257, 259, 263, 264, 267], "out": [35, 36, 61, 62, 71, 84, 86, 161, 174, 193, 228, 231, 255, 257, 260, 265, 267], "label": [35, 36, 39, 62, 67, 81, 86, 89, 91, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 118, 120, 129, 130, 132, 133, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 160, 161, 163, 173, 256, 259, 260, 265], "underscor": [35, 36, 39, 67, 102, 213, 257, 267], "blob": [35, 36, 52, 127, 143, 148, 157, 160, 185, 191, 193], "master": [35, 36, 88, 95, 108, 109, 110, 127, 134, 137, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 155, 156, 157, 158, 159, 160, 162, 193, 221, 242, 244, 246, 247, 248, 250, 251, 259], "toolkit": [35, 36, 256, 257, 259, 260, 265], "replac": [35, 36, 37, 39, 41, 52, 74, 86, 106, 122, 129, 142, 143, 144, 146, 147, 149, 150, 215, 216, 256, 257, 259, 260, 261, 263, 267], "insid": [35, 36, 74, 81, 86, 113, 118, 127, 262], "renam": [35, 36, 37, 39, 41, 52, 263], "1_": [35, 36, 37, 39, 41, 52], "folder": [35, 36, 37, 39, 41, 50, 52, 102], "sort": [35, 36, 37, 39, 41, 52, 81, 86, 89, 102, 113, 118, 140, 142, 144, 146, 147, 150, 254, 256], "alphabet": [35, 36, 37, 39, 41, 52, 81, 86, 89, 113, 118, 122, 215, 216], "ascend": [35, 36, 37, 39, 41, 52], "order": [35, 36, 37, 39, 41, 52, 62, 65, 66, 71, 81, 84, 86, 113, 118, 121, 174, 176, 192, 193, 265], "ad": [35, 36, 37, 39, 41, 52, 55, 61, 62, 65, 67, 69, 71, 81, 84, 89, 91, 102, 113, 118, 121, 142, 144, 145, 146, 147, 149, 151, 167, 185, 191, 227, 248, 249, 253, 255, 256, 257, 259, 260, 262, 264, 266], "flatbuff": [35, 36, 37, 39, 41, 52, 62, 76, 111, 121, 122, 124, 163, 177, 178, 181, 184, 186, 189, 190, 191, 193, 194, 198, 199, 201, 202, 205, 248], "tell": [35, 37, 39, 44, 57, 113, 114, 118, 138, 144, 152, 237, 254, 255, 256, 257, 258, 259, 260, 264, 266], "audio_classifier_model": [35, 52, 258], "correctli": [35, 36, 54, 57, 81, 86, 256, 257], "section": [35, 36, 39, 41, 44, 62, 65, 71, 102, 143, 145, 148, 152, 193, 250, 254, 255, 256, 257, 258, 259, 260, 264, 266, 267], "origin": [35, 80, 86, 102, 107, 122, 130, 146, 149, 176, 192, 215, 216, 241, 256, 257, 260, 264, 266], "well": [35, 44, 47, 51, 61, 63, 67, 78, 100, 121, 122, 142, 143, 144, 145, 147, 148, 151, 207, 208, 215, 216, 248, 255, 256, 257, 258, 259, 261, 262, 264, 266], "relev": [35, 60, 61, 86, 113, 114, 118, 119, 129, 131, 132, 136, 142, 144, 146, 147, 149, 150, 253, 254, 259], "popul": [35, 43, 67, 69, 89, 91, 119, 121, 126, 142, 144, 147, 150, 176, 192, 193, 201, 229, 253], "driver": [35, 54, 74, 255, 258, 259], "length": [35, 62, 80, 81, 83, 84, 102, 113, 114, 118, 122, 129, 138, 142, 143, 144, 146, 147, 148, 149, 150, 176, 191, 192, 215, 216, 217, 238, 242, 259, 260, 263, 267], "average_window_duration_m": [35, 62, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 242, 250, 257, 259, 263], "highest": [35, 36, 62, 84, 122, 215, 216], "detection_threshold": [35, 62, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 242, 250, 257, 263], "185": [35, 62, 142, 150, 155, 250, 260], "minimum_count": [35, 62, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 242, 250, 257, 259, 263], "multipli": [35, 39, 63, 68, 86, 127, 128, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 180, 181, 182, 183, 188, 204, 242, 244, 246, 247, 250, 257, 259, 260, 263, 265], "uart": [35, 44, 49, 221, 231, 238, 258], "effect": [35, 50, 51, 63, 64, 67, 91, 94, 113, 114, 118, 140, 142, 143, 144, 146, 147, 149, 150, 193, 253, 256, 257, 259, 263, 264], "transmit": 36, "bluetooth": [36, 260], "low": [36, 142, 144, 146, 147, 149, 150, 255, 258, 260, 267], "client": [36, 40, 260], "live": [36, 126, 259, 267], "plai": [36, 148, 149, 150, 239, 258, 259, 260], "move": [36, 142, 144, 147, 150, 257, 260, 266], "accordingli": [36, 131, 132, 253, 257, 260, 263], "ble_audio_classifi": [36, 142, 146, 147, 149, 150, 260], "pacman": [36, 149, 150, 260], "upon": [36, 255], "advertis": 36, "kw": [36, 127, 128, 142, 144, 147, 150, 159, 259], "uuid": 36, "c20ffe90": 36, "4ed4": 36, "46b9": 36, "8f6c": 36, "ec143fce3e4": 36, "string": [36, 62, 80, 81, 85, 86, 120, 121, 122, 124, 127, 131, 132, 142, 144, 147, 150, 161, 163, 165, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 190, 192, 193, 194, 195, 198, 199, 201, 202, 203, 205, 206, 207, 211, 213, 215, 216, 217, 219, 223, 227, 228, 230, 232, 233, 235, 248, 253, 267], "id": [36, 62, 91, 102, 126, 133, 161, 236, 248, 251, 255, 260], "probabl": [36, 39, 61, 135, 152, 242, 260, 261, 265], "uint8": [36, 39, 57, 65, 85, 105, 106, 107, 124, 140, 142, 144, 146, 147, 149, 150, 185, 193, 248], "whenev": [36, 130, 135], "ble_audio_classifier_config": 36, "keyword_spotting_pacman": [36, 149], "gecko_sdk_enable_bluetooth": 36, "ble_audio_classifier_model": 36, "mltk_ble_audio_classifi": 36, "qsg169": 36, "v3": [36, 141], "ug103": 36, "14": [36, 131, 132, 134, 138, 142, 143, 144, 147, 148, 150, 151, 154, 156, 157, 159, 160, 242, 248, 253, 257, 259, 260, 263, 265], "le": 36, "fundament": [36, 267], "ug434": 36, "grayscal": [37, 39, 86, 105, 106, 107, 108, 109, 118, 135, 140, 152, 248, 256, 257], "person": [37, 93, 102, 136, 142, 144, 147, 150, 158, 160, 254, 256, 257], "against": [37, 61, 119, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 232, 243, 253, 256], "similar": [37, 44, 50, 58, 61, 68, 81, 86, 102, 114, 131, 132, 138, 140, 142, 146, 149, 151, 152, 228, 253, 255, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267], "page": [37, 39, 70, 73, 74, 156, 254, 258], "click": [37, 43, 64, 73, 74, 128, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 256, 257, 259, 260, 265, 267], "button": [37, 43, 64, 73, 74, 255, 257, 259, 262], "iter": [37, 81, 84, 86, 113, 114, 118, 122, 124, 143, 148, 174, 176, 191, 192, 193, 215, 216, 228, 230, 233, 257, 265], "solid": [37, 86, 257], "blue": [37, 81, 255], "purpl": 37, "press": [37, 73, 234], "eras": 37, "puls": 37, "elaps": 37, "error": [37, 53, 54, 63, 91, 122, 124, 125, 140, 144, 155, 163, 171, 172, 215, 216, 227, 230, 231, 244, 255, 256, 263, 264, 265, 267], "try": [37, 70, 122, 142, 144, 146, 147, 149, 150, 163, 215, 216, 232, 238, 242, 244, 258, 260, 267], "repeat": [37, 113, 114, 118, 154, 256, 257], "fingerprint_signature_gener": [37, 255, 256], "howev": [37, 39, 41, 50, 51, 57, 61, 67, 68, 71, 73, 74, 138, 140, 142, 144, 146, 147, 149, 151, 175, 242, 246, 251, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267], "method": [37, 39, 41, 81, 82, 83, 84, 86, 87, 91, 99, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 213, 214, 215, 216, 222, 223, 225, 226, 229, 230, 232, 234, 238, 264], "fingeprint_authent": 37, "usart": 37, "peripher": [37, 39, 258], "pin": [37, 39, 258], "expans": [37, 39, 185], "gnd": [37, 39, 258], "black": [37, 86, 255], "suppli": [37, 62, 81, 86, 115, 250, 256, 267], "20": [37, 67, 74, 78, 81, 113, 114, 118, 128, 129, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 160, 227, 235, 242, 250, 255, 257, 258, 259, 260, 263, 265], "3vt": 37, "white": [37, 81], "txd": 37, "yellow": 37, "rxd": 37, "wakeup": 37, "mltk_fingerprint_authent": 37, "them": [37, 46, 86, 102, 127, 142, 143, 144, 147, 150, 255, 256, 257, 259, 260], "simpl": [38, 86, 102, 131, 133, 144, 157, 240, 241, 253, 256, 257, 258, 259, 265, 267], "printf": 38, "mltk_hello_world": [38, 44], "_unknown_": [39, 81, 91, 109, 128, 129, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 155, 212, 242, 250, 257, 259, 261, 263, 266, 267], "shape": [39, 63, 65, 67, 68, 81, 84, 86, 105, 106, 107, 108, 109, 113, 114, 118, 121, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 163, 191, 200, 201, 242, 244, 246, 247, 248, 250, 251, 253, 256, 257, 259, 260, 261, 263, 264, 265, 266], "height": [39, 81, 83, 84, 86, 108, 109, 113, 129, 136, 142, 143, 144, 146, 147, 148, 149, 150, 178, 179, 180, 181, 182, 183, 192, 194, 195, 196, 202, 203, 204, 248, 260, 263, 265], "width": [39, 81, 83, 84, 86, 108, 109, 113, 122, 127, 129, 134, 136, 142, 143, 144, 146, 147, 148, 149, 150, 178, 179, 180, 181, 182, 183, 192, 194, 195, 196, 202, 203, 204, 215, 216, 248, 260, 263, 265], "channel": [39, 62, 81, 84, 85, 86, 118, 127, 129, 134, 136, 142, 144, 146, 147, 149, 150, 197, 259, 260, 263], "datatyp": [39, 138, 185, 193], "samplewise_norm": [39, 62, 128, 131, 132, 133, 134, 135, 136, 140, 143, 144, 145, 148, 151, 152, 155, 156, 157, 159, 160, 242, 246, 248, 253, 257, 263, 264, 266], "rescal": [39, 62, 81, 86, 90, 128, 131, 132, 133, 134, 135, 140, 143, 145, 148, 151, 152, 155, 156, 157, 159, 160, 246, 248, 253, 257, 263, 264], "scale": [39, 62, 80, 81, 83, 84, 85, 127, 131, 132, 133, 157, 197, 248, 253, 257, 258, 259, 265, 266], "factor": [39, 67, 86, 124, 128, 129, 134, 135, 136, 140, 143, 145, 146, 148, 149, 152, 155, 180, 183, 257, 265], "model_input_tensor": 39, "img": [39, 62, 136, 140, 248, 257], "mean_and_std": [39, 62, 128, 133, 134, 135, 136, 140, 143, 144, 145, 148, 151, 152, 155, 156, 157, 159, 160, 242, 246, 257, 263, 264, 266], "center": [39, 81, 99, 122, 156, 215, 216, 255, 256, 266], "standard": [39, 50, 60, 61, 62, 67, 69, 71, 81, 86, 127, 131, 132, 136, 143, 145, 148, 152, 185, 193, 230, 240, 244, 247, 248, 253, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267], "deviat": [39, 62, 264], "std": [39, 62, 81, 86, 90, 136, 144, 227, 242, 248, 257, 266], "128": [39, 57, 62, 84, 93, 127, 130, 131, 132, 133, 134, 140, 142, 144, 145, 146, 147, 149, 150, 152, 154, 156, 157, 160, 248, 253, 255, 257, 258, 259, 266], "i2c": 39, "vcc": 39, "18": [39, 130, 134, 138, 142, 143, 144, 146, 147, 149, 150, 151, 152, 154, 160, 242, 246, 250, 251, 259, 260, 263, 266], "mosi": 39, "miso": 39, "sck": 39, "sda": 39, "scl": 39, "mltk_image_classifi": 39, "hello": 40, "world": [40, 98, 100, 102, 257, 259], "ble": [40, 78, 260], "signatur": [40, 81, 86, 89, 91, 114, 115, 116, 117, 121, 140, 141, 239, 265], "standalon": [41, 59, 63, 64], "mtlk": [41, 264, 266], "stand": [41, 255], "alon": [41, 255], "opresolv": 41, "greatli": [41, 86, 91, 146, 149, 151, 175, 240, 254, 255, 261, 264], "consum": [41, 63, 68, 72, 81, 86, 99, 102, 113, 114, 118, 240, 244, 246, 251, 258, 259], "linker": 41, "hardcod": [41, 143, 144, 145, 148, 152, 255, 257], "tensor": [41, 51, 57, 62, 63, 70, 80, 85, 86, 91, 113, 114, 118, 126, 127, 138, 140, 163, 167, 172, 173, 175, 177, 178, 181, 184, 186, 190, 191, 194, 197, 198, 199, 200, 201, 202, 205, 242, 248, 257, 264, 265, 266], "arena": [41, 62, 163, 167], "alloc": [41, 231, 255, 265], "heap": 41, "100000": 41, "bss": 41, "counter": [41, 86, 129, 136, 142, 144, 146, 147, 149, 150], "demonstr": [42, 49, 130, 133, 134, 137, 139, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 256, 257, 258, 262, 266, 267], "implement": [42, 51, 65, 73, 83, 113, 114, 118, 122, 143, 161, 172, 215, 216, 230, 258], "vscode": [42, 49, 50, 78, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 262], "tflite_micro_wrapp": [42, 48, 169], "mvp_wrapper": [42, 47], "what": [43, 44, 61, 76, 86, 95, 124, 133, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 240, 243, 256, 257, 258, 259, 261, 265, 267], "_desktop": 43, "_": [43, 122, 124, 133, 135, 140, 142, 143, 144, 146, 147, 149, 150, 152, 154, 255, 257, 259, 260, 265, 267], "date": [43, 62, 74, 128, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 173, 208, 228, 242, 246, 247, 248, 250, 257, 259, 263], "next": [43, 44, 62, 70, 71, 84, 113, 114, 118, 212, 229, 242, 257, 259, 262, 263, 264], "Then": [43, 44, 45, 47, 48, 55, 70, 71, 73, 128, 135, 140, 142, 143, 144, 145, 147, 148, 150, 152, 155, 253, 255, 257, 258, 263, 265], "install_mltk": [43, 44, 74], "stack": [43, 258], "extens": [43, 50, 61, 68, 70, 73, 75, 76, 89, 91, 125, 191, 228, 255, 257, 259], "gsdk_mltk_extens": 43, "gsdk": 43, "toolbar": 43, "prefer": [43, 266], "sidebar": [43, 255], "expand": [43, 122, 215, 216, 259], "entri": [43, 62, 71, 89, 91, 113, 118, 121, 142, 161, 172, 175, 185, 193, 217, 228, 229, 230, 242, 255, 265], "locat": [43, 98, 102, 156, 255, 267], "v4": 43, "ok": [43, 257], "trust": 43, "point": [43, 50, 54, 71, 73, 74, 75, 77, 86, 122, 129, 130, 133, 136, 138, 139, 142, 143, 144, 146, 147, 148, 149, 150, 151, 180, 183, 188, 197, 204, 215, 216, 232, 244, 246, 247, 248, 250, 251, 255, 256, 257, 258, 259, 260, 261, 265, 267], "suit": 43, "launcher": 43, "creation": [43, 67], "link": [43, 44, 50, 58, 64, 78, 89, 91, 222, 225, 228, 238, 240], "directli": [43, 44, 47, 51, 52, 57, 60, 62, 65, 67, 76, 80, 81, 83, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 191, 240, 244, 245, 246, 249, 251, 253, 255, 257, 259, 266], "edit": [43, 255, 263], "skip": [44, 57, 71, 81, 151, 257, 259, 261, 265], "j": [44, 63, 81, 222, 225, 244, 247, 257, 258, 260, 265], "pack": [44, 156], "jlink": [44, 221, 222, 223, 224, 225, 238], "linksoftwareanddocumentationpack": 44, "jlink_windows_x86_64": 44, "integr": [44, 138], "anoth": [44, 57, 81, 86, 89, 91, 114, 151, 185, 193, 240, 255, 256, 257, 258, 259, 261, 263, 265], "teraterm": 44, "free": [44, 71, 73, 74, 94, 254, 255, 257, 259, 267], "2015": [44, 74, 96], "2017": [44, 74, 102], "2019": [44, 74, 235], "mani": [44, 57, 60, 86, 99, 100, 113, 114, 118, 124, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 240, 254, 255, 256, 257, 259, 261, 263, 264, 265, 266, 267], "And": [44, 55, 70, 71, 143, 229, 242, 255, 256], "mode": [44, 62, 67, 74, 86, 118, 121, 124, 125, 127, 130, 133, 140, 143, 145, 146, 148, 149, 151, 156, 161, 165, 166, 223, 224, 225, 229, 232, 244, 246, 247, 248, 250, 251, 256, 257, 259], "breakpoint": [44, 50, 134, 262], "usb": 44, "cdc": [44, 238], "speed": [44, 81, 86, 129, 136, 142, 144, 146, 147, 149, 150, 255, 258, 259], "aka": [44, 146, 149, 161, 180, 183, 188, 204, 242, 256, 264, 265], "baud": [44, 142, 163, 232, 238], "115200": [44, 163, 232, 238, 258], "hello_world": 44, "mltk_hello_world_download": 44, "mltk_hello_world_download_run": 44, "mltk_hello_world_reset": 44, "reset": [44, 124, 223], "mltk_model_profiler_download": 44, "mltk_model_profiler_download_run": 44, "mltk_model_profiler_reset": 44, "compon": [45, 62, 84, 259, 260], "pip": [45, 47, 48, 71, 73, 74, 230, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 259, 260, 265, 267], "git": [45, 47, 48, 74, 169, 175, 241], "clone": [45, 47, 48, 74, 260], "build_opt": [45, 47, 48], "mltk_audio_feature_generator_wrapp": 45, "manag": [46, 67, 71, 132, 143, 145, 146, 148, 149, 151, 191, 254, 255], "ram": [47, 48, 51, 57, 62, 63, 65, 71, 98, 124, 128, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 173, 229, 240, 244, 246, 247, 248, 250, 254, 255, 257, 258, 259, 260, 263, 265], "clock": [47, 63, 128, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 174, 244, 247, 257, 259, 260, 263, 265], "tflitemicro": [47, 48, 170, 240, 242, 247], "mltk_mvp_wrapper": 47, "helper": [48, 67, 71, 83, 111, 120, 142, 144, 147, 150, 222, 255, 264], "tflitemicromodel": [48, 49, 170, 175, 242, 264], "jupyt": [49, 73, 230, 252, 256, 257, 259, 265], "notebook": [49, 74, 230, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 259, 260, 267], "browser": [49, 64, 72, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 259, 260, 265, 267], "colab": [49, 252, 256, 257, 259, 261, 263, 265, 267], "instanc": [49, 57, 61, 62, 81, 89, 91, 113, 114, 118, 122, 124, 125, 127, 129, 131, 132, 136, 138, 142, 144, 146, 147, 149, 150, 151, 161, 163, 165, 166, 167, 168, 169, 175, 191, 215, 216, 219, 220, 229, 230, 242, 253, 257, 258, 259, 260, 261, 265, 267], "tflitemodel": [49, 68, 111, 115, 116, 117, 121, 122, 125, 138, 140, 163, 165, 167, 168, 169, 175, 177, 178, 181, 184, 186, 189, 190, 193, 194, 198, 199, 201, 202, 205, 240, 242, 248, 256, 257, 259, 265], "manual": [49, 57, 67, 71, 99, 102, 113, 118, 126, 129, 131, 132, 134, 136, 140, 142, 144, 146, 147, 149, 150, 156, 242, 253, 255, 259, 266], "request": [50, 70, 102, 176, 192, 244, 246, 247, 248, 250, 251, 267], "arg": [50, 70, 80, 84, 89, 121, 122, 127, 129, 131, 132, 136, 142, 144, 146, 147, 149, 150, 161, 164, 174, 176, 185, 192, 193, 199, 211, 215, 216, 220, 227, 229, 230, 232, 253, 256, 257, 259, 260], "manner": 50, "datagen": [50, 57, 67, 113, 118, 128, 133, 134, 135, 140, 143, 145, 148, 151, 152, 155, 156, 157, 159, 160, 257], "keep": [51, 102, 129, 136, 138, 142, 143, 144, 146, 147, 149, 150, 257, 259, 261], "mind": [51, 257, 259, 265], "hold": [51, 89, 91, 107, 142, 144, 146, 147, 149, 150, 161, 176, 192, 201, 217, 255, 259, 260, 265], "happen": [51, 65, 80, 83, 131, 132, 248, 253, 264], "slower": [51, 135, 152, 257], "tip": [51, 65, 124, 239, 257, 266], "fit": [51, 67, 80, 81, 86, 122, 124, 129, 131, 132, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 166, 239, 253, 257, 258, 259, 260, 263, 264, 266, 267], "most": [51, 62, 65, 66, 71, 74, 100, 102, 131, 132, 143, 146, 149, 176, 192, 245, 250, 253, 254, 255, 257, 258, 259, 260, 261, 263, 264, 265, 267], "total": [51, 61, 86, 99, 113, 114, 115, 116, 117, 118, 124, 128, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 173, 200, 212, 242, 246, 247, 250, 251, 257, 259, 263, 265, 267], "4x": [51, 57, 65, 149, 258, 264], "conv2d": [51, 67, 69, 124, 128, 129, 131, 132, 133, 135, 138, 140, 145, 146, 148, 149, 152, 154, 155, 246, 247, 248, 250, 251, 253, 257, 259, 263], "depthwiseconv2d": [51, 128], "depth_multipli": [51, 128, 183], "expens": [51, 81, 86, 143, 145, 146, 148, 149, 151, 152, 255, 257, 258, 259, 260, 267], "smaller": [51, 143, 145, 146, 148, 149, 151, 163, 255], "larger": [51, 62, 71, 81, 86, 124, 128, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 212, 255, 256, 257, 258, 259, 260, 263, 264, 266, 267], "constraint": [51, 63, 127, 239, 258, 259, 263], "kernel_s": [51, 67, 69, 124, 128, 131, 132, 135, 155, 178, 181, 202, 253, 264], "dens": [51, 67, 69, 124, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 144, 145, 146, 148, 149, 152, 154, 155, 246, 247, 248, 250, 251, 253, 257, 259, 264], "k": [51, 62, 74, 84, 86, 128, 130, 138, 142, 144, 145, 146, 147, 149, 150, 154, 155, 156, 174, 193, 246, 250, 257, 259], "maxpool2d": [51, 154], "averagepool2d": [51, 144], "faq": [52, 56, 255, 257], "thought": [52, 240], "simpli": [52, 69, 138, 143, 144, 145, 147, 148, 151, 253, 257, 259, 260], "uint8_t": [52, 259, 264], "arrai": [52, 80, 81, 85, 86, 89, 105, 106, 107, 113, 114, 118, 122, 130, 134, 135, 138, 152, 156, 161, 175, 176, 185, 191, 192, 217, 248, 257, 259, 264, 265], "deploi": [52, 140, 255, 256, 265], "model_profiler_model": 52, "isn": [53, 124, 126, 142, 144, 147, 150], "gpu": [53, 71, 73, 74, 81, 86, 91, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 229, 251, 254, 257, 258, 259, 260], "am": 53, "solut": [54, 254, 255], "reload": [54, 125, 230], "cuda": [54, 219, 259], "gdm3": 54, "rmmod": 54, "nvidia_uvm": 54, "nvidia_drm": 54, "nvidia_modeset": 54, "nvidia": [54, 74, 229, 251], "modprob": 54, "intermedi": [55, 266], "ll": [55, 57, 126, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 255, 257, 259, 262], "accept": [56, 229, 257, 259, 264], "could": [56, 58, 63, 71, 113, 114, 118, 124, 128, 131, 132, 135, 143, 145, 152, 255, 256, 257, 259, 264, 267], "properli": [56, 144, 146, 149, 244, 257, 258, 259, 264, 266], "easiest": [56, 74], "fix": [56, 142, 255, 264, 265], "inference_input_typ": [56, 57, 67, 69, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 253, 257, 259, 264, 265, 266], "inference_output_typ": [56, 57, 67, 69, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 253, 257, 259, 264, 265, 266], "reason": [57, 63, 68, 72, 102, 244, 246, 251, 255, 256, 257, 259], "whatev": [57, 257, 259, 266], "compris": [57, 62, 96, 257, 259], "our": [57, 61, 67, 69, 70, 99, 119, 129, 131, 132, 133, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 248, 253, 255, 257, 258, 259, 262, 263, 265, 266], "might": [57, 61, 62, 65, 67, 69, 256, 257, 259, 265], "parallelimagedatagener": [57, 62, 67, 88, 118, 133, 135, 137, 140, 152, 156, 157, 159, 160, 255, 257], "def": [57, 67, 69, 81, 86, 89, 91, 113, 114, 118, 121, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 215, 216, 229, 248, 253, 255, 256, 257, 259, 260, 261, 263, 265, 266], "convert_img_from_uint8_to_int8": 57, "parallelprocessparam": [57, 81, 86, 134, 140, 143, 148, 151, 156], "ndarrai": [57, 80, 81, 83, 85, 86, 90, 91, 98, 129, 131, 132, 134, 136, 140, 142, 143, 144, 146, 147, 148, 149, 150, 156, 161, 172, 175, 177, 178, 181, 184, 186, 190, 191, 194, 198, 199, 201, 202, 205, 253, 260], "clip": [57, 83, 95, 96, 98, 100, 102, 129, 140, 142, 144, 146, 147, 149, 150, 242, 258, 259, 260], "alreadi": [57, 74, 140, 151, 208, 246, 251, 255, 257, 260, 261, 263, 265], "astyp": [57, 83, 130, 131, 132, 133, 134, 138, 140, 142, 144, 146, 147, 149, 150, 157, 242, 248, 253, 264, 265, 266], "convers": [57, 102, 124, 131, 132, 239, 253, 259, 267], "preprocessing_funct": [57, 81, 82, 86, 87, 118, 140, 143, 156], "image_length": 57, "model_input": [57, 130], "int8_t": 57, "image_data": 57, "abov": [57, 64, 69, 114, 133, 138, 140, 143, 144, 145, 148, 152, 211, 253, 255, 256, 257, 259, 260, 265, 267], "nor": 57, "tfliteconvert": [57, 65, 67, 122, 124, 140, 144, 152, 253, 257, 264, 265, 266], "dequant": [57, 130, 135, 138, 140, 144, 152, 154, 156, 159, 160, 184, 242, 244, 246, 257, 265, 266], "sizeof": 57, "importerror": 58, "fail": [58, 67, 69, 140, 142, 144, 147, 150, 163, 231, 232, 244, 256, 259, 260, 265], "_pywrap_tensorflow_intern": 58, "due": [58, 61, 63, 102, 127, 256, 266], "latest": [58, 74, 124, 255, 265, 267], "redistribut": [58, 74, 241], "2977003": 58, "x64": 58, "txt": [60, 71, 77, 89, 142, 144, 147, 150], "png": [60, 81, 86, 91, 140, 256], "focus": [61, 69, 255, 266], "aspect": [61, 67, 69, 160, 257, 259, 265], "ipynb": [61, 62, 63, 65, 68, 69, 72, 73], "involv": [61, 65, 266], "versu": [61, 256, 257, 259], "evaluatemixin": [61, 138, 140], "my_model_v1": [61, 67, 69], "audiodatasetmixin": [61, 67, 69, 71, 114, 121, 128, 134, 143, 145, 148, 151, 155], "instanti": [61, 67, 69, 71, 81, 119, 125, 127, 128, 129, 130, 133, 134, 135, 136, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 176, 177, 178, 181, 184, 185, 186, 190, 192, 193, 194, 198, 199, 202, 205, 212, 229, 230, 253, 257, 259, 261, 267], "among": 61, "classifierevaluationresult": [61, 140, 256, 265], "tabl": [61, 122, 185, 215, 216, 267], "layout": [61, 68, 76, 128, 133, 134, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 173, 240, 259, 265], "row": [61, 127, 138, 142, 144, 147, 150, 163, 259, 260, 264, 266], "repres": [61, 81, 113, 114, 118, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 176, 192, 205, 235, 253, 257, 258, 264, 265, 266, 267], "column": [61, 86, 130, 138, 163, 264, 266], "vice": 61, "versa": 61, "curv": [61, 161], "plot": [61, 122, 124, 138, 140, 161, 256, 257, 259], "illustr": [61, 144, 256, 259, 260, 261], "diagnost": 61, "discrimin": 61, "vari": [61, 255], "tpr": [61, 161], "fpr": [61, 161], "fraction": [61, 62, 84, 86, 113, 114, 118], "known": [61, 127, 142, 143, 144, 146, 147, 149, 150, 151, 176, 192, 258, 260, 261, 267], "proport": [61, 102], "those": [61, 207, 264, 267], "who": [61, 100, 102], "condit": [61, 232, 238, 257], "judg": 61, "gold": 61, "statist": [61, 98, 161, 240, 244, 245, 246, 249, 251, 255, 256, 257, 259], "multipl": [61, 86, 91, 102, 113, 114, 118, 128, 138, 143, 151, 159, 160, 163, 174, 191, 229, 256, 257, 259, 261, 263, 264, 266, 267], "comparison": [61, 122, 215, 216, 243], "fall": 61, "alarm": 61, "reject": [61, 256, 258, 259, 267], "null": 61, "hypothesi": 61, "particular": [61, 65, 102, 142, 144, 145, 147, 148, 150, 152, 255, 257, 265], "wrongli": 61, "categor": [61, 67, 69, 81, 86, 113, 118, 127, 128, 129, 132, 134, 135, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 157, 159, 160, 161, 257, 265], "regardless": [61, 124, 232, 255], "autoencoderevaluationresult": 61, "belong": [61, 89, 102, 154, 242, 243, 246, 251, 257, 261], "anomaly_detect": [61, 67, 240, 243], "reconstruct": [61, 130, 243], "wors": [61, 243, 266], "further": [61, 121, 243, 263], "anomali": [61, 130, 156, 158, 243], "atom": 62, "easili": [62, 255, 258], "assur": 62, "synchron": [62, 238], "dictionari": [62, 71, 84, 86, 89, 91, 113, 114, 118, 120, 121, 122, 124, 126, 138, 142, 144, 147, 150, 161, 163, 166, 167, 174, 175, 185, 191, 193, 211, 215, 216, 218, 230, 233, 248, 250], "typic": [62, 67, 69, 76, 77, 121, 124, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 172, 229, 249, 255, 257, 258, 259, 261, 263, 264, 266, 267], "schema": [62, 76, 179, 182, 187, 189, 191, 193, 195, 203, 206], "fb": [62, 76, 185, 189, 191, 193], "de": [62, 65, 140, 185, 191, 219], "unchang": 62, "bool": [62, 81, 83, 84, 86, 89, 91, 102, 113, 114, 118, 120, 121, 122, 125, 126, 129, 130, 131, 132, 136, 138, 140, 142, 144, 146, 147, 149, 150, 154, 161, 163, 165, 166, 168, 169, 172, 175, 178, 181, 185, 186, 191, 193, 199, 201, 202, 205, 207, 208, 211, 215, 216, 217, 218, 220, 223, 225, 228, 229, 230, 232, 235, 236, 238, 253, 256, 264], "byte": [62, 121, 128, 130, 131, 132, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 172, 176, 185, 191, 192, 193, 201, 217, 222, 223, 225, 235, 237, 238, 244, 247, 253, 255, 257, 259, 260, 263, 265], "iso8601": [62, 173], "hash": [62, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 128, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 169, 173, 175, 208, 214, 220, 242, 246, 247, 248, 250, 257, 259, 263], "md5": [62, 208, 220], "exclud": [62, 163, 207, 228, 230, 256, 257, 259], "match": [62, 66, 71, 83, 136, 138, 140, 142, 144, 147, 150, 169, 208, 232, 238, 248, 256, 257, 259, 262, 265], "hz": [62, 84, 128, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 244, 247, 257, 259, 260, 263, 265], "filterbank": [62, 84], "lowest": [62, 84, 122, 176, 192, 215, 216], "smoothing_bit": [62, 84], "coeffici": [62, 84, 96, 205], "odd": [62, 84, 127], "preserv": [62, 84, 160], "pcan_en": [62, 84, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 259, 263], "pcan": [62, 84, 146, 148, 149], "pcan_strength": [62, 84, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 259, 263], "expon": [62, 84], "pcan_offset": [62, 84, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 259, 263], "denomin": [62, 84, 176, 192], "pcan_gain_bit": [62, 84, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 259, 263], "log_scale_en": [62, 84, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 259, 263], "logarithm": [62, 84], "log_scale_shift": [62, 84, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 259, 263], "scale_shift": [62, 84], "fft_length": [62, 84, 128, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 259, 263], "fft": [62, 84, 151], "smallest": [62, 81, 89, 91], "activity_detection_en": [62, 84, 129, 142, 144, 146, 147, 148, 149, 150, 242, 259], "activity_detection_alpha_a": [62, 84, 129, 142, 144, 146, 147, 148, 149, 150, 242, 259], "fast": [62, 84, 241, 258, 267], "pole": [62, 84], "iir": [62, 84], "activity_detection_alpha_b": [62, 84, 129, 142, 144, 146, 147, 148, 149, 150, 242, 259], "activity_detection_arm_threshold": [62, 84, 129, 142, 144, 146, 147, 148, 149, 150, 242, 259], "activity_detection_trip_threshold": [62, 84, 129, 142, 144, 146, 147, 148, 149, 150, 242, 259], "negat": [62, 84], "q": [62, 84], "127": [62, 84, 134, 160, 232, 244, 248], "anyth": [62, 67, 84, 102], "db": [62, 67, 84], "norm_sampl": 62, "norm_img": [62, 248, 257], "approach": [62, 74, 256, 257, 258, 259, 267], "volume_db": [62, 67, 128, 143, 145, 151, 155, 250, 263], "latency_m": [62, 67, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 250, 259, 263], "level": [62, 67, 175, 227, 230, 238, 255, 265], "log_level": [62, 67, 128, 143, 145, 151, 155, 250, 263], "suppression_m": [62, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 250, 259, 263], "1500": [62, 128, 155, 250], "outsid": [62, 86, 240, 250], "No": [63, 64, 71, 102, 142, 144, 147, 150, 176, 240, 260], "individu": [63, 70, 81, 102, 156, 163, 255, 259, 265], "mathemat": [63, 102, 257], "accumul": [63, 68, 128, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 174, 186, 244, 247, 255, 257, 259, 260, 263, 265], "unsupport": [63, 128, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 244, 247, 257, 259, 260, 263, 265], "percentag": [63, 80, 81, 86, 89, 91, 144, 147, 163, 229], "rel": [63, 71, 81, 86, 89, 91, 123, 126, 129, 142, 144, 145, 146, 147, 148, 150, 152, 163, 174, 207, 228, 255, 257, 259, 260, 261, 267], "idl": [63, 163, 174], "op": [63, 70, 124, 128, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 174, 177, 178, 181, 184, 186, 190, 194, 198, 199, 202, 205, 244, 246, 247, 250, 251, 257, 259, 260, 263, 264, 265, 266], "mac": [63, 68, 71, 128, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 174, 244, 246, 247, 250, 251, 257, 259, 260, 263, 265], "index": [63, 81, 86, 89, 91, 113, 118, 122, 124, 128, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 171, 172, 177, 178, 181, 184, 186, 190, 191, 194, 198, 199, 200, 201, 202, 205, 209, 213, 215, 216, 230, 242, 244, 246, 247, 248, 250, 256, 257, 259, 260, 263, 264, 265, 266], "opcod": [63, 128, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 177, 178, 181, 184, 186, 190, 194, 198, 199, 202, 205, 242, 244, 246, 247, 248, 250, 257, 259, 260, 263, 265], "acc": [63, 128, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 244, 257, 259, 260, 263, 265], "els": [63, 80, 84, 85, 89, 91, 122, 124, 125, 129, 130, 131, 132, 136, 138, 140, 142, 143, 144, 146, 147, 148, 149, 150, 154, 156, 163, 172, 174, 191, 193, 207, 208, 211, 227, 228, 230, 253, 255, 256, 258, 259, 260, 265, 267], "msg": [63, 155, 163, 171, 230, 263, 265], "arm": [63, 84, 159], "cortex": 63, "m33": 63, "efr32xg24": [63, 64, 78, 128, 130, 135, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 259], "78mhz": 63, "know": [63, 68, 151, 244, 246, 255, 260, 261], "invest": [63, 68, 72, 244, 246, 251, 259], "drag": [64, 72, 76, 251, 265], "box": [64, 86, 118, 160, 267], "respect": [64, 138, 140, 256], "serv": [64, 241, 251], "network": [64, 86, 102, 127, 138, 140, 142, 144, 145, 147, 148, 150, 152, 258, 259, 260, 261, 264, 266], "ip": [64, 71, 77, 228], "address": [64, 71, 73, 74, 77, 96, 228, 255], "8000": [64, 144, 145, 146, 148, 149], "represent": [65, 176, 192, 219, 261], "opsset": [65, 67, 69, 124, 128, 129, 133, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 157, 259, 265, 266], "tflite_builtins_int8": [65, 67, 69, 124, 128, 129, 130, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 257, 259, 265, 266], "alwai": [65, 102, 124, 156, 223, 253, 259, 264], "target_spec": [65, 124, 265], "targetspec": [65, 124], "subset": [65, 69, 81, 82, 86, 87, 89, 99, 113, 114, 118, 120, 122, 129, 130, 131, 132, 133, 135, 136, 138, 140, 142, 143, 144, 146, 147, 149, 150, 152, 154, 156, 214, 249, 253, 255, 257, 258, 259, 260, 265], "hundr": 65, "randomli": [65, 81, 86, 89, 91, 142, 143, 144, 146, 147, 149, 211, 212, 258, 259, 267], "chosen": [65, 142, 160, 255, 259], "oppos": [66, 67, 264], "keyword_spotting_model": 66, "load_mltk_model": [66, 151, 242, 249, 261], "model_path": [66, 125, 138, 228, 265], "recurs": [66, 71, 89, 91, 121, 207, 228, 230], "repositori": [66, 74], "mltk_model_path": 66, "architectur": [67, 129, 136, 137, 139, 140, 142, 143, 146, 149, 240, 256, 263, 264, 266], "ye": [67, 102, 155, 159, 240, 250], "alphanumer": [67, 81, 86, 257], "charact": [67, 122, 211, 215, 216, 257, 261, 263, 267], "list_mltk_model": 67, "delimit": [67, 75, 122, 130, 215, 216, 228], "imagedatasetmixin": [67, 114, 124, 133, 135, 140, 152, 156, 157, 159, 160, 257], "rest": [67, 69, 81, 122, 143, 144, 145, 147, 148, 151, 215, 216, 257, 259, 263, 265, 266], "batch_siz": [67, 69, 81, 85, 86, 113, 114, 118, 119, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 253, 257, 259, 266], "adam": [67, 69, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 253, 257, 259, 260], "speech_commands_v2": [67, 69, 128, 129, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 259, 260], "class_mod": [67, 69, 81, 82, 86, 87, 113, 118, 128, 133, 134, 135, 140, 143, 145, 148, 151, 152, 155, 156, 157, 159, 160, 257], "kerasmodel": [67, 68, 69, 112, 115, 116, 117, 122, 124, 125, 138, 140, 144, 165, 166, 168, 253, 256, 257, 259, 266], "build_model_funct": [67, 69, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 253, 259, 263], "my_model_build": [67, 69, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 147, 148, 150, 151, 152, 154, 155, 156, 157, 159, 160, 253, 257, 259, 260, 261, 263, 266], "keras_model": [67, 69, 122, 124, 128, 129, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 159, 160, 166, 256, 257, 259, 260, 261, 263, 266], "sequenti": [67, 69, 124, 128, 129, 130, 131, 132, 133, 134, 135, 145, 146, 148, 149, 152, 154, 155, 253, 257, 266], "inputlay": [67, 69, 155, 259], "input_shap": [67, 69, 106, 107, 108, 109, 118, 121, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 253, 257, 259, 260, 261, 263, 265, 266], "use_bia": [67, 69, 128, 135, 155, 178, 181, 186, 202], "pad": [67, 69, 80, 81, 83, 122, 124, 128, 129, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 159, 160, 178, 179, 180, 181, 182, 183, 192, 194, 195, 196, 202, 203, 204, 215, 216, 242, 244, 246, 247, 248, 250, 257, 258, 259, 260, 263, 265], "stride": [67, 69, 127, 128, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 178, 179, 181, 182, 194, 195, 202, 203, 242, 244, 246, 247, 248, 250, 257, 259, 260, 263, 264, 265], "relu": [67, 69, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 142, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 157, 159, 160, 176, 242, 244, 246, 247, 248, 250, 253, 257, 259, 260, 264, 265], "flatten": [67, 69, 124, 128, 129, 131, 132, 133, 134, 135, 138, 140, 142, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 200, 230, 246, 247, 248, 250, 251, 253, 256, 257, 259], "n_class": [67, 69, 113, 114, 118, 121, 124, 128, 129, 134, 135, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 161, 242, 257, 259, 260, 261, 263, 264, 265], "over": [67, 69, 70, 86, 99, 102, 105, 124, 248, 257, 259, 262, 266, 267], "bad": [67, 69, 259], "log_dir": [67, 121, 124, 126, 146], "reduce_lr_on_plateau": [67, 124, 128, 129, 134, 135, 136, 140, 143, 145, 146, 148, 149, 152, 155, 257], "25": [67, 81, 84, 86, 89, 91, 124, 128, 134, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 160, 235, 242, 250, 257, 258, 259, 260, 263, 265], "patienc": [67, 124, 128, 129, 134, 135, 136, 140, 143, 145, 146, 148, 149, 152, 155, 257], "train_callback": [67, 124, 129, 131, 132, 136, 142, 144, 146, 147, 149, 150, 253, 259], "lr_schedul": [67, 124, 134, 143, 145, 151, 159, 160, 261], "early_stop": [67, 124, 128, 129, 134, 135, 136, 140, 143, 145, 146, 148, 149, 151, 152, 155, 257], "supported_op": [67, 69, 124, 128, 129, 130, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 257, 259, 265, 266], "representative_dataset": [67, 69, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 253, 257, 259, 265, 266], "strongli": [67, 257], "wherea": 67, "rock_paper_scissors_v1": [67, 135], "rock": [67, 135, 141, 152, 239, 243, 246, 247, 248, 251], "paper": [67, 96, 98, 99, 127, 135, 141, 152, 239, 243, 246, 247, 248, 251], "scissor": [67, 135, 141, 152, 239, 243, 246, 247, 248, 251], "96": [67, 108, 109, 127, 129, 130, 136, 142, 143, 144, 146, 147, 149, 150, 151, 160, 242, 243, 246, 251, 256, 257, 258, 259, 260, 263, 266, 267], "robust": [67, 143, 145, 148, 151, 257, 258, 259, 260, 264], "unknown_class_percentag": [67, 81, 89, 91, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155], "silence_class_percentag": [67, 81, 91, 128, 134, 143, 145, 148, 151, 155], "offset_rang": [67, 81, 128, 134, 143, 145, 148, 151, 155], "trim_threshold_db": [67, 80, 81, 83, 128, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 260], "noise_color": [67, 81, 128, 134, 143, 145, 148, 151, 155], "bg_noise_rang": [67, 81, 128, 134, 143, 145, 148, 151, 155], "bg_noise_dir": [67, 81, 128, 134, 143, 145, 148, 151, 155], "_background_noise_": [67, 102, 128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 159, 260], "rotation_rang": [67, 86, 133, 135, 140, 152, 157, 159, 160, 257], "35": [67, 127, 129, 133, 135, 136, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 159, 160, 242, 257, 258, 259, 260, 263], "contrast_rang": [67, 86, 135, 140, 152, 159, 257], "50": [67, 96, 99, 105, 113, 114, 118, 127, 135, 136, 138, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 160, 242, 257, 258, 259, 260, 263, 265], "70": [67, 135, 140, 143, 144, 147, 148, 149, 150, 151, 242, 259, 260, 263], "gauss": [67, 86, 135, 140, 152, 257], "poisson": [67, 86, 135, 140, 152, 257], "horizontal_flip": [67, 86, 133, 135, 140, 152, 157, 160, 257], "vertical_flip": [67, 86, 133, 135, 140, 152, 257], "basic_tf_dataset_exampl": 67, "image_tf_dataset": [67, 70], "audio_tf_dataset": [67, 142, 144, 146, 147, 149, 150], "evaluateautoencodermixin": [67, 130, 156, 161], "idea": [67, 70, 74, 140, 143, 144, 145, 146, 148, 149, 151, 256, 257, 259, 260, 261], "conv1d_exampl": 67, "siamese_contrast": 67, "tflite_micro_magic_wand": [67, 240], "tinyml": [67, 139, 156, 157, 159, 160, 240, 260], "keyword_spot": [67, 240, 246, 250, 251], "visual_wake_word": [67, 240, 255], "trainabl": [68, 151, 246, 250, 251, 255, 257, 259, 260, 261], "slightli": [68, 143, 145, 148, 151, 263, 264], "child": 69, "sometim": [69, 249, 257, 259], "restart": [69, 70, 102, 255], "bias": [70, 126, 239, 240, 257], "api_doc": [70, 124, 129, 131, 132, 136, 143, 145, 146, 148, 149, 151, 152, 253, 257], "51": [70, 128, 129, 136, 142, 143, 144, 146, 147, 148, 149, 150, 151, 242, 247, 248, 257, 259, 260, 263], "stat": [70, 86, 129, 136, 142, 144, 146, 147, 149, 150, 161, 163, 259], "bottleneck": [70, 127, 255, 259], "weboag": 70, "n": [70, 86, 122, 124, 128, 129, 130, 136, 140, 142, 144, 146, 147, 149, 150, 154, 212, 215, 216, 230, 240, 242, 244, 248, 265, 267], "forward": [70, 175, 191, 207, 228, 258, 265], "constrain": 71, "seamlessli": [71, 241, 255], "appear": [71, 72, 89, 142, 143, 144, 147, 150, 214, 228, 251, 255, 258], "had": [71, 172, 255], "protocol": [71, 176, 192], "scope": [71, 255, 257, 265], "openssh": 71, "upgrad": [71, 74, 230, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 256, 257, 259, 260, 265, 267], "consist": [71, 113, 114, 118, 127, 144, 238, 255, 257, 259, 266], "public": [71, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 136, 160], "resid": [71, 81, 86, 255], "past": [71, 74, 253, 255, 259, 267], "anywher": [71, 254, 255], "keygen": [71, 255], "ed25519": [71, 255], "id_my_kei": 71, "my_kei": 71, "prioriti": 71, "my_serv": [71, 77], "remote_dir": [71, 77], "domain": 71, "145": [71, 142, 143, 151], "243": [71, 147, 263], "23": [71, 99, 134, 138, 140, 142, 143, 144, 147, 150, 151, 152, 160, 163, 242, 257, 259, 260, 263, 265], "222": [71, 77], "four": [71, 102, 103, 144, 151, 239, 242, 257, 261, 266], "ssh3": 71, "34567": 71, "2222": 71, "filepath": [71, 86, 124, 143, 148], "id_myserv": 71, "identityfil": 71, "key_filenam": [71, 77], "merg": [71, 230, 257, 259], "overwrit": [71, 124, 126, 185, 191, 193], "prod_env": 71, "cuda_devic": 71, "pipe": [71, 75], "csv": [71, 130, 163, 264, 266], "glob": [71, 126], "patch": 71, "wildcard": 71, "upload_fil": [71, 77], "bash": [71, 256], "startup_cmd": [71, 77, 254, 255], "mylib": 71, "7zip": [71, 255], "retlavi": 71, "download_fil": [71, 77], "shutdown_cmd": [71, 77], "curl": [71, 77], "f": [71, 77, 81, 84, 122, 127, 128, 129, 130, 133, 134, 135, 136, 140, 142, 144, 146, 147, 148, 149, 150, 152, 154, 174, 176, 191, 193, 212, 215, 216, 227, 228, 231, 237, 242, 243, 244, 246, 247, 248, 250, 251, 256, 257, 259, 260, 264, 265, 267], "sync_local_mltk": 71, "ssh_remote_dir": [71, 123], "ssh_create_venv": [71, 123], "ssh_environ": [71, 123, 146, 149], "ssh_startup_cmd": [71, 123], "ssh_upload_fil": [71, 123, 146, 149], "ssh_download_fil": [71, 123, 146, 149], "ssh_shutdown_cmd": [71, 123], "echo": 71, "config_path": [71, 77], "create_venv": [71, 77, 255], "ssh_config": [71, 77], "joe": [71, 77], "id_my_serv": [71, 77], "cuda_visible_devic": [71, 77, 257, 259, 260], "dev_env": [71, 77], "libsndfile1": [71, 77, 255], "custom_log": [71, 77], "overridden": [71, 114, 152], "vast_ai": [71, 255], "ssh6": [71, 255], "31521": 71, "stricthostkeycheck": 71, "sub": [71, 77, 89, 91, 102, 113, 114, 115, 116, 118, 122, 142, 144, 146, 147, 150, 208, 215, 216, 218, 242, 257, 259], "ssh5": 71, "23452": 71, "immedi": [71, 142, 144, 146, 147, 149, 150, 208, 223, 229, 238], "until": [71, 113, 114, 115, 116, 117, 118, 124, 126, 232, 238, 257], "finish": [71, 113, 114, 115, 116, 117, 118, 119, 124, 212, 255, 258, 267], "viewer": [72, 251], "markdown": 73, "inlin": [73, 257, 259], "offici": 73, "palett": 73, "shift": [73, 86, 180, 183, 188, 204, 259], "enter": [73, 255, 267], "cell": [73, 74, 144, 205, 242, 266], "ipykernel": 73, "leverag": [73, 74, 146, 149, 151, 240, 261], "As": [73, 136, 138, 140, 142, 253, 255, 256, 257, 258, 259, 260, 262, 263, 265, 266, 267], "account": [73, 74, 253, 254, 258, 259, 263, 266, 267], "signup": [73, 74], "email": [73, 74, 254, 255], "gmail": [73, 74], "proper": 74, "highli": [74, 259], "fastest": 74, "pip3": [74, 241], "speedup": [74, 229], "caus": [74, 121, 248, 259, 264, 265, 267], "colaboratori": 74, "semicolon": 75, "colon": 75, "cach": [75, 191, 248], "te": [75, 114], "lambda": [75, 85, 132, 138, 140, 144, 147, 149, 150, 212, 259, 266, 267], "temporari": [75, 228], "numpi": [75, 80, 81, 83, 85, 86, 91, 105, 106, 107, 113, 114, 118, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 175, 191, 242, 248, 253, 265], "19": [75, 128, 134, 138, 142, 143, 144, 146, 147, 149, 150, 151, 157, 160, 242, 257, 259, 260, 263, 267], "tensorflow_prob": 75, "onnxruntim": [75, 265], "temp": [75, 218, 228, 244, 246, 247, 248, 250, 251, 265, 267], "brief": [76, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 257, 259], "concept": [76, 256, 257, 258, 259, 263], "programm": 76, "mltk_user_settings_path": [77, 228], "dev_model": 77, "production_model": 77, "efr32": 77, "serial_numb": [77, 228], "123432": 77, "usernam": [77, 228, 236, 255], "resolv": [77, 124], "serialno": 77, "ip_address": [77, 228], "kit": 78, "tflite_micro_acceler": [78, 218, 258], "efm32": 78, "giant": 78, "s1": [78, 140], "gg11": 78, "starter": 78, "thunderboard": 78, "sens": 78, "pro": [78, 267], "dbm": 78, "efr32xg28": 78, "ghz": 78, "radio": 78, "explor": 78, "read_audio_fil": [80, 83, 129, 142, 144, 146, 147, 149, 150, 242, 260], "return_sample_r": [80, 83, 129, 142, 144, 146, 147, 149, 150, 242, 260], "return_numpi": [80, 83, 85, 129, 142, 144, 146, 147, 149, 150, 242, 260], "kwarg": [80, 81, 84, 86, 89, 91, 113, 114, 118, 120, 121, 122, 127, 129, 130, 131, 132, 136, 138, 140, 142, 144, 146, 147, 149, 150, 154, 161, 163, 164, 169, 174, 175, 177, 178, 181, 185, 186, 191, 193, 194, 199, 202, 205, 211, 215, 216, 227, 229, 230, 253, 266], "mono": [80, 143, 148], "1d": [80, 81, 83, 86, 113, 114, 118, 133, 134, 152, 161, 257], "union": [80, 85, 91, 94, 115, 116, 117, 121, 125, 127, 138, 140, 161, 163, 165, 166, 167, 168, 175, 185, 191, 193, 207, 208, 211, 217, 218, 220, 227, 228, 229, 230, 232, 233, 235, 256], "write_audio_fil": [80, 129, 142, 144, 146, 147, 149, 150], "sample_r": [80, 81, 82, 129, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151], "timestamp": [80, 85, 126], "int16": [80, 83, 144, 185, 193, 242], "32768": [80, 83, 235, 258], "eager": [80, 85], "adjust_length": [80, 81, 83, 129, 142, 143, 144, 146, 147, 149, 150, 242, 260], "target_sr": [80, 83, 129, 142, 144, 146, 147, 149, 150, 260], "original_sr": 80, "out_length": [80, 81, 83, 129, 142, 143, 144, 146, 147, 149, 150, 242, 260], "offset": [80, 81, 83, 129, 138, 142, 143, 144, 146, 147, 149, 150, 180, 183, 188, 204, 242, 260], "zero": [80, 81, 89, 91, 96, 100, 102, 103, 122, 141, 142, 143, 144, 146, 147, 148, 149, 150, 180, 183, 188, 192, 197, 204, 215, 216, 223, 242, 248, 255, 260, 266], "crop": [80, 81, 140, 142, 143, 144, 146, 147, 148, 149, 258], "teh": [80, 253], "in_length": 80, "decibel": [80, 81], "send": [80, 81, 136, 222, 236, 237, 238, 254, 255, 257, 258, 259], "cast": [80, 81, 83], "magic": [80, 83, 153, 154], "micro_features_gener": [80, 83], "cc": [80, 83, 98, 99, 256, 258, 261], "l84": [80, 83], "parallel": [81, 91, 129, 136, 142, 144, 146, 147, 149, 150, 211, 218, 229, 255, 259, 260, 267], "imagedatagener": [81, 86, 118, 135, 152, 257], "except": [81, 86, 121, 142, 144, 146, 147, 149, 150, 227, 228, 230, 244, 260, 267], "asynchron": [81, 211, 237, 238], "multiprocess": [81, 86], "multi": [81, 86, 98, 124, 230, 257, 258], "futur": [81, 126, 185], "concurr": 81, "flow_from_directori": [81, 86], "a0": 81, "get_batch_funct": [81, 82, 86, 87, 143, 148], "noaug_preprocessing_funct": [81, 82, 86, 87, 143], "random": [81, 83, 86, 89, 98, 102, 115, 116, 129, 136, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 242, 257, 260, 261], "trim": [81, 102, 138, 142, 143, 144, 146, 147, 149], "sample_length_second": [81, 134], "frontend_en": [81, 82, 113, 134, 143], "2d": [81, 83, 86, 113, 114, 118, 127, 129, 142, 146, 147, 149, 150, 161, 242, 256, 257, 258, 259, 260], "postprocessing_funct": [81, 82, 134, 143], "samplewise_cent": [81, 86, 90, 128, 134, 135, 140, 143, 145, 148, 151, 152, 155, 257], "samplewise_std_norm": [81, 86, 90, 128, 134, 135, 140, 143, 145, 148, 151, 152, 155, 257], "unus": [81, 89, 91], "_silence_": [81, 91, 128, 143, 145, 148, 151, 155, 250, 261, 263], "spawn": [81, 86, 259], "thread": [81, 211, 225, 229, 238], "max_batches_pend": [81, 86, 128, 133, 134, 135, 140, 143, 145, 148, 151, 152, 155, 156, 157, 159, 160, 257], "queue": [81, 86], "get_batches_of_transformed_sampl": [81, 86], "batch_index": [81, 86, 143, 148], "batch_x": [81, 86, 140, 143, 148, 191], "batch_i": [81, 86, 140, 143, 148, 191], "sample_length": [81, 83, 84, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151], "librosa": [81, 142, 143, 144, 146, 147, 148, 149, 150, 156], "my_processing_func": [81, 86, 229], "class_id": [81, 86, 131, 132, 142, 143, 144, 146, 147, 148, 149, 150, 253, 260], "batch_class_id": [81, 86], "batch_filenam": [81, 86], "processed_x": [81, 86], "norm": [81, 205, 264], "divid": [81, 86, 113, 114, 118, 254, 255, 256, 257, 258, 259, 260, 264, 267], "samplewise_normalize_rang": [81, 90], "validation_split": [81, 86, 113, 114, 118, 119, 128, 129, 130, 131, 132, 134, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 159, 160, 253, 257], "validation_augmentation_en": [81, 86, 128, 133, 134, 135, 140, 143, 145, 148, 151, 152, 155, 157, 257], "frontend_dtyp": [81, 82], "color": [81, 86, 105, 118, 256, 257, 261], "brown": 81, "pink": 81, "violet": 81, "noise_color_rang": 81, "min": [81, 90, 124, 130, 138, 140, 142, 144, 146, 149, 176, 180, 183, 188, 196, 204, 238, 265], "loud": 81, "speed_rang": [81, 128, 134, 143, 145, 148, 151, 155], "pitch_rang": [81, 128, 134, 143, 145, 148, 151, 155], "pitch": [81, 209, 210, 212, 215, 259, 267], "semiton": 81, "vtlp_rang": [81, 128, 143, 145, 148, 151, 155], "vocal": 81, "tract": 81, "perturb": 81, "loudness_rang": [81, 128, 134, 143, 145, 148, 151, 155], "decreas": [81, 124, 127, 128, 129, 135, 136, 143, 145, 146, 148, 149, 152, 155, 257, 258, 259, 260, 261, 263], "bg": 81, "bg_nois": [81, 143, 148], "ref": 81, "trimmed_audio": 81, "raw_audio": 81, "required_pad": 81, "len": [81, 83, 122, 130, 131, 132, 138, 140, 142, 143, 144, 146, 147, 148, 149, 150, 154, 191, 212, 215, 216, 229, 238, 242, 253, 256, 257, 260, 265, 267], "pad_upto_index": 81, "uniform": [81, 83, 86, 113, 114, 118, 129, 142, 143, 144, 146, 147, 148, 149, 150, 260], "padded_audio": 81, "concat": [81, 138], "800": [81, 89, 91, 145], "disable_random_transform": 81, "audiofeaturegeneratoret": 81, "sample_shap": [81, 82, 134, 143, 148], "disable_gpu_in_subprocess": [81, 86, 91, 229], "add_channel_dimens": [81, 82], "__init__": [81, 82, 83, 84, 86, 87, 121, 122, 129, 136, 138, 142, 144, 146, 147, 149, 150, 161, 163, 166, 169, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 210, 211, 214, 215, 216, 222, 223, 225, 227, 229, 232, 234, 238], "adc": 81, "32": [81, 84, 86, 105, 119, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 242, 246, 250, 253, 255, 257, 258, 259, 260, 263, 264, 265, 266, 267], "shuffl": [81, 86, 89, 91, 113, 114, 115, 116, 118, 129, 132, 135, 136, 142, 144, 146, 147, 149, 150, 152, 211, 212, 257, 258, 267], "shuffle_index_dir": [81, 86], "seed": [81, 86, 89, 91, 98, 129, 132, 136, 142, 144, 146, 147, 149, 150, 211, 212, 260, 267], "follow_link": [81, 86, 89, 91, 102, 113, 118, 142, 144, 147, 150], "max_samples_per_class": [81, 86, 89, 91, 113, 118, 122, 129, 130, 136, 142, 144, 146, 147, 149, 150, 161], "list_valid_filenames_in_directory_funct": [81, 86, 89, 91, 142, 144, 147, 149, 150], "class_count": [81, 86, 89, 91, 113, 114, 118, 120, 129, 131, 132, 136, 142, 144, 146, 147, 149, 150, 253], "parallelaudiogener": 81, "subdirectori": [81, 86, 105, 106, 107, 113, 228, 257], "bmp": [81, 86], "ppm": [81, 86], "tif": [81, 86], "tree": [81, 86, 88, 93, 102, 110, 137, 139, 141, 142, 144, 147, 150, 153, 154, 155, 156, 157, 158, 159, 160, 162, 221, 244, 246, 247, 248, 250, 251, 259], "dog": [81, 86, 102, 105, 113, 114, 118, 119, 133, 157, 161, 256, 261, 265], "cat": [81, 86, 102, 105, 113, 114, 118, 119, 133, 157, 161, 256, 261, 265], "spars": [81, 86, 113, 118, 143], "hot": [81, 86, 113, 118, 129, 132, 136, 142, 144, 146, 147, 149, 150], "ident": [81, 86, 113, 118, 256, 259], "mainli": [81, 86, 113, 118, 122, 215, 216], "autoencod": [81, 86, 113, 118, 130, 156, 161], "yield": [81, 86, 131, 132, 140, 253, 265], "reus": [81, 86, 102, 113, 118], "maintain": [81, 86, 113, 118, 255, 264, 266], "symlink": [81, 86, 113, 118], "list_valid_filenames_in_directori": [81, 86, 89, 91, 102, 142, 144, 147, 149, 150], "base_directori": [81, 86, 89, 91, 102, 142, 144, 147, 150], "search_class": [81, 86, 89, 91, 102, 142, 144, 147, 150], "white_list_format": [81, 86, 89, 91, 102, 142, 144, 147, 150], "shuffle_index_directori": [81, 86, 89, 91, 102, 142, 144, 146, 147, 150], "directoryiter": [81, 86], "target_s": [81, 86, 87, 118, 140], "default_transform": [81, 86, 143, 148], "retrun": [81, 232], "get_random_transform": [81, 86, 143, 148], "configer": 81, "orignal_sr": [81, 143, 148], "whole_sampl": 81, "apply_transform": [81, 86, 143, 148], "keepdim": [81, 90, 138, 144, 242, 264, 266], "1e": [81, 86, 90, 134, 140, 142, 143, 144, 145, 147, 148, 150, 242, 259, 260, 264, 266], "diff": [81, 90], "ptp": [81, 90], "relat": [82, 86, 87, 102], "logic": [82, 87], "audio_data_gener": [82, 143, 148], "save_to_dir": [82, 86, 87, 133, 135, 140, 152], "save_prefix": [82, 86, 87], "save_format": [82, 86, 87, 140, 146, 149, 256], "class_indic": [82, 86, 87, 143, 148], "grai": [83, 138, 140, 257, 258, 259], "1200": [83, 84, 128, 142, 143, 151, 258, 263], "108": [83, 84, 142, 144, 242, 258, 259, 263], "original_sample_r": [83, 129, 142, 144, 146, 147, 149, 150, 260], "my_audio": 83, "resampl": [83, 86, 118, 129, 142, 144, 146, 147, 149, 150, 260], "orig_sr": [83, 129, 142, 144, 146, 147, 149, 150, 260], "squeez": [83, 140, 142, 144, 146, 147, 149, 150, 265], "axi": [83, 86, 129, 138, 140, 142, 143, 144, 146, 147, 148, 149, 150, 242, 259, 260, 265, 266], "process_sampl": [83, 89, 91], "dimens": [83, 86, 129, 142, 144, 146, 147, 149, 150, 191, 192, 197, 242, 258, 259, 260, 263, 265], "window_size_length": 83, "window_step_length": 83, "n_featur": [83, 84], "n_channel": [83, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 197, 248], "activity_was_detect": 83, "spectrogram_shap": [84, 129, 142, 144, 146, 147, 149, 150, 260], "__new__": [84, 122, 174, 176, 192, 193, 200, 215, 216, 219], "item": [84, 142, 174, 191, 193, 212, 248, 257, 267], "fromkei": [84, 174, 193], "pop": [84, 174, 193], "unrepresent": [84, 122, 174, 193, 215, 216], "rais": [84, 86, 121, 122, 127, 140, 142, 144, 146, 147, 149, 150, 174, 176, 192, 193, 200, 209, 213, 215, 216, 231, 236, 256, 260], "keyerror": [84, 174, 193], "popitem": [84, 174, 193], "lifo": [84, 174, 193], "empti": [84, 89, 122, 129, 136, 142, 143, 144, 146, 147, 149, 150, 174, 193, 215, 216, 228, 230, 260, 265], "self": [84, 129, 130, 136, 138, 142, 143, 144, 146, 147, 148, 149, 150, 154, 176, 192, 219, 227, 230, 235, 241], "setdefault": [84, 174, 193], "insert": [84, 121, 122, 142, 144, 146, 147, 149, 174, 185, 193, 215, 216, 242], "present": [84, 96, 100, 122, 142, 144, 147, 150, 174, 193, 200, 209, 213, 215, 216, 257, 259, 260], "lack": [84, 174, 193], "05": [84, 129, 135, 140, 145, 146, 149, 152, 155, 159, 160, 246, 257, 259, 266], "80": [84, 128, 129, 134, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 159, 242, 244, 257, 259, 260, 263, 267], "21": [84, 128, 129, 130, 134, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 157, 159, 160, 242, 244, 246, 247, 251, 257, 259, 260, 263, 265, 267], "75": [84, 89, 91, 129, 142, 144, 146, 147, 148, 149, 150, 152, 242, 259, 260, 265], "trip": 84, "rhe": 84, "deep": [84, 98, 210, 252, 257], "read_image_fil": [85, 136], "target_channel": 85, "nativ": [85, 91, 140, 176, 192], "write_image_fil": [85, 129, 136], "auto_scal": 85, "foreground": 86, "threadpool": 86, "pool": [86, 91, 127, 129, 136, 142, 144, 146, 147, 149, 150, 195, 196, 211, 229, 255, 258], "featurewise_cent": 86, "boolean": [86, 113, 114, 118, 124, 127, 138, 185], "wise": [86, 144, 266], "featurewise_std_norm": 86, "zca_epsilon": 86, "epsilon": [86, 138, 142, 144, 147, 150, 259, 260], "zca": 86, "whiten": 86, "zca_whiten": 86, "degre": 86, "rotat": 86, "width_shift_rang": [86, 133, 135, 140, 152, 157, 159, 160, 257], "pixel": [86, 105, 107, 140, 257], "height_shift_rang": [86, 133, 135, 140, 152, 157, 159, 160, 257], "brightness_rang": [86, 135, 140, 152, 159, 257], "pick": [86, 143, 260], "bright": 86, "shear_rang": 86, "shear": 86, "intens": [86, 255, 257, 259], "angl": [86, 257], "clockwis": 86, "direct": [86, 124, 142, 146, 148, 149, 150], "zoom_rang": [86, 135, 140, 152, 159, 160, 257], "zoom": 86, "channel_shift_rang": 86, "fill_mod": [86, 140], "constant": [86, 140], "nearest": [86, 118], "reflect": [86, 98, 124, 138, 140, 256, 259], "boundari": [86, 122, 215, 216], "fill": [86, 122, 215, 216], "accord": [86, 124, 255], "thegiven": 86, "kkkkkkkk": 86, "abcd": 86, "cval": [86, 140], "aaaaaaaa": 86, "dddddddd": 86, "abcddcba": 86, "dcbaabcd": 86, "abcdabcd": 86, "flip": 86, "horizont": 86, "vertic": 86, "resiz": [86, 118, 133, 135, 136, 142, 144, 146, 147, 149, 150, 152, 156, 157, 159, 160, 257], "interpol": [86, 87, 118, 156], "reserv": [86, 122, 215, 216], "strictli": [86, 265], "enhanc": [86, 91], "contrast": [86, 137, 138, 140, 256], "tv": 86, "grei": 86, "gaussian": 86, "speckl": 86, "varianc": [86, 259], "random_transforms_en": 86, "256": [86, 133, 138, 140, 142, 143, 144, 145, 146, 147, 150, 151, 160, 257, 258, 263], "color_mod": [86, 87, 118, 140, 248], "batch_shap": [86, 87, 143, 148], "bilinear": [86, 118], "rgba": [86, 118], "bicub": [86, 118], "lanczo": [86, 118], "ham": [86, 118], "sample_weight": [86, 113, 114, 118], "rank": 86, "feed": [86, 258, 261], "miscellan": 86, "along": [86, 99, 106, 107, 144, 257, 259, 266], "pictur": 86, "prefix": [86, 91, 122, 124, 215, 216, 229, 253], "jpeg": [86, 142, 144, 146, 147, 149, 150, 257], "pdf": [86, 127, 156, 157, 159, 254, 260], "gif": 86, "form": [86, 113, 114, 118], "valueerror": [86, 122, 127, 200, 209, 213, 215, 216], "img_shap": 86, "transform_paramet": 86, "round": [86, 115, 116, 117, 259], "flow_from_datafram": 86, "datafram": 86, "x_col": 86, "y_col": 86, "weight_col": 86, "validate_filenam": 86, "ly": 86, "keras_flow_from_datafram": 86, "panda": 86, "multi_output": 86, "obtain": [86, 113, 114, 118, 124, 242, 254, 255, 258, 259, 264, 266], "attribut": [86, 87, 107, 113, 118, 121, 124, 166, 217, 227, 230, 235], "pil": 86, "newer": 86, "invalid": [86, 102, 127, 146, 149, 175], "legaci": [86, 265], "dataframeiter": 86, "random_transform": 86, "3d": [86, 129, 133, 142, 146, 147, 149, 150, 152, 257, 260], "signific": [86, 124, 176, 192, 255], "image_data_gener": 87, "data_format": 87, "list_dataset_directori": 89, "unknown_class_label": 89, "empty_class_percentag": 89, "empty_class_label": 89, "return_absolute_path": 89, "process_samples_funct": [89, 91, 142, 144, 146, 147, 150], "label_id": [89, 91], "class1": [89, 91], "sample1": [89, 91, 259, 267], "sample2": [89, 91, 259, 267], "sample9": [89, 91], "class2": [89, 91], "class3": [89, 91], "return_audio_data": [89, 91, 129, 142, 144, 146, 147, 149, 150], "sample_path": [89, 91, 142, 144, 146, 147, 150, 257], "split_file_list": [89, 142, 144, 146, 147, 150], "shuffle_file_list_by_group": [89, 142, 144, 147, 150], "group_callback": 89, "42": [89, 98, 129, 132, 136, 142, 143, 144, 146, 147, 149, 150, 151, 154, 185, 193, 212, 242, 248, 259, 260, 263, 267], "flat": [89, 113, 114, 118, 129, 136, 142, 144, 146, 147, 149, 150], "callabl": [89, 91, 115, 121, 127, 175, 207, 211, 227, 228, 229, 232, 233, 244, 245, 246, 249, 251], "load_audio_directori": [91, 129, 142, 144, 146, 147, 149, 150], "onehot_encod": [91, 129, 136, 142, 144, 146, 147, 149, 150], "return_audio_sample_r": 91, "onehot": 91, "datasetv2": 91, "load_image_directori": [91, 136], "return_image_data": [91, 136], "parallel_process": [91, 129, 136, 142, 144, 146, 147, 149, 150, 255, 258, 259], "n_job": [91, 129, 136, 142, 144, 146, 147, 149, 150, 211, 212, 229, 255, 258, 267], "job_batch_s": 91, "parallelprocess": 91, "env": [91, 229, 233], "numpy_funct": 91, "cannot": [91, 113, 114, 118, 122, 266], "nest": [91, 207, 229, 230], "job": [91, 143, 145, 148, 151, 211, 218, 229, 255, 267], "processpool": 91, "enable_numpy_behavior": [91, 136], "behavior": [91, 113, 114, 118], "reshap": [91, 118, 127, 128, 133, 134, 135, 138, 142, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 157, 159, 160, 199, 242, 244, 246, 247, 248, 250, 257, 259, 260, 265], "ravel": 91, "promot": 91, "ones": [91, 102, 122, 176, 192, 215, 216], "int32": [91, 128, 130, 132, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 185, 193, 242, 246, 247, 248, 250, 257, 259, 263, 265], "throw": [91, 230], "incompat": 91, "float64": [91, 185], "obei": 91, "rule": [91, 264], "capabl": [91, 267], "par": 91, "prepare_data": 93, "prepar": [93, 113, 118, 131, 132, 146, 149, 253, 265], "load_data": [93, 102, 105, 106, 107, 108, 109, 113, 118, 129, 131, 132, 133, 138, 140, 154, 157, 248, 253, 257, 265], "seq_length": [93, 154], "dataload": 93, "mixkit": [94, 142, 146, 149], "co": [94, 142, 146, 149, 259], "sound": [94, 98, 127, 142, 144, 146, 147, 149, 150, 156, 258, 259, 260, 267], "sfxfree": 94, "download_url": [94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 130, 134, 142, 146, 149, 208, 242], "sfx": [94, 142, 146, 149], "crowd": [94, 142, 146, 149], "pub": [94, 142, 146, 149, 255], "360": [94, 134, 142, 143, 144, 146, 148, 149, 151, 154, 155, 156, 259], "big": [94, 142, 146, 149, 176, 192], "talk": [94, 142, 146, 149], "364": [94, 142, 144, 146, 149], "restaur": [94, 142, 146, 149, 258], "ambienc": [94, 142, 146, 149], "444": [94, 142, 146, 149], "keyboard": [94, 142, 146, 260], "1386": [94, 142, 146], "offic": [94, 142, 146, 258], "447": [94, 142, 146], "hotel": [94, 142, 146], "lobbi": [94, 142, 146], "dine": [94, 142, 146], "area": [94, 142, 146, 161], "453": [94, 142, 146], "url": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 134, 136, 140, 142, 146, 148, 149, 150, 156, 159, 160, 208, 242, 244, 246, 247, 248, 250, 251, 255, 256, 265], "dest_dir": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 121, 142, 146, 150, 207, 208], "sample_rate_hertz": [94, 95, 96, 144, 147, 150], "logger": [94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 166, 169, 175, 208, 218, 219, 229, 230, 233, 253, 256], "mix": [95, 102, 144, 147, 150, 259, 260], "mltk_asset": [95, 108, 109, 134, 142, 146, 148, 149, 150, 156, 159], "brd2601_background_audio": [95, 142, 146, 149], "7z": [95, 97, 99, 100, 101, 103, 104, 108, 109, 142, 146, 148, 149, 150, 156, 159, 257], "verify_sha1": [95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 134, 208], "3069a85002965a7830c660343c215edd4fae39c6": [95, 142, 146, 149], "sha1": [95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 208], "clean_dest_dir": [95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 142, 144, 146, 147, 150, 207, 208], "karoldvl": 96, "obstacl": 96, "research": [96, 99, 127, 142, 144, 147, 150, 160, 258, 259], "concentr": 96, "scarciti": 96, "suitabl": [96, 122, 215, 216, 235, 255, 257], "publicli": [96, 100, 258], "tri": 96, "annot": 96, "000": [96, 99, 105, 106, 107, 130, 138, 155, 243, 250, 259, 265], "abund": 96, "unifi": 96, "250": [96, 244, 247, 259], "unlabel": 96, "auditori": 96, "excerpt": 96, "freesound": 96, "human": [96, 102, 144, 147, 149, 150, 235, 259, 260, 267], "baselin": [96, 99, 124, 138, 163, 174, 256, 259], "deriv": [96, 107], "mel": 96, "cepstral": 96, "cross": [96, 129, 132, 136, 142, 144, 146, 147, 149, 150], "piczak": 96, "proceed": 96, "23rd": 96, "acm": 96, "confer": [96, 146, 149, 258], "multimedia": 96, "pp": 96, "1015": 96, "1018": 96, "karolpiczak": 96, "a5e0c7451e12a751302b32283f1f039cbd111356": 96, "160bb1269418240f9d2bb86eee598ffbd882ca89": 96, "dest_subdir": [96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 134, 136, 148, 149, 156, 159, 160, 208, 255, 265], "synthet": [97, 101, 103, 104, 142, 144, 146, 147, 150, 211, 212, 221, 239, 260], "16khz": [97, 99, 100, 101, 103, 104, 142, 143, 144, 146, 147, 148, 149, 150, 151, 211, 259, 260, 263], "dropbox": [97, 99, 100, 101, 103, 104, 142, 265], "ulumv0sxbtcssvr": 97, "synthetic_direction_command": 97, "dl": [97, 99, 100, 101, 103, 104, 142, 265], "9e9295b4eda3d9da9cd242063c1646b15908da55": 97, "generate_dataset": [97, 101, 103, 104], "out_dir": [97, 101, 103, 104, 211, 212, 267], "environment": [98, 259], "ir": [98, 144, 147, 265], "traer": 98, "mcdermott": 98, "waveform": 98, "That": [98, 102, 254, 255], "instantan": 98, "pressur": 98, "damp": 98, "scatter": 98, "convolv": [98, 144, 147, 259], "emit": 98, "techniqu": [98, 259, 266, 267], "commonli": [98, 264, 267], "problem": [98, 127, 143, 145, 148, 151, 152, 257, 259, 264, 267], "style": [98, 267], "spoken": [98, 99, 102, 129, 142, 143, 145, 151, 258, 259, 263], "reverber": 98, "acoust": 98, "BY": [98, 99, 102, 258, 261], "creativ": [98, 102, 107], "2016": 98, "natur": [98, 122, 144, 215, 216, 266, 267], "perceptu": 98, "mcdermottlab": 98, "edu": [98, 105, 133, 157], "reverb": 98, "irmaudio": 98, "de04f5be419c12f4f847f65d7ef8e2356b73aa38": 98, "apply_ir": 98, "load_dataset": [98, 113, 114, 118, 120, 122, 129, 130, 133, 134, 135, 136, 138, 140, 142, 144, 146, 147, 149, 150, 152, 154], "dataset_dir": [98, 129, 136, 142, 144, 146, 147, 149, 150, 242, 248, 257, 260], "apply_random_ir": [98, 144, 147], "ir_sampl": 98, "appyli": 98, "multilingu": [99, 142, 258, 259], "polici": [99, 126], "english": [99, 100, 102, 267], "corpu": [99, 259], "grow": [99, 258, 259], "languag": [99, 100, 102, 129, 143, 145, 151, 211, 214, 258, 259, 263, 266], "academ": [99, 258], "commerci": [99, 241, 254, 258], "term": [99, 100, 107, 176, 192, 255, 258, 266], "licens": [99, 102, 106, 255, 258], "under": [99, 102, 106, 107, 113, 114, 118, 161, 258], "340": 99, "million": [99, 267], "hour": [99, 255, 257, 259], "autom": [99, 254, 264, 266], "align": [99, 102, 124, 253], "analysi": [99, 264, 266], "outlier": [99, 256], "download_url1": 99, "j4p9w4h92e8rruo": [99, 142], "mlcommons_keywords_subset_part1": [99, 142], "verify_url1_sha1": 99, "6f515d8247e2fee70cd0941420918c8fe57a31e8": [99, 142], "download_url2": 99, "zacujsccjgk92b2": [99, 142], "mlcommons_keywords_subset_part2": [99, 142], "verify_url2_sha1": 99, "7816f5ffa1deeafa9b5b3faae563f44198031796": [99, 142], "commonvoic": 100, "mozilla": [100, 142, 258], "creativecommon": 100, "publicdomain": 100, "peopl": [100, 102, 142, 256, 257, 258, 259], "volunt": 100, "contributor": 100, "around": [100, 102, 136, 138, 253, 264, 266], "compani": 100, "stifl": 100, "innov": 100, "underrepres": 100, "speaker": [100, 102, 267], "colour": 100, "women": 100, "lgbtqia": 100, "technologi": [100, 267], "equal": [100, 113, 114, 118, 122, 128, 135, 138, 143, 145, 148, 152, 155, 163, 176, 192, 215, 216, 257, 265], "everyon": [100, 102], "mobilis": 100, "everywher": 100, "l9uxyr22w3jgenc": [100, 142], "common_voice_subset": [100, 142], "ce424afd5d9b754f3ea6b3a4f78304f48e865f93": [100, 142], "mkvbeyjdks28241": 101, "sl_synthetic_on_off": 101, "b20697b82f883e4dc5e0afc4b7dc950d3339e703": 101, "catalog": 102, "varieti": [102, 127, 267], "cover": [102, 145, 259], "arxiv": [102, 127, 155, 156, 157, 159], "ab": [102, 122, 129, 136, 138, 155, 215, 216, 256], "1804": [102, 155], "03209": [102, 155], "Its": 102, "speech_commands_v0": [102, 159], "02": [102, 128, 133, 134, 138, 143, 144, 145, 151, 154, 155, 156, 157, 159, 160, 259], "tar": [102, 105, 136, 159, 160, 207, 255, 267], "gz": [102, 105, 136, 159, 160, 207, 255, 267], "01": [102, 129, 140, 144, 146, 149, 235, 256, 257], "august": 102, "727": 102, "105": [102, 144, 147, 242, 244, 247, 259, 267], "829": 102, "april": 102, "11th": 102, "2018": 102, "crowdsourc": 102, "aiyproject": 102, "withgoogl": 102, "open_speech_record": 102, "contribut": [102, 128, 135, 143, 145, 148, 152, 155, 257, 266, 267], "enlarg": [102, 128, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160], "goal": [102, 124, 255, 256], "gather": 102, "speak": [102, 142, 209, 210, 216, 258, 267], "sentenc": [102, 142], "cours": [102, 258, 261], "five": [102, 103, 144, 151, 242, 261, 266], "minut": [102, 231, 255], "twenti": 102, "six": [102, 103, 144, 151, 242, 261, 266], "seven": [102, 103, 144, 151, 242, 261, 266], "eight": [102, 103, 144, 151, 242, 261, 266], "nine": [102, 103, 141, 144, 151, 242, 261, 266], "distinguish": [102, 263], "unrecogn": 102, "ten": [102, 242], "auxiliari": 102, "said": [102, 260], "bed": 102, "bird": [102, 105, 157, 265], "happi": [102, 267], "hous": 102, "marvin": 102, "sheila": 102, "wow": 102, "kept": [102, 127], "particip": 102, "ag": [102, 255], "gender": 102, "assign": [102, 151, 255, 257], "stabl": 102, "though": [102, 134, 255, 263], "utter": 102, "3cfc6b3a_nohash_2": 102, "3cfc6b3a": 102, "third": [102, 113, 114, 118, 122, 129, 141, 215, 216, 255], "nohash": 102, "partit": [102, 122, 215, 216], "repetit": 102, "unrealist": 102, "optimist": 102, "uncontrol": 102, "room": 102, "privaci": [102, 140, 256], "didn": 102, "stipul": 102, "qualiti": [102, 256, 258, 259, 263, 264, 266, 267], "encount": [102, 256, 257, 259, 265], "robot": [102, 267], "don": [102, 156, 163, 255], "equip": 102, "ogg": 102, "vorbi": 102, "littl": [102, 124, 152, 176, 192, 253, 255, 257, 258, 267], "endian": 102, "wave": [102, 155], "extract_loudest_sect": 102, "screen": 102, "incorrect": 102, "arrang": 102, "cope": 102, "noisi": 102, "realist": [102, 267], "readm": [102, 155, 265], "md": [102, 127, 155, 160], "cite": 102, "articl": 102, "speechcommandsv2": 102, "author": [102, 241, 254], "warden": 102, "titl": [102, 122, 140, 215, 216, 256], "vocabulari": 102, "recognit": [102, 266], "journal": 102, "archiveprefix": 102, "eprint": 102, "primaryclass": 102, "cl": [102, 200, 230], "scienc": 102, "year": 102, "month": [102, 255, 267], "apr": 102, "massiv": 102, "thank": [102, 267], "donat": 102, "grate": 102, "couldn": 102, "put": [102, 118, 142, 144, 146, 147, 149, 150, 185, 193, 257, 258], "billi": 102, "rutledg": 102, "rajat": 102, "monga": 102, "raziel": 102, "alvarez": 102, "brad": 102, "krueger": 102, "barbara": 102, "petit": 102, "gursheesh": 102, "kour": 102, "aii": 102, "team": [102, 139, 153, 254], "pete": 102, "petewarden": 102, "4264eb9753e38eef2ec1d15dfac8441f09751ca9": 102, "mltk_cache_dir": [102, 208, 228], "load_clean_data": [102, 144, 146, 147, 149, 150], "v2_clean": 102, "clean_in_plac": 102, "invalid_sampl": 102, "_clean": 102, "accident": 102, "stabil": 102, "_nohash_": [102, 142, 144, 147, 150], "bobby_nohash_0": 102, "bobby_nohash_1": 102, "o8e84fsb5abu3t1": 103, "sl_synthetic_ten_digit": 103, "a716e86a27fb5255d2a3bff4441dcd5b4044ea3a": 103, "83z0pkvtunpw7ci": 104, "sl_synthetic_yes_no": 104, "abf31f3444f17e94b5bded4d4e2a001b5a6cb1b7": 104, "32x32": 105, "categori": [105, 106], "cifar": [105, 133, 157], "homepag": [105, 107], "airplan": [105, 157, 265], "automobil": [105, 157, 265], "deer": [105, 157, 265], "frog": [105, 157, 265], "hors": [105, 157, 265], "ship": [105, 157, 265], "truck": [105, 157, 261, 265], "x_train": [105, 106, 107, 118, 131, 132, 133, 138, 157, 253], "y_train": [105, 106, 107, 118, 131, 132, 133, 138, 157, 253], "x_test": [105, 106, 107, 118, 131, 132, 133, 138, 157, 253, 265], "y_test": [105, 106, 107, 118, 131, 132, 133, 138, 157, 253, 265], "assert": [105, 106, 107, 134, 142, 144, 147, 150, 248, 265], "50000": 105, "10000": [105, 106, 107, 134, 142, 147, 150, 212, 259, 265, 267], "toronto": [105, 133, 157], "kriz": [105, 133, 157], "6d958be074577803d12ecdefd02955f39262c83c16fe9348329d7fe0b5c001c": 105, "load_data_directori": [105, 106, 107], "60": [106, 107, 128, 131, 132, 135, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 157, 159, 160, 231, 238, 242, 244, 253, 257, 259, 260, 263, 265, 267], "28x28": [106, 107], "shirt": 106, "trouser": 106, "pullov": 106, "dress": 106, "coat": 106, "sandal": 106, "sneaker": 106, "bag": 106, "ankl": 106, "boot": 106, "60000": [106, 107, 138, 144], "28": [106, 107, 131, 132, 136, 138, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 157, 160, 242, 253, 257, 258, 259, 260, 263], "copyright": [106, 107], "held": [106, 241], "zalando": 106, "se": 106, "mit": [106, 144, 147, 259], "tshirt": 106, "flash_mnist": 106, "digit": [107, 122, 215, 216, 242], "yann": 107, "lecun": 107, "corinna": 107, "cort": 107, "nist": 107, "alik": 107, "storag": [107, 130, 255], "googleapi": [107, 130, 267], "npz": 107, "731c5ac602752760c8e48fbffcf8c3b850d9dc2a2aedcf2cc48468fc17b673d1": 107, "hand": [108, 109, 135, 152, 239, 246, 251, 256, 257], "gestur": [108, 109, 135, 152, 239, 246, 251, 257], "1ce48f66f7ff999958550147d75aba8da185280c": 108, "input_height": [108, 109, 133, 156, 157], "input_width": [108, 109, 133, 157], "input_depth": [108, 109, 133, 157], "depth": [108, 109, 132, 181, 182, 183, 228, 258, 260, 265], "96x96x1": [108, 109, 135, 152, 246, 248], "77ed1793be7871dcaa79d935b39ba4d23a28e2c3": 109, "tflite_model": [111, 121, 122, 138, 140, 163, 167, 189, 191, 193, 242, 246, 248, 250, 265], "tflite_model_paramet": 111, "cli": [111, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 253], "alia": [112, 210, 219], "datset": [113, 140], "shuffle_dataset_en": [113, 118, 135, 152, 257], "audio_class": 113, "audio_input_shap": 113, "hertz": [113, 163], "class_weight": [113, 114, 118, 119, 128, 129, 131, 132, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 253, 257, 258], "balanc": [113, 114, 118, 119, 128, 129, 131, 132, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 253, 255, 256, 257], "goat": [113, 114, 118, 119, 161, 256], "Or": [113, 114, 118, 241], "pai": [113, 114, 118, 255, 267], "attent": [113, 114, 118], "n_sampl": [113, 114, 118, 129, 136, 138, 142, 144, 146, 147, 149, 150, 161, 265], "bincount": [113, 114, 118, 131, 132, 253], "datagen_context": [113, 118], "context": [113, 118], "audiofeaturegeneratorsettingsset": 113, "get_datagen_cr": [113, 118], "get_shuffle_index_dir": [113, 118], "parallelimagegener": [113, 118, 135, 152], "reproduc": [113, 118, 126, 129, 136, 142, 144, 146, 147, 149, 150, 257, 260], "henc": [113, 118, 242], "loaded_subset": [113, 114, 118], "tempor": [113, 114, 118, 127, 142, 144, 147, 150, 258, 259, 260], "sequence_length": [113, 114, 118], "timestep": [113, 114, 118], "special": [113, 114, 118, 140, 148, 149, 150, 256, 260], "deal": [113, 114, 118, 255], "hdf5": [113, 114, 118, 146, 149], "chunk": [113, 114, 118], "steps_per_epoch": [113, 114, 118, 154], "declar": [113, 114, 115, 116, 117, 118], "exhaust": [113, 114, 115, 116, 117, 118], "infinit": [113, 114, 118], "summarize_dataset": [113, 114, 118, 120, 122, 130, 142, 144, 147, 150, 154], "unload_dataset": [113, 114, 118, 120, 122, 129, 133, 135, 136, 138, 140, 142, 144, 146, 147, 149, 150, 152], "unload": [113, 114, 118, 120, 129, 136, 142, 144, 146, 147, 149, 150, 175, 242], "validation_batch_s": [113, 114, 118], "unspecifi": [113, 114, 118], "validation_data": [113, 114, 118, 120, 129, 130, 132, 136, 138, 140, 142, 144, 146, 147, 149, 150, 154], "fact": [113, 114, 118, 267], "dropout": [113, 114, 118, 127, 129, 131, 132, 133, 134, 144, 145, 146, 148, 149, 152, 154, 155, 250, 253, 257, 259], "x_val": [113, 114, 118, 138], "y_val": [113, 114, 118, 138], "val_sample_weight": [113, 114, 118], "validation_step": [113, 114, 118, 154], "eg": [113, 114, 118], "validation_freq": [113, 114, 118], "collections_abc": [113, 114, 118], "1st": [113, 114, 118], "2nd": [113, 114, 118], "10th": [113, 114, 118], "apart": [113, 114, 118], "draw": [113, 114, 118], "unpack": [113, 114, 118], "invers": [113, 114, 118], "parallel_gener": [113, 118, 128, 133, 134, 135, 140, 143, 145, 148, 151, 152, 155, 156, 157, 159, 160, 257], "validation_datagen": [113, 118], "mltkdataset": [114, 129, 136, 142, 144, 146, 147, 149, 150], "my_dataset_load": [114, 131, 132, 133, 157, 253], "definit": [114, 124, 257], "caller": 114, "scoring_funct": [115, 161], "eval_class": 115, "eval_aug": [115, 116], "datageneratordatasetmixin": [115, 116], "eval_custom_funct": [115, 116, 117, 138, 140, 256], "my_custom_eval_funct": [115, 116, 117], "built_model": [115, 116, 117, 138, 140, 165, 256], "evaluationresult": [115, 116, 117, 122, 138, 140, 161, 256], "isinst": [115, 116, 117, 138, 140, 248], "overall_accuraci": [115, 116, 117, 138, 161], "calculate_accuraci": [115, 116, 117], "eval_max_samples_per_class": [115, 116], "eval_shuffl": [115, 116], "eval_steps_per_epoch": [115, 116, 117, 154], "get_scoring_funct": 115, "image_class": 118, "image_input_shap": 118, "snippet": [119, 148, 212, 224, 231, 237, 259, 260, 265, 266], "basic_exampl": [119, 120, 132], "mltk_core": [119, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 253, 254, 259, 262, 266], "__name__": [119, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 253, 262], "__main__": [119, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 253, 262], "portion": [120, 129, 131, 132, 136, 142, 144, 146, 147, 149, 150, 253, 265], "purpos": [120, 129, 131, 132, 136, 140, 142, 144, 146, 147, 149, 150, 241, 253, 255, 256, 257, 259, 260, 263, 265, 267], "static": [120, 122, 175, 177, 178, 180, 181, 183, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 211, 215, 216, 219, 232, 238, 259], "summarize_class_count": [120, 142, 144, 147, 150], "fore": 121, "model_script_path": 121, "get_attribut": 121, "regist": [121, 122, 133, 135, 138, 152, 175, 215, 216], "model_specification_path": [121, 146, 149], "create_log_dir": [121, 129, 133, 135, 136, 140, 142, 144, 146, 147, 149, 150, 152, 258], "suffix": [121, 122, 215, 216, 228], "delete_exist": [121, 133, 135, 140, 152], "create_logg": 121, "parent": [121, 227], "h5_log_dir_path": [121, 140, 146, 149, 256], "tflite_log_dir_path": 121, "unquantized_tflite_log_dir_path": 121, "keras_custom_object": [121, 138, 140, 142, 144, 147, 150, 259], "serialization_and_sav": 121, "test_mode_en": [121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 253], "enable_test_mod": 121, "add_event_handl": [121, 122, 144, 266], "handler": [121, 122, 227, 266], "_raise_except": 121, "mltkmodelev": [121, 144, 266], "my_event_handl": 121, "collid": 121, "trigger_ev": 121, "add_archive_dir": 121, "base_dir": [121, 228, 248], "create_new": 121, "add_archive_fil": 121, "add_model_parameter_populate_callback": 121, "add_tflite_metadata_entri": 121, "tflitemodelmetadataentri": 121, "archive_path": [121, 122, 207, 208, 267], "mdk": 121, "check_archive_file_is_writ": 121, "throw_except": [121, 223, 230], "writabl": 121, "deserialize_tflite_metadata": 121, "get_archive_dir": 121, "get_archive_fil": [121, 146, 149], "get_tflite_metadata_summari": 121, "include_tag": 121, "exclude_tag": 121, "h5_archive_path": [121, 128, 151, 261], "populate_model_paramet": 121, "tflitemodelparamet": [121, 242, 248], "serialize_tflite_metadata": 121, "metedata": 121, "tag": [121, 128, 130, 133, 134, 135, 138, 140, 143, 145, 148, 151, 152, 154, 155, 156, 157, 159, 160, 191, 193, 257], "set_model_paramet": 121, "paremet": 121, "tflite_archive_path": [121, 128, 242], "tflite_metadata_entri": 121, "stage": 122, "before_model_load": 122, "after_model_load": 122, "before_load_dataset": 122, "after_load_dataset": 122, "before_unload_dataset": 122, "after_unload_dataset": 122, "summary_dict": 122, "train_startup": 122, "post_process": [122, 161, 163, 166], "before_build_train_model": 122, "after_build_train_model": 122, "populate_train_callback": 122, "keras_callback": 122, "before_train": 122, "fit_kwarg": 122, "after_train": 122, "training_histori": [122, 166], "before_save_train_model": [122, 144, 266], "keras_model_dict": [122, 144, 266], "keas_model": 122, "kwd": [122, 176, 192, 215, 216], "capit": [122, 215, 216], "casefold": [122, 215, 216], "caseless": [122, 215, 216], "fillchar": [122, 215, 216], "occurr": [122, 200, 209, 213, 215, 216], "substr": [122, 215, 216], "notat": [122, 215, 216], "utf": [122, 142, 144, 146, 147, 149, 150, 191, 215, 216, 260], "strict": [122, 215, 216], "codec": [122, 215, 216, 258], "scheme": [122, 215, 216], "unicodeencodeerror": [122, 215, 216], "xmlcharrefreplac": [122, 215, 216], "register_error": [122, 215, 216], "endswith": [122, 142, 144, 147, 150, 215, 216, 257], "expandtab": [122, 215, 216], "tabsiz": [122, 215, 216], "failur": [122, 215, 216], "substitut": [122, 215, 216], "identifi": [122, 130, 215, 216, 241, 255, 256, 257, 264], "brace": [122, 215, 216], "format_map": [122, 215, 216], "isalnum": [122, 215, 216], "alpha": [122, 127, 136, 143, 146, 149, 151, 215, 216, 261, 263], "numer": [122, 176, 177, 178, 181, 184, 186, 190, 192, 194, 198, 199, 202, 205, 215, 216, 235, 240, 257, 258, 259, 267], "isalpha": [122, 215, 216], "isascii": [122, 215, 216], "ascii": [122, 215, 216, 232], "0000": [122, 215, 216], "007f": [122, 215, 216], "isdecim": [122, 215, 216], "decim": [122, 215, 216], "isdigit": [122, 215, 216], "isidentifi": [122, 215, 216], "iskeyword": [122, 215, 216], "islow": [122, 215, 216], "lowercas": [122, 215, 216, 230], "isnumer": [122, 215, 216], "isprint": [122, 215, 216], "printabl": [122, 163, 185, 215, 216], "repr": [122, 215, 216], "isspac": [122, 215, 216], "whitespac": [122, 215, 216, 267], "istitl": [122, 215, 216], "uncas": [122, 215, 216], "isupp": [122, 215, 216], "uppercas": [122, 215, 216], "join": [122, 142, 143, 144, 147, 148, 150, 211, 212, 215, 216, 242, 248, 265, 267], "concaten": [122, 138, 215, 216], "whose": [122, 176, 192, 215, 216, 261, 267], "pq": [122, 215, 216], "ljust": [122, 215, 216, 235], "justifi": [122, 215, 216], "lstrip": [122, 215, 216], "char": [122, 211, 215, 216, 217, 232], "maketran": [122, 215, 216], "translat": [122, 215, 216], "usabl": [122, 215, 216], "unicod": [122, 215, 216], "ordin": [122, 215, 216], "sep": [122, 215, 216], "itself": [122, 215, 216], "removeprefix": [122, 215, 216], "removesuffix": [122, 215, 216], "old": [122, 215, 216, 228], "rfind": [122, 215, 216], "rindex": [122, 215, 216], "rjust": [122, 212, 215, 216, 235, 267], "rpartit": [122, 215, 216], "rsplit": [122, 215, 216], "maxsplit": [122, 215, 216], "front": [122, 156, 159, 215, 216, 257], "rstrip": [122, 215, 216], "trail": [122, 215, 216, 230], "intention": [122, 215, 216], "punctuat": [122, 215, 216], "express": [122, 215, 216, 241, 267], "splitlin": [122, 215, 216], "keepend": [122, 215, 216], "break": [122, 133, 135, 138, 140, 142, 144, 146, 147, 149, 152, 215, 216, 256, 257, 265], "unless": [122, 127, 215, 216], "startswith": [122, 142, 144, 147, 150, 215, 216], "strip": [122, 142, 144, 147, 150, 215, 216, 267], "swapcas": [122, 215, 216], "titlecas": [122, 215, 216], "remain": [122, 215, 216], "lookup": [122, 191, 215, 216], "__getitem__": [122, 215, 216], "lookuperror": [122, 215, 216], "delet": [122, 215, 216, 257], "zfill": [122, 215, 216], "never": [122, 126, 215, 216, 223, 257, 259], "truncat": [122, 131, 132, 211, 212, 213, 215, 216, 253, 267], "after_save_train_model": 122, "before_save_train_result": 122, "trainingresult": [122, 124, 128, 140], "output_dir": [122, 140, 161, 163, 256, 265], "after_save_train_result": 122, "before_save_train_arch": 122, "after_save_train_arch": 122, "train_shutdown": 122, "quantize_startup": 122, "tflite_converter_set": 122, "before_quant": 122, "converter_dict": 122, "after_quant": 122, "tflite_flatbuff": [122, 193], "tflite_flatbuffer_dict": 122, "update_arch": [122, 161], "quantize_shutdown": 122, "evaluate_startup": [122, 144, 266], "evaluate_shutdown": 122, "generate_evaluate_plot": 122, "fig": [122, 138, 140, 256], "matlibplot": 122, "figur": [122, 140, 156, 256], "after_profil": 122, "profilingmodelresult": [122, 169], "remote_directori": 123, "softmax": [124, 127, 128, 129, 131, 132, 134, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 159, 160, 242, 244, 246, 247, 248, 250, 253, 257, 259, 260, 263, 264, 265, 266], "build_model": 124, "on_training_complet": [124, 128], "successfulli": [124, 128, 140, 166, 255, 256], "_on_training_complet": [124, 128], "on_save_keras_model": [124, 140, 146, 149, 256], "_on_save_keras_model": 124, "understood": 124, "final": [124, 133, 142, 144, 146, 147, 149, 150, 242, 255, 260, 261, 265], "mere": 124, "reach": [124, 223, 267], "arbitrarili": 124, "calback": 124, "gradient": [124, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 257, 259, 266], "categorical_crossentropi": [124, 128, 129, 131, 132, 134, 135, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 157, 159, 160, 253, 257, 259, 260], "checkpoints_en": 124, "logdir": 124, "learningrateschedul": [124, 143, 145, 151, 263], "schedul": [124, 142, 143, 144, 145, 147, 150, 151, 159, 160, 259, 261], "quiet": 124, "favor": 124, "val_loss": [124, 130, 136, 156, 259], "quantiti": 124, "new_lr": 124, "lr": [124, 259], "min_delta": [124, 129, 135, 136, 140, 143, 146, 148, 149, 152, 257], "0001": [124, 135, 146, 149, 159], "optimum": 124, "focu": [124, 151, 254], "cooldown": 124, "min_lr": [124, 143], "bound": [124, 160], "benefit": [124, 241, 254, 257, 259, 264], "stagnat": 124, "seen": [124, 146, 149, 240, 257, 259, 261], "reducelronplateau": [124, 143, 145], "val_accuraci": [124, 128, 129, 130, 134, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 246, 251, 257, 259], "val_": 124, "save_best_onli": 124, "overwritten": 124, "save_weights_onli": 124, "save_weight": 124, "decis": 124, "maxim": [124, 138, 140, 256], "minim": [124, 138, 140, 253, 256, 264], "val_acc": 124, "save_freq": 124, "steps_per_execut": 124, "criteria": [124, 255], "nth": 124, "reliabl": [124, 259, 267], "checkpointopt": 124, "saved_model": 124, "saveopt": 124, "modelcheckpoint": [124, 129, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 257, 259], "conjunct": [124, 254], "state": [124, 201, 205, 255, 259, 266], "qualifi": 124, "restore_best_weight": [124, 140], "restor": 124, "stop_train": 124, "mark": [124, 241], "earli": 124, "earlystop": [124, 128, 143, 145, 155], "subject": [124, 241], "awar": 124, "builtin": 124, "representative_dataset_max_sampl": [124, 144, 266], "allow_custom_op": 124, "experimental_new_convert": [124, 140], "mlir": 124, "toco": 124, "experimental_new_quant": [124, 140], "experimental_enable_resource_vari": 124, "resourc": [124, 239, 247, 248, 255, 263], "from_saved_model": [124, 265], "generate_unquant": 124, "generate_quantization_report": [124, 144, 264, 266], "quantization_debugg": 124, "model_quantization_tip": 124, "tflite_builtin": 124, "checkpoints_dir": 124, "get_checkpoint_path": 124, "weights_dir": 124, "contian": 124, "weights_file_format": 124, "get_weights_path": 124, "train_kwarg": 124, "print_not_found_err": 125, "specificaton": 125, "for_utest": 125, "model_typ": [125, 138, 140, 161], "IF": [125, 228, 256, 262], "return_tflite_path": 125, "archive_file_ext": 125, "backend": [126, 138, 175, 210, 211, 212, 214, 258, 265, 267], "wandb_is_initi": 126, "wandb": [126, 150, 254], "wandb_is_dis": 126, "wandb_init_kwarg": 126, "init": 126, "job_typ": 126, "wandb_session_id": 126, "wandb_config": 126, "hyperparamet": 126, "analyz": [126, 144, 240, 259, 263], "wandb_callback": 126, "wandbcallback": 126, "wandb_model_checkpoint_callback": 126, "period": [126, 225, 238, 255], "wandbmodelcheckpoint": 126, "wandb_sav": [126, 254], "glob_str": 126, "base_path": 126, "unix": 126, "noop": 126, "wandb_log": [126, 254], "commit": 126, "serializ": 126, "data_typ": [126, 265], "increment": [126, 129, 136, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 257, 259, 267], "global": [126, 127, 129, 136, 142, 144, 146, 147, 149, 150, 229, 260], "persist": [126, 191, 201, 248], "earlier": 126, "depthwiseseparableconv2d_arm": [127, 159], "num_class": [127, 131, 132, 138, 157, 253], "l2": [127, 134, 145, 148], "1711": [127, 159], "07128": [127, 159], "mcu": [127, 159, 259, 260], "platform_ml_model": [127, 155, 156, 157, 159, 160], "eembc": [127, 155, 156, 157, 159, 160], "kws10_arm_dsconv": [127, 159], "dsconv_arm_eembc": 127, "fullyconnectedautoencod": [127, 156], "dense_unit": 127, "latent_unit": 127, "dcase": [127, 156], "commun": [127, 156, 241, 255, 258, 260], "challenge2020": [127, 156], "task": [127, 143, 156, 163, 211, 253, 255, 257, 259, 261, 263], "unsupervis": [127, 156], "anomal": [127, 156], "kawagu": [127, 156], "dcase2020_task2_baselin": [127, 156], "toyadmos_fc_a": [127, 156], "toyadmos_autoencoder_eembc": 127, "mobilenetv1": [127, 158, 160], "num_filt": 127, "slim": [127, 160], "net": [127, 160], "mobilenet_v1": [127, 160], "person_detect": [127, 160], "mobilenet_v1_eembc": 127, "mobilenetv2": [127, 136, 141, 143, 151, 261, 263], "include_top": [127, 136, 151, 261], "classifier_activ": 127, "last_block_filt": [127, 143, 151, 261, 263], "invert": 127, "residu": 127, "linear": [127, 176], "imagenet": 127, "kind": 127, "mobilenet_v2": 127, "preprocess_input": 127, "resolut": [127, 259, 260, 263], "224": [127, 140, 145, 154], "exactli": 127, "proportion": 127, "4d": 127, "convolut": [127, 142, 144, 145, 147, 148, 150, 152, 179, 180, 182, 183, 203, 204, 240, 256, 258, 259, 260, 261, 263], "avg": 127, "logit": 127, "1280": [127, 263], "1024": 127, "hardar": 127, "backward": [127, 265], "pretrain": 127, "resnet10v1": [127, 157], "1512": [127, 157], "03385": [127, 157], "resnet": [127, 157], "cifar10_resnetv1": [127, 157], "resnet_v1_eembc": 127, "block_depth": 127, "channel_increas": 127, "include_head": [127, 144, 163], "return_model": [127, 144], "input_lay": [127, 144, 266], "neural": [127, 138, 140, 142, 144, 145, 147, 148, 150, 152, 256, 258, 259, 260, 261, 266, 267], "depthwis": [127, 142, 144, 147, 150, 182, 183, 258, 259, 260], "treat": [127, 144, 147, 150, 259, 260], "timeseri": [127, 144, 147, 150, 259, 260], "concret": 127, "explicitli": 127, "2010": 127, "09960": 127, "stridedibb": [127, 260], "ibb": [127, 260], "multitempor": 127, "nonzero": 127, "head": [127, 144], "speech_command": [128, 129, 143, 145, 146, 148, 149, 151, 155, 159, 263], "physic": [128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 255, 263], "depthwise_conv_2d": [128, 140, 142, 143, 144, 147, 150, 151, 159, 160, 181, 242, 246, 250, 259, 260, 263, 266], "59x49x1": [128, 143, 151, 263], "30x25x8": [128, 143, 151, 263], "2x2": [128, 133, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 157, 159, 160, 242, 244, 246, 247, 248, 250, 257, 259, 260, 263, 265], "7x7x8": 128, "conv_2d": [128, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 159, 160, 178, 242, 244, 246, 247, 248, 250, 257, 259, 260, 263, 265, 266], "14x12x24": 128, "3x3x8": [128, 140, 143, 145, 151, 160], "24": [128, 134, 135, 138, 142, 143, 144, 146, 147, 149, 150, 151, 155, 159, 160, 242, 244, 246, 247, 248, 250, 251, 259, 260, 263, 265], "max_pool_2d": [128, 133, 134, 145, 146, 148, 149, 152, 154, 194, 257, 265], "7x6x24": 128, "5x4x20": 128, "1x1": [128, 133, 134, 135, 138, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 157, 159, 160, 242, 244, 246, 247, 248, 250, 257, 259, 260, 263, 265], "3x3x24": [128, 135, 246, 248], "2x2x20": 128, "builtinoptionstyp": [128, 130, 133, 134, 135, 138, 143, 145, 151, 152, 154, 155, 156, 157, 159, 160, 257, 263], "fully_connect": [128, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 186, 242, 244, 246, 247, 248, 250, 257, 259, 260, 263, 266], "671": 128, "184": [128, 263, 267], "357": [128, 259], "b8d28debb3af3495c6d8d2a67eedfa22": 128, "2022": [128, 130, 133, 134, 135, 138, 140, 142, 143, 145, 146, 148, 149, 151, 152, 154, 155, 156, 157, 159, 160, 246, 247, 250, 251, 257, 265], "03t22": 128, "08": [128, 130, 142, 144, 147, 242, 246, 247, 248, 250, 251, 265], "361z": 128, "12052": 128, "165": [128, 129, 142, 144, 160, 263, 265, 266], "49": [128, 142, 143, 144, 146, 147, 150, 151, 242, 244, 257, 259, 260, 263, 265], "3999": [128, 143, 145, 151, 263], "02500000037252903": [128, 134, 142, 143, 144, 146, 147, 149, 150, 151, 155, 242, 259, 263], "05999999865889549": [128, 134, 142, 143, 144, 146, 147, 149, 150, 151, 155, 242, 259, 263], "029999999329447746": [128, 143, 146, 149, 151, 263], "949999988079071": [128, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 259, 263], "512": [128, 130, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 159, 160, 242, 246, 259, 263], "0kb": [128, 135, 143], "1x59x49x1": [128, 143, 151, 263], "1x6": [128, 146, 149], "0k": [128, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 244, 257, 259, 260, 263, 265, 267], "3k": [128, 130, 135, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 155, 156, 157, 160, 244, 247, 257, 259, 260, 261, 263, 265, 267], "4m": [128, 130, 135, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 157, 160, 163, 235, 244, 257, 259, 260, 263, 265], "2k": [128, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 160, 244, 247, 257, 259, 260, 263, 265], "738": [128, 148, 151], "353": 128, "1k": [128, 130, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 244, 247, 257, 259, 260, 263, 265], "37": [128, 133, 142, 143, 144, 147, 150, 151, 159, 176, 192, 242, 259, 260, 263, 265], "78": [128, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 242, 244, 247, 259, 260, 265], "0m": [128, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 244, 247, 257, 259, 260, 263, 265], "2m": [128, 130, 135, 142, 143, 144, 145, 146, 147, 150, 151, 152, 155, 156, 157, 159, 160, 244, 247, 257, 259, 260, 263, 265], "113": [128, 144, 242], "1m": [128, 140, 142, 143, 144, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 160, 244, 247, 257, 258, 259, 260, 263, 265], "55": [128, 138, 140, 142, 143, 144, 147, 150, 151, 154, 155, 156, 242, 257, 259, 260, 263, 265], "82": [128, 134, 143, 144, 147, 150, 151, 154, 160, 242, 244, 257, 259, 260], "606": 128, "294": [128, 144, 160, 266], "433": 128, "284": 128, "7m": [128, 135, 140, 143, 144, 145, 146, 149, 151, 152, 157, 159, 160, 244, 257, 259, 263, 265], "1x7x7x8": 128, "1x30x25x8": [128, 143, 151, 263], "592": 128, "7k": [128, 130, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 159, 160, 244, 247, 257, 259, 260, 263, 265], "290": 128, "233": [128, 263], "5k": [128, 130, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 159, 160, 244, 247, 257, 259, 260, 263, 265], "24x3x3x8": 128, "1x14x12x24": 128, "8k": [128, 130, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 157, 159, 160, 244, 247, 257, 259, 260, 263, 265, 267], "270": [128, 143, 144, 147, 150, 151, 155, 157, 244, 259, 260, 263], "0u": [128, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 244, 247, 257, 259, 260, 263, 265], "1x7x6x24": 128, "174": 128, "86": [128, 143, 144, 147, 150, 151, 157, 242, 257, 259, 260, 263, 265, 266], "4k": [128, 129, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 160, 244, 257, 259, 260, 263, 265], "67": [128, 143, 144, 145, 147, 150, 151, 242, 259, 260, 263], "930": [128, 142, 259], "20x3x3x24": 128, "1x5x4x20": 128, "320": [128, 155, 159, 263], "380": [128, 144, 147, 155, 259], "240": [128, 130, 140, 142, 143, 146, 147, 148, 149, 150, 151, 157, 246, 251, 259, 260, 263], "1x2x2x20": 128, "866": 128, "1x80": [128, 146, 149], "966": 128, "480": [128, 142, 144, 146, 147, 149, 150, 259, 260, 263], "772": 128, "6x80": 128, "softmaxopt": [128, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 159, 160, 242, 244, 246, 247, 248, 250, 259, 260, 265], "batchnorm": [128, 129, 134, 135, 138, 140, 145, 146, 148, 149, 152, 155, 257, 259, 264], "maxpooling2d": [128, 129, 131, 132, 133, 145, 146, 148, 149, 152, 253, 257], "discover": [128, 130, 133, 134, 135, 138, 140, 143, 145, 148, 151, 152, 154, 155, 156, 157, 159, 160, 257], "practic": [128, 155, 212, 264, 267], "45": [128, 142, 143, 144, 145, 146, 147, 149, 150, 151, 154, 242, 244, 256, 259, 260, 263, 265, 266], "4000": [128, 129, 143, 145, 151, 155, 250, 263], "03": [128, 143, 144, 146, 147, 149, 150, 151, 260, 263], "pool_siz": [128, 131, 132, 133, 134, 135, 138, 140, 145, 146, 149, 152, 194, 253, 257], "get_best_metr": [128, 166], "tflite_path": [128, 170, 189, 193, 242, 244, 245, 247, 248], "h5_path": [128, 140, 146, 149, 256], "volume_gain": [128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 250, 259], "verbose_model_output_log": [128, 129, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 242, 250, 259], "get_logg": [128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 175, 227, 253], "train_result": [128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 253], "tflite_eval_result": [128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 253], "profiling_result": [128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 170, 244, 247, 253], "audioment": [129, 142, 144, 146, 147, 149, 150, 258, 260], "tf_dataset": [129, 136, 142, 144, 146, 147, 149, 150, 259], "tf_dataset_util": [129, 136, 142, 144, 146, 147, 149, 150, 255, 258], "image_util": [129, 136, 142, 144, 146, 147, 149, 150], "install_pip_packag": [129, 142, 144, 146, 147, 149, 150, 230], "kerascallback": [129, 131, 132, 136, 146, 149, 253], "terminateonnan": [129, 131, 132, 136, 142, 144, 146, 147, 149, 150, 253, 259], "post_training_integer_qu": [129, 131, 132, 136, 253], "convert_using_integ": [129, 131, 132, 136, 253], "only_quant": [129, 131, 132, 136, 253], "004": [129, 142, 144, 145, 147, 150, 250, 259], "uncom": [129, 136, 142, 144, 146, 147, 149, 150, 258], "data_dump_dir": [129, 136, 142, 144, 146, 147, 149, 150, 258], "dataset_dump": [129, 136, 142, 144, 146, 147, 149, 150, 258], "audio_augmentation_pipelin": [129, 142, 144, 146, 147, 149, 150], "batch_length": [129, 136, 142, 144, 146, 147, 149, 150, 260], "y_shape": [129, 136], "y_batch": [129, 136], "audio_path": [129, 142, 144, 146, 147, 149, 150, 260], "enumer": [129, 131, 132, 133, 135, 136, 138, 140, 142, 143, 144, 146, 147, 148, 149, 150, 152, 242, 244, 247, 253, 260, 265], "new_se": [129, 136], "stateless_split": [129, 136], "num": [129, 136, 263], "np_seed": [129, 136], "adjusted_sampl": 129, "audio_augment": [129, 142, 144, 146, 147, 149, 150, 260], "compos": [129, 142, 144, 146, 147, 149, 150, 260], "90": [129, 130, 136, 142, 143, 144, 145, 146, 147, 149, 150, 151, 159, 242, 243, 259, 260, 263, 265, 266], "pitchshift": [129, 146, 149], "min_semiton": [129, 146, 149], "max_semiton": [129, 146, 149], "timestretch": [129, 146, 149], "min_rat": [129, 146, 149], "max_rat": [129, 146, 149], "min_gain_in_db": [129, 142, 144, 146, 147, 149, 150, 260], "max_gain_in_db": [129, 142, 144, 146, 147, 149, 150, 260], "airabsorpt": 129, "min_temperatur": 129, "max_temperatur": 129, "min_humid": 129, "max_humid": 129, "min_dist": 129, "max_dist": 129, "addbackgroundnois": [129, 142, 144, 146, 147, 149, 150, 260], "min_snr_in_db": [129, 142, 144, 146, 147, 149, 150, 260], "max_snr_in_db": [129, 142, 144, 146, 147, 149, 150, 260], "noise_rm": [129, 142, 144, 146, 147, 149, 150, 260], "lru_cache_s": [129, 142, 144, 146, 147, 149, 150, 260], "expand_dim": [129, 131, 132, 134, 138, 140, 142, 143, 144, 146, 147, 148, 149, 150, 242, 253, 260, 265], "audio_dump_path": [129, 142, 144, 146, 147, 149, 150], "image_dump_path": [129, 142, 144, 146, 147, 149, 150], "organ": [129, 136, 142, 144, 146, 147, 149, 150, 254, 265], "mydataset": [129, 136, 142, 144, 146, 147, 149, 150, 255], "super": [129, 130, 136, 138, 142, 144, 146, 147, 149, 150, 154], "train_dataset": [129, 132, 136, 142, 144, 146, 147, 149, 150], "validation_dataset": [129, 132, 136, 142, 144, 146, 147, 149, 150], "_load_subset": [129, 136], "shut": [129, 136, 142, 144, 146, 147, 149, 150, 255], "features_d": [129, 132, 136, 142, 144, 146, 147, 149, 150, 255, 258], "labels_d": [129, 132, 136, 142, 144, 146, 147, 149, 150], "entropi": [129, 132, 136, 142, 144, 146, 147, 149, 150], "2x": [129, 258], "seed_count": [129, 136, 142, 144, 146, 147, 149, 150], "spread": [129, 136, 142, 144, 146, 147, 149, 150, 255], "per_job_batch_s": [129, 136, 142, 144, 146, 147, 149, 150], "drop_remaind": [129, 136, 142, 144, 146, 147, 149, 150], "65": [129, 136, 140, 142, 143, 144, 146, 147, 149, 150, 151, 152, 242, 257, 258, 259, 260, 263, 265], "unbatch": [129, 132, 136, 142, 144, 146, 147, 149, 150], "fetch": [129, 136, 142, 144, 146, 147, 149, 150], "prefetch": [129, 136, 142, 144, 146, 147, 149, 150], "perfect": [129, 136, 142, 144, 146, 147, 149, 150], "reshuffle_each_iter": [129, 136, 142, 144, 146, 147, 149, 150], "coupl": [129, 136, 142, 144, 146, 147, 149, 150, 255], "ecg5000": 130, "electrocardiogram": 130, "140": [130, 154, 263], "simplifi": [130, 240, 253], "rhythm": 130, "interest": [130, 255, 259], "compars": [130, 140, 161, 230], "logist": [130, 133, 138], "564": 130, "ecg": 130, "66c8e81181a47dfcc2f0ff53a55aef49": 130, "04": [130, 135, 257], "28t19": 130, "38": [130, 142, 143, 144, 147, 150, 151, 156, 242, 259, 260, 263], "662z": 130, "2028": 130, "8kb": [130, 133, 134, 259], "1x140": 130, "9k": [130, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 160, 244, 247, 257, 259, 260, 263, 265], "131": [130, 152, 157, 257, 265], "89": [130, 144, 147, 150, 242, 259, 260, 263, 266], "9m": [130, 140, 142, 146, 148, 149, 150, 152, 156, 157, 160, 244, 247, 257, 259, 263, 265], "5m": [130, 135, 140, 142, 143, 144, 146, 147, 149, 150, 151, 152, 157, 159, 160, 244, 257, 259, 260, 263, 265], "529": 130, "560": [130, 149], "120": [130, 142, 143, 144, 147, 150, 151, 152, 154, 157, 159, 242, 259, 260, 263], "32x140": 130, "1x32": [130, 142, 152, 257], "878": 130, "16x32": 130, "1x16": [130, 140, 154], "280": [130, 143, 144, 147, 149, 150, 151, 156, 260, 266], "254": [130, 257], "8x16": 130, "1x8": [130, 143, 156, 263], "304": [130, 148], "302": [130, 263], "16x8": 130, "974": 130, "32x16": 130, "6k": [130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 244, 247, 257, 259, 260, 263, 265, 267], "140x32": 130, "210": [130, 143, 144, 147, 150, 151, 154, 159, 260, 263], "sklearn": 130, "model_select": 130, "train_test_split": 130, "create_user_dir": [130, 142, 144, 147, 150, 228], "archive_download": [130, 134, 136, 142, 146, 148, 149, 156, 159, 160, 242, 255, 265], "dataset_path": 130, "ecg500": 130, "genfromtxt": 130, "train_data": [130, 154], "test_data": [130, 154], "train_label": 130, "test_label": 130, "test_siz": 130, "random_st": 130, "min_val": [130, 144], "reduce_min": 130, "max_val": [130, 144], "reduce_max": 130, "train_labels_bool": 130, "test_labels_bool": 130, "normal_train_data": 130, "normal_test_data": 130, "anomalous_train_data": 130, "anomalous_test_data": 130, "_normal_train_count": 130, "_normal_test_count": 130, "_abnormal_train_count": 130, "_abnormal_test_count": 130, "sample_count": 130, "whole": 130, "mae": 130, "sigmoid": [130, 133, 138, 140, 176], "mnist": [131, 132, 138, 253], "convnet": [131, 253, 257], "matric": [131, 253], "to_categor": [131, 157, 253], "step_per_epoch": [131, 132, 253], "my_representative_dataset_gener": [131, 132, 138, 140, 253], "input_valu": [131, 253], "from_tensor_slic": [131, 132, 142, 253], "sync": [131, 132, 238, 253], "my_boolean": [131, 132, 253], "my_str": [131, 132, 248, 253], "my_byt": [131, 132, 248, 253], "my_float_list": [131, 132, 253], "fashion": 132, "fashion_mnist": 132, "n_validation_sampl": 132, "n_train_sampl": 132, "x_valid": 132, "y_valid": 132, "_create_dataset_subset": 132, "evaluation_dataset": 132, "one_hot": 132, "my_tf_training_dataset": 132, "my_tf_validation_dataset": 132, "resnetv1": [133, 157, 158], "cifar10": [133, 157, 158, 265], "binary_crossentropi": 133, "bottom": [133, 255, 256, 263], "datagen_dump": [133, 135, 140], "32x32x3": [133, 157, 265], "30x30x32": 133, "3x3x3": [133, 157, 160], "15x15x32": 133, "13x13x32": 133, "3x3x32": [133, 157, 160, 263], "6x6x32": 133, "4x4x64": [133, 263, 265], "2x2x64": 133, "646": 133, "363": 133, "de33dd53e0afb91a365fd2fff0e4c461": 133, "11t17": 133, "986z": 133, "38740": 133, "53": [133, 142, 143, 144, 147, 150, 151, 159, 160, 242, 246, 259, 260, 263, 265], "functool": [133, 157], "cifar10_x_train": 133, "cifar10_y_train": 133, "cifar10_x_test": 133, "cifar10_y_test": 133, "cats_and_dogs_x_train": 133, "cats_and_dogs_y_train": 133, "cats_and_dogs_x_test": 133, "cats_and_dogs_y_test": 133, "n_cat": 133, "n_dog": 133, "elif": [133, 140, 142, 143, 144, 146, 147, 149, 150, 248], "asarrai": [133, 140], "partial": [133, 142, 143, 144, 146, 147, 149, 157, 258, 259], "typer": [133, 135, 138, 140, 152], "datagen_dump_custom_command": [133, 135, 140], "conv1d": [134, 137], "3600x1": 134, "1x3600x1": 134, "52": [134, 142, 143, 144, 147, 150, 151, 155, 160, 242, 244, 259, 260, 263, 265], "1x900x16": 134, "4x1": 134, "1x7x1": 134, "900x16": 134, "900x1x16": 134, "450x1x16": 134, "1x2": [134, 142, 147, 160, 259], "450x16": 134, "1x450x16": 134, "1x450x32": 134, "1x5x16": 134, "450x32": 134, "450x1x32": 134, "225x1x32": 134, "225x32": 134, "1x225x32": 134, "13": [134, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 176, 192, 242, 244, 246, 247, 251, 257, 259, 260, 263, 265, 267], "1x225x64": 134, "1x3x32": 134, "225x64": 134, "225x1x64": 134, "112x1x64": 134, "17": [134, 138, 142, 143, 144, 147, 150, 151, 152, 156, 159, 160, 242, 244, 257, 259, 260, 263, 265], "112x64": 134, "1x112x64": 134, "1x112x128": 134, "1x3x64": 134, "112x128": 134, "112x1x128": 134, "56x1x128": 134, "7168": 134, "416": 134, "034": 134, "nsr": 134, "apb": 134, "afib": 134, "pvc": 134, "ba4d5f7fb808e7566d44a63b4335516": 134, "04t22": 134, "345z": 134, "33920": 134, "05000000074505806": [134, 145, 148, 155], "maxpooling1d": 134, "download_verify_extract": [134, 136, 142, 146, 148, 149, 156, 159, 160, 208, 255, 265], "initial_learning_r": [134, 143, 145, 151, 261], "001": [134, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 159, 160, 257, 259, 260, 263], "decay_per_epoch": [134, 143, 145, 151, 261], "99": [134, 144, 146, 147, 149, 150, 157, 242, 243, 257, 259, 260, 265, 266], "lrate": [134, 143, 145, 151, 159, 160, 261], "ekg_waveform": 134, "8221333c8ecef29843d05b6385a4f47074820480": 134, "file_hash": [134, 136, 142, 146, 148, 149, 156, 159, 160, 208, 265], "show_progress": [134, 136, 142, 146, 148, 149, 156, 159, 160, 208, 242, 255, 265], "remove_root_dir": [134, 136, 142, 146, 148, 149, 156, 159, 160, 207, 208, 255], "post_processing_callback": 134, "weight_decai": [134, 145, 148], "kernel_regular": [134, 145], "48x48x24": [135, 246, 248], "3x3x1": [135, 143, 145, 146, 148, 149, 151, 152, 246, 248, 257, 263], "average_pool_2d": [135, 138, 140, 142, 147, 150, 157, 159, 160, 194, 244, 246, 247, 248, 250, 259, 260], "24x24x24": [135, 246, 248], "11x11x16": [135, 246, 248], "9x9x24": [135, 246, 248], "3x3x16": [135, 145, 152, 157, 160, 246, 248, 257, 263], "4x4x24": [135, 246, 248], "384": [135, 143, 151, 246, 248, 250, 251, 259, 261, 263], "197": [135, 246, 251, 259, 263], "561": [135, 246, 259, 263], "31bdc72ea90bfbcfcbe0fccaed749686": 135, "28t17": 135, "33": [135, 140, 142, 143, 144, 147, 148, 150, 151, 156, 160, 242, 257, 259, 260, 263], "474z": 135, "71408": 135, "1x96x96x1": [135, 244, 247, 248], "1x3": [135, 146, 147, 154, 244, 247, 248, 259], "85": [135, 143, 144, 145, 147, 150, 151, 155, 160, 242, 244, 259, 260, 265], "970": 135, "87": [135, 144, 147, 149, 150, 242, 257, 259, 260, 265], "3m": [135, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 160, 244, 247, 257, 259, 260, 263, 265], "39": [135, 142, 143, 144, 147, 148, 150, 151, 242, 257, 259, 260, 263, 265, 266], "36": [135, 142, 143, 144, 146, 147, 149, 150, 151, 154, 159, 242, 244, 250, 258, 259, 260, 263, 265], "314": 135, "497": [135, 160, 244, 247], "902": [135, 259], "24x3x3x1": [135, 244, 247, 248], "1x48x48x24": [135, 244, 247, 248], "69": [135, 143, 144, 147, 150, 151, 242, 244, 247, 259, 260, 263], "48": [135, 140, 142, 143, 144, 146, 147, 150, 151, 156, 160, 242, 244, 246, 251, 258, 259, 260, 263], "569": 135, "6m": [135, 140, 142, 143, 144, 146, 147, 150, 151, 156, 157, 160, 244, 247, 257, 259, 260, 263, 265], "1x24x24x24": [135, 244, 247, 248], "842": [135, 244, 247], "418": [135, 244, 247], "326": [135, 265], "16x3x3x24": [135, 244, 247, 248], "1x11x11x16": [135, 244, 247, 248], "565": [135, 244, 247], "279": [135, 244, 247], "217": [135, 257], "8m": [135, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 157, 160, 259, 260, 263, 265], "24x3x3x16": [135, 244, 247, 248], "1x9x9x24": [135, 244, 247, 248], "540": [135, 142], "1x4x4x24": [135, 244, 247, 248], "1x384": [135, 143, 151, 244, 247, 248, 263], "3x384": [135, 244, 247, 248], "averagepooling2d": [135, 138, 140, 144], "non_person": [136, 160], "image_augment": 136, "image_std": 136, "enabled_numpy_behavior": 136, "image_path": [136, 163, 248], "smart_res": 136, "stateless_random_bright": 136, "max_delta": 136, "stateless_random_contrast": 136, "stateless_random_hu": 136, "stateless_random_satur": 136, "stateless_random_flip_up_down": 136, "stateless_random_flip_left_right": 136, "random_channel_shift": 136, "channel_axi": 136, "random_shear": 136, "row_axi": 136, "col_axi": 136, "random_zoom": 136, "random_shift": 136, "random_rot": 136, "per_image_standard": 136, "machine_learn": [136, 160], "benchmark": [136, 139, 156, 157, 158, 159, 160, 240, 246, 250, 251], "vw_coco2014_96": [136, 160], "mscoco14": [136, 160], "a5a465082d3f396407f8b5abaf824dd5b28439c4": [136, 160], "siames": [137, 138, 140], "vision": [138, 146, 149], "sister": [138, 140, 256], "supervis": [138, 140, 256], "distanc": [138, 140, 256, 257], "segment": [138, 140, 256], "28x28x1": 138, "24x24x4": 138, "5x5x1": 138, "tanh": [138, 144, 176, 242, 266], "12x12x4": 138, "8x8x16": 138, "5x5x4": 138, "4x4x16": [138, 143, 151], "26": [138, 142, 143, 144, 146, 147, 148, 149, 150, 151, 160, 242, 250, 259, 260, 263, 265], "27": [138, 142, 143, 144, 147, 148, 150, 151, 156, 159, 160, 242, 244, 257, 259, 260, 263], "327": [138, 143, 151], "440": [138, 142, 144, 146], "676": 138, "823": [138, 265], "400f59a4a68872982f23f08a9de3fe92": 138, "04t18": [138, 143], "645z": 138, "11368": 138, "4kb": [138, 146, 246, 259], "load_tflite_or_keras_model": [138, 140], "x_train_val": 138, "y_train_val": 138, "train_val": 138, "30000": [138, 142], "del": 138, "pairs_train": 138, "labels_train": 138, "make_pair": 138, "x_train_1": 138, "x_train_2": 138, "pairs_val": 138, "labels_v": 138, "x_val_1": 138, "x_val_2": 138, "pairs_test": 138, "labels_test": 138, "x_test_1": 138, "20000": [138, 142, 144, 212, 267], "x_test_2": 138, "pairs_of_sampl": 138, "2len": 138, "n_features_dim": 138, "digit_indic": 138, "idx1": 138, "x1": [138, 140], "label1": 138, "idx2": 138, "choic": [138, 142, 143, 144, 146, 147, 149, 255, 259], "x2": 138, "label2": 138, "randint": [138, 143], "contrastiveloss": [138, 140], "margin": [138, 140, 256], "true_valu": [138, 256], "squar": [138, 140, 256], "dissimilar": [138, 256], "y_true": 138, "y_pred": [138, 140, 161, 256, 265], "square_pr": 138, "math": [138, 142, 144, 147, 150], "margin_squar": 138, "reduce_mean": 138, "get_config": [138, 263], "t1": 138, "t2": 138, "euclidean": [138, 140, 256], "sqrt": [138, 140, 264, 266], "sum": [138, 140, 163, 212, 256, 267], "euclidean_dist": [138, 140], "vect": 138, "sum_squar": 138, "reduce_sum": 138, "embedding_network": [138, 140, 256], "input_1": [138, 140, 259], "input_2": [138, 140], "mention": [138, 140], "tower": [138, 140, 256], "tower_1": [138, 140], "tower_2": [138, 140], "technic": 138, "squared_differ": [138, 144, 242], "emul": 138, "merge_lay": [138, 140], "normal_lay": [138, 140], "conc": 138, "dense_1": [138, 257], "output_lay": [138, 140], "my_model_evalu": [138, 140, 256], "eval_dir": [138, 140, 256], "eval_loss": 138, "eval_accuraci": 138, "tflite_interpret": 138, "input_tensor": [138, 178, 181, 184, 186, 194, 198, 199, 202, 205, 265], "get_input_detail": 138, "output_tensor": [138, 177, 178, 181, 184, 186, 194, 198, 199, 202, 205], "get_output_detail": 138, "new_input_shap": 138, "new_output_shap": 138, "resize_tensor_input": 138, "allocate_tensor": 138, "n_correct": 138, "x1_batch": 138, "x2_batch": 138, "set_tensor": 138, "get_tensor": [138, 191], "pred": [138, 140, 265], "rmsprop": 138, "save_and_seri": [138, 140], "registering_the_custom_object": [138, 140], "x_1": 138, "x_2": 138, "retval": [138, 146, 149, 154], "to_show": 138, "num_col": 138, "exce": [138, 163, 257], "matplotlib": [138, 140, 257], "pyplot": [138, 140, 257], "plt": [138, 140, 256, 257], "num_row": 138, "decrement": [138, 223], "ax": [138, 140, 257], "subplot": [138, 257], "figsiz": [138, 140, 257], "imshow": [138, 140, 257], "cmap": [138, 140, 257], "set_axis_off": 138, "set_titl": 138, "5f": 138, "tight_layout": [138, 140], "rect": 138, "w_pad": 138, "visualize_custom_command": 138, "col": 138, "180x180x1": 140, "88x88x8": 140, "5x5x8": 140, "44x44x8": 140, "42x42x16": 140, "reduceropt": [140, 143, 144, 151, 242], "581": [140, 265], "330": [140, 143, 144, 148, 151, 156, 257, 263], "c5b17e1deffd907e823bfadf519b2d5d": 140, "24t22": 140, "34": [140, 142, 143, 144, 145, 147, 150, 151, 152, 242, 246, 247, 248, 259, 260, 263, 265], "383z": 140, "95964": 140, "18000000715255737": 140, "sharpen_filt": [140, 256], "\u00fe\u00fd\u00fd\u00fd\u00fe\u00fd\u00fd\u00fd\u00fd\u00fd\u00fd\u00fdd\u00fd\u00fd\u00fd\u00fd\u00fd\u00fd\u00fd\u00fe\u00fd\u00fd\u00fd\u00fe": 140, "sharpen_filter_width": [140, 256], "sharpen_filter_height": [140, 256], "sharpen_gain": [140, 256], "balance_threshold_max": [140, 256], "balance_threshold_min": [140, 256], "border": [140, 192, 256], "verify_imin": [140, 256], "verify_imax": [140, 256], "verify_full_threshold": [140, 256], "verify_center_threshold": [140, 256], "5kb": [140, 259], "1x180x180x1": 140, "143": 140, "57": [140, 142, 143, 144, 147, 150, 151, 157, 159, 242, 244, 259, 260, 263], "119": [140, 145, 244, 259, 263], "62": [140, 143, 144, 147, 148, 150, 151, 154, 160, 242, 243, 259, 260, 263], "29": [140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 159, 160, 242, 259, 260, 263, 265], "31": [140, 142, 143, 144, 147, 150, 151, 154, 160, 235, 242, 259, 260, 263, 266], "1x5x5x8": 140, "1x88x88x8": 140, "77": [140, 144, 147, 150, 152, 156, 242, 243, 259, 260, 265], "54": [140, 142, 143, 144, 147, 150, 151, 242, 250, 259, 260, 263], "1x44x44x8": 140, "16x3x3x8": [140, 145], "1x42x42x16": 140, "528": [140, 246, 251], "496": 140, "16x16": 140, "tqdm": [140, 212, 267], "img_to_arrai": [140, 248], "load_img": [140, 248], "fingerprint_signature_generator_dataset": [140, 256], "fingerprintsignaturegeneratordataset": 140, "build_model_tow": 140, "globalaveragepooling2d": 140, "nomatch_multipli": 140, "180": [140, 143, 144, 147, 151, 154, 159, 259, 260, 263], "crop_and_convert_from_uint8_to_int8": 140, "th": [140, 257, 259], "h_offset": 140, "w_offset": 140, "nan_to_num": 140, "0xff": 140, "dataset_archive_url": [140, 256], "dataset_hash": 140, "dataset_path_or_url": 140, "g_filter_s": 140, "approxim": [140, 144, 147, 150, 257, 258, 261], "radiu": 140, "g_filter_sigma": 140, "threshold_vs_accuraci": [140, 256], "preprocess_param": [140, 256], "tobyt": [140, 256], "my_keras_model_sav": [140, 256], "unpack_x_y_sample_weight": 140, "batch_x0": 140, "batch_x1": 140, "x0": 140, "saver": 140, "siamese_network_h5_path": [140, 256], "runtimeerror": [140, 142, 144, 146, 147, 149, 150, 231, 256, 260], "generate_predict": [140, 256], "_compare_signatur": 140, "s2": 140, "di": [140, 256], "y_di": [140, 256], "y_label": [140, 256], "desc": [140, 212, 267], "zeropoint": [140, 191, 197, 248], "look": [140, 146, 149, 255, 256, 257, 260], "tfliitemodel": 140, "y_dtype": [140, 191, 265], "progbar": 140, "s0": 140, "batch_s0": 140, "batch_s1": 140, "collect_sampl": 140, "1e12": 140, "match_sampl": 140, "nomatch_sampl": 140, "all_x": 140, "all_i": 140, "generate_plot": [140, 161, 256, 265], "match_di": [140, 256], "nomatch_di": [140, 256], "match_dis_x": [140, 256], "nomatch_dis_x": [140, 256], "arang": [140, 256], "match_acc": [140, 256], "nomatch_acc": [140, 256], "thre": [140, 256], "valid_count": [140, 256], "ylim": [140, 256], "legend": [140, 256], "loc": [140, 256], "xlabel": [140, 256], "ylabel": [140, 256], "grid": [140, 256], "major": [140, 142, 144, 147, 150, 205, 230, 242, 256, 257, 259, 260, 267], "output_path": [140, 191, 217, 256], "savefig": [140, 256], "eclidean_dist": [140, 256], "dump_dir": 140, "x_sampl": 140, "y_sampl": 140, "tflite_y_pr": 140, "h5_y_pr": 140, "nomatch": 140, "3f": 140, "add_subplot": 140, "preprocess_custom_command": 140, "compare_preprocess": 140, "preprocess_samples_en": 140, "unprocessed_dir": 140, "all_sampl": 140, "list_all_sampl": 140, "fn": [140, 142, 144, 146, 147, 149, 150], "unprocessed_img": 140, "processed_img": 140, "preprocess_sampl": 140, "img_valid": 140, "verify_sampl": 140, "basenam": [140, 142, 144, 146, 147, 149, 150, 208, 265], "previous_verify_msg": 140, "dropp": 140, "v2": [141, 255, 257, 259, 263, 265], "pac": [141, 148, 149, 150, 239], "man": [141, 148, 149, 150, 239], "cnn": [141, 144, 145, 146, 147, 148, 149, 150, 152, 257, 261, 265, 266], "lstm": [141, 144, 205, 239], "tenet": [142, 144, 147, 150, 258, 259, 260, 266], "avoid": [142, 255, 260], "mlcommon": [142, 144, 147, 150, 156, 157, 159, 160, 246, 250, 251, 258, 259, 260], "30m": [142, 143, 144, 145, 147, 150, 151, 159, 259, 260], "10m": [142, 144, 146, 147, 148, 149, 150, 259, 260], "118x1x108": 142, "118x1x32": 142, "3x1x108": 142, "118x1x96": 142, "1x1x32": [142, 157, 160, 263], "59x1x96": 142, "9x1x96": 142, "59x1x32": 142, "1x1x96": [142, 143, 151, 263], "30x1x96": 142, "30x1x32": 142, "15x1x96": 142, "15x1x32": 142, "41": [142, 143, 144, 147, 150, 151, 160, 242, 257, 259, 260, 263], "44": [142, 143, 144, 146, 147, 148, 149, 150, 151, 242, 257, 258, 259, 260, 263], "46": [142, 143, 144, 145, 147, 150, 151, 154, 242, 259, 260, 263], "47": [142, 143, 144, 147, 150, 151, 242, 257, 259, 260, 263], "1x15": 142, "562": 142, "247": 142, "keyword_spotting_alexa_v2": 142, "344": 142, "026c2f86bf499c3a1386c348888021e5": 142, "10t00": 142, "325z": 142, "4000000059604645": [142, 144, 147, 150, 242, 259], "800000011920929": [142, 144, 146, 147, 148, 149, 150, 242, 259], "216": [142, 150, 257], "900": [142, 146, 148, 154], "208": [142, 257], "1kb": [142, 250, 259], "1x118x1x108": 142, "207": [142, 160], "825": 142, "32x3x1x108": 142, "1x118x1x32": 142, "759": [142, 244], "362": 142, "307": [142, 263], "96x1x1x32": 142, "1x118x1x96": 142, "118": [142, 144, 157], "91": [142, 144, 146, 147, 149, 156, 242, 256, 259, 265, 266], "88": [142, 144, 147, 150, 242, 259, 260, 265, 266], "1x9x1x96": 142, "1x59x1x96": 142, "181": [142, 150, 159], "32x1x1x96": [142, 263], "1x59x1x32": 142, "126": [142, 143, 151, 156, 263, 265], "690": [142, 144, 147, 150, 259, 260], "32x1x1x32": [142, 160], "379": [142, 144, 266], "154": [142, 148, 150, 259, 260], "840": [142, 144, 147, 157, 266], "1x30x1x96": 142, "92": [142, 144, 147, 150, 156, 242, 256, 257, 259, 263, 266], "74": [142, 143, 144, 147, 148, 150, 151, 160, 242, 259, 260, 263], "960": [142, 259, 263], "1x30x1x32": 142, "390": [142, 143, 144, 145, 147, 150, 151, 152, 259, 260], "193": [142, 160], "810": [142, 143, 144, 147, 150, 151, 260], "990": [142, 263], "420": [142, 144, 146, 147, 149, 150, 160, 260, 263], "1x15x1x96": 142, "510": [142, 143, 151, 259, 263], "1x15x1x32": 142, "570": [142, 259, 263], "309": 142, "1x1x1x32": 142, "595": 142, "130": [142, 261], "123": [142, 144, 147, 150, 156, 160, 260], "2x32": 142, "steppedlearnrateschedul": [142, 144, 147, 150, 259], "trivial": [142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 253, 257, 259, 265, 267], "9999": [142, 144, 147, 150, 259], "teacher": [142, 146, 149], "swap": [142, 144, 147, 150, 259, 260], "time_s": [142, 144, 147, 150, 259, 260], "feature_s": [142, 144, 147, 150, 259, 260], "tenet12": [142, 144, 147, 150, 259, 260], "learning_r": [142, 144, 146, 147, 149, 150, 259, 260], "multiscaletemporalconvolut": [142, 144, 147, 150, 259], "kws_stream": [142, 144, 147, 150, 259], "002": [142, 144, 147, 150, 259], "003": [142, 144, 147, 150, 259], "005": [142, 144, 147, 150, 259], "0005": [142, 144, 147, 150, 151, 159, 160, 259, 261], "5000": [142, 144, 147, 150, 259], "meta": [142, 144, 146, 147, 148, 149, 150, 259], "unknown_class_id": [142, 143, 144, 146, 147, 150, 260], "towardsdatasci": [142, 144, 146, 147, 149, 150], "f1e54688e7df": [142, 144, 146, 147, 149, 150], "unknown_class_multipli": [142, 146, 149], "forget": [142, 144, 147, 150, 205, 258, 266], "audio_pipeline_with_augment": [142, 144, 147, 150, 258, 259, 260], "path_batch": [142, 144, 146, 147, 149, 150, 260], "label_batch": [142, 144, 146, 147, 149, 150, 260], "unknown_samples_batch": 142, "x_shape": [142, 144, 146, 147, 149, 150, 260], "x_batch": [142, 144, 146, 147, 149, 150, 260], "warm": [142, 144, 146, 147, 149, 150, 258, 259, 260], "padding_length_m": [142, 144, 146, 147, 149, 150, 260], "padded_frontend_set": [142, 144, 146, 147, 149, 150, 260, 266], "unknown_sampl": [142, 146], "argmax": [142, 144, 146, 147, 149, 150, 242, 260], "rn": [142, 144, 146, 147, 149, 150, 260], "use_cropped_sample_as_unknown": [142, 143, 144, 146, 147, 149], "using_silence_as_unknown": [142, 144, 146, 147, 149], "choice_index": [142, 144, 146, 147, 149], "err": [142, 144, 147, 150, 231, 244, 260], "padding_length": [142, 144, 146, 147, 149, 150, 260], "padded_sample_length": [142, 144, 146, 147, 149, 150, 260], "padded_sampl": [142, 144, 146, 147, 149, 150, 260], "trimmed_sampl": [142, 144, 146, 147, 149], "top_db": [142, 143, 144, 146, 147, 149], "eventu": [142, 144, 146, 147, 149, 257, 259], "trimmed_sample_length": [142, 144, 146, 147, 149], "cropped_sample_perc": [142, 143, 144, 146, 147, 149], "cropped_sample_length": [142, 143, 144, 146, 147, 149], "min_absolute_rms_in_db": [142, 144, 146, 147, 149, 150, 260], "max_absolute_rms_in_db": [142, 144, 146, 147, 149, 150, 260], "ambient": [142, 144, 146, 147, 149, 150, 259, 260], "snr": [142, 144, 147, 150, 260], "louder": [142, 144, 147, 150, 260], "addgaussiansnr": [142, 144, 146, 147, 149, 150, 260], "cv2": [142, 144, 146, 147, 149, 150], "spectrogram_dump": [142, 144, 146, 147, 149, 150], "transpos": [142, 144, 146, 147, 149, 150, 203, 204, 242, 265], "valid_sample_length": [142, 144, 146, 147, 150], "valid_augmented_sampl": [142, 144, 146, 147, 150], "jpg_data": [142, 144, 146, 147, 149, 150], "applycolormap": [142, 144, 146, 147, 149, 150], "colormap_hot": [142, 144, 146, 147, 149, 150], "imwrit": [142, 144, 146, 147, 149, 150], "all_unknown_sampl": 142, "load_subset": [142, 144, 146, 147, 149, 150], "b6nd8xr7zzwmd6d": 142, "sl_synthetic_alexa": 142, "e657e91d6ea55639ce2e9a4dd8994c112fda2de0": 142, "_unknown": [142, 144, 147, 150], "86wh4defrqj0n9r": 142, "sl_synthetic_alexa_unknown": 142, "2693e5fc72c52f199de2a69ed720644c2c363591": 142, "zwvztg39a340b5q": 142, "sl_synthetic_generic_unknown": 142, "6729b4763a506e427beb0909069219767f3d0d6f": 142, "mlcommons_keyword": [142, 144, 147, 150], "mlcommons_voic": 142, "dst_path": [142, 146, 149, 207, 208, 242], "makedir": [142, 144, 146, 147, 149, 150, 265], "dirnam": [142, 144, 146, 147, 149, 150, 265], "exist_ok": [142, 144, 146, 147, 149, 150, 265], "add_unknown_sampl": [142, 144, 147, 150], "unknown_samples_d": 142, "per_job_batch_multipli": [142, 144, 146, 147, 150], "84": [142, 143, 144, 146, 147, 150, 151, 152, 242, 257, 258, 259, 260, 263], "72": [142, 143, 144, 146, 147, 149, 150, 151, 154, 159, 242, 255, 257, 258, 259, 260], "file_list": [142, 144, 147, 150], "index_path": [142, 144, 147, 150], "class_base_dir": [142, 144, 147, 150], "walk": [142, 144, 147, 150, 228], "followlink": [142, 144, 147, 150, 228], "fname": [142, 144, 147, 150], "abs_path": [142, 144, 147, 150], "getsiz": [142, 144, 147, 150], "rel_path": [142, 144, 147, 150], "relpath": [142, 144, 147, 150], "get_sample_group_id_from_path": [142, 144, 147, 150], "get_mltk_logg": [142, 144, 147, 150], "n_file": [142, 144, 147, 150], "ceil": [142, 144, 147, 150, 192], "other_subset_hash": [142, 144, 147, 150], "othersid": [142, 144, 147, 150], "this_subset_hash": [142, 144, 147, 150], "side": [142, 144, 147, 150, 161, 238, 257], "unknown_dir": 142, "mlcommons_keywords_dir": [142, 144, 147, 150], "mlcommons_voice_dir": 142, "listdir": [142, 144, 146, 147, 150, 242, 248, 257], "isdir": [142, 144, 147, 150, 257], "mp3": [142, 144, 147, 150, 258], "c53b335a_nohash_1": [142, 144, 147, 150], "c53b335a": [142, 144, 147, 150], "tok": [142, 144, 147, 150], "common_voice_en_20127845": [142, 144, 147, 150], "20127845": [142, 144, 147, 150], "common_voice_": [142, 144, 147, 150], "azure_af": [142, 144, 147, 150], "za": [142, 144, 147, 150], "adrineur": [142, 144, 147, 150], "aww": [142, 144, 147, 150, 212, 267], "medium": [142, 144, 147, 150, 212, 242, 265, 267], "588b6ace": [142, 144, 147, 150], "gcp_": [142, 144, 147, 150], "azure_": [142, 144, 147, 150], "aws_": [142, 144, 147, 150], "baud_rat": [142, 258], "460800": [142, 258], "industri": [143, 261, 263], "20m": [143, 145, 146, 148, 149, 151, 159], "relu6": [143, 151, 176, 263], "1x1x8": [143, 151, 160, 263], "30x25x48": [143, 151, 263], "31x27x48": [143, 151, 263], "15x13x48": [143, 151, 263], "3x3x48": [143, 151, 263], "15x13x8": [143, 151], "1x1x48": [143, 151, 263], "17x15x48": [143, 151], "8x7x48": [143, 151], "8x7x8": [143, 151], "9x9x48": [143, 151], "4x4x48": [143, 151, 263], "4x4x96": [143, 151, 263], "1x1x16": [143, 151, 157, 160, 263], "3x3x96": [143, 151, 263], "5x5x96": [143, 151], "2x2x96": [143, 151], "2x2x24": [143, 151], "2x2x144": [143, 151], "1x1x24": [143, 151, 263], "144": [143, 145, 151, 156, 263], "3x3x144": [143, 151, 263], "58": [143, 144, 147, 150, 151, 242, 259, 260, 263], "1x1x144": [143, 151, 263], "59": [143, 144, 147, 150, 151, 156, 242, 259, 260, 263], "61": [143, 144, 147, 150, 151, 242, 259, 260, 263, 265], "63": [143, 144, 147, 150, 151, 242, 259, 260, 263], "66": [143, 144, 146, 147, 149, 150, 151, 242, 244, 257, 259, 260, 263], "2x2x48": [143, 151], "2x2x384": [143, 151], "68": [143, 144, 146, 147, 149, 150, 151, 242, 259, 260, 263, 266], "737": [143, 259], "977": 143, "e7018a67a673713fe4935f20ca88b492": 143, "420z": 143, "105016": 143, "259": [143, 259], "258": [143, 144, 265, 266], "71": [143, 144, 147, 150, 151, 242, 244, 246, 247, 259, 260, 263, 265], "8x3x3x1": [143, 145, 151, 263], "189": [143, 151, 259, 263], "214": [143, 147, 151, 259], "1x3x3x8": [143, 151, 160, 263], "102": [143, 144, 147, 151, 242, 259, 263], "780": [143, 144, 151], "8x1x1x8": [143, 151, 263], "300": [143, 144, 147, 150, 151, 152, 156, 160, 257, 259, 263, 265, 267], "684": [143, 151, 155, 250, 263], "288": [143, 151, 259, 263, 265], "48x1x1x8": [143, 151, 263], "1x30x25x48": [143, 151, 263], "241": [143, 144, 147, 150, 151, 152, 260, 263, 266], "967": [143, 151, 263], "4x2": [143, 151, 263, 265], "1x31x27x48": [143, 151, 263], "padopt": [143, 151, 265], "196": [143, 151, 263], "157": [143, 145, 151], "282": [143, 151], "1x3x3x48": [143, 151, 263], "1x15x13x48": [143, 151, 263], "151": [143, 151, 243, 263], "870": [143, 144, 147, 150, 151, 152, 257, 260], "8x1x1x48": [143, 151, 263], "1x15x13x8": [143, 151, 263], "177": [143, 151, 259, 263], "73": [143, 144, 147, 150, 151, 242, 259, 260, 263], "277": [143, 151, 256, 263], "1x17x15x48": [143, 151, 263], "1x8x7x48": [143, 151, 263], "1x8x7x8": [143, 151, 263], "81": [143, 144, 147, 150, 151, 156, 242, 244, 259, 260, 263, 265], "448": [143, 148, 151, 263], "1x9x9x48": [143, 151, 263], "1x4x4x48": [143, 151, 263], "16x1x1x48": [143, 151, 263], "1x4x4x16": [143, 151, 263], "96x1x1x16": [143, 151, 263], "1x4x4x96": [143, 151, 263], "1x3x3x96": [143, 151, 263], "16x1x1x96": [143, 151, 263], "908": [143, 148, 151], "1x5x5x96": [143, 151, 263], "1x2x2x96": [143, 151, 263], "24x1x1x96": [143, 151, 263], "1x2x2x24": [143, 151, 263], "144x1x1x24": [143, 151, 263], "1x2x2x144": [143, 151, 263], "1x3x3x144": [143, 151, 263], "24x1x1x144": [143, 151, 263], "348": [143, 151], "48x1x1x144": [143, 151, 263], "1x2x2x48": [143, 151, 263], "152": [143, 151, 263], "384x1x1x48": [143, 151, 263], "1x2x2x384": [143, 151, 263], "246": [143, 151], "8x384": [143, 263], "python_api": [143, 144, 145, 147, 148, 151], "audio_dataset_mixin": [143, 145, 148, 151], "pseudo": [143, 145, 151], "16k": [143, 145, 148, 151, 263], "get_batches_sampl": [143, 148], "l241": [143, 148], "keyword_spotting_overview": 143, "non_unknown_class_indic": 143, "class_index": [143, 242], "sr": [143, 146, 148, 149], "transform_param": [143, 148], "x_len": 143, "bg_noise_offset": 143, "bg_noise_factor": 143, "loudness_factor": 143, "sample_index": 143, "sample_data": 143, "sample_trim": 143, "ten_digit": [144, 242], "ml_commons_keyword": [144, 147, 150, 259, 260], "background_nois": [144, 147, 150, 259, 260], "esc50": [144, 147, 150, 259, 260], "came": [144, 147, 150, 260], "mit_ir_survei": [144, 147, 259], "impuls": [144, 147], "respons": [144, 146, 147, 149, 222, 239, 255, 258], "103597": 144, "9387": 144, "9250": 144, "9245": 144, "9116": 144, "9135": 144, "9388": 144, "9229": 144, "9342": 144, "9166": 144, "9289": 144, "11050": [144, 147], "18231": 144, "1657": 144, "1632": 144, "1627": 144, "1603": 144, "1585": 144, "1656": 144, "1623": 144, "1648": 144, "1613": 144, "1637": 144, "1950": [144, 147, 259], "00": [144, 246, 251, 255, 257, 259, 267], "upper_band_limit": [144, 147, 150], "lower_band_limit": [144, 147, 150], "spectrogram_float32": [144, 266], "inher": [144, 266], "layernorm": 144, "98x1x40": [144, 147, 150, 242, 259], "3x1x40": [144, 242], "98x1x120": [144, 147, 150, 242, 259], "1x1x40": [144, 147, 150, 242, 259], "49x1x120": [144, 147, 150, 242, 259], "9x1x120": [144, 147, 150, 242, 259], "49x1x40": [144, 147, 150, 242, 259], "1x1x120": [144, 147, 150, 242, 259], "25x1x120": [144, 147, 150, 242, 259], "25x1x40": [144, 147, 150, 242, 259], "13x1x120": [144, 147, 150, 242, 259], "13x1x40": [144, 147, 150, 242, 259], "7x1x120": [144, 147, 150, 242, 259], "7x1x40": [144, 147, 150, 242, 259], "7x40x1": [144, 242], "40x1x7": [144, 242], "76": [144, 145, 147, 150, 242, 259, 260, 263, 265], "rsqrt": [144, 242], "mul": [144, 242], "79": [144, 147, 150, 242, 259, 260, 265], "subopt": [144, 242], "7x40": [144, 150, 242, 260], "83": [144, 146, 147, 149, 150, 242, 243, 259, 260, 265, 266], "unidirectional_sequence_lstm": [144, 205, 242, 266], "93": [144, 147, 155, 242, 243, 259, 265, 266], "94": [144, 147, 149, 150, 154, 156, 159, 242, 259, 260, 265, 266], "97": [144, 147, 242, 243, 256, 257, 259, 265, 266], "98": [144, 145, 147, 152, 242, 256, 257, 259, 263, 265, 266], "101": [144, 147, 242, 259], "strided_slic": [144, 156, 242], "stridedsliceopt": [144, 156, 242], "103": [144, 147, 242, 259], "11x1x1": [144, 242], "106": [144, 147, 242, 259], "107": [144, 147, 152, 242, 257], "109": [144, 242, 259], "110": [144, 160, 242], "111": [144, 242, 265], "112": [144, 148, 155, 242, 263, 267], "114": [144, 147, 242], "115": [144, 155, 157, 242, 260], "116": [144, 147, 159, 242, 259, 266], "117": [144, 242, 259], "074": 144, "306": 144, "4b22adb625a3300fdcf06fa61105782f": [144, 242], "2023": [144, 147, 150, 242, 259, 267], "03t01": [144, 242], "378z": [144, 242], "450": [144, 146, 149, 157, 242, 263], "242": [144, 147, 149, 242, 259], "700": [144, 147, 148, 150, 160, 242, 259], "6kb": [144, 150, 155, 259], "1x98x1x40": [144, 147, 150, 260], "1x11": [144, 151, 242], "142": [144, 257], "944": 144, "470": [144, 147, 150, 260], "40x3x1x40": 144, "976": [144, 147, 150, 260], "120x1x1x40": [144, 147, 150, 260], "1x98x1x120": [144, 147, 150, 260], "1x9x1x120": [144, 147, 150, 260], "1x49x1x120": [144, 147, 150, 260], "472": [144, 147, 150, 247, 260], "235": [144, 147, 149, 150, 260], "186": [144, 147], "40x1x1x120": [144, 147, 150, 260], "1x49x1x40": [144, 147, 150, 260], "162": [144, 147, 150, 260], "40x1x1x40": [144, 147, 150, 260], "488": [144, 147, 150, 260], "195": [144, 147, 150, 259, 260], "1x25x1x120": [144, 147, 150, 260], "1x25x1x40": [144, 147, 150, 260], "249": [144, 147, 150, 160, 260, 266], "1x13x1x120": [144, 147, 150, 260], "660": [144, 147, 150, 260], "1x13x1x40": [144, 147, 150, 260], "520": [144, 147, 150, 260], "129": [144, 145, 147, 150, 260], "720": [144, 145, 146, 147, 148, 149, 150, 260], "1x7x1x120": [144, 147, 150, 260], "1x7x1x40": [144, 147, 150, 260], "992": [144, 147, 150, 155, 260], "1x7x40x1": 144, "1x40x1x7": 144, "1x7x40": 144, "40x40": 144, "1x40": [144, 147, 150, 260], "891": [144, 243], "749": 144, "11x40": 144, "464": [144, 259, 263], "1x11x1x1": 144, "460": [144, 146, 149], "overal": [144, 161, 212, 243, 256, 257, 259, 265, 266, 267], "723": [144, 266], "404": [144, 155, 266], "746": [144, 257, 266], "701": [144, 266], "508": [144, 266], "198": [144, 149, 263, 266], "915": [144, 266], "873": [144, 266], "882": [144, 266], "846": [144, 266], "roc": [144, 243, 254, 256, 257, 259, 265, 266], "auc": [144, 155, 156, 157, 159, 160, 161, 243, 256, 257, 259, 265, 266], "715": [144, 266], "342": [144, 266], "329": [144, 266], "289": [144, 264, 266], "260": [144, 145, 151, 152, 257, 266], "227": [144, 148, 266], "080": [144, 266], "756": [144, 266], "636": [144, 243, 266], "478": [144, 257, 266], "023": [144, 266], "764": [144, 266], "215": [144, 148, 266], "135": [144, 154, 266], "043": [144, 259, 266], "848": [144, 265, 266], "265": [144, 148, 266], "836": [144, 266], "744": [144, 266], "535": [144, 156, 266], "892": [144, 266], "784": [144, 148, 259, 266], "709": [144, 266], "615": [144, 263, 266], "611": [144, 266], "457": [144, 266], "937": [144, 266], "545": [144, 266], "audio_dataset": [144, 147, 150, 242], "7000": 144, "throughout": [144, 257, 265], "n_frequency_bin": [144, 266], "cnn_time_step": [144, 266], "critic": [144, 256, 258, 259, 266, 267], "normalized_lstm_input": 144, "cnn_featur": [144, 266], "recurr": [144, 205, 264, 266], "pattern": [144, 156, 207, 228, 232, 259, 266], "return_sequ": [144, 266], "recurrent_dropout": 144, "normalized_lstm_output": 144, "lstm_output": 144, "meaning": [144, 261, 266], "last_row_lstm_featur": [144, 266], "_before_save_train_model": [144, 266], "old_weight": [144, 266], "get_weight": [144, 266], "new_keras_model": [144, 266], "set_weight": [144, 266], "_evaluate_startup": [144, 266], "ir_dataset": [144, 147], "_ir_responses_": [144, 147], "rstate": [144, 147], "randomst": [144, 146, 147, 150], "current_sample_is_in_unknown_class": [144, 147], "hi": [144, 147], "700m": [144, 146, 147, 148], "val_rang": 144, "esc": [144, 147, 150], "esc50_dir": [144, 147, 150], "all_keyword": [144, 147, 150], "11k": [144, 147, 150], "rng": [144, 146, 147, 150], "extend": [144, 147, 150, 254], "11000": [144, 147, 150], "detection_threshold_list": [144, 147, 148, 149, 150, 259], "8khz": [145, 148], "49x32x1": 145, "25x16x8": 145, "13x8x16": 145, "7x4x32": 145, "1x4x32": 145, "1x7": [145, 148, 149, 150, 260], "278": [145, 146], "563": 145, "084": 145, "782baa4c65acec0db85a71d2be78eb29": 145, "04t19": [145, 151, 154, 155, 156, 157, 159, 160], "747z": 145, "6712": 145, "160": [145, 147, 150, 257, 260, 263], "004000000189989805": [145, 148], "3kb": [145, 147, 156, 157, 246, 259], "1x49x32x1": 145, "1x4": [145, 150, 152, 154, 155, 257, 259, 260], "574": 145, "273": 145, "1x25x16x8": 145, "244": 145, "1x13x8x16": 145, "32x3x3x16": [145, 152, 157, 257], "1x7x4x32": 145, "896": [145, 263], "1x1x4x32": 145, "1x128": [145, 156], "809": 145, "4x128": 145, "msla": 145, "knowledg": [146, 149, 151, 240, 261], "distal": [146, 149], "behind": [146, 149, 238, 257, 259, 261], "student": [146, 149], "guidanc": [146, 149], "train_teach": [146, 149], "keyword_spotting_on_off": [146, 259, 263], "distil": [146, 149], "90m": [146, 149], "ah": [146, 212, 267], "onning": 146, "hum": [146, 149], "1000m": [146, 149, 259, 260], "99x68x1": [146, 149], "99x68x10": [146, 149], "49x34x10": [146, 149], "49x34x20": [146, 149], "3x3x10": [146, 149], "24x17x20": [146, 149], "24x17x40": [146, 149], "3x3x20": [146, 149], "12x8x40": [146, 149], "3x3x40": [146, 149], "6x4x40": [146, 149], "6x4x20": [146, 149], "1x4x20": [146, 149], "098": [146, 149], "436": [146, 149, 265], "272": 146, "d701916160b1c6e41f145a166428b7c3": 146, "04t23": 146, "214z": 146, "178": 146, "1x99x68x1": [146, 149], "199": [146, 263], "605": [146, 149], "959": 146, "10x3x3x1": [146, 149], "1x99x68x10": [146, 149], "1x49x34x10": [146, 149], "20x3x3x10": [146, 149], "1x49x34x20": [146, 149], "1x24x17x20": [146, 149], "40x3x3x20": [146, 149], "1x24x17x40": [146, 149], "1x12x8x40": [146, 149], "912": 146, "40x3x3x40": [146, 149], "1x6x4x40": [146, 149], "347": [146, 149], "172": [146, 149, 263, 265], "20x3x3x40": [146, 149], "1x6x4x20": [146, 149], "1x1x4x20": [146, 149], "860": [146, 149], "483": 146, "396": [146, 159], "3x80": 146, "shutil": [146, 149, 244, 246, 247, 248, 250, 251], "knowledgedistillationmodel": [146, 149], "my_teacher_model_build": [146, 149], "knowledge_distil": [146, 149], "output_shap": [146, 149, 154, 163], "my_teacher_model_sav": [146, 149], "teacher_h5_path": [146, 149], "get_teacher_h5_path": [146, 149], "check_exist": [146, 149], "my_student_model_build": [146, 149], "try_arch": [146, 149], "teacher_model": [146, 149], "load_model": [146, 149], "student_loss_fn": [146, 149], "categoricalcrossentropi": [146, 149], "distillation_loss_fn": [146, 149], "kldiverg": [146, 149], "temperatur": [146, 149], "my_student_model_sav": [146, 149], "student_model": [146, 149], "val_student_loss": [146, 149], "noisereduc": [146, 149], "pyloudnorm": [146, 149], "catch_warn": [146, 149], "simplefilt": [146, 149], "peak": [146, 149], "reduce_nois": [146, 149], "stationari": [146, 149], "dataset_background_dir": [146, 149], "synthetic_on_off_v1": 146, "0e691aaa4e61c82720b397fb82f5702d8355df11": 146, "_on_off_unknown": 146, "additional_unknown_dataset_dir": 146, "synthetic_on_off_unknown_v1": 146, "075c9e513c7830dfd531cef0306d100f4a3fb94b": 146, "_add_additional_unknown_sampl": 146, "ext": [146, 149], "nexport": [146, 149], "prepare_teacher_or_student_model": [146, 149], "enviro": [146, 149], "on_off": [147, 259], "29155": 147, "9071": 147, "9034": 147, "5135": [147, 259], "1595": [147, 259], "1590": [147, 259], "07": [147, 151, 259, 266, 267], "98x1x104": [147, 150, 259], "3x1x104": [147, 150, 259], "4x1x120": [147, 150, 259], "4x1x40": [147, 150, 259], "2x1x120": [147, 259], "2x1x40": [147, 259], "312": [147, 259, 263], "ec453c2e09670f7971bb728f4de7d122": [147, 259], "19t21": [147, 259], "660z": [147, 259], "533": [147, 259], "1x98x1x104": [147, 150, 259, 260], "531": 147, "928": [147, 150, 160, 260], "40x3x1x104": [147, 150, 260], "1x4x1x120": [147, 150, 260], "1x4x1x40": [147, 150, 260], "572": [147, 150, 260], "1x2x1x120": 147, "1x2x1x40": 147, "292": 147, "1x1x1x40": [147, 150, 260], "640": [147, 150, 156, 157, 260, 265], "3x40": 147, "direction_command": [147, 150, 260], "game": [148, 149, 150, 239, 260], "69x70x1": 148, "69x70x7": 148, "34x35x7": 148, "34x35x14": 148, "3x3x7": 148, "17x17x14": 148, "17x17x28": 148, "3x3x14": 148, "8x8x28": 148, "3x3x28": 148, "4x4x28": 148, "2x2x28": 148, "939": 148, "997": [148, 159], "ba1f45639f61f277834e4c8ee71ae040": 148, "24t15": 148, "413z": 148, "45475": 148, "205": [148, 263], "230": 148, "9kb": [148, 149, 246], "1x69x70x1": 148, "710": 148, "486": 148, "7x3x3x1": 148, "1x69x70x7": 148, "1x34x35x7": 148, "14x3x3x7": 148, "1x34x35x14": 148, "1x17x17x14": 148, "28x3x3x14": 148, "1x17x17x28": 148, "1x8x8x28": 148, "451": [148, 160], "293": [148, 265], "28x3x3x28": 148, "1x4x4x28": 148, "532": 148, "1x2x2x28": 148, "1x112": 148, "7x112": 148, "mltk_dir": 148, "pacman_background_noise_dir": [148, 149], "recorded_pacman_game_plai": [148, 149, 150], "749f552bc2aba11e618969d8b0f6e5bdd62ac7a2": [148, 149, 150], "pacman_background_noise_path": 148, "pacman_background_nois": 148, "add_game_background_nois": 148, "40m": 149, "c536b6f6dd07177d0ea769829f66623d": 149, "21t16": 149, "603z": 149, "239": [149, 263], "252": [149, 150, 259, 263], "965": 149, "916": [149, 156], "899": 149, "7x80": 149, "50m": 149, "mous": 149, "050": [149, 152, 257], "cropped_sample_offset": 149, "pacman_background_noise_dst_path": 149, "pacman_background_noise_src_path": 149, "brd2601_background_noise_dst_path": 149, "background_noise_dir": 149, "background_noise_src_path": 149, "soundjai": 149, "62865": 150, "8382": 150, "12573": 150, "6435": 150, "858": 150, "1287": 150, "018": 150, "804": 150, "fa5f9b8ea1c47d942d537ef3702ffa76": 150, "01t20": 150, "940z": 150, "234": 150, "446": [150, 260, 263], "953": 150, "567": [150, 260, 265], "477": [150, 260], "weightsandbiasesmixin": [150, 254], "download_and_extract": 150, "learnt": [151, 261], "979": 151, "536b7f0ff2de1d1db7c6b35d1e8cb721": 151, "433z": 151, "105032": 151, "2kb": [151, 152, 154, 160, 257, 259, 263], "11x384": 151, "cna": 151, "base_mltk_model": [151, 261], "base_model_h5_path": [151, 261], "load_weight": [151, 261], "by_nam": [151, 261], "skip_mismatch": [151, 261], "mismatch": [151, 261], "transfer_learn": [151, 261], "freez": [151, 261], "gave": [151, 261], "84x84x1": [152, 257], "82x82x16": [152, 257], "41x41x16": [152, 257], "39x39x16": [152, 257], "19x19x16": [152, 257], "17x17x32": [152, 257], "8x8x32": [152, 257], "2048": [152, 155, 257, 265], "9b557f35e32df7614723ddaafd77d75f": 152, "02t23": 152, "997z": 152, "137176": [152, 257], "suppression_count": [152, 257], "1x84x84x1": [152, 257], "137": [152, 257, 265], "354": 152, "159": [152, 244, 257, 265], "968": [152, 257], "16x3x3x1": [152, 257, 263], "1x82x82x16": [152, 257], "1x41x41x16": [152, 257], "16x3x3x16": [152, 157, 257], "1x39x39x16": [152, 257], "1x19x19x16": [152, 257], "1x17x17x32": [152, 257], "1x8x8x32": [152, 257], "1x2048": [152, 257], "32x2048": [152, 257], "231": [152, 257], "4x32": [152, 257], "bring": [152, 257], "rock_paper_scissors_v2": [152, 248, 257], "blog": [152, 257], "filter_count": [152, 257], "dump_custom_command": 152, "wand": [153, 154], "magic_wand": [154, 240], "128x3x1": 154, "128x3x8": 154, "4x3x1": 154, "42x1x8": 154, "3x3": [154, 160, 265], "42x1x16": 154, "4x1x8": 154, "14x1x16": 154, "016": 154, "133": 154, "268": 154, "wing": 154, "ring": 154, "slope": 154, "c044953d468755c572f05f4f2750d1ef": 154, "646z": 154, "5444": 154, "1x128x3x1": 154, "8x4x3x1": 154, "1x128x3x8": 154, "1x42x1x8": 154, "16x4x1x8": 154, "1x42x1x16": 154, "672": [154, 265], "1x14x1x16": 154, "1x224": 154, "16x224": 154, "132": [154, 257, 263], "4x16": 154, "acceleromet": [154, 256], "tflm_magic_wand": 154, "tflm_magic_wand_dataset": 154, "_data_load": 154, "valid_data": 154, "reshape_funct": 154, "reshaped_data": 154, "_unbatched_validation_data": 154, "sparse_categorical_crossentropi": 154, "_generate_representative_dataset": 154, "pylint": 154, "protect": 154, "3gb": 155, "993": 155, "somewhat": 155, "49x40x1": 155, "25x20x8": 155, "10x8x1": 155, "336": [155, 250, 263], "680": 155, "012": 155, "36dd6db8f633c9fca61b418402ea698f": 155, "143z": 155, "9028": 155, "1x49x40x1": 155, "164": [155, 156], "652": 155, "8x10x8x1": 155, "1x25x20x8": 155, "1x4000": 155, "4x4000": 155, "weights_shap": 155, "mlperf": [156, 158], "tini": [156, 157, 158, 159, 160, 246, 250, 251], "zenodo": 156, "3351307": 156, "1908": 156, "03299": 156, "toi": 156, "car": [156, 261], "toyadmo": 156, "64m": 156, "32m": 156, "24khz": 156, "923": 156, "5x128x1": 156, "264": [156, 265], "176": [156, 265], "anonomli": 156, "5cf2dc0ea093044c7a31a226d44b8084": 156, "676z": 156, "9396": 156, "1x5x128x1": 156, "406": 156, "147": [156, 259, 263, 265], "1x640": 156, "128x640": 156, "128x128": 156, "8x128": 156, "128x8": 156, "640x128": 156, "369": [156, 259, 267], "shapeopt": 156, "packopt": 156, "rnd": 156, "mean_squared_error": [156, 264, 266], "download_dataset": [156, 159], "features_toy_car_al": 156, "8fc5779a38694eb17e75ad21ef457bd39e6ef937": 156, "reshape_input_callback": 156, "x_length": 156, "subsect": 156, "left_offset": 156, "right_offset": 156, "randrang": 156, "middl": [156, 258, 260], "subsection_data": 156, "cifar10_main": 157, "989": 157, "988": [157, 265], "32x32x16": 157, "16x16x32": 157, "8x8x64": [157, 265], "3x3x64": [157, 159, 160, 246, 250], "1x1x64": [157, 159, 160, 246, 250, 263, 265], "8x8": 157, "502": 157, "122": [157, 248, 257, 259], "d170adc21388920caa3f64ba22cd5b5d": 157, "062z": 157, "53972": 157, "1x32x32x3": [157, 265], "1x10": [157, 265], "225": [157, 263], "211": 157, "933": 157, "442": 157, "583": [157, 160], "16x3x3x3": 157, "1x32x32x16": 157, "883": 157, "1x16x16x32": 157, "32x3x3x32": 157, "32x1x1x16": [157, 160], "830": 157, "64x3x3x32": 157, "1x8x8x64": [157, 265], "64x3x3x64": 157, "266": [157, 243], "64x1x1x32": [157, 160], "1x1x1x64": [157, 159, 265], "769": 157, "1x64": [157, 159], "10x64": 157, "wake": [158, 160], "wakeword": [158, 160], "coco14": [158, 160], "4khz": 159, "998": 159, "50x10x1": 159, "25x5x64": [159, 246, 250], "10x4x1": [159, 246, 250], "5x25": [159, 246, 250], "657": [159, 246, 250], "dsconv_arm": 159, "eb6e9d70cacfd495cdf36577882b83fc": 159, "066z": 159, "21424": 159, "7kb": 159, "1x50x10x1": 159, "1x12": 159, "831": 159, "664": [159, 257], "382": 159, "64x10x4x1": 159, "1x25x5x64": 159, "1x3x3x64": [159, 160], "412": 159, "64x1x1x64": [159, 160], "779": 159, "768": [159, 263], "12x64": 159, "speech_dataset_spec": 159, "20e36646073492fdb4fb8285ec49042e70f9e60": 159, "00025": [159, 160], "cocodataset": 160, "coco": 160, "cocoapi": 160, "mimim": 160, "96x96": [160, 257], "antialia": 160, "buildpersondetectiondatabas": 160, "mobilenet_v1_0": 160, "25_96": 160, "931": 160, "vww_model": 160, "96x96x3": 160, "48x48x8": 160, "48x48x16": 160, "24x24x16": 160, "24x24x32": 160, "12x12x32": 160, "12x12x64": [160, 265], "6x6x64": 160, "6x6x128": 160, "3x3x128": 160, "1x1x128": 160, "3x3x256": 160, "1x1x256": 160, "490": 160, "324": [160, 266], "0fdc40de5812cfa530f6ec120c55171a": 160, "736z": 160, "156424": 160, "334": 160, "1x96x96x3": 160, "156": [160, 263], "941": 160, "695": 160, "8x3x3x3": 160, "1x48x48x8": 160, "387": [160, 257], "341": [160, 257], "16x1x1x8": 160, "1x48x48x16": 160, "297": 160, "257": 160, "1x3x3x16": [160, 263], "1x24x24x16": 160, "645": 160, "281": 160, "1x24x24x32": 160, "299": [160, 263], "806": 160, "1x3x3x32": 160, "589": 160, "507": [160, 265], "202": 160, "1x12x12x32": 160, "617": 160, "251": 160, "1x12x12x64": [160, 265], "139": 160, "474": 160, "1x6x6x64": 160, "603": 160, "236": 160, "128x1x1x64": 160, "1x6x6x128": 160, "1x3x3x128": 160, "458": 160, "128x1x1x128": 160, "596": 160, "229": [160, 267], "256x1x1x128": 160, "1x3x3x256": 160, "256x1x1x256": 160, "1x1x1x256": 160, "1x256": 160, "797": 160, "2x256": 160, "938": 160, "download_data": 160, "generate_summari": [161, 265], "include_al": 161, "evalut": 161, "progress": [161, 208, 212, 267], "bar": [161, 208, 212, 230, 267], "class_accuraci": 161, "false_positive_r": 161, "roc_auc": 161, "roc_threshold": 161, "roc_auc_avg": 161, "confusion_matrix": 161, "confus": 161, "matrix": [161, 205, 265], "overall_precis": 161, "overall_recal": 161, "overall_pr_accuraci": 161, "overall_tpr": 161, "overall_fpr": 161, "overall_roc_auc": 161, "overall_threshold": 161, "calcuat": 161, "class_stat": 161, "all_scor": 161, "use_devic": [163, 244], "runtime_buffer_s": [163, 172, 175], "return_estim": [163, 175, 244], "discov": 163, "cpu_clock_r": 163, "runtime_memory_byt": 163, "is_simul": 163, "model_detail": 163, "tflite_micro_model_detail": 163, "tflitemicromodeldetail": [163, 172, 175], "sram": 163, "dsp": 163, "flatbuffer_s": [163, 191], "n_layer": 163, "input_shape_str": [163, 265], "input_dtype_str": 163, "output_shape_str": 163, "output_dtype_str": 163, "accelerator_cycl": [163, 174], "cpu_cycl": [163, 174], "cpu_util": 163, "n_unsupported_lay": 163, "unsupported_lay": 163, "stat_tot": 163, "get_summari": [163, 211, 212, 267], "include_label": 163, "format_unit": [163, 235], "exclude_nul": 163, "full_summari": 163, "generate_report": 163, "to_dict": 163, "0234": 163, "to_json": 163, "indent": 163, "summary_label": 163, "layers_label": 163, "member": 163, "input_dtyp": 163, "output_dtyp": 163, "tflite_s": 163, "joul": [163, 174], "j_per_op": 163, "j_per_mac": 163, "op_per_": 163, "mac_per_": 163, "inf_per_": 163, "err_msg": 163, "to_csv": 163, "dialect": 163, "excel": 163, "to_str": [163, 176, 192], "tflite_lay": 163, "error_msg": 163, "tflitelay": [163, 175, 177, 178, 181, 184, 186, 191, 194, 198, 199, 202, 205], "is_acceler": 163, "is_unsupport": 163, "opcodestr": [163, 177, 178, 181, 184, 186, 190, 194, 198, 199, 202, 205], "opcode_str": [163, 177, 178, 181, 184, 186, 190, 194, 198, 199, 202, 205], "builtinoper": [163, 177, 178, 181, 184, 186, 190, 194, 198, 199, 202, 205], "options_str": 163, "excluded_column": 163, "resume_epoch": 166, "create_arch": 166, "__note": 166, "__": 166, "model_archive_path": 166, "asdict": 166, "timeout": [168, 211, 222, 223, 225, 231, 232, 238], "termina": 168, "accelerator_wrapp": 169, "variant": [169, 267], "active_vari": 169, "api_vers": [169, 175], "git_hash": [169, 175], "tflitemicroacceleratorwrapp": 169, "supports_model_compil": 169, "estimate_profiling_result": 169, "set_program_recorder_en": 169, "enable_data_record": 169, "compile_model": 169, "report_path": 169, "tflm_wrapper": 172, "tflm_acceler": 172, "flatbuffer_data": [172, 191], "enable_profil": [172, 175], "enable_record": [172, 175], "enable_tensor_record": [172, 175], "force_buffer_overlap": [172, 175], "tflitemicroacceler": [172, 175], "layer_error": 172, "tflitemicrolayererror": 172, "fallback": 172, "input_s": 172, "output_s": 172, "is_profiler_en": 172, "get_profiling_result": 172, "tflitemicroprofiledlayerresult": 172, "is_recorder_en": 172, "is_tensor_recorder_en": 172, "get_recorded_data": 172, "get_layer_error": 172, "wrapper_detail": 173, "accelerat": 173, "memory_plan": 173, "tflitemicromemoryplan": 173, "specifc": 174, "shallow": [174, 193], "default_factori": 174, "factori": [174, 180, 183, 196, 204], "__missing__": 174, "set_log_level": 175, "get_log_level": 175, "set_logg": 175, "normalize_accelerator_nam": 175, "insensit": [175, 230], "get_supported_acceler": 175, "accelerator_is_support": 175, "load_tflite_model": [175, 242, 247], "unload_model": [175, 242, 247], "disable_simulator_backend": 175, "input_data": [175, 178, 181, 184, 186, 194, 198, 199, 202, 205], "record_model": [175, 247], "enable_accelerator_record": 175, "return_model_detail": 175, "update_input_model": 175, "layer_callback": 175, "input0": 175, "accelerator_data": 175, "add_accelerator_path": 175, "register_acceler": 175, "get_acceler": 175, "rectifi": 176, "relu_n1_to_1": 176, "hyperbol": 176, "tangent": 176, "sign_bit": 176, "as_integer_ratio": [176, 192], "bit_count": [176, 192], "0b1101": [176, 192], "bit_length": [176, 192], "0b100101": [176, 192], "conjug": [176, 192], "complex": [176, 192, 229, 255, 259, 260, 261, 263, 265], "ration": [176, 192], "from_byt": [176, 192], "byteord": [176, 192], "sign": [176, 185, 192], "bytearrai": [176, 192, 248], "sy": [176, 192, 200, 209, 213, 232, 244, 265], "complement": [176, 192], "imaginari": [176, 192], "is_integ": [176, 192], "duck": [176, 192], "to_byt": [176, 192], "overflowerror": [176, 192], "fb_oper": [177, 178, 181, 184, 186, 190, 194, 198, 199, 202, 205], "operatort": [177, 178, 181, 184, 186, 190, 194, 198, 199, 202, 205], "tfliteaddlayeropt": 177, "fuse": [177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 194, 195, 196, 204, 205, 206, 257, 259, 264, 265, 266], "input1_tensor": 177, "tflitetensor": [177, 178, 181, 184, 186, 190, 191, 194, 198, 199, 202, 205], "input1_data": 177, "input2_tensor": 177, "input2_data": 177, "output_data": [177, 178, 181, 184, 186, 194, 198, 199, 202, 205, 248], "from_flatbuff": [177, 178, 181, 184, 186, 190, 194, 198, 199, 202, 205], "get_input_data": [177, 178, 181, 184, 186, 190, 191, 194, 198, 199, 202, 205], "get_input_tensor": [177, 178, 181, 184, 186, 190, 191, 194, 198, 199, 202, 205], "get_output_data": [177, 178, 181, 184, 186, 190, 191, 194, 198, 199, 202, 205], "get_output_tensor": [177, 178, 181, 184, 186, 190, 191, 194, 198, 199, 202, 205], "framework": [177, 178, 181, 184, 186, 190, 194, 198, 199, 202, 205, 253, 265], "typevar": [177, 178, 181, 184, 186, 190, 194, 198, 199, 201, 202, 205], "n_input": [177, 178, 181, 184, 186, 190, 191, 194, 198, 199, 202, 205], "n_output": [177, 178, 181, 184, 186, 190, 191, 194, 198, 199, 202, 205], "tfliteconv2dlayeropt": 178, "bia": [178, 181, 186, 202, 205], "filters_tensor": [178, 181, 202, 248], "filters_data": [178, 181, 202], "bias_tensor": [178, 181, 186, 202], "bias_data": [178, 181, 186, 202], "tfliteconvparam": [178, 248], "opt": [179, 182, 187, 195, 203, 206], "activation_str": [179, 182, 187, 195, 206], "tfliteactiv": [179, 182, 187, 195, 206], "padding_str": [179, 182, 195, 203], "tflitepad": [179, 180, 182, 183, 195, 196, 203, 204], "stride_width": [179, 180, 182, 183, 192, 195, 196, 203, 204], "stride_height": [179, 180, 182, 183, 192, 195, 196, 203, 204], "options_typ": [179, 182, 187, 195, 203, 206], "builtinopt": [179, 182, 187, 195, 203, 206], "options_type_str": [179, 182, 187, 195, 203, 206], "convparamsquant": 180, "dilation_width_factor": [180, 183], "dilat": [180, 183], "dilation_height_factor": [180, 183], "input_offset": [180, 183, 188, 204], "weights_offset": [180, 183, 188, 204], "output_offset": [180, 183, 188, 204, 248], "per_channel_output_multipli": [180, 183, 204, 248], "per_channel_output_shift": [180, 183, 204, 248], "quantized_activation_min": [180, 183, 188, 196, 204, 248], "quantized_activation_max": [180, 183, 188, 196, 204, 248], "tflitedepthwiseconv2dlayeropt": 181, "tflitedepthwiseconvparam": [181, 248], "depthwiseconvparamsquant": 183, "opcode_vers": [184, 190, 198], "tflitelayeropt": [184, 190, 198, 199], "scalar": [185, 193], "syntax": [185, 193], "foo": [185, 193, 230], "int64": [185, 193], "uint32": [185, 193], "uint64": [185, 193], "doubl": [185, 193, 260, 263], "str_list": [185, 193], "deseri": [185, 193], "serialized_data": [185, 193], "boolvalu": 185, "int8valu": 185, "unsign": [185, 217, 238], "uint8valu": 185, "int16valu": 185, "uint16valu": 185, "int32valu": 185, "uint32valu": 185, "int64valu": 185, "uint64valu": 185, "floatvalu": 185, "doublevalu": 185, "binaryvalu": 185, "stringvalu": 185, "stringlist": 185, "int32list": 185, "floatlist": 185, "i8": 185, "u8": 185, "i16": 185, "u16": 185, "i32": 185, "u32": 185, "i64": 185, "u64": 185, "f32": 185, "f64": 185, "int32_list": 185, "float_list": 185, "schema_vers": 185, "root_typ": 185, "tflitefullyconnectedlayeropt": 186, "accumulator_depth": 186, "neuron": [186, 256, 266], "weights_tensor": 186, "weights_data": 186, "tflitefullyconnectedparam": [186, 248], "fullyconnectedparamsquant": 188, "output_multipli": 188, "output_shift": 188, "load_flatbuffer_fil": [189, 191, 242, 248, 265], "schema_v3": 191, "awesom": 191, "my_new_model": 191, "add_metadata": [191, 248], "my_metadata": [191, 248], "all_metadata": 191, "get_all_metadata": 191, "input_buff": 191, "inference_result": 191, "cwd": [191, 228, 233], "backslash": 191, "slash": [191, 207, 228], "flatbuffer_model": 191, "modelt": 191, "flatbuffer_subgraph": 191, "subgrapht": 191, "subgraph": [191, 201], "selected_model_subgraph": 191, "n_subgraph": 191, "get_flatbuffer_subgraph": 191, "get_tensor_data": 191, "get_metadata": [191, 248], "remove_metadata": 191, "update_path": 191, "regenerate_flatbuff": [191, 248], "reload_model": 191, "underli": [191, 211, 248, 267], "quantize_to_input_dtyp": 191, "input_index": 191, "dequantize_output_to_float32": 191, "output_index": 191, "out_height": 192, "in_height": 192, "out_width": 192, "in_width": 192, "region": 192, "filter_height": [192, 195], "filter_width": [192, 195], "l1235": 193, "add_to_tflite_fil": 193, "load_from_tflite_fil": [193, 242], "flatbufferdictionari": 193, "load_from_tflite_flatbuff": 193, "load_from_tflite_model": [193, 248], "add_to_tflite_flatbuff": 193, "add_to_tflite_model": [193, 248], "tflitepool2dlayeropt": 194, "tflitepoolparam": [194, 248], "averagepoolingevalquant": 196, "fb_quantiz": 197, "quantizationparameterst": 197, "quantization_dimens": 197, "requires_copi": 199, "memcpi": 199, "n_input_el": 199, "flat_siz": [200, 264], "maxsiz": [200, 209, 213], "fb_tensor": 201, "tensort": 201, "dtype_str": 201, "tfliteshap": 201, "tflitequant": 201, "is_vari": 201, "size_byt": 201, "shape_dtype_str": 201, "include_batch": 201, "dim0": 201, "dim1": 201, "transpose_conv": 202, "tflitetransposeconvlayeropt": 202, "tflitetransposeconvparam": 202, "calculateopdata": 204, "tfliteunidirectionallstmlayeropt": 205, "is_time_major": 205, "cell_clip": 205, "proj_clip": 205, "n_cell": [205, 266], "n_batch": 205, "input_to_input_weights_tensor": 205, "input_to_forget_weights_tensor": 205, "input_to_cell_weights_tensor": 205, "input_to_output_weights_tensor": 205, "recurrent_to_input_weights_tensor": 205, "recurrent_to_forget_weights_tensor": 205, "recurrent_to_cell_weights_tensor": 205, "recurrent_to_output_weights_tensor": 205, "cell_to_input_weights_tensor": 205, "peephol": 205, "diagon": 205, "cell_to_forget_weights_tensor": 205, "cell_to_output_weights_tensor": 205, "input_gate_bias_tensor": 205, "gate": [205, 266], "forget_gate_bias_tensor": 205, "cell_gate_bias_tensor": 205, "output_gate_bias_tensor": 205, "projection_weights_tensor": 205, "projection_bias_tensor": 205, "output_state_tensor": 205, "cell_state_tensor": 205, "input_layer_norm_coeff_tensor": 205, "forget_layer_norm_coeff_tensor": 205, "cell_layer_norm_coeff_tensor": 205, "output_layer_norm_coeff_tensor": 205, "extract_arch": 207, "extract_nest": [207, 208], "destin": [207, 208, 230], "gzip_fil": 207, "src_path": 207, "gzip": 207, "gzip_directory_fil": [207, 267], "src_dir": 207, "dst_archiv": 207, "regex": [207, 228, 232, 238], "download_dir": 208, "archive_fnam": 208, "file_hash_algorithm": 208, "update_onchange_onli": 208, "download_details_fnam": 208, "return_uptod": 208, "progressbar": 208, "sha256": 208, "hasn": [208, 263], "verify_extract": 208, "extract_details_fnam": 208, "tarbal": 208, "verify_file_hash": 208, "file_path": [208, 228], "expected_sha1": 208, "verify_sha256": 208, "expected_sha256": 208, "voicepitch": [209, 210, 212, 267], "voicer": [209, 210, 212, 267], "keyword_group": 210, "list_supported_backend": 211, "is_run": [211, 229], "is_backend_load": 211, "raise_except": 211, "load_backend": [211, 212, 267], "install_python_packag": [211, 212, 267], "boto3": 211, "cognitiveservic": 211, "speechconfig": 211, "texttospeech": 211, "texttospeechcli": 211, "auto_install_python_packag": 211, "comment": [211, 230, 253, 257], "list_languag": 211, "list_voic": [211, 212, 267], "language_cod": [211, 214], "list_configur": [211, 212, 213, 267], "max_count": [211, 212, 213, 267], "generationconfig": 211, "count_charact": [211, 267], "charg": [211, 255, 267], "as_dict": 211, "on_finish": [211, 212, 267], "forev": [211, 238], "alexa_dataset_gener": [212, 267], "audio_dataset_gener": [212, 221, 267], "alexa_dataset": [212, 267], "alias": [212, 213, 263, 267], "ehlexa": [212, 267], "eelexa": [212, 267], "aalexa": [212, 267], "aah": [212, 267], "uh": [212, 267], "ala": [212, 267], "alex": [212, 267], "lex": [212, 267], "lexa": [212, 267], "lexu": [212, 267], "alexu": [212, 267], "exu": [212, 267], "exa": [212, 267], "alert": [212, 254, 267], "alec": [212, 267], "alef": [212, 267], "ale": [212, 267], "al": [212, 267], "aleph": [212, 267], "alevin": [212, 267], "alegar": [212, 267], "alexia": [212, 258, 267], "alexin": [212, 267], "alencon": [212, 267], "aleuron": [212, 267], "alemb": [212, 267], "alic": [212, 258, 267], "aleeyah": [212, 267], "xslow": [212, 267], "xfast": [212, 267], "all_configur": [212, 267], "n_config": [212, 267], "pretti": [212, 267], "pb_outer": [212, 267], "config_list": [212, 267], "pb_inner": [212, 267], "as_list": [213, 230], "hashable_valu": 214, "hex_hash": 214, "var_nam": 217, "length_var_nam": 217, "data_length": 217, "const": [217, 247, 248, 264], "prepend_lin": 217, "fmt_str": 217, "prepend_head": 217, "iobas": 217, "prepend": [217, 230], "stdint": 217, "0x": 217, "02x": 217, "build_mltk_target": 218, "additional_vari": 218, "source_dir": 218, "build_dir": 218, "build_subdir": 218, "use_user_opt": 218, "config_onli": 218, "build_onli": 218, "previosli": 218, "invoke_mltk_target": 218, "build_target": 218, "get_build_directori": 218, "parse_vari": 218, "cmake_vari": 218, "tensorflowcudavers": 219, "__getnewargs__": 219, "plain": 219, "pickl": 219, "__match_args__": 219, "cudnn": 219, "python_min": 219, "python_max": 219, "__module__": [219, 227, 230, 235], "_cl": 219, "__repr__": 219, "nice": 219, "__slots__": 219, "deiniti": 219, "get_tensorflow_version_with_cudnn_vers": 219, "cudnn_ver": 219, "check_tensorflow_cuda_compatibility_error": 219, "log_file_path": 219, "generate_hash": 220, "hash_fil": 220, "include_filenam": 220, "hashlib": 220, "_hash": 220, "hash_object": 220, "jlink_stream": [221, 224], "serial_read": [221, 231], "command_stream": 222, "cmd": [222, 233, 237, 246, 251, 265], "response_stream": 222, "jlinkstreamopt": [222, 225], "reset_devic": [222, 225], "no_respons": 222, "ifc": 223, "stream_context": 223, "deviceinterfac": 223, "is_open": [223, 232, 238], "max_read_s": 223, "end_tim": 223, "buffer_us": 223, "pend": 223, "buffer_unus": 223, "read_data_avail": [223, 224], "readi": [223, 238, 255, 256, 260, 265], "write_data_avail": 223, "buffer_hexdump": 223, "hexdump": 223, "max_siz": [223, 225, 238], "read_al": [223, 224, 238], "initial_timeout": 223, "flush": [223, 227, 232], "classify_audio_mltk_cli": 224, "jlinkstream": [224, 226], "jlinkdatastream": [224, 225], "audio_stream": 224, "chunk_data": 224, "default_opt": 225, "is_connect": 225, "log_fil": 227, "log_file_mod": 227, "base_level": 227, "file_level": 227, "add_console_logg": 227, "make_filelik": 227, "redirect_stream": 227, "stderr": 227, "close_atexit": 227, "redirect": 227, "textio": [227, 232], "timing_decor": 227, "decor": [227, 230], "set_console_level": 227, "get_level": 227, "consoleloggerlevelcontext": 227, "__enter__": 227, "__exit__": 227, "traceback": 227, "__dict__": [227, 230, 235], "mappingproxi": [227, 230, 235], "__weakref__": [227, 230, 235], "__doc__": [227, 230, 235], "__annotations__": [227, 230, 235], "weak": [227, 230, 235], "dummylogg": 227, "fullpath": [228, 256], "get_actual_path": 228, "has_filenam": 228, "create_dir": 228, "create_tempdir": [228, 265], "subdir": 228, "get_user_set": 228, "settings_fil": 228, "add_user_set": 228, "remove_directori": 228, "retri": 228, "clean_directori": 228, "copy_directori": 228, "dst": [228, 244, 246, 247, 248, 250, 251], "exclude_dir": 228, "set_file_last_modifi": 228, "dt": 228, "datetim": 228, "file_is_new": 228, "source_path": 228, "other_path": 228, "file_is_in_us": 228, "recursive_listdir": 228, "return_relative_path": 228, "walk_with_depth": 228, "pushd": 228, "new_dir": 228, "getcwd": 228, "gil": 229, "driven": 229, "_processing_callback": 229, "pool_callback": 229, "sleep": 229, "create_batch": 229, "pool_batch": 229, "entry_point": 229, "expend": 229, "clamp": 229, "processpoolbatch": 229, "short_vers": 230, "minor": 230, "defaultdict": 230, "dictobject": 230, "my_dict_obj": 230, "__getattr__": 230, "__setattr__": 230, "setattr": 230, "merge_dict": 230, "copy_destin": 230, "obj": 230, "flatten_list": 230, "list_rindex": 230, "lst": 230, "revers": [230, 265], "contains_class_typ": 230, "get_case_insensit": 230, "is_tru": 230, "is_fals": 230, "forward_method_kwarg": 230, "prepend_exception_msg": 230, "append_exception_msg": 230, "debugger_is_act": 230, "debugg": [230, 262, 264, 266], "notebook_is_act": 230, "ipython": [230, 256], "module_nam": 230, "install_dir": 230, "no_dep": 230, "import_module_at_path": 230, "load_json_saf": 230, "find_object_key_with_valu": 230, "needl": 230, "constructor": 230, "find_object_value_with_kei": 230, "ignore_cas": 230, "enum": 230, "find_object_value_with_key_or_valu": 230, "timeit": 230, "set_absl_log_level": 230, "absl": [230, 244, 245, 246, 249, 251], "disable_warn": 230, "func": 230, "hide": 230, "profile_model_on_devic": 231, "serialread": 231, "start_regex": [231, 232], "ignorecas": [231, 232], "stop_regex": [231, 232], "fail_regex": [231, 232], "hardfault": 231, "timeouterror": 231, "error_messag": [231, 232], "device_log": 231, "captured_data": [231, 232], "multilin": 232, "dotal": 232, "outfil": [232, 233, 265], "stdout": [232, 265], "rb": 232, "callback_regex": 232, "ignore_char": 232, "list_port": [232, 238], "resolve_port": [232, 238], "activity_timeout": 232, "abort_ev": 232, "check_fail_condit": 232, "check_start_condit": 232, "check_stop_condit": 232, "delay_per_char": 232, "run_shell_cmd": [233, 265], "line_processor": 233, "retcod": [233, 265], "retmsg": [233, 265], "sig": [234, 236], "sigint": [234, 236], "resignal_on_exit": 234, "raise_exception_if_not_main_thread": 234, "formattedint": 235, "__str__": 235, "formattedfloat": 235, "add_spac": 235, "memory_unit": 235, "0314": 235, "convert_unit": 235, "readabl": 235, "32kb": 235, "128m": 235, "268435456": 235, "pretty_time_str": 235, "iso_time_str": 235, "iso": 235, "8601": 235, "19t23": 235, "459z": 235, "iso_time_filename_str": 235, "459": 235, "get_current_o": 236, "osx": 236, "is_window": 236, "is_linux": 236, "is_osx": 236, "has_admin": 236, "admin": [236, 258], "permiss": [236, 241], "get_usernam": 236, "raise_sign": 236, "kill": 236, "make_path_execut": 236, "send_sign": 236, "pid": 236, "children": 236, "recept": [237, 238], "alexa_demo": [237, 258], "data_buff": 237, "bytesio": 237, "read_command": [237, 238], "flush_input": [237, 238], "seek": 237, "getbuff": 237, "nbyte": 237, "rx_buffer_length": 238, "rx": 238, "open_synchronize_timeout": 238, "4096": 238, "rx_bytes_avail": 238, "tx_bytes_avail": 238, "is_synchron": 238, "ack_read_data": 238, "synchronize_block": 238, "statu": [238, 254, 255], "exceed": [238, 263, 265, 267], "write_al": 238, "write_command": 238, "payload": 238, "guarante": 238, "unread": 238, "silent": 238, "vastli": [239, 257, 259, 260, 261, 263], "amp": 239, "onnx": 239, "micro_speech": 240, "inter": 240, "trainer": 240, "evaluat": 240, "stock": 240, "warranti": 241, "disclaim": 241, "impli": [241, 259], "concern": [241, 256, 267], "ask": [241, 255], "question": [241, 255, 257], "quick": 241, "spdx": 241, "zlib": 241, "licensor": 241, "laboratori": 241, "inc": 241, "liabl": 241, "damag": 241, "aris": 241, "grant": 241, "anyon": [241, 255, 258], "alter": 241, "freeli": 241, "restrict": 241, "misrepres": 241, "claim": 241, "wrote": 241, "acknowledg": 241, "appreci": 241, "plainli": 241, "notic": [241, 255], "keyword_spotting_numb": [242, 266], "pprint": 242, "grab": 242, "audio_sample_dir": 242, "audio_sample_fn": 242, "audio_sample_path": 242, "audio_sample_data": 242, "audio_sample_rate_hz": 242, "audio_sample_length": 242, "audio_sample_length_second": 242, "1f": 242, "khz": 242, "aws_ar": 242, "ae": 242, "hala": 242, "1209d48a": 242, "0khz": 242, "mltk_model_archive_path": 242, "class_label": [242, 265], "extracted_arch": [242, 251], "tflite_param": 242, "tflite_frontend_set": 242, "pformat": 242, "frontend_sample_length": 242, "adjusted_audio_sample_data": 242, "norm_spectrogram": 242, "tflite_input_spectrogram": 242, "80500": 242, "98x40": 242, "largest": [242, 265], "think": 242, "classification_result": 242, "predicted_class_index": 242, "prediction_confid": 242, "nbelong": 242, "99609375": [242, 266], "tflm_model": 242, "sw": 242, "kbyte": [242, 247], "evaluation_result": [243, 257, 259], "674": 243, "919": 243, "987": 243, "880": 243, "484": 243, "411": 243, "893": 243, "981": [243, 257], "865": [243, 265], "832": 243, "auto_encod": 243, "308": [243, 256], "726": 243, "urllib": [244, 246, 247, 248, 250, 251], "tempfil": [244, 246, 247, 248, 250, 251, 267], "query_platform": 244, "tflite_model_url": [244, 246, 247, 248, 250, 251], "necesari": 244, "test_help": [244, 247, 248], "normpath": [244, 246, 247, 248, 250, 251], "gettempdir": [244, 246, 247, 248, 250, 251, 267], "wb": [244, 246, 247, 248, 250, 251, 265], "urlopen": [244, 246, 247, 248, 250, 251], "copyfileobj": [244, 246, 247, 248, 250, 251], "884": [244, 247], "5p": [244, 247, 265], "0n": [244, 247], "985": [244, 247], "148": [244, 247, 263], "187": [244, 247, 259], "5u": [244, 247, 257, 265], "718": [244, 247], "7u": [244, 247, 257, 265], "3u": [244, 247, 257, 265], "0p": [244, 247, 257, 265], "5n": [244, 247, 257, 265], "153": [244, 259, 263, 265], "9p": 244, "8p": [244, 257], "719": 244, "4u": [244, 265], "223": 244, "2n": [244, 265], "platform_nam": 244, "conenct": 244, "brd2601a": 244, "brd4186b": 244, "956": 244, "untrac": [244, 245, 246, 249, 251], "_jit_compiled_convolution_op": [244, 245, 246, 249, 251], "tmpc8yu6n46": 244, "reed": [244, 245, 246, 249, 250, 251, 257, 263, 265], "766": [244, 245, 246, 249, 251], "userwarn": [244, 245, 246, 249, 251, 257, 265], "anywai": [244, 245, 246, 249, 251, 257], "415": 244, "219": 244, "6u": [244, 257, 265], "183": 244, "332": 244, "1n": [244, 257], "tmpvpnr_8op": 245, "tmp6fs6_29o": 245, "_________________________________________________________________": [246, 250, 251, 257], "average_pooling2d": [246, 247, 248, 251, 259], "averagep": [246, 251], "ooling2d": [246, 251], "conv2d_1": [246, 247, 248, 251, 257], "3472": [246, 251], "conv2d_2": [246, 247, 248, 251, 257], "3480": [246, 251], "batch_norm": [246, 247, 248, 250, 251, 259], "batchn": [246, 250, 251, 259], "ormal": [246, 250, 251, 259], "average_pooling2d_1": [246, 247, 248, 251], "epooling2d": [246, 251], "1155": [246, 251], "activation_1": [246, 251, 257], "443": [246, 251, 263], "395": [246, 251], "0242764704ebb6643ae7df4a6536bb83": 246, "06t16": [246, 250], "472z": 246, "trained_model": [246, 250, 251], "kws_ref_model": [246, 250, 251], "external_tflite_path": [246, 250, 251], "49x10x1": [246, 250], "394": [246, 250, 257, 267], "addon": [246, 251, 265], "satisfi": [246, 251], "typeguard": [246, 251], "pypars": [246, 251], "333": [246, 251, 259, 265], "tmpv8h9r1ze": 246, "b13b48c": [246, 247, 250, 251, 265], "72320": [246, 251], "f84b0517005c8392d9746f6c6dae1f50": 246, "327z": 246, "tflite_micro_model": [247, 264], "72192": 247, "2021": [247, 248, 263], "18t16": [247, 248], "028z": [247, 248], "e8463b1e31855c5e6319493226b8b582": [247, 248], "recorded_lay": 247, "inp": 247, "tinput": [247, 248], "outp": 247, "toutput": [247, 248], "op0": [247, 248], "conv2d_input_int8": [247, 248], "biasadd": [247, 248], "readvariableop": [247, 248], "op1": [247, 248], "avgpool": [247, 248], "op2": [247, 248, 265], "op3": [247, 248, 265], "fusedbatchnormv3": [247, 248], "conv2d1": [247, 248], "op4": [247, 248], "op5": [247, 248], "op6": [247, 248], "matmul": [247, 248], "op7": [247, 248], "identity_int8": [247, 248], "arbitrari": 248, "tflite_model_param": 248, "my_bool": 248, "my_int": 248, "my_float": 248, "my_list_int": 248, "my_list_float": 248, "my_list_str": 248, "140000104904175": 248, "100000023841858": 248, "200000047683716": 248, "299999952316284": 248, "x01": 248, "x02": 248, "x03": 248, "x04": 248, "_load_sampl": 248, "class_nam": [248, 257], "img_arrai": 248, "rock_sampl": 248, "paper_sampl": 248, "scissors_sampl": 248, "prep": 248, "tfliteconv2dlay": 248, "tflitefullyconnectedlay": 248, "tflitepooling2dlay": 248, "conv2d_param": 248, "fully_connected_param": 248, "pool_param": 248, "padding_width": 248, "padding_height": 248, "conv2d_lay": 248, "updated_tflite_path": 248, "modified_image_example1": 248, "updated_tflite_model": 248, "updated_conv2d_lay": 248, "updated_filt": 248, "updated_quant": 248, "allclos": 248, "training_result": 249, "tmp6ab8ka6k": 249, "tmpgclx2y4d": 249, "tmppbx5mcil": 249, "tmpeoo7jyna": 249, "9600": 250, "648": [250, 263, 265], "16004": 250, "668": 250, "25472": 250, "a4fadcb07cc13bf4ce4249e7349cadf3": 250, "836z": 250, "831z": 250, "geforc": 251, "rtx": 251, "2060": 251, "tmp_model": 251, "tmpsa1z1ouz": 251, "dive": 252, "hard": [253, 257, 259, 264, 267], "defici": 253, "ideal": [253, 258, 264, 266, 267], "similarli": [253, 255], "refactor": 253, "easi": [254, 259, 267], "collabor": 254, "paid": [254, 255], "subscript": 254, "price": [254, 267], "relav": 254, "informa": 254, "disk": 254, "plotli": 254, "especi": [254, 257, 259, 260], "slack": 254, "artifact": 254, "audit": 254, "computation": [255, 264], "dai": 255, "laptop": 255, "rent": 255, "matchmak": 255, "aggreg": 255, "10x": [255, 258], "caution": 255, "affili": 255, "incur": 255, "hr": 255, "12hr": 255, "flexibl": 255, "isol": 255, "unprivileg": 255, "docker": 255, "tier": 255, "datacent": 255, "hobbyist": 255, "vet": 255, "partner": 255, "lose": 255, "steal": 255, "incentiv": 255, "reput": 255, "exploit": 255, "roughli": 255, "payment": 255, "whenver": 255, "hit": 255, "destroi": 255, "outstand": 255, "rental": 255, "bandwidth": 255, "inact": 255, "offlin": 255, "broken": 255, "consider": 255, "stripe": 255, "confirm": 255, "dialog": 255, "chose": 255, "verif": 255, "moment": 255, "contact": 255, "fraudul": 255, "editor": [255, 256, 257, 259, 263], "aaaac3nzac1lzdi1nte5aaaaibqhisau": 255, "bhj7z6hpoqe0gx": 255, "efjau27aim738c4byojw": 255, "popup": 255, "10gb": 255, "hourli": 255, "slider": 255, "narrow": 255, "visibl": 255, "35023": 255, "trashcan": [255, 267], "icon": 255, "lost": [255, 266], "wide": 255, "cheaper": 255, "dlperf": 255, "mid": 255, "Not": [255, 265], "i7": 255, "wheel": 255, "wast": 255, "libsndfil": 255, "machinc": 255, "advantag": [255, 265], "spun": 255, "my_dataset_download": 255, "spend": [255, 257, 258, 259, 263, 267], "monei": [255, 258, 267], "untrain": 255, "3hr": 255, "amd": 255, "threadripp": 255, "epyc": 255, "xeon": 255, "39975": 255, "ve": 255, "understand": [256, 257, 259, 260, 261, 266], "favorit": [256, 257, 259, 263], "exclam": [256, 257, 259, 260], "zsh": 256, "fish": [256, 261], "powershel": 256, "pwsh": 256, "run_model_profiler_benchmark": 256, "tse_compress": 256, "utest": [256, 257, 259, 260], "review": [256, 257, 258, 259, 260, 261, 263], "someon": [256, 257], "nearli": 256, "certain": [256, 257, 267], "theoret": 256, "signet": 256, "friendli": 256, "introduct": 256, "abc": 256, "thumb": 256, "backup": 256, "192x192": 256, "sharpen": 256, "harpen": 256, "blur": 256, "heurist": 256, "blurri": 256, "data_preprocessor": 256, "formula": 256, "signature1": 256, "signature2": 256, "THEN": 256, "intent": 256, "hacker": 256, "spoof": 256, "469": 256, "465": 256, "982": 256, "245": 256, "intellig": 257, "differenti": 257, "learnabl": 257, "effort": 257, "10k": [257, 258, 259], "100k": [257, 259, 267], "orient": 257, "stuff": 257, "redund": 257, "duplic": [257, 259], "mislabl": 257, "degrad": 257, "sensor": 257, "patool": 257, "oe": 257, "tmp_archiv": 257, "sub_dir": 257, "mpimg": 257, "class_sampl": 257, "class_dir": 257, "sample_filenam": 257, "imread": 257, "fortun": 257, "purchas": 257, "image_classifier_imag": 257, "clearli": 257, "retrain": 257, "scratch": [257, 259, 261], "my_rock_paper_scissor": 257, "newli": [257, 258, 259], "internet": 257, "variat": 257, "converg": 257, "extrem": [257, 259], "yet": [257, 258, 259, 263], "29t23": 257, "550": 257, "02t17": 257, "359": [257, 259, 263], "204": 257, "max_pooling2d": 257, "2320": 257, "max_pooling2d_1": 257, "maxpool": 257, "4640": 257, "activation_2": 257, "max_pooling2d_2": 257, "65568": 257, "activation_3": 257, "820": 257, "303": [257, 259], "29t22": 257, "350": [257, 259], "2482ff1c6e512f70479605f20e18e5fc": 257, "03t23": 257, "754z": 257, "possibli": [257, 259], "345": 257, "141": 257, "3p": 257, "2u": [257, 265], "745": 257, "226": 257, "1u": [257, 265], "7n": 257, "8u": 257, "559938": 257, "358": [257, 259], "481894": 257, "offload": [257, 259], "revert": 257, "feasibl": [257, 259], "night": [257, 259], "wrong": [257, 259, 264], "037": 257, "476": 257, "083": 257, "461": 257, "042": 257, "554": 257, "600": [257, 259, 263], "chanc": [257, 259], "wider": [257, 259], "filer": [257, 259], "safe": [257, 259], "sink": 258, "attach": 258, "ground": [258, 260], "segger": 258, "program_app": 258, "audio_io": 258, "keyword_spotting_alexa": 258, "me": 258, "joke": 258, "opu": 258, "vad": 258, "decompress": 258, "vdac": 258, "3v3": 258, "acquir": [258, 260], "besid": 258, "divers": [258, 259], "substanti": [258, 266], "adequ": 258, "intricaci": 258, "imbalanc": 258, "choos": [258, 260, 267], "shown": [258, 265], "importantli": 258, "plug": 258, "dummi": 258, "2hr": 258, "keyword_spottong_alexa": 258, "mltk_stack_siz": 258, "audio_classifier_enable_audio_io": 258, "mltk_audio_classifier_download": 258, "music": 258, "stori": 258, "wstk": 258, "baudrat": 258, "rebuild": 258, "discuss": [259, 263], "accent": [259, 267], "thousand": 259, "overcom": 259, "15k": 259, "harder": [259, 267], "switch": 259, "poor": [259, 266], "heard": [259, 267], "household": 259, "meet": [259, 263], "suffer": 259, "dirti": 259, "corrupt": 259, "mislabel": 259, "insight": 259, "amplifi": 259, "diverg": [259, 265], "church": 259, "survei": 259, "constantli": [259, 267], "Near": [259, 263], "min_signal_remain": [259, 260], "playback": 259, "my_keyword_spotting_on_off": 259, "care": 259, "ultim": [259, 261], "my_keyword_spotting_on_off_v3": 259, "__________________________________________________________________________________________________": 259, "15650": 259, "pointwise_expand_conv": 259, "conv2": 259, "aliz": 259, "re_lu": 259, "mtconv": 259, "multiscaletemporalco": 259, "1350": 259, "nvolut": 259, "batch_normalization_1": 259, "batchno": 259, "rmaliz": 259, "re_lu_1": 259, "strided_residu": 259, "2500": 259, "pointwise_contract_conv": 259, "con": [259, 267], "v2d": 259, "batch_normalization_3": 259, "batch_normalization_2": 259, "re_lu_2": 259, "re_lu_3": 259, "batch_normalization_4": 259, "re_lu_4": 259, "batch_normalization_5": 259, "re_lu_5": 259, "batch_normalization_6": 259, "add_1": 259, "re_lu_6": 259, "batch_normalization_7": 259, "re_lu_7": 259, "batch_normalization_8": 259, "re_lu_8": 259, "batch_normalization_9": 259, "add_2": 259, "re_lu_9": 259, "batch_normalization_10": 259, "re_lu_10": 259, "batch_normalization_11": 259, "re_lu_11": 259, "batch_normalization_12": 259, "add_3": 259, "re_lu_12": 259, "batch_normalization_13": 259, "re_lu_13": 259, "batch_normalization_14": 259, "re_lu_14": 259, "batch_normalization_16": 259, "batch_normalization_15": 259, "re_lu_15": 259, "add_4": 259, "re_lu_16": 259, "batch_normalization_17": 259, "re_lu_17": 259, "batch_normalization_18": 259, "re_lu_18": 259, "batch_normalization_19": 259, "add_5": 259, "re_lu_19": 259, "batch_normalization_20": 259, "re_lu_20": 259, "batch_normalization_21": 259, "re_lu_21": 259, "batch_normalization_22": 259, "add_6": 259, "re_lu_22": 259, "batch_normalization_23": 259, "re_lu_23": 259, "batch_normalization_24": 259, "re_lu_24": 259, "batch_normalization_25": 259, "add_7": 259, "re_lu_25": 259, "batch_normalization_26": 259, "re_lu_26": 259, "batch_normalization_27": 259, "re_lu_27": 259, "batch_normalization_29": 259, "batch_normalization_28": 259, "re_lu_28": 259, "add_8": 259, "re_lu_29": 259, "batch_normalization_30": 259, "re_lu_30": 259, "batch_normalization_31": 259, "re_lu_31": 259, "batch_normalization_32": 259, "add_9": 259, "re_lu_32": 259, "conv": 259, "batch_normalization_33": 259, "re_lu_33": 259, "multiscaletemporalc": 259, "onvolut": 259, "batch_normalization_34": 259, "re_lu_34": 259, "nv2d": 259, "batch_normalization_35": 259, "add_10": 259, "re_lu_35": 259, "batch_normalization_36": 259, "re_lu_36": 259, "batch_normalization_37": 259, "re_lu_37": 259, "batch_normalization_38": 259, "add_11": 259, "re_lu_38": 259, "batch_normalization_39": 259, "re_lu_39": 259, "batch_normalization_40": 259, "re_lu_40": 259, "batch_normalization_42": 259, "batch_normalization_41": 259, "re_lu_41": 259, "add_12": 259, "re_lu_42": 259, "batch_normalization_43": 259, "re_lu_43": 259, "batch_normalization_44": 259, "re_lu_44": 259, "batch_normalization_45": 259, "add_13": 259, "re_lu_45": 259, "batch_normalization_46": 259, "re_lu_46": 259, "batch_normalization_47": 259, "re_lu_47": 259, "batch_normalization_48": 259, "add_14": 259, "re_lu_48": 259, "batch_normalization_49": 259, "re_lu_49": 259, "batch_normalization_50": 259, "re_lu_50": 259, "batch_normalization_51": 259, "add_15": 259, "re_lu_51": 259, "batch_normalization_52": 259, "re_lu_52": 259, "batch_normalization_53": 259, "re_lu_53": 259, "batch_normalization_55": 259, "batch_normalization_54": 259, "re_lu_54": 259, "add_16": 259, "re_lu_55": 259, "batch_normalization_56": 259, "re_lu_56": 259, "batch_normalization_57": 259, "re_lu_57": 259, "batch_normalization_58": 259, "add_17": 259, "re_lu_58": 259, "batch_normalization_59": 259, "re_lu_59": 259, "batch_normalization_60": 259, "re_lu_60": 259, "batch_normalization_61": 259, "add_18": 259, "re_lu_61": 259, "batch_normalization_62": 259, "re_lu_62": 259, "batch_normalization_63": 259, "re_lu_63": 259, "batch_normalization_64": 259, "add_19": 259, "re_lu_64": 259, "averagepool": 259, "ing2d": 259, "803": 259, "055": 259, "98x1x50": 259, "98x1x150": 259, "1x1x50": 259, "49x1x150": 259, "9x1x150": 259, "49x1x50": 259, "1x1x150": 259, "25x1x150": 259, "25x1x50": 259, "13x1x150": 259, "13x1x50": 259, "7x1x150": 259, "7x1x50": 259, "4x1x150": 259, "4x1x50": 259, "888": 259, "957": 259, "ff35e03b5bd73d1e70c4fb37444e1eb2": 259, "15t22": 259, "758z": 259, "608": 259, "50x3x1x104": 259, "1x98x1x50": 259, "735": 259, "428": 259, "150x1x1x50": 259, "1x98x1x150": 259, "1x9x1x150": 259, "1x49x1x150": 259, "367": 259, "50x1x1x150": 259, "1x49x1x50": 259, "50x1x1x50": 259, "757": 259, "1x25x1x150": 259, "376": 259, "1x25x1x50": 259, "386": 259, "1x13x1x150": 259, "1x13x1x50": 259, "650": 259, "1x7x1x150": 259, "1x7x1x50": 259, "875": 259, "1x4x1x150": 259, "1x4x1x50": 259, "1x1x1x50": 259, "1x50": 259, "237": 259, "3x50": 259, "583819": 259, "128kb": 259, "115kb": 259, "112kb": 259, "110kb": 259, "136kb": 259, "117kb": 259, "113kb": 259, "111kb": 259, "955": 259, "602": [259, 263], "301": 259, "630": [259, 263], "712": 259, "643935": 259, "autograph": 259, "pyct": 259, "static_analysi": 259, "lamba_check": 259, "09": 259, "fuction": 259, "statement": [259, 262], "56089": 259, "400": 259, "10400": 259, "20400": 259, "25400": 259, "30400": 259, "35400": 259, "40400": 259, "5629": 259, "3200": 259, "0010": 259, "183m": 259, "5616": 259, "3350": 259, "184m": 259, "5739": 259, "3433": 259, "7347": 259, "3333": 259, "eta": 259, "6279": 259, "2800": 259, "5664": 259, "2900": 259, "5099": 259, "3300": 259, "582m": 259, "3087": 259, "3067": 259, "5246": 259, "3000": 259, "4343": 259, "4006": 259, "3533": 259, "648m": 259, "2055": 259, "3567": 259, "63predict": 259, "21predict": 259, "37predict": 259, "88predict": 259, "007": 259, "163": 259, "45predict": 259, "95predict": 259, "770": [259, 265], "505": [259, 265], "vm": 259, "intend": [259, 267], "certainli": 259, "benefici": 259, "fed": 259, "simultan": 259, "627": 259, "010": 259, "553": [259, 265, 267], "024": 259, "468": [259, 263], "scenario": 259, "mouth": [259, 261, 263], "inch": [259, 261, 263], "javascript": 260, "youtub": 260, "ran": 260, "keyword_spotting_pacman_v3": 260, "likewis": 260, "arrow": 260, "ghost": 260, "954": 260, "169": 260, "656699": 260, "engin": [260, 263, 265], "notif": 260, "lucio": 260, "panpinto": 260, "p5": 260, "vanilla": 260, "css": 260, "s37": 260, "keyword_spotting_with_transfer_learn": 261, "aphex34": 261, "sa": [261, 267], "textur": 261, "abstract": 261, "Of": 261, "relearn": 261, "bike": 261, "130m": 261, "tune": [261, 263], "shorter": 261, "mtlkobject": 261, "callstack": 262, "audiodatageneratorset": 263, "my_keyword_spotting_mobilenetv2": 263, "saniti": 263, "spec": 263, "1410": 263, "custommaskwarn": 263, "mask": 263, "custom_object": 263, "layer_config": 263, "serialize_layer_fn": 263, "fully_quant": 263, "inference_typ": 263, "input_inference_typ": 263, "output_inference_typ": 263, "00001": 263, "00002": 263, "00095": 263, "00003": 263, "0009025": 263, "30x25x32": 263, "30x25x16": 263, "30x25x96": 263, "31x27x96": 263, "15x13x96": 263, "15x13x24": 263, "15x13x144": 263, "17x15x144": 263, "8x7x144": 263, "8x7x32": 263, "8x7x192": 263, "3x3x192": 263, "1x1x192": 263, "9x9x192": 263, "4x4x192": 263, "4x4x384": 263, "3x3x384": 263, "1x1x384": 263, "4x4x576": 263, "576": 263, "3x3x576": 263, "1x1x576": 263, "5x5x576": 263, "2x2x576": 263, "2x2x160": 263, "2x2x960": 263, "1x1x160": 263, "3x3x960": 263, "1x1x960": 263, "2x2x320": 263, "2x2x1280": 263, "1x1x320": 263, "925": 263, "120e1504bcad5f01e644acf9d21b66ff": 263, "14t21": 263, "975z": 263, "7mb": 263, "5mb": 263, "15x13x16": 263, "17x15x96": 263, "8x7x96": 263, "8x7x16": 263, "9x9x96": 263, "4x4x32": 263, "4x4x288": 263, "3x3x288": 263, "1x1x288": 263, "5x5x288": 263, "2x2x288": 263, "2x2x80": 263, "2x2x480": 263, "1x1x80": 263, "3x3x480": 263, "1x1x480": 263, "819": 263, "371": 263, "d226b3204bbaf021713d425e9bdf623c": 263, "895z": 263, "983": 263, "983kb": 263, "368": 263, "1x30x25x16": 263, "378": 263, "318": 263, "8x1x1x16": 263, "149": 263, "1x15x13x16": 263, "655": 263, "1x15x13x96": 263, "393": 263, "286": 263, "146": 263, "544": 263, "1x17x15x96": 263, "1x8x7x96": 263, "134": 263, "1x8x7x16": 263, "188": 263, "161": [263, 265], "158": 263, "1x9x9x96": 263, "1x4x4x32": 263, "192x1x1x32": 263, "1x4x4x192": 263, "1x3x3x192": 263, "32x1x1x192": 263, "295": 263, "48x1x1x192": 263, "221": 263, "288x1x1x48": 263, "1x4x4x288": 263, "1x3x3x288": 263, "48x1x1x288": 263, "1x5x5x288": 263, "1x2x2x288": 263, "80x1x1x288": 263, "1x2x2x80": 263, "313": 263, "480x1x1x80": 263, "1x2x2x480": 263, "1x3x3x480": 263, "232": 263, "80x1x1x480": 263, "160x1x1x480": 263, "1x2x2x160": 263, "1280x1x1x160": 263, "1x2x2x1280": 263, "2560": 263, "2047": [263, 265], "1x1280": 263, "8x1280": 263, "375422": 263, "unfortun": [263, 265], "realli": 263, "120m": 263, "overkil": 263, "228": 263, "201": 263, "121": 263, "606283": 263, "overhead": [264, 265, 266], "loos": [264, 266], "although": 264, "wer": 264, "tricki": 264, "pain": 264, "difficult": 264, "assist": 264, "inspect": 264, "problemat": 264, "leav": 264, "recov": 264, "quantization_report": [264, 266], "rmse": [264, 266], "evenli": [264, 266], "normalized_input_sampl": 264, "input_sampl": 264, "input_scaling_valu": 264, "reciproc": 264, "divis": 264, "hpp": 264, "namespac": 264, "uint16_t": 264, "source_input_data": 264, "sl_tflite_model_arrai": 264, "void": 264, "input_scal": 264, "pointer": 264, "tflitetensorview": 264, "tflite_micro_util": 264, "mean_and_std_en": 264, "samplewise_mean_std_tensor": 264, "preced": 264, "qunat": 264, "introduc": 264, "fusion": 264, "basi": 264, "matlab": 265, "cifar10_matlab_model": 265, "exportonnxnetwork": 265, "trainednet": 265, "straight": 265, "assumpt": 265, "necessarili": 265, "mini": 265, "nchw": 265, "nhwc": 265, "onnx_tf": 265, "onnsim": 265, "daquexian": 265, "openvino_dev": 265, "openvino2tensorflow": 265, "primarili": [265, 267], "pinto0309": 265, "tensorflow_dataset": 265, "onnx_model_archive_url": 265, "8m72rmxtznvaki6": 265, "onnx_model_archive_sha1": 265, "c53827fc8b765183381cdc338afb88f735479d97": 265, "cifar10_matlab_model_example_dir": 265, "webapg": 265, "onnx_model_path": 265, "working_dir": 265, "cifar10_matlab_model_onnx_to_tflit": 265, "model_nam": 265, "particularli": 265, "mapped_class_label": 265, "class_id_map": 265, "veru": 265, "onnx_model": 265, "tf_rep": 265, "x_test_channels_first": 265, "chw": 265, "tensorflow_addon": 265, "ensure_tf_instal": 265, "nightli": 265, "bug": 265, "578": 265, "964": 265, "679": 265, "556": 265, "287": 265, "085": 265, "073": 265, "673": 265, "onnxsim": 265, "simplified_onnx_model": 265, "success": 265, "simplified_onnx_model_path": 265, "doabl": 265, "mo": 265, "mo_main": 265, "shell_cmd": 265, "openvino_out_dir": 265, "__file__": 265, "input_model": 265, "fp32": 265, "7019": 265, "cdb9bec7210": 265, "xml": [265, 267], "intel": 265, "tm": 265, "cid": 265, "prod": 265, "campid": 265, "ww_2022_bu_iotg_openvino": 265, "upg_al": 265, "v11": 265, "openvino2tensorflow_out_dir": 265, "openvino_xml_nam": 265, "nt": 265, "openvino2tensorflow_exe_cmd": 265, "model_output_path": 265, "output_saved_model": 265, "output_no_quant_float32_tflit": 265, "tflite_int8_model_path": 265, "tflite_quant_model": 265, "87295": 265, "mvp_estimators_v0": 265, "962": 265, "1x36x36x3": 265, "310": 265, "64x5x5x3": 265, "1x32x32x64": 265, "1x16x16x64": 265, "1x20x20x64": 265, "64x5x5x64": 265, "248": 265, "9u": 265, "1x4x4x64": 265, "64x4x4x64": 265, "10x1x1x64": 265, "1x1x1x10": 265, "36x36x3": 265, "32x32x64": 265, "5x5x3": 265, "16x16x64": 265, "20x20x64": 265, "5x5x64": 265, "1x1x10": 265, "909": 265, "429": 265, "949": 265, "889": 265, "796": 265, "778": 265, "389": 265, "investig": 266, "rnn": 266, "seri": 266, "predominantli": 266, "sentiment": 266, "tradit": 266, "feedforward": 266, "hidden": 266, "weather": 266, "forecast": 266, "hang": 266, "tend": 266, "achiev": 266, "spectrogram_uint16": 266, "normalized_spectrogram_float32": 266, "lstm_input": 266, "lstm_featur": 266, "surround": 266, "layernormlstmcel": 266, "op_nam": 266, "num_el": 266, "stddev": 266, "mean_error": 266, "max_abs_error": 266, "zero_point": 266, "3920": 266, "062017273": 266, "00017696062": 266, "23714127": 266, "0038493355": 266, "18038306": 266, "997680300000006": 266, "3439514403696602": 266, "11760": 266, "03295127": 266, "0004035881": 266, "12613823": 266, "0010864673": 266, "1565376": 266, "917088": 266, "21056668442429635": 266, "5880": 266, "035719264": 266, "0008537201": 266, "2155346": 266, "001277669": 266, "16985875": 266, "31398125": 266, "2104365896947685": 266, "1960": 266, "07850939": 266, "00044384212": 266, "18113996": 266, "0061679697": 266, "26804927": 266, "35256385": 266, "2929924888823545": 266, "028141052": 266, "167329e": 266, "09747819": 266, "00079393975": 266, "123283505": 266, "437293775": 266, "2285539861207166": 266, "061724134": 266, "01658498": 266, "44125158": 266, "0051669613": 266, "007843136": 266, "9999996800000002": 266, "164902700610854": 266, "38768843": 266, "002292617": 266, "72559375": 266, "16979334": 266, "2712529": 266, "1694895": 266, "3241368214696956": 266, "0008727249": 266, "00027066743": 266, "0026643767": 266, "2000795e": 266, "00390625": 266, "24554763491265805": 266, "pronunci": 267, "sad": 267, "excit": 267, "characterisit": 267, "50k": 267, "20k": 267, "sparingli": 267, "russian": 267, "smart": 267, "lid": 267, "react": 267, "closet": 267, "solv": 267, "cheap": 267, "januari": 267, "websit": 267, "wavenet": 267, "neural2": 267, "000004": 267, "usd": 267, "000016": 267, "markup": 267, "xmln": 267, "w3": 267, "2001": 267, "synthesi": 267, "lang": 267, "jennyneur": 267, "mstt": 267, "cheer": 267, "prosodi": 267, "220": 267, "credit": 267, "quota": 267, "humanlik": 267, "synthes": 267, "prebuilt": 267, "brand": 267, "polli": 267, "lifelik": 267, "engag": 267, "cognit": 267, "pivot": 267, "speech_kei": 267, "e8699507e7c04a4cb8afdba62986987c": 267, "speech_region": 267, "westus2": 267, "codelab": 267, "serivc": 267, "google_application_credenti": 267, "private_kei": 267, "private_key_id": 267, "client_email": 267, "neb6y5zodg2dyjmm": 267, "jdahcnaprd9": 267, "hamrg3jl2jisvzo": 267, "03aexjyoewtblwfpyxpnqyz4wkbgqdd": 267, "yvywcrbxeecn": 267, "client_id": 267, "gcp_service_account_json_path": 267, "gcp_kei": 267, "gcp_service_account_json": 267, "service_account": 267, "project_id": 267, "strang": 267, "firefli": 267, "374023": 267, "8e074b2dc4da026810d6b728e1588e79a745a08c": 267, "nmiievqibadanbgkqhkig9w0baqefaascbkcwggsjageaaoibaqcuq4fpo6ilib78": 267, "nmhyrhb1ei2pcegtthrlxbqwe6rswppttopqvplsbxs30frarpd6d4hgqel46gc2d": 267, "ncrhh8omrgkmb4pagzhcefjd": 267, "xjkcknsyipltqgbjau3pt": 267, "wmukihdyiyzdd6qjr3": 267, "nugghp8hkt1gxgcgdfkplwvoj9b3m6b5": 267, "3cvgbthciycccykhqnfon6mtee6ofmpz": 267, "nwxy3frewywjiwiiivpbqanoijs92gb": 267, "ffgsg2ta63tgszmbvvhjtd3a98ewmvwsz": 267, "nbipxjqh5qlh3ychdgt42mqbxrinn11kmyoc56a2ic4mvrq3i8oapos2l6uglwx9j": 267, "ns6sq5jw1agmbaaecggeat7ps2vknnk61fpvcanjszangwkonmfru48rgvn7rpetq": 267, "n9": 267, "gkgfzium3hlit5ek7jkzlmg4higcfkvrqjlpglsagi8rpvcubxs8xncljujvm3": 267, "nvhf9arln": 267, "s3nkedic8tpnv": 267, "ouji": 267, "yivhpqmewbsxmdtd2jd3vbsf34": 267, "7rou5dz": 267, "n56bgmbbneb6y5zodg2dyjmm": 267, "hamrg3jl2jisvzogrlenelkznrp": 267, "n9t0uwqiv5ejitovbzd": 267, "ezadffjftdrkfwv1qixemiak1atbs5bhknk5ecyffmpm": 267, "ncivgp3wrxq7nfrjktnwdjzeafjqw4ckwlmn4xc2fgqkbgqdjobnxjgo7gq1pfeiq": 267, "nvssuwjixy63tru6jwrrhr1b9xuph6vivh2dz4lpfpywer9lx6omtn6aizihtpq1i": 267, "n19eskh0h6hwbw2ydzwghzrmhb9xs5i": 267, "hibkwrz9nw77uwh1d9g": 267, "ejcn6a2zl2ig": 267, "nk03aexjyoewtblwfpyxpnqyz4wkbgqdd": 267, "yvywcrbxeecna0fohw8wiro6ds6g84m": 267, "nmczkr0yooxpb8zriim": 267, "mv7paccelasz4lzbc2hcb1mvv9p6o2ieuhqngabwlfwid": 267, "ng7cc7rm4qee87p5u4obuhpciuzpa3ueaqbhxmwd1oxw5rjvxenn": 267, "7g4jzkxeru": 267, "nqif7cw6zhwkbgby5dctjwdpssol8yfnc36jyitjufn43nms30xlifiidwmmtnpui": 267, "nrmom42sshi1sgtegslyboiij6zbf": 267, "vrmm4x1y9ahzsjyngnxw9bc": 267, "s5nlmrjcck": 267, "n6iw30jtumlivjgtumocqwsuaewbrmrszgjl4zin3xl": 267, "aifkcptgxfg7daogavz6b": 267, "njmuzkjpoirjfsvrkhuus7p2dhojr5n0hbyct9a09dwkfnyiu": 267, "awhqnib": 267, "pymv2m8": 267, "njttmms9orc6gzpus4r8m7ipa": 267, "myn": 267, "twhvrh3pbwxzqw3eiroqrepxhepuuyiwz6r": 267, "nuvpkw3rrl": 267, "wjihdqavo89wrk": 267, "gzldgynqyqixescgyeaj": 267, "8nsq1ugod7sqfpia": 267, "n3wur4a": 267, "uyt8": 267, "nuatk2ww": 267, "gtbc": 267, "eddjre1lz3f": 267, "uqgtsxlsv7t1mw4a7ekrkfl36p": 267, "nlnvefbtb3ucd8jj0lpbtoqru9i8n": 267, "a4fqopmljoyelgtyt1oi": 267, "vxfwya7cmrz": 267, "n49be21meuv3prv1qwrrteem": 267, "iam": 267, "gserviceaccount": 267, "109154742213348109867": 267, "auth_uri": 267, "oauth2": 267, "auth": 267, "token_uri": 267, "auth_provider_x509_cert_url": 267, "cert": 267, "client_x509_cert_url": 267, "x509": 267, "40strang": 267, "dg": 267, "aws_access_key_id": 267, "akiatzwwzr5twbunf6ix": 267, "aws_secret_access_kei": 267, "v0irhpugenwj1ca7savduf1uxw84bgkzqpowlfdr": 267, "aws_default_region": 267, "west": 267, "aag": 267, "nwarn": 267, "npress": 267, "623": 267, "52word": 267, "17word": 267}, "objects": {"mltk.core": [[113, 0, 1, "", "AudioDatasetMixin"], [161, 0, 1, "", "AutoEncoderEvaluationResults"], [161, 0, 1, "", "ClassifierEvaluationResults"], [114, 0, 1, "", "DatasetMixin"], [115, 0, 1, "", "EvaluateAutoEncoderMixin"], [116, 0, 1, "", "EvaluateClassifierMixin"], [117, 0, 1, "", "EvaluateMixin"], [161, 0, 1, "", "EvaluationResults"], [118, 0, 1, "", "ImageDatasetMixin"], [112, 3, 1, "", "KerasModel"], [120, 0, 1, "", "MltkDataset"], [121, 0, 1, "", "MltkModel"], [122, 0, 1, "", "MltkModelEvent"], [123, 0, 1, "", "SshMixin"], [176, 0, 1, "", "TfliteActivation"], [177, 0, 1, "", "TfliteAddLayer"], [179, 0, 1, "", "TfliteConv2DLayerOptions"], [178, 0, 1, "", "TfliteConv2dLayer"], [180, 0, 1, "", "TfliteConvParams"], [182, 0, 1, "", "TfliteDepthwiseConv2DLayerOptions"], [181, 0, 1, "", "TfliteDepthwiseConv2dLayer"], [183, 0, 1, "", "TfliteDepthwiseConvParams"], [184, 0, 1, "", "TfliteDequantizeLayer"], [186, 0, 1, "", "TfliteFullyConnectedLayer"], [187, 0, 1, "", "TfliteFullyConnectedLayerOptions"], [188, 0, 1, "", "TfliteFullyConnectedParams"], [190, 0, 1, "", "TfliteLayer"], [191, 0, 1, "", "TfliteModel"], [193, 0, 1, "", "TfliteModelParameters"], [192, 0, 1, "", "TflitePadding"], [195, 0, 1, "", "TflitePool2DLayerOptions"], [196, 0, 1, "", "TflitePoolParams"], [194, 0, 1, "", "TflitePooling2dLayer"], [197, 0, 1, "", "TfliteQuantization"], [198, 0, 1, "", "TfliteQuantizeLayer"], [199, 0, 1, "", "TfliteReshapeLayer"], [200, 0, 1, "", "TfliteShape"], [201, 0, 1, "", "TfliteTensor"], [202, 0, 1, "", "TfliteTransposeConvLayer"], [203, 0, 1, "", "TfliteTransposeConvLayerOptions"], [204, 0, 1, "", "TfliteTransposeConvParams"], [205, 0, 1, "", "TfliteUnidirectionalLstmLayer"], [206, 0, 1, "", "TfliteUnidirectionalLstmLayerOptions"], [124, 0, 1, "", "TrainMixin"], [126, 0, 1, "", "WeightsAndBiasesMixin"], [161, 4, 1, "", "evaluate_autoencoder"], [161, 4, 1, "", "evaluate_classifier"], [161, 4, 1, "", "evaluate_model"], [125, 4, 1, "", "list_mltk_models"], [125, 4, 1, "", "load_mltk_model"], [125, 4, 1, "", "load_mltk_model_with_path"], [125, 4, 1, "", "load_tflite_model"], [125, 4, 1, "", "load_tflite_or_keras_model"], [163, 4, 1, "", "profile_model"], [164, 4, 1, "", "quantize_model"], [165, 4, 1, "", "summarize_model"], [166, 4, 1, "", "train_model"], [167, 4, 1, "", "update_model_parameters"], [168, 4, 1, "", "view_model"]], "mltk.core.AudioDatasetMixin": [[113, 1, 1, "", "audio_classes"], [113, 1, 1, "", "audio_input_shape"], [113, 1, 1, "", "class_counts"], [113, 1, 1, "", "class_mode"], [113, 1, 1, "", "class_weights"], [113, 1, 1, "", "datagen"], [113, 1, 1, "", "datagen_context"], [113, 1, 1, "", "dataset"], [113, 1, 1, "", "follow_links"], [113, 1, 1, "", "frontend_settings"], [113, 2, 1, "", "get_datagen_creator"], [113, 2, 1, "", "get_shuffle_index_dir"], [113, 2, 1, "", "load_dataset"], [113, 1, 1, "", "loaded_subset"], [113, 1, 1, "", "sample_length_ms"], [113, 1, 1, "", "sample_rate_hz"], [113, 1, 1, "", "sample_weight"], [113, 1, 1, "", "shuffle"], [113, 1, 1, "", "shuffle_dataset_enabled"], [113, 1, 1, "", "steps_per_epoch"], [113, 2, 1, "", "summarize_dataset"], [113, 2, 1, "", "unload_dataset"], [113, 1, 1, "", "validation_batch_size"], [113, 1, 1, "", "validation_data"], [113, 1, 1, "", "validation_datagen"], [113, 1, 1, "", "validation_freq"], [113, 1, 1, "", "validation_split"], [113, 1, 1, "", "validation_steps"], [113, 1, 1, "", "x"], [113, 1, 1, "", "y"]], "mltk.core.AutoEncoderEvaluationResults": [[161, 2, 1, "", "__init__"], [161, 2, 1, "", "calculate"], [161, 1, 1, "", "class_stats"], [161, 1, 1, "", "classes"], [161, 2, 1, "", "generate_plots"], [161, 2, 1, "", "generate_summary"], [161, 1, 1, "", "overall_accuracy"], [161, 1, 1, "", "overall_fpr"], [161, 1, 1, "", "overall_pr_accuracy"], [161, 1, 1, "", "overall_precision"], [161, 1, 1, "", "overall_recall"], [161, 1, 1, "", "overall_roc_auc"], [161, 1, 1, "", "overall_thresholds"], [161, 1, 1, "", "overall_tpr"]], "mltk.core.ClassifierEvaluationResults": [[161, 2, 1, "", "__init__"], [161, 2, 1, "", "calculate"], [161, 1, 1, "", "class_accuracies"], [161, 1, 1, "", "classes"], [161, 1, 1, "", "confusion_matrix"], [161, 1, 1, "", "false_positive_rate"], [161, 1, 1, "", "fpr"], [161, 2, 1, "", "generate_plots"], [161, 2, 1, "", "generate_summary"], [161, 1, 1, "", "overall_accuracy"], [161, 1, 1, "", "precision"], [161, 1, 1, "", "recall"], [161, 1, 1, "", "roc_auc"], [161, 1, 1, "", "roc_auc_avg"], [161, 1, 1, "", "roc_thresholds"], [161, 1, 1, "", "tpr"]], "mltk.core.DatasetMixin": [[114, 1, 1, "", "class_counts"], [114, 1, 1, "", "class_weights"], [114, 1, 1, "", "dataset"], [114, 2, 1, "", "load_dataset"], [114, 1, 1, "", "loaded_subset"], [114, 1, 1, "", "sample_weight"], [114, 1, 1, "", "shuffle"], [114, 1, 1, "", "steps_per_epoch"], [114, 2, 1, "", "summarize_dataset"], [114, 2, 1, "", "unload_dataset"], [114, 1, 1, "", "validation_batch_size"], [114, 1, 1, "", "validation_data"], [114, 1, 1, "", "validation_freq"], [114, 1, 1, "", "validation_split"], [114, 1, 1, "", "validation_steps"], [114, 1, 1, "", "x"], [114, 1, 1, "", "y"]], "mltk.core.EvaluateAutoEncoderMixin": [[115, 1, 1, "", "eval_augment"], [115, 1, 1, "", "eval_classes"], [115, 1, 1, "", "eval_custom_function"], [115, 1, 1, "", "eval_max_samples_per_class"], [115, 1, 1, "", "eval_shuffle"], [115, 1, 1, "", "eval_steps_per_epoch"], [115, 2, 1, "", "get_scoring_function"], [115, 1, 1, "", "scoring_function"]], "mltk.core.EvaluateClassifierMixin": [[116, 1, 1, "", "eval_augment"], [116, 1, 1, "", "eval_custom_function"], [116, 1, 1, "", "eval_max_samples_per_class"], [116, 1, 1, "", "eval_shuffle"], [116, 1, 1, "", "eval_steps_per_epoch"]], "mltk.core.EvaluateMixin": [[117, 1, 1, "", "eval_custom_function"], [117, 1, 1, "", "eval_steps_per_epoch"]], "mltk.core.EvaluationResults": [[161, 2, 1, "", "__init__"], [161, 2, 1, "", "generate_plots"], [161, 2, 1, "", "generate_summary"], [161, 1, 1, "", "model_type"], [161, 1, 1, "", "name"]], "mltk.core.ImageDatasetMixin": [[118, 1, 1, "", "class_counts"], [118, 1, 1, "", "class_mode"], [118, 1, 1, "", "class_weights"], [118, 1, 1, "", "color_mode"], [118, 1, 1, "", "datagen"], [118, 1, 1, "", "datagen_context"], [118, 1, 1, "", "dataset"], [118, 1, 1, "", "follow_links"], [118, 2, 1, "", "get_datagen_creator"], [118, 2, 1, "", "get_shuffle_index_dir"], [118, 1, 1, "", "image_classes"], [118, 1, 1, "", "image_input_shape"], [118, 1, 1, "", "interpolation"], [118, 2, 1, "", "load_dataset"], [118, 1, 1, "", "loaded_subset"], [118, 1, 1, "", "sample_weight"], [118, 1, 1, "", "shuffle"], [118, 1, 1, "", "shuffle_dataset_enabled"], [118, 1, 1, "", "steps_per_epoch"], [118, 2, 1, "", "summarize_dataset"], [118, 1, 1, "", "target_size"], [118, 2, 1, "", "unload_dataset"], [118, 1, 1, "", "validation_batch_size"], [118, 1, 1, "", "validation_data"], [118, 1, 1, "", "validation_datagen"], [118, 1, 1, "", "validation_freq"], [118, 1, 1, "", "validation_split"], [118, 1, 1, "", "validation_steps"], [118, 1, 1, "", "x"], [118, 1, 1, "", "y"]], "mltk.core.MltkDataset": [[120, 2, 1, "", "load_dataset"], [120, 2, 1, "", "summarize_class_counts"], [120, 2, 1, "", "summarize_dataset"], [120, 2, 1, "", "unload_dataset"]], "mltk.core.MltkModel": [[121, 2, 1, "", "__init__"], [121, 2, 1, "", "add_archive_dir"], [121, 2, 1, "", "add_archive_file"], [121, 2, 1, "", "add_event_handler"], [121, 2, 1, "", "add_model_parameter_populate_callback"], [121, 2, 1, "", "add_tflite_metadata_entry"], [121, 1, 1, "", "archive_path"], [121, 1, 1, "", "attributes"], [121, 2, 1, "", "check_archive_file_is_writable"], [121, 1, 1, "", "classes"], [121, 1, 1, "", "cli"], [121, 2, 1, "", "create_log_dir"], [121, 2, 1, "", "create_logger"], [121, 1, 1, "", "description"], [121, 2, 1, "", "deserialize_tflite_metadata"], [121, 2, 1, "", "enable_test_mode"], [121, 2, 1, "", "get_archive_dir"], [121, 2, 1, "", "get_archive_file"], [121, 2, 1, "", "get_attribute"], [121, 2, 1, "", "get_tflite_metadata_summary"], [121, 1, 1, "", "h5_archive_path"], [121, 1, 1, "", "h5_log_dir_path"], [121, 1, 1, "", "input_shape"], [121, 1, 1, "", "keras_custom_objects"], [121, 1, 1, "", "log_dir"], [121, 1, 1, "", "model_parameters"], [121, 1, 1, "", "model_specification_path"], [121, 1, 1, "", "n_classes"], [121, 1, 1, "", "name"], [121, 2, 1, "", "populate_model_parameters"], [121, 2, 1, "", "serialize_tflite_metadata"], [121, 2, 1, "", "set_model_parameter"], [121, 2, 1, "", "summary"], [121, 1, 1, "", "test_mode_enabled"], [121, 1, 1, "", "tflite_archive_path"], [121, 1, 1, "", "tflite_log_dir_path"], [121, 1, 1, "", "tflite_metadata_entries"], [121, 2, 1, "", "trigger_event"], [121, 1, 1, "", "unquantized_tflite_log_dir_path"], [121, 1, 1, "", "version"]], "mltk.core.MltkModelEvent": [[122, 3, 1, "", "AFTER_BUILD_TRAIN_MODEL"], [122, 3, 1, "", "AFTER_LOAD_DATASET"], [122, 3, 1, "", "AFTER_MODEL_LOAD"], [122, 3, 1, "", "AFTER_PROFILE"], [122, 3, 1, "", "AFTER_QUANTIZE"], [122, 3, 1, "", "AFTER_SAVE_TRAIN_ARCHIVE"], [122, 3, 1, "", "AFTER_SAVE_TRAIN_MODEL"], [122, 3, 1, "", "AFTER_SAVE_TRAIN_RESULTS"], [122, 3, 1, "", "AFTER_TRAIN"], [122, 3, 1, "", "AFTER_UNLOAD_DATASET"], [122, 3, 1, "", "BEFORE_BUILD_TRAIN_MODEL"], [122, 3, 1, "", "BEFORE_LOAD_DATASET"], [122, 3, 1, "", "BEFORE_MODEL_LOAD"], [122, 3, 1, "", "BEFORE_QUANTIZE"], [122, 3, 1, "", "BEFORE_SAVE_TRAIN_ARCHIVE"], [122, 3, 1, "", "BEFORE_SAVE_TRAIN_MODEL"], [122, 3, 1, "", "BEFORE_SAVE_TRAIN_RESULTS"], [122, 3, 1, "", "BEFORE_TRAIN"], [122, 3, 1, "", "BEFORE_UNLOAD_DATASET"], [122, 3, 1, "", "EVALUATE_SHUTDOWN"], [122, 3, 1, "", "EVALUATE_STARTUP"], [122, 3, 1, "", "GENERATE_EVALUATE_PLOT"], [122, 3, 1, "", "POPULATE_TRAIN_CALLBACKS"], [122, 3, 1, "", "QUANTIZE_SHUTDOWN"], [122, 3, 1, "", "QUANTIZE_STARTUP"], [122, 3, 1, "", "SUMMARIZE_DATASET"], [122, 3, 1, "", "SUMMARIZE_MODEL"], [122, 3, 1, "", "TRAIN_SHUTDOWN"], [122, 3, 1, "", "TRAIN_STARTUP"], [122, 2, 1, "", "__init__"], [122, 2, 1, "", "__new__"], [122, 2, 1, "", "capitalize"], [122, 2, 1, "", "casefold"], [122, 2, 1, "", "center"], [122, 2, 1, "", "count"], [122, 2, 1, "", "encode"], [122, 2, 1, "", "endswith"], [122, 2, 1, "", "expandtabs"], [122, 2, 1, "", "find"], [122, 2, 1, "", "format"], [122, 2, 1, "", "format_map"], [122, 2, 1, "", "index"], [122, 2, 1, "", "isalnum"], [122, 2, 1, "", "isalpha"], [122, 2, 1, "", "isascii"], [122, 2, 1, "", "isdecimal"], [122, 2, 1, "", "isdigit"], [122, 2, 1, "", "isidentifier"], [122, 2, 1, "", "islower"], [122, 2, 1, "", "isnumeric"], [122, 2, 1, "", "isprintable"], [122, 2, 1, "", "isspace"], [122, 2, 1, "", "istitle"], [122, 2, 1, "", "isupper"], [122, 2, 1, "", "join"], [122, 2, 1, "", "ljust"], [122, 2, 1, "", "lower"], [122, 2, 1, "", "lstrip"], [122, 2, 1, "", "maketrans"], [122, 2, 1, "", "partition"], [122, 2, 1, "", "removeprefix"], [122, 2, 1, "", "removesuffix"], [122, 2, 1, "", "replace"], [122, 2, 1, "", "rfind"], [122, 2, 1, "", "rindex"], [122, 2, 1, "", "rjust"], [122, 2, 1, "", "rpartition"], [122, 2, 1, "", "rsplit"], [122, 2, 1, "", "rstrip"], [122, 2, 1, "", "split"], [122, 2, 1, "", "splitlines"], [122, 2, 1, "", "startswith"], [122, 2, 1, "", "strip"], [122, 2, 1, "", "swapcase"], [122, 2, 1, "", "title"], [122, 2, 1, "", "translate"], [122, 2, 1, "", "upper"], [122, 2, 1, "", "zfill"]], "mltk.core.SshMixin": [[123, 1, 1, "", "ssh_create_venv"], [123, 1, 1, "", "ssh_download_files"], [123, 1, 1, "", "ssh_environment"], [123, 1, 1, "", "ssh_remote_dir"], [123, 1, 1, "", "ssh_shutdown_cmds"], [123, 1, 1, "", "ssh_startup_cmds"], [123, 1, 1, "", "ssh_upload_files"]], "mltk.core.TfliteActivation": [[176, 3, 1, "", "NONE"], [176, 3, 1, "", "RELU"], [176, 3, 1, "", "RELU6"], [176, 3, 1, "", "RELU_N1_TO_1"], [176, 3, 1, "", "SIGN_BIT"], [176, 3, 1, "", "TANH"], [176, 2, 1, "", "__init__"], [176, 2, 1, "", "__new__"], [176, 2, 1, "", "as_integer_ratio"], [176, 2, 1, "", "bit_count"], [176, 2, 1, "", "bit_length"], [176, 2, 1, "", "conjugate"], [176, 3, 1, "", "denominator"], [176, 2, 1, "", "from_bytes"], [176, 3, 1, "", "imag"], [176, 2, 1, "", "is_integer"], [176, 3, 1, "", "numerator"], [176, 3, 1, "", "real"], [176, 2, 1, "", "to_bytes"], [176, 2, 1, "", "to_string"]], "mltk.core.TfliteAddLayer": [[177, 2, 1, "", "__init__"], [177, 1, 1, "", "activation"], [177, 2, 1, "", "from_flatbuffer"], [177, 2, 1, "", "get_input_data"], [177, 2, 1, "", "get_input_tensor"], [177, 2, 1, "", "get_output_data"], [177, 2, 1, "", "get_output_tensor"], [177, 1, 1, "", "index"], [177, 1, 1, "", "input1_data"], [177, 1, 1, "", "input1_tensor"], [177, 1, 1, "", "input2_data"], [177, 1, 1, "", "input2_tensor"], [177, 1, 1, "", "inputs"], [177, 1, 1, "", "metadata"], [177, 1, 1, "", "model"], [177, 1, 1, "", "n_inputs"], [177, 1, 1, "", "n_outputs"], [177, 1, 1, "", "name"], [177, 1, 1, "", "opcode"], [177, 1, 1, "", "opcode_str"], [177, 1, 1, "", "options"], [177, 1, 1, "", "output_data"], [177, 1, 1, "", "output_tensor"], [177, 1, 1, "", "outputs"]], "mltk.core.TfliteConv2DLayerOptions": [[179, 2, 1, "", "__init__"], [179, 1, 1, "", "activation"], [179, 1, 1, "", "activation_str"], [179, 1, 1, "", "options_type"], [179, 1, 1, "", "options_type_str"], [179, 1, 1, "", "padding"], [179, 1, 1, "", "padding_str"], [179, 1, 1, "", "stride_height"], [179, 1, 1, "", "stride_width"]], "mltk.core.TfliteConv2dLayer": [[178, 2, 1, "", "__init__"], [178, 1, 1, "", "activation"], [178, 1, 1, "", "bias_data"], [178, 1, 1, "", "bias_tensor"], [178, 1, 1, "", "filters"], [178, 1, 1, "", "filters_data"], [178, 1, 1, "", "filters_tensor"], [178, 2, 1, "", "from_flatbuffer"], [178, 2, 1, "", "get_input_data"], [178, 2, 1, "", "get_input_tensor"], [178, 2, 1, "", "get_output_data"], [178, 2, 1, "", "get_output_tensor"], [178, 1, 1, "", "index"], [178, 1, 1, "", "input_data"], [178, 1, 1, "", "input_tensor"], [178, 1, 1, "", "inputs"], [178, 1, 1, "", "kernel_size"], [178, 1, 1, "", "metadata"], [178, 1, 1, "", "model"], [178, 1, 1, "", "n_inputs"], [178, 1, 1, "", "n_outputs"], [178, 1, 1, "", "name"], [178, 1, 1, "", "opcode"], [178, 1, 1, "", "opcode_str"], [178, 1, 1, "", "options"], [178, 1, 1, "", "output_data"], [178, 1, 1, "", "output_tensor"], [178, 1, 1, "", "outputs"], [178, 1, 1, "", "padding"], [178, 1, 1, "", "params"], [178, 1, 1, "", "strides"], [178, 1, 1, "", "use_bias"]], "mltk.core.TfliteConvParams": [[180, 2, 1, "", "__init__"], [180, 2, 1, "", "calculate"], [180, 3, 1, "", "dilation_height_factor"], [180, 3, 1, "", "dilation_width_factor"], [180, 3, 1, "", "input_offset"], [180, 3, 1, "", "output_offset"], [180, 3, 1, "", "padding"], [180, 3, 1, "", "per_channel_output_multiplier"], [180, 3, 1, "", "per_channel_output_shift"], [180, 3, 1, "", "quantized_activation_max"], [180, 3, 1, "", "quantized_activation_min"], [180, 3, 1, "", "stride_height"], [180, 3, 1, "", "stride_width"], [180, 3, 1, "", "weights_offset"]], "mltk.core.TfliteDepthwiseConv2DLayerOptions": [[182, 2, 1, "", "__init__"], [182, 1, 1, "", "activation"], [182, 1, 1, "", "activation_str"], [182, 1, 1, "", "multiplier"], [182, 1, 1, "", "options_type"], [182, 1, 1, "", "options_type_str"], [182, 1, 1, "", "padding"], [182, 1, 1, "", "padding_str"], [182, 1, 1, "", "stride_height"], [182, 1, 1, "", "stride_width"]], "mltk.core.TfliteDepthwiseConv2dLayer": [[181, 2, 1, "", "__init__"], [181, 1, 1, "", "activation"], [181, 1, 1, "", "bias_data"], [181, 1, 1, "", "bias_tensor"], [181, 1, 1, "", "filters_data"], [181, 1, 1, "", "filters_tensor"], [181, 2, 1, "", "from_flatbuffer"], [181, 2, 1, "", "get_input_data"], [181, 2, 1, "", "get_input_tensor"], [181, 2, 1, "", "get_output_data"], [181, 2, 1, "", "get_output_tensor"], [181, 1, 1, "", "index"], [181, 1, 1, "", "input_data"], [181, 1, 1, "", "input_tensor"], [181, 1, 1, "", "inputs"], [181, 1, 1, "", "kernel_size"], [181, 1, 1, "", "metadata"], [181, 1, 1, "", "model"], [181, 1, 1, "", "multiplier"], [181, 1, 1, "", "n_inputs"], [181, 1, 1, "", "n_outputs"], [181, 1, 1, "", "name"], [181, 1, 1, "", "opcode"], [181, 1, 1, "", "opcode_str"], [181, 1, 1, "", "options"], [181, 1, 1, "", "output_data"], [181, 1, 1, "", "output_tensor"], [181, 1, 1, "", "outputs"], [181, 1, 1, "", "padding"], [181, 1, 1, "", "params"], [181, 1, 1, "", "strides"], [181, 1, 1, "", "use_bias"]], "mltk.core.TfliteDepthwiseConvParams": [[183, 2, 1, "", "__init__"], [183, 2, 1, "", "calculate"], [183, 3, 1, "", "depth_multiplier"], [183, 3, 1, "", "dilation_height_factor"], [183, 3, 1, "", "dilation_width_factor"], [183, 3, 1, "", "input_offset"], [183, 3, 1, "", "output_offset"], [183, 3, 1, "", "padding"], [183, 3, 1, "", "per_channel_output_multiplier"], [183, 3, 1, "", "per_channel_output_shift"], [183, 3, 1, "", "quantized_activation_max"], [183, 3, 1, "", "quantized_activation_min"], [183, 3, 1, "", "stride_height"], [183, 3, 1, "", "stride_width"], [183, 3, 1, "", "weights_offset"]], "mltk.core.TfliteDequantizeLayer": [[184, 2, 1, "", "__init__"], [184, 2, 1, "", "from_flatbuffer"], [184, 2, 1, "", "get_input_data"], [184, 2, 1, "", "get_input_tensor"], [184, 2, 1, "", "get_output_data"], [184, 2, 1, "", "get_output_tensor"], [184, 1, 1, "", "index"], [184, 1, 1, "", "input_data"], [184, 1, 1, "", "input_tensor"], [184, 1, 1, "", "inputs"], [184, 1, 1, "", "metadata"], [184, 1, 1, "", "model"], [184, 1, 1, "", "n_inputs"], [184, 1, 1, "", "n_outputs"], [184, 1, 1, "", "name"], [184, 1, 1, "", "opcode"], [184, 1, 1, "", "opcode_str"], [184, 1, 1, "", "options"], [184, 1, 1, "", "output_data"], [184, 1, 1, "", "output_tensor"], [184, 1, 1, "", "outputs"]], "mltk.core.TfliteFullyConnectedLayer": [[186, 2, 1, "", "__init__"], [186, 1, 1, "", "accumulator_depth"], [186, 1, 1, "", "activation"], [186, 1, 1, "", "bias_data"], [186, 1, 1, "", "bias_tensor"], [186, 2, 1, "", "from_flatbuffer"], [186, 2, 1, "", "get_input_data"], [186, 2, 1, "", "get_input_tensor"], [186, 2, 1, "", "get_output_data"], [186, 2, 1, "", "get_output_tensor"], [186, 1, 1, "", "index"], [186, 1, 1, "", "input_data"], [186, 1, 1, "", "input_tensor"], [186, 1, 1, "", "inputs"], [186, 1, 1, "", "metadata"], [186, 1, 1, "", "model"], [186, 1, 1, "", "n_inputs"], [186, 1, 1, "", "n_outputs"], [186, 1, 1, "", "name"], [186, 1, 1, "", "opcode"], [186, 1, 1, "", "opcode_str"], [186, 1, 1, "", "options"], [186, 1, 1, "", "output_data"], [186, 1, 1, "", "output_tensor"], [186, 1, 1, "", "outputs"], [186, 1, 1, "", "params"], [186, 1, 1, "", "units"], [186, 1, 1, "", "use_bias"], [186, 1, 1, "", "weights_data"], [186, 1, 1, "", "weights_tensor"]], "mltk.core.TfliteFullyConnectedLayerOptions": [[187, 2, 1, "", "__init__"], [187, 1, 1, "", "activation"], [187, 1, 1, "", "activation_str"], [187, 1, 1, "", "options_type"], [187, 1, 1, "", "options_type_str"]], "mltk.core.TfliteFullyConnectedParams": [[188, 2, 1, "", "__init__"], [188, 2, 1, "", "calculate"], [188, 3, 1, "", "input_offset"], [188, 3, 1, "", "output_multiplier"], [188, 3, 1, "", "output_offset"], [188, 3, 1, "", "output_shift"], [188, 3, 1, "", "quantized_activation_max"], [188, 3, 1, "", "quantized_activation_min"], [188, 3, 1, "", "weights_offset"]], "mltk.core.TfliteLayer": [[190, 2, 1, "", "__init__"], [190, 2, 1, "", "from_flatbuffer"], [190, 2, 1, "", "get_input_data"], [190, 2, 1, "", "get_input_tensor"], [190, 2, 1, "", "get_output_data"], [190, 2, 1, "", "get_output_tensor"], [190, 1, 1, "", "index"], [190, 1, 1, "", "inputs"], [190, 1, 1, "", "metadata"], [190, 1, 1, "", "model"], [190, 1, 1, "", "n_inputs"], [190, 1, 1, "", "n_outputs"], [190, 1, 1, "", "name"], [190, 1, 1, "", "opcode"], [190, 1, 1, "", "opcode_str"], [190, 1, 1, "", "options"], [190, 1, 1, "", "outputs"]], "mltk.core.TfliteModel": [[191, 2, 1, "", "__init__"], [191, 2, 1, "", "add_metadata"], [191, 2, 1, "", "dequantize_output_to_float32"], [191, 1, 1, "", "description"], [191, 1, 1, "", "filename"], [191, 1, 1, "", "flatbuffer_data"], [191, 1, 1, "", "flatbuffer_model"], [191, 1, 1, "", "flatbuffer_size"], [191, 1, 1, "", "flatbuffer_subgraph"], [191, 2, 1, "", "get_all_metadata"], [191, 2, 1, "", "get_flatbuffer_subgraph"], [191, 2, 1, "", "get_input_data"], [191, 2, 1, "", "get_input_tensor"], [191, 2, 1, "", "get_metadata"], [191, 2, 1, "", "get_output_data"], [191, 2, 1, "", "get_output_tensor"], [191, 2, 1, "", "get_tensor"], [191, 2, 1, "", "get_tensor_data"], [191, 1, 1, "", "inputs"], [191, 1, 1, "", "layers"], [191, 2, 1, "", "load_flatbuffer_file"], [191, 1, 1, "", "n_inputs"], [191, 1, 1, "", "n_outputs"], [191, 1, 1, "", "n_subgraphs"], [191, 1, 1, "", "name"], [191, 1, 1, "", "outputs"], [191, 1, 1, "", "path"], [191, 2, 1, "", "predict"], [191, 2, 1, "", "quantize_to_input_dtype"], [191, 2, 1, "", "regenerate_flatbuffer"], [191, 2, 1, "", "remove_metadata"], [191, 2, 1, "", "save"], [191, 1, 1, "", "selected_model_subgraph"], [191, 2, 1, "", "summary"], [191, 1, 1, "", "tensors"]], "mltk.core.TfliteModelParameters": [[193, 2, 1, "", "__init__"], [193, 2, 1, "", "__new__"], [193, 2, 1, "", "add_to_tflite_file"], [193, 2, 1, "", "add_to_tflite_flatbuffer"], [193, 2, 1, "", "add_to_tflite_model"], [193, 2, 1, "", "clear"], [193, 2, 1, "", "copy"], [193, 2, 1, "", "deserialize"], [193, 2, 1, "", "fromkeys"], [193, 2, 1, "", "get"], [193, 2, 1, "", "items"], [193, 2, 1, "", "keys"], [193, 2, 1, "", "load_from_tflite_file"], [193, 2, 1, "", "load_from_tflite_flatbuffer"], [193, 2, 1, "", "load_from_tflite_model"], [193, 2, 1, "", "pop"], [193, 2, 1, "", "popitem"], [193, 2, 1, "", "put"], [193, 2, 1, "", "serialize"], [193, 2, 1, "", "setdefault"], [193, 2, 1, "", "summary"], [193, 2, 1, "", "update"], [193, 2, 1, "", "values"]], "mltk.core.TflitePadding": [[192, 3, 1, "", "SAME"], [192, 3, 1, "", "VALID"], [192, 2, 1, "", "__init__"], [192, 2, 1, "", "__new__"], [192, 2, 1, "", "as_integer_ratio"], [192, 2, 1, "", "bit_count"], [192, 2, 1, "", "bit_length"], [192, 2, 1, "", "conjugate"], [192, 3, 1, "", "denominator"], [192, 2, 1, "", "from_bytes"], [192, 1, 1, "", "height"], [192, 3, 1, "", "imag"], [192, 2, 1, "", "is_integer"], [192, 3, 1, "", "numerator"], [192, 3, 1, "", "real"], [192, 2, 1, "", "to_bytes"], [192, 2, 1, "", "to_string"], [192, 1, 1, "", "width"]], "mltk.core.TflitePool2DLayerOptions": [[195, 2, 1, "", "__init__"], [195, 1, 1, "", "activation"], [195, 1, 1, "", "activation_str"], [195, 1, 1, "", "filter_height"], [195, 1, 1, "", "filter_width"], [195, 1, 1, "", "options_type"], [195, 1, 1, "", "options_type_str"], [195, 1, 1, "", "padding"], [195, 1, 1, "", "padding_str"], [195, 1, 1, "", "stride_height"], [195, 1, 1, "", "stride_width"]], "mltk.core.TflitePoolParams": [[196, 2, 1, "", "__init__"], [196, 2, 1, "", "calculate"], [196, 3, 1, "", "padding"], [196, 3, 1, "", "quantized_activation_max"], [196, 3, 1, "", "quantized_activation_min"], [196, 3, 1, "", "stride_height"], [196, 3, 1, "", "stride_width"]], "mltk.core.TflitePooling2dLayer": [[194, 2, 1, "", "__init__"], [194, 1, 1, "", "activation"], [194, 2, 1, "", "from_flatbuffer"], [194, 2, 1, "", "get_input_data"], [194, 2, 1, "", "get_input_tensor"], [194, 2, 1, "", "get_output_data"], [194, 2, 1, "", "get_output_tensor"], [194, 1, 1, "", "index"], [194, 1, 1, "", "input_data"], [194, 1, 1, "", "input_tensor"], [194, 1, 1, "", "inputs"], [194, 1, 1, "", "metadata"], [194, 1, 1, "", "model"], [194, 1, 1, "", "n_inputs"], [194, 1, 1, "", "n_outputs"], [194, 1, 1, "", "name"], [194, 1, 1, "", "opcode"], [194, 1, 1, "", "opcode_str"], [194, 1, 1, "", "options"], [194, 1, 1, "", "output_data"], [194, 1, 1, "", "output_tensor"], [194, 1, 1, "", "outputs"], [194, 1, 1, "", "padding"], [194, 1, 1, "", "params"], [194, 1, 1, "", "pool_size"], [194, 1, 1, "", "strides"]], "mltk.core.TfliteQuantization": [[197, 2, 1, "", "__init__"], [197, 1, 1, "", "n_channels"], [197, 1, 1, "", "quantization_dimension"], [197, 1, 1, "", "scale"], [197, 1, 1, "", "zeropoint"]], "mltk.core.TfliteQuantizeLayer": [[198, 2, 1, "", "__init__"], [198, 2, 1, "", "from_flatbuffer"], [198, 2, 1, "", "get_input_data"], [198, 2, 1, "", "get_input_tensor"], [198, 2, 1, "", "get_output_data"], [198, 2, 1, "", "get_output_tensor"], [198, 1, 1, "", "index"], [198, 1, 1, "", "input_data"], [198, 1, 1, "", "input_tensor"], [198, 1, 1, "", "inputs"], [198, 1, 1, "", "metadata"], [198, 1, 1, "", "model"], [198, 1, 1, "", "n_inputs"], [198, 1, 1, "", "n_outputs"], [198, 1, 1, "", "name"], [198, 1, 1, "", "opcode"], [198, 1, 1, "", "opcode_str"], [198, 1, 1, "", "options"], [198, 1, 1, "", "output_data"], [198, 1, 1, "", "output_tensor"], [198, 1, 1, "", "outputs"]], "mltk.core.TfliteReshapeLayer": [[199, 2, 1, "", "__init__"], [199, 2, 1, "", "from_flatbuffer"], [199, 2, 1, "", "get_input_data"], [199, 2, 1, "", "get_input_tensor"], [199, 2, 1, "", "get_output_data"], [199, 2, 1, "", "get_output_tensor"], [199, 1, 1, "", "index"], [199, 1, 1, "", "input_data"], [199, 1, 1, "", "input_tensor"], [199, 1, 1, "", "inputs"], [199, 1, 1, "", "metadata"], [199, 1, 1, "", "model"], [199, 1, 1, "", "n_input_elements"], [199, 1, 1, "", "n_inputs"], [199, 1, 1, "", "n_outputs"], [199, 1, 1, "", "name"], [199, 1, 1, "", "opcode"], [199, 1, 1, "", "opcode_str"], [199, 1, 1, "", "options"], [199, 1, 1, "", "output_data"], [199, 1, 1, "", "output_tensor"], [199, 1, 1, "", "outputs"], [199, 1, 1, "", "requires_copy"]], "mltk.core.TfliteShape": [[200, 2, 1, "", "__new__"], [200, 2, 1, "", "count"], [200, 1, 1, "", "flat_size"], [200, 2, 1, "", "index"]], "mltk.core.TfliteTensor": [[201, 2, 1, "", "__init__"], [201, 1, 1, "", "data"], [201, 1, 1, "", "dtype"], [201, 1, 1, "", "dtype_str"], [201, 1, 1, "", "index"], [201, 1, 1, "", "is_variable"], [201, 1, 1, "", "model"], [201, 1, 1, "", "quantization"], [201, 1, 1, "", "shape"], [201, 2, 1, "", "shape_dtype_str"], [201, 1, 1, "", "size_bytes"]], "mltk.core.TfliteTransposeConvLayer": [[202, 2, 1, "", "__init__"], [202, 1, 1, "", "bias_data"], [202, 1, 1, "", "bias_tensor"], [202, 1, 1, "", "filters"], [202, 1, 1, "", "filters_data"], [202, 1, 1, "", "filters_tensor"], [202, 2, 1, "", "from_flatbuffer"], [202, 2, 1, "", "get_input_data"], [202, 2, 1, "", "get_input_tensor"], [202, 2, 1, "", "get_output_data"], [202, 2, 1, "", "get_output_tensor"], [202, 1, 1, "", "index"], [202, 1, 1, "", "input_data"], [202, 1, 1, "", "input_tensor"], [202, 1, 1, "", "inputs"], [202, 1, 1, "", "kernel_size"], [202, 1, 1, "", "metadata"], [202, 1, 1, "", "model"], [202, 1, 1, "", "n_inputs"], [202, 1, 1, "", "n_outputs"], [202, 1, 1, "", "name"], [202, 1, 1, "", "opcode"], [202, 1, 1, "", "opcode_str"], [202, 1, 1, "", "options"], [202, 1, 1, "", "output_data"], [202, 1, 1, "", "output_tensor"], [202, 1, 1, "", "outputs"], [202, 1, 1, "", "padding"], [202, 1, 1, "", "params"], [202, 1, 1, "", "strides"], [202, 1, 1, "", "use_bias"]], "mltk.core.TfliteTransposeConvLayerOptions": [[203, 2, 1, "", "__init__"], [203, 1, 1, "", "options_type"], [203, 1, 1, "", "options_type_str"], [203, 1, 1, "", "padding"], [203, 1, 1, "", "padding_str"], [203, 1, 1, "", "stride_height"], [203, 1, 1, "", "stride_width"]], "mltk.core.TfliteTransposeConvParams": [[204, 2, 1, "", "__init__"], [204, 2, 1, "", "calculate"], [204, 3, 1, "", "input_offset"], [204, 3, 1, "", "output_offset"], [204, 3, 1, "", "padding"], [204, 3, 1, "", "per_channel_output_multiplier"], [204, 3, 1, "", "per_channel_output_shift"], [204, 3, 1, "", "quantized_activation_max"], [204, 3, 1, "", "quantized_activation_min"], [204, 3, 1, "", "stride_height"], [204, 3, 1, "", "stride_width"], [204, 3, 1, "", "weights_offset"]], "mltk.core.TfliteUnidirectionalLstmLayer": [[205, 2, 1, "", "__init__"], [205, 1, 1, "", "activation"], [205, 1, 1, "", "cell_clip"], [205, 1, 1, "", "cell_gate_bias_tensor"], [205, 1, 1, "", "cell_layer_norm_coeff_tensor"], [205, 1, 1, "", "cell_state_tensor"], [205, 1, 1, "", "cell_to_forget_weights_tensor"], [205, 1, 1, "", "cell_to_input_weights_tensor"], [205, 1, 1, "", "cell_to_output_weights_tensor"], [205, 1, 1, "", "forget_gate_bias_tensor"], [205, 1, 1, "", "forget_layer_norm_coeff_tensor"], [205, 2, 1, "", "from_flatbuffer"], [205, 2, 1, "", "get_input_data"], [205, 2, 1, "", "get_input_tensor"], [205, 2, 1, "", "get_output_data"], [205, 2, 1, "", "get_output_tensor"], [205, 1, 1, "", "index"], [205, 1, 1, "", "input_data"], [205, 1, 1, "", "input_gate_bias_tensor"], [205, 1, 1, "", "input_layer_norm_coeff_tensor"], [205, 1, 1, "", "input_tensor"], [205, 1, 1, "", "input_to_cell_weights_tensor"], [205, 1, 1, "", "input_to_forget_weights_tensor"], [205, 1, 1, "", "input_to_input_weights_tensor"], [205, 1, 1, "", "input_to_output_weights_tensor"], [205, 1, 1, "", "inputs"], [205, 1, 1, "", "is_time_major"], [205, 1, 1, "", "metadata"], [205, 1, 1, "", "model"], [205, 1, 1, "", "n_cells"], [205, 1, 1, "", "n_inputs"], [205, 1, 1, "", "n_outputs"], [205, 1, 1, "", "name"], [205, 1, 1, "", "opcode"], [205, 1, 1, "", "opcode_str"], [205, 1, 1, "", "options"], [205, 1, 1, "", "output_data"], [205, 1, 1, "", "output_gate_bias_tensor"], [205, 1, 1, "", "output_layer_norm_coeff_tensor"], [205, 1, 1, "", "output_state_tensor"], [205, 1, 1, "", "output_tensor"], [205, 1, 1, "", "outputs"], [205, 1, 1, "", "proj_clip"], [205, 1, 1, "", "projection_bias_tensor"], [205, 1, 1, "", "projection_weights_tensor"], [205, 1, 1, "", "recurrent_to_cell_weights_tensor"], [205, 1, 1, "", "recurrent_to_forget_weights_tensor"], [205, 1, 1, "", "recurrent_to_input_weights_tensor"], [205, 1, 1, "", "recurrent_to_output_weights_tensor"]], "mltk.core.TfliteUnidirectionalLstmLayerOptions": [[206, 2, 1, "", "__init__"], [206, 1, 1, "", "activation"], [206, 1, 1, "", "activation_str"], [206, 1, 1, "", "options_type"], [206, 1, 1, "", "options_type_str"]], "mltk.core.TrainMixin": [[124, 1, 1, "", "batch_size"], [124, 1, 1, "", "build_model_function"], [124, 1, 1, "", "checkpoint"], [124, 1, 1, "", "checkpoints_dir"], [124, 1, 1, "", "checkpoints_enabled"], [124, 1, 1, "", "early_stopping"], [124, 1, 1, "", "epochs"], [124, 2, 1, "", "get_checkpoint_path"], [124, 2, 1, "", "get_weights_path"], [124, 1, 1, "", "loss"], [124, 1, 1, "", "lr_schedule"], [124, 1, 1, "", "metrics"], [124, 1, 1, "", "on_save_keras_model"], [124, 1, 1, "", "on_training_complete"], [124, 1, 1, "", "optimizer"], [124, 1, 1, "", "reduce_lr_on_plateau"], [124, 1, 1, "", "tensorboard"], [124, 1, 1, "", "tflite_converter"], [124, 1, 1, "", "train_callbacks"], [124, 1, 1, "", "train_kwargs"], [124, 1, 1, "", "weights_dir"], [124, 1, 1, "", "weights_file_format"]], "mltk.core.WeightsAndBiasesMixin": [[126, 1, 1, "", "wandb_callback"], [126, 1, 1, "", "wandb_config"], [126, 1, 1, "", "wandb_init_kwargs"], [126, 1, 1, "", "wandb_is_disabled"], [126, 1, 1, "", "wandb_is_initialized"], [126, 2, 1, "", "wandb_log"], [126, 1, 1, "", "wandb_model_checkpoint_callback"], [126, 2, 1, "", "wandb_save"], [126, 1, 1, "", "wandb_session_id"]], "mltk.core.preprocess.audio.audio_feature_generator": [[83, 0, 1, "", "AudioFeatureGenerator"], [84, 0, 1, "", "AudioFeatureGeneratorSettings"]], "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator": [[83, 2, 1, "", "__init__"], [83, 2, 1, "", "activity_was_detected"], [83, 2, 1, "", "process_sample"]], "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings": [[84, 2, 1, "", "__init__"], [84, 2, 1, "", "__new__"], [84, 1, 1, "", "activity_detection_alpha_a"], [84, 1, 1, "", "activity_detection_alpha_b"], [84, 1, 1, "", "activity_detection_arm_threshold"], [84, 1, 1, "", "activity_detection_enable"], [84, 1, 1, "", "activity_detection_trip_threshold"], [84, 2, 1, "", "clear"], [84, 2, 1, "", "copy"], [84, 1, 1, "", "dc_notch_filter_coefficient"], [84, 1, 1, "", "dc_notch_filter_enable"], [84, 1, 1, "", "fft_length"], [84, 1, 1, "", "filterbank_lower_band_limit"], [84, 1, 1, "", "filterbank_n_channels"], [84, 1, 1, "", "filterbank_upper_band_limit"], [84, 2, 1, "", "fromkeys"], [84, 2, 1, "", "get"], [84, 2, 1, "", "items"], [84, 2, 1, "", "keys"], [84, 1, 1, "", "log_scale_enable"], [84, 1, 1, "", "log_scale_shift"], [84, 1, 1, "", "noise_reduction_enable"], [84, 1, 1, "", "noise_reduction_even_smoothing"], [84, 1, 1, "", "noise_reduction_min_signal_remaining"], [84, 1, 1, "", "noise_reduction_odd_smoothing"], [84, 1, 1, "", "noise_reduction_smoothing_bits"], [84, 1, 1, "", "pcan_enable"], [84, 1, 1, "", "pcan_gain_bits"], [84, 1, 1, "", "pcan_offset"], [84, 1, 1, "", "pcan_strength"], [84, 2, 1, "", "pop"], [84, 2, 1, "", "popitem"], [84, 1, 1, "", "quantize_dynamic_scale_enable"], [84, 1, 1, "", "quantize_dynamic_scale_range_db"], [84, 1, 1, "", "sample_length"], [84, 1, 1, "", "sample_length_ms"], [84, 1, 1, "", "sample_rate_hz"], [84, 2, 1, "", "setdefault"], [84, 1, 1, "", "spectrogram_shape"], [84, 2, 1, "", "update"], [84, 2, 1, "", "values"], [84, 1, 1, "", "window_size_ms"], [84, 1, 1, "", "window_step_ms"]], "mltk.core.preprocess.audio.parallel_generator": [[81, 0, 1, "", "ParallelAudioDataGenerator"], [82, 0, 1, "", "ParallelProcessParams"]], "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator": [[81, 2, 1, "", "__init__"], [81, 2, 1, "", "adjust_length"], [81, 2, 1, "", "apply_frontend"], [81, 2, 1, "", "apply_transform"], [81, 1, 1, "", "default_transform"], [81, 2, 1, "", "flow_from_directory"], [81, 2, 1, "", "get_random_transform"], [81, 1, 1, "", "sample_length"], [81, 1, 1, "", "sample_length_ms"], [81, 1, 1, "", "sample_rate_hz"], [81, 1, 1, "", "sample_shape"], [81, 2, 1, "", "standardize"]], "mltk.core.preprocess.audio.parallel_generator.ParallelProcessParams": [[82, 2, 1, "", "__init__"]], "mltk.core.preprocess.image.parallel_generator": [[86, 0, 1, "", "ParallelImageDataGenerator"], [87, 0, 1, "", "ParallelProcessParams"]], "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator": [[86, 2, 1, "", "__init__"], [86, 2, 1, "", "apply_transform"], [86, 1, 1, "", "default_transform"], [86, 2, 1, "", "fit"], [86, 2, 1, "", "flow"], [86, 2, 1, "", "flow_from_dataframe"], [86, 2, 1, "", "flow_from_directory"], [86, 2, 1, "", "get_random_transform"], [86, 2, 1, "", "random_transform"], [86, 2, 1, "", "standardize"]], "mltk.core.preprocess.image.parallel_generator.ParallelProcessParams": [[87, 2, 1, "", "__init__"]], "mltk.core.preprocess.utils": [[80, 5, 0, "-", "audio"], [85, 5, 0, "-", "image"], [89, 5, 0, "-", "list_directory"], [90, 5, 0, "-", "normalize"], [91, 5, 0, "-", "tf_dataset"]], "mltk.core.preprocess.utils.audio": [[80, 4, 1, "", "adjust_length"], [80, 4, 1, "", "apply_frontend"], [80, 4, 1, "", "read_audio_file"], [80, 4, 1, "", "write_audio_file"]], "mltk.core.preprocess.utils.image": [[85, 4, 1, "", "read_image_file"], [85, 4, 1, "", "write_image_file"]], "mltk.core.preprocess.utils.list_directory": [[89, 4, 1, "", "list_dataset_directory"], [89, 4, 1, "", "list_valid_filenames_in_directory"], [89, 4, 1, "", "shuffle_file_list_by_group"], [89, 4, 1, "", "split_file_list"]], "mltk.core.preprocess.utils.normalize": [[90, 4, 1, "", "normalize"]], "mltk.core.preprocess.utils.tf_dataset": [[91, 4, 1, "", "enable_numpy_behavior"], [91, 4, 1, "", "load_audio_directory"], [91, 4, 1, "", "load_image_directory"], [91, 4, 1, "", "parallel_process"]], "mltk.core.profiling_results": [[163, 0, 1, "", "ProfilingLayerResult"], [163, 0, 1, "", "ProfilingModelResults"]], "mltk.core.profiling_results.ProfilingLayerResult": [[163, 2, 1, "", "__init__"], [163, 1, 1, "", "accelerator_cycles"], [163, 1, 1, "", "cpu_cycles"], [163, 1, 1, "", "energy"], [163, 1, 1, "", "error_msg"], [163, 2, 1, "", "get_summary"], [163, 1, 1, "", "index"], [163, 1, 1, "", "input_dtype_str"], [163, 1, 1, "", "input_shape_str"], [163, 1, 1, "", "is_accelerated"], [163, 1, 1, "", "is_unsupported"], [163, 1, 1, "", "macs"], [163, 1, 1, "", "name"], [163, 1, 1, "", "opcode"], [163, 1, 1, "", "opcode_str"], [163, 1, 1, "", "ops"], [163, 1, 1, "", "options_str"], [163, 1, 1, "", "output_dtype_str"], [163, 1, 1, "", "output_shape_str"], [163, 1, 1, "", "tflite_layer"], [163, 1, 1, "", "time"]], "mltk.core.profiling_results.ProfilingModelResults": [[163, 2, 1, "", "__init__"], [163, 1, 1, "", "accelerator"], [163, 1, 1, "", "accelerator_cycles"], [163, 1, 1, "", "cpu_clock_rate"], [163, 1, 1, "", "cpu_cycles"], [163, 1, 1, "", "cpu_utilization"], [163, 1, 1, "", "energy"], [163, 1, 1, "", "flatbuffer_size"], [163, 2, 1, "", "generate_report"], [163, 2, 1, "", "get_summary"], [163, 1, 1, "", "input_dtype_str"], [163, 1, 1, "", "input_shape_str"], [163, 1, 1, "", "is_simulated"], [163, 1, 1, "", "layers"], [163, 1, 1, "", "macs"], [163, 1, 1, "", "n_layers"], [163, 1, 1, "", "n_unsupported_layers"], [163, 1, 1, "", "name"], [163, 1, 1, "", "ops"], [163, 1, 1, "", "output_dtype_str"], [163, 1, 1, "", "output_shape_str"], [163, 1, 1, "", "platform"], [163, 1, 1, "", "runtime_memory_bytes"], [163, 2, 1, "", "stat_total"], [163, 1, 1, "", "tflite_micro_model_details"], [163, 1, 1, "", "tflite_model"], [163, 1, 1, "", "time"], [163, 2, 1, "", "to_csv"], [163, 2, 1, "", "to_dict"], [163, 2, 1, "", "to_json"], [163, 2, 1, "", "to_string"], [163, 1, 1, "", "unsupported_layers"]], "mltk.core.tflite_micro": [[175, 0, 1, "", "TfliteMicro"], [171, 0, 1, "", "TfliteMicroLayerError"], [172, 0, 1, "", "TfliteMicroModel"], [173, 0, 1, "", "TfliteMicroModelDetails"], [174, 0, 1, "", "TfliteMicroProfiledLayerResult"]], "mltk.core.tflite_micro.TfliteMicro": [[175, 2, 1, "", "accelerator_is_supported"], [175, 2, 1, "", "add_accelerator_path"], [175, 2, 1, "", "api_version"], [175, 2, 1, "", "get_accelerator"], [175, 2, 1, "", "get_log_level"], [175, 2, 1, "", "get_logger"], [175, 2, 1, "", "get_supported_accelerators"], [175, 2, 1, "", "git_hash"], [175, 2, 1, "", "load_tflite_model"], [175, 2, 1, "", "normalize_accelerator_name"], [175, 2, 1, "", "profile_model"], [175, 2, 1, "", "record_model"], [175, 2, 1, "", "register_accelerator"], [175, 2, 1, "", "set_log_level"], [175, 2, 1, "", "set_logger"], [175, 2, 1, "", "unload_model"]], "mltk.core.tflite_micro.TfliteMicroLayerError": [[171, 2, 1, "", "__init__"], [171, 3, 1, "", "index"], [171, 3, 1, "", "msg"], [171, 3, 1, "", "name"]], "mltk.core.tflite_micro.TfliteMicroModel": [[172, 2, 1, "", "__init__"], [172, 1, 1, "", "accelerator"], [172, 1, 1, "", "details"], [172, 2, 1, "", "get_layer_error"], [172, 2, 1, "", "get_profiling_results"], [172, 2, 1, "", "get_recorded_data"], [172, 2, 1, "", "input"], [172, 1, 1, "", "input_size"], [172, 2, 1, "", "invoke"], [172, 1, 1, "", "is_profiler_enabled"], [172, 1, 1, "", "is_recorder_enabled"], [172, 1, 1, "", "is_tensor_recorder_enabled"], [172, 1, 1, "", "layer_errors"], [172, 2, 1, "", "output"], [172, 1, 1, "", "output_size"]], "mltk.core.tflite_micro.TfliteMicroModelDetails": [[173, 2, 1, "", "__init__"], [173, 1, 1, "", "accelerator"], [173, 1, 1, "", "classes"], [173, 1, 1, "", "date"], [173, 1, 1, "", "description"], [173, 1, 1, "", "hash"], [173, 1, 1, "", "memory_plan"], [173, 1, 1, "", "name"], [173, 1, 1, "", "runtime_memory_size"], [173, 1, 1, "", "version"]], "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult": [[174, 2, 1, "", "__init__"], [174, 2, 1, "", "__new__"], [174, 1, 1, "", "accelerator_cycles"], [174, 2, 1, "", "clear"], [174, 2, 1, "", "copy"], [174, 1, 1, "", "cpu_cycles"], [174, 3, 1, "", "default_factory"], [174, 1, 1, "", "energy"], [174, 2, 1, "", "fromkeys"], [174, 2, 1, "", "get"], [174, 2, 1, "", "items"], [174, 2, 1, "", "keys"], [174, 1, 1, "", "macs"], [174, 1, 1, "", "name"], [174, 1, 1, "", "ops"], [174, 2, 1, "", "pop"], [174, 2, 1, "", "popitem"], [174, 2, 1, "", "setdefault"], [174, 1, 1, "", "time"], [174, 2, 1, "", "update"], [174, 2, 1, "", "values"]], "mltk.core.tflite_micro.tflite_micro_accelerator": [[169, 0, 1, "", "TfliteMicroAccelerator"]], "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator": [[169, 2, 1, "", "__init__"], [169, 1, 1, "", "accelerator_wrapper"], [169, 1, 1, "", "active_variant"], [169, 1, 1, "", "api_version"], [169, 2, 1, "", "compile_model"], [169, 2, 1, "", "enable_data_recorder"], [169, 2, 1, "", "estimate_profiling_results"], [169, 1, 1, "", "git_hash"], [169, 1, 1, "", "name"], [169, 2, 1, "", "set_program_recorder_enabled"], [169, 1, 1, "", "supports_model_compilation"], [169, 1, 1, "", "variants"]], "mltk.core.tflite_model_parameters.flatbuffer_dictionary": [[185, 0, 1, "", "FlatbufferDictionary"]], "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary": [[185, 2, 1, "", "__init__"], [185, 2, 1, "", "deserialize"], [185, 2, 1, "", "put"], [185, 2, 1, "", "serialize"], [185, 2, 1, "", "summary"]], "mltk.core.train_model": [[166, 0, 1, "", "TrainingResults"]], "mltk.core.train_model.TrainingResults": [[166, 2, 1, "", "__init__"], [166, 2, 1, "", "asdict"], [166, 3, 1, "", "epochs"], [166, 2, 1, "", "get_best_metric"], [166, 3, 1, "", "history"], [166, 3, 1, "", "keras_model"], [166, 3, 1, "", "mltk_model"], [166, 1, 1, "", "model_archive_path"], [166, 3, 1, "", "params"]], "mltk.datasets.accelerometer": [[93, 5, 0, "-", "tflm_magic_wand"]], "mltk.datasets.accelerometer.tflm_magic_wand": [[93, 4, 1, "", "load_data"], [93, 4, 1, "", "prepare_data"]], "mltk.datasets.audio.background_noise": [[94, 5, 0, "-", "ambient"], [95, 5, 0, "-", "brd2601"], [96, 5, 0, "-", "esc50"]], "mltk.datasets.audio.background_noise.ambient": [[94, 6, 1, "", "DOWNLOAD_URLS"], [94, 4, 1, "", "download"]], "mltk.datasets.audio.background_noise.brd2601": [[95, 6, 1, "", "DOWNLOAD_URL"], [95, 6, 1, "", "VERIFY_SHA1"], [95, 4, 1, "", "download"]], "mltk.datasets.audio.background_noise.esc50": [[96, 6, 1, "", "DOWNLOAD_URL"], [96, 6, 1, "", "VERIFY_SHA1"], [96, 4, 1, "", "download"]], "mltk.datasets.audio": [[97, 5, 0, "-", "direction_commands"], [98, 5, 0, "-", "mit_ir_survey"], [101, 5, 0, "-", "on_off"], [103, 5, 0, "-", "ten_digits"], [104, 5, 0, "-", "yes_no"]], "mltk.datasets.audio.direction_commands": [[97, 6, 1, "", "CLASSES"], [97, 6, 1, "", "DOWNLOAD_URL"], [97, 6, 1, "", "VERIFY_SHA1"], [97, 4, 1, "", "download"], [97, 4, 1, "", "generate_dataset"]], "mltk.datasets.audio.mit_ir_survey": [[98, 6, 1, "", "DOWNLOAD_URL"], [98, 6, 1, "", "VERIFY_SHA1"], [98, 4, 1, "", "apply_ir"], [98, 4, 1, "", "apply_random_ir"], [98, 4, 1, "", "download"], [98, 4, 1, "", "load_dataset"]], "mltk.datasets.audio.mlcommons": [[99, 5, 0, "-", "ml_commons_keywords"], [100, 5, 0, "-", "ml_commons_voice"]], "mltk.datasets.audio.mlcommons.ml_commons_keywords": [[99, 6, 1, "", "DOWNLOAD_URL1"], [99, 6, 1, "", "DOWNLOAD_URL2"], [99, 6, 1, "", "VERIFY_URL1_SHA1"], [99, 6, 1, "", "VERIFY_URL2_SHA1"], [99, 4, 1, "", "download"]], "mltk.datasets.audio.mlcommons.ml_commons_voice": [[100, 6, 1, "", "DOWNLOAD_URL"], [100, 6, 1, "", "VERIFY_SHA1"], [100, 4, 1, "", "download"]], "mltk.datasets.audio.on_off": [[101, 6, 1, "", "CLASSES"], [101, 6, 1, "", "DOWNLOAD_URL"], [101, 6, 1, "", "VERIFY_SHA1"], [101, 4, 1, "", "download"], [101, 4, 1, "", "generate_dataset"]], "mltk.datasets.audio.speech_commands": [[102, 5, 0, "-", "speech_commands_v2"]], "mltk.datasets.audio.speech_commands.speech_commands_v2": [[102, 6, 1, "", "CLASSES"], [102, 6, 1, "", "DOWNLOAD_URL"], [102, 6, 1, "", "VERIFY_SHA1"], [102, 4, 1, "", "list_valid_filenames_in_directory"], [102, 4, 1, "", "load_clean_data"], [102, 4, 1, "", "load_data"]], "mltk.datasets.audio.ten_digits": [[103, 6, 1, "", "CLASSES"], [103, 6, 1, "", "DOWNLOAD_URL"], [103, 6, 1, "", "VERIFY_SHA1"], [103, 4, 1, "", "download"], [103, 4, 1, "", "generate_dataset"]], "mltk.datasets.audio.yes_no": [[104, 6, 1, "", "CLASSES"], [104, 6, 1, "", "DOWNLOAD_URL"], [104, 6, 1, "", "VERIFY_SHA1"], [104, 4, 1, "", "download"], [104, 4, 1, "", "generate_dataset"]], "mltk.datasets.image": [[105, 5, 0, "-", "cifar10"], [106, 5, 0, "-", "fashion_mnist"], [107, 5, 0, "-", "mnist"], [108, 5, 0, "-", "rock_paper_scissors_v1"], [109, 5, 0, "-", "rock_paper_scissors_v2"]], "mltk.datasets.image.cifar10": [[105, 6, 1, "", "DOWNLOAD_URL"], [105, 6, 1, "", "VERIFY_SHA1"], [105, 4, 1, "", "load_data"], [105, 4, 1, "", "load_data_directory"]], "mltk.datasets.image.fashion_mnist": [[106, 6, 1, "", "CLASSES"], [106, 6, 1, "", "INPUT_SHAPE"], [106, 4, 1, "", "load_data"], [106, 4, 1, "", "load_data_directory"]], "mltk.datasets.image.mnist": [[107, 6, 1, "", "CLASSES"], [107, 6, 1, "", "DOWNLOAD_URL"], [107, 6, 1, "", "INPUT_SHAPE"], [107, 6, 1, "", "VERIFY_SHA1"], [107, 4, 1, "", "load_data"], [107, 4, 1, "", "load_data_directory"]], "mltk.datasets.image.rock_paper_scissors_v1": [[108, 6, 1, "", "CLASSES"], [108, 6, 1, "", "DOWNLOAD_URL"], [108, 6, 1, "", "INPUT_DEPTH"], [108, 6, 1, "", "INPUT_HEIGHT"], [108, 6, 1, "", "INPUT_SHAPE"], [108, 6, 1, "", "INPUT_WIDTH"], [108, 6, 1, "", "VERIFY_SHA1"], [108, 4, 1, "", "load_data"]], "mltk.datasets.image.rock_paper_scissors_v2": [[109, 6, 1, "", "CLASSES"], [109, 6, 1, "", "DOWNLOAD_URL"], [109, 6, 1, "", "INPUT_DEPTH"], [109, 6, 1, "", "INPUT_HEIGHT"], [109, 6, 1, "", "INPUT_SHAPE"], [109, 6, 1, "", "INPUT_WIDTH"], [109, 6, 1, "", "VERIFY_SHA1"], [109, 4, 1, "", "load_data"]], "mltk.models.examples": [[128, 5, 0, "-", "audio_example1"], [129, 5, 0, "-", "audio_tf_dataset"], [130, 5, 0, "-", "autoencoder_example"], [131, 5, 0, "-", "basic_example"], [132, 5, 0, "-", "basic_tf_dataset_example"], [133, 5, 0, "-", "binary_classification"], [134, 5, 0, "-", "conv1d_example"], [135, 5, 0, "-", "image_example1"], [136, 5, 0, "-", "image_tf_dataset"], [138, 5, 0, "-", "siamese_contrastive"]], "mltk.models.shared.dsconv_arm": [[127, 4, 1, "", "DepthwiseSeparableConv2D_ARM"]], "mltk.models.shared.fully_connected_autoencoder": [[127, 4, 1, "", "FullyConnectedAutoEncoder"]], "mltk.models.shared.mobilenet_v1": [[127, 4, 1, "", "MobileNetV1"]], "mltk.models.shared.mobilenet_v2": [[127, 4, 1, "", "MobileNetV2"]], "mltk.models.shared.resnet_v1": [[127, 4, 1, "", "ResNet10V1"]], "mltk.models.shared.tenet": [[127, 4, 1, "", "TENet"]], "mltk.models.siliconlabs": [[140, 5, 0, "-", "fingerprint_signature_generator"], [142, 5, 0, "-", "keyword_spotting_alexa"], [143, 5, 0, "-", "keyword_spotting_mobilenetv2"], [144, 5, 0, "-", "keyword_spotting_numbers"], [145, 5, 0, "-", "keyword_spotting_on_off"], [146, 5, 0, "-", "keyword_spotting_on_off_v2"], [147, 5, 0, "-", "keyword_spotting_on_off_v3"], [148, 5, 0, "-", "keyword_spotting_pacman"], [149, 5, 0, "-", "keyword_spotting_pacman_v2"], [150, 5, 0, "-", "keyword_spotting_pacman_v3"], [151, 5, 0, "-", "keyword_spotting_with_transfer_learning"], [152, 5, 0, "-", "rock_paper_scissors"]], "mltk.models.tflite_micro": [[154, 5, 0, "-", "tflite_micro_magic_wand"], [155, 5, 0, "-", "tflite_micro_speech"]], "mltk.models.tinyml": [[156, 5, 0, "-", "anomaly_detection"], [157, 5, 0, "-", "image_classification"], [159, 5, 0, "-", "keyword_spotting"], [160, 5, 0, "-", "visual_wake_words"]], "mltk.utils": [[207, 5, 0, "-", "archive"], [208, 5, 0, "-", "archive_downloader"], [217, 5, 0, "-", "bin2header"], [218, 5, 0, "-", "cmake"], [219, 5, 0, "-", "gpu"], [220, 5, 0, "-", "hasher"], [227, 5, 0, "-", "logger"], [228, 5, 0, "-", "path"], [230, 5, 0, "-", "python"], [233, 5, 0, "-", "shell_cmd"], [235, 5, 0, "-", "string_formatting"], [236, 5, 0, "-", "system"]], "mltk.utils.archive": [[207, 4, 1, "", "extract_archive"], [207, 4, 1, "", "gzip_directory_files"], [207, 4, 1, "", "gzip_file"]], "mltk.utils.archive_downloader": [[208, 4, 1, "", "download_url"], [208, 4, 1, "", "download_verify_extract"], [208, 4, 1, "", "verify_extract"], [208, 4, 1, "", "verify_file_hash"], [208, 4, 1, "", "verify_sha1"], [208, 4, 1, "", "verify_sha256"]], "mltk.utils.audio_dataset_generator": [[211, 0, 1, "", "AudioDatasetGenerator"], [209, 0, 1, "", "Augmentation"], [210, 0, 1, "", "GenerationConfig"], [213, 0, 1, "", "Keyword"], [214, 0, 1, "", "Voice"], [215, 0, 1, "", "VoicePitch"], [216, 0, 1, "", "VoiceRate"]], "mltk.utils.audio_dataset_generator.AudioDatasetGenerator": [[211, 2, 1, "", "__init__"], [211, 2, 1, "", "count_characters"], [211, 2, 1, "", "generate"], [211, 2, 1, "", "get_summary"], [211, 2, 1, "", "is_backend_loaded"], [211, 1, 1, "", "is_running"], [211, 2, 1, "", "join"], [211, 2, 1, "", "list_configurations"], [211, 2, 1, "", "list_languages"], [211, 2, 1, "", "list_supported_backends"], [211, 2, 1, "", "list_voices"], [211, 2, 1, "", "load_backend"], [211, 1, 1, "", "out_dir"], [211, 2, 1, "", "shutdown"]], "mltk.utils.audio_dataset_generator.Augmentation": [[209, 2, 1, "", "count"], [209, 2, 1, "", "index"], [209, 3, 1, "", "pitch"], [209, 3, 1, "", "rate"]], "mltk.utils.audio_dataset_generator.GenerationConfig": [[210, 2, 1, "", "__init__"], [210, 2, 1, "", "copy"], [210, 3, 1, "", "keyword"], [210, 3, 1, "", "keyword_group"], [210, 3, 1, "", "pitch"], [210, 3, 1, "", "rate"], [210, 3, 1, "", "voice"]], "mltk.utils.audio_dataset_generator.Keyword": [[213, 3, 1, "", "aliases"], [213, 2, 1, "", "as_list"], [213, 2, 1, "", "count"], [213, 2, 1, "", "index"], [213, 3, 1, "", "max_count"], [213, 3, 1, "", "value"]], "mltk.utils.audio_dataset_generator.Voice": [[214, 2, 1, "", "__init__"], [214, 3, 1, "", "backend"], [214, 2, 1, "", "hashable_value"], [214, 1, 1, "", "hex_hash"], [214, 3, 1, "", "language_code"], [214, 3, 1, "", "name"]], "mltk.utils.audio_dataset_generator.VoicePitch": [[215, 2, 1, "", "__init__"], [215, 2, 1, "", "__new__"], [215, 2, 1, "", "capitalize"], [215, 2, 1, "", "casefold"], [215, 2, 1, "", "center"], [215, 2, 1, "", "count"], [215, 2, 1, "", "encode"], [215, 2, 1, "", "endswith"], [215, 2, 1, "", "expandtabs"], [215, 2, 1, "", "find"], [215, 2, 1, "", "format"], [215, 2, 1, "", "format_map"], [215, 2, 1, "", "index"], [215, 2, 1, "", "isalnum"], [215, 2, 1, "", "isalpha"], [215, 2, 1, "", "isascii"], [215, 2, 1, "", "isdecimal"], [215, 2, 1, "", "isdigit"], [215, 2, 1, "", "isidentifier"], [215, 2, 1, "", "islower"], [215, 2, 1, "", "isnumeric"], [215, 2, 1, "", "isprintable"], [215, 2, 1, "", "isspace"], [215, 2, 1, "", "istitle"], [215, 2, 1, "", "isupper"], [215, 2, 1, "", "join"], [215, 2, 1, "", "ljust"], [215, 2, 1, "", "lower"], [215, 2, 1, "", "lstrip"], [215, 2, 1, "", "maketrans"], [215, 2, 1, "", "partition"], [215, 2, 1, "", "removeprefix"], [215, 2, 1, "", "removesuffix"], [215, 2, 1, "", "replace"], [215, 2, 1, "", "rfind"], [215, 2, 1, "", "rindex"], [215, 2, 1, "", "rjust"], [215, 2, 1, "", "rpartition"], [215, 2, 1, "", "rsplit"], [215, 2, 1, "", "rstrip"], [215, 2, 1, "", "split"], [215, 2, 1, "", "splitlines"], [215, 2, 1, "", "startswith"], [215, 2, 1, "", "strip"], [215, 2, 1, "", "swapcase"], [215, 2, 1, "", "title"], [215, 2, 1, "", "translate"], [215, 2, 1, "", "upper"], [215, 2, 1, "", "zfill"]], "mltk.utils.audio_dataset_generator.VoiceRate": [[216, 2, 1, "", "__init__"], [216, 2, 1, "", "__new__"], [216, 2, 1, "", "capitalize"], [216, 2, 1, "", "casefold"], [216, 2, 1, "", "center"], [216, 2, 1, "", "count"], [216, 2, 1, "", "encode"], [216, 2, 1, "", "endswith"], [216, 2, 1, "", "expandtabs"], [216, 2, 1, "", "find"], [216, 2, 1, "", "format"], [216, 2, 1, "", "format_map"], [216, 2, 1, "", "index"], [216, 2, 1, "", "isalnum"], [216, 2, 1, "", "isalpha"], [216, 2, 1, "", "isascii"], [216, 2, 1, "", "isdecimal"], [216, 2, 1, "", "isdigit"], [216, 2, 1, "", "isidentifier"], [216, 2, 1, "", "islower"], [216, 2, 1, "", "isnumeric"], [216, 2, 1, "", "isprintable"], [216, 2, 1, "", "isspace"], [216, 2, 1, "", "istitle"], [216, 2, 1, "", "isupper"], [216, 2, 1, "", "join"], [216, 2, 1, "", "ljust"], [216, 2, 1, "", "lower"], [216, 2, 1, "", "lstrip"], [216, 2, 1, "", "maketrans"], [216, 2, 1, "", "partition"], [216, 2, 1, "", "removeprefix"], [216, 2, 1, "", "removesuffix"], [216, 2, 1, "", "replace"], [216, 2, 1, "", "rfind"], [216, 2, 1, "", "rindex"], [216, 2, 1, "", "rjust"], [216, 2, 1, "", "rpartition"], [216, 2, 1, "", "rsplit"], [216, 2, 1, "", "rstrip"], [216, 2, 1, "", "split"], [216, 2, 1, "", "splitlines"], [216, 2, 1, "", "startswith"], [216, 2, 1, "", "strip"], [216, 2, 1, "", "swapcase"], [216, 2, 1, "", "title"], [216, 2, 1, "", "translate"], [216, 2, 1, "", "upper"], [216, 2, 1, "", "zfill"]], "mltk.utils.bin2header": [[217, 4, 1, "", "bin2header"], [217, 4, 1, "", "main"]], "mltk.utils.cmake": [[218, 4, 1, "", "build_mltk_target"], [218, 4, 1, "", "get_build_directory"], [218, 4, 1, "", "invoke_mltk_target"], [218, 4, 1, "", "parse_variables"]], "mltk.utils.gpu": [[219, 0, 1, "", "TensorflowCudaVersions"], [219, 4, 1, "", "check_tensorflow_cuda_compatibility_error"], [219, 4, 1, "", "deinitialize"], [219, 4, 1, "", "disable"], [219, 4, 1, "", "get_tensorflow_version_with_cudnn_version"], [219, 4, 1, "", "initialize"]], "mltk.utils.gpu.TensorflowCudaVersions": [[219, 2, 1, "", "__getnewargs__"], [219, 3, 1, "", "__match_args__"], [219, 3, 1, "", "__module__"], [219, 2, 1, "", "__new__"], [219, 2, 1, "", "__repr__"], [219, 3, 1, "", "__slots__"], [219, 3, 1, "", "cuda"], [219, 3, 1, "", "cudnn"], [219, 3, 1, "", "python_max"], [219, 3, 1, "", "python_min"], [219, 3, 1, "", "tensorflow"]], "mltk.utils.hasher": [[220, 4, 1, "", "generate_hash"], [220, 4, 1, "", "hash_file"], [220, 4, 1, "", "hash_object"]], "mltk.utils.jlink_stream": [[223, 0, 1, "", "JLinkDataStream"], [222, 0, 1, "", "JlinkCommandStream"], [225, 0, 1, "", "JlinkStream"], [226, 0, 1, "", "JlinkStreamOptions"]], "mltk.utils.jlink_stream.JLinkDataStream": [[223, 2, 1, "", "__init__"], [223, 1, 1, "", "buffer_hexdump"], [223, 1, 1, "", "buffer_unused"], [223, 1, 1, "", "buffer_used"], [223, 2, 1, "", "close"], [223, 1, 1, "", "end_time"], [223, 2, 1, "", "flush"], [223, 1, 1, "", "is_opened"], [223, 1, 1, "", "max_read_size"], [223, 1, 1, "", "mode"], [223, 1, 1, "", "name"], [223, 2, 1, "", "read"], [223, 2, 1, "", "read_all"], [223, 1, 1, "", "read_data_available"], [223, 1, 1, "", "timeout"], [223, 2, 1, "", "write"], [223, 1, 1, "", "write_data_available"]], "mltk.utils.jlink_stream.JlinkCommandStream": [[222, 2, 1, "", "__init__"], [222, 2, 1, "", "close"], [222, 2, 1, "", "issue"], [222, 2, 1, "", "open"]], "mltk.utils.jlink_stream.JlinkStream": [[225, 2, 1, "", "__init__"], [225, 2, 1, "", "close"], [225, 2, 1, "", "connect"], [225, 1, 1, "", "default_options"], [225, 2, 1, "", "disconnect"], [225, 1, 1, "", "is_connected"], [225, 2, 1, "", "open"], [225, 2, 1, "", "process"], [225, 2, 1, "", "read"], [225, 2, 1, "", "write"]], "mltk.utils.logger": [[227, 0, 1, "", "ConsoleLoggerLevelContext"], [227, 0, 1, "", "DummyLogger"], [227, 4, 1, "", "add_console_logger"], [227, 4, 1, "", "get_level"], [227, 4, 1, "", "get_logger"], [227, 4, 1, "", "make_filelike"], [227, 4, 1, "", "redirect_stream"], [227, 4, 1, "", "set_console_level"], [227, 4, 1, "", "timing_decorator"]], "mltk.utils.logger.ConsoleLoggerLevelContext": [[227, 3, 1, "", "__dict__"], [227, 2, 1, "", "__enter__"], [227, 2, 1, "", "__exit__"], [227, 2, 1, "", "__init__"], [227, 3, 1, "", "__module__"], [227, 3, 1, "", "__weakref__"]], "mltk.utils.logger.DummyLogger": [[227, 3, 1, "", "__dict__"], [227, 2, 1, "", "__init__"], [227, 3, 1, "", "__module__"], [227, 3, 1, "", "__weakref__"], [227, 2, 1, "", "debug"], [227, 2, 1, "", "error"], [227, 2, 1, "", "exception"], [227, 2, 1, "", "flush"], [227, 2, 1, "", "info"], [227, 2, 1, "", "warning"], [227, 2, 1, "", "write"]], "mltk.utils.path": [[228, 4, 1, "", "add_user_setting"], [228, 4, 1, "", "clean_directory"], [228, 4, 1, "", "copy_directory"], [228, 4, 1, "", "create_dir"], [228, 4, 1, "", "create_tempdir"], [228, 4, 1, "", "create_user_dir"], [228, 4, 1, "", "extension"], [228, 4, 1, "", "file_is_in_use"], [228, 4, 1, "", "file_is_newer"], [228, 4, 1, "", "fullpath"], [228, 4, 1, "", "get_actual_path"], [228, 4, 1, "", "get_user_setting"], [228, 4, 1, "", "has_filename"], [228, 4, 1, "", "pushd"], [228, 4, 1, "", "recursive_listdir"], [228, 4, 1, "", "remove_directory"], [228, 4, 1, "", "set_file_last_modified"], [228, 4, 1, "", "walk_with_depth"]], "mltk.utils.process_pool": [[229, 0, 1, "", "ProcessPool"]], "mltk.utils.process_pool.ProcessPool": [[229, 2, 1, "", "__init__"], [229, 2, 1, "", "create_batch"], [229, 1, 1, "", "is_running"], [229, 1, 1, "", "n_jobs"], [229, 1, 1, "", "name"], [229, 2, 1, "", "process"], [229, 2, 1, "", "shutdown"], [229, 2, 1, "", "start"]], "mltk.utils.python": [[230, 4, 1, "", "DefaultDict"], [230, 0, 1, "", "DictObject"], [230, 6, 1, "", "SHORT_VERSION"], [230, 4, 1, "", "append_exception_msg"], [230, 4, 1, "", "as_list"], [230, 4, 1, "", "contains_class_type"], [230, 4, 1, "", "debugger_is_active"], [230, 4, 1, "", "disable_warnings"], [230, 4, 1, "", "find_object_key_with_value"], [230, 4, 1, "", "find_object_value_with_key"], [230, 4, 1, "", "find_object_value_with_key_or_value"], [230, 4, 1, "", "flatten_list"], [230, 4, 1, "", "forward_method_kwargs"], [230, 4, 1, "", "get_case_insensitive"], [230, 4, 1, "", "import_module_at_path"], [230, 4, 1, "", "install_pip_package"], [230, 4, 1, "", "is_false"], [230, 4, 1, "", "is_true"], [230, 4, 1, "", "list_rindex"], [230, 4, 1, "", "load_json_safe"], [230, 4, 1, "", "merge_dict"], [230, 4, 1, "", "notebook_is_active"], [230, 4, 1, "", "prepend_exception_msg"], [230, 4, 1, "", "set_absl_log_level"], [230, 4, 1, "", "timeit"]], "mltk.utils.python.DictObject": [[230, 3, 1, "", "__dict__"], [230, 2, 1, "", "__getattr__"], [230, 3, 1, "", "__module__"], [230, 2, 1, "", "__setattr__"], [230, 3, 1, "", "__weakref__"]], "mltk.utils.serial_reader": [[232, 0, 1, "", "SerialReader"]], "mltk.utils.serial_reader.SerialReader": [[232, 2, 1, "", "__init__"], [232, 1, 1, "", "captured_data"], [232, 2, 1, "", "close"], [232, 1, 1, "", "error_message"], [232, 1, 1, "", "failed"], [232, 2, 1, "", "flush"], [232, 1, 1, "", "is_open"], [232, 2, 1, "", "list_ports"], [232, 2, 1, "", "open"], [232, 2, 1, "", "read"], [232, 2, 1, "", "resolve_port"], [232, 1, 1, "", "started"], [232, 1, 1, "", "stopped"], [232, 2, 1, "", "write"]], "mltk.utils.shell_cmd": [[233, 4, 1, "", "run_shell_cmd"]], "mltk.utils.signal_handler": [[234, 0, 1, "", "SignalHandler"]], "mltk.utils.signal_handler.SignalHandler": [[234, 2, 1, "", "__init__"]], "mltk.utils.string_formatting": [[235, 0, 1, "", "FormattedFloat"], [235, 0, 1, "", "FormattedInt"], [235, 4, 1, "", "convert_units"], [235, 4, 1, "", "format_units"], [235, 4, 1, "", "iso_time_filename_str"], [235, 4, 1, "", "iso_time_str"], [235, 4, 1, "", "pretty_time_str"]], "mltk.utils.string_formatting.FormattedFloat": [[235, 3, 1, "", "__dict__"], [235, 3, 1, "", "__module__"], [235, 2, 1, "", "__str__"], [235, 3, 1, "", "__weakref__"]], "mltk.utils.string_formatting.FormattedInt": [[235, 3, 1, "", "__dict__"], [235, 3, 1, "", "__module__"], [235, 2, 1, "", "__str__"]], "mltk.utils.system": [[236, 4, 1, "", "get_current_os"], [236, 4, 1, "", "get_username"], [236, 4, 1, "", "has_admin"], [236, 4, 1, "", "is_linux"], [236, 4, 1, "", "is_osx"], [236, 4, 1, "", "is_windows"], [236, 4, 1, "", "make_path_executable"], [236, 4, 1, "", "raise_signal"], [236, 4, 1, "", "send_signal"]], "mltk.utils.uart_stream": [[238, 0, 1, "", "UartStream"]], "mltk.utils.uart_stream.UartStream": [[238, 2, 1, "", "__init__"], [238, 1, 1, "", "baud"], [238, 2, 1, "", "close"], [238, 2, 1, "", "flush_input"], [238, 1, 1, "", "is_open"], [238, 1, 1, "", "is_synchronized"], [238, 2, 1, "", "list_ports"], [238, 2, 1, "", "open"], [238, 1, 1, "", "port"], [238, 2, 1, "", "read"], [238, 2, 1, "", "read_all"], [238, 2, 1, "", "read_command"], [238, 2, 1, "", "resolve_port"], [238, 1, 1, "", "rx_bytes_available"], [238, 2, 1, "", "synchronize"], [238, 2, 1, "", "synchronize_blocking"], [238, 1, 1, "", "tx_bytes_available"], [238, 2, 1, "", "wait"], [238, 2, 1, "", "write"], [238, 2, 1, "", "write_all"], [238, 2, 1, "", "write_command"]]}, "objtypes": {"0": "py:class", "1": "py:property", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:module", "6": "py:data"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "property", "Python property"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "module", "Python module"], "6": ["py", "data", "Python data"]}, "titleterms": {"uart": [0, 237], "stream": [0, 224, 237], "data": [0, 51, 57, 88, 248, 254, 255, 256, 257, 258, 259, 260, 264, 265, 266], "test": [0, 255, 257, 259, 261, 263], "setup": [0, 34, 37, 39, 43, 44, 58, 253, 262, 265, 267], "step": [0, 253, 255, 265, 266, 267], "audio": [1, 2, 35, 36, 80, 81, 82, 83, 84, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 212, 242, 258, 259, 260, 263, 266, 267], "featur": [1, 242, 254, 259, 260, 267], "gener": [1, 2, 37, 62, 67, 71, 94, 212, 242, 256, 257, 258, 259, 260, 267], "overview": [1, 3, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 79, 99, 100, 144, 241, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267], "benefit": 1, "gecko": [1, 43, 240], "sdk": [1, 43, 240], "compon": 1, "sourc": [1, 42, 45, 47, 48, 258, 260], "code": [1, 35, 36, 37, 38, 39, 41, 42, 44, 45, 47, 48, 262], "mltk": [1, 34, 43, 44, 45, 47, 48, 71, 76, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 259, 260, 262], "c": [1, 33, 40, 42, 44, 46, 240, 256, 258], "python": [1, 14, 34, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 65, 68, 69, 72, 74, 230, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 256, 257, 259, 260, 262, 265], "wrapper": [1, 34, 42, 44, 45, 46, 47, 48, 240], "usag": [1, 4, 6, 8, 10, 12, 15, 17, 19, 21, 23, 25, 27, 29, 30, 64, 119, 170, 189, 212, 224, 231, 237, 254], "visual": [1, 2, 35, 36, 37, 38, 39, 41, 44, 72, 251, 257, 258, 259], "util": [1, 2, 64, 80, 85, 89, 90, 91, 92, 125, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 257, 259], "classif": [2, 39, 61, 96, 243, 257], "classifi": [2, 35, 36, 39, 242, 258, 259], "us": [2, 51, 57, 63, 242, 256, 257, 259, 261, 266], "pc": [2, 35, 37, 39, 259, 261], "microphon": [2, 261], "simul": [2, 63, 244, 257, 259], "latenc": 2, "record": [2, 247, 259, 267], "dump": [2, 35, 37, 39, 258], "spectrogram": [2, 35, 156, 159, 259, 266], "develop": [2, 34, 42, 43, 44, 74, 240, 255, 258, 261], "board": [2, 261], "": [2, 51, 141], "from": [2, 70, 71, 146, 149, 253, 255, 256, 257, 258, 259, 260, 261, 265, 266], "updat": [2, 35, 36, 37, 39, 41, 62, 65, 74, 245, 248, 250, 257, 261, 263], "audiofeaturegener": [2, 45, 83, 242, 258, 263], "paramet": [2, 35, 36, 62, 67, 69, 240, 248, 250, 256, 257, 258, 259, 260], "synthet": [2, 258, 259, 267], "dataset": [2, 67, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 156, 157, 159, 160, 212, 255, 256, 257, 258, 259, 260, 265, 267], "keyword": [3, 99, 213, 258, 259, 260, 261, 263], "spot": [3, 258, 259, 260, 261], "classify_audio": [4, 35], "addit": [4, 6, 8, 10, 12, 15, 17, 19, 21, 23, 25, 27, 29, 30, 35, 36, 45, 47, 48, 67, 71], "document": [4, 6, 8, 10, 12, 15, 17, 19, 21, 23, 25, 27, 29, 30], "classify_imag": [6, 39], "command": [8, 14, 34, 35, 36, 37, 38, 39, 41, 45, 47, 48, 52, 61, 62, 63, 65, 68, 69, 71, 72, 77, 97, 102, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 240, 253, 256, 257, 258, 259, 260], "evalu": [10, 56, 61, 67, 144, 243, 256, 257, 259, 265, 266], "fingerprint_read": 12, "line": [14, 34, 35, 36, 37, 38, 39, 41, 52, 62, 71, 240, 253, 256, 257, 259, 260], "basic": [14, 62, 63, 67, 244, 254, 257, 259, 261], "enabl": [14, 264], "virtual": [14, 43, 44], "environ": [14, 43, 44, 71, 75, 262, 265], "format": [14, 265], "help": 14, "support": [14, 78, 240, 265], "oper": [14, 63, 162, 265], "profil": [15, 41, 61, 63, 64, 70, 128, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 244, 247, 255, 257, 258, 259, 260, 263, 265], "quantiz": [17, 61, 65, 155, 156, 157, 159, 160, 245, 264, 265, 266], "ssh": [19, 70, 71, 77, 240, 255], "summar": [21, 68, 246, 263], "tensorboard": [23, 70], "train": [25, 50, 55, 63, 67, 68, 69, 70, 71, 72, 146, 149, 155, 240, 244, 246, 249, 251, 254, 255, 256, 257, 258, 259, 260, 261, 263], "update_param": [27, 39, 41], "view": [29, 62, 72, 251], "view_audio": 30, "build": [33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 47, 48, 256, 258, 260], "option": [33, 44, 64, 71, 240, 255], "mltk_cmake_log_level": 33, "mltk_platform_nam": 33, "tflite_micro_acceler": [33, 37, 39, 41, 169], "mltk_target": 33, "mltk_enable_debug_info_in_release_build": 33, "mltk_enable_output_disassembli": 33, "model_profiler_model": [33, 41], "audio_classifier_model": 33, "instal": [34, 43, 44, 71, 74, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256, 257, 259, 260, 262, 265], "tool": [34, 43, 44, 240], "0": [34, 43, 44], "o": [34, 43, 44], "1": [34, 43, 44, 61, 62, 63, 65, 68, 69, 70, 71, 72, 243, 244, 245, 246, 247, 248, 249, 250, 251, 262, 266], "cmake": [34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 52, 218], "2": [34, 43, 44, 61, 62, 63, 68, 69, 70, 71, 72, 243, 244, 246, 247, 248, 249, 250, 251, 262], "7": [34, 43, 44, 248], "zip": [34, 43, 44, 76], "3": [34, 43, 44, 61, 62, 63, 68, 69, 70, 71, 72, 243, 244, 246, 247, 248, 250, 251], "4": [34, 43, 44, 63, 68, 70, 71, 72, 244, 246, 248, 251], "git": [34, 43, 44], "5": [34, 43, 44, 70, 71, 248], "clone": [34, 43, 44], "repositori": [34, 43, 44], "sequenc": [34, 71, 257], "configur": [34, 44, 70, 71, 255, 257, 259, 261, 265], "set": [34, 37, 39, 41, 65, 67, 71, 77, 255, 257, 258, 259, 260, 261, 263, 266], "project": [34, 44], "specif": [34, 61, 62, 67, 69, 76, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 250, 255, 257, 259, 261, 263], "target": [34, 44], "run": [34, 35, 36, 37, 38, 39, 41, 43, 44, 52, 69, 70, 248, 249, 253, 256, 257, 258, 259, 260, 261, 263, 265], "output": [34, 39, 69, 247, 265], "execut": 34, "exampl": [34, 40, 42, 43, 44, 49, 61, 62, 63, 65, 67, 68, 69, 71, 72, 73, 77, 119, 137, 170, 189, 212, 224, 231, 237, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256, 267], "applic": [34, 43, 44, 256, 258, 260], "quick": [35, 36, 37, 38, 39, 41, 61, 62, 63, 65, 68, 69, 70, 71, 72, 76, 254, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267], "link": [35, 36, 37, 38, 39, 41, 45, 47, 48, 224, 254, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267], "behavior": [35, 36, 37, 39], "model": [35, 36, 37, 39, 41, 50, 51, 52, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 112, 119, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 170, 189, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "via": [35, 36, 37, 39, 41, 45, 47, 48, 62, 71, 240], "simplic": [35, 36, 37, 38, 39, 41, 43, 52, 259], "studio": [35, 36, 37, 38, 39, 41, 43, 44, 52, 259], "debug": [35, 36, 37, 38, 39, 41, 44, 50, 262, 266], "modif": [35, 253], "variabl": [35, 75], "verbos": 35, "window_m": 35, "threshold": [35, 256], "suppression_m": 35, "count": [35, 51, 255], "volume_gain": 35, "latency_m": 35, "audio_classifier_enable_audio_io": 35, "read": [35, 36, 255, 258, 260, 261, 263], "ble": 36, "pac": [36, 260], "man": [36, 260], "demo": [36, 256, 257, 258, 260], "fingerprint": [37, 256], "authent": [37, 256], "video": [37, 39, 256, 257, 258], "state": 37, "diagram": [37, 128, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160], "signatur": [37, 256], "fingeprint_read": 37, "hardwar": [37, 39, 63, 78, 244, 256, 257, 258, 260, 263], "imag": [37, 39, 85, 86, 87, 105, 106, 107, 108, 109, 110, 255, 257], "fingerprint_authenticator_model": 37, "hello": 38, "world": 38, "input": [39, 51, 57, 247, 264, 265, 266], "normal": [39, 90, 264, 266], "image_classifier_model": 39, "model_profiler_generate_op_resolver_head": 41, "model_profiler_model_memory_sect": 41, "model_profiler_runtime_memory_s": 41, "model_profiler_runtime_memory_sect": 41, "tflite_micro_accelerator_profiler_en": 41, "tflite_micro_recorder_en": 41, "mode": [42, 63], "script": [43, 44, 62, 240, 253, 257], "activ": [43, 44, 266], "add": [43, 62, 248, 253, 255, 257], "segger": 44, "gdb": 44, "server": [44, 64], "serial": [44, 231], "termin": 44, "6": [44, 248], "window": [44, 58, 71], "redistribut": 44, "packag": [44, 74, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 256, 257, 259, 260, 262], "vscode": [44, 73], "open": [44, 70], "workspac": 44, "recommend": [44, 253, 261, 263], "extens": [44, 262], "select": [44, 255, 258, 259, 260, 263], "interpret": [44, 247], "linux": [44, 54, 71], "creat": [44, 255, 256, 257, 258, 259, 260, 263], "file": [44, 60, 62, 71, 76, 77, 244, 247, 248, 263, 265], "user_opt": 44, "kit": [44, 258], "type": [44, 51, 57, 76], "Or": 44, "embed": [44, 52, 57, 240, 266], "arm": [44, 127], "gcc": 44, "download": [44, 64, 71, 244, 247, 248, 265], "pre": [45, 47, 48], "built": [45, 47, 48], "automat": [45, 47, 48], "manual": [45, 47, 48], "mvp": [47, 63, 244, 263], "tensorflow": [48, 58, 65, 67, 68, 72, 76, 93, 153, 170, 189, 240, 246, 251, 266], "lite": [48, 56, 65, 67, 68, 72, 76, 93, 153, 170, 189, 240, 242, 246, 247, 248, 251, 257, 259, 265, 266], "micro": [48, 93, 153, 170, 240, 242, 247], "api": [49, 61, 62, 63, 65, 67, 68, 69, 72, 111, 119, 170, 189, 212, 224, 231, 237, 243, 244, 245, 246, 247, 248, 249, 250, 251], "how": [50, 51, 52, 255, 262], "can": [50, 51], "i": [50, 51, 52, 55, 57, 58, 240, 255], "my": [50, 51, 52, 55, 255], "dure": [50, 56, 266], "reduc": [51, 261], "size": [51, 257, 266], "what": [51, 255], "ar": 51, "resourc": [51, 71], "requir": [51, 58, 256, 257, 258, 260, 265], "int8": [51, 266], "filter": 51, "increas": [51, 258], "stride": 51, "decreas": 51, "kernel": [51, 265], "fullyconnect": 51, "unit": 51, "pool": 51, "layer": [51, 63, 67, 69, 247, 248, 264, 266], "do": [52, 255], "an": [52, 71, 253, 255, 259, 263, 266], "devic": [52, 57, 63, 244, 257, 259, 266], "frequent": 53, "ask": 53, "question": 53, "why": [54, 56, 57, 240, 255], "isn": 54, "t": 54, "gpu": [54, 219, 255], "work": [54, 56, 71, 255, 262], "where": 55, "doe": [56, 70, 255, 262], "kera": [56, 67, 68, 72, 76, 112, 246, 251, 257, 259], "h5": [56, 61, 76, 243], "tf": [56, 242, 247, 248, 257, 259, 265], "tflite": [56, 61, 65, 76, 155, 156, 157, 159, 160, 242, 243, 244, 245, 247, 248], "return": [57, 250, 266], "correct": 57, "result": [57, 61, 64, 71, 255, 266], "preprocess": [57, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 256, 257, 259], "hint": 57, "just": 57, "float32": [57, 265, 266], "am": 58, "see": 58, "dll": 58, "error": [58, 266], "when": [58, 266], "import": [58, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 257], "your": [58, 70], "miss": 58, "nvidia": 58, "cuda": 58, "driver": 58, "guid": [59, 73], "archiv": [60, 65, 76, 207, 245], "content": [60, 254, 255, 256, 257, 258, 259, 260, 264, 267], "directori": [60, 71], "structur": 60, "refer": [61, 62, 63, 65, 68, 69, 70, 71, 72, 76, 110, 111, 119, 139, 170, 189, 212, 224, 231, 237], "non": 61, "v": [61, 68, 262, 265], "evaluateclassifiermixin": [61, 116], "confus": 61, "matrix": 61, "roc": 61, "precis": 61, "recal": 61, "true": 61, "posit": 61, "rate": [61, 258], "fals": 61, "evaluateautoencodermixin": [61, 115], "auto": [61, 127, 243], "encod": [61, 127, 243], "mixin": 62, "audiodatasetmixin": [62, 113], "imagedatasetmixin": [62, 118], "custom": [62, 254, 255], "json": 62, "metric": 63, "entir": 63, "per": 63, "physic": [63, 244, 257, 259], "acceler": [63, 263], "befor": [63, 68, 72, 244, 246, 251], "save": [64, 256], "local": [64, 70, 71, 74, 255, 257, 258, 259, 260], "http": [64, 70], "convert": [65, 67, 257, 259, 265, 266], "optim": [65, 263], "supported_op": 65, "inference_input_typ": 65, "inference_output_typ": 65, "representative_dataset": 65, "search": 66, "path": [66, 228, 265], "name": 67, "discover": 67, "mltkmodel": [67, 69, 76, 121], "class": [67, 257, 258, 259, 265, 267], "instanc": [67, 69, 250, 255], "section": 67, "layout": [67, 69, 257, 263], "note": [67, 69, 255, 257, 259, 267], "about": [67, 69, 255, 257, 259, 264, 265, 266, 267], "hardcod": [67, 69], "callback": [67, 70, 257, 259], "augment": [67, 209, 257, 258, 259, 267], "summari": [68, 128, 130, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 246, 247, 248, 257, 259], "extern": [68, 72, 246, 251], "dry": [69, 249, 257, 259], "100": 69, "epoch": [69, 249, 261], "resum": 69, "monitor": 70, "start": [70, 255, 258], "troubleshoot": 70, "tab": 70, "appear": 70, "remot": [70, 71, 255, 258], "session": [70, 71], "machin": [70, 241, 255, 256, 257, 259, 260], "revers": 70, "tunnel": 70, "localhost": 70, "6002": 70, "web": [70, 267], "browser": 70, "connect": [71, 127, 264], "client": [71, 255], "keypair": [71, 255], "hostnam": 71, "port": 71, "usernam": 71, "kei": [71, 255, 266], "filenam": 71, "upload": 71, "startup": 71, "shutdown": [71, 255], "sync": 71, "locat": 71, "host": 71, "identity_fil": 71, "sshmixin": [71, 123], "user_set": 71, "yaml": 71, "config": [71, 266], "without": 71, "wait": 71, "retriev": 71, "previou": 71, "new": [71, 255], "forcefulli": 71, "discard": 71, "notebook": [73, 256, 257, 265], "googl": [73, 74, 102, 267], "colab": [73, 74], "standard": 74, "mltk_model_path": 75, "mltk_cache_dir": 75, "mltk_user_settings_path": 75, "mltk_readonli": 75, "mltk_setup_py_dep": 75, "mltk_temp_dir": 75, "py": [76, 253], "object": [76, 256, 257, 259, 260], "tflitemodel": [76, 191, 250], "kerasmodel": 76, "model_path": 77, "brd2601": [78, 95], "brd2204": 78, "brd4166": 78, "brd4186": 78, "brd4401": 78, "brd2705": 78, "core": [80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], "parallel_gener": [81, 82, 86, 87], "parallelaudiodatagener": 81, "parallelprocessparam": [82, 87], "audio_feature_gener": [83, 84], "audiofeaturegeneratorset": 84, "parallelimagedatagener": 86, "list_directori": 89, "tf_dataset": 91, "common": [92, 99, 100, 127], "acceleromet": [93, 110], "tflm_magic_wand": 93, "magic": 93, "wand": 93, "background_nois": [94, 95, 96], "ambient": 94, "background": [94, 95, 102], "nois": [94, 95, 102], "licens": [94, 98, 107, 145, 241], "esc50": 96, "esc": 96, "environment": 96, "sound": 96, "abstract": [96, 99, 100], "cite": 96, "direction_command": 97, "direct": 97, "mit_ir_survei": 98, "mit": 98, "impuls": [98, 259], "respons": [98, 259], "survei": 98, "credit": [98, 102, 255], "mlcommon": [99, 100], "ml_commons_keyword": 99, "ml": [99, 100, 258, 265], "ml_commons_voic": 100, "voic": [100, 214], "subset": 100, "on_off": 101, "On": [101, 259], "off": [101, 259], "speech_command": 102, "speech_commands_v2": 102, "speech": 102, "v2": [102, 109, 127], "histori": 102, "collect": 102, "organ": 102, "process": [102, 242], "citat": 102, "ten_digit": 103, "ten": 103, "digit": 103, "yes_no": 104, "ye": 104, "No": 104, "cifar10": 105, "fashion_mnist": 106, "fashion": 106, "mnist": [106, 107], "rock_paper_scissors_v1": 108, "rock": [108, 109, 257], "paper": [108, 109, 257], "scissor": [108, 109, 257], "v1": [108, 127, 146, 149], "rock_paper_scissors_v2": 109, "datasetmixin": 114, "evaluatemixin": 117, "mltkdataset": 120, "mltkmodelev": 122, "trainmixin": 124, "load_mltk_model": 125, "load_mltk_model_with_path": 125, "list_mltk_model": 125, "load_tflite_or_keras_model": 125, "load_tflite_model": 125, "weightsandbiasesmixin": 126, "architectur": [127, 144, 147, 150, 258, 259, 260], "depthwiseconv2d": 127, "fulli": [127, 264], "mobilenet": 127, "resnetv1": 127, "10": [127, 249], "tenet": 127, "audio_example1": 128, "report": [128, 130, 135, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 264, 266], "audio_tf_dataset": 129, "autoencoder_exampl": 130, "basic_exampl": [131, 253, 262], "basic_tf_dataset_exampl": 132, "binary_classif": 133, "conv1d_exampl": 134, "image_example1": 135, "image_tf_dataset": 136, "siamese_contrast": 138, "fingerprint_signature_gener": 140, "silicon": [141, 241], "lab": [141, 241], "keyword_spotting_alexa": 142, "keyword_spotting_mobilenetv2": 143, "keyword_spotting_numb": 144, "keyword_spotting_on_off": 145, "keyword_spotting_on_off_v2": 146, "chang": [146, 149], "keyword_spotting_on_off_v3": 147, "keyword_spotting_pacman": 148, "keyword_spotting_pacman_v2": 149, "keyword_spotting_pacman_v3": 150, "keyword_spotting_with_transfer_learn": 151, "rock_paper_scissor": 152, "tflite_micro_magic_wand": 154, "tflite_micro_speech": 155, "topologi": [155, 156, 157, 159, 160], "perform": [155, 156, 157, 159, 160], "float": [155, 156, 157, 159, 160], "point": [155, 156, 157, 159, 160], "anomaly_detect": 156, "characterist": [156, 159], "image_classif": 157, "tinyml": 158, "keyword_spot": 159, "visual_wake_word": 160, "evaluate_model": 161, "evaluate_classifi": 161, "classifierevaluationresult": 161, "evaluate_autoencod": 161, "autoencoderevaluationresult": 161, "profile_model": 163, "profilingmodelresult": 163, "profilinglayerresult": 163, "quantize_model": 164, "summarize_model": 165, "train_model": 166, "trainingresult": 166, "update_model_paramet": 167, "view_model": 168, "tflite_micro": [169, 171, 172, 173, 174, 175], "tflitemicroacceler": 169, "tflitemicrolayererror": 171, "tflitemicromodel": 172, "tflitemicromodeldetail": 173, "tflitemicroprofiledlayerresult": 174, "tflitemicro": 175, "tfliteactiv": 176, "tfliteaddlay": 177, "tfliteconv2dlay": 178, "tfliteconv2dlayeropt": 179, "tfliteconvparam": 180, "tflitedepthwiseconv2dlay": 181, "tflitedepthwiseconv2dlayeropt": 182, "tflitedepthwiseconvparam": 183, "tflitedequantizelay": 184, "flatbufferdictionari": 185, "tflitemodelparamet": [185, 193], "flatbuff": 185, "schema": 185, "tflitefullyconnectedlay": 186, "tflitefullyconnectedlayeropt": 187, "tflitefullyconnectedparam": 188, "tflitelay": 190, "tflitepad": 192, "tflitepooling2dlay": 194, "tflitepool2dlayeropt": 195, "tflitepoolparam": 196, "tflitequant": 197, "tflitequantizelay": 198, "tflitereshapelay": 199, "tfliteshap": 200, "tflitetensor": 201, "tflitetransposeconvlay": 202, "tflitetransposeconvlayeropt": 203, "tflitetransposeconvparam": 204, "tfliteunidirectionallstmlay": 205, "tfliteunidirectionallstmlayeropt": 206, "archive_download": 208, "audio_dataset_gener": [209, 210, 211, 213, 214, 215, 216], "generationconfig": 210, "audiodatasetgener": 211, "voicepitch": 215, "voicer": 216, "bin2head": 217, "hasher": 220, "jlink_stream": [222, 223, 225, 226], "jlinkcommandstream": 222, "jlinkdatastream": 223, "j": 224, "jlinkstream": 225, "jlinkstreamopt": 226, "logger": 227, "process_pool": 229, "processpool": 229, "reader": 231, "serial_read": 232, "serialread": 232, "shell_cmd": 233, "signal_handl": 234, "signalhandl": 234, "string_format": 235, "system": [236, 258], "uart_stream": 238, "uartstream": 238, "tutori": [239, 252, 256, 257, 259, 260, 261, 263, 265], "onli": 240, "singl": 240, "need": 240, "comparison": 240, "other": [240, 241, 254, 255], "solut": 240, "lot": 240, "all": 240, "integr": 240, "cloud": [240, 254, 255, 257, 259, 260, 261, 263, 267], "log": [240, 254], "learn": [241, 256, 257, 259, 260, 261], "toolkit": 241, "inform": [241, 254], "load": [242, 247, 248, 261, 265], "sampl": [242, 259], "print": [247, 248], "tflm": 247, "each": 247, "tensor": 247, "iter": 248, "meta": 248, "infer": 248, "access": 248, "calcul": 248, "weight": [248, 254, 261, 266], "argument": 250, "exist": 253, "origin": 253, "mnist_convnet": 253, "modifi": [253, 255], "next": [253, 255, 265, 266, 267], "bias": 254, "disclaim": [254, 255], "default": 254, "vast": 255, "ai": 255, "nutshel": 255, "you": 255, "protect": 255, "provid": 255, "bill": 255, "price": 255, "should": 255, "trust": 255, "card": 255, "info": 255, "account": 255, "public": 255, "disk": 255, "space": 255, "login": 255, "cpu": [255, 257, 259], "suggest": 255, "flow": 255, "everyth": 255, "cli": 255, "thi": [256, 257, 259, 260, 261, 263, 265], "siames": 256, "network": [256, 257], "pair": 256, "loss": 256, "function": 256, "determin": [256, 258], "id": [257, 265], "convolut": 257, "neural": 257, "label": 257, "necessari": 257, "defin": [257, 259], "constraint": 257, "accuraci": [257, 259], "deploi": [257, 259], "alexa": [258, 267], "prerequisit": [258, 260], "efr32xg24": 258, "analog": 258, "speaker": 258, "amplifi": 258, "pinout": 258, "neg": [258, 267], "balanc": 258, "frontend": [258, 266], "baud": 258, "tl": 259, "dr": 259, "acquir": 259, "repres": 259, "unknown": 259, "final": 259, "engin": 259, "edg": 259, "random": 259, "crop": 259, "known": 259, "detect": [259, 261], "pipelin": 259, "time": 259, "live": 260, "tradeoff": 260, "modul": 260, "firmwar": 260, "webpag": 260, "transfer": 261, "concept": 261, "base": 261, "descript": [261, 263], "small": 261, "valu": 261, "learningrateschedul": 261, "initi": 261, "unknown_class_percentag": 261, "adjust": 263, "tip": 264, "analyz": [264, 266], "scale": 264, "constant": 264, "center": 264, "mean": 264, "std": 264, "batch": [264, 266], "conv2d": 264, "layernorm": [264, 266], "onnx": 265, "convers": 265, "consider": 265, "map": 265, "channel": 265, "first": 265, "last": 265, "depend": 265, "saniti": 265, "check": 265, "simplifi": 265, "openvino": 265, "intermedi": 265, "lstm": 266, "takeawai": 266, "forc": 266, "uint16": 266, "numpi": 266, "runtim": 266, "batchnorm": 266, "possibl": 266, "remark": 266, "real": 267, "peopl": 267, "languag": 267, "cost": 267, "platform": 267, "gcp": 267, "microsoft": 267, "azur": 267, "amazon": 267, "servic": 267, "aw": 267}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"UART Stream Data Test": [[0, "uart-stream-data-test"]], "Setup Steps": [[0, "setup-steps"]], "Audio Feature Generator": [[1, "audio-feature-generator"]], "Overview": [[1, "overview"], [60, "overview"], [61, "overview"], [62, "overview"], [63, "overview"], [65, "overview"], [67, "overview"], [68, "overview"], [69, "overview"], [70, "overview"], [71, "overview"], [72, "overview"], [79, "overview"], [99, "overview"], [100, "overview"], [241, "overview"], [255, "overview"], [256, "overview"], [257, "overview"], [259, "overview"], [260, "overview"], [262, "overview"], [263, "overview"], [265, "overview"], [267, "overview"]], "Benefits": [[1, "benefits"]], "Gecko SDK Component": [[1, "gecko-sdk-component"]], "Source Code": [[1, "source-code"], [1, "id1"], [42, "source-code"], [45, "source-code"], [47, "source-code"], [48, "source-code"]], "MLTK C++ Python Wrapper": [[1, "mltk-c-python-wrapper"]], "Usage": [[1, "usage"], [4, "usage"], [6, "usage"], [8, "usage"], [10, "usage"], [12, "usage"], [15, "usage"], [17, "usage"], [19, "usage"], [21, "usage"], [23, "usage"], [25, "usage"], [27, "usage"], [29, "usage"], [30, "usage"], [64, "usage"]], "Audio Visualizer Utility": [[1, "audio-visualizer-utility"]], "Audio Utilities": [[2, "audio-utilities"]], "Audio Classification Utility": [[2, "audio-classification-utility"]], "Classify using PC Microphone": [[2, "classify-using-pc-microphone"]], "Classify using PC Microphone with simulated latency": [[2, "classify-using-pc-microphone-with-simulated-latency"]], "Classify using PC Microphone and record audio": [[2, "classify-using-pc-microphone-and-record-audio"]], "Classify using PC Microphone and dump spectrograms": [[2, "classify-using-pc-microphone-and-dump-spectrograms"]], "Classify using development board\u2019s microphone": [[2, "classify-using-development-board-s-microphone"]], "Record audio from development board\u2019s microphone": [[2, "record-audio-from-development-board-s-microphone"]], "Dump spectrograms generated by development board": [[2, "dump-spectrograms-generated-by-development-board"]], "Update AudioFeatureGenerator parameters": [[2, "update-audiofeaturegenerator-parameters"]], "Audio Visualization Utility": [[2, "audio-visualization-utility"]], "Synthetic Audio Dataset Generator": [[2, "synthetic-audio-dataset-generator"]], "Keyword Spotting Overview": [[3, "keyword-spotting-overview"]], "classify_audio": [[4, "classify-audio"]], "Additional Documentation": [[4, "additional-documentation"], [6, "additional-documentation"], [8, "additional-documentation"], [10, "additional-documentation"], [12, "additional-documentation"], [15, "additional-documentation"], [17, "additional-documentation"], [19, "additional-documentation"], [21, "additional-documentation"], [23, "additional-documentation"], [25, "additional-documentation"], [27, "additional-documentation"], [29, "additional-documentation"], [30, "additional-documentation"]], "classify_image": [[6, "classify-image"]], "commander": [[8, "commander"], [77, "commander"]], "evaluate": [[10, "evaluate"]], "fingerprint_reader": [[12, "fingerprint-reader"]], "Command-Line": [[14, "command-line"]], "Command Basics": [[14, "command-basics"]], "Enable Python Virtual Environment": [[14, "enable-python-virtual-environment"]], "Command Format": [[14, "command-format"]], "Help": [[14, "help"]], "Supported Operations": [[14, "supported-operations"]], "profile": [[15, "profile"]], "quantize": [[17, "quantize"]], "ssh": [[19, "ssh"], [77, "ssh"]], "summarize": [[21, "summarize"]], "tensorboard": [[23, "tensorboard"]], "train": [[25, "train"]], "update_params": [[27, "update-params"]], "view": [[29, "view"]], "view_audio": [[30, "view-audio"]], "C++ Build Options": [[33, "c-build-options"]], "MLTK_CMAKE_LOG_LEVEL": [[33, "mltk-cmake-log-level"]], "MLTK_PLATFORM_NAME": [[33, "mltk-platform-name"]], "TFLITE_MICRO_ACCELERATOR": [[33, "tflite-micro-accelerator"], [37, "tflite-micro-accelerator"], [39, "tflite-micro-accelerator"], [41, "tflite-micro-accelerator"]], "MLTK_TARGET": [[33, "mltk-target"]], "MLTK_ENABLE_DEBUG_INFO_IN_RELEASE_BUILDS": [[33, "mltk-enable-debug-info-in-release-builds"]], "MLTK_ENABLE_OUTPUT_DISASSEMBLY": [[33, "mltk-enable-output-disassembly"]], "MODEL_PROFILER_MODEL": [[33, "model-profiler-model"], [41, "model-profiler-model"]], "AUDIO_CLASSIFIER_MODEL": [[33, "audio-classifier-model"]], "Command-Line Development": [[34, "command-line-development"]], "Install Tools": [[34, "install-tools"], [43, "install-tools"], [44, "install-tools"]], "0) Setup OS": [[34, "setup-os"], [43, "setup-os"], [44, "setup-os"]], "1) Install CMake": [[34, "install-cmake"], [43, "install-cmake"], [44, "install-cmake"]], "2) Install 7-Zip": [[34, "install-7-zip"], [43, "install-7-zip"], [44, "install-7-zip"]], "3) Install Python": [[34, "install-python"], [43, "install-python"], [44, "install-python"]], "4) Install GIT": [[34, "install-git"], [43, "install-git"]], "5) Clone the MLTK repository": [[34, "clone-the-mltk-repository"]], "Build Sequence": [[34, "build-sequence"]], "1) Configure Build Settings": [[34, "configure-build-settings"]], "2) Configure CMake Project": [[34, "configure-cmake-project"]], "3) Build CMake Project for a specific target": [[34, "build-cmake-project-for-a-specific-target"]], "4) Run the output executable": [[34, "run-the-output-executable"]], "Example Applications": [[34, "example-applications"], [43, "example-applications"], [44, "example-applications"]], "Python Wrappers": [[34, "python-wrappers"], [42, "python-wrappers"], [44, "python-wrappers"]], "Audio Classifier": [[35, "audio-classifier"]], "Quick Links": [[35, "quick-links"], [36, "quick-links"], [37, "quick-links"], [38, "quick-links"], [39, "quick-links"], [41, "quick-links"], [254, "quick-links"], [255, "quick-links"], [256, "quick-links"], [257, "quick-links"], [258, "quick-links"], [259, "quick-links"], [260, "quick-links"], [261, "quick-links"], [263, "quick-links"], [265, "quick-links"], [266, "quick-links"], [267, "quick-links"], [267, "id1"], [267, "id3"], [267, "id4"]], "Behavior": [[35, "behavior"], [36, "behavior"], [37, "behavior"], [39, "behavior"]], "Updating the model": [[35, "updating-the-model"], [36, "updating-the-model"], [37, "updating-the-model"], [39, "updating-the-model"], [41, "updating-the-model"]], "via Simplicity Studio": [[35, "via-simplicity-studio"], [36, "via-simplicity-studio"], [37, "via-simplicity-studio"], [39, "via-simplicity-studio"], [41, "via-simplicity-studio"]], "via classify_audio Command": [[35, "via-classify-audio-command"]], "via CMake": [[35, "via-cmake"], [36, "via-cmake"], [37, "via-cmake"], [39, "via-cmake"], [41, "via-cmake"]], "Build, Run, Debug": [[35, "build-run-debug"], [36, "build-run-debug"], [37, "build-run-debug"], [38, "build-run-debug"], [39, "build-run-debug"], [41, "build-run-debug"]], "Simplicity Studio": [[35, "simplicity-studio"], [36, "simplicity-studio"], [37, "simplicity-studio"], [38, "simplicity-studio"], [39, "simplicity-studio"], [41, "simplicity-studio"], [52, "simplicity-studio"]], "Visual Studio Code": [[35, "visual-studio-code"], [36, "visual-studio-code"], [37, "visual-studio-code"], [38, "visual-studio-code"], [39, "visual-studio-code"], [41, "visual-studio-code"]], "Command-line": [[35, "command-line"], [36, "command-line"], [37, "command-line"], [38, "command-line"], [39, "command-line"], [41, "command-line"]], "Dumping audio & spectrograms to PC": [[35, "dumping-audio-spectrograms-to-pc"]], "Model Parameters": [[35, "model-parameters"], [36, "model-parameters"], [62, "model-parameters"], [256, "model-parameters"], [257, "model-parameters"], [259, "model-parameters"]], "Modifications": [[35, "modifications"]], "CMake Variables": [[35, "cmake-variables"]], "VERBOSE": [[35, "verbose"]], "WINDOW_MS": [[35, "window-ms"]], "THRESHOLD": [[35, "threshold"]], "SUPPRESSION_MS": [[35, "suppression-ms"]], "COUNT": [[35, "count"]], "VOLUME_GAIN": [[35, "volume-gain"]], "LATENCY_MS": [[35, "latency-ms"]], "AUDIO_CLASSIFIER_ENABLE_AUDIO_IO": [[35, "audio-classifier-enable-audio-io"]], "Additional Reading": [[35, "additional-reading"], [36, "additional-reading"]], "BLE Audio Classifier": [[36, "ble-audio-classifier"]], "Pac-Man Demo": [[36, "pac-man-demo"]], "Fingerprint Authenticator": [[37, "fingerprint-authenticator"]], "Video": [[37, "video"], [39, "video"]], "State Diagram": [[37, "state-diagram"]], "Signature Generation Model": [[37, "signature-generation-model"]], "via fingeprint_reader Command": [[37, "via-fingeprint-reader-command"]], "Hardware Setup": [[37, "hardware-setup"], [39, "hardware-setup"]], "Dumping images to PC": [[37, "dumping-images-to-pc"], [39, "dumping-images-to-pc"]], "Build Settings": [[37, "build-settings"], [39, "build-settings"], [41, "build-settings"]], "FINGERPRINT_AUTHENTICATOR_MODEL": [[37, "fingerprint-authenticator-model"]], "Hello World": [[38, "hello-world"]], "Image Classifier": [[39, "image-classifier"]], "Classification Model": [[39, "classification-model"]], "Model Input": [[39, "model-input"]], "Model Input Normalization": [[39, "model-input-normalization"]], "Model Output": [[39, "model-output"]], "via classify_image Command": [[39, "via-classify-image-command"]], "via update_params command": [[39, "via-update-params-command"], [41, "via-update-params-command"]], "IMAGE_CLASSIFIER_MODEL": [[39, "image-classifier-model"]], "C++ Examples": [[40, "c-examples"]], "Model Profiler": [[41, "model-profiler"], [63, "model-profiler"], [257, "model-profiler"], [259, "model-profiler"]], "MODEL_PROFILER_GENERATE_OP_RESOLVER_HEADER": [[41, "model-profiler-generate-op-resolver-header"]], "MODEL_PROFILER_MODEL_MEMORY_SECTION": [[41, "model-profiler-model-memory-section"]], "MODEL_PROFILER_RUNTIME_MEMORY_SIZE": [[41, "model-profiler-runtime-memory-size"]], "MODEL_PROFILER_RUNTIME_MEMORY_SECTION": [[41, "model-profiler-runtime-memory-section"]], "TFLITE_MICRO_ACCELERATOR_PROFILER_ENABLED": [[41, "tflite-micro-accelerator-profiler-enabled"]], "TFLITE_MICRO_RECORDER_ENABLED": [[41, "tflite-micro-recorder-enabled"]], "C++ Development": [[42, "c-development"]], "Development Modes": [[42, "development-modes"]], "Examples": [[42, "examples"], [67, "examples"]], "Simplicity Studio Development": [[43, "simplicity-studio-development"]], "5) Install Simplicity Studio 5": [[43, "install-simplicity-studio-5"]], "Install MLTK": [[43, "install-mltk"], [44, "install-mltk"]], "1) Clone the MLTK repository": [[43, "clone-the-mltk-repository"], [44, "clone-the-mltk-repository"]], "2) Run the install script": [[43, "run-the-install-script"], [44, "run-the-install-script"]], "3) Activate the MLTK Python virtual environment": [[43, "activate-the-mltk-python-virtual-environment"], [44, "activate-the-mltk-python-virtual-environment"]], "Install the MLTK into the Gecko SDK": [[43, "install-the-mltk-into-the-gecko-sdk"]], "Add the MLTK Gecko SDK to Simplicity Studio": [[43, "add-the-mltk-gecko-sdk-to-simplicity-studio"]], "Visual Studio Code Development": [[44, "visual-studio-code-development"]], "4) Install Segger GDB Debug Server": [[44, "install-segger-gdb-debug-server"]], "5) Install a Serial Terminal": [[44, "install-a-serial-terminal"]], "6) Install GIT": [[44, "install-git"]], "7) Windows: Install the C++ Redistributable Package": [[44, "windows-install-the-c-redistributable-package"]], "VSCode Setup": [[44, "vscode-setup"]], "1) Install VSCode": [[44, "install-vscode"]], "2) Open the MLTK VSCode workspace": [[44, "open-the-mltk-vscode-workspace"]], "3) Install the recommended extensions": [[44, "install-the-recommended-extensions"]], "4) Select the Python Interpreter": [[44, "select-the-python-interpreter"]], "Build for Windows or Linux": [[44, "build-for-windows-or-linux"]], "1) Optionally create file: user_options.cmake": [[44, "optionally-create-file-user-options-cmake"]], "2) Select the CMake Kit": [[44, "select-the-cmake-kit"]], "3) Configure the CMake Project": [[44, "configure-the-cmake-project"], [44, "id1"]], "4) Select the build type and build target": [[44, "select-the-build-type-and-build-target"], [44, "id2"]], "5) Build and run application": [[44, "build-and-run-application"]], "6) Or debug application": [[44, "or-debug-application"]], "Build for embedded": [[44, "build-for-embedded"]], "0) Configure Serial Terminal": [[44, "configure-serial-terminal"]], "1) Create file: user_options.cmake": [[44, "create-file-user-options-cmake"]], "2) Select the MLTK-ARM-GCC CMake Kit": [[44, "select-the-mltk-arm-gcc-cmake-kit"]], "5) Build, download, and run application": [[44, "build-download-and-run-application"]], "6) Build, download, and debug application": [[44, "build-download-and-debug-application"]], "AudioFeatureGenerator Python Wrapper": [[45, "audiofeaturegenerator-python-wrapper"]], "Additional Links": [[45, "additional-links"], [47, "additional-links"], [48, "additional-links"]], "Building the Wrapper": [[45, "building-the-wrapper"], [47, "building-the-wrapper"], [48, "building-the-wrapper"]], "Pre-built": [[45, "pre-built"], [47, "pre-built"], [48, "pre-built"]], "Automatic Build": [[45, "automatic-build"], [47, "automatic-build"], [48, "automatic-build"]], "Manual build via MLTK command": [[45, "manual-build-via-mltk-command"], [47, "manual-build-via-mltk-command"], [48, "manual-build-via-mltk-command"]], "Manual build via CMake": [[45, "manual-build-via-cmake"], [47, "manual-build-via-cmake"], [48, "manual-build-via-cmake"]], "C++ Python Wrappers": [[46, "c-python-wrappers"]], "MVP Python Wrapper": [[47, "mvp-python-wrapper"]], "Tensorflow-Lite Micro Python Wrapper": [[48, "tensorflow-lite-micro-python-wrapper"]], "API Examples": [[49, "api-examples"]], "How can I debug my model during training?": [[50, "how-can-i-debug-my-model-during-training"]], "How can I reduce my model\u2019s size?": [[51, "how-can-i-reduce-my-model-s-size"]], "What are the model resource requirements?": [[51, "what-are-the-model-resource-requirements"]], "Reduce model input size": [[51, "reduce-model-input-size"]], "Use int8 model input data type": [[51, "use-int8-model-input-data-type"]], "Reduce Filter Count": [[51, "reduce-filter-count"]], "Increase Strides": [[51, "increase-strides"]], "Decrease kernel sizes": [[51, "decrease-kernel-sizes"]], "Reduce FullyConnected units": [[51, "reduce-fullyconnected-units"]], "Use pooling layers": [[51, "use-pooling-layers"]], "How do I run my model on an embedded device?": [[52, "how-do-i-run-my-model-on-an-embedded-device"]], "CMake": [[52, "cmake"]], "Command line": [[52, "command-line"]], "Frequently Asked Questions": [[53, "frequently-asked-questions"]], "Linux: Why isn\u2019t the GPU working?": [[54, "linux-why-isn-t-the-gpu-working"]], "Where is my trained model?": [[55, "where-is-my-trained-model"]], "Why does the Keras (.h5) model work during evaluation but the TF-Lite (.tflite) does not?": [[56, "why-does-the-keras-h5-model-work-during-evaluation-but-the-tf-lite-tflite-does-not"]], "Why is the model not returning correct results on the embedded device?": [[57, "why-is-the-model-not-returning-correct-results-on-the-embedded-device"]], "Input Data Preprocessing": [[57, "input-data-preprocessing"]], "Input Data Type": [[57, "input-data-type"]], "Hint: Just use float32": [[57, "hint-just-use-float32"]], "Windows: I am seeing a DLL error when importing Tensorflow": [[58, "windows-i-am-seeing-a-dll-error-when-importing-tensorflow"]], "Your setup is missing a required DLL": [[58, "your-setup-is-missing-a-required-dll"]], "Your setup requires the NVIDIA CUDA driver": [[58, "your-setup-requires-the-nvidia-cuda-driver"]], "Modeling Guides": [[59, "modeling-guides"]], "Model Archive File": [[60, "model-archive-file"]], "Contents": [[60, "contents"], [254, "contents"], [255, "contents"], [264, "contents"]], "Directory Structure": [[60, "directory-structure"]], "Model Evaluation": [[61, "model-evaluation"], [144, "model-evaluation"], [257, "model-evaluation"], [259, "model-evaluation"]], "Quick Reference": [[61, "quick-reference"], [62, "quick-reference"], [63, "quick-reference"], [65, "quick-reference"], [68, "quick-reference"], [69, "quick-reference"], [70, "quick-reference"], [71, "quick-reference"], [72, "quick-reference"], [76, "quick-reference"]], "Non-Quantized vs Quantized Model Evaluation": [[61, "non-quantized-vs-quantized-model-evaluation"]], "Model Profiling vs Model Evaluation": [[61, "model-profiling-vs-model-evaluation"]], "Model Specification": [[61, "model-specification"], [67, "model-specification"], [69, "model-specification"], [128, "model-specification"], [129, "model-specification"], [130, "model-specification"], [131, "id1"], [132, "id1"], [133, "model-specification"], [134, "model-specification"], [135, "model-specification"], [136, "model-specification"], [138, "model-specification"], [140, "model-specification"], [142, "model-specification"], [143, "model-specification"], [144, "model-specification"], [145, "model-specification"], [146, "model-specification"], [147, "model-specification"], [148, "model-specification"], [149, "model-specification"], [150, "model-specification"], [151, "model-specification"], [152, "model-specification"], [154, "model-specification"], [155, "model-specification"], [156, "model-specification"], [157, "model-specification"], [159, "model-specification"], [160, "model-specification"], [259, "model-specification"], [263, "model-specification"]], "Evaluation Results": [[61, "evaluation-results"], [266, "evaluation-results"]], "EvaluateClassifierMixin": [[61, "evaluateclassifiermixin"]], "Confusion Matrix": [[61, "confusion-matrix"]], "ROC": [[61, "roc"]], "Precision vs Recall": [[61, "precision-vs-recall"]], "True Positive Rate": [[61, "true-positive-rate"]], "False Positive Rate": [[61, "false-positive-rate"]], "EvaluateAutoEncoderMixin": [[61, "evaluateautoencodermixin"]], "Command": [[61, "command"], [62, "command"], [63, "command"], [65, "command"], [68, "command"], [69, "command"], [71, "command"], [72, "command"], [257, "command"], [259, "command"]], "Example 1: Evaluate Classification .h5 Model": [[61, "example-1-evaluate-classification-h5-model"], [243, "example-1-evaluate-classification-h5-model"]], "Example 2: Evaluate Classification .tflite Model": [[61, "example-2-evaluate-classification-tflite-model"], [243, "example-2-evaluate-classification-tflite-model"]], "Example 3: Evaluate Auto-Encoder .h5 Model": [[61, "example-3-evaluate-auto-encoder-h5-model"], [243, "example-3-evaluate-auto-encoder-h5-model"]], "Python API": [[61, "python-api"], [62, "python-api"], [63, "python-api"], [65, "python-api"], [68, "python-api"], [69, "python-api"], [72, "python-api"]], "Parameter Basics": [[62, "parameter-basics"]], "Viewing Parameters": [[62, "viewing-parameters"]], "General Parameters": [[62, "general-parameters"]], "Model Mixins": [[62, "model-mixins"]], "AudioDatasetMixin": [[62, "audiodatasetmixin"]], "ImageDatasetMixin": [[62, "imagedatasetmixin"]], "Custom Parameters": [[62, "custom-parameters"]], "Add Via Model Script": [[62, "add-via-model-script"]], "Add Via Command/API": [[62, "add-via-command-api"]], "Example 1: Update model specification": [[62, "example-1-update-model-specification"], [250, "example-1-update-model-specification"]], "Example 2: Update with command-line": [[62, "example-2-update-with-command-line"]], "Example 3: Update with .json file": [[62, "example-3-update-with-json-file"]], "Profiling Metrics": [[63, "profiling-metrics"]], "Entire Model Metrics": [[63, "entire-model-metrics"]], "Per Layer Metrics": [[63, "per-layer-metrics"]], "Modes of Operation": [[63, "modes-of-operation"]], "Basic Simulator Mode": [[63, "basic-simulator-mode"]], "Hardware Simulator Mode": [[63, "hardware-simulator-mode"]], "Physical Device Mode": [[63, "physical-device-mode"]], "Example 1: Profile in basic simulator": [[63, "example-1-profile-in-basic-simulator"]], "Example 2: Profile in MVP hardware simulator": [[63, "example-2-profile-in-mvp-hardware-simulator"]], "Example 3: Profile on physical device using MVP hardware accelerator": [[63, "example-3-profile-on-physical-device-using-mvp-hardware-accelerator"]], "Example 4: Profile model before training": [[63, "example-4-profile-model-before-training"], [244, "example-4-profile-model-before-training"]], "Model Profiler Utility": [[64, "model-profiler-utility"]], "Download": [[64, "download"]], "Saving the results": [[64, "saving-the-results"]], "Local HTTP server options": [[64, "local-http-server-options"]], "Model Quantization": [[65, "model-quantization"]], "Tensorflow-Lite Converter Settings": [[65, "tensorflow-lite-converter-settings"], [67, "tensorflow-lite-converter-settings"], [266, "tensorflow-lite-converter-settings"]], "optimizations": [[65, "optimizations"]], "supported_ops": [[65, "supported-ops"]], "inference_input_type": [[65, "inference-input-type"]], "inference_output_type": [[65, "inference-output-type"]], "representative_dataset": [[65, "representative-dataset"]], "Example 1: Update .tflite in model archive": [[65, "example-1-update-tflite-in-model-archive"], [245, "example-1-update-tflite-in-model-archive"]], "Model Search Path": [[66, "model-search-path"]], "Model Name": [[67, "model-name"]], "Discoverable Models": [[67, "discoverable-models"]], "MltkModel Class Instance": [[67, "mltkmodel-class-instance"]], "Specification Sections": [[67, "specification-sections"]], "Model Layout": [[67, "model-layout"], [69, "model-layout"]], "Note about hardcoding model layer parameters": [[67, "note-about-hardcoding-model-layer-parameters"], [69, "note-about-hardcoding-model-layer-parameters"]], "General Settings": [[67, "general-settings"]], "Basic Training Settings": [[67, "basic-training-settings"]], "Training Keras Callback Settings": [[67, "training-keras-callback-settings"]], "Basic Dataset Settings": [[67, "basic-dataset-settings"]], "Dataset Augmentation Settings": [[67, "dataset-augmentation-settings"]], "Tensorflow Dataset API": [[67, "tensorflow-dataset-api"]], "Evaluation Settings": [[67, "evaluation-settings"]], "Additional Parameters": [[67, "additional-parameters"]], "Model Summary": [[68, "model-summary"], [128, "model-summary"], [130, "model-summary"], [133, "model-summary"], [134, "model-summary"], [135, "model-summary"], [138, "model-summary"], [140, "model-summary"], [142, "model-summary"], [143, "model-summary"], [144, "model-summary"], [145, "model-summary"], [146, "model-summary"], [147, "model-summary"], [148, "model-summary"], [149, "model-summary"], [150, "model-summary"], [151, "model-summary"], [152, "model-summary"], [154, "model-summary"], [155, "model-summary"], [156, "model-summary"], [157, "model-summary"], [159, "model-summary"], [160, "model-summary"], [257, "model-summary"], [259, "model-summary"]], "Keras Model vs Tensorflow-Lite Model Summary": [[68, "keras-model-vs-tensorflow-lite-model-summary"]], "Example 1: Summarize Keras model": [[68, "example-1-summarize-keras-model"], [246, "example-1-summarize-keras-model"]], "Example 2: Summarize Tensorflow-Lite model": [[68, "example-2-summarize-tensorflow-lite-model"], [246, "example-2-summarize-tensorflow-lite-model"]], "Example 3: Summarize external Tensorflow-Lite model": [[68, "example-3-summarize-external-tensorflow-lite-model"], [246, "example-3-summarize-external-tensorflow-lite-model"]], "Example 4: Summarize model before training": [[68, "example-4-summarize-model-before-training"], [246, "example-4-summarize-model-before-training"]], "Model Training": [[69, "model-training"], [257, "model-training"], [259, "model-training"]], "MltkModel Instance": [[69, "mltkmodel-instance"]], "Training Output": [[69, "training-output"]], "Example 1: Train as a \u201cdry run\u201d": [[69, "example-1-train-as-a-dry-run"], [249, "example-1-train-as-a-dry-run"]], "Example 2: Train for 100 epochs": [[69, "example-2-train-for-100-epochs"]], "Example 3: Resume Training": [[69, "example-3-resume-training"]], "Model Training Monitor": [[70, "model-training-monitor"]], "1) Configure the Tensorboard callback": [[70, "configure-the-tensorboard-callback"], [70, "id1"]], "2) Train the model": [[70, "train-the-model"]], "3) Start Tensorboard": [[70, "start-tensorboard"]], "Model Training Profiler": [[70, "model-training-profiler"]], "Troubleshoot: Profile tab does not appear": [[70, "troubleshoot-profile-tab-does-not-appear"]], "Run Tensorboard from remote SSH session": [[70, "run-tensorboard-from-remote-ssh-session"]], "2) Train the model on the remote machine": [[70, "train-the-model-on-the-remote-machine"]], "3) Start Tensorboard on the remote machine": [[70, "start-tensorboard-on-the-remote-machine"]], "4) Open a reverse SSH tunnel on the local machine": [[70, "open-a-reverse-ssh-tunnel-on-the-local-machine"]], "5) Open http://localhost:6002 in your web-browser": [[70, "open-http-localhost-6002-in-your-web-browser"]], "Model Training via SSH": [[71, "model-training-via-ssh"]], "SSH Connection": [[71, "ssh-connection"]], "Installing an SSH client": [[71, "installing-an-ssh-client"]], "Windows": [[71, "windows"]], "Linux": [[71, "linux"]], "Generating a Keypair": [[71, "generating-a-keypair"]], "Additional Resources": [[71, "additional-resources"]], "Command sequence": [[71, "command-sequence"]], "Settings": [[71, "settings"], [77, "settings"]], "Remote Working Directory": [[71, "remote-working-directory"]], "Hostname": [[71, "hostname"]], "Port": [[71, "port"]], "Username": [[71, "username"]], "Key Filename": [[71, "key-filename"]], "Environment": [[71, "environment"]], "Upload Files": [[71, "upload-files"]], "Startup Commands": [[71, "startup-commands"]], "Download Files": [[71, "download-files"]], "Shutdown Commands": [[71, "shutdown-commands"]], "Sync Local MLTK": [[71, "sync-local-mltk"]], "Settings Locations": [[71, "settings-locations"]], "Command-line options": [[71, "command-line-options"]], "\u2013host": [[71, "host"]], "\u2013port": [[71, "id1"]], "\u2013identity_file": [[71, "identity-file"]], "SshMixin": [[71, "sshmixin"]], "Example": [[71, "example"], [71, "id2"], [71, "id3"], [77, "example"]], "~/.mltk/user_settings.yaml": [[71, "mltk-user-settings-yaml"]], "~/.ssh/config": [[71, "ssh-config"]], "Command Examples": [[71, "command-examples"]], "Example 1: Train with settings configured in user_settings.yaml": [[71, "example-1-train-with-settings-configured-in-user-settings-yaml"]], "Example 2: Train with settings on command-line": [[71, "example-2-train-with-settings-on-command-line"]], "Example 3: Train without wait for results": [[71, "example-3-train-without-wait-for-results"]], "Example 4: Retrieve results from previous training session": [[71, "example-4-retrieve-results-from-previous-training-session"]], "Example 5: Train new model, and forcefully discard previous": [[71, "example-5-train-new-model-and-forcefully-discard-previous"]], "Model Visualizer": [[72, "model-visualizer"]], "Example 1: View Keras model": [[72, "example-1-view-keras-model"], [251, "example-1-view-keras-model"]], "Example 2: View Tensorflow-Lite model": [[72, "example-2-view-tensorflow-lite-model"], [251, "example-2-view-tensorflow-lite-model"]], "Example 3: View external Tensorflow-Lite model": [[72, "example-3-view-external-tensorflow-lite-model"], [251, "example-3-view-external-tensorflow-lite-model"]], "Example 4: View model before training": [[72, "example-4-view-model-before-training"], [251, "example-4-view-model-before-training"]], "Notebook Examples Guide": [[73, "notebook-examples-guide"]], "VSCode Notebooks": [[73, "vscode-notebooks"]], "Google Colab": [[73, "google-colab"], [74, "google-colab"]], "Installation": [[74, "installation"], [241, "installation"]], "Standard Python Package": [[74, "standard-python-package"]], "Update Python Package": [[74, "update-python-package"]], "Local Development": [[74, "local-development"]], "Environment Variables": [[75, "environment-variables"]], "MLTK_MODEL_PATHS": [[75, "mltk-model-paths"]], "MLTK_CACHE_DIR": [[75, "mltk-cache-dir"]], "MLTK_USER_SETTINGS_PATH": [[75, "mltk-user-settings-path"]], "MLTK_READONLY": [[75, "mltk-readonly"]], "MLTK_SETUP_PY_DEPS": [[75, "mltk-setup-py-deps"]], "MLTK_TEMP_DIR": [[75, "mltk-temp-dir"]], "File Types": [[76, "file-types"]], ".tflite: Tensorflow-Lite Model": [[76, "tflite-tensorflow-lite-model"]], ".h5: Keras Model": [[76, "h5-keras-model"]], ".mltk.zip: MLTK Model Archive": [[76, "mltk-zip-mltk-model-archive"]], ".py: Model Specification": [[76, "py-model-specification"]], "Model Object Types": [[76, "model-object-types"]], "MltkModel": [[76, "mltkmodel"]], "TfliteModel": [[76, "tflitemodel"]], "KerasModel": [[76, "kerasmodel"]], "Settings File": [[77, "settings-file"]], "model_paths": [[77, "model-paths"]], "Supported Hardware": [[78, "supported-hardware"]], "BRD2601": [[78, "brd2601"]], "BRD2204": [[78, "brd2204"]], "BRD4166": [[78, "brd4166"]], "BRD4186": [[78, "brd4186"]], "BRD4401": [[78, "brd4401"]], "BRD2705": [[78, "brd2705"]], "mltk.core.preprocess.utils.audio": [[80, "module-mltk.core.preprocess.utils.audio"]], "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator": [[81, "mltk-core-preprocess-audio-parallel-generator-parallelaudiodatagenerator"]], "mltk.core.preprocess.audio.parallel_generator.ParallelProcessParams": [[82, "mltk-core-preprocess-audio-parallel-generator-parallelprocessparams"]], "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator": [[83, "mltk-core-preprocess-audio-audio-feature-generator-audiofeaturegenerator"]], "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings": [[84, "mltk-core-preprocess-audio-audio-feature-generator-audiofeaturegeneratorsettings"]], "mltk.core.preprocess.utils.image": [[85, "module-mltk.core.preprocess.utils.image"]], "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator": [[86, "mltk-core-preprocess-image-parallel-generator-parallelimagedatagenerator"]], "mltk.core.preprocess.image.parallel_generator.ParallelProcessParams": [[87, "mltk-core-preprocess-image-parallel-generator-parallelprocessparams"]], "Data Preprocessing": [[88, "data-preprocessing"]], "mltk.core.preprocess.utils.list_directory": [[89, "module-mltk.core.preprocess.utils.list_directory"]], "mltk.core.preprocess.utils.normalize": [[90, "module-mltk.core.preprocess.utils.normalize"]], "mltk.core.preprocess.utils.tf_dataset": [[91, "module-mltk.core.preprocess.utils.tf_dataset"]], "Common Utilities": [[92, "common-utilities"]], "mltk.datasets.accelerometer.tflm_magic_wand": [[93, "module-mltk.datasets.accelerometer.tflm_magic_wand"]], "Tensorflow-Lite Micro Magic Wand": [[93, "tensorflow-lite-micro-magic-wand"]], "mltk.datasets.audio.background_noise.ambient": [[94, "module-mltk.datasets.audio.background_noise.ambient"]], "Generic Background Noise": [[94, "generic-background-noise"]], "License": [[94, "license"], [98, "license"], [107, "license"], [145, "license"], [241, "license"]], "mltk.datasets.audio.background_noise.brd2601": [[95, "module-mltk.datasets.audio.background_noise.brd2601"]], "BRD2601 Background Noise": [[95, "brd2601-background-noise"]], "mltk.datasets.audio.background_noise.esc50": [[96, "module-mltk.datasets.audio.background_noise.esc50"]], "ESC: Dataset for Environmental Sound Classification": [[96, "esc-dataset-for-environmental-sound-classification"]], "Abstract": [[96, "abstract"], [99, "abstract"], [100, "abstract"]], "Citing": [[96, "citing"]], "mltk.datasets.audio.direction_commands": [[97, "module-mltk.datasets.audio.direction_commands"]], "Direction Commands": [[97, "direction-commands"]], "mltk.datasets.audio.mit_ir_survey": [[98, "module-mltk.datasets.audio.mit_ir_survey"]], "MIT Impulse Response Survey": [[98, "mit-impulse-response-survey"]], "Credits": [[98, "credits"], [102, "credits"]], "mltk.datasets.audio.mlcommons.ml_commons_keywords": [[99, "module-mltk.datasets.audio.mlcommons.ml_commons_keywords"]], "ML Commons Keywords": [[99, "ml-commons-keywords"]], "mltk.datasets.audio.mlcommons.ml_commons_voice": [[100, "module-mltk.datasets.audio.mlcommons.ml_commons_voice"]], "ML Commons Voice Subset": [[100, "ml-commons-voice-subset"]], "mltk.datasets.audio.on_off": [[101, "module-mltk.datasets.audio.on_off"]], "On/Off": [[101, "on-off"]], "mltk.datasets.audio.speech_commands.speech_commands_v2": [[102, "module-mltk.datasets.audio.speech_commands.speech_commands_v2"]], "Google Speech Commands v2": [[102, "google-speech-commands-v2"]], "History": [[102, "history"]], "Collection": [[102, "collection"]], "Organization": [[102, "organization"]], "Processing": [[102, "processing"]], "Background Noise": [[102, "background-noise"]], "Citations": [[102, "citations"]], "mltk.datasets.audio.ten_digits": [[103, "module-mltk.datasets.audio.ten_digits"]], "Ten Digits": [[103, "ten-digits"]], "mltk.datasets.audio.yes_no": [[104, "module-mltk.datasets.audio.yes_no"]], "Yes/No": [[104, "yes-no"]], "mltk.datasets.image.cifar10": [[105, "module-mltk.datasets.image.cifar10"]], "CIFAR10": [[105, "cifar10"]], "mltk.datasets.image.fashion_mnist": [[106, "module-mltk.datasets.image.fashion_mnist"]], "Fashion-MNIST": [[106, "fashion-mnist"]], "mltk.datasets.image.mnist": [[107, "module-mltk.datasets.image.mnist"]], "MNIST": [[107, "mnist"]], "mltk.datasets.image.rock_paper_scissors_v1": [[108, "module-mltk.datasets.image.rock_paper_scissors_v1"]], "Rock, Paper, Scissors v1": [[108, "rock-paper-scissors-v1"]], "mltk.datasets.image.rock_paper_scissors_v2": [[109, "module-mltk.datasets.image.rock_paper_scissors_v2"]], "Rock, Paper, Scissors v2": [[109, "rock-paper-scissors-v2"]], "Reference Datasets": [[110, "reference-datasets"]], "Audio Datasets": [[110, "audio-datasets"]], "Image Datasets": [[110, "image-datasets"]], "Accelerometer Datasets": [[110, "accelerometer-datasets"]], "API Reference": [[111, "api-reference"], [119, "api-reference"], [170, "api-reference"], [189, "api-reference"], [212, "api-reference"], [224, "api-reference"], [231, "api-reference"], [237, "api-reference"]], "Keras Model": [[112, "keras-model"]], "mltk.core.AudioDatasetMixin": [[113, "mltk-core-audiodatasetmixin"]], "mltk.core.DatasetMixin": [[114, "mltk-core-datasetmixin"]], "mltk.core.EvaluateAutoEncoderMixin": [[115, "mltk-core-evaluateautoencodermixin"]], "mltk.core.EvaluateClassifierMixin": [[116, "mltk-core-evaluateclassifiermixin"]], "mltk.core.EvaluateMixin": [[117, "mltk-core-evaluatemixin"]], "mltk.core.ImageDatasetMixin": [[118, "mltk-core-imagedatasetmixin"]], "MLTK Model": [[119, "mltk-model"]], "Example Usage": [[119, "example-usage"], [170, "example-usage"], [189, "example-usage"], [212, "example-usage"], [224, "example-usage"], [231, "example-usage"], [237, "example-usage"]], "mltk.core.MltkDataset": [[120, "mltk-core-mltkdataset"]], "mltk.core.MltkModel": [[121, "mltk-core-mltkmodel"]], "mltk.core.MltkModelEvent": [[122, "mltk-core-mltkmodelevent"]], "mltk.core.SshMixin": [[123, "mltk-core-sshmixin"]], "mltk.core.TrainMixin": [[124, "mltk-core-trainmixin"]], "Model Utilities": [[125, "model-utilities"]], "load_mltk_model": [[125, "load-mltk-model"]], "load_mltk_model_with_path": [[125, "load-mltk-model-with-path"]], "list_mltk_models": [[125, "list-mltk-models"]], "load_tflite_or_keras_model": [[125, "load-tflite-or-keras-model"]], "load_tflite_model": [[125, "load-tflite-model"]], "mltk.core.WeightsAndBiasesMixin": [[126, "mltk-core-weightsandbiasesmixin"]], "Common Model Architectures": [[127, "common-model-architectures"]], "ARM DepthwiseConv2D": [[127, "arm-depthwiseconv2d"]], "Fully Connected Auto-encoder": [[127, "fully-connected-auto-encoder"]], "MobileNet v1": [[127, "mobilenet-v1"]], "MobileNet v2": [[127, "mobilenet-v2"]], "ResNetv1-10": [[127, "resnetv1-10"]], "TENet": [[127, "tenet"]], "audio_example1": [[128, "audio-example1"]], "Commands": [[128, "commands"], [129, "commands"], [130, "commands"], [131, "commands"], [132, "commands"], [133, "commands"], [134, "commands"], [135, "commands"], [136, "commands"], [138, "commands"], [140, "commands"], [142, "commands"], [143, "commands"], [144, "commands"], [145, "commands"], [146, "commands"], [147, "commands"], [148, "commands"], [149, "commands"], [150, "commands"], [151, "commands"], [152, "commands"], [154, "commands"], [155, "commands"], [156, "commands"], [157, "commands"], [159, "commands"], [160, "commands"]], "Model Profiling Report": [[128, "model-profiling-report"], [130, "model-profiling-report"], [135, "model-profiling-report"], [140, "model-profiling-report"], [142, "model-profiling-report"], [143, "model-profiling-report"], [144, "model-profiling-report"], [145, "model-profiling-report"], [146, "model-profiling-report"], [147, "model-profiling-report"], [148, "model-profiling-report"], [149, "model-profiling-report"], [150, "model-profiling-report"], [151, "model-profiling-report"], [152, "model-profiling-report"], [154, "model-profiling-report"], [155, "model-profiling-report"], [156, "model-profiling-report"], [157, "model-profiling-report"], [159, "model-profiling-report"], [160, "model-profiling-report"]], "Model Diagram": [[128, "model-diagram"], [130, "model-diagram"], [133, "model-diagram"], [134, "model-diagram"], [135, "model-diagram"], [138, "model-diagram"], [140, "model-diagram"], [142, "model-diagram"], [143, "model-diagram"], [144, "model-diagram"], [145, "model-diagram"], [146, "model-diagram"], [147, "model-diagram"], [148, "model-diagram"], [149, "model-diagram"], [150, "model-diagram"], [151, "model-diagram"], [152, "model-diagram"], [154, "model-diagram"], [155, "model-diagram"], [156, "model-diagram"], [157, "model-diagram"], [159, "model-diagram"], [160, "model-diagram"]], "audio_tf_dataset": [[129, "audio-tf-dataset"]], "autoencoder_example": [[130, "autoencoder-example"]], "basic_example": [[131, "basic-example"]], "basic_tf_dataset_example": [[132, "basic-tf-dataset-example"]], "binary_classification": [[133, "binary-classification"]], "conv1d_example": [[134, "conv1d-example"]], "image_example1": [[135, "image-example1"]], "image_tf_dataset": [[136, "image-tf-dataset"]], "Example Models": [[137, "example-models"]], "siamese_contrastive": [[138, "siamese-contrastive"]], "Reference Models": [[139, "reference-models"]], "fingerprint_signature_generator": [[140, "fingerprint-signature-generator"]], "Silicon Lab\u2019s Models": [[141, "silicon-lab-s-models"]], "keyword_spotting_alexa": [[142, "keyword-spotting-alexa"]], "Dataset": [[142, "dataset"], [143, "dataset"], [144, "dataset"], [145, "dataset"], [146, "dataset"], [147, "dataset"], [148, "dataset"], [149, "dataset"], [150, "dataset"], [151, "dataset"], [155, "dataset"], [156, "dataset"], [157, "dataset"], [159, "dataset"], [160, "dataset"], [256, "dataset"]], "Preprocessing": [[142, "preprocessing"], [143, "preprocessing"], [144, "preprocessing"], [145, "preprocessing"], [146, "preprocessing"], [147, "preprocessing"], [148, "preprocessing"], [149, "preprocessing"], [150, "preprocessing"], [151, "preprocessing"]], "keyword_spotting_mobilenetv2": [[143, "keyword-spotting-mobilenetv2"]], "keyword_spotting_numbers": [[144, "keyword-spotting-numbers"]], "Dataset Summary": [[144, "dataset-summary"], [147, "dataset-summary"], [150, "dataset-summary"], [259, "dataset-summary"]], "Model Architecture": [[144, "model-architecture"], [147, "model-architecture"], [150, "model-architecture"]], "Overview Diagram": [[144, "overview-diagram"]], "keyword_spotting_on_off": [[145, "keyword-spotting-on-off"]], "keyword_spotting_on_off_v2": [[146, "keyword-spotting-on-off-v2"]], "Training the Model": [[146, "training-the-model"], [149, "training-the-model"]], "Changes from v1": [[146, "changes-from-v1"], [149, "changes-from-v1"]], "keyword_spotting_on_off_v3": [[147, "keyword-spotting-on-off-v3"]], "keyword_spotting_pacman": [[148, "keyword-spotting-pacman"]], "keyword_spotting_pacman_v2": [[149, "keyword-spotting-pacman-v2"]], "keyword_spotting_pacman_v3": [[150, "keyword-spotting-pacman-v3"]], "keyword_spotting_with_transfer_learning": [[151, "keyword-spotting-with-transfer-learning"]], "rock_paper_scissors": [[152, "rock-paper-scissors"]], "Tensorflow-Lite Micro Models": [[153, "tensorflow-lite-micro-models"]], "tflite_micro_magic_wand": [[154, "tflite-micro-magic-wand"]], "tflite_micro_speech": [[155, "tflite-micro-speech"]], "Model Topology & Training": [[155, "model-topology-training"]], "Performance (floating point model)": [[155, "performance-floating-point-model"], [156, "performance-floating-point-model"], [157, "performance-floating-point-model"], [159, "performance-floating-point-model"], [160, "performance-floating-point-model"]], "Performance (quantized tflite model)": [[155, "performance-quantized-tflite-model"], [156, "performance-quantized-tflite-model"], [157, "performance-quantized-tflite-model"], [159, "performance-quantized-tflite-model"], [160, "performance-quantized-tflite-model"]], "anomaly_detection": [[156, "anomaly-detection"]], "Model Topology": [[156, "model-topology"], [157, "model-topology"], [159, "model-topology"], [160, "model-topology"]], "Spectrogram Characteristics": [[156, "spectrogram-characteristics"], [159, "spectrogram-characteristics"]], "image_classification": [[157, "image-classification"]], "TinyML Models": [[158, "tinyml-models"]], "keyword_spotting": [[159, "keyword-spotting"]], "visual_wake_words": [[160, "visual-wake-words"]], "evaluate_model": [[161, "evaluate-model"]], "evaluate_classifier": [[161, "evaluate-classifier"], [161, "id1"]], "ClassifierEvaluationResults": [[161, "classifierevaluationresults"]], "evaluate_autoencoder": [[161, "evaluate-autoencoder"]], "AutoEncoderEvaluationResults": [[161, "autoencoderevaluationresults"]], "Model Operations": [[162, "model-operations"]], "profile_model": [[163, "profile-model"]], "ProfilingModelResults": [[163, "profilingmodelresults"]], "ProfilingLayerResult": [[163, "profilinglayerresult"]], "quantize_model": [[164, "quantize-model"]], "summarize_model": [[165, "summarize-model"]], "train_model": [[166, "train-model"]], "TrainingResults": [[166, "trainingresults"]], "update_model_parameters": [[167, "update-model-parameters"]], "view_model": [[168, "view-model"]], "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator": [[169, "mltk-core-tflite-micro-tflite-micro-accelerator-tflitemicroaccelerator"]], "Tensorflow-Lite Micro Model": [[170, "tensorflow-lite-micro-model"]], "mltk.core.tflite_micro.TfliteMicroLayerError": [[171, "mltk-core-tflite-micro-tflitemicrolayererror"]], "mltk.core.tflite_micro.TfliteMicroModel": [[172, "mltk-core-tflite-micro-tflitemicromodel"]], "mltk.core.tflite_micro.TfliteMicroModelDetails": [[173, "mltk-core-tflite-micro-tflitemicromodeldetails"]], "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult": [[174, "mltk-core-tflite-micro-tflitemicroprofiledlayerresult"]], "mltk.core.tflite_micro.TfliteMicro": [[175, "mltk-core-tflite-micro-tflitemicro"]], "mltk.core.TfliteActivation": [[176, "mltk-core-tfliteactivation"]], "mltk.core.TfliteAddLayer": [[177, "mltk-core-tfliteaddlayer"]], "mltk.core.TfliteConv2dLayer": [[178, "mltk-core-tfliteconv2dlayer"]], "mltk.core.TfliteConv2DLayerOptions": [[179, "mltk-core-tfliteconv2dlayeroptions"]], "mltk.core.TfliteConvParams": [[180, "mltk-core-tfliteconvparams"]], "mltk.core.TfliteDepthwiseConv2dLayer": [[181, "mltk-core-tflitedepthwiseconv2dlayer"]], "mltk.core.TfliteDepthwiseConv2DLayerOptions": [[182, "mltk-core-tflitedepthwiseconv2dlayeroptions"]], "mltk.core.TfliteDepthwiseConvParams": [[183, "mltk-core-tflitedepthwiseconvparams"]], "mltk.core.TfliteDequantizeLayer": [[184, "mltk-core-tflitedequantizelayer"]], "FlatbufferDictionary": [[185, "flatbufferdictionary"]], "TfliteModelParameters Flatbuffer Schema": [[185, "tflitemodelparameters-flatbuffer-schema"]], "mltk.core.TfliteFullyConnectedLayer": [[186, "mltk-core-tflitefullyconnectedlayer"]], "mltk.core.TfliteFullyConnectedLayerOptions": [[187, "mltk-core-tflitefullyconnectedlayeroptions"]], "mltk.core.TfliteFullyConnectedParams": [[188, "mltk-core-tflitefullyconnectedparams"]], "Tensorflow-Lite Model": [[189, "tensorflow-lite-model"]], "mltk.core.TfliteLayer": [[190, "mltk-core-tflitelayer"]], "mltk.core.TfliteModel": [[191, "mltk-core-tflitemodel"]], "mltk.core.TflitePadding": [[192, "mltk-core-tflitepadding"]], "mltk.core.TfliteModelParameters": [[193, "mltk-core-tflitemodelparameters"]], "mltk.core.TflitePooling2dLayer": [[194, "mltk-core-tflitepooling2dlayer"]], "mltk.core.TflitePool2DLayerOptions": [[195, "mltk-core-tflitepool2dlayeroptions"]], "mltk.core.TflitePoolParams": [[196, "mltk-core-tflitepoolparams"]], "mltk.core.TfliteQuantization": [[197, "mltk-core-tflitequantization"]], "mltk.core.TfliteQuantizeLayer": [[198, "mltk-core-tflitequantizelayer"]], "mltk.core.TfliteReshapeLayer": [[199, "mltk-core-tflitereshapelayer"]], "mltk.core.TfliteShape": [[200, "mltk-core-tfliteshape"]], "mltk.core.TfliteTensor": [[201, "mltk-core-tflitetensor"]], "mltk.core.TfliteTransposeConvLayer": [[202, "mltk-core-tflitetransposeconvlayer"]], "mltk.core.TfliteTransposeConvLayerOptions": [[203, "mltk-core-tflitetransposeconvlayeroptions"]], "mltk.core.TfliteTransposeConvParams": [[204, "mltk-core-tflitetransposeconvparams"]], "mltk.core.TfliteUnidirectionalLstmLayer": [[205, "mltk-core-tfliteunidirectionallstmlayer"]], "mltk.core.TfliteUnidirectionalLstmLayerOptions": [[206, "mltk-core-tfliteunidirectionallstmlayeroptions"]], "mltk.utils.archive": [[207, "module-mltk.utils.archive"]], "mltk.utils.archive_downloader": [[208, "module-mltk.utils.archive_downloader"]], "mltk.utils.audio_dataset_generator.Augmentation": [[209, "mltk-utils-audio-dataset-generator-augmentation"]], "mltk.utils.audio_dataset_generator.GenerationConfig": [[210, "mltk-utils-audio-dataset-generator-generationconfig"]], "mltk.utils.audio_dataset_generator.AudioDatasetGenerator": [[211, "mltk-utils-audio-dataset-generator-audiodatasetgenerator"]], "Audio Dataset Generator": [[212, "audio-dataset-generator"]], "mltk.utils.audio_dataset_generator.Keyword": [[213, "mltk-utils-audio-dataset-generator-keyword"]], "mltk.utils.audio_dataset_generator.Voice": [[214, "mltk-utils-audio-dataset-generator-voice"]], "mltk.utils.audio_dataset_generator.VoicePitch": [[215, "mltk-utils-audio-dataset-generator-voicepitch"]], "mltk.utils.audio_dataset_generator.VoiceRate": [[216, "mltk-utils-audio-dataset-generator-voicerate"]], "mltk.utils.bin2header": [[217, "module-mltk.utils.bin2header"]], "mltk.utils.cmake": [[218, "module-mltk.utils.cmake"]], "mltk.utils.gpu": [[219, "module-mltk.utils.gpu"]], "mltk.utils.hasher": [[220, "module-mltk.utils.hasher"]], "Utilities": [[221, "utilities"]], "mltk.utils.jlink_stream.JlinkCommandStream": [[222, "mltk-utils-jlink-stream-jlinkcommandstream"]], "mltk.utils.jlink_stream.JLinkDataStream": [[223, "mltk-utils-jlink-stream-jlinkdatastream"]], "J-Link Stream": [[224, "j-link-stream"]], "mltk.utils.jlink_stream.JlinkStream": [[225, "mltk-utils-jlink-stream-jlinkstream"]], "mltk.utils.jlink_stream.JlinkStreamOptions": [[226, "mltk-utils-jlink-stream-jlinkstreamoptions"]], "mltk.utils.logger": [[227, "module-mltk.utils.logger"]], "mltk.utils.path": [[228, "module-mltk.utils.path"]], "mltk.utils.process_pool.ProcessPool": [[229, "mltk-utils-process-pool-processpool"]], "mltk.utils.python": [[230, "module-mltk.utils.python"]], "Serial Reader": [[231, "serial-reader"]], "mltk.utils.serial_reader.SerialReader": [[232, "mltk-utils-serial-reader-serialreader"]], "mltk.utils.shell_cmd": [[233, "module-mltk.utils.shell_cmd"]], "mltk.utils.signal_handler.SignalHandler": [[234, "mltk-utils-signal-handler-signalhandler"]], "mltk.utils.string_formatting": [[235, "module-mltk.utils.string_formatting"]], "mltk.utils.system": [[236, "module-mltk.utils.system"]], "UART Stream": [[237, "uart-stream"]], "mltk.utils.uart_stream.UartStream": [[238, "mltk-utils-uart-stream-uartstream"]], "Tutorials": [[239, "tutorials"], [252, "tutorials"]], "Why MLTK?": [[240, "why-mltk"]], "Only a single python script and command-line is needed": [[240, "only-a-single-python-script-and-command-line-is-needed"]], "Comparison with other solutions": [[240, "comparison-with-other-solutions"]], "Lots of tools, all optional": [[240, "lots-of-tools-all-optional"]], "C++ Python wrappers": [[240, "c-python-wrappers"]], "Embedded model parameters": [[240, "embedded-model-parameters"]], "Integration with Tensorflow": [[240, "integration-with-tensorflow"]], "Integration with Tensorflow-Lite": [[240, "integration-with-tensorflow-lite"]], "Integration with Tensorflow-Lite Micro": [[240, "integration-with-tensorflow-lite-micro"]], "Integration with the Gecko SDK": [[240, "integration-with-the-gecko-sdk"]], "Support for cloud development": [[240, "support-for-cloud-development"]], "Training via SSH": [[240, "training-via-ssh"]], "Logging to the cloud": [[240, "logging-to-the-cloud"]], "Silicon Labs Machine Learning Toolkit (MLTK)": [[241, "silicon-labs-machine-learning-toolkit-mltk"]], "Other Information": [[241, "other-information"]], "Audio Feature Generator Example": [[242, "audio-feature-generator-example"]], "Install the MLTK python package": [[242, "install-the-mltk-python-package"]], "Import the Python packages": [[242, "import-the-python-packages"]], "Load Audio Sample": [[242, "load-audio-sample"]], "Load the MLTK Model": [[242, "load-the-mltk-model"]], "Load the .tflite model": [[242, "load-the-tflite-model"]], "Process the audio sample in the AudioFeatureGenerator": [[242, "process-the-audio-sample-in-the-audiofeaturegenerator"]], "Classify the audio sample using TF-Lite": [[242, "classify-the-audio-sample-using-tf-lite"]], "Classify the audio using TF-Lite Micro": [[242, "classify-the-audio-using-tf-lite-micro"]], "Model Evaluation API Examples": [[243, "model-evaluation-api-examples"]], "Install MLTK Python Package": [[243, "install-mltk-python-package"], [244, "install-mltk-python-package"], [245, "install-mltk-python-package"], [246, "install-mltk-python-package"], [247, "install-mltk-python-package"], [248, "install-mltk-python-package"], [249, "install-mltk-python-package"], [250, "install-mltk-python-package"], [251, "install-mltk-python-package"], [256, "install-mltk-python-package"], [257, "install-mltk-python-package"], [259, "install-mltk-python-package"], [260, "install-mltk-python-package"]], "Import Python Packages": [[243, "import-python-packages"], [244, "import-python-packages"], [245, "import-python-packages"], [246, "import-python-packages"], [247, "import-python-packages"], [248, "import-python-packages"], [249, "import-python-packages"], [250, "import-python-packages"], [251, "import-python-packages"]], "Model Profiler API Examples": [[244, "model-profiler-api-examples"]], "Download .tflite model file": [[244, "download-tflite-model-file"], [247, "download-tflite-model-file"], [248, "download-tflite-model-file"]], "Example 1: Profile .tflite file in basic simulator": [[244, "example-1-profile-tflite-file-in-basic-simulator"]], "Example 2: Profile .tflite file in MVP hardware simulator": [[244, "example-2-profile-tflite-file-in-mvp-hardware-simulator"]], "Example 3: Profile .tflite file on physical device": [[244, "example-3-profile-tflite-file-on-physical-device"]], "Model Quantization API Examples": [[245, "model-quantization-api-examples"]], "Model Summary API Examples": [[246, "model-summary-api-examples"]], "TF-Lite Micro Model API Examples": [[247, "tf-lite-micro-model-api-examples"]], "Example 1: Load model and print summary": [[247, "example-1-load-model-and-print-summary"]], "Example 2: Profile .tflite in TFLM interpreter": [[247, "example-2-profile-tflite-in-tflm-interpreter"]], "Example 3: Record each layers\u2019 input/output tensor": [[247, "example-3-record-each-layers-input-output-tensor"]], "TF-Lite Model API Examples": [[248, "tf-lite-model-api-examples"]], "Example 1: Load .tflite and print summary": [[248, "example-1-load-tflite-and-print-summary"]], "Example 2: Iterate the model layers": [[248, "example-2-iterate-the-model-layers"]], "Example 3: Add meta data to .tflite": [[248, "example-3-add-meta-data-to-tflite"]], "Example 4: Add model parameters to the .tflite": [[248, "example-4-add-model-parameters-to-the-tflite"]], "Example 5: Run inference": [[248, "example-5-run-inference"]], "Example 6: Access calculated layer parameters": [[248, "example-6-access-calculated-layer-parameters"]], "Example 7: Update model weights": [[248, "example-7-update-model-weights"]], "Model Training API Examples": [[249, "model-training-api-examples"]], "Example 2: Train for 10 epochs": [[249, "example-2-train-for-10-epochs"]], "Update Model Parameters API Examples": [[250, "update-model-parameters-api-examples"]], "Example 2: Update with argument": [[250, "example-2-update-with-argument"]], "Example 3: Return TfliteModel instance": [[250, "example-3-return-tflitemodel-instance"]], "Model Visualizer API Examples": [[251, "model-visualizer-api-examples"]], "Add an Existing Script to the MLTK": [[253, "add-an-existing-script-to-the-mltk"]], "Setup": [[253, "setup"]], "Existing Script": [[253, "existing-script"]], "Original mnist_convnet.py": [[253, "original-mnist-convnet-py"]], "MLTK Modifications": [[253, "mltk-modifications"]], "Modified mnist_convnet.py": [[253, "modified-mnist-convnet-py"]], "Run the modified script": [[253, "run-the-modified-script"]], "Run from command-line": [[253, "run-from-command-line"]], "Recommended Modifications": [[253, "recommended-modifications"]], "basic_example.py": [[253, "basic-example-py"]], "Next Steps": [[253, "next-steps"], [255, "next-steps"], [265, "next-steps"], [266, "next-steps"], [267, "next-steps"]], "Cloud Logging with Weights & Biases": [[254, "cloud-logging-with-weights-biases"]], "Disclaimer": [[254, "disclaimer"], [255, "disclaimer"]], "Basic Usage": [[254, "basic-usage"]], "Logging Information": [[254, "logging-information"]], "Default Data": [[254, "default-data"]], "Custom Data": [[254, "custom-data"]], "Training and logging in the cloud": [[254, "training-and-logging-in-the-cloud"]], "Other Features": [[254, "other-features"]], "Cloud Training with vast.ai": [[255, "cloud-training-with-vast-ai"]], "About vast.ai": [[255, "about-vast-ai"]], "What is Vast.ai?": [[255, "what-is-vast-ai"]], "How does it work in a nutshell?": [[255, "how-does-it-work-in-a-nutshell"]], "How do you protect my data from other clients?": [[255, "how-do-you-protect-my-data-from-other-clients"]], "How do you protect my data from providers?": [[255, "how-do-you-protect-my-data-from-providers"]], "How does billing work?": [[255, "how-does-billing-work"], [255, "id1"]], "How does pricing work?": [[255, "how-does-pricing-work"]], "Why should I trust vast.ai with my credit card info?": [[255, "why-should-i-trust-vast-ai-with-my-credit-card-info"]], "MLTK Installation": [[255, "mltk-installation"]], "Create an SSH Keypair": [[255, "create-an-ssh-keypair"]], "Create a vast.ai Account": [[255, "create-a-vast-ai-account"]], "Create new account": [[255, "create-new-account"]], "Add public SSH key to account": [[255, "add-public-ssh-key-to-account"]], "Add credit to account": [[255, "add-credit-to-account"]], "Configure instance image": [[255, "configure-instance-image"]], "Configure disk space": [[255, "configure-disk-space"]], "Select a Cloud Machine": [[255, "select-a-cloud-machine"]], "SSH Client Login": [[255, "ssh-client-login"]], "Notes about selecting a machine": [[255, "notes-about-selecting-a-machine"]], "Note about GPU Count": [[255, "note-about-gpu-count"]], "Note about CPU Count": [[255, "note-about-cpu-count"]], "Configure Settings": [[255, "configure-settings"]], "Develop a Model": [[255, "develop-a-model"]], "Suggested Reading": [[255, "suggested-reading"]], "Example Development Flow": [[255, "example-development-flow"]], "Modify the model specification": [[255, "modify-the-model-specification"]], "Note about custom datasets": [[255, "note-about-custom-datasets"]], "Test everything works locally": [[255, "test-everything-works-locally"]], "Profile model locally": [[255, "profile-model-locally"]], "Train Model in Cloud": [[255, "train-model-in-cloud"]], "Start cloud instance": [[255, "start-cloud-instance"]], "Start remote training": [[255, "start-remote-training"]], "Other CLI options": [[255, "other-cli-options"]], "Training Results": [[255, "training-results"]], "Shutdown Cloud Instance": [[255, "shutdown-cloud-instance"]], "Fingerprint Authentication": [[256, "fingerprint-authentication"]], "Demo Video": [[256, "demo-video"], [257, "demo-video"], [258, "demo-video"]], "Objectives": [[256, "objectives"], [257, "objectives"], [259, "objectives"], [260, "objectives"]], "Content": [[256, "content"], [257, "content"], [258, "content"], [259, "content"], [260, "content"], [267, "content"]], "Running this tutorial from a notebook": [[256, "running-this-tutorial-from-a-notebook"], [257, "running-this-tutorial-from-a-notebook"], [265, "running-this-tutorial-from-a-notebook"]], "Running this tutorial from the command-line": [[256, "running-this-tutorial-from-the-command-line"], [257, "running-this-tutorial-from-the-command-line"], [259, "running-this-tutorial-from-the-command-line"], [260, "running-this-tutorial-from-the-command-line"]], "Required Hardware": [[256, "required-hardware"], [257, "required-hardware"], [258, "required-hardware"], [260, "required-hardware"]], "Signature Generation Machine Learning Model Overview": [[256, "signature-generation-machine-learning-model-overview"]], "Siamese Networks": [[256, "siamese-networks"]], "Creating the dataset": [[256, "creating-the-dataset"]], "Generating the dataset": [[256, "generating-the-dataset"]], "Data preprocessing": [[256, "data-preprocessing"], [257, "data-preprocessing"]], "Generating fingerprint pairs": [[256, "generating-fingerprint-pairs"]], "Creating the Model": [[256, "creating-the-model"]], "Loss Function": [[256, "loss-function"]], "Saving the model": [[256, "saving-the-model"]], "Train the model": [[256, "train-the-model"], [258, "train-the-model"]], "Evaluating the model": [[256, "evaluating-the-model"]], "Determining the threshold": [[256, "determining-the-threshold"]], "Running the model": [[256, "running-the-model"]], "Using the command-line": [[256, "using-the-command-line"]], "Building the C++ example application": [[256, "building-the-c-example-application"]], "Image Classification - Rock, Paper, Scissors": [[257, "image-classification-rock-paper-scissors"]], "Classification Machine Learning Models Overview": [[257, "classification-machine-learning-models-overview"]], "Class IDs": [[257, "class-ids"]], "Convolution Neural Networks": [[257, "convolution-neural-networks"]], "Creating a Labeled Dataset": [[257, "creating-a-labeled-dataset"]], "Rock, Paper, Scissors Dataset Overview": [[257, "rock-paper-scissors-dataset-overview"]], "Update the Dataset": [[257, "update-the-dataset"]], "Update Sequence": [[257, "update-sequence"]], "Creating the Model Specification": [[257, "creating-the-model-specification"]], "Create the specification script": [[257, "create-the-specification-script"]], "Add necessary imports": [[257, "add-necessary-imports"]], "Define Model Object": [[257, "define-model-object"], [259, "define-model-object"]], "Configure the general model settings": [[257, "configure-the-general-model-settings"], [259, "configure-the-general-model-settings"]], "Configure the basic training settings": [[257, "configure-the-basic-training-settings"], [259, "configure-the-basic-training-settings"]], "Configure the training callbacks": [[257, "configure-the-training-callbacks"], [259, "configure-the-training-callbacks"]], "Configure the TF-Lite Converter settings": [[257, "configure-the-tf-lite-converter-settings"], [259, "configure-the-tf-lite-converter-settings"]], "Configure the dataset settings": [[257, "configure-the-dataset-settings"]], "Configure the data augmentation settings": [[257, "configure-the-data-augmentation-settings"]], "Define the model layout": [[257, "define-the-model-layout"]], "Model Visualization": [[257, "model-visualization"], [259, "model-visualization"]], "Visualize Keras model": [[257, "visualize-keras-model"], [259, "visualize-keras-model"]], "Visualize TF-Lite model": [[257, "visualize-tf-lite-model"], [259, "visualize-tf-lite-model"]], "Profile in simulator": [[257, "profile-in-simulator"], [259, "profile-in-simulator"]], "Profile on physical device": [[257, "profile-on-physical-device"], [259, "profile-on-physical-device"]], "Note about CPU utilization": [[257, "note-about-cpu-utilization"], [259, "note-about-cpu-utilization"]], "Note about model size and hardware constraints": [[257, "note-about-model-size-and-hardware-constraints"]], "Train as a \u201cdry run\u201d": [[257, "train-as-a-dry-run"], [259, "train-as-a-dry-run"]], "Training locally": [[257, "training-locally"], [259, "training-locally"]], "Train in cloud": [[257, "train-in-cloud"], [259, "train-in-cloud"], [260, "train-in-cloud"], [261, "train-in-cloud"], [263, "train-in-cloud"]], "Note about model accuracy": [[257, "note-about-model-accuracy"], [259, "note-about-model-accuracy"]], "Model Testing": [[257, "model-testing"], [259, "model-testing"]], "Deploying the Model": [[257, "deploying-the-model"], [259, "deploying-the-model"]], "Using the MLTK": [[257, "using-the-mltk"], [259, "using-the-mltk"]], "Keyword Spotting - Alexa": [[258, "keyword-spotting-alexa"]], "Quick start": [[258, "quick-start"]], "System Overview": [[258, "system-overview"]], "Prerequisite Reading": [[258, "prerequisite-reading"], [260, "prerequisite-reading"]], "EFR32xG24 development kit": [[258, "efr32xg24-development-kit"]], "Analog speaker with amplifier": [[258, "analog-speaker-with-amplifier"]], "Pinout": [[258, "pinout"]], "Develop the ML Model": [[258, "develop-the-ml-model"]], "Create the dataset": [[258, "create-the-dataset"]], "Synthetic dataset generation": [[258, "synthetic-dataset-generation"]], "\u201cNegative\u201d class": [[258, "negative-class"]], "Class balance": [[258, "class-balance"]], "Select the model architecture": [[258, "select-the-model-architecture"]], "Determine the audio frontend parameters": [[258, "determine-the-audio-frontend-parameters"]], "Audio visualizer command": [[258, "audio-visualizer-command"]], "AudioFeatureGenerator settings": [[258, "audiofeaturegenerator-settings"]], "Profile the model": [[258, "profile-the-model"]], "Model profiler command": [[258, "model-profiler-command"]], "Data augmentations": [[258, "data-augmentations"]], "Dump augmentations": [[258, "dump-augmentations"]], "Local Training": [[258, "local-training"]], "Remote Training": [[258, "remote-training"]], "Run the trained model": [[258, "run-the-trained-model"]], "Classify audio command": [[258, "classify-audio-command"]], "Run the demo": [[258, "run-the-demo"]], "Build C++ application from source": [[258, "build-c-application-from-source"]], "Increase the BAUD rate": [[258, "increase-the-baud-rate"]], "Keyword Spotting - On/Off": [[259, "keyword-spotting-on-off"]], "Machine Learning and Keyword-Spotting Overview": [[259, "machine-learning-and-keyword-spotting-overview"]], "Dataset Selection and Preprocessing Parameters": [[259, "dataset-selection-and-preprocessing-parameters"]], "TL;DR": [[259, "tl-dr"]], "Acquire a Representative Dataset": [[259, "acquire-a-representative-dataset"]], "Synthetically Generated Dataset": [[259, "synthetically-generated-dataset"]], "Creating an \u201cUnknown\u201d Class": [[259, "creating-an-unknown-class"]], "Final note about the dataset": [[259, "final-note-about-the-dataset"]], "Feature Engineering": [[259, "feature-engineering"]], "Featuring Engineering on the Edge": [[259, "featuring-engineering-on-the-edge"]], "Data Augmentation": [[259, "data-augmentation"]], "Random Impulse Response": [[259, "random-impulse-response"]], "Random \u201cunknown\u201d samples by cropping \u201cknown\u201d samples": [[259, "random-unknown-samples-by-cropping-known-samples"]], "Define the model architecture": [[259, "define-the-model-architecture"]], "Audio Feature Generator Settings": [[259, "audio-feature-generator-settings"], [260, "audio-feature-generator-settings"]], "Configure the keywords to detect": [[259, "configure-the-keywords-to-detect"]], "Data Pipeline": [[259, "data-pipeline"]], "Audio Visualization": [[259, "audio-visualization"]], "Note about training time": [[259, "note-about-training-time"]], "Classify audio on PC": [[259, "classify-audio-on-pc"]], "Classify audio on device": [[259, "classify-audio-on-device"]], "Record audio and spectrograms from device": [[259, "record-audio-and-spectrograms-from-device"]], "Using Simplicity Studio": [[259, "using-simplicity-studio"]], "Keyword Spotting - Pac-Man": [[260, "keyword-spotting-pac-man"]], "Live Demo": [[260, "live-demo"]], "Creating the Machine Learning Model": [[260, "creating-the-machine-learning-model"]], "Select the dataset": [[260, "select-the-dataset"]], "Model Parameter Tradeoffs": [[260, "model-parameter-tradeoffs"]], "Module Architecture": [[260, "module-architecture"]], "Audio Data Generator": [[260, "audio-data-generator"]], "Profiling the model": [[260, "profiling-the-model"]], "Training the model": [[260, "training-the-model"]], "Creating the Firmware Application": [[260, "creating-the-firmware-application"]], "Creating the Pac-Man Webpage": [[260, "creating-the-pac-man-webpage"]], "Running the Demo": [[260, "running-the-demo"]], "Build firmware application from source": [[260, "build-firmware-application-from-source"]], "Run webpage locally": [[260, "run-webpage-locally"]], "Keyword Spotting with Transfer Learning": [[261, "keyword-spotting-with-transfer-learning"]], "Running this Tutorial": [[261, "running-this-tutorial"], [263, "running-this-tutorial"]], "Recommended Reading": [[261, "recommended-reading"], [263, "recommended-reading"]], "Basic Concept": [[261, "basic-concept"]], "Base Model Overview": [[261, "base-model-overview"]], "Test model using PC microphone": [[261, "test-model-using-pc-microphone"]], "Test model using development board": [[261, "test-model-using-development-board"]], "Configure Model Specification with Transfer Learning": [[261, "configure-model-specification-with-transfer-learning"]], "Update description": [[261, "update-description"]], "Set epochs to small value": [[261, "set-epochs-to-small-value"]], "Use LearningRateScheduler with small initial value": [[261, "use-learningratescheduler-with-small-initial-value"]], "Update the keywords to detect": [[261, "update-the-keywords-to-detect"]], "Reduce the \u201cunknown_class_percentage\u201d": [[261, "reduce-the-unknown-class-percentage"]], "Load the weights from the base model": [[261, "load-the-weights-from-the-base-model"]], "Train the Model": [[261, "train-the-model"], [263, "train-the-model"]], "Test the model": [[261, "test-the-model"]], "Model Debugging": [[262, "model-debugging"]], "Setup Environment": [[262, "setup-environment"]], "1) Install the MLTK Python Package": [[262, "install-the-mltk-python-package"]], "2) Install VS Code and the Python Extension": [[262, "install-vs-code-and-the-python-extension"]], "Debug model: basic_example": [[262, "debug-model-basic-example"]], "How does debugging work?": [[262, "how-does-debugging-work"]], "Model Optimization for MVP Hardware Accelerator": [[263, "model-optimization-for-mvp-hardware-accelerator"]], "Create the model specification file": [[263, "create-the-model-specification-file"]], "Update the model description": [[263, "update-the-model-description"]], "Update the Keywords": [[263, "update-the-keywords"]], "Update the AudioFeatureGenerator Settings": [[263, "update-the-audiofeaturegenerator-settings"]], "Select an audio file": [[263, "select-an-audio-file"]], "Adjust the AudioFeatureGenerator settings": [[263, "adjust-the-audiofeaturegenerator-settings"]], "Update Model Layout": [[263, "update-model-layout"]], "Summarize the model": [[263, "summarize-the-model"]], "Profile Model": [[263, "profile-model"]], "Test the Model": [[263, "test-the-model"]], "Model Quantization Tips": [[264, "model-quantization-tips"]], "Quantization Report": [[264, "quantization-report"], [266, "quantization-report"]], "Enabling the Quantization Report": [[264, "enabling-the-quantization-report"]], "Analyzing the Report": [[264, "analyzing-the-report"]], "Input Data Normalization": [[264, "input-data-normalization"]], "Scale by a constant": [[264, "scale-by-a-constant"]], "Center about mean and scale by STD": [[264, "center-about-mean-and-scale-by-std"]], "Normalization Layers": [[264, "normalization-layers"]], "Batch Normalization": [[264, "batch-normalization"]], "Conv2D + Batch Normalization": [[264, "conv2d-batch-normalization"]], "Fully Connected + Batch Normalization": [[264, "fully-connected-batch-normalization"]], "LayerNormalization": [[264, "layernormalization"]], "ONNX to TF-Lite Model Conversion": [[265, "onnx-to-tf-lite-model-conversion"]], "About this Tutorial": [[265, "about-this-tutorial"]], "Considerations": [[265, "considerations"]], "Input Data Format": [[265, "input-data-format"]], "Output Class ID Mapping": [[265, "output-class-id-mapping"]], "Supported ML Kernel Operations": [[265, "supported-ml-kernel-operations"]], "\u201cChannels-First\u201d vs \u201cChannels-Last\u201d": [[265, "channels-first-vs-channels-last"]], "Dataset Required for Quantization": [[265, "dataset-required-for-quantization"]], "Environment Setup": [[265, "environment-setup"]], "Install Python Dependencies": [[265, "install-python-dependencies"]], "Download ONNX Model": [[265, "download-onnx-model"]], "Configure Paths": [[265, "configure-paths"]], "Load the dataset": [[265, "load-the-dataset"]], "Sanity check: Evaluate the ONNX model": [[265, "sanity-check-evaluate-the-onnx-model"]], "Convert ONNX to Quantized TF-Lite Model File": [[265, "convert-onnx-to-quantized-tf-lite-model-file"]], "Simplify the ONNX model": [[265, "simplify-the-onnx-model"]], "Convert to OpenVino Intermediate Format": [[265, "convert-to-openvino-intermediate-format"]], "Convert from OpenVino to TF-Lite-Float32": [[265, "convert-from-openvino-to-tf-lite-float32"]], "Quantize the TF-Lite Model": [[265, "quantize-the-tf-lite-model"]], "Profile the Quantized Model": [[265, "profile-the-quantized-model"]], "Evaluate the Quantized Model": [[265, "evaluate-the-quantized-model"]], "Quantized LSTM": [[266, "quantized-lstm"]], "Key Takeaways": [[266, "key-takeaways"]], "About LSTMs": [[266, "about-lstms"]], "Quantizing an LSTM Model": [[266, "quantizing-an-lstm-model"]], "Model Settings": [[266, "model-settings"]], "LSTM Layer Config": [[266, "lstm-layer-config"]], "Force the batch size=1 during quantization": [[266, "force-the-batch-size-1-during-quantization"]], "Debugging Quantization Errors": [[266, "debugging-quantization-errors"]], "Analyzing the report": [[266, "analyzing-the-report"]], "Data Normalization": [[266, "data-normalization"]], "Normalize the input data": [[266, "normalize-the-input-data"]], "Return uint16 from the audio frontend": [[266, "return-uint16-from-the-audio-frontend"]], "Use NumPy to normalize the spectrogram": [[266, "use-numpy-to-normalize-the-spectrogram"]], "Use float32 for the quantized model input": [[266, "use-float32-for-the-quantized-model-input"]], "Normalize the spectrogram at runtime on the embedded device": [[266, "normalize-the-spectrogram-at-runtime-on-the-embedded-device"]], "Use BatchNormalization when possible": [[266, "use-batchnormalization-when-possible"]], "Use LayerNormalization": [[266, "use-layernormalization"]], "Float32 weights/activations": [[266, "float32-weights-activations"]], "int8 weights/activations": [[266, "int8-weights-activations"]], "Remarks": [[266, "remarks"]], "Synthetic Audio Dataset Generation": [[267, "synthetic-audio-dataset-generation"]], "Recording real people": [[267, "recording-real-people"]], "Synthetic generation": [[267, "synthetic-generation"]], "Note about synthetic augmentations": [[267, "note-about-synthetic-augmentations"]], "Note about languages": [[267, "note-about-languages"]], "Note about the \u201cnegative\u201d class": [[267, "note-about-the-negative-class"]], "Note about cost": [[267, "note-about-cost"]], "Google Cloud Platform (GCP) Setup": [[267, "google-cloud-platform-gcp-setup"]], "Features": [[267, "features"], [267, "id2"]], "Microsoft Azure Setup": [[267, "microsoft-azure-setup"]], "Amazon Web Services (AWS) Setup": [[267, "amazon-web-services-aws-setup"]], "Alexa Example": [[267, "alexa-example"]]}, "indexentries": {"adjust_length() (in module mltk.core.preprocess.utils.audio)": [[80, "mltk.core.preprocess.utils.audio.adjust_length"]], "apply_frontend() (in module mltk.core.preprocess.utils.audio)": [[80, "mltk.core.preprocess.utils.audio.apply_frontend"]], "mltk.core.preprocess.utils.audio": [[80, "module-mltk.core.preprocess.utils.audio"]], "module": [[80, "module-mltk.core.preprocess.utils.audio"], [85, "module-mltk.core.preprocess.utils.image"], [89, "module-mltk.core.preprocess.utils.list_directory"], [90, "module-mltk.core.preprocess.utils.normalize"], [91, "module-mltk.core.preprocess.utils.tf_dataset"], [93, "module-mltk.datasets.accelerometer.tflm_magic_wand"], [94, "module-mltk.datasets.audio.background_noise.ambient"], [95, "module-mltk.datasets.audio.background_noise.brd2601"], [96, "module-mltk.datasets.audio.background_noise.esc50"], [97, "module-mltk.datasets.audio.direction_commands"], [98, "module-mltk.datasets.audio.mit_ir_survey"], [99, "module-mltk.datasets.audio.mlcommons.ml_commons_keywords"], [100, "module-mltk.datasets.audio.mlcommons.ml_commons_voice"], [101, "module-mltk.datasets.audio.on_off"], [102, "module-mltk.datasets.audio.speech_commands.speech_commands_v2"], [103, "module-mltk.datasets.audio.ten_digits"], [104, "module-mltk.datasets.audio.yes_no"], [105, "module-mltk.datasets.image.cifar10"], [106, "module-mltk.datasets.image.fashion_mnist"], [107, "module-mltk.datasets.image.mnist"], [108, "module-mltk.datasets.image.rock_paper_scissors_v1"], [109, "module-mltk.datasets.image.rock_paper_scissors_v2"], [128, "module-mltk.models.examples.audio_example1"], [129, "module-mltk.models.examples.audio_tf_dataset"], [130, "module-mltk.models.examples.autoencoder_example"], [131, "module-mltk.models.examples.basic_example"], [132, "module-mltk.models.examples.basic_tf_dataset_example"], [133, "module-mltk.models.examples.binary_classification"], [134, "module-mltk.models.examples.conv1d_example"], [135, "module-mltk.models.examples.image_example1"], [136, "module-mltk.models.examples.image_tf_dataset"], [138, "module-mltk.models.examples.siamese_contrastive"], [140, "module-mltk.models.siliconlabs.fingerprint_signature_generator"], [142, "module-mltk.models.siliconlabs.keyword_spotting_alexa"], [143, "module-mltk.models.siliconlabs.keyword_spotting_mobilenetv2"], [144, "module-mltk.models.siliconlabs.keyword_spotting_numbers"], [145, "module-mltk.models.siliconlabs.keyword_spotting_on_off"], [146, "module-mltk.models.siliconlabs.keyword_spotting_on_off_v2"], [147, "module-mltk.models.siliconlabs.keyword_spotting_on_off_v3"], [148, "module-mltk.models.siliconlabs.keyword_spotting_pacman"], [149, "module-mltk.models.siliconlabs.keyword_spotting_pacman_v2"], [150, "module-mltk.models.siliconlabs.keyword_spotting_pacman_v3"], [151, "module-mltk.models.siliconlabs.keyword_spotting_with_transfer_learning"], [152, "module-mltk.models.siliconlabs.rock_paper_scissors"], [154, "module-mltk.models.tflite_micro.tflite_micro_magic_wand"], [155, "module-mltk.models.tflite_micro.tflite_micro_speech"], [156, "module-mltk.models.tinyml.anomaly_detection"], [157, "module-mltk.models.tinyml.image_classification"], [159, "module-mltk.models.tinyml.keyword_spotting"], [160, "module-mltk.models.tinyml.visual_wake_words"], [207, "module-mltk.utils.archive"], [208, "module-mltk.utils.archive_downloader"], [217, "module-mltk.utils.bin2header"], [218, "module-mltk.utils.cmake"], [219, "module-mltk.utils.gpu"], [220, "module-mltk.utils.hasher"], [227, "module-mltk.utils.logger"], [228, "module-mltk.utils.path"], [230, "module-mltk.utils.python"], [233, "module-mltk.utils.shell_cmd"], [235, "module-mltk.utils.string_formatting"], [236, "module-mltk.utils.system"]], "read_audio_file() (in module mltk.core.preprocess.utils.audio)": [[80, "mltk.core.preprocess.utils.audio.read_audio_file"]], "write_audio_file() (in module mltk.core.preprocess.utils.audio)": [[80, "mltk.core.preprocess.utils.audio.write_audio_file"]], "parallelaudiodatagenerator (class in mltk.core.preprocess.audio.parallel_generator)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator"]], "__init__() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.__init__"]], "adjust_length() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.adjust_length"]], "apply_frontend() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.apply_frontend"]], "apply_transform() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.apply_transform"]], "default_transform (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.default_transform"]], "flow_from_directory() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.flow_from_directory"]], "get_random_transform() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.get_random_transform"]], "sample_length (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.sample_length"]], "sample_length_ms (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.sample_length_ms"]], "sample_rate_hz (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.sample_rate_hz"]], "sample_shape (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.sample_shape"]], "standardize() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.standardize"]], "parallelprocessparams (class in mltk.core.preprocess.audio.parallel_generator)": [[82, "mltk.core.preprocess.audio.parallel_generator.ParallelProcessParams"]], "__init__() (parallelprocessparams method)": [[82, "mltk.core.preprocess.audio.parallel_generator.ParallelProcessParams.__init__"], [87, "mltk.core.preprocess.image.parallel_generator.ParallelProcessParams.__init__"]], "audiofeaturegenerator (class in mltk.core.preprocess.audio.audio_feature_generator)": [[83, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator"]], "__init__() (audiofeaturegenerator method)": [[83, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator.__init__"]], "activity_was_detected() (audiofeaturegenerator method)": [[83, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator.activity_was_detected"]], "process_sample() (audiofeaturegenerator method)": [[83, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator.process_sample"]], "audiofeaturegeneratorsettings (class in mltk.core.preprocess.audio.audio_feature_generator)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings"]], "__init__() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.__init__"]], "__new__() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.__new__"]], "activity_detection_alpha_a (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_alpha_a"]], "activity_detection_alpha_b (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_alpha_b"]], "activity_detection_arm_threshold (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_arm_threshold"]], "activity_detection_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_enable"]], "activity_detection_trip_threshold (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_trip_threshold"]], "clear() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.clear"]], "copy() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.copy"]], "dc_notch_filter_coefficient (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.dc_notch_filter_coefficient"]], "dc_notch_filter_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.dc_notch_filter_enable"]], "fft_length (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.fft_length"]], "filterbank_lower_band_limit (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.filterbank_lower_band_limit"]], "filterbank_n_channels (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.filterbank_n_channels"]], "filterbank_upper_band_limit (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.filterbank_upper_band_limit"]], "fromkeys() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.fromkeys"]], "get() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.get"]], "items() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.items"]], "keys() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.keys"]], "log_scale_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.log_scale_enable"]], "log_scale_shift (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.log_scale_shift"]], "noise_reduction_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_enable"]], "noise_reduction_even_smoothing (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_even_smoothing"]], "noise_reduction_min_signal_remaining (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_min_signal_remaining"]], "noise_reduction_odd_smoothing (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_odd_smoothing"]], "noise_reduction_smoothing_bits (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_smoothing_bits"]], "pcan_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pcan_enable"]], "pcan_gain_bits (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pcan_gain_bits"]], "pcan_offset (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pcan_offset"]], "pcan_strength (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pcan_strength"]], "pop() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pop"]], "popitem() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.popitem"]], "quantize_dynamic_scale_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.quantize_dynamic_scale_enable"]], "quantize_dynamic_scale_range_db (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.quantize_dynamic_scale_range_db"]], "sample_length (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.sample_length"]], "sample_length_ms (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.sample_length_ms"]], "sample_rate_hz (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.sample_rate_hz"]], "setdefault() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.setdefault"]], "spectrogram_shape (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.spectrogram_shape"]], "update() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.update"]], "values() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.values"]], "window_size_ms (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.window_size_ms"]], "window_step_ms (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.window_step_ms"]], "mltk.core.preprocess.utils.image": [[85, "module-mltk.core.preprocess.utils.image"]], "read_image_file() (in module mltk.core.preprocess.utils.image)": [[85, "mltk.core.preprocess.utils.image.read_image_file"]], "write_image_file() (in module mltk.core.preprocess.utils.image)": [[85, "mltk.core.preprocess.utils.image.write_image_file"]], "parallelimagedatagenerator (class in mltk.core.preprocess.image.parallel_generator)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator"]], "__init__() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.__init__"]], "apply_transform() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.apply_transform"]], "default_transform (parallelimagedatagenerator property)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.default_transform"]], "fit() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.fit"]], "flow() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.flow"]], "flow_from_dataframe() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.flow_from_dataframe"]], "flow_from_directory() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.flow_from_directory"]], "get_random_transform() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.get_random_transform"]], "random_transform() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.random_transform"]], "standardize() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.standardize"]], "parallelprocessparams (class in mltk.core.preprocess.image.parallel_generator)": [[87, "mltk.core.preprocess.image.parallel_generator.ParallelProcessParams"]], "list_dataset_directory() (in module mltk.core.preprocess.utils.list_directory)": [[89, "mltk.core.preprocess.utils.list_directory.list_dataset_directory"]], "list_valid_filenames_in_directory() (in module mltk.core.preprocess.utils.list_directory)": [[89, "mltk.core.preprocess.utils.list_directory.list_valid_filenames_in_directory"]], "mltk.core.preprocess.utils.list_directory": [[89, "module-mltk.core.preprocess.utils.list_directory"]], "shuffle_file_list_by_group() (in module mltk.core.preprocess.utils.list_directory)": [[89, "mltk.core.preprocess.utils.list_directory.shuffle_file_list_by_group"]], "split_file_list() (in module mltk.core.preprocess.utils.list_directory)": [[89, "mltk.core.preprocess.utils.list_directory.split_file_list"]], "mltk.core.preprocess.utils.normalize": [[90, "module-mltk.core.preprocess.utils.normalize"]], "normalize() (in module mltk.core.preprocess.utils.normalize)": [[90, "mltk.core.preprocess.utils.normalize.normalize"]], "enable_numpy_behavior() (in module mltk.core.preprocess.utils.tf_dataset)": [[91, "mltk.core.preprocess.utils.tf_dataset.enable_numpy_behavior"]], "load_audio_directory() (in module mltk.core.preprocess.utils.tf_dataset)": [[91, "mltk.core.preprocess.utils.tf_dataset.load_audio_directory"]], "load_image_directory() (in module mltk.core.preprocess.utils.tf_dataset)": [[91, "mltk.core.preprocess.utils.tf_dataset.load_image_directory"]], "mltk.core.preprocess.utils.tf_dataset": [[91, "module-mltk.core.preprocess.utils.tf_dataset"]], "parallel_process() (in module mltk.core.preprocess.utils.tf_dataset)": [[91, "mltk.core.preprocess.utils.tf_dataset.parallel_process"]], "load_data() (in module mltk.datasets.accelerometer.tflm_magic_wand)": [[93, "mltk.datasets.accelerometer.tflm_magic_wand.load_data"]], "mltk.datasets.accelerometer.tflm_magic_wand": [[93, "module-mltk.datasets.accelerometer.tflm_magic_wand"]], "prepare_data() (in module mltk.datasets.accelerometer.tflm_magic_wand)": [[93, "mltk.datasets.accelerometer.tflm_magic_wand.prepare_data"]], "download_urls (in module mltk.datasets.audio.background_noise.ambient)": [[94, "mltk.datasets.audio.background_noise.ambient.DOWNLOAD_URLS"]], "download() (in module mltk.datasets.audio.background_noise.ambient)": [[94, "mltk.datasets.audio.background_noise.ambient.download"]], "mltk.datasets.audio.background_noise.ambient": [[94, "module-mltk.datasets.audio.background_noise.ambient"]], "download_url (in module mltk.datasets.audio.background_noise.brd2601)": [[95, "mltk.datasets.audio.background_noise.brd2601.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.background_noise.brd2601)": [[95, "mltk.datasets.audio.background_noise.brd2601.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.background_noise.brd2601)": [[95, "mltk.datasets.audio.background_noise.brd2601.download"]], "mltk.datasets.audio.background_noise.brd2601": [[95, "module-mltk.datasets.audio.background_noise.brd2601"]], "download_url (in module mltk.datasets.audio.background_noise.esc50)": [[96, "mltk.datasets.audio.background_noise.esc50.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.background_noise.esc50)": [[96, "mltk.datasets.audio.background_noise.esc50.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.background_noise.esc50)": [[96, "mltk.datasets.audio.background_noise.esc50.download"]], "mltk.datasets.audio.background_noise.esc50": [[96, "module-mltk.datasets.audio.background_noise.esc50"]], "classes (in module mltk.datasets.audio.direction_commands)": [[97, "mltk.datasets.audio.direction_commands.CLASSES"]], "download_url (in module mltk.datasets.audio.direction_commands)": [[97, "mltk.datasets.audio.direction_commands.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.direction_commands)": [[97, "mltk.datasets.audio.direction_commands.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.direction_commands)": [[97, "mltk.datasets.audio.direction_commands.download"]], "generate_dataset() (in module mltk.datasets.audio.direction_commands)": [[97, "mltk.datasets.audio.direction_commands.generate_dataset"]], "mltk.datasets.audio.direction_commands": [[97, "module-mltk.datasets.audio.direction_commands"]], "download_url (in module mltk.datasets.audio.mit_ir_survey)": [[98, "mltk.datasets.audio.mit_ir_survey.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.mit_ir_survey)": [[98, "mltk.datasets.audio.mit_ir_survey.VERIFY_SHA1"]], "apply_ir() (in module mltk.datasets.audio.mit_ir_survey)": [[98, "mltk.datasets.audio.mit_ir_survey.apply_ir"]], "apply_random_ir() (in module mltk.datasets.audio.mit_ir_survey)": [[98, "mltk.datasets.audio.mit_ir_survey.apply_random_ir"]], "download() (in module mltk.datasets.audio.mit_ir_survey)": [[98, "mltk.datasets.audio.mit_ir_survey.download"]], "load_dataset() (in module mltk.datasets.audio.mit_ir_survey)": [[98, "mltk.datasets.audio.mit_ir_survey.load_dataset"]], "mltk.datasets.audio.mit_ir_survey": [[98, "module-mltk.datasets.audio.mit_ir_survey"]], "download_url1 (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[99, "mltk.datasets.audio.mlcommons.ml_commons_keywords.DOWNLOAD_URL1"]], "download_url2 (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[99, "mltk.datasets.audio.mlcommons.ml_commons_keywords.DOWNLOAD_URL2"]], "verify_url1_sha1 (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[99, "mltk.datasets.audio.mlcommons.ml_commons_keywords.VERIFY_URL1_SHA1"]], "verify_url2_sha1 (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[99, "mltk.datasets.audio.mlcommons.ml_commons_keywords.VERIFY_URL2_SHA1"]], "download() (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[99, "mltk.datasets.audio.mlcommons.ml_commons_keywords.download"]], "mltk.datasets.audio.mlcommons.ml_commons_keywords": [[99, "module-mltk.datasets.audio.mlcommons.ml_commons_keywords"]], "download_url (in module mltk.datasets.audio.mlcommons.ml_commons_voice)": [[100, "mltk.datasets.audio.mlcommons.ml_commons_voice.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.mlcommons.ml_commons_voice)": [[100, "mltk.datasets.audio.mlcommons.ml_commons_voice.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.mlcommons.ml_commons_voice)": [[100, "mltk.datasets.audio.mlcommons.ml_commons_voice.download"]], "mltk.datasets.audio.mlcommons.ml_commons_voice": [[100, "module-mltk.datasets.audio.mlcommons.ml_commons_voice"]], "classes (in module mltk.datasets.audio.on_off)": [[101, "mltk.datasets.audio.on_off.CLASSES"]], "download_url (in module mltk.datasets.audio.on_off)": [[101, "mltk.datasets.audio.on_off.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.on_off)": [[101, "mltk.datasets.audio.on_off.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.on_off)": [[101, "mltk.datasets.audio.on_off.download"]], "generate_dataset() (in module mltk.datasets.audio.on_off)": [[101, "mltk.datasets.audio.on_off.generate_dataset"]], "mltk.datasets.audio.on_off": [[101, "module-mltk.datasets.audio.on_off"]], "classes (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[102, "mltk.datasets.audio.speech_commands.speech_commands_v2.CLASSES"]], "download_url (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[102, "mltk.datasets.audio.speech_commands.speech_commands_v2.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[102, "mltk.datasets.audio.speech_commands.speech_commands_v2.VERIFY_SHA1"]], "list_valid_filenames_in_directory() (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[102, "mltk.datasets.audio.speech_commands.speech_commands_v2.list_valid_filenames_in_directory"]], "load_clean_data() (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[102, "mltk.datasets.audio.speech_commands.speech_commands_v2.load_clean_data"]], "load_data() (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[102, "mltk.datasets.audio.speech_commands.speech_commands_v2.load_data"]], "mltk.datasets.audio.speech_commands.speech_commands_v2": [[102, "module-mltk.datasets.audio.speech_commands.speech_commands_v2"]], "classes (in module mltk.datasets.audio.ten_digits)": [[103, "mltk.datasets.audio.ten_digits.CLASSES"]], "download_url (in module mltk.datasets.audio.ten_digits)": [[103, "mltk.datasets.audio.ten_digits.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.ten_digits)": [[103, "mltk.datasets.audio.ten_digits.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.ten_digits)": [[103, "mltk.datasets.audio.ten_digits.download"]], "generate_dataset() (in module mltk.datasets.audio.ten_digits)": [[103, "mltk.datasets.audio.ten_digits.generate_dataset"]], "mltk.datasets.audio.ten_digits": [[103, "module-mltk.datasets.audio.ten_digits"]], "classes (in module mltk.datasets.audio.yes_no)": [[104, "mltk.datasets.audio.yes_no.CLASSES"]], "download_url (in module mltk.datasets.audio.yes_no)": [[104, "mltk.datasets.audio.yes_no.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.yes_no)": [[104, "mltk.datasets.audio.yes_no.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.yes_no)": [[104, "mltk.datasets.audio.yes_no.download"]], "generate_dataset() (in module mltk.datasets.audio.yes_no)": [[104, "mltk.datasets.audio.yes_no.generate_dataset"]], "mltk.datasets.audio.yes_no": [[104, "module-mltk.datasets.audio.yes_no"]], "download_url (in module mltk.datasets.image.cifar10)": [[105, "mltk.datasets.image.cifar10.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.image.cifar10)": [[105, "mltk.datasets.image.cifar10.VERIFY_SHA1"]], "load_data() (in module mltk.datasets.image.cifar10)": [[105, "mltk.datasets.image.cifar10.load_data"]], "load_data_directory() (in module mltk.datasets.image.cifar10)": [[105, "mltk.datasets.image.cifar10.load_data_directory"]], "mltk.datasets.image.cifar10": [[105, "module-mltk.datasets.image.cifar10"]], "classes (in module mltk.datasets.image.fashion_mnist)": [[106, "mltk.datasets.image.fashion_mnist.CLASSES"]], "input_shape (in module mltk.datasets.image.fashion_mnist)": [[106, "mltk.datasets.image.fashion_mnist.INPUT_SHAPE"]], "load_data() (in module mltk.datasets.image.fashion_mnist)": [[106, "mltk.datasets.image.fashion_mnist.load_data"]], "load_data_directory() (in module mltk.datasets.image.fashion_mnist)": [[106, "mltk.datasets.image.fashion_mnist.load_data_directory"]], "mltk.datasets.image.fashion_mnist": [[106, "module-mltk.datasets.image.fashion_mnist"]], "classes (in module mltk.datasets.image.mnist)": [[107, "mltk.datasets.image.mnist.CLASSES"]], "download_url (in module mltk.datasets.image.mnist)": [[107, "mltk.datasets.image.mnist.DOWNLOAD_URL"]], "input_shape (in module mltk.datasets.image.mnist)": [[107, "mltk.datasets.image.mnist.INPUT_SHAPE"]], "verify_sha1 (in module mltk.datasets.image.mnist)": [[107, "mltk.datasets.image.mnist.VERIFY_SHA1"]], "load_data() (in module mltk.datasets.image.mnist)": [[107, "mltk.datasets.image.mnist.load_data"]], "load_data_directory() (in module mltk.datasets.image.mnist)": [[107, "mltk.datasets.image.mnist.load_data_directory"]], "mltk.datasets.image.mnist": [[107, "module-mltk.datasets.image.mnist"]], "classes (in module mltk.datasets.image.rock_paper_scissors_v1)": [[108, "mltk.datasets.image.rock_paper_scissors_v1.CLASSES"]], "download_url (in module mltk.datasets.image.rock_paper_scissors_v1)": [[108, "mltk.datasets.image.rock_paper_scissors_v1.DOWNLOAD_URL"]], "input_depth (in module mltk.datasets.image.rock_paper_scissors_v1)": [[108, "mltk.datasets.image.rock_paper_scissors_v1.INPUT_DEPTH"]], "input_height (in module mltk.datasets.image.rock_paper_scissors_v1)": [[108, "mltk.datasets.image.rock_paper_scissors_v1.INPUT_HEIGHT"]], "input_shape (in module mltk.datasets.image.rock_paper_scissors_v1)": [[108, "mltk.datasets.image.rock_paper_scissors_v1.INPUT_SHAPE"]], "input_width (in module mltk.datasets.image.rock_paper_scissors_v1)": [[108, "mltk.datasets.image.rock_paper_scissors_v1.INPUT_WIDTH"]], "verify_sha1 (in module mltk.datasets.image.rock_paper_scissors_v1)": [[108, "mltk.datasets.image.rock_paper_scissors_v1.VERIFY_SHA1"]], "load_data() (in module mltk.datasets.image.rock_paper_scissors_v1)": [[108, "mltk.datasets.image.rock_paper_scissors_v1.load_data"]], "mltk.datasets.image.rock_paper_scissors_v1": [[108, "module-mltk.datasets.image.rock_paper_scissors_v1"]], "classes (in module mltk.datasets.image.rock_paper_scissors_v2)": [[109, "mltk.datasets.image.rock_paper_scissors_v2.CLASSES"]], "download_url (in module mltk.datasets.image.rock_paper_scissors_v2)": [[109, "mltk.datasets.image.rock_paper_scissors_v2.DOWNLOAD_URL"]], "input_depth (in module mltk.datasets.image.rock_paper_scissors_v2)": [[109, "mltk.datasets.image.rock_paper_scissors_v2.INPUT_DEPTH"]], "input_height (in module mltk.datasets.image.rock_paper_scissors_v2)": [[109, "mltk.datasets.image.rock_paper_scissors_v2.INPUT_HEIGHT"]], "input_shape (in module mltk.datasets.image.rock_paper_scissors_v2)": [[109, "mltk.datasets.image.rock_paper_scissors_v2.INPUT_SHAPE"]], "input_width (in module mltk.datasets.image.rock_paper_scissors_v2)": [[109, "mltk.datasets.image.rock_paper_scissors_v2.INPUT_WIDTH"]], "verify_sha1 (in module mltk.datasets.image.rock_paper_scissors_v2)": [[109, "mltk.datasets.image.rock_paper_scissors_v2.VERIFY_SHA1"]], "load_data() (in module mltk.datasets.image.rock_paper_scissors_v2)": [[109, "mltk.datasets.image.rock_paper_scissors_v2.load_data"]], "mltk.datasets.image.rock_paper_scissors_v2": [[109, "module-mltk.datasets.image.rock_paper_scissors_v2"]], "kerasmodel (in module mltk.core)": [[112, "mltk.core.KerasModel"]], "audiodatasetmixin (class in mltk.core)": [[113, "mltk.core.AudioDatasetMixin"]], "audio_classes (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.audio_classes"]], "audio_input_shape (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.audio_input_shape"]], "class_counts (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.class_counts"]], "class_mode (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.class_mode"]], "class_weights (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.class_weights"]], "datagen (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.datagen"]], "datagen_context (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.datagen_context"]], "dataset (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.dataset"]], "follow_links (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.follow_links"]], "frontend_settings (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.frontend_settings"]], "get_datagen_creator() (audiodatasetmixin method)": [[113, "mltk.core.AudioDatasetMixin.get_datagen_creator"]], "get_shuffle_index_dir() (audiodatasetmixin method)": [[113, "mltk.core.AudioDatasetMixin.get_shuffle_index_dir"]], "load_dataset() (audiodatasetmixin method)": [[113, "mltk.core.AudioDatasetMixin.load_dataset"]], "loaded_subset (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.loaded_subset"]], "sample_length_ms (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.sample_length_ms"]], "sample_rate_hz (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.sample_rate_hz"]], "sample_weight (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.sample_weight"]], "shuffle (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.shuffle"]], "shuffle_dataset_enabled (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.shuffle_dataset_enabled"]], "steps_per_epoch (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.steps_per_epoch"]], "summarize_dataset() (audiodatasetmixin method)": [[113, "mltk.core.AudioDatasetMixin.summarize_dataset"]], "unload_dataset() (audiodatasetmixin method)": [[113, "mltk.core.AudioDatasetMixin.unload_dataset"]], "validation_batch_size (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.validation_batch_size"]], "validation_data (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.validation_data"]], "validation_datagen (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.validation_datagen"]], "validation_freq (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.validation_freq"]], "validation_split (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.validation_split"]], "validation_steps (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.validation_steps"]], "x (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.x"]], "y (audiodatasetmixin property)": [[113, "mltk.core.AudioDatasetMixin.y"]], "datasetmixin (class in mltk.core)": [[114, "mltk.core.DatasetMixin"]], "class_counts (datasetmixin property)": [[114, "mltk.core.DatasetMixin.class_counts"]], "class_weights (datasetmixin property)": [[114, "mltk.core.DatasetMixin.class_weights"]], "dataset (datasetmixin property)": [[114, "mltk.core.DatasetMixin.dataset"]], "load_dataset() (datasetmixin method)": [[114, "mltk.core.DatasetMixin.load_dataset"]], "loaded_subset (datasetmixin property)": [[114, "mltk.core.DatasetMixin.loaded_subset"]], "sample_weight (datasetmixin property)": [[114, "mltk.core.DatasetMixin.sample_weight"]], "shuffle (datasetmixin property)": [[114, "mltk.core.DatasetMixin.shuffle"]], "steps_per_epoch (datasetmixin property)": [[114, "mltk.core.DatasetMixin.steps_per_epoch"]], "summarize_dataset() (datasetmixin method)": [[114, "mltk.core.DatasetMixin.summarize_dataset"]], "unload_dataset() (datasetmixin method)": [[114, "mltk.core.DatasetMixin.unload_dataset"]], "validation_batch_size (datasetmixin property)": [[114, "mltk.core.DatasetMixin.validation_batch_size"]], "validation_data (datasetmixin property)": [[114, "mltk.core.DatasetMixin.validation_data"]], "validation_freq (datasetmixin property)": [[114, "mltk.core.DatasetMixin.validation_freq"]], "validation_split (datasetmixin property)": [[114, "mltk.core.DatasetMixin.validation_split"]], "validation_steps (datasetmixin property)": [[114, "mltk.core.DatasetMixin.validation_steps"]], "x (datasetmixin property)": [[114, "mltk.core.DatasetMixin.x"]], "y (datasetmixin property)": [[114, "mltk.core.DatasetMixin.y"]], "evaluateautoencodermixin (class in mltk.core)": [[115, "mltk.core.EvaluateAutoEncoderMixin"]], "eval_augment (evaluateautoencodermixin property)": [[115, "mltk.core.EvaluateAutoEncoderMixin.eval_augment"]], "eval_classes (evaluateautoencodermixin property)": [[115, "mltk.core.EvaluateAutoEncoderMixin.eval_classes"]], "eval_custom_function (evaluateautoencodermixin property)": [[115, "mltk.core.EvaluateAutoEncoderMixin.eval_custom_function"]], "eval_max_samples_per_class (evaluateautoencodermixin property)": [[115, "mltk.core.EvaluateAutoEncoderMixin.eval_max_samples_per_class"]], "eval_shuffle (evaluateautoencodermixin property)": [[115, "mltk.core.EvaluateAutoEncoderMixin.eval_shuffle"]], "eval_steps_per_epoch (evaluateautoencodermixin property)": [[115, "mltk.core.EvaluateAutoEncoderMixin.eval_steps_per_epoch"]], "get_scoring_function() (evaluateautoencodermixin method)": [[115, "mltk.core.EvaluateAutoEncoderMixin.get_scoring_function"]], "scoring_function (evaluateautoencodermixin property)": [[115, "mltk.core.EvaluateAutoEncoderMixin.scoring_function"]], "evaluateclassifiermixin (class in mltk.core)": [[116, "mltk.core.EvaluateClassifierMixin"]], "eval_augment (evaluateclassifiermixin property)": [[116, "mltk.core.EvaluateClassifierMixin.eval_augment"]], "eval_custom_function (evaluateclassifiermixin property)": [[116, "mltk.core.EvaluateClassifierMixin.eval_custom_function"]], "eval_max_samples_per_class (evaluateclassifiermixin property)": [[116, "mltk.core.EvaluateClassifierMixin.eval_max_samples_per_class"]], "eval_shuffle (evaluateclassifiermixin property)": [[116, "mltk.core.EvaluateClassifierMixin.eval_shuffle"]], "eval_steps_per_epoch (evaluateclassifiermixin property)": [[116, "mltk.core.EvaluateClassifierMixin.eval_steps_per_epoch"]], "evaluatemixin (class in mltk.core)": [[117, "mltk.core.EvaluateMixin"]], "eval_custom_function (evaluatemixin property)": [[117, "mltk.core.EvaluateMixin.eval_custom_function"]], "eval_steps_per_epoch (evaluatemixin property)": [[117, "mltk.core.EvaluateMixin.eval_steps_per_epoch"]], "imagedatasetmixin (class in mltk.core)": [[118, "mltk.core.ImageDatasetMixin"]], "class_counts (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.class_counts"]], "class_mode (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.class_mode"]], "class_weights (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.class_weights"]], "color_mode (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.color_mode"]], "datagen (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.datagen"]], "datagen_context (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.datagen_context"]], "dataset (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.dataset"]], "follow_links (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.follow_links"]], "get_datagen_creator() (imagedatasetmixin method)": [[118, "mltk.core.ImageDatasetMixin.get_datagen_creator"]], "get_shuffle_index_dir() (imagedatasetmixin method)": [[118, "mltk.core.ImageDatasetMixin.get_shuffle_index_dir"]], "image_classes (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.image_classes"]], "image_input_shape (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.image_input_shape"]], "interpolation (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.interpolation"]], "load_dataset() (imagedatasetmixin method)": [[118, "mltk.core.ImageDatasetMixin.load_dataset"]], "loaded_subset (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.loaded_subset"]], "sample_weight (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.sample_weight"]], "shuffle (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.shuffle"]], "shuffle_dataset_enabled (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.shuffle_dataset_enabled"]], "steps_per_epoch (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.steps_per_epoch"]], "summarize_dataset() (imagedatasetmixin method)": [[118, "mltk.core.ImageDatasetMixin.summarize_dataset"]], "target_size (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.target_size"]], "unload_dataset() (imagedatasetmixin method)": [[118, "mltk.core.ImageDatasetMixin.unload_dataset"]], "validation_batch_size (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.validation_batch_size"]], "validation_data (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.validation_data"]], "validation_datagen (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.validation_datagen"]], "validation_freq (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.validation_freq"]], "validation_split (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.validation_split"]], "validation_steps (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.validation_steps"]], "x (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.x"]], "y (imagedatasetmixin property)": [[118, "mltk.core.ImageDatasetMixin.y"]], "mltkdataset (class in mltk.core)": [[120, "mltk.core.MltkDataset"]], "load_dataset() (mltkdataset method)": [[120, "mltk.core.MltkDataset.load_dataset"]], "summarize_class_counts() (mltkdataset static method)": [[120, "mltk.core.MltkDataset.summarize_class_counts"]], "summarize_dataset() (mltkdataset method)": [[120, "mltk.core.MltkDataset.summarize_dataset"]], "unload_dataset() (mltkdataset method)": [[120, "mltk.core.MltkDataset.unload_dataset"]], "mltkmodel (class in mltk.core)": [[121, "mltk.core.MltkModel"]], "__init__() (mltkmodel method)": [[121, "mltk.core.MltkModel.__init__"]], "add_archive_dir() (mltkmodel method)": [[121, "mltk.core.MltkModel.add_archive_dir"]], "add_archive_file() (mltkmodel method)": [[121, "mltk.core.MltkModel.add_archive_file"]], "add_event_handler() (mltkmodel method)": [[121, "mltk.core.MltkModel.add_event_handler"]], "add_model_parameter_populate_callback() (mltkmodel method)": [[121, "mltk.core.MltkModel.add_model_parameter_populate_callback"]], "add_tflite_metadata_entry() (mltkmodel method)": [[121, "mltk.core.MltkModel.add_tflite_metadata_entry"]], "archive_path (mltkmodel property)": [[121, "mltk.core.MltkModel.archive_path"]], "attributes (mltkmodel property)": [[121, "mltk.core.MltkModel.attributes"]], "check_archive_file_is_writable() (mltkmodel method)": [[121, "mltk.core.MltkModel.check_archive_file_is_writable"]], "classes (mltkmodel property)": [[121, "mltk.core.MltkModel.classes"]], "cli (mltkmodel property)": [[121, "mltk.core.MltkModel.cli"]], "create_log_dir() (mltkmodel method)": [[121, "mltk.core.MltkModel.create_log_dir"]], "create_logger() (mltkmodel method)": [[121, "mltk.core.MltkModel.create_logger"]], "description (mltkmodel property)": [[121, "mltk.core.MltkModel.description"]], "deserialize_tflite_metadata() (mltkmodel method)": [[121, "mltk.core.MltkModel.deserialize_tflite_metadata"]], "enable_test_mode() (mltkmodel method)": [[121, "mltk.core.MltkModel.enable_test_mode"]], "get_archive_dir() (mltkmodel method)": [[121, "mltk.core.MltkModel.get_archive_dir"]], "get_archive_file() (mltkmodel method)": [[121, "mltk.core.MltkModel.get_archive_file"]], "get_attribute() (mltkmodel method)": [[121, "mltk.core.MltkModel.get_attribute"]], "get_tflite_metadata_summary() (mltkmodel method)": [[121, "mltk.core.MltkModel.get_tflite_metadata_summary"]], "h5_archive_path (mltkmodel property)": [[121, "mltk.core.MltkModel.h5_archive_path"]], "h5_log_dir_path (mltkmodel property)": [[121, "mltk.core.MltkModel.h5_log_dir_path"]], "input_shape (mltkmodel property)": [[121, "mltk.core.MltkModel.input_shape"]], "keras_custom_objects (mltkmodel property)": [[121, "mltk.core.MltkModel.keras_custom_objects"]], "log_dir (mltkmodel property)": [[121, "mltk.core.MltkModel.log_dir"]], "model_parameters (mltkmodel property)": [[121, "mltk.core.MltkModel.model_parameters"]], "model_specification_path (mltkmodel property)": [[121, "mltk.core.MltkModel.model_specification_path"]], "n_classes (mltkmodel property)": [[121, "mltk.core.MltkModel.n_classes"]], "name (mltkmodel property)": [[121, "mltk.core.MltkModel.name"]], "populate_model_parameters() (mltkmodel method)": [[121, "mltk.core.MltkModel.populate_model_parameters"]], "serialize_tflite_metadata() (mltkmodel method)": [[121, "mltk.core.MltkModel.serialize_tflite_metadata"]], "set_model_parameter() (mltkmodel method)": [[121, "mltk.core.MltkModel.set_model_parameter"]], "summary() (mltkmodel method)": [[121, "mltk.core.MltkModel.summary"]], "test_mode_enabled (mltkmodel property)": [[121, "mltk.core.MltkModel.test_mode_enabled"]], "tflite_archive_path (mltkmodel property)": [[121, "mltk.core.MltkModel.tflite_archive_path"]], "tflite_log_dir_path (mltkmodel property)": [[121, "mltk.core.MltkModel.tflite_log_dir_path"]], "tflite_metadata_entries (mltkmodel property)": [[121, "mltk.core.MltkModel.tflite_metadata_entries"]], "trigger_event() (mltkmodel method)": [[121, "mltk.core.MltkModel.trigger_event"]], "unquantized_tflite_log_dir_path (mltkmodel property)": [[121, "mltk.core.MltkModel.unquantized_tflite_log_dir_path"]], "version (mltkmodel property)": [[121, "mltk.core.MltkModel.version"]], "after_build_train_model (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.AFTER_BUILD_TRAIN_MODEL"]], "after_load_dataset (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.AFTER_LOAD_DATASET"]], "after_model_load (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.AFTER_MODEL_LOAD"]], "after_profile (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.AFTER_PROFILE"]], "after_quantize (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.AFTER_QUANTIZE"]], "after_save_train_archive (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.AFTER_SAVE_TRAIN_ARCHIVE"]], "after_save_train_model (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.AFTER_SAVE_TRAIN_MODEL"]], "after_save_train_results (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.AFTER_SAVE_TRAIN_RESULTS"]], "after_train (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.AFTER_TRAIN"]], "after_unload_dataset (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.AFTER_UNLOAD_DATASET"]], "before_build_train_model (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.BEFORE_BUILD_TRAIN_MODEL"]], "before_load_dataset (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.BEFORE_LOAD_DATASET"]], "before_model_load (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.BEFORE_MODEL_LOAD"]], "before_quantize (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.BEFORE_QUANTIZE"]], "before_save_train_archive (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.BEFORE_SAVE_TRAIN_ARCHIVE"]], "before_save_train_model (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.BEFORE_SAVE_TRAIN_MODEL"]], "before_save_train_results (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.BEFORE_SAVE_TRAIN_RESULTS"]], "before_train (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.BEFORE_TRAIN"]], "before_unload_dataset (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.BEFORE_UNLOAD_DATASET"]], "evaluate_shutdown (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.EVALUATE_SHUTDOWN"]], "evaluate_startup (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.EVALUATE_STARTUP"]], "generate_evaluate_plot (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.GENERATE_EVALUATE_PLOT"]], "mltkmodelevent (class in mltk.core)": [[122, "mltk.core.MltkModelEvent"]], "populate_train_callbacks (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.POPULATE_TRAIN_CALLBACKS"]], "quantize_shutdown (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.QUANTIZE_SHUTDOWN"]], "quantize_startup (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.QUANTIZE_STARTUP"]], "summarize_dataset (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.SUMMARIZE_DATASET"]], "summarize_model (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.SUMMARIZE_MODEL"]], "train_shutdown (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.TRAIN_SHUTDOWN"]], "train_startup (mltkmodelevent attribute)": [[122, "mltk.core.MltkModelEvent.TRAIN_STARTUP"]], "__init__() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.__init__"]], "__new__() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.__new__"]], "capitalize() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.capitalize"]], "casefold() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.casefold"]], "center() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.center"]], "count() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.count"]], "encode() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.encode"]], "endswith() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.endswith"]], "expandtabs() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.expandtabs"]], "find() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.find"]], "format() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.format"]], "format_map() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.format_map"]], "index() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.index"]], "isalnum() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.isalnum"]], "isalpha() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.isalpha"]], "isascii() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.isascii"]], "isdecimal() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.isdecimal"]], "isdigit() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.isdigit"]], "isidentifier() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.isidentifier"]], "islower() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.islower"]], "isnumeric() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.isnumeric"]], "isprintable() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.isprintable"]], "isspace() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.isspace"]], "istitle() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.istitle"]], "isupper() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.isupper"]], "join() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.join"]], "ljust() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.ljust"]], "lower() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.lower"]], "lstrip() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.lstrip"]], "maketrans() (mltkmodelevent static method)": [[122, "mltk.core.MltkModelEvent.maketrans"]], "partition() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.partition"]], "removeprefix() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.removeprefix"]], "removesuffix() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.removesuffix"]], "replace() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.replace"]], "rfind() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.rfind"]], "rindex() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.rindex"]], "rjust() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.rjust"]], "rpartition() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.rpartition"]], "rsplit() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.rsplit"]], "rstrip() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.rstrip"]], "split() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.split"]], "splitlines() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.splitlines"]], "startswith() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.startswith"]], "strip() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.strip"]], "swapcase() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.swapcase"]], "title() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.title"]], "translate() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.translate"]], "upper() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.upper"]], "zfill() (mltkmodelevent method)": [[122, "mltk.core.MltkModelEvent.zfill"]], "sshmixin (class in mltk.core)": [[123, "mltk.core.SshMixin"]], "ssh_create_venv (sshmixin property)": [[123, "mltk.core.SshMixin.ssh_create_venv"]], "ssh_download_files (sshmixin property)": [[123, "mltk.core.SshMixin.ssh_download_files"]], "ssh_environment (sshmixin property)": [[123, "mltk.core.SshMixin.ssh_environment"]], "ssh_remote_dir (sshmixin property)": [[123, "mltk.core.SshMixin.ssh_remote_dir"]], "ssh_shutdown_cmds (sshmixin property)": [[123, "mltk.core.SshMixin.ssh_shutdown_cmds"]], "ssh_startup_cmds (sshmixin property)": [[123, "mltk.core.SshMixin.ssh_startup_cmds"]], "ssh_upload_files (sshmixin property)": [[123, "mltk.core.SshMixin.ssh_upload_files"]], "trainmixin (class in mltk.core)": [[124, "mltk.core.TrainMixin"]], "batch_size (trainmixin property)": [[124, "mltk.core.TrainMixin.batch_size"]], "build_model_function (trainmixin property)": [[124, "mltk.core.TrainMixin.build_model_function"]], "checkpoint (trainmixin property)": [[124, "mltk.core.TrainMixin.checkpoint"]], "checkpoints_dir (trainmixin property)": [[124, "mltk.core.TrainMixin.checkpoints_dir"]], "checkpoints_enabled (trainmixin property)": [[124, "mltk.core.TrainMixin.checkpoints_enabled"]], "early_stopping (trainmixin property)": [[124, "mltk.core.TrainMixin.early_stopping"]], "epochs (trainmixin property)": [[124, "mltk.core.TrainMixin.epochs"]], "get_checkpoint_path() (trainmixin method)": [[124, "mltk.core.TrainMixin.get_checkpoint_path"]], "get_weights_path() (trainmixin method)": [[124, "mltk.core.TrainMixin.get_weights_path"]], "loss (trainmixin property)": [[124, "mltk.core.TrainMixin.loss"]], "lr_schedule (trainmixin property)": [[124, "mltk.core.TrainMixin.lr_schedule"]], "metrics (trainmixin property)": [[124, "mltk.core.TrainMixin.metrics"]], "on_save_keras_model (trainmixin property)": [[124, "mltk.core.TrainMixin.on_save_keras_model"]], "on_training_complete (trainmixin property)": [[124, "mltk.core.TrainMixin.on_training_complete"]], "optimizer (trainmixin property)": [[124, "mltk.core.TrainMixin.optimizer"]], "reduce_lr_on_plateau (trainmixin property)": [[124, "mltk.core.TrainMixin.reduce_lr_on_plateau"]], "tensorboard (trainmixin property)": [[124, "mltk.core.TrainMixin.tensorboard"]], "tflite_converter (trainmixin property)": [[124, "mltk.core.TrainMixin.tflite_converter"]], "train_callbacks (trainmixin property)": [[124, "mltk.core.TrainMixin.train_callbacks"]], "train_kwargs (trainmixin property)": [[124, "mltk.core.TrainMixin.train_kwargs"]], "weights_dir (trainmixin property)": [[124, "mltk.core.TrainMixin.weights_dir"]], "weights_file_format (trainmixin property)": [[124, "mltk.core.TrainMixin.weights_file_format"]], "list_mltk_models() (in module mltk.core)": [[125, "mltk.core.list_mltk_models"]], "load_mltk_model() (in module mltk.core)": [[125, "mltk.core.load_mltk_model"]], "load_mltk_model_with_path() (in module mltk.core)": [[125, "mltk.core.load_mltk_model_with_path"]], "load_tflite_model() (in module mltk.core)": [[125, "mltk.core.load_tflite_model"]], "load_tflite_or_keras_model() (in module mltk.core)": [[125, "mltk.core.load_tflite_or_keras_model"]], "weightsandbiasesmixin (class in mltk.core)": [[126, "mltk.core.WeightsAndBiasesMixin"]], "wandb_callback (weightsandbiasesmixin property)": [[126, "mltk.core.WeightsAndBiasesMixin.wandb_callback"]], "wandb_config (weightsandbiasesmixin property)": [[126, "mltk.core.WeightsAndBiasesMixin.wandb_config"]], "wandb_init_kwargs (weightsandbiasesmixin property)": [[126, "mltk.core.WeightsAndBiasesMixin.wandb_init_kwargs"]], "wandb_is_disabled (weightsandbiasesmixin property)": [[126, "mltk.core.WeightsAndBiasesMixin.wandb_is_disabled"]], "wandb_is_initialized (weightsandbiasesmixin property)": [[126, "mltk.core.WeightsAndBiasesMixin.wandb_is_initialized"]], "wandb_log() (weightsandbiasesmixin method)": [[126, "mltk.core.WeightsAndBiasesMixin.wandb_log"]], "wandb_model_checkpoint_callback (weightsandbiasesmixin property)": [[126, "mltk.core.WeightsAndBiasesMixin.wandb_model_checkpoint_callback"]], "wandb_save() (weightsandbiasesmixin method)": [[126, "mltk.core.WeightsAndBiasesMixin.wandb_save"]], "wandb_session_id (weightsandbiasesmixin property)": [[126, "mltk.core.WeightsAndBiasesMixin.wandb_session_id"]], "depthwiseseparableconv2d_arm() (in module mltk.models.shared.dsconv_arm)": [[127, "mltk.models.shared.dsconv_arm.DepthwiseSeparableConv2D_ARM"]], "fullyconnectedautoencoder() (in module mltk.models.shared.fully_connected_autoencoder)": [[127, "mltk.models.shared.fully_connected_autoencoder.FullyConnectedAutoEncoder"]], "mobilenetv1() (in module mltk.models.shared.mobilenet_v1)": [[127, "mltk.models.shared.mobilenet_v1.MobileNetV1"]], "mobilenetv2() (in module mltk.models.shared.mobilenet_v2)": [[127, "mltk.models.shared.mobilenet_v2.MobileNetV2"]], "resnet10v1() (in module mltk.models.shared.resnet_v1)": [[127, "mltk.models.shared.resnet_v1.ResNet10V1"]], "tenet() (in module mltk.models.shared.tenet)": [[127, "mltk.models.shared.tenet.TENet"]], "mltk.models.examples.audio_example1": [[128, "module-mltk.models.examples.audio_example1"]], "mltk.models.examples.audio_tf_dataset": [[129, "module-mltk.models.examples.audio_tf_dataset"]], "mltk.models.examples.autoencoder_example": [[130, "module-mltk.models.examples.autoencoder_example"]], "mltk.models.examples.basic_example": [[131, "module-mltk.models.examples.basic_example"]], "mltk.models.examples.basic_tf_dataset_example": [[132, "module-mltk.models.examples.basic_tf_dataset_example"]], "mltk.models.examples.binary_classification": [[133, "module-mltk.models.examples.binary_classification"]], "mltk.models.examples.conv1d_example": [[134, "module-mltk.models.examples.conv1d_example"]], "mltk.models.examples.image_example1": [[135, "module-mltk.models.examples.image_example1"]], "mltk.models.examples.image_tf_dataset": [[136, "module-mltk.models.examples.image_tf_dataset"]], "mltk.models.examples.siamese_contrastive": [[138, "module-mltk.models.examples.siamese_contrastive"]], "mltk.models.siliconlabs.fingerprint_signature_generator": [[140, "module-mltk.models.siliconlabs.fingerprint_signature_generator"]], "mltk.models.siliconlabs.keyword_spotting_alexa": [[142, "module-mltk.models.siliconlabs.keyword_spotting_alexa"]], "mltk.models.siliconlabs.keyword_spotting_mobilenetv2": [[143, "module-mltk.models.siliconlabs.keyword_spotting_mobilenetv2"]], "mltk.models.siliconlabs.keyword_spotting_numbers": [[144, "module-mltk.models.siliconlabs.keyword_spotting_numbers"]], "mltk.models.siliconlabs.keyword_spotting_on_off": [[145, "module-mltk.models.siliconlabs.keyword_spotting_on_off"]], "mltk.models.siliconlabs.keyword_spotting_on_off_v2": [[146, "module-mltk.models.siliconlabs.keyword_spotting_on_off_v2"]], "mltk.models.siliconlabs.keyword_spotting_on_off_v3": [[147, "module-mltk.models.siliconlabs.keyword_spotting_on_off_v3"]], "mltk.models.siliconlabs.keyword_spotting_pacman": [[148, "module-mltk.models.siliconlabs.keyword_spotting_pacman"]], "mltk.models.siliconlabs.keyword_spotting_pacman_v2": [[149, "module-mltk.models.siliconlabs.keyword_spotting_pacman_v2"]], "mltk.models.siliconlabs.keyword_spotting_pacman_v3": [[150, "module-mltk.models.siliconlabs.keyword_spotting_pacman_v3"]], "mltk.models.siliconlabs.keyword_spotting_with_transfer_learning": [[151, "module-mltk.models.siliconlabs.keyword_spotting_with_transfer_learning"]], "mltk.models.siliconlabs.rock_paper_scissors": [[152, "module-mltk.models.siliconlabs.rock_paper_scissors"]], "mltk.models.tflite_micro.tflite_micro_magic_wand": [[154, "module-mltk.models.tflite_micro.tflite_micro_magic_wand"]], "mltk.models.tflite_micro.tflite_micro_speech": [[155, "module-mltk.models.tflite_micro.tflite_micro_speech"]], "mltk.models.tinyml.anomaly_detection": [[156, "module-mltk.models.tinyml.anomaly_detection"]], "mltk.models.tinyml.image_classification": [[157, "module-mltk.models.tinyml.image_classification"]], "mltk.models.tinyml.keyword_spotting": [[159, "module-mltk.models.tinyml.keyword_spotting"]], "mltk.models.tinyml.visual_wake_words": [[160, "module-mltk.models.tinyml.visual_wake_words"]], "autoencoderevaluationresults (class in mltk.core)": [[161, "mltk.core.AutoEncoderEvaluationResults"]], "classifierevaluationresults (class in mltk.core)": [[161, "mltk.core.ClassifierEvaluationResults"]], "evaluationresults (class in mltk.core)": [[161, "mltk.core.EvaluationResults"]], "__init__() (autoencoderevaluationresults method)": [[161, "mltk.core.AutoEncoderEvaluationResults.__init__"]], "__init__() (classifierevaluationresults method)": [[161, "mltk.core.ClassifierEvaluationResults.__init__"]], "__init__() (evaluationresults method)": [[161, "mltk.core.EvaluationResults.__init__"]], "calculate() (autoencoderevaluationresults method)": [[161, "mltk.core.AutoEncoderEvaluationResults.calculate"]], "calculate() (classifierevaluationresults method)": [[161, "mltk.core.ClassifierEvaluationResults.calculate"]], "class_accuracies (classifierevaluationresults property)": [[161, "mltk.core.ClassifierEvaluationResults.class_accuracies"]], "class_stats (autoencoderevaluationresults property)": [[161, "mltk.core.AutoEncoderEvaluationResults.class_stats"]], "classes (autoencoderevaluationresults property)": [[161, "mltk.core.AutoEncoderEvaluationResults.classes"]], "classes (classifierevaluationresults property)": [[161, "mltk.core.ClassifierEvaluationResults.classes"]], "confusion_matrix (classifierevaluationresults property)": [[161, "mltk.core.ClassifierEvaluationResults.confusion_matrix"]], "evaluate_autoencoder() (in module mltk.core)": [[161, "mltk.core.evaluate_autoencoder"]], "evaluate_classifier() (in module mltk.core)": [[161, "mltk.core.evaluate_classifier"]], "evaluate_model() (in module mltk.core)": [[161, "mltk.core.evaluate_model"]], "false_positive_rate (classifierevaluationresults property)": [[161, "mltk.core.ClassifierEvaluationResults.false_positive_rate"]], "fpr (classifierevaluationresults property)": [[161, "mltk.core.ClassifierEvaluationResults.fpr"]], "generate_plots() (autoencoderevaluationresults method)": [[161, "mltk.core.AutoEncoderEvaluationResults.generate_plots"]], "generate_plots() (classifierevaluationresults method)": [[161, "mltk.core.ClassifierEvaluationResults.generate_plots"]], "generate_plots() (evaluationresults method)": [[161, "mltk.core.EvaluationResults.generate_plots"]], "generate_summary() (autoencoderevaluationresults method)": [[161, "mltk.core.AutoEncoderEvaluationResults.generate_summary"]], "generate_summary() (classifierevaluationresults method)": [[161, "mltk.core.ClassifierEvaluationResults.generate_summary"]], "generate_summary() (evaluationresults method)": [[161, "mltk.core.EvaluationResults.generate_summary"]], "model_type (evaluationresults property)": [[161, "mltk.core.EvaluationResults.model_type"]], "name (evaluationresults property)": [[161, "mltk.core.EvaluationResults.name"]], "overall_accuracy (autoencoderevaluationresults property)": [[161, "mltk.core.AutoEncoderEvaluationResults.overall_accuracy"]], "overall_accuracy (classifierevaluationresults property)": [[161, "mltk.core.ClassifierEvaluationResults.overall_accuracy"]], "overall_fpr (autoencoderevaluationresults property)": [[161, "mltk.core.AutoEncoderEvaluationResults.overall_fpr"]], "overall_pr_accuracy (autoencoderevaluationresults property)": [[161, "mltk.core.AutoEncoderEvaluationResults.overall_pr_accuracy"]], "overall_precision (autoencoderevaluationresults property)": [[161, "mltk.core.AutoEncoderEvaluationResults.overall_precision"]], "overall_recall (autoencoderevaluationresults property)": [[161, "mltk.core.AutoEncoderEvaluationResults.overall_recall"]], "overall_roc_auc (autoencoderevaluationresults property)": [[161, "mltk.core.AutoEncoderEvaluationResults.overall_roc_auc"]], "overall_thresholds (autoencoderevaluationresults property)": [[161, "mltk.core.AutoEncoderEvaluationResults.overall_thresholds"]], "overall_tpr (autoencoderevaluationresults property)": [[161, "mltk.core.AutoEncoderEvaluationResults.overall_tpr"]], "precision (classifierevaluationresults property)": [[161, "mltk.core.ClassifierEvaluationResults.precision"]], "recall (classifierevaluationresults property)": [[161, "mltk.core.ClassifierEvaluationResults.recall"]], "roc_auc (classifierevaluationresults property)": [[161, "mltk.core.ClassifierEvaluationResults.roc_auc"]], "roc_auc_avg (classifierevaluationresults property)": [[161, "mltk.core.ClassifierEvaluationResults.roc_auc_avg"]], "roc_thresholds (classifierevaluationresults property)": [[161, "mltk.core.ClassifierEvaluationResults.roc_thresholds"]], "tpr (classifierevaluationresults property)": [[161, "mltk.core.ClassifierEvaluationResults.tpr"]], "profilinglayerresult (class in mltk.core.profiling_results)": [[163, "mltk.core.profiling_results.ProfilingLayerResult"]], "profilingmodelresults (class in mltk.core.profiling_results)": [[163, "mltk.core.profiling_results.ProfilingModelResults"]], "__init__() (profilinglayerresult method)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.__init__"]], "__init__() (profilingmodelresults method)": [[163, "mltk.core.profiling_results.ProfilingModelResults.__init__"]], "accelerator (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.accelerator"]], "accelerator_cycles (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.accelerator_cycles"]], "accelerator_cycles (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.accelerator_cycles"]], "cpu_clock_rate (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.cpu_clock_rate"]], "cpu_cycles (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.cpu_cycles"]], "cpu_cycles (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.cpu_cycles"]], "cpu_utilization (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.cpu_utilization"]], "energy (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.energy"]], "energy (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.energy"]], "error_msg (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.error_msg"]], "flatbuffer_size (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.flatbuffer_size"]], "generate_report() (profilingmodelresults method)": [[163, "mltk.core.profiling_results.ProfilingModelResults.generate_report"]], "get_summary() (profilinglayerresult method)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.get_summary"]], "get_summary() (profilingmodelresults method)": [[163, "mltk.core.profiling_results.ProfilingModelResults.get_summary"]], "index (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.index"]], "input_dtype_str (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.input_dtype_str"]], "input_dtype_str (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.input_dtype_str"]], "input_shape_str (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.input_shape_str"]], "input_shape_str (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.input_shape_str"]], "is_accelerated (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.is_accelerated"]], "is_simulated (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.is_simulated"]], "is_unsupported (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.is_unsupported"]], "layers (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.layers"]], "macs (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.macs"]], "macs (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.macs"]], "n_layers (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.n_layers"]], "n_unsupported_layers (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.n_unsupported_layers"]], "name (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.name"]], "name (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.name"]], "opcode (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.opcode"]], "opcode_str (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.opcode_str"]], "ops (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.ops"]], "ops (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.ops"]], "options_str (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.options_str"]], "output_dtype_str (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.output_dtype_str"]], "output_dtype_str (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.output_dtype_str"]], "output_shape_str (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.output_shape_str"]], "output_shape_str (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.output_shape_str"]], "platform (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.platform"]], "profile_model() (in module mltk.core)": [[163, "mltk.core.profile_model"]], "runtime_memory_bytes (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.runtime_memory_bytes"]], "stat_total() (profilingmodelresults method)": [[163, "mltk.core.profiling_results.ProfilingModelResults.stat_total"]], "tflite_layer (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.tflite_layer"]], "tflite_micro_model_details (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.tflite_micro_model_details"]], "tflite_model (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.tflite_model"]], "time (profilinglayerresult property)": [[163, "mltk.core.profiling_results.ProfilingLayerResult.time"]], "time (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.time"]], "to_csv() (profilingmodelresults method)": [[163, "mltk.core.profiling_results.ProfilingModelResults.to_csv"]], "to_dict() (profilingmodelresults method)": [[163, "mltk.core.profiling_results.ProfilingModelResults.to_dict"]], "to_json() (profilingmodelresults method)": [[163, "mltk.core.profiling_results.ProfilingModelResults.to_json"]], "to_string() (profilingmodelresults method)": [[163, "mltk.core.profiling_results.ProfilingModelResults.to_string"]], "unsupported_layers (profilingmodelresults property)": [[163, "mltk.core.profiling_results.ProfilingModelResults.unsupported_layers"]], "quantize_model() (in module mltk.core)": [[164, "mltk.core.quantize_model"]], "summarize_model() (in module mltk.core)": [[165, "mltk.core.summarize_model"]], "trainingresults (class in mltk.core.train_model)": [[166, "mltk.core.train_model.TrainingResults"]], "__init__() (trainingresults method)": [[166, "mltk.core.train_model.TrainingResults.__init__"]], "asdict() (trainingresults method)": [[166, "mltk.core.train_model.TrainingResults.asdict"]], "epochs (trainingresults attribute)": [[166, "mltk.core.train_model.TrainingResults.epochs"]], "get_best_metric() (trainingresults method)": [[166, "mltk.core.train_model.TrainingResults.get_best_metric"]], "history (trainingresults attribute)": [[166, "mltk.core.train_model.TrainingResults.history"]], "keras_model (trainingresults attribute)": [[166, "mltk.core.train_model.TrainingResults.keras_model"]], "mltk_model (trainingresults attribute)": [[166, "mltk.core.train_model.TrainingResults.mltk_model"]], "model_archive_path (trainingresults property)": [[166, "mltk.core.train_model.TrainingResults.model_archive_path"]], "params (trainingresults attribute)": [[166, "mltk.core.train_model.TrainingResults.params"]], "train_model() (in module mltk.core)": [[166, "mltk.core.train_model"]], "update_model_parameters() (in module mltk.core)": [[167, "mltk.core.update_model_parameters"]], "view_model() (in module mltk.core)": [[168, "mltk.core.view_model"]], "tflitemicroaccelerator (class in mltk.core.tflite_micro.tflite_micro_accelerator)": [[169, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator"]], "__init__() (tflitemicroaccelerator method)": [[169, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.__init__"]], "accelerator_wrapper (tflitemicroaccelerator property)": [[169, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.accelerator_wrapper"]], "active_variant (tflitemicroaccelerator property)": [[169, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.active_variant"]], "api_version (tflitemicroaccelerator property)": [[169, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.api_version"]], "compile_model() (tflitemicroaccelerator method)": [[169, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.compile_model"]], "enable_data_recorder() (tflitemicroaccelerator method)": [[169, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.enable_data_recorder"]], "estimate_profiling_results() (tflitemicroaccelerator method)": [[169, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.estimate_profiling_results"]], "git_hash (tflitemicroaccelerator property)": [[169, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.git_hash"]], "name (tflitemicroaccelerator property)": [[169, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.name"]], "set_program_recorder_enabled() (tflitemicroaccelerator method)": [[169, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.set_program_recorder_enabled"]], "supports_model_compilation (tflitemicroaccelerator property)": [[169, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.supports_model_compilation"]], "variants (tflitemicroaccelerator property)": [[169, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.variants"]], "tflitemicrolayererror (class in mltk.core.tflite_micro)": [[171, "mltk.core.tflite_micro.TfliteMicroLayerError"]], "__init__() (tflitemicrolayererror method)": [[171, "mltk.core.tflite_micro.TfliteMicroLayerError.__init__"]], "index (tflitemicrolayererror attribute)": [[171, "mltk.core.tflite_micro.TfliteMicroLayerError.index"]], "msg (tflitemicrolayererror attribute)": [[171, "mltk.core.tflite_micro.TfliteMicroLayerError.msg"]], "name (tflitemicrolayererror attribute)": [[171, "mltk.core.tflite_micro.TfliteMicroLayerError.name"]], "tflitemicromodel (class in mltk.core.tflite_micro)": [[172, "mltk.core.tflite_micro.TfliteMicroModel"]], "__init__() (tflitemicromodel method)": [[172, "mltk.core.tflite_micro.TfliteMicroModel.__init__"]], "accelerator (tflitemicromodel property)": [[172, "mltk.core.tflite_micro.TfliteMicroModel.accelerator"]], "details (tflitemicromodel property)": [[172, "mltk.core.tflite_micro.TfliteMicroModel.details"]], "get_layer_error() (tflitemicromodel method)": [[172, "mltk.core.tflite_micro.TfliteMicroModel.get_layer_error"]], "get_profiling_results() (tflitemicromodel method)": [[172, "mltk.core.tflite_micro.TfliteMicroModel.get_profiling_results"]], "get_recorded_data() (tflitemicromodel method)": [[172, "mltk.core.tflite_micro.TfliteMicroModel.get_recorded_data"]], "input() (tflitemicromodel method)": [[172, "mltk.core.tflite_micro.TfliteMicroModel.input"]], "input_size (tflitemicromodel property)": [[172, "mltk.core.tflite_micro.TfliteMicroModel.input_size"]], "invoke() (tflitemicromodel method)": [[172, "mltk.core.tflite_micro.TfliteMicroModel.invoke"]], "is_profiler_enabled (tflitemicromodel property)": [[172, "mltk.core.tflite_micro.TfliteMicroModel.is_profiler_enabled"]], "is_recorder_enabled (tflitemicromodel property)": [[172, "mltk.core.tflite_micro.TfliteMicroModel.is_recorder_enabled"]], "is_tensor_recorder_enabled (tflitemicromodel property)": [[172, "mltk.core.tflite_micro.TfliteMicroModel.is_tensor_recorder_enabled"]], "layer_errors (tflitemicromodel property)": [[172, "mltk.core.tflite_micro.TfliteMicroModel.layer_errors"]], "output() (tflitemicromodel method)": [[172, "mltk.core.tflite_micro.TfliteMicroModel.output"]], "output_size (tflitemicromodel property)": [[172, "mltk.core.tflite_micro.TfliteMicroModel.output_size"]], "tflitemicromodeldetails (class in mltk.core.tflite_micro)": [[173, "mltk.core.tflite_micro.TfliteMicroModelDetails"]], "__init__() (tflitemicromodeldetails method)": [[173, "mltk.core.tflite_micro.TfliteMicroModelDetails.__init__"]], "accelerator (tflitemicromodeldetails property)": [[173, "mltk.core.tflite_micro.TfliteMicroModelDetails.accelerator"]], "classes (tflitemicromodeldetails property)": [[173, "mltk.core.tflite_micro.TfliteMicroModelDetails.classes"]], "date (tflitemicromodeldetails property)": [[173, "mltk.core.tflite_micro.TfliteMicroModelDetails.date"]], "description (tflitemicromodeldetails property)": [[173, "mltk.core.tflite_micro.TfliteMicroModelDetails.description"]], "hash (tflitemicromodeldetails property)": [[173, "mltk.core.tflite_micro.TfliteMicroModelDetails.hash"]], "memory_plan (tflitemicromodeldetails property)": [[173, "mltk.core.tflite_micro.TfliteMicroModelDetails.memory_plan"]], "name (tflitemicromodeldetails property)": [[173, "mltk.core.tflite_micro.TfliteMicroModelDetails.name"]], "runtime_memory_size (tflitemicromodeldetails property)": [[173, "mltk.core.tflite_micro.TfliteMicroModelDetails.runtime_memory_size"]], "version (tflitemicromodeldetails property)": [[173, "mltk.core.tflite_micro.TfliteMicroModelDetails.version"]], "tflitemicroprofiledlayerresult (class in mltk.core.tflite_micro)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult"]], "__init__() (tflitemicroprofiledlayerresult method)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.__init__"]], "__new__() (tflitemicroprofiledlayerresult method)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.__new__"]], "accelerator_cycles (tflitemicroprofiledlayerresult property)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.accelerator_cycles"]], "clear() (tflitemicroprofiledlayerresult method)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.clear"]], "copy() (tflitemicroprofiledlayerresult method)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.copy"]], "cpu_cycles (tflitemicroprofiledlayerresult property)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.cpu_cycles"]], "default_factory (tflitemicroprofiledlayerresult attribute)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.default_factory"]], "energy (tflitemicroprofiledlayerresult property)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.energy"]], "fromkeys() (tflitemicroprofiledlayerresult method)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.fromkeys"]], "get() (tflitemicroprofiledlayerresult method)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.get"]], "items() (tflitemicroprofiledlayerresult method)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.items"]], "keys() (tflitemicroprofiledlayerresult method)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.keys"]], "macs (tflitemicroprofiledlayerresult property)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.macs"]], "name (tflitemicroprofiledlayerresult property)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.name"]], "ops (tflitemicroprofiledlayerresult property)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.ops"]], "pop() (tflitemicroprofiledlayerresult method)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.pop"]], "popitem() (tflitemicroprofiledlayerresult method)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.popitem"]], "setdefault() (tflitemicroprofiledlayerresult method)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.setdefault"]], "time (tflitemicroprofiledlayerresult property)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.time"]], "update() (tflitemicroprofiledlayerresult method)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.update"]], "values() (tflitemicroprofiledlayerresult method)": [[174, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.values"]], "tflitemicro (class in mltk.core.tflite_micro)": [[175, "mltk.core.tflite_micro.TfliteMicro"]], "accelerator_is_supported() (tflitemicro static method)": [[175, "mltk.core.tflite_micro.TfliteMicro.accelerator_is_supported"]], "add_accelerator_path() (tflitemicro static method)": [[175, "mltk.core.tflite_micro.TfliteMicro.add_accelerator_path"]], "api_version() (tflitemicro static method)": [[175, "mltk.core.tflite_micro.TfliteMicro.api_version"]], "get_accelerator() (tflitemicro static method)": [[175, "mltk.core.tflite_micro.TfliteMicro.get_accelerator"]], "get_log_level() (tflitemicro static method)": [[175, "mltk.core.tflite_micro.TfliteMicro.get_log_level"]], "get_logger() (tflitemicro static method)": [[175, "mltk.core.tflite_micro.TfliteMicro.get_logger"]], "get_supported_accelerators() (tflitemicro static method)": [[175, "mltk.core.tflite_micro.TfliteMicro.get_supported_accelerators"]], "git_hash() (tflitemicro static method)": [[175, "mltk.core.tflite_micro.TfliteMicro.git_hash"]], "load_tflite_model() (tflitemicro static method)": [[175, "mltk.core.tflite_micro.TfliteMicro.load_tflite_model"]], "normalize_accelerator_name() (tflitemicro static method)": [[175, "mltk.core.tflite_micro.TfliteMicro.normalize_accelerator_name"]], "profile_model() (tflitemicro static method)": [[175, "mltk.core.tflite_micro.TfliteMicro.profile_model"]], "record_model() (tflitemicro static method)": [[175, "mltk.core.tflite_micro.TfliteMicro.record_model"]], "register_accelerator() (tflitemicro static method)": [[175, "mltk.core.tflite_micro.TfliteMicro.register_accelerator"]], "set_log_level() (tflitemicro static method)": [[175, "mltk.core.tflite_micro.TfliteMicro.set_log_level"]], "set_logger() (tflitemicro static method)": [[175, "mltk.core.tflite_micro.TfliteMicro.set_logger"]], "unload_model() (tflitemicro static method)": [[175, "mltk.core.tflite_micro.TfliteMicro.unload_model"]], "none (tfliteactivation attribute)": [[176, "mltk.core.TfliteActivation.NONE"]], "relu (tfliteactivation attribute)": [[176, "mltk.core.TfliteActivation.RELU"]], "relu6 (tfliteactivation attribute)": [[176, "mltk.core.TfliteActivation.RELU6"]], "relu_n1_to_1 (tfliteactivation attribute)": [[176, "mltk.core.TfliteActivation.RELU_N1_TO_1"]], "sign_bit (tfliteactivation attribute)": [[176, "mltk.core.TfliteActivation.SIGN_BIT"]], "tanh (tfliteactivation attribute)": [[176, "mltk.core.TfliteActivation.TANH"]], "tfliteactivation (class in mltk.core)": [[176, "mltk.core.TfliteActivation"]], "__init__() (tfliteactivation method)": [[176, "mltk.core.TfliteActivation.__init__"]], "__new__() (tfliteactivation method)": [[176, "mltk.core.TfliteActivation.__new__"]], "as_integer_ratio() (tfliteactivation method)": [[176, "mltk.core.TfliteActivation.as_integer_ratio"]], "bit_count() (tfliteactivation method)": [[176, "mltk.core.TfliteActivation.bit_count"]], "bit_length() (tfliteactivation method)": [[176, "mltk.core.TfliteActivation.bit_length"]], "conjugate() (tfliteactivation method)": [[176, "mltk.core.TfliteActivation.conjugate"]], "denominator (tfliteactivation attribute)": [[176, "mltk.core.TfliteActivation.denominator"]], "from_bytes() (tfliteactivation method)": [[176, "mltk.core.TfliteActivation.from_bytes"]], "imag (tfliteactivation attribute)": [[176, "mltk.core.TfliteActivation.imag"]], "is_integer() (tfliteactivation method)": [[176, "mltk.core.TfliteActivation.is_integer"]], "numerator (tfliteactivation attribute)": [[176, "mltk.core.TfliteActivation.numerator"]], "real (tfliteactivation attribute)": [[176, "mltk.core.TfliteActivation.real"]], "to_bytes() (tfliteactivation method)": [[176, "mltk.core.TfliteActivation.to_bytes"]], "to_string() (tfliteactivation method)": [[176, "mltk.core.TfliteActivation.to_string"]], "tfliteaddlayer (class in mltk.core)": [[177, "mltk.core.TfliteAddLayer"]], "__init__() (tfliteaddlayer method)": [[177, "mltk.core.TfliteAddLayer.__init__"]], "activation (tfliteaddlayer property)": [[177, "mltk.core.TfliteAddLayer.activation"]], "from_flatbuffer() (tfliteaddlayer static method)": [[177, "mltk.core.TfliteAddLayer.from_flatbuffer"]], "get_input_data() (tfliteaddlayer method)": [[177, "mltk.core.TfliteAddLayer.get_input_data"]], "get_input_tensor() (tfliteaddlayer method)": [[177, "mltk.core.TfliteAddLayer.get_input_tensor"]], "get_output_data() (tfliteaddlayer method)": [[177, "mltk.core.TfliteAddLayer.get_output_data"]], "get_output_tensor() (tfliteaddlayer method)": [[177, "mltk.core.TfliteAddLayer.get_output_tensor"]], "index (tfliteaddlayer property)": [[177, "mltk.core.TfliteAddLayer.index"]], "input1_data (tfliteaddlayer property)": [[177, "mltk.core.TfliteAddLayer.input1_data"]], "input1_tensor (tfliteaddlayer property)": [[177, "mltk.core.TfliteAddLayer.input1_tensor"]], "input2_data (tfliteaddlayer property)": [[177, "mltk.core.TfliteAddLayer.input2_data"]], "input2_tensor (tfliteaddlayer property)": [[177, "mltk.core.TfliteAddLayer.input2_tensor"]], "inputs (tfliteaddlayer property)": [[177, "mltk.core.TfliteAddLayer.inputs"]], "metadata (tfliteaddlayer property)": [[177, "mltk.core.TfliteAddLayer.metadata"]], "model (tfliteaddlayer property)": [[177, "mltk.core.TfliteAddLayer.model"]], "n_inputs (tfliteaddlayer property)": [[177, "mltk.core.TfliteAddLayer.n_inputs"]], "n_outputs (tfliteaddlayer property)": [[177, "mltk.core.TfliteAddLayer.n_outputs"]], "name (tfliteaddlayer property)": [[177, "mltk.core.TfliteAddLayer.name"]], "opcode (tfliteaddlayer property)": [[177, "mltk.core.TfliteAddLayer.opcode"]], "opcode_str (tfliteaddlayer property)": [[177, "mltk.core.TfliteAddLayer.opcode_str"]], "options (tfliteaddlayer property)": [[177, "mltk.core.TfliteAddLayer.options"]], "output_data (tfliteaddlayer property)": [[177, "mltk.core.TfliteAddLayer.output_data"]], "output_tensor (tfliteaddlayer property)": [[177, "mltk.core.TfliteAddLayer.output_tensor"]], "outputs (tfliteaddlayer property)": [[177, "mltk.core.TfliteAddLayer.outputs"]], "tfliteconv2dlayer (class in mltk.core)": [[178, "mltk.core.TfliteConv2dLayer"]], "__init__() (tfliteconv2dlayer method)": [[178, "mltk.core.TfliteConv2dLayer.__init__"]], "activation (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.activation"]], "bias_data (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.bias_data"]], "bias_tensor (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.bias_tensor"]], "filters (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.filters"]], "filters_data (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.filters_data"]], "filters_tensor (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.filters_tensor"]], "from_flatbuffer() (tfliteconv2dlayer static method)": [[178, "mltk.core.TfliteConv2dLayer.from_flatbuffer"]], "get_input_data() (tfliteconv2dlayer method)": [[178, "mltk.core.TfliteConv2dLayer.get_input_data"]], "get_input_tensor() (tfliteconv2dlayer method)": [[178, "mltk.core.TfliteConv2dLayer.get_input_tensor"]], "get_output_data() (tfliteconv2dlayer method)": [[178, "mltk.core.TfliteConv2dLayer.get_output_data"]], "get_output_tensor() (tfliteconv2dlayer method)": [[178, "mltk.core.TfliteConv2dLayer.get_output_tensor"]], "index (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.index"]], "input_data (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.input_data"]], "input_tensor (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.input_tensor"]], "inputs (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.inputs"]], "kernel_size (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.kernel_size"]], "metadata (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.metadata"]], "model (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.model"]], "n_inputs (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.n_inputs"]], "n_outputs (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.n_outputs"]], "name (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.name"]], "opcode (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.opcode"]], "opcode_str (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.opcode_str"]], "options (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.options"]], "output_data (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.output_data"]], "output_tensor (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.output_tensor"]], "outputs (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.outputs"]], "padding (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.padding"]], "params (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.params"]], "strides (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.strides"]], "use_bias (tfliteconv2dlayer property)": [[178, "mltk.core.TfliteConv2dLayer.use_bias"]], "tfliteconv2dlayeroptions (class in mltk.core)": [[179, "mltk.core.TfliteConv2DLayerOptions"]], "__init__() (tfliteconv2dlayeroptions method)": [[179, "mltk.core.TfliteConv2DLayerOptions.__init__"]], "activation (tfliteconv2dlayeroptions property)": [[179, "mltk.core.TfliteConv2DLayerOptions.activation"]], "activation_str (tfliteconv2dlayeroptions property)": [[179, "mltk.core.TfliteConv2DLayerOptions.activation_str"]], "options_type (tfliteconv2dlayeroptions property)": [[179, "mltk.core.TfliteConv2DLayerOptions.options_type"]], "options_type_str (tfliteconv2dlayeroptions property)": [[179, "mltk.core.TfliteConv2DLayerOptions.options_type_str"]], "padding (tfliteconv2dlayeroptions property)": [[179, "mltk.core.TfliteConv2DLayerOptions.padding"]], "padding_str (tfliteconv2dlayeroptions property)": [[179, "mltk.core.TfliteConv2DLayerOptions.padding_str"]], "stride_height (tfliteconv2dlayeroptions property)": [[179, "mltk.core.TfliteConv2DLayerOptions.stride_height"]], "stride_width (tfliteconv2dlayeroptions property)": [[179, "mltk.core.TfliteConv2DLayerOptions.stride_width"]], "tfliteconvparams (class in mltk.core)": [[180, "mltk.core.TfliteConvParams"]], "__init__() (tfliteconvparams method)": [[180, "mltk.core.TfliteConvParams.__init__"]], "calculate() (tfliteconvparams static method)": [[180, "mltk.core.TfliteConvParams.calculate"]], "dilation_height_factor (tfliteconvparams attribute)": [[180, "mltk.core.TfliteConvParams.dilation_height_factor"]], "dilation_width_factor (tfliteconvparams attribute)": [[180, "mltk.core.TfliteConvParams.dilation_width_factor"]], "input_offset (tfliteconvparams attribute)": [[180, "mltk.core.TfliteConvParams.input_offset"]], "output_offset (tfliteconvparams attribute)": [[180, "mltk.core.TfliteConvParams.output_offset"]], "padding (tfliteconvparams attribute)": [[180, "mltk.core.TfliteConvParams.padding"]], "per_channel_output_multiplier (tfliteconvparams attribute)": [[180, "mltk.core.TfliteConvParams.per_channel_output_multiplier"]], "per_channel_output_shift (tfliteconvparams attribute)": [[180, "mltk.core.TfliteConvParams.per_channel_output_shift"]], "quantized_activation_max (tfliteconvparams attribute)": [[180, "mltk.core.TfliteConvParams.quantized_activation_max"]], "quantized_activation_min (tfliteconvparams attribute)": [[180, "mltk.core.TfliteConvParams.quantized_activation_min"]], "stride_height (tfliteconvparams attribute)": [[180, "mltk.core.TfliteConvParams.stride_height"]], "stride_width (tfliteconvparams attribute)": [[180, "mltk.core.TfliteConvParams.stride_width"]], "weights_offset (tfliteconvparams attribute)": [[180, "mltk.core.TfliteConvParams.weights_offset"]], "tflitedepthwiseconv2dlayer (class in mltk.core)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer"]], "__init__() (tflitedepthwiseconv2dlayer method)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.__init__"]], "activation (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.activation"]], "bias_data (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.bias_data"]], "bias_tensor (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.bias_tensor"]], "filters_data (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.filters_data"]], "filters_tensor (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.filters_tensor"]], "from_flatbuffer() (tflitedepthwiseconv2dlayer static method)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.from_flatbuffer"]], "get_input_data() (tflitedepthwiseconv2dlayer method)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.get_input_data"]], "get_input_tensor() (tflitedepthwiseconv2dlayer method)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.get_input_tensor"]], "get_output_data() (tflitedepthwiseconv2dlayer method)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.get_output_data"]], "get_output_tensor() (tflitedepthwiseconv2dlayer method)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.get_output_tensor"]], "index (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.index"]], "input_data (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.input_data"]], "input_tensor (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.input_tensor"]], "inputs (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.inputs"]], "kernel_size (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.kernel_size"]], "metadata (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.metadata"]], "model (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.model"]], "multiplier (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.multiplier"]], "n_inputs (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.n_inputs"]], "n_outputs (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.n_outputs"]], "name (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.name"]], "opcode (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.opcode"]], "opcode_str (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.opcode_str"]], "options (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.options"]], "output_data (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.output_data"]], "output_tensor (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.output_tensor"]], "outputs (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.outputs"]], "padding (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.padding"]], "params (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.params"]], "strides (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.strides"]], "use_bias (tflitedepthwiseconv2dlayer property)": [[181, "mltk.core.TfliteDepthwiseConv2dLayer.use_bias"]], "tflitedepthwiseconv2dlayeroptions (class in mltk.core)": [[182, "mltk.core.TfliteDepthwiseConv2DLayerOptions"]], "__init__() (tflitedepthwiseconv2dlayeroptions method)": [[182, "mltk.core.TfliteDepthwiseConv2DLayerOptions.__init__"]], "activation (tflitedepthwiseconv2dlayeroptions property)": [[182, "mltk.core.TfliteDepthwiseConv2DLayerOptions.activation"]], "activation_str (tflitedepthwiseconv2dlayeroptions property)": [[182, "mltk.core.TfliteDepthwiseConv2DLayerOptions.activation_str"]], "multiplier (tflitedepthwiseconv2dlayeroptions property)": [[182, "mltk.core.TfliteDepthwiseConv2DLayerOptions.multiplier"]], "options_type (tflitedepthwiseconv2dlayeroptions property)": [[182, "mltk.core.TfliteDepthwiseConv2DLayerOptions.options_type"]], "options_type_str (tflitedepthwiseconv2dlayeroptions property)": [[182, "mltk.core.TfliteDepthwiseConv2DLayerOptions.options_type_str"]], "padding (tflitedepthwiseconv2dlayeroptions property)": [[182, "mltk.core.TfliteDepthwiseConv2DLayerOptions.padding"]], "padding_str (tflitedepthwiseconv2dlayeroptions property)": [[182, "mltk.core.TfliteDepthwiseConv2DLayerOptions.padding_str"]], "stride_height (tflitedepthwiseconv2dlayeroptions property)": [[182, "mltk.core.TfliteDepthwiseConv2DLayerOptions.stride_height"]], "stride_width (tflitedepthwiseconv2dlayeroptions property)": [[182, "mltk.core.TfliteDepthwiseConv2DLayerOptions.stride_width"]], "tflitedepthwiseconvparams (class in mltk.core)": [[183, "mltk.core.TfliteDepthwiseConvParams"]], "__init__() (tflitedepthwiseconvparams method)": [[183, "mltk.core.TfliteDepthwiseConvParams.__init__"]], "calculate() (tflitedepthwiseconvparams static method)": [[183, "mltk.core.TfliteDepthwiseConvParams.calculate"]], "depth_multiplier (tflitedepthwiseconvparams attribute)": [[183, "mltk.core.TfliteDepthwiseConvParams.depth_multiplier"]], "dilation_height_factor (tflitedepthwiseconvparams attribute)": [[183, "mltk.core.TfliteDepthwiseConvParams.dilation_height_factor"]], "dilation_width_factor (tflitedepthwiseconvparams attribute)": [[183, "mltk.core.TfliteDepthwiseConvParams.dilation_width_factor"]], "input_offset (tflitedepthwiseconvparams attribute)": [[183, "mltk.core.TfliteDepthwiseConvParams.input_offset"]], "output_offset (tflitedepthwiseconvparams attribute)": [[183, "mltk.core.TfliteDepthwiseConvParams.output_offset"]], "padding (tflitedepthwiseconvparams attribute)": [[183, "mltk.core.TfliteDepthwiseConvParams.padding"]], "per_channel_output_multiplier (tflitedepthwiseconvparams attribute)": [[183, "mltk.core.TfliteDepthwiseConvParams.per_channel_output_multiplier"]], "per_channel_output_shift (tflitedepthwiseconvparams attribute)": [[183, "mltk.core.TfliteDepthwiseConvParams.per_channel_output_shift"]], "quantized_activation_max (tflitedepthwiseconvparams attribute)": [[183, "mltk.core.TfliteDepthwiseConvParams.quantized_activation_max"]], "quantized_activation_min (tflitedepthwiseconvparams attribute)": [[183, "mltk.core.TfliteDepthwiseConvParams.quantized_activation_min"]], "stride_height (tflitedepthwiseconvparams attribute)": [[183, "mltk.core.TfliteDepthwiseConvParams.stride_height"]], "stride_width (tflitedepthwiseconvparams attribute)": [[183, "mltk.core.TfliteDepthwiseConvParams.stride_width"]], "weights_offset (tflitedepthwiseconvparams attribute)": [[183, "mltk.core.TfliteDepthwiseConvParams.weights_offset"]], "tflitedequantizelayer (class in mltk.core)": [[184, "mltk.core.TfliteDequantizeLayer"]], "__init__() (tflitedequantizelayer method)": [[184, "mltk.core.TfliteDequantizeLayer.__init__"]], "from_flatbuffer() (tflitedequantizelayer static method)": [[184, "mltk.core.TfliteDequantizeLayer.from_flatbuffer"]], "get_input_data() (tflitedequantizelayer method)": [[184, "mltk.core.TfliteDequantizeLayer.get_input_data"]], "get_input_tensor() (tflitedequantizelayer method)": [[184, "mltk.core.TfliteDequantizeLayer.get_input_tensor"]], "get_output_data() (tflitedequantizelayer method)": [[184, "mltk.core.TfliteDequantizeLayer.get_output_data"]], "get_output_tensor() (tflitedequantizelayer method)": [[184, "mltk.core.TfliteDequantizeLayer.get_output_tensor"]], "index (tflitedequantizelayer property)": [[184, "mltk.core.TfliteDequantizeLayer.index"]], "input_data (tflitedequantizelayer property)": [[184, "mltk.core.TfliteDequantizeLayer.input_data"]], "input_tensor (tflitedequantizelayer property)": [[184, "mltk.core.TfliteDequantizeLayer.input_tensor"]], "inputs (tflitedequantizelayer property)": [[184, "mltk.core.TfliteDequantizeLayer.inputs"]], "metadata (tflitedequantizelayer property)": [[184, "mltk.core.TfliteDequantizeLayer.metadata"]], "model (tflitedequantizelayer property)": [[184, "mltk.core.TfliteDequantizeLayer.model"]], "n_inputs (tflitedequantizelayer property)": [[184, "mltk.core.TfliteDequantizeLayer.n_inputs"]], "n_outputs (tflitedequantizelayer property)": [[184, "mltk.core.TfliteDequantizeLayer.n_outputs"]], "name (tflitedequantizelayer property)": [[184, "mltk.core.TfliteDequantizeLayer.name"]], "opcode (tflitedequantizelayer property)": [[184, "mltk.core.TfliteDequantizeLayer.opcode"]], "opcode_str (tflitedequantizelayer property)": [[184, "mltk.core.TfliteDequantizeLayer.opcode_str"]], "options (tflitedequantizelayer property)": [[184, "mltk.core.TfliteDequantizeLayer.options"]], "output_data (tflitedequantizelayer property)": [[184, "mltk.core.TfliteDequantizeLayer.output_data"]], "output_tensor (tflitedequantizelayer property)": [[184, "mltk.core.TfliteDequantizeLayer.output_tensor"]], "outputs (tflitedequantizelayer property)": [[184, "mltk.core.TfliteDequantizeLayer.outputs"]], "flatbufferdictionary (class in mltk.core.tflite_model_parameters.flatbuffer_dictionary)": [[185, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary"]], "__init__() (flatbufferdictionary method)": [[185, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.__init__"]], "deserialize() (flatbufferdictionary static method)": [[185, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.deserialize"]], "put() (flatbufferdictionary method)": [[185, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.put"]], "serialize() (flatbufferdictionary method)": [[185, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.serialize"]], "summary() (flatbufferdictionary method)": [[185, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.summary"]], "tflitefullyconnectedlayer (class in mltk.core)": [[186, "mltk.core.TfliteFullyConnectedLayer"]], "__init__() (tflitefullyconnectedlayer method)": [[186, "mltk.core.TfliteFullyConnectedLayer.__init__"]], "accumulator_depth (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.accumulator_depth"]], "activation (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.activation"]], "bias_data (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.bias_data"]], "bias_tensor (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.bias_tensor"]], "from_flatbuffer() (tflitefullyconnectedlayer static method)": [[186, "mltk.core.TfliteFullyConnectedLayer.from_flatbuffer"]], "get_input_data() (tflitefullyconnectedlayer method)": [[186, "mltk.core.TfliteFullyConnectedLayer.get_input_data"]], "get_input_tensor() (tflitefullyconnectedlayer method)": [[186, "mltk.core.TfliteFullyConnectedLayer.get_input_tensor"]], "get_output_data() (tflitefullyconnectedlayer method)": [[186, "mltk.core.TfliteFullyConnectedLayer.get_output_data"]], "get_output_tensor() (tflitefullyconnectedlayer method)": [[186, "mltk.core.TfliteFullyConnectedLayer.get_output_tensor"]], "index (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.index"]], "input_data (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.input_data"]], "input_tensor (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.input_tensor"]], "inputs (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.inputs"]], "metadata (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.metadata"]], "model (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.model"]], "n_inputs (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.n_inputs"]], "n_outputs (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.n_outputs"]], "name (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.name"]], "opcode (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.opcode"]], "opcode_str (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.opcode_str"]], "options (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.options"]], "output_data (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.output_data"]], "output_tensor (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.output_tensor"]], "outputs (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.outputs"]], "params (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.params"]], "units (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.units"]], "use_bias (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.use_bias"]], "weights_data (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.weights_data"]], "weights_tensor (tflitefullyconnectedlayer property)": [[186, "mltk.core.TfliteFullyConnectedLayer.weights_tensor"]], "tflitefullyconnectedlayeroptions (class in mltk.core)": [[187, "mltk.core.TfliteFullyConnectedLayerOptions"]], "__init__() (tflitefullyconnectedlayeroptions method)": [[187, "mltk.core.TfliteFullyConnectedLayerOptions.__init__"]], "activation (tflitefullyconnectedlayeroptions property)": [[187, "mltk.core.TfliteFullyConnectedLayerOptions.activation"]], "activation_str (tflitefullyconnectedlayeroptions property)": [[187, "mltk.core.TfliteFullyConnectedLayerOptions.activation_str"]], "options_type (tflitefullyconnectedlayeroptions property)": [[187, "mltk.core.TfliteFullyConnectedLayerOptions.options_type"]], "options_type_str (tflitefullyconnectedlayeroptions property)": [[187, "mltk.core.TfliteFullyConnectedLayerOptions.options_type_str"]], "tflitefullyconnectedparams (class in mltk.core)": [[188, "mltk.core.TfliteFullyConnectedParams"]], "__init__() (tflitefullyconnectedparams method)": [[188, "mltk.core.TfliteFullyConnectedParams.__init__"]], "calculate() (tflitefullyconnectedparams static method)": [[188, "mltk.core.TfliteFullyConnectedParams.calculate"]], "input_offset (tflitefullyconnectedparams attribute)": [[188, "mltk.core.TfliteFullyConnectedParams.input_offset"]], "output_multiplier (tflitefullyconnectedparams attribute)": [[188, "mltk.core.TfliteFullyConnectedParams.output_multiplier"]], "output_offset (tflitefullyconnectedparams attribute)": [[188, "mltk.core.TfliteFullyConnectedParams.output_offset"]], "output_shift (tflitefullyconnectedparams attribute)": [[188, "mltk.core.TfliteFullyConnectedParams.output_shift"]], "quantized_activation_max (tflitefullyconnectedparams attribute)": [[188, "mltk.core.TfliteFullyConnectedParams.quantized_activation_max"]], "quantized_activation_min (tflitefullyconnectedparams attribute)": [[188, "mltk.core.TfliteFullyConnectedParams.quantized_activation_min"]], "weights_offset (tflitefullyconnectedparams attribute)": [[188, "mltk.core.TfliteFullyConnectedParams.weights_offset"]], "tflitelayer (class in mltk.core)": [[190, "mltk.core.TfliteLayer"]], "__init__() (tflitelayer method)": [[190, "mltk.core.TfliteLayer.__init__"]], "from_flatbuffer() (tflitelayer static method)": [[190, "mltk.core.TfliteLayer.from_flatbuffer"]], "get_input_data() (tflitelayer method)": [[190, "mltk.core.TfliteLayer.get_input_data"]], "get_input_tensor() (tflitelayer method)": [[190, "mltk.core.TfliteLayer.get_input_tensor"]], "get_output_data() (tflitelayer method)": [[190, "mltk.core.TfliteLayer.get_output_data"]], "get_output_tensor() (tflitelayer method)": [[190, "mltk.core.TfliteLayer.get_output_tensor"]], "index (tflitelayer property)": [[190, "mltk.core.TfliteLayer.index"]], "inputs (tflitelayer property)": [[190, "mltk.core.TfliteLayer.inputs"]], "metadata (tflitelayer property)": [[190, "mltk.core.TfliteLayer.metadata"]], "model (tflitelayer property)": [[190, "mltk.core.TfliteLayer.model"]], "n_inputs (tflitelayer property)": [[190, "mltk.core.TfliteLayer.n_inputs"]], "n_outputs (tflitelayer property)": [[190, "mltk.core.TfliteLayer.n_outputs"]], "name (tflitelayer property)": [[190, "mltk.core.TfliteLayer.name"]], "opcode (tflitelayer property)": [[190, "mltk.core.TfliteLayer.opcode"]], "opcode_str (tflitelayer property)": [[190, "mltk.core.TfliteLayer.opcode_str"]], "options (tflitelayer property)": [[190, "mltk.core.TfliteLayer.options"]], "outputs (tflitelayer property)": [[190, "mltk.core.TfliteLayer.outputs"]], "tflitemodel (class in mltk.core)": [[191, "mltk.core.TfliteModel"]], "__init__() (tflitemodel method)": [[191, "mltk.core.TfliteModel.__init__"]], "add_metadata() (tflitemodel method)": [[191, "mltk.core.TfliteModel.add_metadata"]], "dequantize_output_to_float32() (tflitemodel method)": [[191, "mltk.core.TfliteModel.dequantize_output_to_float32"]], "description (tflitemodel property)": [[191, "mltk.core.TfliteModel.description"]], "filename (tflitemodel property)": [[191, "mltk.core.TfliteModel.filename"]], "flatbuffer_data (tflitemodel property)": [[191, "mltk.core.TfliteModel.flatbuffer_data"]], "flatbuffer_model (tflitemodel property)": [[191, "mltk.core.TfliteModel.flatbuffer_model"]], "flatbuffer_size (tflitemodel property)": [[191, "mltk.core.TfliteModel.flatbuffer_size"]], "flatbuffer_subgraph (tflitemodel property)": [[191, "mltk.core.TfliteModel.flatbuffer_subgraph"]], "get_all_metadata() (tflitemodel method)": [[191, "mltk.core.TfliteModel.get_all_metadata"]], "get_flatbuffer_subgraph() (tflitemodel method)": [[191, "mltk.core.TfliteModel.get_flatbuffer_subgraph"]], "get_input_data() (tflitemodel method)": [[191, "mltk.core.TfliteModel.get_input_data"]], "get_input_tensor() (tflitemodel method)": [[191, "mltk.core.TfliteModel.get_input_tensor"]], "get_metadata() (tflitemodel method)": [[191, "mltk.core.TfliteModel.get_metadata"]], "get_output_data() (tflitemodel method)": [[191, "mltk.core.TfliteModel.get_output_data"]], "get_output_tensor() (tflitemodel method)": [[191, "mltk.core.TfliteModel.get_output_tensor"]], "get_tensor() (tflitemodel method)": [[191, "mltk.core.TfliteModel.get_tensor"]], "get_tensor_data() (tflitemodel method)": [[191, "mltk.core.TfliteModel.get_tensor_data"]], "inputs (tflitemodel property)": [[191, "mltk.core.TfliteModel.inputs"]], "layers (tflitemodel property)": [[191, "mltk.core.TfliteModel.layers"]], "load_flatbuffer_file() (tflitemodel static method)": [[191, "mltk.core.TfliteModel.load_flatbuffer_file"]], "n_inputs (tflitemodel property)": [[191, "mltk.core.TfliteModel.n_inputs"]], "n_outputs (tflitemodel property)": [[191, "mltk.core.TfliteModel.n_outputs"]], "n_subgraphs (tflitemodel property)": [[191, "mltk.core.TfliteModel.n_subgraphs"]], "name (tflitemodel property)": [[191, "mltk.core.TfliteModel.name"]], "outputs (tflitemodel property)": [[191, "mltk.core.TfliteModel.outputs"]], "path (tflitemodel property)": [[191, "mltk.core.TfliteModel.path"]], "predict() (tflitemodel method)": [[191, "mltk.core.TfliteModel.predict"]], "quantize_to_input_dtype() (tflitemodel method)": [[191, "mltk.core.TfliteModel.quantize_to_input_dtype"]], "regenerate_flatbuffer() (tflitemodel method)": [[191, "mltk.core.TfliteModel.regenerate_flatbuffer"]], "remove_metadata() (tflitemodel method)": [[191, "mltk.core.TfliteModel.remove_metadata"]], "save() (tflitemodel method)": [[191, "mltk.core.TfliteModel.save"]], "selected_model_subgraph (tflitemodel property)": [[191, "mltk.core.TfliteModel.selected_model_subgraph"]], "summary() (tflitemodel method)": [[191, "mltk.core.TfliteModel.summary"]], "tensors (tflitemodel property)": [[191, "mltk.core.TfliteModel.tensors"]], "same (tflitepadding attribute)": [[192, "mltk.core.TflitePadding.SAME"]], "tflitepadding (class in mltk.core)": [[192, "mltk.core.TflitePadding"]], "valid (tflitepadding attribute)": [[192, "mltk.core.TflitePadding.VALID"]], "__init__() (tflitepadding method)": [[192, "mltk.core.TflitePadding.__init__"]], "__new__() (tflitepadding method)": [[192, "mltk.core.TflitePadding.__new__"]], "as_integer_ratio() (tflitepadding method)": [[192, "mltk.core.TflitePadding.as_integer_ratio"]], "bit_count() (tflitepadding method)": [[192, "mltk.core.TflitePadding.bit_count"]], "bit_length() (tflitepadding method)": [[192, "mltk.core.TflitePadding.bit_length"]], "conjugate() (tflitepadding method)": [[192, "mltk.core.TflitePadding.conjugate"]], "denominator (tflitepadding attribute)": [[192, "mltk.core.TflitePadding.denominator"]], "from_bytes() (tflitepadding method)": [[192, "mltk.core.TflitePadding.from_bytes"]], "height (tflitepadding property)": [[192, "mltk.core.TflitePadding.height"]], "imag (tflitepadding attribute)": [[192, "mltk.core.TflitePadding.imag"]], "is_integer() (tflitepadding method)": [[192, "mltk.core.TflitePadding.is_integer"]], "numerator (tflitepadding attribute)": [[192, "mltk.core.TflitePadding.numerator"]], "real (tflitepadding attribute)": [[192, "mltk.core.TflitePadding.real"]], "to_bytes() (tflitepadding method)": [[192, "mltk.core.TflitePadding.to_bytes"]], "to_string() (tflitepadding method)": [[192, "mltk.core.TflitePadding.to_string"]], "width (tflitepadding property)": [[192, "mltk.core.TflitePadding.width"]], "tflitemodelparameters (class in mltk.core)": [[193, "mltk.core.TfliteModelParameters"]], "__init__() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.__init__"]], "__new__() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.__new__"]], "add_to_tflite_file() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.add_to_tflite_file"]], "add_to_tflite_flatbuffer() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.add_to_tflite_flatbuffer"]], "add_to_tflite_model() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.add_to_tflite_model"]], "clear() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.clear"]], "copy() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.copy"]], "deserialize() (tflitemodelparameters static method)": [[193, "mltk.core.TfliteModelParameters.deserialize"]], "fromkeys() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.fromkeys"]], "get() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.get"]], "items() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.items"]], "keys() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.keys"]], "load_from_tflite_file() (tflitemodelparameters static method)": [[193, "mltk.core.TfliteModelParameters.load_from_tflite_file"]], "load_from_tflite_flatbuffer() (tflitemodelparameters static method)": [[193, "mltk.core.TfliteModelParameters.load_from_tflite_flatbuffer"]], "load_from_tflite_model() (tflitemodelparameters static method)": [[193, "mltk.core.TfliteModelParameters.load_from_tflite_model"]], "pop() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.pop"]], "popitem() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.popitem"]], "put() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.put"]], "serialize() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.serialize"]], "setdefault() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.setdefault"]], "summary() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.summary"]], "update() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.update"]], "values() (tflitemodelparameters method)": [[193, "mltk.core.TfliteModelParameters.values"]], "tflitepooling2dlayer (class in mltk.core)": [[194, "mltk.core.TflitePooling2dLayer"]], "__init__() (tflitepooling2dlayer method)": [[194, "mltk.core.TflitePooling2dLayer.__init__"]], "activation (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.activation"]], "from_flatbuffer() (tflitepooling2dlayer static method)": [[194, "mltk.core.TflitePooling2dLayer.from_flatbuffer"]], "get_input_data() (tflitepooling2dlayer method)": [[194, "mltk.core.TflitePooling2dLayer.get_input_data"]], "get_input_tensor() (tflitepooling2dlayer method)": [[194, "mltk.core.TflitePooling2dLayer.get_input_tensor"]], "get_output_data() (tflitepooling2dlayer method)": [[194, "mltk.core.TflitePooling2dLayer.get_output_data"]], "get_output_tensor() (tflitepooling2dlayer method)": [[194, "mltk.core.TflitePooling2dLayer.get_output_tensor"]], "index (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.index"]], "input_data (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.input_data"]], "input_tensor (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.input_tensor"]], "inputs (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.inputs"]], "metadata (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.metadata"]], "model (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.model"]], "n_inputs (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.n_inputs"]], "n_outputs (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.n_outputs"]], "name (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.name"]], "opcode (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.opcode"]], "opcode_str (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.opcode_str"]], "options (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.options"]], "output_data (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.output_data"]], "output_tensor (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.output_tensor"]], "outputs (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.outputs"]], "padding (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.padding"]], "params (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.params"]], "pool_size (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.pool_size"]], "strides (tflitepooling2dlayer property)": [[194, "mltk.core.TflitePooling2dLayer.strides"]], "tflitepool2dlayeroptions (class in mltk.core)": [[195, "mltk.core.TflitePool2DLayerOptions"]], "__init__() (tflitepool2dlayeroptions method)": [[195, "mltk.core.TflitePool2DLayerOptions.__init__"]], "activation (tflitepool2dlayeroptions property)": [[195, "mltk.core.TflitePool2DLayerOptions.activation"]], "activation_str (tflitepool2dlayeroptions property)": [[195, "mltk.core.TflitePool2DLayerOptions.activation_str"]], "filter_height (tflitepool2dlayeroptions property)": [[195, "mltk.core.TflitePool2DLayerOptions.filter_height"]], "filter_width (tflitepool2dlayeroptions property)": [[195, "mltk.core.TflitePool2DLayerOptions.filter_width"]], "options_type (tflitepool2dlayeroptions property)": [[195, "mltk.core.TflitePool2DLayerOptions.options_type"]], "options_type_str (tflitepool2dlayeroptions property)": [[195, "mltk.core.TflitePool2DLayerOptions.options_type_str"]], "padding (tflitepool2dlayeroptions property)": [[195, "mltk.core.TflitePool2DLayerOptions.padding"]], "padding_str (tflitepool2dlayeroptions property)": [[195, "mltk.core.TflitePool2DLayerOptions.padding_str"]], "stride_height (tflitepool2dlayeroptions property)": [[195, "mltk.core.TflitePool2DLayerOptions.stride_height"]], "stride_width (tflitepool2dlayeroptions property)": [[195, "mltk.core.TflitePool2DLayerOptions.stride_width"]], "tflitepoolparams (class in mltk.core)": [[196, "mltk.core.TflitePoolParams"]], "__init__() (tflitepoolparams method)": [[196, "mltk.core.TflitePoolParams.__init__"]], "calculate() (tflitepoolparams static method)": [[196, "mltk.core.TflitePoolParams.calculate"]], "padding (tflitepoolparams attribute)": [[196, "mltk.core.TflitePoolParams.padding"]], "quantized_activation_max (tflitepoolparams attribute)": [[196, "mltk.core.TflitePoolParams.quantized_activation_max"]], "quantized_activation_min (tflitepoolparams attribute)": [[196, "mltk.core.TflitePoolParams.quantized_activation_min"]], "stride_height (tflitepoolparams attribute)": [[196, "mltk.core.TflitePoolParams.stride_height"]], "stride_width (tflitepoolparams attribute)": [[196, "mltk.core.TflitePoolParams.stride_width"]], "tflitequantization (class in mltk.core)": [[197, "mltk.core.TfliteQuantization"]], "__init__() (tflitequantization method)": [[197, "mltk.core.TfliteQuantization.__init__"]], "n_channels (tflitequantization property)": [[197, "mltk.core.TfliteQuantization.n_channels"]], "quantization_dimension (tflitequantization property)": [[197, "mltk.core.TfliteQuantization.quantization_dimension"]], "scale (tflitequantization property)": [[197, "mltk.core.TfliteQuantization.scale"]], "zeropoint (tflitequantization property)": [[197, "mltk.core.TfliteQuantization.zeropoint"]], "tflitequantizelayer (class in mltk.core)": [[198, "mltk.core.TfliteQuantizeLayer"]], "__init__() (tflitequantizelayer method)": [[198, "mltk.core.TfliteQuantizeLayer.__init__"]], "from_flatbuffer() (tflitequantizelayer static method)": [[198, "mltk.core.TfliteQuantizeLayer.from_flatbuffer"]], "get_input_data() (tflitequantizelayer method)": [[198, "mltk.core.TfliteQuantizeLayer.get_input_data"]], "get_input_tensor() (tflitequantizelayer method)": [[198, "mltk.core.TfliteQuantizeLayer.get_input_tensor"]], "get_output_data() (tflitequantizelayer method)": [[198, "mltk.core.TfliteQuantizeLayer.get_output_data"]], "get_output_tensor() (tflitequantizelayer method)": [[198, "mltk.core.TfliteQuantizeLayer.get_output_tensor"]], "index (tflitequantizelayer property)": [[198, "mltk.core.TfliteQuantizeLayer.index"]], "input_data (tflitequantizelayer property)": [[198, "mltk.core.TfliteQuantizeLayer.input_data"]], "input_tensor (tflitequantizelayer property)": [[198, "mltk.core.TfliteQuantizeLayer.input_tensor"]], "inputs (tflitequantizelayer property)": [[198, "mltk.core.TfliteQuantizeLayer.inputs"]], "metadata (tflitequantizelayer property)": [[198, "mltk.core.TfliteQuantizeLayer.metadata"]], "model (tflitequantizelayer property)": [[198, "mltk.core.TfliteQuantizeLayer.model"]], "n_inputs (tflitequantizelayer property)": [[198, "mltk.core.TfliteQuantizeLayer.n_inputs"]], "n_outputs (tflitequantizelayer property)": [[198, "mltk.core.TfliteQuantizeLayer.n_outputs"]], "name (tflitequantizelayer property)": [[198, "mltk.core.TfliteQuantizeLayer.name"]], "opcode (tflitequantizelayer property)": [[198, "mltk.core.TfliteQuantizeLayer.opcode"]], "opcode_str (tflitequantizelayer property)": [[198, "mltk.core.TfliteQuantizeLayer.opcode_str"]], "options (tflitequantizelayer property)": [[198, "mltk.core.TfliteQuantizeLayer.options"]], "output_data (tflitequantizelayer property)": [[198, "mltk.core.TfliteQuantizeLayer.output_data"]], "output_tensor (tflitequantizelayer property)": [[198, "mltk.core.TfliteQuantizeLayer.output_tensor"]], "outputs (tflitequantizelayer property)": [[198, "mltk.core.TfliteQuantizeLayer.outputs"]], "tflitereshapelayer (class in mltk.core)": [[199, "mltk.core.TfliteReshapeLayer"]], "__init__() (tflitereshapelayer method)": [[199, "mltk.core.TfliteReshapeLayer.__init__"]], "from_flatbuffer() (tflitereshapelayer static method)": [[199, "mltk.core.TfliteReshapeLayer.from_flatbuffer"]], "get_input_data() (tflitereshapelayer method)": [[199, "mltk.core.TfliteReshapeLayer.get_input_data"]], "get_input_tensor() (tflitereshapelayer method)": [[199, "mltk.core.TfliteReshapeLayer.get_input_tensor"]], "get_output_data() (tflitereshapelayer method)": [[199, "mltk.core.TfliteReshapeLayer.get_output_data"]], "get_output_tensor() (tflitereshapelayer method)": [[199, "mltk.core.TfliteReshapeLayer.get_output_tensor"]], "index (tflitereshapelayer property)": [[199, "mltk.core.TfliteReshapeLayer.index"]], "input_data (tflitereshapelayer property)": [[199, "mltk.core.TfliteReshapeLayer.input_data"]], "input_tensor (tflitereshapelayer property)": [[199, "mltk.core.TfliteReshapeLayer.input_tensor"]], "inputs (tflitereshapelayer property)": [[199, "mltk.core.TfliteReshapeLayer.inputs"]], "metadata (tflitereshapelayer property)": [[199, "mltk.core.TfliteReshapeLayer.metadata"]], "model (tflitereshapelayer property)": [[199, "mltk.core.TfliteReshapeLayer.model"]], "n_input_elements (tflitereshapelayer property)": [[199, "mltk.core.TfliteReshapeLayer.n_input_elements"]], "n_inputs (tflitereshapelayer property)": [[199, "mltk.core.TfliteReshapeLayer.n_inputs"]], "n_outputs (tflitereshapelayer property)": [[199, "mltk.core.TfliteReshapeLayer.n_outputs"]], "name (tflitereshapelayer property)": [[199, "mltk.core.TfliteReshapeLayer.name"]], "opcode (tflitereshapelayer property)": [[199, "mltk.core.TfliteReshapeLayer.opcode"]], "opcode_str (tflitereshapelayer property)": [[199, "mltk.core.TfliteReshapeLayer.opcode_str"]], "options (tflitereshapelayer property)": [[199, "mltk.core.TfliteReshapeLayer.options"]], "output_data (tflitereshapelayer property)": [[199, "mltk.core.TfliteReshapeLayer.output_data"]], "output_tensor (tflitereshapelayer property)": [[199, "mltk.core.TfliteReshapeLayer.output_tensor"]], "outputs (tflitereshapelayer property)": [[199, "mltk.core.TfliteReshapeLayer.outputs"]], "requires_copy (tflitereshapelayer property)": [[199, "mltk.core.TfliteReshapeLayer.requires_copy"]], "tfliteshape (class in mltk.core)": [[200, "mltk.core.TfliteShape"]], "__new__() (tfliteshape static method)": [[200, "mltk.core.TfliteShape.__new__"]], "count() (tfliteshape method)": [[200, "mltk.core.TfliteShape.count"]], "flat_size (tfliteshape property)": [[200, "mltk.core.TfliteShape.flat_size"]], "index() (tfliteshape method)": [[200, "mltk.core.TfliteShape.index"]], "tflitetensor (class in mltk.core)": [[201, "mltk.core.TfliteTensor"]], "__init__() (tflitetensor method)": [[201, "mltk.core.TfliteTensor.__init__"]], "data (tflitetensor property)": [[201, "mltk.core.TfliteTensor.data"]], "dtype (tflitetensor property)": [[201, "mltk.core.TfliteTensor.dtype"]], "dtype_str (tflitetensor property)": [[201, "mltk.core.TfliteTensor.dtype_str"]], "index (tflitetensor property)": [[201, "mltk.core.TfliteTensor.index"]], "is_variable (tflitetensor property)": [[201, "mltk.core.TfliteTensor.is_variable"]], "model (tflitetensor property)": [[201, "mltk.core.TfliteTensor.model"]], "quantization (tflitetensor property)": [[201, "mltk.core.TfliteTensor.quantization"]], "shape (tflitetensor property)": [[201, "mltk.core.TfliteTensor.shape"]], "shape_dtype_str() (tflitetensor method)": [[201, "mltk.core.TfliteTensor.shape_dtype_str"]], "size_bytes (tflitetensor property)": [[201, "mltk.core.TfliteTensor.size_bytes"]], "tflitetransposeconvlayer (class in mltk.core)": [[202, "mltk.core.TfliteTransposeConvLayer"]], "__init__() (tflitetransposeconvlayer method)": [[202, "mltk.core.TfliteTransposeConvLayer.__init__"]], "bias_data (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.bias_data"]], "bias_tensor (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.bias_tensor"]], "filters (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.filters"]], "filters_data (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.filters_data"]], "filters_tensor (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.filters_tensor"]], "from_flatbuffer() (tflitetransposeconvlayer static method)": [[202, "mltk.core.TfliteTransposeConvLayer.from_flatbuffer"]], "get_input_data() (tflitetransposeconvlayer method)": [[202, "mltk.core.TfliteTransposeConvLayer.get_input_data"]], "get_input_tensor() (tflitetransposeconvlayer method)": [[202, "mltk.core.TfliteTransposeConvLayer.get_input_tensor"]], "get_output_data() (tflitetransposeconvlayer method)": [[202, "mltk.core.TfliteTransposeConvLayer.get_output_data"]], "get_output_tensor() (tflitetransposeconvlayer method)": [[202, "mltk.core.TfliteTransposeConvLayer.get_output_tensor"]], "index (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.index"]], "input_data (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.input_data"]], "input_tensor (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.input_tensor"]], "inputs (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.inputs"]], "kernel_size (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.kernel_size"]], "metadata (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.metadata"]], "model (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.model"]], "n_inputs (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.n_inputs"]], "n_outputs (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.n_outputs"]], "name (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.name"]], "opcode (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.opcode"]], "opcode_str (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.opcode_str"]], "options (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.options"]], "output_data (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.output_data"]], "output_tensor (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.output_tensor"]], "outputs (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.outputs"]], "padding (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.padding"]], "params (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.params"]], "strides (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.strides"]], "use_bias (tflitetransposeconvlayer property)": [[202, "mltk.core.TfliteTransposeConvLayer.use_bias"]], "tflitetransposeconvlayeroptions (class in mltk.core)": [[203, "mltk.core.TfliteTransposeConvLayerOptions"]], "__init__() (tflitetransposeconvlayeroptions method)": [[203, "mltk.core.TfliteTransposeConvLayerOptions.__init__"]], "options_type (tflitetransposeconvlayeroptions property)": [[203, "mltk.core.TfliteTransposeConvLayerOptions.options_type"]], "options_type_str (tflitetransposeconvlayeroptions property)": [[203, "mltk.core.TfliteTransposeConvLayerOptions.options_type_str"]], "padding (tflitetransposeconvlayeroptions property)": [[203, "mltk.core.TfliteTransposeConvLayerOptions.padding"]], "padding_str (tflitetransposeconvlayeroptions property)": [[203, "mltk.core.TfliteTransposeConvLayerOptions.padding_str"]], "stride_height (tflitetransposeconvlayeroptions property)": [[203, "mltk.core.TfliteTransposeConvLayerOptions.stride_height"]], "stride_width (tflitetransposeconvlayeroptions property)": [[203, "mltk.core.TfliteTransposeConvLayerOptions.stride_width"]], "tflitetransposeconvparams (class in mltk.core)": [[204, "mltk.core.TfliteTransposeConvParams"]], "__init__() (tflitetransposeconvparams method)": [[204, "mltk.core.TfliteTransposeConvParams.__init__"]], "calculate() (tflitetransposeconvparams static method)": [[204, "mltk.core.TfliteTransposeConvParams.calculate"]], "input_offset (tflitetransposeconvparams attribute)": [[204, "mltk.core.TfliteTransposeConvParams.input_offset"]], "output_offset (tflitetransposeconvparams attribute)": [[204, "mltk.core.TfliteTransposeConvParams.output_offset"]], "padding (tflitetransposeconvparams attribute)": [[204, "mltk.core.TfliteTransposeConvParams.padding"]], "per_channel_output_multiplier (tflitetransposeconvparams attribute)": [[204, "mltk.core.TfliteTransposeConvParams.per_channel_output_multiplier"]], "per_channel_output_shift (tflitetransposeconvparams attribute)": [[204, "mltk.core.TfliteTransposeConvParams.per_channel_output_shift"]], "quantized_activation_max (tflitetransposeconvparams attribute)": [[204, "mltk.core.TfliteTransposeConvParams.quantized_activation_max"]], "quantized_activation_min (tflitetransposeconvparams attribute)": [[204, "mltk.core.TfliteTransposeConvParams.quantized_activation_min"]], "stride_height (tflitetransposeconvparams attribute)": [[204, "mltk.core.TfliteTransposeConvParams.stride_height"]], "stride_width (tflitetransposeconvparams attribute)": [[204, "mltk.core.TfliteTransposeConvParams.stride_width"]], "weights_offset (tflitetransposeconvparams attribute)": [[204, "mltk.core.TfliteTransposeConvParams.weights_offset"]], "tfliteunidirectionallstmlayer (class in mltk.core)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer"]], "__init__() (tfliteunidirectionallstmlayer method)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.__init__"]], "activation (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.activation"]], "cell_clip (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.cell_clip"]], "cell_gate_bias_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.cell_gate_bias_tensor"]], "cell_layer_norm_coeff_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.cell_layer_norm_coeff_tensor"]], "cell_state_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.cell_state_tensor"]], "cell_to_forget_weights_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.cell_to_forget_weights_tensor"]], "cell_to_input_weights_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.cell_to_input_weights_tensor"]], "cell_to_output_weights_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.cell_to_output_weights_tensor"]], "forget_gate_bias_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.forget_gate_bias_tensor"]], "forget_layer_norm_coeff_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.forget_layer_norm_coeff_tensor"]], "from_flatbuffer() (tfliteunidirectionallstmlayer static method)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.from_flatbuffer"]], "get_input_data() (tfliteunidirectionallstmlayer method)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.get_input_data"]], "get_input_tensor() (tfliteunidirectionallstmlayer method)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.get_input_tensor"]], "get_output_data() (tfliteunidirectionallstmlayer method)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.get_output_data"]], "get_output_tensor() (tfliteunidirectionallstmlayer method)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.get_output_tensor"]], "index (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.index"]], "input_data (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.input_data"]], "input_gate_bias_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.input_gate_bias_tensor"]], "input_layer_norm_coeff_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.input_layer_norm_coeff_tensor"]], "input_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.input_tensor"]], "input_to_cell_weights_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.input_to_cell_weights_tensor"]], "input_to_forget_weights_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.input_to_forget_weights_tensor"]], "input_to_input_weights_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.input_to_input_weights_tensor"]], "input_to_output_weights_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.input_to_output_weights_tensor"]], "inputs (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.inputs"]], "is_time_major (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.is_time_major"]], "metadata (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.metadata"]], "model (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.model"]], "n_cells (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.n_cells"]], "n_inputs (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.n_inputs"]], "n_outputs (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.n_outputs"]], "name (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.name"]], "opcode (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.opcode"]], "opcode_str (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.opcode_str"]], "options (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.options"]], "output_data (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.output_data"]], "output_gate_bias_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.output_gate_bias_tensor"]], "output_layer_norm_coeff_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.output_layer_norm_coeff_tensor"]], "output_state_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.output_state_tensor"]], "output_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.output_tensor"]], "outputs (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.outputs"]], "proj_clip (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.proj_clip"]], "projection_bias_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.projection_bias_tensor"]], "projection_weights_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.projection_weights_tensor"]], "recurrent_to_cell_weights_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.recurrent_to_cell_weights_tensor"]], "recurrent_to_forget_weights_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.recurrent_to_forget_weights_tensor"]], "recurrent_to_input_weights_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.recurrent_to_input_weights_tensor"]], "recurrent_to_output_weights_tensor (tfliteunidirectionallstmlayer property)": [[205, "mltk.core.TfliteUnidirectionalLstmLayer.recurrent_to_output_weights_tensor"]], "tfliteunidirectionallstmlayeroptions (class in mltk.core)": [[206, "mltk.core.TfliteUnidirectionalLstmLayerOptions"]], "__init__() (tfliteunidirectionallstmlayeroptions method)": [[206, "mltk.core.TfliteUnidirectionalLstmLayerOptions.__init__"]], "activation (tfliteunidirectionallstmlayeroptions property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayerOptions.activation"]], "activation_str (tfliteunidirectionallstmlayeroptions property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayerOptions.activation_str"]], "options_type (tfliteunidirectionallstmlayeroptions property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayerOptions.options_type"]], "options_type_str (tfliteunidirectionallstmlayeroptions property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayerOptions.options_type_str"]], "extract_archive() (in module mltk.utils.archive)": [[207, "mltk.utils.archive.extract_archive"]], "gzip_directory_files() (in module mltk.utils.archive)": [[207, "mltk.utils.archive.gzip_directory_files"]], "gzip_file() (in module mltk.utils.archive)": [[207, "mltk.utils.archive.gzip_file"]], "mltk.utils.archive": [[207, "module-mltk.utils.archive"]], "download_url() (in module mltk.utils.archive_downloader)": [[208, "mltk.utils.archive_downloader.download_url"]], "download_verify_extract() (in module mltk.utils.archive_downloader)": [[208, "mltk.utils.archive_downloader.download_verify_extract"]], "mltk.utils.archive_downloader": [[208, "module-mltk.utils.archive_downloader"]], "verify_extract() (in module mltk.utils.archive_downloader)": [[208, "mltk.utils.archive_downloader.verify_extract"]], "verify_file_hash() (in module mltk.utils.archive_downloader)": [[208, "mltk.utils.archive_downloader.verify_file_hash"]], "verify_sha1() (in module mltk.utils.archive_downloader)": [[208, "mltk.utils.archive_downloader.verify_sha1"]], "verify_sha256() (in module mltk.utils.archive_downloader)": [[208, "mltk.utils.archive_downloader.verify_sha256"]], "augmentation (class in mltk.utils.audio_dataset_generator)": [[209, "mltk.utils.audio_dataset_generator.Augmentation"]], "count() (augmentation method)": [[209, "mltk.utils.audio_dataset_generator.Augmentation.count"]], "index() (augmentation method)": [[209, "mltk.utils.audio_dataset_generator.Augmentation.index"]], "pitch (augmentation attribute)": [[209, "mltk.utils.audio_dataset_generator.Augmentation.pitch"]], "rate (augmentation attribute)": [[209, "mltk.utils.audio_dataset_generator.Augmentation.rate"]], "generationconfig (class in mltk.utils.audio_dataset_generator)": [[210, "mltk.utils.audio_dataset_generator.GenerationConfig"]], "__init__() (generationconfig method)": [[210, "mltk.utils.audio_dataset_generator.GenerationConfig.__init__"]], "copy() (generationconfig method)": [[210, "mltk.utils.audio_dataset_generator.GenerationConfig.copy"]], "keyword (generationconfig attribute)": [[210, "mltk.utils.audio_dataset_generator.GenerationConfig.keyword"]], "keyword_group (generationconfig attribute)": [[210, "mltk.utils.audio_dataset_generator.GenerationConfig.keyword_group"]], "pitch (generationconfig attribute)": [[210, "mltk.utils.audio_dataset_generator.GenerationConfig.pitch"]], "rate (generationconfig attribute)": [[210, "mltk.utils.audio_dataset_generator.GenerationConfig.rate"]], "voice (generationconfig attribute)": [[210, "mltk.utils.audio_dataset_generator.GenerationConfig.voice"]], "audiodatasetgenerator (class in mltk.utils.audio_dataset_generator)": [[211, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator"]], "__init__() (audiodatasetgenerator method)": [[211, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.__init__"]], "count_characters() (audiodatasetgenerator method)": [[211, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.count_characters"]], "generate() (audiodatasetgenerator method)": [[211, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.generate"]], "get_summary() (audiodatasetgenerator method)": [[211, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.get_summary"]], "is_backend_loaded() (audiodatasetgenerator method)": [[211, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.is_backend_loaded"]], "is_running (audiodatasetgenerator property)": [[211, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.is_running"]], "join() (audiodatasetgenerator method)": [[211, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.join"]], "list_configurations() (audiodatasetgenerator method)": [[211, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.list_configurations"]], "list_languages() (audiodatasetgenerator method)": [[211, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.list_languages"]], "list_supported_backends() (audiodatasetgenerator static method)": [[211, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.list_supported_backends"]], "list_voices() (audiodatasetgenerator method)": [[211, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.list_voices"]], "load_backend() (audiodatasetgenerator method)": [[211, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.load_backend"]], "out_dir (audiodatasetgenerator property)": [[211, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.out_dir"]], "shutdown() (audiodatasetgenerator method)": [[211, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.shutdown"]], "keyword (class in mltk.utils.audio_dataset_generator)": [[213, "mltk.utils.audio_dataset_generator.Keyword"]], "aliases (keyword attribute)": [[213, "mltk.utils.audio_dataset_generator.Keyword.aliases"]], "as_list() (keyword method)": [[213, "mltk.utils.audio_dataset_generator.Keyword.as_list"]], "count() (keyword method)": [[213, "mltk.utils.audio_dataset_generator.Keyword.count"]], "index() (keyword method)": [[213, "mltk.utils.audio_dataset_generator.Keyword.index"]], "max_count (keyword attribute)": [[213, "mltk.utils.audio_dataset_generator.Keyword.max_count"]], "value (keyword attribute)": [[213, "mltk.utils.audio_dataset_generator.Keyword.value"]], "voice (class in mltk.utils.audio_dataset_generator)": [[214, "mltk.utils.audio_dataset_generator.Voice"]], "__init__() (voice method)": [[214, "mltk.utils.audio_dataset_generator.Voice.__init__"]], "backend (voice attribute)": [[214, "mltk.utils.audio_dataset_generator.Voice.backend"]], "hashable_value() (voice method)": [[214, "mltk.utils.audio_dataset_generator.Voice.hashable_value"]], "hex_hash (voice property)": [[214, "mltk.utils.audio_dataset_generator.Voice.hex_hash"]], "language_code (voice attribute)": [[214, "mltk.utils.audio_dataset_generator.Voice.language_code"]], "name (voice attribute)": [[214, "mltk.utils.audio_dataset_generator.Voice.name"]], "voicepitch (class in mltk.utils.audio_dataset_generator)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch"]], "__init__() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.__init__"]], "__new__() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.__new__"]], "capitalize() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.capitalize"]], "casefold() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.casefold"]], "center() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.center"]], "count() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.count"]], "encode() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.encode"]], "endswith() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.endswith"]], "expandtabs() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.expandtabs"]], "find() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.find"]], "format() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.format"]], "format_map() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.format_map"]], "index() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.index"]], "isalnum() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.isalnum"]], "isalpha() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.isalpha"]], "isascii() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.isascii"]], "isdecimal() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.isdecimal"]], "isdigit() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.isdigit"]], "isidentifier() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.isidentifier"]], "islower() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.islower"]], "isnumeric() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.isnumeric"]], "isprintable() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.isprintable"]], "isspace() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.isspace"]], "istitle() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.istitle"]], "isupper() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.isupper"]], "join() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.join"]], "ljust() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.ljust"]], "lower() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.lower"]], "lstrip() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.lstrip"]], "maketrans() (voicepitch static method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.maketrans"]], "partition() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.partition"]], "removeprefix() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.removeprefix"]], "removesuffix() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.removesuffix"]], "replace() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.replace"]], "rfind() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.rfind"]], "rindex() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.rindex"]], "rjust() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.rjust"]], "rpartition() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.rpartition"]], "rsplit() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.rsplit"]], "rstrip() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.rstrip"]], "split() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.split"]], "splitlines() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.splitlines"]], "startswith() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.startswith"]], "strip() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.strip"]], "swapcase() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.swapcase"]], "title() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.title"]], "translate() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.translate"]], "upper() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.upper"]], "zfill() (voicepitch method)": [[215, "mltk.utils.audio_dataset_generator.VoicePitch.zfill"]], "voicerate (class in mltk.utils.audio_dataset_generator)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate"]], "__init__() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.__init__"]], "__new__() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.__new__"]], "capitalize() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.capitalize"]], "casefold() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.casefold"]], "center() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.center"]], "count() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.count"]], "encode() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.encode"]], "endswith() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.endswith"]], "expandtabs() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.expandtabs"]], "find() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.find"]], "format() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.format"]], "format_map() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.format_map"]], "index() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.index"]], "isalnum() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.isalnum"]], "isalpha() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.isalpha"]], "isascii() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.isascii"]], "isdecimal() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.isdecimal"]], "isdigit() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.isdigit"]], "isidentifier() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.isidentifier"]], "islower() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.islower"]], "isnumeric() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.isnumeric"]], "isprintable() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.isprintable"]], "isspace() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.isspace"]], "istitle() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.istitle"]], "isupper() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.isupper"]], "join() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.join"]], "ljust() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.ljust"]], "lower() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.lower"]], "lstrip() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.lstrip"]], "maketrans() (voicerate static method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.maketrans"]], "partition() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.partition"]], "removeprefix() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.removeprefix"]], "removesuffix() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.removesuffix"]], "replace() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.replace"]], "rfind() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.rfind"]], "rindex() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.rindex"]], "rjust() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.rjust"]], "rpartition() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.rpartition"]], "rsplit() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.rsplit"]], "rstrip() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.rstrip"]], "split() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.split"]], "splitlines() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.splitlines"]], "startswith() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.startswith"]], "strip() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.strip"]], "swapcase() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.swapcase"]], "title() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.title"]], "translate() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.translate"]], "upper() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.upper"]], "zfill() (voicerate method)": [[216, "mltk.utils.audio_dataset_generator.VoiceRate.zfill"]], "bin2header() (in module mltk.utils.bin2header)": [[217, "mltk.utils.bin2header.bin2header"]], "main() (in module mltk.utils.bin2header)": [[217, "mltk.utils.bin2header.main"]], "mltk.utils.bin2header": [[217, "module-mltk.utils.bin2header"]], "build_mltk_target() (in module mltk.utils.cmake)": [[218, "mltk.utils.cmake.build_mltk_target"]], "get_build_directory() (in module mltk.utils.cmake)": [[218, "mltk.utils.cmake.get_build_directory"]], "invoke_mltk_target() (in module mltk.utils.cmake)": [[218, "mltk.utils.cmake.invoke_mltk_target"]], "mltk.utils.cmake": [[218, "module-mltk.utils.cmake"]], "parse_variables() (in module mltk.utils.cmake)": [[218, "mltk.utils.cmake.parse_variables"]], "tensorflowcudaversions (class in mltk.utils.gpu)": [[219, "mltk.utils.gpu.TensorflowCudaVersions"]], "__getnewargs__() (tensorflowcudaversions method)": [[219, "mltk.utils.gpu.TensorflowCudaVersions.__getnewargs__"]], "__match_args__ (tensorflowcudaversions attribute)": [[219, "mltk.utils.gpu.TensorflowCudaVersions.__match_args__"]], "__module__ (tensorflowcudaversions attribute)": [[219, "mltk.utils.gpu.TensorflowCudaVersions.__module__"]], "__new__() (tensorflowcudaversions static method)": [[219, "mltk.utils.gpu.TensorflowCudaVersions.__new__"]], "__repr__() (tensorflowcudaversions method)": [[219, "mltk.utils.gpu.TensorflowCudaVersions.__repr__"]], "__slots__ (tensorflowcudaversions attribute)": [[219, "mltk.utils.gpu.TensorflowCudaVersions.__slots__"]], "check_tensorflow_cuda_compatibility_error() (in module mltk.utils.gpu)": [[219, "mltk.utils.gpu.check_tensorflow_cuda_compatibility_error"]], "cuda (tensorflowcudaversions attribute)": [[219, "mltk.utils.gpu.TensorflowCudaVersions.cuda"]], "cudnn (tensorflowcudaversions attribute)": [[219, "mltk.utils.gpu.TensorflowCudaVersions.cudnn"]], "deinitialize() (in module mltk.utils.gpu)": [[219, "mltk.utils.gpu.deinitialize"]], "disable() (in module mltk.utils.gpu)": [[219, "mltk.utils.gpu.disable"]], "get_tensorflow_version_with_cudnn_version() (in module mltk.utils.gpu)": [[219, "mltk.utils.gpu.get_tensorflow_version_with_cudnn_version"]], "initialize() (in module mltk.utils.gpu)": [[219, "mltk.utils.gpu.initialize"]], "mltk.utils.gpu": [[219, "module-mltk.utils.gpu"]], "python_max (tensorflowcudaversions attribute)": [[219, "mltk.utils.gpu.TensorflowCudaVersions.python_max"]], "python_min (tensorflowcudaversions attribute)": [[219, "mltk.utils.gpu.TensorflowCudaVersions.python_min"]], "tensorflow (tensorflowcudaversions attribute)": [[219, "mltk.utils.gpu.TensorflowCudaVersions.tensorflow"]], "generate_hash() (in module mltk.utils.hasher)": [[220, "mltk.utils.hasher.generate_hash"]], "hash_file() (in module mltk.utils.hasher)": [[220, "mltk.utils.hasher.hash_file"]], "hash_object() (in module mltk.utils.hasher)": [[220, "mltk.utils.hasher.hash_object"]], "mltk.utils.hasher": [[220, "module-mltk.utils.hasher"]], "jlinkcommandstream (class in mltk.utils.jlink_stream)": [[222, "mltk.utils.jlink_stream.JlinkCommandStream"]], "__init__() (jlinkcommandstream method)": [[222, "mltk.utils.jlink_stream.JlinkCommandStream.__init__"]], "close() (jlinkcommandstream method)": [[222, "mltk.utils.jlink_stream.JlinkCommandStream.close"]], "issue() (jlinkcommandstream method)": [[222, "mltk.utils.jlink_stream.JlinkCommandStream.issue"]], "open() (jlinkcommandstream method)": [[222, "mltk.utils.jlink_stream.JlinkCommandStream.open"]], "jlinkdatastream (class in mltk.utils.jlink_stream)": [[223, "mltk.utils.jlink_stream.JLinkDataStream"]], "__init__() (jlinkdatastream method)": [[223, "mltk.utils.jlink_stream.JLinkDataStream.__init__"]], "buffer_hexdump (jlinkdatastream property)": [[223, "mltk.utils.jlink_stream.JLinkDataStream.buffer_hexdump"]], "buffer_unused (jlinkdatastream property)": [[223, "mltk.utils.jlink_stream.JLinkDataStream.buffer_unused"]], "buffer_used (jlinkdatastream property)": [[223, "mltk.utils.jlink_stream.JLinkDataStream.buffer_used"]], "close() (jlinkdatastream method)": [[223, "mltk.utils.jlink_stream.JLinkDataStream.close"]], "end_time (jlinkdatastream property)": [[223, "mltk.utils.jlink_stream.JLinkDataStream.end_time"]], "flush() (jlinkdatastream method)": [[223, "mltk.utils.jlink_stream.JLinkDataStream.flush"]], "is_opened (jlinkdatastream property)": [[223, "mltk.utils.jlink_stream.JLinkDataStream.is_opened"]], "max_read_size (jlinkdatastream property)": [[223, "mltk.utils.jlink_stream.JLinkDataStream.max_read_size"]], "mode (jlinkdatastream property)": [[223, "mltk.utils.jlink_stream.JLinkDataStream.mode"]], "name (jlinkdatastream property)": [[223, "mltk.utils.jlink_stream.JLinkDataStream.name"]], "read() (jlinkdatastream method)": [[223, "mltk.utils.jlink_stream.JLinkDataStream.read"]], "read_all() (jlinkdatastream method)": [[223, "mltk.utils.jlink_stream.JLinkDataStream.read_all"]], "read_data_available (jlinkdatastream property)": [[223, "mltk.utils.jlink_stream.JLinkDataStream.read_data_available"]], "timeout (jlinkdatastream property)": [[223, "mltk.utils.jlink_stream.JLinkDataStream.timeout"]], "write() (jlinkdatastream method)": [[223, "mltk.utils.jlink_stream.JLinkDataStream.write"]], "write_data_available (jlinkdatastream property)": [[223, "mltk.utils.jlink_stream.JLinkDataStream.write_data_available"]], "jlinkstream (class in mltk.utils.jlink_stream)": [[225, "mltk.utils.jlink_stream.JlinkStream"]], "__init__() (jlinkstream method)": [[225, "mltk.utils.jlink_stream.JlinkStream.__init__"]], "close() (jlinkstream method)": [[225, "mltk.utils.jlink_stream.JlinkStream.close"]], "connect() (jlinkstream method)": [[225, "mltk.utils.jlink_stream.JlinkStream.connect"]], "default_options (jlinkstream property)": [[225, "mltk.utils.jlink_stream.JlinkStream.default_options"]], "disconnect() (jlinkstream method)": [[225, "mltk.utils.jlink_stream.JlinkStream.disconnect"]], "is_connected (jlinkstream property)": [[225, "mltk.utils.jlink_stream.JlinkStream.is_connected"]], "open() (jlinkstream method)": [[225, "mltk.utils.jlink_stream.JlinkStream.open"]], "process() (jlinkstream method)": [[225, "mltk.utils.jlink_stream.JlinkStream.process"]], "read() (jlinkstream method)": [[225, "mltk.utils.jlink_stream.JlinkStream.read"]], "write() (jlinkstream method)": [[225, "mltk.utils.jlink_stream.JlinkStream.write"]], "jlinkstreamoptions (class in mltk.utils.jlink_stream)": [[226, "mltk.utils.jlink_stream.JlinkStreamOptions"]], "consoleloggerlevelcontext (class in mltk.utils.logger)": [[227, "mltk.utils.logger.ConsoleLoggerLevelContext"]], "dummylogger (class in mltk.utils.logger)": [[227, "mltk.utils.logger.DummyLogger"]], "__dict__ (consoleloggerlevelcontext attribute)": [[227, "mltk.utils.logger.ConsoleLoggerLevelContext.__dict__"]], "__dict__ (dummylogger attribute)": [[227, "mltk.utils.logger.DummyLogger.__dict__"]], "__enter__() (consoleloggerlevelcontext method)": [[227, "mltk.utils.logger.ConsoleLoggerLevelContext.__enter__"]], "__exit__() (consoleloggerlevelcontext method)": [[227, "mltk.utils.logger.ConsoleLoggerLevelContext.__exit__"]], "__init__() (consoleloggerlevelcontext method)": [[227, "mltk.utils.logger.ConsoleLoggerLevelContext.__init__"]], "__init__() (dummylogger method)": [[227, "mltk.utils.logger.DummyLogger.__init__"]], "__module__ (consoleloggerlevelcontext attribute)": [[227, "mltk.utils.logger.ConsoleLoggerLevelContext.__module__"]], "__module__ (dummylogger attribute)": [[227, "mltk.utils.logger.DummyLogger.__module__"]], "__weakref__ (consoleloggerlevelcontext attribute)": [[227, "mltk.utils.logger.ConsoleLoggerLevelContext.__weakref__"]], "__weakref__ (dummylogger attribute)": [[227, "mltk.utils.logger.DummyLogger.__weakref__"]], "add_console_logger() (in module mltk.utils.logger)": [[227, "mltk.utils.logger.add_console_logger"]], "debug() (dummylogger method)": [[227, "mltk.utils.logger.DummyLogger.debug"]], "error() (dummylogger method)": [[227, "mltk.utils.logger.DummyLogger.error"]], "exception() (dummylogger method)": [[227, "mltk.utils.logger.DummyLogger.exception"]], "flush() (dummylogger method)": [[227, "mltk.utils.logger.DummyLogger.flush"]], "get_level() (in module mltk.utils.logger)": [[227, "mltk.utils.logger.get_level"]], "get_logger() (in module mltk.utils.logger)": [[227, "mltk.utils.logger.get_logger"]], "info() (dummylogger method)": [[227, "mltk.utils.logger.DummyLogger.info"]], "make_filelike() (in module mltk.utils.logger)": [[227, "mltk.utils.logger.make_filelike"]], "mltk.utils.logger": [[227, "module-mltk.utils.logger"]], "redirect_stream() (in module mltk.utils.logger)": [[227, "mltk.utils.logger.redirect_stream"]], "set_console_level() (in module mltk.utils.logger)": [[227, "mltk.utils.logger.set_console_level"]], "timing_decorator() (in module mltk.utils.logger)": [[227, "mltk.utils.logger.timing_decorator"]], "warning() (dummylogger method)": [[227, "mltk.utils.logger.DummyLogger.warning"]], "write() (dummylogger method)": [[227, "mltk.utils.logger.DummyLogger.write"]], "add_user_setting() (in module mltk.utils.path)": [[228, "mltk.utils.path.add_user_setting"]], "clean_directory() (in module mltk.utils.path)": [[228, "mltk.utils.path.clean_directory"]], "copy_directory() (in module mltk.utils.path)": [[228, "mltk.utils.path.copy_directory"]], "create_dir() (in module mltk.utils.path)": [[228, "mltk.utils.path.create_dir"]], "create_tempdir() (in module mltk.utils.path)": [[228, "mltk.utils.path.create_tempdir"]], "create_user_dir() (in module mltk.utils.path)": [[228, "mltk.utils.path.create_user_dir"]], "extension() (in module mltk.utils.path)": [[228, "mltk.utils.path.extension"]], "file_is_in_use() (in module mltk.utils.path)": [[228, "mltk.utils.path.file_is_in_use"]], "file_is_newer() (in module mltk.utils.path)": [[228, "mltk.utils.path.file_is_newer"]], "fullpath() (in module mltk.utils.path)": [[228, "mltk.utils.path.fullpath"]], "get_actual_path() (in module mltk.utils.path)": [[228, "mltk.utils.path.get_actual_path"]], "get_user_setting() (in module mltk.utils.path)": [[228, "mltk.utils.path.get_user_setting"]], "has_filename() (in module mltk.utils.path)": [[228, "mltk.utils.path.has_filename"]], "mltk.utils.path": [[228, "module-mltk.utils.path"]], "pushd() (in module mltk.utils.path)": [[228, "mltk.utils.path.pushd"]], "recursive_listdir() (in module mltk.utils.path)": [[228, "mltk.utils.path.recursive_listdir"]], "remove_directory() (in module mltk.utils.path)": [[228, "mltk.utils.path.remove_directory"]], "set_file_last_modified() (in module mltk.utils.path)": [[228, "mltk.utils.path.set_file_last_modified"]], "walk_with_depth() (in module mltk.utils.path)": [[228, "mltk.utils.path.walk_with_depth"]], "processpool (class in mltk.utils.process_pool)": [[229, "mltk.utils.process_pool.ProcessPool"]], "__init__() (processpool method)": [[229, "mltk.utils.process_pool.ProcessPool.__init__"]], "create_batch() (processpool method)": [[229, "mltk.utils.process_pool.ProcessPool.create_batch"]], "is_running (processpool property)": [[229, "mltk.utils.process_pool.ProcessPool.is_running"]], "n_jobs (processpool property)": [[229, "mltk.utils.process_pool.ProcessPool.n_jobs"]], "name (processpool property)": [[229, "mltk.utils.process_pool.ProcessPool.name"]], "process() (processpool method)": [[229, "mltk.utils.process_pool.ProcessPool.process"]], "shutdown() (processpool method)": [[229, "mltk.utils.process_pool.ProcessPool.shutdown"]], "start() (processpool method)": [[229, "mltk.utils.process_pool.ProcessPool.start"]], "defaultdict() (in module mltk.utils.python)": [[230, "mltk.utils.python.DefaultDict"]], "dictobject (class in mltk.utils.python)": [[230, "mltk.utils.python.DictObject"]], "short_version (in module mltk.utils.python)": [[230, "mltk.utils.python.SHORT_VERSION"]], "__dict__ (dictobject attribute)": [[230, "mltk.utils.python.DictObject.__dict__"]], "__getattr__() (dictobject method)": [[230, "mltk.utils.python.DictObject.__getattr__"]], "__module__ (dictobject attribute)": [[230, "mltk.utils.python.DictObject.__module__"]], "__setattr__() (dictobject method)": [[230, "mltk.utils.python.DictObject.__setattr__"]], "__weakref__ (dictobject attribute)": [[230, "mltk.utils.python.DictObject.__weakref__"]], "append_exception_msg() (in module mltk.utils.python)": [[230, "mltk.utils.python.append_exception_msg"]], "as_list() (in module mltk.utils.python)": [[230, "mltk.utils.python.as_list"]], "contains_class_type() (in module mltk.utils.python)": [[230, "mltk.utils.python.contains_class_type"]], "debugger_is_active() (in module mltk.utils.python)": [[230, "mltk.utils.python.debugger_is_active"]], "disable_warnings() (in module mltk.utils.python)": [[230, "mltk.utils.python.disable_warnings"]], "find_object_key_with_value() (in module mltk.utils.python)": [[230, "mltk.utils.python.find_object_key_with_value"]], "find_object_value_with_key() (in module mltk.utils.python)": [[230, "mltk.utils.python.find_object_value_with_key"]], "find_object_value_with_key_or_value() (in module mltk.utils.python)": [[230, "mltk.utils.python.find_object_value_with_key_or_value"]], "flatten_list() (in module mltk.utils.python)": [[230, "mltk.utils.python.flatten_list"]], "forward_method_kwargs() (in module mltk.utils.python)": [[230, "mltk.utils.python.forward_method_kwargs"]], "get_case_insensitive() (in module mltk.utils.python)": [[230, "mltk.utils.python.get_case_insensitive"]], "import_module_at_path() (in module mltk.utils.python)": [[230, "mltk.utils.python.import_module_at_path"]], "install_pip_package() (in module mltk.utils.python)": [[230, "mltk.utils.python.install_pip_package"]], "is_false() (in module mltk.utils.python)": [[230, "mltk.utils.python.is_false"]], "is_true() (in module mltk.utils.python)": [[230, "mltk.utils.python.is_true"]], "list_rindex() (in module mltk.utils.python)": [[230, "mltk.utils.python.list_rindex"]], "load_json_safe() (in module mltk.utils.python)": [[230, "mltk.utils.python.load_json_safe"]], "merge_dict() (in module mltk.utils.python)": [[230, "mltk.utils.python.merge_dict"]], "mltk.utils.python": [[230, "module-mltk.utils.python"]], "notebook_is_active() (in module mltk.utils.python)": [[230, "mltk.utils.python.notebook_is_active"]], "prepend_exception_msg() (in module mltk.utils.python)": [[230, "mltk.utils.python.prepend_exception_msg"]], "set_absl_log_level() (in module mltk.utils.python)": [[230, "mltk.utils.python.set_absl_log_level"]], "timeit() (in module mltk.utils.python)": [[230, "mltk.utils.python.timeit"]], "serialreader (class in mltk.utils.serial_reader)": [[232, "mltk.utils.serial_reader.SerialReader"]], "__init__() (serialreader method)": [[232, "mltk.utils.serial_reader.SerialReader.__init__"]], "captured_data (serialreader property)": [[232, "mltk.utils.serial_reader.SerialReader.captured_data"]], "close() (serialreader method)": [[232, "mltk.utils.serial_reader.SerialReader.close"]], "error_message (serialreader property)": [[232, "mltk.utils.serial_reader.SerialReader.error_message"]], "failed (serialreader property)": [[232, "mltk.utils.serial_reader.SerialReader.failed"]], "flush() (serialreader method)": [[232, "mltk.utils.serial_reader.SerialReader.flush"]], "is_open (serialreader property)": [[232, "mltk.utils.serial_reader.SerialReader.is_open"]], "list_ports() (serialreader static method)": [[232, "mltk.utils.serial_reader.SerialReader.list_ports"]], "open() (serialreader method)": [[232, "mltk.utils.serial_reader.SerialReader.open"]], "read() (serialreader method)": [[232, "mltk.utils.serial_reader.SerialReader.read"]], "resolve_port() (serialreader static method)": [[232, "mltk.utils.serial_reader.SerialReader.resolve_port"]], "started (serialreader property)": [[232, "mltk.utils.serial_reader.SerialReader.started"]], "stopped (serialreader property)": [[232, "mltk.utils.serial_reader.SerialReader.stopped"]], "write() (serialreader method)": [[232, "mltk.utils.serial_reader.SerialReader.write"]], "mltk.utils.shell_cmd": [[233, "module-mltk.utils.shell_cmd"]], "run_shell_cmd() (in module mltk.utils.shell_cmd)": [[233, "mltk.utils.shell_cmd.run_shell_cmd"]], "signalhandler (class in mltk.utils.signal_handler)": [[234, "mltk.utils.signal_handler.SignalHandler"]], "__init__() (signalhandler method)": [[234, "mltk.utils.signal_handler.SignalHandler.__init__"]], "formattedfloat (class in mltk.utils.string_formatting)": [[235, "mltk.utils.string_formatting.FormattedFloat"]], "formattedint (class in mltk.utils.string_formatting)": [[235, "mltk.utils.string_formatting.FormattedInt"]], "__dict__ (formattedfloat attribute)": [[235, "mltk.utils.string_formatting.FormattedFloat.__dict__"]], "__dict__ (formattedint attribute)": [[235, "mltk.utils.string_formatting.FormattedInt.__dict__"]], "__module__ (formattedfloat attribute)": [[235, "mltk.utils.string_formatting.FormattedFloat.__module__"]], "__module__ (formattedint attribute)": [[235, "mltk.utils.string_formatting.FormattedInt.__module__"]], "__str__() (formattedfloat method)": [[235, "mltk.utils.string_formatting.FormattedFloat.__str__"]], "__str__() (formattedint method)": [[235, "mltk.utils.string_formatting.FormattedInt.__str__"]], "__weakref__ (formattedfloat attribute)": [[235, "mltk.utils.string_formatting.FormattedFloat.__weakref__"]], "convert_units() (in module mltk.utils.string_formatting)": [[235, "mltk.utils.string_formatting.convert_units"]], "format_units() (in module mltk.utils.string_formatting)": [[235, "mltk.utils.string_formatting.format_units"]], "iso_time_filename_str() (in module mltk.utils.string_formatting)": [[235, "mltk.utils.string_formatting.iso_time_filename_str"]], "iso_time_str() (in module mltk.utils.string_formatting)": [[235, "mltk.utils.string_formatting.iso_time_str"]], "mltk.utils.string_formatting": [[235, "module-mltk.utils.string_formatting"]], "pretty_time_str() (in module mltk.utils.string_formatting)": [[235, "mltk.utils.string_formatting.pretty_time_str"]], "get_current_os() (in module mltk.utils.system)": [[236, "mltk.utils.system.get_current_os"]], "get_username() (in module mltk.utils.system)": [[236, "mltk.utils.system.get_username"]], "has_admin() (in module mltk.utils.system)": [[236, "mltk.utils.system.has_admin"]], "is_linux() (in module mltk.utils.system)": [[236, "mltk.utils.system.is_linux"]], "is_osx() (in module mltk.utils.system)": [[236, "mltk.utils.system.is_osx"]], "is_windows() (in module mltk.utils.system)": [[236, "mltk.utils.system.is_windows"]], "make_path_executable() (in module mltk.utils.system)": [[236, "mltk.utils.system.make_path_executable"]], "mltk.utils.system": [[236, "module-mltk.utils.system"]], "raise_signal() (in module mltk.utils.system)": [[236, "mltk.utils.system.raise_signal"]], "send_signal() (in module mltk.utils.system)": [[236, "mltk.utils.system.send_signal"]], "uartstream (class in mltk.utils.uart_stream)": [[238, "mltk.utils.uart_stream.UartStream"]], "__init__() (uartstream method)": [[238, "mltk.utils.uart_stream.UartStream.__init__"]], "baud (uartstream property)": [[238, "mltk.utils.uart_stream.UartStream.baud"]], "close() (uartstream method)": [[238, "mltk.utils.uart_stream.UartStream.close"]], "flush_input() (uartstream method)": [[238, "mltk.utils.uart_stream.UartStream.flush_input"]], "is_open (uartstream property)": [[238, "mltk.utils.uart_stream.UartStream.is_open"]], "is_synchronized (uartstream property)": [[238, "mltk.utils.uart_stream.UartStream.is_synchronized"]], "list_ports() (uartstream static method)": [[238, "mltk.utils.uart_stream.UartStream.list_ports"]], "open() (uartstream method)": [[238, "mltk.utils.uart_stream.UartStream.open"]], "port (uartstream property)": [[238, "mltk.utils.uart_stream.UartStream.port"]], "read() (uartstream method)": [[238, "mltk.utils.uart_stream.UartStream.read"]], "read_all() (uartstream method)": [[238, "mltk.utils.uart_stream.UartStream.read_all"]], "read_command() (uartstream method)": [[238, "mltk.utils.uart_stream.UartStream.read_command"]], "resolve_port() (uartstream static method)": [[238, "mltk.utils.uart_stream.UartStream.resolve_port"]], "rx_bytes_available (uartstream property)": [[238, "mltk.utils.uart_stream.UartStream.rx_bytes_available"]], "synchronize() (uartstream method)": [[238, "mltk.utils.uart_stream.UartStream.synchronize"]], "synchronize_blocking() (uartstream method)": [[238, "mltk.utils.uart_stream.UartStream.synchronize_blocking"]], "tx_bytes_available (uartstream property)": [[238, "mltk.utils.uart_stream.UartStream.tx_bytes_available"]], "wait() (uartstream method)": [[238, "mltk.utils.uart_stream.UartStream.wait"]], "write() (uartstream method)": [[238, "mltk.utils.uart_stream.UartStream.write"]], "write_all() (uartstream method)": [[238, "mltk.utils.uart_stream.UartStream.write_all"]], "write_command() (uartstream method)": [[238, "mltk.utils.uart_stream.UartStream.write_command"]]}})