Search.setIndex({"docnames": ["cpp/shared/uart_stream/examples/data_test/README", "docs/audio/audio_feature_generator", "docs/audio/audio_utilities", "docs/audio/keyword_spotting_overview", "docs/command_line/classify_audio", "docs/command_line/classify_audio_cli_help", "docs/command_line/classify_image", "docs/command_line/classify_image_cli_help", "docs/command_line/commander", "docs/command_line/commander_cli_help", "docs/command_line/evaluate", "docs/command_line/evaluate_cli_help", "docs/command_line/fingerprint_reader", "docs/command_line/fingerprint_reader_cli_help", "docs/command_line/index", "docs/command_line/profile", "docs/command_line/profile_cli_help", "docs/command_line/quantize", "docs/command_line/quantize_cli_help", "docs/command_line/ssh", "docs/command_line/ssh_cli_help", "docs/command_line/summarize", "docs/command_line/summarize_cli_help", "docs/command_line/tensorboard", "docs/command_line/tensorboard_cli_help", "docs/command_line/train", "docs/command_line/train_cli_help", "docs/command_line/update_params", "docs/command_line/update_params_cli_help", "docs/command_line/view", "docs/command_line/view_audio", "docs/command_line/view_audio_cli_help", "docs/command_line/view_cli_help", "docs/cpp_development/build_options", "docs/cpp_development/command_line", "docs/cpp_development/examples/audio_classifier", "docs/cpp_development/examples/ble_audio_classifier", "docs/cpp_development/examples/fingerprint_authenticator", "docs/cpp_development/examples/hello_world", "docs/cpp_development/examples/image_classifier", "docs/cpp_development/examples/index", "docs/cpp_development/examples/model_profiler", "docs/cpp_development/index", "docs/cpp_development/simplicity_studio", "docs/cpp_development/vscode", "docs/cpp_development/wrappers/audio_feature_generator_wrapper", "docs/cpp_development/wrappers/index", "docs/cpp_development/wrappers/mvp_wrapper", "docs/cpp_development/wrappers/tflite_micro_wrapper", "docs/examples", "docs/faq/how_to_debug_model_during_training", "docs/faq/how_to_reduce_model_size", "docs/faq/how_to_run_model_on_embedded", "docs/faq/index", "docs/faq/linux_why_is_gpu_not_working", "docs/faq/where_is_my_trained_model", "docs/faq/why_does_eval_not_work_with_tflite", "docs/faq/why_is_model_not_working_on_embedded", "docs/faq/windows_tensorflow_dll_error", "docs/guides/index", "docs/guides/model_archive", "docs/guides/model_evaluation", "docs/guides/model_parameters", "docs/guides/model_profiler", "docs/guides/model_profiler_utility", "docs/guides/model_quantization", "docs/guides/model_search_path", "docs/guides/model_specification", "docs/guides/model_summary", "docs/guides/model_training", "docs/guides/model_training_monitor", "docs/guides/model_training_via_ssh", "docs/guides/model_visualizer", "docs/guides/notebook_examples_guide", "docs/installation", "docs/other/environment_variables", "docs/other/quick_reference", "docs/other/settings_file", "docs/other/supported_hardware", "docs/overview", "docs/python_api/data_preprocessing/audio", "docs/python_api/data_preprocessing/audio_data_generator", "docs/python_api/data_preprocessing/audio_data_generator_params", "docs/python_api/data_preprocessing/audio_feature_generator", "docs/python_api/data_preprocessing/audio_feature_generator_settings", "docs/python_api/data_preprocessing/image", "docs/python_api/data_preprocessing/image_data_generator", "docs/python_api/data_preprocessing/image_data_generator_params", "docs/python_api/data_preprocessing/index", "docs/python_api/data_preprocessing/list_directory", "docs/python_api/data_preprocessing/normalize", "docs/python_api/data_preprocessing/tf_dataset", "docs/python_api/data_preprocessing/utilities", "docs/python_api/datasets/accelerometer/tflm_magic_wand", "docs/python_api/datasets/audio/background_noise/ambient", "docs/python_api/datasets/audio/background_noise/brd2601", "docs/python_api/datasets/audio/background_noise/esc50", "docs/python_api/datasets/audio/direction_commands", "docs/python_api/datasets/audio/mit_ir_survey", "docs/python_api/datasets/audio/ml_commons/keywords", "docs/python_api/datasets/audio/ml_commons/voice", "docs/python_api/datasets/audio/on_off", "docs/python_api/datasets/audio/speech_commands_v2", "docs/python_api/datasets/image/cifar10", "docs/python_api/datasets/image/fashion_mnist", "docs/python_api/datasets/image/mnist", "docs/python_api/datasets/image/rock_paper_scissors_v1", "docs/python_api/datasets/image/rock_paper_scissors_v2", "docs/python_api/datasets/index", "docs/python_api/index", "docs/python_api/keras_model", "docs/python_api/mltk_model/audio_dataset_mixin", "docs/python_api/mltk_model/dataset_mixin", "docs/python_api/mltk_model/evaluate_autoencoder_mixin", "docs/python_api/mltk_model/evaluate_classifier_mixin", "docs/python_api/mltk_model/evaluate_mixin", "docs/python_api/mltk_model/image_dataset_mixin", "docs/python_api/mltk_model/index", "docs/python_api/mltk_model/mltk_dataset", "docs/python_api/mltk_model/model", "docs/python_api/mltk_model/model_event", "docs/python_api/mltk_model/ssh_mixin", "docs/python_api/mltk_model/train_mixin", "docs/python_api/mltk_model/utilities", "docs/python_api/mltk_model/weights_and_biases_mixin", "docs/python_api/models/common_models", "docs/python_api/models/examples/audio_example1", "docs/python_api/models/examples/audio_tf_dataset", "docs/python_api/models/examples/autoencoder_example", "docs/python_api/models/examples/basic_example", "docs/python_api/models/examples/basic_tf_dataset_example", "docs/python_api/models/examples/binary_classification", "docs/python_api/models/examples/conv1d_example", "docs/python_api/models/examples/image_example1", "docs/python_api/models/examples/image_tf_dataset", "docs/python_api/models/examples/index", "docs/python_api/models/examples/siamese_contrastive", "docs/python_api/models/index", "docs/python_api/models/siliconlabs/fingerprint_signature_generator", "docs/python_api/models/siliconlabs/index", "docs/python_api/models/siliconlabs/keyword_spotting_alexa", "docs/python_api/models/siliconlabs/keyword_spotting_mobilenetv2", "docs/python_api/models/siliconlabs/keyword_spotting_on_off", "docs/python_api/models/siliconlabs/keyword_spotting_on_off_v2", "docs/python_api/models/siliconlabs/keyword_spotting_on_off_v3", "docs/python_api/models/siliconlabs/keyword_spotting_pacman", "docs/python_api/models/siliconlabs/keyword_spotting_pacman_v2", "docs/python_api/models/siliconlabs/keyword_spotting_pacman_v3", "docs/python_api/models/siliconlabs/keyword_spotting_with_transfer_learning", "docs/python_api/models/siliconlabs/rock_paper_scissors", "docs/python_api/models/tflite_micro/index", "docs/python_api/models/tflite_micro/tflite_micro_magic_wand", "docs/python_api/models/tflite_micro/tflite_micro_speech", "docs/python_api/models/tinyml/anomaly_detection", "docs/python_api/models/tinyml/image_classification", "docs/python_api/models/tinyml/index", "docs/python_api/models/tinyml/keyword_spotting", "docs/python_api/models/tinyml/visual_wake_words", "docs/python_api/operations/evaluate", "docs/python_api/operations/index", "docs/python_api/operations/profile", "docs/python_api/operations/quantize", "docs/python_api/operations/summarize", "docs/python_api/operations/train", "docs/python_api/operations/update_model_parameters", "docs/python_api/operations/view", "docs/python_api/tflite_micro_model/accelerator", "docs/python_api/tflite_micro_model/index", "docs/python_api/tflite_micro_model/layer_error", "docs/python_api/tflite_micro_model/model", "docs/python_api/tflite_micro_model/model_details", "docs/python_api/tflite_micro_model/profiled_layer_result", "docs/python_api/tflite_micro_model/wrapper", "docs/python_api/tflite_model/activation", "docs/python_api/tflite_model/add_layer", "docs/python_api/tflite_model/conv2d_layer", "docs/python_api/tflite_model/conv2d_layer_options", "docs/python_api/tflite_model/conv_params", "docs/python_api/tflite_model/depthwise_conv2d_layer", "docs/python_api/tflite_model/depthwise_conv2d_layer_options", "docs/python_api/tflite_model/depthwise_conv_params", "docs/python_api/tflite_model/dequantize_layer", "docs/python_api/tflite_model/dictionary.fbs", "docs/python_api/tflite_model/fully_connected_layer", "docs/python_api/tflite_model/fully_connected_layer_options", "docs/python_api/tflite_model/fully_connected_params", "docs/python_api/tflite_model/index", "docs/python_api/tflite_model/layer", "docs/python_api/tflite_model/model", "docs/python_api/tflite_model/padding", "docs/python_api/tflite_model/parameters", "docs/python_api/tflite_model/pooling2d_layer", "docs/python_api/tflite_model/pooling2d_layer_options", "docs/python_api/tflite_model/pooling_params", "docs/python_api/tflite_model/quantization", "docs/python_api/tflite_model/quantize_layer", "docs/python_api/tflite_model/reshape_layer", "docs/python_api/tflite_model/shape", "docs/python_api/tflite_model/tensor", "docs/python_api/tflite_model/transpose_conv_layer", "docs/python_api/tflite_model/transpose_conv_layer_options", "docs/python_api/tflite_model/transpose_conv_params", "docs/python_api/utils/archive", "docs/python_api/utils/archive_downloader", "docs/python_api/utils/audio_dataset_generator/augmentation", "docs/python_api/utils/audio_dataset_generator/generation_config", "docs/python_api/utils/audio_dataset_generator/generator", "docs/python_api/utils/audio_dataset_generator/index", "docs/python_api/utils/audio_dataset_generator/keyword", "docs/python_api/utils/audio_dataset_generator/voice", "docs/python_api/utils/audio_dataset_generator/voice_pitch", "docs/python_api/utils/audio_dataset_generator/voice_rate", "docs/python_api/utils/bin2header", "docs/python_api/utils/cmake", "docs/python_api/utils/gpu", "docs/python_api/utils/hasher", "docs/python_api/utils/index", "docs/python_api/utils/jlink_stream/command_stream", "docs/python_api/utils/jlink_stream/data_stream", "docs/python_api/utils/jlink_stream/index", "docs/python_api/utils/jlink_stream/jlink_stream", "docs/python_api/utils/jlink_stream/stream_options", "docs/python_api/utils/logger", "docs/python_api/utils/path", "docs/python_api/utils/process_pool", "docs/python_api/utils/python", "docs/python_api/utils/serial_reader/index", "docs/python_api/utils/serial_reader/serial_reader", "docs/python_api/utils/shell_cmd", "docs/python_api/utils/signal_handler", "docs/python_api/utils/string_formatting", "docs/python_api/utils/system", "docs/python_api/utils/uart_stream/index", "docs/python_api/utils/uart_stream/uart_stream", "docs/tutorials", "docs/why_mltk", "index", "mltk/examples/evaluate_model", "mltk/examples/profile_model", "mltk/examples/quantize_model", "mltk/examples/summarize_model", "mltk/examples/tflite_micro_model", "mltk/examples/tflite_model", "mltk/examples/train_model", "mltk/examples/update_params", "mltk/examples/view_model", "mltk/tutorials/README", "mltk/tutorials/add_existing_script_to_mltk", "mltk/tutorials/cloud_logging_with_wandb", "mltk/tutorials/cloud_training_with_vast_ai", "mltk/tutorials/fingerprint_authentication", "mltk/tutorials/image_classification", "mltk/tutorials/keyword_spotting_alexa", "mltk/tutorials/keyword_spotting_on_off", "mltk/tutorials/keyword_spotting_pacman", "mltk/tutorials/keyword_spotting_with_transfer_learning", "mltk/tutorials/model_debugging", "mltk/tutorials/model_optimization", "mltk/tutorials/onnx_to_tflite", "mltk/tutorials/synthetic_audio_dataset_generation"], "filenames": ["cpp\\shared\\uart_stream\\examples\\data_test\\README.md", "docs\\audio\\audio_feature_generator.md", "docs\\audio\\audio_utilities.md", "docs\\audio\\keyword_spotting_overview.rst", "docs\\command_line\\classify_audio.md", "docs\\command_line\\classify_audio_cli_help.md", "docs\\command_line\\classify_image.md", "docs\\command_line\\classify_image_cli_help.md", "docs\\command_line\\commander.md", "docs\\command_line\\commander_cli_help.md", "docs\\command_line\\evaluate.md", "docs\\command_line\\evaluate_cli_help.md", "docs\\command_line\\fingerprint_reader.md", "docs\\command_line\\fingerprint_reader_cli_help.md", "docs\\command_line\\index.md", "docs\\command_line\\profile.md", "docs\\command_line\\profile_cli_help.md", "docs\\command_line\\quantize.md", "docs\\command_line\\quantize_cli_help.md", "docs\\command_line\\ssh.md", "docs\\command_line\\ssh_cli_help.md", "docs\\command_line\\summarize.md", "docs\\command_line\\summarize_cli_help.md", "docs\\command_line\\tensorboard.md", "docs\\command_line\\tensorboard_cli_help.md", "docs\\command_line\\train.md", "docs\\command_line\\train_cli_help.md", "docs\\command_line\\update_params.md", "docs\\command_line\\update_params_cli_help.md", "docs\\command_line\\view.md", "docs\\command_line\\view_audio.md", "docs\\command_line\\view_audio_cli_help.md", "docs\\command_line\\view_cli_help.md", "docs\\cpp_development\\build_options.md", "docs\\cpp_development\\command_line.md", "docs\\cpp_development\\examples\\audio_classifier.md", "docs\\cpp_development\\examples\\ble_audio_classifier.md", "docs\\cpp_development\\examples\\fingerprint_authenticator.md", "docs\\cpp_development\\examples\\hello_world.md", "docs\\cpp_development\\examples\\image_classifier.md", "docs\\cpp_development\\examples\\index.md", "docs\\cpp_development\\examples\\model_profiler.md", "docs\\cpp_development\\index.md", "docs\\cpp_development\\simplicity_studio.md", "docs\\cpp_development\\vscode.md", "docs\\cpp_development\\wrappers\\audio_feature_generator_wrapper.md", "docs\\cpp_development\\wrappers\\index.md", "docs\\cpp_development\\wrappers\\mvp_wrapper.md", "docs\\cpp_development\\wrappers\\tflite_micro_wrapper.md", "docs\\examples.md", "docs\\faq\\how_to_debug_model_during_training.md", "docs\\faq\\how_to_reduce_model_size.md", "docs\\faq\\how_to_run_model_on_embedded.md", "docs\\faq\\index.md", "docs\\faq\\linux_why_is_gpu_not_working.md", "docs\\faq\\where_is_my_trained_model.md", "docs\\faq\\why_does_eval_not_work_with_tflite.md", "docs\\faq\\why_is_model_not_working_on_embedded.md", "docs\\faq\\windows_tensorflow_dll_error.md", "docs\\guides\\index.md", "docs\\guides\\model_archive.md", "docs\\guides\\model_evaluation.md", "docs\\guides\\model_parameters.md", "docs\\guides\\model_profiler.md", "docs\\guides\\model_profiler_utility.md", "docs\\guides\\model_quantization.md", "docs\\guides\\model_search_path.md", "docs\\guides\\model_specification.md", "docs\\guides\\model_summary.md", "docs\\guides\\model_training.md", "docs\\guides\\model_training_monitor.md", "docs\\guides\\model_training_via_ssh.md", "docs\\guides\\model_visualizer.md", "docs\\guides\\notebook_examples_guide.md", "docs\\installation.md", "docs\\other\\environment_variables.md", "docs\\other\\quick_reference.md", "docs\\other\\settings_file.md", "docs\\other\\supported_hardware.md", "docs\\overview.rst", "docs\\python_api\\data_preprocessing\\audio.rst", "docs\\python_api\\data_preprocessing\\audio_data_generator.rst", "docs\\python_api\\data_preprocessing\\audio_data_generator_params.rst", "docs\\python_api\\data_preprocessing\\audio_feature_generator.rst", "docs\\python_api\\data_preprocessing\\audio_feature_generator_settings.rst", "docs\\python_api\\data_preprocessing\\image.rst", "docs\\python_api\\data_preprocessing\\image_data_generator.rst", "docs\\python_api\\data_preprocessing\\image_data_generator_params.rst", "docs\\python_api\\data_preprocessing\\index.md", "docs\\python_api\\data_preprocessing\\list_directory.rst", "docs\\python_api\\data_preprocessing\\normalize.rst", "docs\\python_api\\data_preprocessing\\tf_dataset.rst", "docs\\python_api\\data_preprocessing\\utilities.md", "docs\\python_api\\datasets\\accelerometer\\tflm_magic_wand.rst", "docs\\python_api\\datasets\\audio\\background_noise\\ambient.rst", "docs\\python_api\\datasets\\audio\\background_noise\\brd2601.rst", "docs\\python_api\\datasets\\audio\\background_noise\\esc50.rst", "docs\\python_api\\datasets\\audio\\direction_commands.rst", "docs\\python_api\\datasets\\audio\\mit_ir_survey.rst", "docs\\python_api\\datasets\\audio\\ml_commons\\keywords.rst", "docs\\python_api\\datasets\\audio\\ml_commons\\voice.rst", "docs\\python_api\\datasets\\audio\\on_off.rst", "docs\\python_api\\datasets\\audio\\speech_commands_v2.rst", "docs\\python_api\\datasets\\image\\cifar10.rst", "docs\\python_api\\datasets\\image\\fashion_mnist.rst", "docs\\python_api\\datasets\\image\\mnist.rst", "docs\\python_api\\datasets\\image\\rock_paper_scissors_v1.rst", "docs\\python_api\\datasets\\image\\rock_paper_scissors_v2.rst", "docs\\python_api\\datasets\\index.md", "docs\\python_api\\index.md", "docs\\python_api\\keras_model.md", "docs\\python_api\\mltk_model\\audio_dataset_mixin.rst", "docs\\python_api\\mltk_model\\dataset_mixin.rst", "docs\\python_api\\mltk_model\\evaluate_autoencoder_mixin.rst", "docs\\python_api\\mltk_model\\evaluate_classifier_mixin.rst", "docs\\python_api\\mltk_model\\evaluate_mixin.rst", "docs\\python_api\\mltk_model\\image_dataset_mixin.rst", "docs\\python_api\\mltk_model\\index.md", "docs\\python_api\\mltk_model\\mltk_dataset.rst", "docs\\python_api\\mltk_model\\model.rst", "docs\\python_api\\mltk_model\\model_event.rst", "docs\\python_api\\mltk_model\\ssh_mixin.rst", "docs\\python_api\\mltk_model\\train_mixin.rst", "docs\\python_api\\mltk_model\\utilities.md", "docs\\python_api\\mltk_model\\weights_and_biases_mixin.rst", "docs\\python_api\\models\\common_models.md", "docs\\python_api\\models\\examples\\audio_example1.md", "docs\\python_api\\models\\examples\\audio_tf_dataset.md", "docs\\python_api\\models\\examples\\autoencoder_example.md", "docs\\python_api\\models\\examples\\basic_example.md", "docs\\python_api\\models\\examples\\basic_tf_dataset_example.md", "docs\\python_api\\models\\examples\\binary_classification.md", "docs\\python_api\\models\\examples\\conv1d_example.md", "docs\\python_api\\models\\examples\\image_example1.md", "docs\\python_api\\models\\examples\\image_tf_dataset.md", "docs\\python_api\\models\\examples\\index.md", "docs\\python_api\\models\\examples\\siamese_contrastive.md", "docs\\python_api\\models\\index.md", "docs\\python_api\\models\\siliconlabs\\fingerprint_signature_generator.md", "docs\\python_api\\models\\siliconlabs\\index.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_alexa.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_mobilenetv2.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_on_off.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_on_off_v2.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_on_off_v3.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_pacman.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_pacman_v2.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_pacman_v3.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_with_transfer_learning.md", "docs\\python_api\\models\\siliconlabs\\rock_paper_scissors.md", "docs\\python_api\\models\\tflite_micro\\index.md", "docs\\python_api\\models\\tflite_micro\\tflite_micro_magic_wand.md", "docs\\python_api\\models\\tflite_micro\\tflite_micro_speech.md", "docs\\python_api\\models\\tinyml\\anomaly_detection.md", "docs\\python_api\\models\\tinyml\\image_classification.md", "docs\\python_api\\models\\tinyml\\index.md", "docs\\python_api\\models\\tinyml\\keyword_spotting.md", "docs\\python_api\\models\\tinyml\\visual_wake_words.md", "docs\\python_api\\operations\\evaluate.md", "docs\\python_api\\operations\\index.md", "docs\\python_api\\operations\\profile.md", "docs\\python_api\\operations\\quantize.md", "docs\\python_api\\operations\\summarize.md", "docs\\python_api\\operations\\train.md", "docs\\python_api\\operations\\update_model_parameters.md", "docs\\python_api\\operations\\view.md", "docs\\python_api\\tflite_micro_model\\accelerator.rst", "docs\\python_api\\tflite_micro_model\\index.md", "docs\\python_api\\tflite_micro_model\\layer_error.rst", "docs\\python_api\\tflite_micro_model\\model.rst", "docs\\python_api\\tflite_micro_model\\model_details.rst", "docs\\python_api\\tflite_micro_model\\profiled_layer_result.rst", "docs\\python_api\\tflite_micro_model\\wrapper.rst", "docs\\python_api\\tflite_model\\activation.rst", "docs\\python_api\\tflite_model\\add_layer.rst", "docs\\python_api\\tflite_model\\conv2d_layer.rst", "docs\\python_api\\tflite_model\\conv2d_layer_options.rst", "docs\\python_api\\tflite_model\\conv_params.rst", "docs\\python_api\\tflite_model\\depthwise_conv2d_layer.rst", "docs\\python_api\\tflite_model\\depthwise_conv2d_layer_options.rst", "docs\\python_api\\tflite_model\\depthwise_conv_params.rst", "docs\\python_api\\tflite_model\\dequantize_layer.rst", "docs\\python_api\\tflite_model\\dictionary.fbs.md", "docs\\python_api\\tflite_model\\fully_connected_layer.rst", "docs\\python_api\\tflite_model\\fully_connected_layer_options.rst", "docs\\python_api\\tflite_model\\fully_connected_params.rst", "docs\\python_api\\tflite_model\\index.md", "docs\\python_api\\tflite_model\\layer.rst", "docs\\python_api\\tflite_model\\model.rst", "docs\\python_api\\tflite_model\\padding.rst", "docs\\python_api\\tflite_model\\parameters.rst", "docs\\python_api\\tflite_model\\pooling2d_layer.rst", "docs\\python_api\\tflite_model\\pooling2d_layer_options.rst", "docs\\python_api\\tflite_model\\pooling_params.rst", "docs\\python_api\\tflite_model\\quantization.rst", "docs\\python_api\\tflite_model\\quantize_layer.rst", "docs\\python_api\\tflite_model\\reshape_layer.rst", "docs\\python_api\\tflite_model\\shape.rst", "docs\\python_api\\tflite_model\\tensor.rst", "docs\\python_api\\tflite_model\\transpose_conv_layer.rst", "docs\\python_api\\tflite_model\\transpose_conv_layer_options.rst", "docs\\python_api\\tflite_model\\transpose_conv_params.rst", "docs\\python_api\\utils\\archive.rst", "docs\\python_api\\utils\\archive_downloader.rst", "docs\\python_api\\utils\\audio_dataset_generator\\augmentation.rst", "docs\\python_api\\utils\\audio_dataset_generator\\generation_config.rst", "docs\\python_api\\utils\\audio_dataset_generator\\generator.rst", "docs\\python_api\\utils\\audio_dataset_generator\\index.md", "docs\\python_api\\utils\\audio_dataset_generator\\keyword.rst", "docs\\python_api\\utils\\audio_dataset_generator\\voice.rst", "docs\\python_api\\utils\\audio_dataset_generator\\voice_pitch.rst", "docs\\python_api\\utils\\audio_dataset_generator\\voice_rate.rst", "docs\\python_api\\utils\\bin2header.rst", "docs\\python_api\\utils\\cmake.rst", "docs\\python_api\\utils\\gpu.rst", "docs\\python_api\\utils\\hasher.rst", "docs\\python_api\\utils\\index.md", "docs\\python_api\\utils\\jlink_stream\\command_stream.rst", "docs\\python_api\\utils\\jlink_stream\\data_stream.rst", "docs\\python_api\\utils\\jlink_stream\\index.md", "docs\\python_api\\utils\\jlink_stream\\jlink_stream.rst", "docs\\python_api\\utils\\jlink_stream\\stream_options.rst", "docs\\python_api\\utils\\logger.rst", "docs\\python_api\\utils\\path.rst", "docs\\python_api\\utils\\process_pool.rst", "docs\\python_api\\utils\\python.rst", "docs\\python_api\\utils\\serial_reader\\index.md", "docs\\python_api\\utils\\serial_reader\\serial_reader.rst", "docs\\python_api\\utils\\shell_cmd.rst", "docs\\python_api\\utils\\signal_handler.rst", "docs\\python_api\\utils\\string_formatting.rst", "docs\\python_api\\utils\\system.rst", "docs\\python_api\\utils\\uart_stream\\index.md", "docs\\python_api\\utils\\uart_stream\\uart_stream.rst", "docs\\tutorials.md", "docs\\why_mltk.md", "index.md", "mltk\\examples\\evaluate_model.ipynb", "mltk\\examples\\profile_model.ipynb", "mltk\\examples\\quantize_model.ipynb", "mltk\\examples\\summarize_model.ipynb", "mltk\\examples\\tflite_micro_model.ipynb", "mltk\\examples\\tflite_model.ipynb", "mltk\\examples\\train_model.ipynb", "mltk\\examples\\update_params.ipynb", "mltk\\examples\\view_model.ipynb", "mltk\\tutorials\\README.md", "mltk\\tutorials\\add_existing_script_to_mltk.ipynb", "mltk\\tutorials\\cloud_logging_with_wandb.ipynb", "mltk\\tutorials\\cloud_training_with_vast_ai.ipynb", "mltk\\tutorials\\fingerprint_authentication.ipynb", "mltk\\tutorials\\image_classification.ipynb", "mltk\\tutorials\\keyword_spotting_alexa.ipynb", "mltk\\tutorials\\keyword_spotting_on_off.ipynb", "mltk\\tutorials\\keyword_spotting_pacman.ipynb", "mltk\\tutorials\\keyword_spotting_with_transfer_learning.ipynb", "mltk\\tutorials\\model_debugging.ipynb", "mltk\\tutorials\\model_optimization.ipynb", "mltk\\tutorials\\onnx_to_tflite.ipynb", "mltk\\tutorials\\synthetic_audio_dataset_generation.ipynb"], "titles": ["UART Stream Data Test", "Audio Feature Generator", "Audio Utilities", "Keyword Spotting Overview", "classify_audio", "&lt;no title&gt;", "classify_image", "&lt;no title&gt;", "commander", "&lt;no title&gt;", "evaluate", "&lt;no title&gt;", "fingerprint_reader", "&lt;no title&gt;", "Command-Line", "profile", "&lt;no title&gt;", "quantize", "&lt;no title&gt;", "ssh", "&lt;no title&gt;", "summarize", "&lt;no title&gt;", "tensorboard", "&lt;no title&gt;", "train", "&lt;no title&gt;", "update_params", "&lt;no title&gt;", "view", "view_audio", "&lt;no title&gt;", "&lt;no title&gt;", "C++ Build Options", "Command-Line Development", "Audio Classifier", "BLE Audio Classifier", "Fingerprint Authenticator", "Hello World", "Image Classifier", "C++ Examples", "Model Profiler", "C++ Development", "Simplicity Studio Development", "Visual Studio Code Development", "AudioFeatureGenerator Python Wrapper", "C++ Python Wrappers", "MVP Python Wrapper", "Tensorflow-Lite Micro Python Wrapper", "API Examples", "How can I debug my model during training?", "How can I reduce my model\u2019s size?", "How do I run my model on an embedded device?", "Frequently Asked Questions", "Linux: Why isn\u2019t the GPU working?", "Where is my trained model?", "Why does the Keras (.h5) model work during evaluation but the TF-Lite (.tflite) does not?", "Why is the model not returning correct results on the embedded device?", "Windows: I am seeing a DLL error when importing Tensorflow", "Modeling Guides", "Model Archive File", "Model Evaluation", "Model Parameters", "Model Profiler", "Model Profiler Utility", "Model Quantization", "Model Search Path", "Model Specification", "Model Summary", "Model Training", "Model Training Monitor", "Model Training via SSH", "Model Visualizer", "Notebook Examples Guide", "Installation", "Environment Variables", "Quick Reference", "Settings File", "Supported Hardware", "Overview", "mltk.core.preprocess.utils.audio", "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator", "mltk.core.preprocess.audio.parallel_generator.ParallelProcessParams", "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator", "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings", "mltk.core.preprocess.utils.image", "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator", "mltk.core.preprocess.image.parallel_generator.ParallelProcessParams", "Data Preprocessing", "mltk.core.preprocess.utils.list_directory", "mltk.core.preprocess.utils.normalize", "mltk.core.preprocess.utils.tf_dataset", "Common Utilities", "mltk.datasets.accelerometer.tflm_magic_wand", "mltk.datasets.audio.background_noise.ambient", "mltk.datasets.audio.background_noise.brd2601", "mltk.datasets.audio.background_noise.esc50", "mltk.datasets.audio.direction_commands", "mltk.datasets.audio.mit_ir_survey", "mltk.datasets.audio.mlcommons.ml_commons_keywords", "mltk.datasets.audio.mlcommons.ml_commons_voice", "mltk.datasets.audio.on_off", "mltk.datasets.audio.speech_commands.speech_commands_v2", "mltk.datasets.image.cifar10", "mltk.datasets.image.fashion_mnist", "mltk.datasets.image.mnist", "mltk.datasets.image.rock_paper_scissors_v1", "mltk.datasets.image.rock_paper_scissors_v2", "Reference Datasets", "API Reference", "Keras Model", "mltk.core.AudioDatasetMixin", "mltk.core.DatasetMixin", "mltk.core.EvaluateAutoEncoderMixin", "mltk.core.EvaluateClassifierMixin", "mltk.core.EvaluateMixin", "mltk.core.ImageDatasetMixin", "MLTK Model", "mltk.core.MltkDataset", "mltk.core.MltkModel", "mltk.core.MltkModelEvent", "mltk.core.SshMixin", "mltk.core.TrainMixin", "Model Utilities", "mltk.core.WeightsAndBiasesMixin", "Common Model Architectures", "audio_example1", "audio_tf_dataset", "autoencoder_example", "basic_example", "basic_tf_dataset_example", "binary_classification", "conv1d_example", "image_example1", "image_tf_dataset", "Example Models", "siamese_contrastive", "Reference Models", "fingerprint_signature_generator", "Silicon Lab\u2019s Models", "keyword_spotting_alexa", "keyword_spotting_mobilenetv2", "keyword_spotting_on_off", "keyword_spotting_on_off_v2", "keyword_spotting_on_off_v3", "keyword_spotting_pacman", "keyword_spotting_pacman_v2", "keyword_spotting_pacman_v3", "keyword_spotting_with_transfer_learning", "rock_paper_scissors", "Tensorflow-Lite Micro Models", "tflite_micro_magic_wand", "tflite_micro_speech", "anomaly_detection", "image_classification", "TinyML Models", "keyword_spotting", "visual_wake_words", "evaluate_model", "Model Operations", "profile_model", "quantize_model", "summarize_model", "train_model", "update_model_parameters", "view_model", "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator", "Tensorflow-Lite Micro Model", "mltk.core.tflite_micro.TfliteMicroLayerError", "mltk.core.tflite_micro.TfliteMicroModel", "mltk.core.tflite_micro.TfliteMicroModelDetails", "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult", "mltk.core.tflite_micro.TfliteMicro", "mltk.core.TfliteActivation", "mltk.core.TfliteAddLayer", "mltk.core.TfliteConv2dLayer", "mltk.core.TfliteConv2DLayerOptions", "mltk.core.TfliteConvParams", "mltk.core.TfliteDepthwiseConv2dLayer", "mltk.core.TfliteDepthwiseConv2DLayerOptions", "mltk.core.TfliteDepthwiseConvParams", "mltk.core.TfliteDequantizeLayer", "FlatbufferDictionary", "mltk.core.TfliteFullyConnectedLayer", "mltk.core.TfliteFullyConnectedLayerOptions", "mltk.core.TfliteFullyConnectedParams", "Tensorflow-Lite Model", "mltk.core.TfliteLayer", "mltk.core.TfliteModel", "mltk.core.TflitePadding", "mltk.core.TfliteModelParameters", "mltk.core.TflitePooling2dLayer", "mltk.core.TflitePool2DLayerOptions", "mltk.core.TflitePoolParams", "mltk.core.TfliteQuantization", "mltk.core.TfliteQuantizeLayer", "mltk.core.TfliteReshapeLayer", "mltk.core.TfliteShape", "mltk.core.TfliteTensor", "mltk.core.TfliteTransposeConvLayer", "mltk.core.TfliteTransposeConvLayerOptions", "mltk.core.TfliteTransposeConvParams", "mltk.utils.archive", "mltk.utils.archive_downloader", "mltk.utils.audio_dataset_generator.Augmentation", "mltk.utils.audio_dataset_generator.GenerationConfig", "mltk.utils.audio_dataset_generator.AudioDatasetGenerator", "Audio Dataset Generator", "mltk.utils.audio_dataset_generator.Keyword", "mltk.utils.audio_dataset_generator.Voice", "mltk.utils.audio_dataset_generator.VoicePitch", "mltk.utils.audio_dataset_generator.VoiceRate", "mltk.utils.bin2header", "mltk.utils.cmake", "mltk.utils.gpu", "mltk.utils.hasher", "Utilities", "mltk.utils.jlink_stream.JlinkCommandStream", "mltk.utils.jlink_stream.JLinkDataStream", "J-Link Stream", "mltk.utils.jlink_stream.JlinkStream", "mltk.utils.jlink_stream.JlinkStreamOptions", "mltk.utils.logger", "mltk.utils.path", "mltk.utils.process_pool.ProcessPool", "mltk.utils.python", "Serial Reader", "mltk.utils.serial_reader.SerialReader", "mltk.utils.shell_cmd", "mltk.utils.signal_handler.SignalHandler", "mltk.utils.string_formatting", "mltk.utils.system", "UART Stream", "mltk.utils.uart_stream.UartStream", "Tutorials", "Why MLTK?", "Silicon Labs Machine Learning Toolkit (MLTK)", "Model Evaluation API Examples", "Model Profiler API Examples", "Model Quantization API Examples", "Model Summary API Examples", "TF-Lite Micro Model API Examples", "TF-Lite Model API Examples", "Model Training API Examples", "Update Model Parameters API Examples", "Model Visualizer API Examples", "Tutorials", "Add an Existing Script to the MLTK", "Cloud Logging with Weights &amp; Biases", "Cloud Training with vast.ai", "Fingerprint Authentication", "Image Classification - Rock, Paper, Scissors", "Keyword Spotting - Alexa", "Keyword Spotting - On/Off", "Keyword Spotting - Pac-Man", "Keyword Spotting with Transfer Learning", "Model Debugging", "Model Optimization for MVP Hardware Accelerator", "ONNX to TF-Lite Model Conversion", "Synthetic Audio Dataset Generation"], "terms": {"thi": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 89, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 178, 181, 182, 183, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 202, 203, 205, 206, 207, 208, 209, 213, 214, 218, 219, 220, 222, 223, 224, 225, 226, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 256, 259], "variou": [0, 1, 2, 19, 20, 34, 42, 49, 59, 60, 61, 62, 67, 69, 70, 71, 72, 78, 79, 92, 96, 98, 109, 117, 120, 121, 124, 129, 130, 134, 137, 139, 141, 142, 144, 145, 147, 148, 149, 158, 216, 234, 235, 242, 246, 247, 250, 251, 252, 253, 254, 256, 257, 258], "input": [0, 1, 8, 9, 10, 11, 35, 36, 41, 56, 61, 62, 63, 65, 67, 80, 81, 86, 90, 111, 112, 113, 114, 115, 116, 119, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 169, 172, 174, 175, 177, 178, 180, 181, 183, 185, 187, 188, 189, 191, 195, 196, 199, 201, 212, 237, 238, 239, 240, 242, 243, 244, 245, 247, 250, 251, 252, 253, 254, 255, 257, 259], "output": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 27, 28, 33, 35, 36, 41, 44, 51, 57, 61, 62, 63, 65, 68, 71, 80, 81, 83, 86, 90, 122, 124, 125, 126, 127, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 163, 164, 169, 172, 174, 175, 177, 178, 180, 181, 183, 185, 187, 188, 189, 190, 191, 195, 196, 199, 201, 206, 212, 228, 238, 240, 242, 244, 245, 249, 250, 251, 253, 254, 257], "featur": [0, 2, 14, 30, 35, 36, 46, 52, 59, 61, 62, 63, 67, 68, 70, 71, 72, 74, 78, 79, 81, 83, 84, 86, 89, 91, 96, 125, 127, 131, 140, 143, 144, 146, 147, 149, 232, 233, 235, 236, 238, 240, 245, 246, 247, 249, 250, 251, 252, 255, 257], "uartstream": [0, 49, 232, 252], "librari": [0, 1, 34, 42, 45, 46, 48, 49, 71, 81, 83, 127, 160, 166, 172, 219, 220, 225, 232, 233, 236, 252, 253, 254], "contain": [0, 1, 14, 25, 26, 27, 28, 42, 50, 55, 57, 66, 67, 68, 69, 71, 75, 76, 81, 86, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 112, 116, 119, 122, 128, 133, 136, 138, 140, 148, 149, 158, 160, 163, 169, 182, 188, 202, 206, 225, 227, 235, 243, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258], "both": [0, 39, 42, 57, 61, 68, 71, 89, 136, 138, 140, 144, 147, 225, 233, 249], "firmwar": [0, 1, 27, 28, 35, 37, 39, 57, 250, 251, 252, 253], "applic": [0, 1, 2, 4, 5, 27, 28, 33, 35, 36, 37, 38, 39, 40, 41, 42, 45, 47, 48, 51, 52, 57, 74, 78, 99, 100, 102, 122, 125, 126, 127, 134, 137, 138, 141, 142, 145, 148, 149, 152, 154, 160, 233, 235, 236, 247, 251, 253, 255, 257, 259], "plu": [0, 48, 140, 141, 142, 143, 144, 145, 146, 147, 148, 253], "python": [0, 2, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 35, 49, 50, 57, 60, 66, 67, 70, 71, 73, 75, 76, 80, 81, 83, 85, 86, 91, 92, 97, 101, 103, 109, 111, 112, 116, 119, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 164, 172, 174, 175, 178, 181, 182, 183, 187, 188, 190, 191, 195, 196, 199, 206, 213, 215, 216, 218, 219, 220, 224, 232, 233, 236, 247, 248, 249, 252, 257, 259], "script": [0, 1, 14, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 35, 42, 45, 46, 47, 48, 50, 57, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 109, 119, 121, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 163, 164, 174, 175, 178, 181, 183, 187, 190, 191, 195, 196, 199, 214, 216, 218, 219, 220, 225, 231, 232, 233, 234, 236, 238, 239, 240, 244, 245, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259], "work": [0, 1, 2, 4, 5, 15, 16, 19, 20, 25, 26, 33, 35, 36, 37, 39, 41, 44, 48, 51, 53, 57, 62, 63, 66, 68, 69, 72, 74, 81, 86, 100, 102, 105, 111, 116, 124, 129, 134, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 219, 228, 232, 235, 238, 243, 244, 245, 247, 250, 251, 252, 253, 254, 255, 257, 258, 259], "togeth": [0, 1, 102, 252], "across": [0, 91, 127, 134, 140, 143, 144, 146, 147, 224, 249, 254, 259], "see": [0, 1, 2, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 44, 49, 52, 53, 57, 59, 61, 62, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 81, 84, 89, 91, 98, 99, 102, 103, 109, 117, 119, 120, 122, 124, 126, 127, 129, 130, 131, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 160, 167, 186, 188, 202, 203, 206, 207, 208, 212, 213, 214, 215, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 235, 236, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "sourc": [0, 14, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 57, 71, 74, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 235, 236, 247, 249, 250, 251, 253, 255, 257, 258, 259], "code": [0, 33, 40, 43, 46, 50, 52, 57, 73, 74, 77, 88, 102, 108, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 176, 179, 184, 192, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 241, 242, 247, 248, 249, 250, 251, 252, 253, 254, 258, 259], "exampl": [0, 1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 35, 36, 37, 38, 39, 41, 45, 47, 48, 52, 55, 57, 74, 81, 83, 84, 91, 93, 99, 102, 103, 104, 105, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 139, 141, 142, 143, 145, 146, 148, 149, 151, 152, 158, 160, 162, 163, 164, 165, 188, 230, 233, 235, 246, 247, 251, 252, 253, 254, 255, 257, 258], "github": [0, 1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 74, 84, 88, 93, 95, 96, 106, 107, 108, 125, 126, 127, 129, 130, 132, 134, 135, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 190, 202, 203, 212, 213, 214, 215, 216, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 236, 238, 240, 241, 242, 244, 245, 247, 250, 251, 252, 253, 254, 255, 257, 258, 259], "cpp": [0, 1, 33, 34, 36, 40, 42, 43, 44, 46, 232, 233], "share": [0, 1, 33, 36, 40, 42, 43, 45, 46, 48, 57, 71, 100, 105, 136, 138, 140, 141, 144, 147, 148, 153, 154, 156, 157, 232, 233, 235, 236, 248, 249, 250, 253, 254, 257], "uart_stream": [0, 216, 232], "data_test": [0, 233], "0": [0, 1, 2, 4, 5, 6, 7, 23, 24, 25, 26, 35, 37, 39, 50, 57, 62, 67, 70, 74, 75, 80, 81, 83, 84, 85, 86, 89, 91, 98, 99, 100, 102, 103, 104, 105, 111, 112, 116, 117, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 163, 165, 169, 172, 173, 174, 175, 177, 178, 180, 181, 183, 185, 187, 188, 189, 191, 193, 195, 196, 197, 199, 201, 204, 207, 208, 214, 217, 224, 230, 231, 232, 233, 238, 240, 241, 242, 244, 245, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "mltk": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 46, 49, 50, 52, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 88, 92, 108, 109, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 186, 207, 216, 219, 226, 232, 234, 246, 248, 252, 255, 257, 258, 259], "c": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 34, 35, 36, 37, 39, 41, 43, 45, 47, 48, 52, 57, 58, 71, 74, 77, 78, 81, 102, 103, 131, 154, 172, 212, 219, 229, 232, 233, 236, 238, 239, 240, 243, 244, 245, 249, 251, 253, 254, 255, 257, 258], "develop": [0, 1, 4, 6, 7, 12, 13, 14, 15, 16, 36, 40, 45, 46, 47, 48, 57, 61, 62, 69, 71, 77, 78, 95, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 234, 236, 238, 247, 248, 250, 251, 253, 254, 257, 258, 259], "doc": [0, 1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 81, 83, 84, 91, 109, 111, 126, 127, 129, 130, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 160, 206, 224, 242, 247, 251, 252, 253, 258, 259], "set": [0, 1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 19, 20, 23, 24, 30, 31, 33, 35, 36, 44, 50, 61, 62, 66, 69, 70, 75, 80, 81, 83, 84, 86, 87, 89, 91, 102, 104, 105, 111, 112, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 171, 172, 182, 188, 190, 218, 222, 223, 225, 231, 235, 236, 239, 242, 244, 247, 250, 259], "up": [0, 2, 35, 36, 43, 62, 67, 69, 74, 81, 84, 97, 102, 126, 127, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 203, 226, 233, 234, 249, 252, 253, 254, 255, 257, 258], "your": [0, 1, 2, 4, 5, 23, 24, 30, 31, 34, 35, 36, 37, 39, 41, 43, 44, 49, 50, 52, 56, 64, 67, 69, 72, 73, 74, 77, 86, 102, 111, 112, 116, 122, 124, 125, 126, 127, 131, 133, 134, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 154, 156, 157, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "environ": [0, 1, 19, 20, 50, 66, 73, 74, 77, 91, 98, 102, 109, 121, 143, 144, 146, 223, 224, 228, 236, 247, 249, 251, 252, 253, 254, 259], "note": [0, 1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 19, 20, 23, 24, 27, 28, 30, 31, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 48, 61, 62, 63, 65, 68, 70, 71, 72, 73, 74, 77, 81, 83, 84, 86, 91, 111, 112, 113, 114, 116, 119, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 166, 172, 174, 175, 178, 181, 183, 187, 191, 195, 196, 199, 206, 214, 218, 219, 220, 222, 224, 225, 227, 232, 233, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 250, 252, 254, 255, 256, 257, 258], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 171, 172, 174, 175, 178, 181, 182, 183, 186, 187, 188, 189, 190, 191, 195, 196, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "need": [0, 1, 15, 16, 17, 18, 21, 22, 23, 24, 29, 32, 34, 35, 36, 43, 44, 45, 47, 48, 51, 52, 57, 59, 62, 63, 67, 68, 70, 71, 72, 81, 86, 117, 122, 127, 129, 130, 131, 132, 133, 134, 136, 138, 140, 142, 143, 144, 146, 147, 148, 151, 152, 172, 188, 233, 238, 240, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "built": [0, 1, 2, 4, 5, 6, 7, 12, 13, 34, 35, 36, 37, 38, 39, 41, 43, 44, 52, 57, 63, 67, 68, 69, 72, 74, 120, 123, 125, 127, 134, 143, 146, 160, 162, 166, 236, 238, 240, 245, 247, 250, 251, 252, 253, 254, 255, 258], "embed": [0, 1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 23, 24, 27, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 53, 56, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 76, 78, 79, 129, 130, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 159, 160, 216, 217, 219, 220, 226, 232, 233, 234, 236, 238, 242, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258], "1": [0, 1, 4, 5, 6, 7, 10, 11, 19, 20, 23, 24, 37, 39, 64, 67, 74, 75, 77, 81, 83, 84, 86, 89, 91, 97, 99, 100, 101, 103, 105, 106, 107, 111, 112, 113, 114, 116, 117, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 172, 173, 177, 180, 182, 188, 189, 198, 207, 214, 218, 223, 224, 225, 231, 232, 233, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "connect": [0, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 19, 20, 27, 28, 36, 37, 39, 43, 44, 63, 64, 72, 77, 153, 160, 184, 185, 217, 220, 227, 233, 238, 249, 250, 251, 252, 253, 254, 255, 257], "support": [0, 2, 6, 7, 10, 11, 12, 13, 15, 16, 19, 20, 25, 26, 27, 28, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 48, 52, 57, 58, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 77, 86, 102, 111, 112, 116, 122, 136, 140, 144, 147, 152, 158, 160, 163, 166, 169, 172, 206, 234, 236, 238, 240, 242, 245, 247, 248, 249, 250, 251, 253, 254, 255, 257, 259], "board": [0, 1, 4, 6, 7, 12, 13, 14, 15, 16, 35, 36, 37, 39, 44, 77, 95, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 238, 249, 250, 251, 252, 253, 254, 257], "e": [0, 1, 2, 4, 5, 10, 11, 14, 15, 16, 23, 24, 25, 26, 27, 28, 33, 34, 36, 37, 39, 41, 43, 44, 45, 47, 48, 50, 51, 52, 56, 57, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 78, 81, 83, 84, 86, 89, 91, 98, 102, 103, 104, 105, 111, 112, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 195, 196, 199, 201, 207, 208, 212, 213, 216, 224, 225, 226, 229, 230, 235, 237, 238, 239, 240, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "g": [0, 1, 2, 4, 5, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25, 26, 27, 28, 33, 34, 37, 39, 41, 43, 44, 45, 47, 48, 50, 52, 56, 57, 60, 62, 64, 66, 67, 69, 70, 71, 74, 75, 78, 81, 83, 86, 89, 91, 98, 103, 104, 105, 111, 112, 116, 118, 119, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 163, 172, 173, 182, 189, 190, 207, 208, 212, 216, 225, 226, 229, 230, 244, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259], "brd2601b": 0, "pc": [0, 1, 4, 5, 6, 7, 12, 13, 14, 34, 42, 73, 140, 141, 142, 143, 144, 145, 146, 147, 148, 247, 250, 251, 252, 254, 256, 258], "2": [0, 1, 19, 20, 23, 24, 35, 37, 50, 64, 67, 73, 74, 75, 78, 84, 86, 91, 96, 105, 111, 112, 116, 117, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 171, 173, 190, 207, 214, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "creat": [0, 1, 2, 10, 11, 19, 20, 33, 35, 36, 37, 39, 41, 43, 45, 47, 48, 49, 50, 55, 57, 59, 60, 61, 65, 67, 69, 71, 73, 74, 78, 79, 81, 84, 86, 91, 111, 116, 117, 119, 121, 122, 126, 127, 129, 130, 132, 134, 135, 136, 140, 143, 144, 146, 147, 148, 163, 171, 190, 214, 215, 222, 223, 224, 225, 235, 247, 248, 255, 256, 259], "modifi": [0, 17, 18, 27, 28, 35, 36, 37, 39, 41, 45, 47, 48, 62, 65, 68, 78, 120, 122, 141, 142, 145, 149, 153, 164, 235, 239, 242, 244, 248, 250, 251, 252, 253, 254, 257], "file": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 45, 47, 48, 50, 52, 55, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 94, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 111, 116, 119, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 165, 167, 172, 182, 186, 188, 190, 202, 203, 206, 212, 215, 222, 223, 225, 227, 228, 234, 235, 236, 237, 239, 240, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 259], "repo": [0, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 52, 78, 157, 166, 172, 232, 233, 252], "root": [0, 19, 20, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 52, 66, 71, 74, 78, 91, 109, 117, 119, 140, 144, 147, 202, 203, 213, 224, 249, 252], "user_opt": [0, 33, 34, 35, 36, 37, 39, 41, 45, 47, 48, 52, 78, 213, 252], "cmake": [0, 33, 38, 42, 78, 252], "add": [0, 1, 2, 27, 28, 33, 34, 35, 36, 37, 39, 41, 44, 45, 47, 48, 50, 52, 57, 61, 65, 67, 69, 70, 81, 82, 84, 87, 89, 91, 119, 122, 126, 127, 129, 130, 131, 133, 134, 136, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 154, 164, 172, 174, 188, 189, 190, 213, 222, 223, 224, 234, 248, 250, 252, 253, 254, 255, 256, 257, 258], "follow": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 39, 40, 41, 42, 43, 44, 46, 51, 53, 54, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 88, 89, 91, 92, 109, 111, 112, 113, 114, 115, 116, 117, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 167, 171, 186, 190, 207, 216, 219, 223, 226, 232, 234, 235, 236, 237, 238, 241, 242, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "mltk_set": [0, 33, 35, 36, 37, 39, 41, 44, 45, 47, 48, 52, 78, 252], "mltk_target": [0, 45, 47, 48, 213], "mltk_uart_stream_data_test": 0, "mltk_platform_nam": [0, 44, 78, 252], "brd2601": [0, 33, 36, 37, 39, 44, 140, 143, 144, 146, 147, 238, 251, 252, 253, 254, 255], "chang": [0, 27, 28, 35, 36, 56, 64, 67, 69, 70, 71, 86, 91, 100, 102, 122, 124, 136, 140, 141, 142, 144, 145, 147, 148, 149, 188, 228, 242, 247, 248, 249, 251, 252, 253, 255, 257, 258, 259], "platform": [0, 2, 33, 36, 41, 42, 43, 44, 78, 160, 207, 213, 236, 238, 250, 251, 252, 253, 254], "": [0, 1, 4, 5, 6, 7, 8, 10, 11, 14, 15, 16, 17, 18, 21, 22, 23, 24, 27, 28, 29, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 50, 52, 53, 56, 57, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 81, 83, 84, 86, 91, 95, 97, 99, 100, 101, 102, 109, 111, 112, 116, 119, 121, 122, 123, 124, 126, 127, 128, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 164, 166, 168, 169, 171, 172, 174, 175, 178, 181, 182, 183, 187, 188, 190, 191, 195, 196, 199, 203, 206, 209, 215, 222, 223, 224, 225, 228, 230, 233, 234, 236, 238, 239, 240, 242, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "name": [0, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 49, 50, 52, 55, 59, 60, 62, 63, 66, 68, 69, 70, 71, 75, 77, 78, 81, 86, 89, 91, 102, 109, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 165, 166, 168, 170, 171, 172, 174, 175, 178, 181, 182, 183, 187, 188, 190, 191, 195, 196, 199, 203, 206, 209, 212, 213, 218, 220, 222, 223, 224, 225, 227, 231, 233, 234, 235, 237, 238, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259], "necessari": [0, 1, 34, 41, 43, 44, 50, 70, 71, 73, 74, 80, 81, 83, 116, 122, 123, 127, 128, 131, 133, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 154, 156, 157, 188, 206, 223, 224, 225, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 249, 252, 253, 254, 257, 258, 259], "3": [0, 1, 4, 5, 19, 20, 35, 37, 67, 73, 74, 75, 86, 99, 103, 105, 116, 119, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 173, 214, 225, 230, 239, 243, 247, 249, 250, 251, 253, 254, 255, 257, 258], "invok": [0, 1, 19, 20, 45, 46, 61, 62, 63, 65, 67, 69, 70, 71, 91, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 143, 144, 146, 147, 149, 158, 169, 172, 188, 206, 213, 224, 227, 228, 235, 247, 249, 250, 251, 252, 253, 255, 256], "target": [0, 1, 4, 5, 8, 9, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 59, 62, 63, 64, 80, 81, 86, 111, 112, 116, 122, 213, 234, 236, 249, 251, 252, 253, 254, 257, 258], "mltk_uart_stream_data_test_download": 0, "which": [0, 1, 6, 7, 12, 13, 15, 16, 23, 24, 25, 26, 30, 31, 35, 36, 37, 39, 41, 42, 44, 46, 47, 50, 51, 52, 55, 57, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 74, 81, 86, 89, 91, 98, 100, 102, 105, 111, 112, 116, 119, 122, 125, 126, 127, 131, 134, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 163, 182, 188, 190, 218, 224, 227, 231, 233, 235, 237, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "build": [0, 15, 16, 17, 18, 21, 22, 27, 28, 29, 32, 42, 43, 52, 63, 67, 68, 69, 72, 74, 78, 100, 120, 122, 123, 125, 127, 128, 129, 130, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 160, 162, 165, 213, 235, 236, 238, 240, 245, 247, 248, 249, 251, 253, 257, 259], "program": [0, 4, 5, 6, 7, 12, 13, 27, 28, 35, 37, 39, 44, 52, 60, 65, 67, 69, 70, 76, 143, 146, 250, 251, 252, 253, 254, 255, 259], "4": [0, 19, 20, 37, 39, 64, 74, 75, 81, 86, 91, 98, 99, 102, 105, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 173, 206, 214, 241, 243, 244, 247, 249, 251, 252, 253, 254, 255, 257, 258, 259], "run": [0, 1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 25, 26, 33, 46, 47, 48, 49, 50, 53, 55, 58, 59, 60, 61, 62, 63, 65, 71, 73, 74, 75, 81, 86, 102, 109, 111, 112, 113, 114, 115, 116, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 170, 172, 188, 219, 220, 222, 224, 231, 232, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 248, 249, 259], "from": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 57, 58, 60, 61, 62, 63, 64, 65, 68, 69, 72, 73, 74, 80, 81, 82, 83, 84, 86, 87, 94, 96, 98, 99, 102, 103, 105, 111, 112, 116, 117, 119, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 144, 145, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 163, 164, 167, 171, 172, 174, 175, 178, 181, 183, 186, 187, 188, 190, 191, 195, 196, 199, 202, 203, 207, 208, 212, 214, 216, 218, 219, 220, 222, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 256, 257, 259], "virtual": [0, 19, 20, 50, 71, 73, 74, 121, 247, 249, 251, 252, 256], "py": [0, 1, 2, 17, 18, 27, 28, 30, 31, 35, 36, 43, 44, 50, 55, 60, 61, 66, 67, 69, 74, 75, 102, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 162, 163, 165, 202, 203, 207, 212, 213, 214, 215, 219, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 238, 239, 240, 243, 245, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "verifi": [0, 8, 9, 74, 203, 242, 249, 251, 252, 253, 259], "transfer": [0, 139, 148, 216, 218, 219, 220, 233, 234, 253], "between": [0, 4, 5, 6, 7, 42, 45, 46, 57, 61, 81, 86, 91, 111, 112, 116, 125, 129, 130, 131, 136, 138, 140, 141, 143, 144, 145, 146, 147, 158, 216, 219, 220, 224, 227, 232, 233, 235, 236, 237, 247, 250, 251, 253, 254, 257], "dev": [0, 1, 2, 34, 43, 44, 71, 78, 140, 143, 144, 145, 146, 147, 252, 253, 254], "us": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 91, 96, 97, 98, 99, 100, 101, 102, 104, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 166, 169, 171, 172, 175, 178, 182, 183, 186, 188, 190, 199, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 222, 224, 225, 227, 228, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 254, 256, 257, 258, 259], "audiofeaturegener": [1, 4, 5, 30, 31, 42, 57, 62, 80, 81, 84, 88, 111, 119, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 253], "i": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 53, 54, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 83, 84, 85, 86, 89, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 167, 169, 171, 172, 174, 175, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "softwar": [1, 43, 44, 51, 62, 125, 156, 236, 249, 258], "convert": [1, 2, 8, 9, 35, 36, 37, 39, 41, 46, 52, 56, 57, 61, 68, 69, 76, 80, 81, 83, 84, 85, 86, 88, 90, 91, 96, 99, 100, 102, 116, 120, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 157, 188, 213, 225, 227, 230, 234, 235, 236, 238, 239, 240, 242, 243, 245, 247, 252, 254, 255, 259], "stream": [1, 2, 4, 5, 35, 49, 62, 84, 98, 123, 140, 141, 143, 144, 146, 216, 217, 218, 220, 222, 233, 235, 236, 252, 253, 254, 257], "spectrogram": [1, 4, 5, 14, 30, 31, 42, 45, 46, 57, 62, 80, 81, 83, 84, 88, 111, 125, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 235, 236, 250, 251, 252, 254, 257], "ar": [1, 2, 4, 5, 6, 7, 10, 11, 14, 17, 18, 19, 20, 25, 26, 27, 28, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 48, 49, 52, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 81, 83, 84, 86, 88, 89, 91, 92, 97, 99, 100, 101, 102, 103, 104, 108, 111, 112, 116, 117, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 155, 158, 159, 160, 164, 171, 172, 182, 188, 190, 206, 207, 216, 223, 224, 225, 235, 236, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "classif": [1, 4, 5, 6, 7, 12, 13, 35, 36, 57, 67, 114, 117, 126, 127, 129, 130, 131, 133, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 154, 155, 156, 157, 158, 234, 236, 247, 250, 252, 253, 254, 255, 257, 258], "machin": [1, 3, 19, 20, 23, 24, 35, 36, 37, 51, 59, 62, 67, 69, 71, 72, 78, 79, 100, 102, 121, 127, 134, 140, 143, 144, 146, 147, 234, 235, 247, 248, 252, 255, 256, 257, 258, 259], "learn": [1, 3, 23, 24, 34, 35, 36, 37, 43, 44, 51, 59, 62, 67, 69, 70, 71, 72, 78, 79, 100, 102, 122, 126, 127, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 156, 157, 234, 235, 247, 248, 249, 252, 256, 257, 258, 259], "model": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 40, 42, 45, 46, 47, 48, 49, 53, 73, 74, 75, 77, 79, 81, 84, 86, 88, 91, 99, 100, 102, 108, 109, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 124, 158, 160, 162, 163, 164, 165, 166, 169, 170, 171, 172, 174, 175, 178, 181, 182, 183, 187, 188, 190, 191, 195, 196, 198, 199, 223, 226, 234, 236, 247, 248, 259], "make": [1, 14, 27, 28, 45, 47, 48, 51, 61, 67, 102, 125, 127, 129, 130, 131, 136, 140, 143, 144, 146, 147, 148, 222, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259], "predict": [1, 61, 81, 86, 113, 114, 115, 136, 138, 158, 188, 235, 237, 242, 250, 251, 253, 254, 255, 257, 258], "content": [1, 8, 9, 36, 71, 76, 99, 122, 169, 212, 235, 236, 256, 258], "A": [1, 2, 6, 7, 12, 13, 23, 24, 36, 37, 39, 41, 44, 51, 60, 61, 65, 70, 71, 73, 81, 84, 86, 89, 91, 102, 111, 112, 116, 119, 120, 122, 124, 125, 126, 127, 129, 130, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 162, 169, 182, 186, 188, 209, 224, 228, 233, 235, 238, 241, 242, 247, 249, 250, 251, 252, 253, 254, 258, 259], "common": [1, 2, 33, 35, 36, 51, 57, 62, 65, 67, 76, 88, 91, 96, 98, 102, 105, 109, 137, 140, 141, 142, 145, 148, 149, 225, 239, 244, 250, 251, 252, 253, 257, 258], "case": [1, 4, 5, 6, 7, 12, 13, 21, 22, 39, 51, 57, 62, 65, 67, 69, 80, 81, 84, 85, 86, 99, 111, 112, 116, 118, 122, 125, 128, 140, 143, 144, 148, 153, 158, 171, 172, 188, 190, 203, 208, 213, 223, 225, 239, 244, 249, 251, 252, 253, 255, 256, 259], "keyword": [1, 2, 4, 5, 10, 11, 17, 18, 25, 26, 35, 36, 40, 65, 97, 98, 101, 102, 119, 120, 122, 125, 126, 127, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 155, 156, 158, 205, 206, 207, 209, 216, 225, 234, 249, 250, 251, 259], "spot": [1, 2, 4, 5, 35, 36, 98, 99, 125, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 155, 156, 234, 249, 257, 259], "refer": [1, 2, 4, 5, 6, 7, 12, 13, 15, 16, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 49, 52, 56, 58, 64, 67, 73, 74, 80, 81, 83, 91, 98, 110, 111, 112, 113, 114, 115, 116, 118, 119, 122, 136, 138, 152, 153, 155, 157, 160, 169, 172, 174, 175, 178, 181, 183, 187, 188, 191, 194, 195, 196, 198, 199, 206, 222, 225, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259], "more": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 49, 51, 52, 56, 57, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 84, 86, 89, 91, 99, 102, 103, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 129, 130, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 160, 167, 186, 188, 194, 206, 207, 224, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "detail": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 49, 52, 56, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 84, 89, 91, 98, 99, 102, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122, 129, 130, 138, 143, 144, 146, 147, 148, 153, 158, 160, 169, 170, 188, 194, 203, 206, 207, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "how": [1, 2, 3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 34, 35, 36, 37, 38, 39, 41, 43, 44, 49, 53, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 71, 72, 73, 74, 79, 86, 91, 98, 111, 112, 116, 119, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259], "detect": [1, 2, 3, 4, 5, 6, 7, 35, 36, 37, 39, 40, 61, 62, 83, 84, 99, 125, 126, 127, 128, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 155, 157, 229, 234, 237, 240, 245, 250, 251, 252, 254, 257, 259], "tutori": [1, 2, 6, 7, 12, 13, 35, 36, 37, 39, 59, 61, 69, 71, 73, 97, 101, 124, 129, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 206, 207, 235, 247, 248, 249, 252, 256, 259], "complet": [1, 2, 17, 18, 19, 20, 25, 26, 55, 59, 61, 62, 64, 65, 67, 69, 71, 74, 76, 126, 138, 140, 143, 144, 146, 147, 163, 206, 224, 226, 239, 240, 244, 245, 247, 248, 249, 250, 251, 253, 254, 255, 257], "guid": [1, 2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 36, 37, 39, 41, 43, 44, 49, 54, 61, 62, 63, 64, 69, 74, 77, 84, 112, 113, 114, 115, 119, 122, 127, 129, 130, 134, 136, 138, 140, 143, 144, 146, 147, 148, 158, 160, 162, 163, 164, 165, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258], "an": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 23, 24, 25, 26, 29, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 48, 49, 53, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 73, 74, 76, 77, 79, 80, 81, 84, 85, 86, 89, 91, 95, 96, 98, 111, 112, 116, 117, 119, 120, 122, 123, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 158, 159, 160, 163, 165, 171, 172, 173, 182, 188, 189, 190, 203, 208, 213, 215, 216, 220, 223, 225, 226, 227, 228, 233, 234, 235, 236, 237, 238, 250, 251, 252, 254, 255, 256, 258, 259], "ml": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 25, 26, 59, 61, 65, 68, 69, 72, 125, 128, 133, 138, 140, 144, 147, 149, 156, 160, 234, 235, 236, 247, 250, 251, 253, 254, 257, 259], "There": [1, 52, 57, 71, 140, 144, 147, 224, 236, 249, 250, 251, 252, 253, 254, 255], "three": [1, 39, 42, 63, 71, 74, 91, 102, 148, 224, 234, 255], "main": [1, 43, 81, 93, 141, 142, 145, 148, 151, 212, 224, 254, 258], "part": [1, 47, 74, 81, 99, 102, 111, 112, 116, 140, 141, 143, 144, 146, 247, 250, 251, 252, 253, 255, 258, 259], "provid": [1, 2, 3, 4, 5, 10, 11, 14, 15, 16, 19, 20, 21, 22, 23, 24, 27, 28, 29, 32, 45, 48, 49, 59, 63, 66, 67, 68, 70, 71, 73, 76, 79, 80, 83, 84, 86, 89, 91, 94, 96, 97, 101, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 166, 169, 171, 182, 190, 206, 207, 208, 215, 227, 234, 236, 246, 247, 250, 251, 252, 253, 254, 257, 258, 259], "packag": [1, 2, 33, 34, 43, 45, 47, 48, 66, 71, 73, 75, 81, 97, 101, 109, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 167, 186, 206, 207, 216, 219, 224, 225, 232, 236, 247, 248, 249, 252, 257, 258, 259], "wrap": [1, 64, 86, 172, 225], "host": [1, 19, 20, 23, 24, 29, 32, 33, 42, 44, 46, 64, 165, 235, 249], "graphic": [1, 2, 61, 248], "view": [1, 12, 13, 14, 17, 18, 23, 24, 30, 31, 32, 35, 36, 37, 38, 39, 41, 44, 49, 59, 70, 74, 76, 84, 126, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 159, 165, 171, 190, 235, 236, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "real": [1, 2, 4, 5, 14, 30, 31, 40, 61, 62, 84, 86, 98, 235, 251, 252, 253, 254, 257], "time": [1, 2, 4, 5, 6, 7, 14, 15, 16, 30, 31, 35, 37, 40, 51, 61, 62, 63, 67, 68, 69, 70, 72, 73, 81, 84, 86, 102, 111, 112, 116, 125, 126, 127, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 159, 160, 165, 171, 172, 190, 206, 218, 222, 223, 224, 225, 226, 227, 230, 233, 234, 235, 236, 238, 240, 242, 245, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 259], "document": [1, 2, 7, 13, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 52, 59, 61, 69, 70, 71, 73, 83, 110, 111, 112, 124, 148, 236, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258], "about": [1, 14, 34, 35, 36, 39, 42, 43, 44, 48, 59, 63, 65, 68, 70, 71, 81, 122, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 169, 218, 240, 248, 250, 252, 255], "tool": [1, 8, 9, 23, 24, 35, 36, 37, 39, 41, 42, 52, 70, 71, 72, 102, 234, 236, 247, 250, 251, 252, 253, 254, 256, 257, 258, 259], "offer": [1, 2, 74, 92, 235, 236, 246, 247, 249, 251, 253, 254, 257, 259], "These": [1, 35, 36, 47, 49, 51, 52, 62, 67, 69, 77, 92, 102, 119, 122, 126, 127, 129, 130, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 235, 238, 239, 240, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 259], "select": [1, 15, 16, 33, 35, 36, 37, 38, 39, 41, 43, 50, 64, 73, 81, 86, 89, 91, 96, 111, 112, 116, 140, 144, 147, 188, 245, 251, 256], "view_audio": [1, 2, 14, 31, 141, 142, 145, 148, 250, 251, 252, 253, 254, 257], "command": [1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 16, 19, 20, 23, 24, 27, 28, 30, 31, 42, 43, 44, 50, 54, 55, 59, 60, 64, 66, 70, 73, 74, 78, 84, 109, 113, 117, 119, 121, 122, 124, 213, 217, 223, 228, 232, 233, 234, 236, 238, 240, 245, 248, 249, 255, 256, 257], "save": [1, 12, 13, 25, 26, 37, 39, 69, 80, 81, 85, 86, 89, 111, 116, 120, 122, 124, 126, 136, 138, 143, 146, 188, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 251, 254, 255, 258], "specif": [1, 8, 9, 14, 19, 20, 25, 26, 30, 31, 33, 37, 39, 41, 44, 49, 50, 55, 57, 59, 60, 63, 65, 66, 68, 70, 71, 72, 74, 77, 84, 109, 112, 113, 114, 117, 119, 121, 123, 125, 135, 137, 158, 160, 163, 172, 174, 175, 177, 178, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 195, 196, 199, 201, 235, 236, 238, 239, 240, 242, 243, 245, 246, 247, 248, 250, 252, 254, 256, 258], "train": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 35, 36, 42, 45, 46, 49, 51, 52, 53, 54, 57, 59, 60, 61, 62, 65, 66, 73, 74, 76, 77, 81, 86, 88, 89, 93, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 112, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 140, 141, 142, 144, 145, 147, 148, 149, 151, 153, 154, 156, 157, 158, 159, 162, 163, 164, 165, 209, 234, 236, 237, 239, 242, 244, 247, 256, 258, 259], "intern": [1, 2, 43, 44, 57, 69, 70, 71, 81, 83, 86, 96, 119, 124, 141, 142, 144, 145, 148, 158, 224, 243, 248, 252, 253], "dynam": [1, 35, 41, 62, 67, 69, 83, 84, 127, 140, 143, 144, 145, 146, 147, 249, 251, 252, 253, 254, 255], "dataset": [1, 6, 7, 10, 11, 12, 13, 25, 26, 57, 65, 69, 71, 76, 77, 81, 86, 89, 91, 109, 111, 112, 113, 114, 115, 116, 117, 118, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 149, 151, 158, 206, 216, 234, 240, 242, 245, 247, 248, 255, 257], "At": [1, 35, 36, 43, 62, 67, 69, 73, 100, 122, 127, 129, 130, 134, 140, 141, 143, 144, 146, 147, 190, 242, 247, 249, 251, 252, 253, 255, 259], "end": [1, 27, 28, 35, 37, 39, 41, 52, 61, 65, 67, 69, 80, 85, 98, 102, 111, 112, 116, 119, 120, 122, 124, 129, 130, 134, 140, 141, 143, 144, 153, 156, 234, 235, 247, 249, 251, 253, 255, 256, 257, 259], "emb": [1, 59, 62, 235, 236, 248, 251, 253], "tflite": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 29, 32, 33, 35, 36, 37, 39, 40, 41, 47, 48, 52, 53, 55, 57, 60, 62, 63, 64, 67, 68, 69, 72, 74, 75, 84, 93, 109, 117, 119, 120, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 158, 160, 162, 164, 165, 166, 167, 169, 172, 174, 175, 176, 178, 179, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 195, 196, 198, 199, 200, 234, 235, 240, 244, 245, 247, 250, 251, 252, 253, 254, 257, 258], "copi": [1, 19, 20, 35, 36, 37, 39, 41, 43, 52, 71, 74, 84, 86, 102, 140, 141, 143, 144, 146, 147, 169, 171, 190, 205, 214, 223, 247, 249, 250, 251, 253, 254, 257, 259], "project": [1, 23, 24, 35, 36, 37, 38, 39, 41, 43, 45, 47, 48, 52, 70, 96, 124, 213, 235, 251, 253, 257], "pars": [1, 67, 235], "correspond": [1, 2, 4, 5, 33, 37, 62, 71, 81, 86, 89, 91, 103, 104, 105, 111, 112, 116, 119, 122, 123, 126, 127, 128, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 158, 162, 163, 188, 206, 207, 225, 233, 235, 250, 251, 252, 253, 254, 258, 259], "header": [1, 8, 9, 37, 39, 41, 160, 212, 252, 253], "imag": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 24, 40, 57, 61, 67, 70, 81, 82, 83, 88, 91, 111, 116, 119, 122, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 146, 147, 149, 153, 154, 155, 156, 157, 158, 234, 237, 240, 242, 245, 247, 250, 252, 253, 254, 255, 258], "load": [1, 2, 4, 5, 10, 11, 15, 16, 17, 18, 21, 22, 25, 26, 29, 32, 33, 35, 41, 45, 47, 48, 50, 52, 58, 60, 67, 69, 76, 81, 86, 89, 91, 98, 102, 103, 104, 105, 106, 107, 111, 112, 116, 118, 119, 120, 122, 123, 125, 127, 128, 129, 130, 134, 136, 138, 140, 141, 143, 144, 145, 146, 147, 148, 156, 158, 160, 162, 163, 165, 169, 170, 172, 186, 188, 190, 206, 207, 212, 225, 226, 235, 238, 239, 240, 243, 245, 247, 249, 250, 253, 257, 259], "onto": [1, 60, 64, 249, 250, 258], "tensorflow": [1, 15, 16, 23, 24, 33, 35, 36, 39, 41, 42, 44, 46, 47, 52, 53, 54, 59, 61, 62, 63, 69, 70, 74, 75, 80, 85, 91, 102, 105, 109, 110, 111, 112, 116, 120, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 163, 188, 190, 214, 224, 234, 236, 238, 239, 241, 242, 243, 244, 247, 249, 251, 252, 253, 254, 258], "lite": [1, 15, 16, 21, 22, 33, 35, 36, 39, 41, 42, 46, 47, 49, 52, 53, 57, 61, 62, 63, 69, 109, 120, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 160, 166, 169, 170, 172, 190, 234, 236, 238, 239, 243, 244, 247, 254], "micro": [1, 15, 16, 33, 35, 36, 39, 41, 42, 46, 47, 49, 52, 62, 63, 65, 67, 69, 76, 81, 83, 109, 134, 137, 151, 152, 166, 169, 170, 172, 240, 242, 244, 245, 247, 253, 254, 258], "interpret": [1, 39, 41, 42, 46, 48, 50, 52, 65, 73, 76, 109, 134, 136, 166, 167, 169, 170, 172, 188, 224, 235, 253, 256], "On": [1, 4, 5, 6, 7, 12, 13, 35, 37, 39, 43, 71, 77, 102, 139, 142, 143, 144, 234, 249, 251], "runtim": [1, 2, 35, 36, 41, 45, 47, 48, 57, 62, 63, 77, 122, 126, 128, 129, 130, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 170, 238, 240, 241, 244, 245, 247, 250, 251, 253, 254, 257, 258], "read": [1, 8, 9, 15, 16, 37, 39, 75, 80, 81, 83, 85, 99, 100, 109, 127, 129, 130, 134, 140, 143, 144, 146, 147, 216, 218, 220, 226, 227, 232, 233, 247, 250, 251, 253, 258], "microphon": [1, 4, 5, 14, 35, 36, 40, 62, 67, 95, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 235, 251, 252, 253, 254, 257], "b": [1, 17, 18, 21, 22, 29, 32, 34, 71, 81, 84, 129, 130, 131, 133, 136, 138, 149, 242, 247, 248, 249, 253], "sent": [1, 36, 206, 218, 233, 249, 252, 253, 254, 259], "where": [1, 12, 13, 14, 17, 18, 19, 20, 27, 28, 35, 36, 37, 39, 41, 52, 53, 60, 64, 65, 70, 71, 77, 81, 86, 89, 91, 98, 100, 102, 119, 120, 126, 128, 133, 136, 138, 140, 144, 147, 149, 158, 160, 169, 182, 190, 202, 203, 206, 207, 248, 249, 250, 253, 258, 259], "exact": [1, 45, 57, 68, 81, 86, 152, 224, 235, 249, 250, 253, 258], "same": [1, 10, 11, 17, 18, 23, 24, 25, 26, 35, 36, 37, 39, 45, 55, 57, 61, 65, 67, 69, 70, 86, 89, 102, 111, 112, 116, 117, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 188, 189, 202, 209, 225, 235, 237, 238, 240, 241, 242, 244, 247, 249, 250, 251, 252, 253, 254, 257, 258, 259], "algorithm": [1, 42, 45, 46, 57, 61, 141, 142, 145, 148, 149, 203, 215, 235, 250, 251, 253, 254], "were": [1, 47, 57, 61, 102, 119, 122, 143, 144, 146, 150, 153, 160, 227, 235, 238, 239, 240, 242, 243, 245, 251, 252, 253, 254, 257, 258], "dure": [1, 10, 11, 17, 18, 23, 24, 25, 26, 33, 42, 53, 54, 57, 60, 62, 67, 70, 81, 88, 109, 110, 111, 112, 113, 114, 115, 116, 120, 122, 127, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 158, 227, 234, 235, 248, 249, 251, 252, 253, 254, 255, 256, 258], "classifi": [1, 4, 5, 6, 7, 14, 40, 52, 61, 62, 67, 96, 111, 116, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 235, 240, 245, 250, 251, 254, 255, 257, 258], "d": [1, 4, 5, 12, 13, 15, 16, 27, 28, 81, 84, 86, 127, 134, 140, 143, 144, 146, 147, 171, 190, 225, 230, 233, 253, 259], "notifi": [1, 36, 40, 248], "also": [1, 2, 4, 5, 19, 20, 27, 28, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 49, 51, 55, 57, 60, 61, 62, 63, 65, 67, 68, 70, 71, 72, 74, 78, 80, 81, 91, 96, 100, 102, 117, 122, 127, 128, 129, 130, 131, 132, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 172, 188, 225, 232, 235, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "ensur": [1, 14, 25, 26, 34, 43, 44, 54, 56, 58, 69, 70, 71, 74, 89, 102, 111, 112, 116, 126, 127, 133, 134, 140, 141, 142, 143, 144, 145, 146, 147, 149, 152, 172, 233, 235, 242, 243, 247, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259], "type": [1, 39, 50, 56, 62, 63, 65, 67, 68, 75, 80, 81, 83, 84, 85, 86, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 112, 113, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 209, 212, 213, 214, 215, 217, 218, 220, 222, 223, 224, 225, 227, 228, 230, 231, 233, 237, 238, 240, 241, 242, 244, 245, 247, 249, 250, 251, 253, 254, 255, 257, 258, 259], "wa": [1, 4, 5, 19, 20, 35, 36, 37, 61, 62, 63, 71, 83, 91, 98, 102, 120, 124, 136, 138, 140, 142, 143, 144, 146, 147, 148, 149, 154, 156, 160, 166, 171, 188, 196, 218, 227, 235, 237, 242, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "should": [1, 2, 6, 7, 10, 11, 12, 13, 37, 39, 43, 44, 50, 57, 61, 62, 65, 66, 67, 69, 70, 71, 73, 74, 75, 81, 84, 86, 89, 91, 102, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 123, 125, 126, 129, 130, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 158, 160, 188, 207, 220, 224, 233, 235, 240, 245, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "allow": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 19, 20, 25, 26, 27, 28, 30, 31, 33, 39, 41, 42, 45, 46, 47, 48, 52, 57, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 81, 85, 86, 88, 89, 91, 119, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 163, 166, 167, 172, 182, 186, 190, 207, 216, 219, 220, 224, 225, 226, 232, 233, 234, 235, 242, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259], "better": [1, 67, 70, 122, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 247, 249, 250, 251, 252, 253, 254, 255, 257, 259], "perform": [1, 10, 11, 14, 35, 36, 40, 41, 61, 65, 86, 96, 100, 111, 112, 116, 122, 127, 129, 130, 134, 141, 142, 145, 148, 158, 188, 247, 250, 251, 252, 253, 254, 255, 257, 259], "automat": [1, 4, 5, 6, 7, 12, 13, 15, 16, 17, 18, 23, 24, 33, 35, 36, 37, 39, 41, 44, 51, 52, 57, 60, 65, 67, 70, 71, 81, 85, 86, 89, 91, 111, 112, 116, 118, 119, 122, 124, 127, 129, 130, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 160, 188, 203, 206, 212, 214, 215, 224, 227, 235, 247, 248, 249, 250, 251, 252, 253], "lock": [1, 224, 235], "step": [1, 33, 44, 50, 62, 71, 73, 74, 81, 84, 86, 111, 112, 113, 114, 115, 116, 122, 124, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 188, 235, 248, 250, 251, 252, 253, 254, 255, 256, 257], "design": [1, 35, 36, 37, 102, 129, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 235, 250, 251, 254, 255, 257, 258], "onli": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 19, 20, 27, 28, 33, 35, 36, 37, 39, 41, 44, 57, 62, 63, 65, 67, 68, 71, 72, 75, 80, 81, 86, 89, 91, 102, 111, 112, 113, 114, 116, 118, 119, 122, 123, 124, 125, 127, 129, 130, 131, 134, 138, 140, 141, 142, 143, 144, 146, 147, 148, 153, 158, 160, 164, 172, 188, 189, 203, 206, 208, 213, 218, 223, 231, 233, 236, 238, 240, 242, 244, 245, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "distribut": [1, 59, 60, 62, 71, 86, 235, 236, 249, 255, 258], "singl": [1, 33, 44, 50, 60, 81, 86, 102, 188, 224, 225, 249, 256, 259], "come": [1, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 64, 67, 70, 108, 137, 141, 145, 174, 175, 178, 181, 183, 187, 191, 195, 196, 199, 216, 247, 249, 251, 253, 256, 257, 258], "full": [1, 15, 16, 34, 43, 44, 71, 74, 77, 99, 102, 122, 138, 140, 141, 168, 185, 213, 223, 249, 250, 252, 253, 259], "larg": [1, 23, 24, 51, 70, 71, 81, 86, 99, 122, 126, 127, 134, 140, 143, 144, 146, 147, 158, 249, 252, 253, 254, 257, 259], "base": [1, 12, 13, 29, 32, 35, 36, 39, 44, 63, 64, 67, 69, 76, 81, 86, 102, 111, 112, 113, 114, 115, 116, 121, 122, 124, 125, 128, 129, 140, 141, 142, 143, 144, 146, 147, 148, 157, 158, 188, 205, 206, 207, 208, 212, 223, 247, 249, 251, 252, 253, 254, 259], "googl": [1, 2, 45, 49, 59, 62, 69, 126, 140, 141, 142, 143, 144, 145, 146, 147, 148, 182, 206, 207, 225, 235, 236, 246, 249, 250, 251, 252, 253, 255, 257, 258], "microfrontend": [1, 45, 83, 143, 146, 153, 156], "call": [1, 19, 20, 35, 36, 57, 61, 70, 81, 83, 86, 99, 111, 112, 116, 118, 119, 120, 124, 125, 127, 129, 130, 134, 136, 138, 140, 143, 144, 146, 147, 158, 171, 172, 186, 188, 206, 214, 220, 224, 233, 235, 242, 247, 248, 250, 251, 253, 256, 258], "frontend": [1, 81, 83, 132, 141, 145, 258], "receiv": [1, 37, 61, 158, 217, 218, 227, 232, 233, 249, 252], "raw": [1, 4, 5, 6, 7, 12, 13, 35, 51, 57, 81, 83, 88, 95, 106, 107, 132, 138, 140, 143, 145, 146, 147, 153, 156, 238, 240, 241, 242, 244, 245, 250, 251, 252, 253, 255], "produc": [1, 61, 131, 136, 138, 250, 251], "filter": [1, 33, 35, 36, 62, 65, 67, 69, 84, 125, 126, 127, 131, 132, 133, 136, 138, 140, 142, 143, 144, 145, 146, 147, 149, 151, 152, 154, 156, 157, 175, 177, 178, 180, 185, 192, 199, 201, 238, 240, 241, 242, 244, 250, 251, 252, 253, 254, 255, 257, 258], "bank": 1, "vector": [1, 129, 131, 133, 136, 138, 149, 188, 247, 250, 251, 257, 258], "valu": [1, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 27, 28, 35, 41, 47, 51, 61, 62, 67, 69, 71, 81, 83, 84, 86, 90, 103, 105, 111, 112, 113, 114, 115, 116, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 158, 160, 163, 169, 171, 172, 174, 175, 177, 178, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 195, 196, 197, 199, 201, 204, 207, 208, 209, 218, 222, 223, 224, 225, 230, 242, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259], "expect": [1, 14, 39, 56, 61, 80, 112, 116, 118, 119, 125, 132, 138, 140, 141, 144, 145, 147, 153, 158, 238, 239, 240, 243, 245, 251, 253, 254, 258], "16": [1, 39, 62, 84, 97, 101, 102, 122, 125, 126, 127, 128, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 157, 206, 238, 240, 241, 242, 244, 245, 251, 252, 253, 254, 257, 258, 259], "bit": [1, 34, 39, 43, 44, 62, 84, 97, 101, 102, 206, 233, 251, 253], "pcm": [1, 97, 99, 100, 101, 102, 206], "configur": [1, 19, 20, 23, 24, 25, 26, 33, 35, 36, 37, 39, 41, 45, 47, 48, 50, 59, 62, 63, 65, 67, 69, 77, 81, 83, 86, 90, 112, 118, 122, 124, 129, 130, 132, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 153, 156, 157, 160, 205, 206, 207, 213, 220, 221, 247, 248, 252, 259], "sampl": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 23, 24, 35, 51, 57, 61, 62, 65, 67, 70, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 114, 115, 116, 118, 120, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 188, 204, 205, 208, 209, 210, 211, 235, 240, 242, 245, 247, 249, 250, 251, 252, 254, 255, 257, 258, 259], "rate": [1, 44, 62, 63, 80, 83, 84, 91, 96, 102, 111, 122, 126, 127, 128, 132, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 204, 205, 207, 211, 227, 233, 238, 241, 248, 251, 253, 254, 255, 257, 258, 259], "signal": [1, 2, 62, 84, 138, 140, 144, 147, 229, 231, 252, 253, 254], "goe": [1, 35, 36, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 251, 253, 257], "through": [1, 10, 11, 12, 13, 37, 50, 61, 62, 80, 81, 96, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 173, 188, 242, 248, 250, 251, 252, 253, 255, 257, 258], "pre": [1, 2, 15, 16, 17, 18, 21, 22, 29, 32, 37, 74, 88, 109, 111, 116, 125, 126, 127, 128, 133, 134, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 234, 235, 236, 250, 251, 252, 254, 255, 258], "emphasi": 1, "option": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 39, 41, 43, 45, 47, 48, 50, 52, 61, 62, 63, 65, 67, 68, 69, 70, 72, 74, 75, 77, 78, 80, 81, 85, 86, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 165, 166, 169, 172, 174, 175, 176, 178, 179, 181, 182, 183, 184, 187, 188, 190, 191, 192, 194, 195, 196, 198, 199, 200, 202, 203, 205, 206, 212, 213, 217, 218, 220, 221, 222, 223, 224, 225, 227, 228, 231, 233, 237, 238, 241, 243, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258], "get": [1, 8, 9, 14, 34, 43, 44, 56, 70, 71, 73, 74, 82, 84, 86, 87, 111, 119, 122, 127, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 153, 171, 174, 175, 178, 181, 183, 187, 188, 190, 191, 195, 196, 199, 222, 225, 242, 248, 249, 250, 252, 253, 254, 255, 258, 259], "slice": 1, "potenti": [1, 99, 122], "overlap": 1, "frame": [1, 62, 84], "window": [1, 2, 4, 5, 14, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 47, 48, 53, 62, 64, 74, 75, 77, 78, 140, 141, 142, 143, 144, 145, 146, 147, 148, 153, 156, 231, 236, 249, 253, 254, 257], "function": [1, 65, 67, 69, 75, 80, 81, 83, 85, 86, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 114, 115, 116, 118, 119, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 202, 203, 212, 213, 214, 215, 222, 223, 224, 225, 228, 230, 231, 238, 239, 240, 243, 245, 247, 249, 251, 252, 253, 254, 257], "appli": [1, 4, 5, 23, 24, 35, 43, 62, 65, 67, 70, 81, 86, 90, 98, 111, 112, 116, 122, 125, 126, 127, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 189, 204, 206, 207, 250, 252, 253, 254, 255, 257, 259], "each": [1, 8, 9, 10, 11, 23, 24, 35, 36, 39, 41, 49, 57, 61, 62, 65, 67, 68, 70, 75, 81, 85, 86, 89, 91, 96, 98, 99, 102, 103, 104, 105, 111, 112, 116, 119, 122, 125, 126, 127, 128, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 158, 160, 163, 169, 172, 188, 206, 207, 212, 218, 224, 227, 228, 235, 242, 246, 247, 248, 250, 251, 252, 253, 254, 255, 258, 259], "afterward": 1, "we": [1, 2, 19, 20, 34, 35, 36, 43, 44, 50, 55, 57, 60, 61, 67, 68, 69, 72, 86, 98, 100, 102, 111, 116, 117, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 224, 240, 242, 245, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "do": [1, 19, 20, 25, 26, 41, 43, 53, 69, 71, 84, 86, 89, 102, 111, 112, 116, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 188, 203, 213, 225, 243, 247, 250, 251, 252, 253, 254, 255, 257, 258, 259], "fourier": 1, "transform": [1, 81, 82, 86, 87, 127, 140, 143, 144, 146, 147, 251, 253, 254, 258], "short": [1, 96, 100, 140, 143, 144, 145, 146, 147, 253], "calcul": [1, 4, 5, 6, 7, 27, 28, 35, 61, 62, 63, 83, 84, 91, 111, 112, 116, 126, 127, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 158, 164, 175, 177, 178, 180, 183, 185, 189, 191, 193, 199, 201, 203, 235, 250, 251, 253, 258], "power": [1, 37, 62, 100, 148, 149, 251, 252, 253, 259], "spectrum": 1, "subsequ": [1, 81, 86, 111, 116, 218, 251], "comput": [1, 19, 20, 23, 24, 51, 62, 70, 74, 77, 84, 86, 102, 122, 126, 127, 134, 140, 143, 146, 249, 253, 254, 255, 257], "slight": 1, "modif": [1, 27, 28, 86], "so": [1, 33, 43, 51, 57, 67, 69, 70, 71, 81, 83, 102, 111, 116, 122, 127, 130, 131, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 189, 209, 235, 242, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "can": [1, 2, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 23, 24, 27, 28, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 49, 52, 53, 55, 57, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 81, 86, 89, 91, 98, 100, 102, 104, 105, 111, 112, 116, 119, 122, 123, 126, 127, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 160, 172, 182, 188, 190, 202, 218, 223, 224, 225, 235, 236, 238, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "linux": [1, 2, 14, 33, 34, 35, 37, 38, 39, 41, 42, 43, 45, 47, 48, 53, 64, 74, 75, 78, 231, 236, 249], "sl_ml_audio_feature_gener": 1, "gecko_sdk": [1, 43], "audio_feature_gener": [1, 81, 111, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 253, 254], "execut": [1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 19, 20, 25, 26, 35, 39, 40, 41, 42, 45, 47, 48, 51, 52, 57, 59, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 78, 80, 85, 119, 120, 121, 127, 134, 140, 143, 144, 146, 147, 149, 160, 167, 169, 172, 224, 225, 228, 231, 235, 236, 238, 240, 245, 247, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259], "becaus": [1, 57, 67, 141, 235, 249, 251, 253, 255, 257], "devic": [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 27, 28, 35, 36, 37, 39, 41, 43, 45, 47, 48, 53, 56, 60, 61, 62, 64, 65, 67, 68, 69, 76, 77, 78, 79, 99, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 171, 216, 217, 218, 219, 220, 223, 226, 232, 233, 234, 235, 247, 248, 249, 250, 252, 254, 255, 257, 258, 259], "mai": [1, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 25, 26, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 53, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 88, 95, 100, 108, 109, 111, 112, 116, 117, 119, 120, 122, 125, 126, 127, 129, 130, 135, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 155, 158, 159, 172, 173, 189, 206, 209, 216, 218, 228, 233, 236, 237, 240, 242, 245, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "hopefulli": [1, 138, 235, 251, 253, 257], "lead": [1, 67, 141, 142, 143, 145, 146, 148, 149, 235, 251], "accur": [1, 10, 14, 235, 251, 253, 254, 255, 258], "pybind11": [1, 46], "binari": [1, 33, 52, 58, 61, 62, 76, 81, 86, 111, 116, 120, 129, 131, 135, 136, 138, 141, 158, 182, 186, 188, 190, 212, 216, 219, 220, 227, 232, 233, 247, 253], "api": [1, 10, 15, 17, 21, 25, 27, 29, 45, 47, 48, 59, 60, 66, 73, 74, 83, 88, 89, 91, 92, 111, 112, 113, 114, 115, 119, 122, 125, 126, 127, 129, 130, 132, 133, 134, 135, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 152, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 172, 182, 188, 190, 206, 214, 216, 218, 220, 233, 235, 236, 247, 248, 249, 251, 253, 255, 256, 258, 259], "found": [1, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 52, 55, 58, 59, 61, 62, 63, 65, 67, 68, 69, 72, 84, 86, 88, 89, 91, 105, 108, 122, 123, 128, 131, 133, 134, 135, 136, 137, 139, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 169, 171, 188, 190, 203, 216, 222, 223, 225, 227, 238, 239, 240, 241, 242, 243, 244, 245, 247, 250, 251, 252, 253, 254, 255, 257, 258, 259], "here": [1, 34, 35, 36, 37, 39, 43, 44, 53, 58, 61, 64, 67, 69, 83, 99, 126, 127, 129, 130, 132, 134, 138, 142, 143, 146, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259], "core": [1, 62, 65, 67, 71, 74, 88, 102, 109, 117, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 186, 224, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258], "preprocess": [1, 67, 109, 111, 116, 125, 126, 127, 129, 130, 131, 132, 133, 134, 138, 149, 152, 153, 154, 156, 157, 242, 247, 249, 254, 258], "audio_feature_generator_wrapp": [1, 42, 45], "when": [1, 4, 5, 6, 7, 12, 13, 23, 24, 27, 28, 35, 36, 37, 39, 40, 41, 43, 45, 47, 48, 51, 52, 53, 57, 61, 62, 65, 69, 70, 71, 73, 75, 78, 84, 86, 89, 91, 102, 111, 112, 116, 118, 119, 120, 122, 124, 125, 126, 127, 129, 130, 134, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 160, 164, 172, 189, 206, 214, 224, 229, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "instal": [1, 2, 14, 45, 47, 48, 50, 58, 64, 70, 73, 75, 77, 109, 127, 140, 143, 144, 146, 147, 206, 225, 247, 248, 252, 255, 257, 259], "local": [1, 2, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 23, 24, 27, 28, 29, 32, 34, 35, 37, 39, 43, 49, 63, 72, 73, 77, 121, 140, 141, 142, 143, 144, 145, 146, 147, 148, 160, 165, 188, 202, 203, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 255, 256, 257, 258, 259], "dll": [1, 53], "directori": [1, 2, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 25, 26, 27, 28, 33, 34, 42, 43, 44, 45, 47, 48, 55, 66, 67, 69, 70, 75, 77, 80, 81, 82, 85, 86, 87, 89, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 116, 119, 120, 121, 122, 127, 131, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 154, 156, 157, 158, 160, 163, 164, 202, 203, 206, 207, 213, 223, 225, 228, 231, 249, 250, 251, 252, 253, 257, 258, 259], "recommend": [1, 2, 4, 5, 33, 62, 65, 73, 74, 81, 148, 249, 250, 251, 252, 253, 254, 256, 259], "wai": [1, 19, 20, 51, 52, 57, 62, 70, 71, 84, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 224, 249, 250, 251, 252, 253, 254, 255, 257, 259], "apply_frontend": [1, 80, 81, 83, 127, 140, 141, 143, 144, 145, 146, 147, 254], "keyword_spotting_on_off_v3": [1, 2, 19, 20, 35, 67, 71, 249, 253], "basic": [1, 2, 19, 20, 34, 61, 68, 69, 70, 71, 74, 117, 126, 127, 129, 130, 132, 133, 134, 135, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 160, 190, 240, 247, 249, 250, 252, 254, 257, 258, 259], "In": [1, 4, 5, 6, 7, 12, 13, 19, 20, 21, 22, 23, 24, 33, 35, 36, 37, 39, 44, 51, 57, 61, 62, 63, 65, 67, 68, 71, 72, 74, 80, 81, 84, 85, 86, 96, 111, 112, 116, 118, 122, 126, 128, 129, 130, 136, 138, 140, 141, 142, 143, 144, 146, 148, 152, 171, 188, 190, 203, 207, 208, 213, 224, 236, 238, 239, 240, 244, 245, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "defin": [1, 19, 20, 25, 26, 33, 35, 41, 44, 50, 52, 57, 61, 62, 67, 69, 71, 75, 76, 83, 84, 117, 119, 122, 126, 127, 129, 130, 131, 133, 134, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 158, 182, 186, 207, 222, 223, 225, 230, 235, 247, 248, 249, 250, 252, 254, 256, 258, 259], "object": [1, 61, 67, 69, 71, 84, 109, 110, 111, 116, 117, 119, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 164, 166, 169, 171, 174, 175, 178, 181, 182, 183, 187, 188, 190, 191, 195, 196, 199, 215, 222, 223, 224, 225, 227, 228, 230, 247, 255], "inherit": [1, 61, 67, 69, 117, 127, 129, 130, 134, 140, 143, 144, 146, 147, 182, 190, 247, 251, 253, 258], "datasetmixin": [1, 67, 69, 117, 118, 127, 128, 129, 130, 134, 136, 140, 143, 144, 146, 147, 151, 247, 248, 253], "class": [1, 4, 5, 6, 7, 10, 11, 35, 36, 39, 61, 62, 69, 71, 80, 81, 82, 83, 84, 86, 87, 89, 91, 96, 97, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 163, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 209, 210, 211, 214, 217, 218, 220, 221, 222, 224, 225, 227, 229, 230, 233, 237, 240, 241, 242, 244, 245, 247, 248, 249, 250, 254, 255, 257], "mymodel": [1, 61, 67, 69, 71, 113, 114, 115, 117, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 247, 248, 250, 251, 253, 254, 255, 257], "mltkmodel": [1, 10, 11, 15, 16, 25, 26, 27, 28, 49, 61, 62, 71, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 165, 244, 247, 248, 251, 253], "trainmixin": [1, 61, 65, 67, 69, 71, 117, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 235, 239, 247, 248, 250, 251, 253], "evaluateclassifiermixin": [1, 67, 69, 71, 117, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 156, 157, 247, 248, 251, 253], "pass": [1, 10, 11, 71, 81, 86, 111, 112, 116, 117, 119, 120, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 156, 157, 173, 206, 225, 247, 248, 249, 251, 253, 254, 257, 259], "frontend_set": [1, 81, 83, 84, 111, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 252, 253, 254, 257], "audiofeaturegeneratorset": [1, 62, 80, 81, 83, 111, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 252, 253, 254, 257], "sample_rate_hz": [1, 62, 81, 83, 84, 91, 98, 111, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 252, 253, 254, 257], "16000": [1, 83, 84, 94, 95, 96, 98, 102, 126, 127, 140, 141, 143, 144, 145, 146, 147, 148, 152, 252, 253, 254, 257], "sample_length_m": [1, 62, 81, 82, 83, 84, 111, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 252, 253, 254, 257], "1000": [1, 23, 24, 62, 70, 81, 83, 84, 89, 91, 122, 125, 126, 127, 132, 134, 140, 141, 142, 143, 144, 146, 147, 148, 151, 152, 224, 244, 253, 254, 257, 258], "buffer": [1, 41, 57, 140, 141, 143, 144, 146, 147, 169, 188, 218, 227, 233, 252, 253, 254, 257], "enough": [1, 33, 39, 141, 144, 147, 249, 251, 252, 253, 254, 255, 257], "captur": [1, 2, 4, 5, 12, 13, 35, 37, 40, 95, 102, 140, 144, 147, 226, 250, 251, 252, 253, 254], "window_size_m": [1, 62, 83, 84, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 252, 253, 254, 257], "30": [1, 80, 83, 84, 126, 127, 128, 132, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 238, 241, 251, 252, 253, 254, 257, 259], "window_step_m": [1, 62, 83, 84, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 252, 253, 254, 257], "10": [1, 19, 20, 34, 37, 39, 43, 44, 62, 67, 69, 73, 74, 78, 83, 84, 103, 104, 105, 111, 112, 116, 122, 126, 127, 128, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 207, 225, 238, 240, 241, 244, 247, 249, 251, 252, 253, 254, 255, 257, 258, 259], "filterbank_n_channel": [1, 62, 83, 84, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 252, 253, 254, 257], "104": [1, 141, 144, 147, 148, 154, 253, 254, 257], "want": [1, 35, 36, 57, 64, 73, 86, 100, 102, 111, 116, 117, 122, 127, 129, 130, 131, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 236, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "possibl": [1, 54, 62, 81, 84, 86, 122, 123, 140, 142, 143, 144, 145, 146, 147, 148, 206, 207, 250, 251, 252, 253, 254, 255, 259], "while": [1, 2, 4, 5, 6, 7, 12, 13, 19, 20, 35, 37, 41, 44, 51, 58, 61, 67, 68, 69, 71, 81, 86, 89, 117, 127, 129, 130, 134, 136, 138, 140, 143, 144, 146, 147, 148, 158, 160, 163, 169, 171, 172, 203, 213, 218, 224, 225, 232, 233, 238, 239, 240, 243, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259], "still": [1, 33, 81, 86, 140, 141, 144, 147, 249, 252, 253, 254, 255, 257, 259], "effici": [1, 14, 15, 16, 59, 61, 63, 67, 81, 88, 125, 140, 141, 143, 144, 146, 147, 236, 238, 249, 251, 252, 253, 254, 255, 257, 258], "hardwar": [1, 6, 7, 12, 13, 14, 15, 16, 33, 41, 42, 44, 46, 51, 64, 73, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 164, 166, 169, 172, 234, 249, 253, 258], "filterbank_upper_band_limit": [1, 62, 83, 84, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 252, 253, 254, 257], "7500": [1, 83, 84, 132, 140, 144, 147, 152, 252, 253, 254], "filterbank_lower_band_limit": [1, 62, 83, 84, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 252, 253, 254, 257], "125": [1, 83, 84, 126, 132, 140, 141, 143, 144, 146, 147, 148, 149, 152, 251, 252, 253, 254, 257], "mic": [1, 140, 143, 144, 145, 146, 147, 252, 253, 254], "seem": [1, 140, 143, 144, 145, 146, 147, 252, 253, 254], "have": [1, 2, 4, 5, 6, 7, 12, 13, 23, 24, 35, 36, 37, 39, 44, 46, 51, 54, 55, 60, 61, 62, 65, 67, 68, 69, 71, 73, 74, 81, 86, 89, 91, 100, 102, 111, 112, 113, 114, 115, 116, 119, 120, 125, 127, 129, 130, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 160, 182, 188, 190, 213, 224, 227, 239, 244, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "lot": [1, 41, 140, 143, 144, 145, 146, 147, 249, 252, 253, 254, 259], "nois": [1, 2, 62, 67, 81, 84, 86, 111, 112, 116, 127, 133, 138, 140, 141, 143, 144, 145, 146, 147, 149, 251, 252, 253, 254, 257], "lower": [1, 2, 23, 24, 39, 70, 71, 81, 86, 90, 122, 138, 140, 143, 144, 145, 146, 147, 223, 249, 250, 252, 253, 254], "frequenc": [1, 23, 24, 62, 70, 84, 96, 122, 126, 127, 134, 140, 143, 144, 145, 146, 147, 153, 156, 252, 253, 254, 257], "noise_reduction_en": [1, 2, 62, 83, 84, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 252, 253, 254, 257], "true": [1, 23, 24, 50, 63, 67, 69, 70, 71, 80, 81, 83, 84, 85, 86, 89, 90, 91, 93, 102, 111, 112, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 165, 188, 196, 202, 203, 206, 207, 208, 213, 218, 220, 222, 223, 224, 225, 227, 229, 230, 232, 233, 237, 238, 240, 242, 243, 245, 247, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259], "enabl": [1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 41, 43, 44, 46, 50, 61, 62, 67, 70, 72, 81, 83, 84, 86, 91, 98, 99, 100, 109, 113, 114, 119, 120, 122, 126, 127, 132, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 158, 166, 169, 172, 213, 216, 219, 220, 235, 236, 240, 245, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259], "reduct": [1, 2, 62, 84, 127, 136, 140, 143, 144, 145, 146, 147, 252, 253, 254, 257], "block": [1, 62, 84, 125, 127, 138, 140, 143, 144, 145, 146, 147, 233, 249, 250, 252, 253, 254, 256, 257], "help": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 39, 41, 43, 44, 51, 52, 58, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 84, 95, 102, 117, 127, 129, 130, 131, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 172, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "ignor": [1, 35, 36, 39, 102, 111, 112, 113, 114, 115, 116, 122, 125, 140, 143, 144, 146, 147, 160, 188, 213, 225, 227, 250, 252, 253, 254, 259], "background": [1, 71, 81, 86, 140, 141, 143, 144, 145, 146, 147, 251, 252, 253, 254], "field": [1, 65, 66, 70, 119, 122, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 160, 188, 206, 214, 249, 251, 252, 253, 254, 255, 259], "noise_reduction_smoothing_bit": [1, 62, 83, 84, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 252, 253, 254, 257], "noise_reduction_even_smooth": [1, 62, 83, 84, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 252, 253, 254, 257], "025": [1, 83, 84, 126, 140, 141, 143, 144, 146, 147, 148, 152, 252, 253, 254, 257], "noise_reduction_odd_smooth": [1, 62, 83, 84, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 252, 253, 254, 257], "06": [1, 83, 84, 126, 140, 141, 143, 144, 145, 146, 147, 148, 152, 240, 241, 244, 245, 251, 252, 253, 254, 257, 258], "noise_reduction_min_signal_remain": [1, 62, 83, 84, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 252, 253, 254, 257], "40": [1, 83, 84, 127, 131, 132, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 156, 251, 252, 253, 254, 257, 259], "fairli": [1, 140, 144, 147, 148, 252, 253, 254, 255, 259], "small": [1, 33, 65, 102, 118, 127, 129, 130, 134, 136, 140, 143, 144, 146, 147, 148, 160, 247, 249, 251, 252, 253, 254, 257, 258, 259], "But": [1, 57, 140, 144, 147, 252, 253, 254], "ha": [1, 4, 5, 6, 7, 8, 9, 14, 21, 22, 33, 35, 36, 37, 39, 42, 44, 51, 57, 58, 60, 62, 63, 65, 70, 71, 74, 81, 84, 86, 89, 91, 99, 109, 111, 112, 116, 119, 120, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 171, 175, 178, 182, 188, 189, 190, 199, 202, 203, 206, 223, 227, 231, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "been": [1, 4, 5, 6, 7, 12, 13, 14, 21, 22, 35, 36, 57, 62, 65, 71, 74, 100, 119, 122, 128, 138, 140, 143, 144, 146, 147, 160, 203, 206, 213, 227, 239, 244, 247, 249, 251, 252, 253, 254, 255, 257, 258, 259], "give": [1, 4, 5, 6, 7, 14, 39, 86, 102, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 202, 242, 251, 252, 253, 254], "good": [1, 67, 69, 140, 143, 144, 146, 147, 249, 251, 252, 253, 254], "result": [1, 2, 4, 5, 6, 7, 10, 11, 15, 16, 19, 20, 25, 26, 35, 36, 39, 53, 56, 60, 62, 63, 111, 113, 114, 115, 116, 120, 122, 126, 127, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 158, 160, 163, 166, 169, 171, 188, 224, 237, 238, 243, 248, 250, 251, 252, 253, 254, 258], "some": [1, 4, 5, 6, 7, 21, 22, 27, 28, 33, 34, 35, 36, 43, 44, 48, 57, 67, 68, 73, 74, 76, 86, 91, 102, 122, 126, 127, 131, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 188, 241, 242, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258], "actual": [1, 48, 61, 63, 67, 69, 76, 131, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 223, 242, 247, 249, 250, 251, 252, 253, 254, 255, 257], "mostli": [1, 140, 144, 147, 251, 252, 253, 254], "untouch": [1, 62, 140, 144, 147, 244, 252, 253, 254], "dc_notch_filter_en": [1, 62, 84, 127, 140, 143, 144, 145, 146, 147, 252, 253, 254], "dc": [1, 62, 84, 127, 140, 143, 144, 145, 146, 147, 252, 253, 254], "notch": [1, 62, 84, 127, 140, 143, 144, 145, 146, 147, 252, 253, 254], "remov": [1, 45, 47, 48, 84, 89, 91, 102, 122, 140, 143, 144, 146, 147, 171, 188, 190, 202, 203, 223, 236, 249, 250, 251, 252, 253, 254, 255, 257, 259], "dc_notch_filter_coeffici": [1, 62, 84, 127, 140, 143, 144, 145, 146, 147, 252, 253, 254], "95": [1, 84, 126, 127, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 156, 250, 251, 252, 253, 254, 255, 257, 258], "quantize_dynamic_scale_en": [1, 62, 83, 84, 127, 140, 143, 144, 145, 146, 147, 252, 253, 254], "quantiz": [1, 4, 5, 10, 11, 14, 15, 16, 18, 25, 26, 37, 39, 41, 49, 51, 57, 59, 60, 62, 67, 68, 69, 76, 83, 84, 112, 117, 119, 120, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 158, 159, 162, 163, 167, 177, 180, 185, 188, 193, 194, 195, 198, 201, 235, 236, 237, 238, 240, 242, 243, 245, 247, 250, 251, 252, 253, 254, 257], "uint16": [1, 81, 83, 140, 144, 145, 147, 182, 190, 252, 253, 254], "int8": [1, 39, 56, 57, 61, 65, 67, 69, 81, 83, 85, 117, 122, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 182, 190, 237, 238, 240, 241, 242, 244, 247, 251, 252, 253, 254, 257, 258], "quantize_dynamic_scale_range_db": [1, 62, 83, 84, 127, 140, 143, 144, 145, 146, 147, 252, 253, 254], "paramet": [1, 14, 17, 18, 27, 28, 30, 31, 39, 49, 51, 59, 61, 65, 68, 76, 80, 81, 83, 84, 85, 86, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 116, 118, 119, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 177, 178, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 195, 196, 198, 199, 201, 202, 203, 205, 206, 209, 212, 213, 214, 215, 217, 218, 220, 222, 223, 224, 225, 227, 228, 230, 231, 233, 236, 247, 249, 255, 257, 258], "thei": [1, 6, 7, 49, 62, 67, 70, 84, 89, 91, 102, 111, 112, 116, 119, 125, 126, 127, 138, 140, 141, 142, 143, 144, 146, 147, 149, 152, 246, 249, 250, 251, 252, 253, 254, 258, 259], "includ": [1, 15, 16, 33, 52, 57, 62, 66, 67, 68, 69, 76, 81, 82, 84, 86, 87, 89, 91, 99, 102, 119, 122, 125, 126, 127, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 157, 160, 163, 202, 208, 212, 223, 236, 247, 248, 250, 251, 252, 253, 254, 256, 257, 259], "http": [1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 58, 67, 72, 74, 76, 81, 84, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 119, 120, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 165, 188, 190, 216, 236, 238, 240, 241, 242, 244, 245, 247, 249, 251, 252, 253, 254, 255, 258, 259], "siliconlab": [1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 67, 74, 84, 88, 95, 106, 107, 108, 125, 126, 127, 129, 130, 132, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 159, 216, 236, 238, 241, 242, 247, 252, 253], "io": [1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 67, 84, 119, 125, 126, 127, 129, 130, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 154, 228, 232, 242, 247, 251, 252, 253, 255], "model_paramet": [1, 27, 28, 62, 67, 84, 119, 126, 127, 129, 130, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 242, 244, 247, 250, 252, 253], "html": [1, 6, 7, 12, 13, 33, 34, 37, 39, 41, 43, 44, 81, 84, 126, 127, 129, 130, 131, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 154, 160, 242, 247, 251, 252, 253, 254, 258, 259], "my_model": [1, 4, 5, 10, 11, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 37, 39, 41, 50, 52, 55, 56, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 84, 111, 112, 113, 114, 115, 116, 117, 118, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 188, 238, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257], "updat": [1, 10, 11, 14, 17, 18, 27, 28, 34, 43, 44, 49, 50, 60, 61, 71, 84, 91, 120, 122, 124, 127, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 158, 159, 164, 166, 171, 172, 188, 190, 207, 225, 237, 238, 240, 241, 243, 245, 248, 249, 250, 252, 253, 254, 258, 259], "data": [1, 2, 4, 5, 8, 9, 23, 24, 30, 31, 35, 36, 39, 41, 46, 50, 56, 61, 62, 63, 64, 65, 67, 69, 70, 71, 77, 80, 81, 83, 85, 86, 89, 90, 91, 92, 96, 98, 99, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 166, 169, 170, 172, 174, 175, 178, 181, 182, 183, 187, 188, 190, 191, 195, 196, 198, 199, 212, 215, 216, 217, 218, 219, 220, 222, 224, 226, 227, 232, 233, 234, 235, 238, 241, 243, 247, 255, 257, 259], "pipelin": [1, 70, 125, 127, 134, 140, 143, 144, 146, 147, 248, 254], "import": [1, 53, 61, 67, 69, 71, 74, 83, 84, 109, 117, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 167, 186, 188, 207, 219, 224, 225, 226, 232, 247, 248, 249, 250, 252, 253, 254, 255, 257, 258, 259], "audio_util": [1, 4, 5, 30, 31, 83, 127, 140, 143, 144, 146, 147, 253, 254], "augmented_sampl": [1, 127, 140, 143, 144, 146, 147, 254], "dtype": [1, 57, 62, 80, 81, 82, 83, 86, 87, 90, 91, 119, 126, 127, 128, 130, 132, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 182, 188, 190, 198, 212, 241, 242, 252, 254, 258], "np": [1, 57, 81, 83, 86, 90, 91, 111, 112, 116, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 174, 175, 178, 181, 183, 187, 188, 191, 195, 196, 199, 242, 247, 250, 252, 253, 254, 258], "via": [1, 14, 19, 33, 34, 44, 59, 61, 63, 65, 68, 69, 70, 72, 73, 74, 77, 121, 216, 217, 219, 220, 232, 233, 236, 240, 244, 245, 248, 249, 250, 251, 252, 253, 254], "interfac": [1, 2, 14, 23, 24, 29, 32, 41, 46, 48, 59, 63, 64, 109, 122, 124, 216, 219, 220, 236, 248, 249], "thu": [1, 51, 67, 111, 112, 116, 125, 138, 224, 247, 249, 250, 253, 254, 257, 259], "It": [1, 2, 4, 5, 10, 11, 23, 24, 33, 35, 44, 52, 57, 61, 64, 65, 81, 82, 86, 87, 89, 91, 99, 102, 111, 112, 116, 125, 129, 130, 138, 140, 141, 142, 145, 146, 147, 149, 235, 247, 249, 250, 251, 253, 254, 255, 256, 257, 258], "adjust": [1, 2, 80, 81, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 249, 251, 252, 253, 254, 255, 258, 259], "affect": [1, 2, 111, 112, 116, 124, 141, 142, 144, 145, 147, 148], "To": [1, 2, 14, 34, 35, 36, 37, 39, 41, 43, 45, 47, 48, 50, 51, 52, 61, 64, 67, 70, 71, 73, 78, 102, 136, 138, 143, 144, 146, 147, 235, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "issu": [1, 2, 14, 19, 20, 43, 45, 47, 48, 57, 58, 61, 62, 63, 65, 68, 69, 70, 71, 72, 74, 96, 117, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 217, 228, 229, 234, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258], "wxpython": [1, 2, 30, 31, 253], "sever": [2, 34, 37, 39, 40, 41, 43, 44, 46, 51, 52, 58, 61, 67, 69, 71, 140, 143, 144, 146, 147, 235, 247, 250, 251, 253, 254, 258], "aid": [2, 48, 57, 67, 69, 127, 134, 140, 143, 144, 146, 147, 148, 224, 236, 247, 250, 251, 252, 253, 254, 259], "custom": [2, 4, 5, 6, 7, 8, 9, 12, 13, 33, 59, 61, 67, 69, 71, 81, 86, 89, 91, 109, 113, 114, 115, 119, 122, 124, 126, 131, 133, 136, 138, 140, 141, 142, 144, 145, 147, 148, 149, 234, 235, 236, 250, 251, 253, 254, 257, 259], "depend": [2, 51, 67, 74, 75, 84, 86, 102, 112, 248, 249, 251, 259], "usecas": [2, 250], "overview": [2, 74, 98, 109], "abil": [2, 61, 253], "print": [2, 6, 7, 21, 22, 35, 36, 38, 39, 40, 54, 102, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 163, 167, 186, 188, 207, 222, 226, 232, 237, 238, 240, 244, 247, 249, 250, 251, 253, 257, 258, 259], "termin": [2, 4, 5, 19, 20, 23, 24, 38, 39, 71, 122, 231, 250, 251, 253, 254, 255, 257], "audio_classifi": [2, 4, 5, 27, 28, 35, 126, 127, 141, 142, 145, 148, 152, 252, 253], "flow": [2, 19, 20, 62, 70, 71, 86, 133, 149, 190, 232, 233, 234, 248, 251, 253], "recogn": [2, 4, 5, 253], "classify_audio": [2, 5, 14, 74, 78, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 250, 251, 252, 253, 254, 255, 257], "verbos": [2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 62, 67, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 163, 213, 225, 247, 249, 251, 252, 253, 255], "threshold": [2, 4, 5, 6, 7, 36, 39, 61, 62, 80, 81, 84, 122, 126, 127, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 158, 244, 251, 253], "150": [2, 141, 144, 145, 147, 148, 156, 251, 253, 254, 257], "255": [2, 4, 5, 6, 7, 35, 36, 57, 85, 103, 105, 126, 127, 129, 130, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 247, 251, 253, 258], "mean": [2, 39, 56, 62, 81, 86, 90, 100, 125, 134, 136, 138, 141, 148, 224, 242, 249, 250, 251, 253, 257, 258], "easier": [2, 15, 16, 48, 140, 143, 144, 146, 147, 259], "higher": [2, 4, 5, 6, 7, 35, 36, 71, 81, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 250, 251, 253], "fals": [2, 23, 24, 63, 70, 71, 77, 80, 81, 84, 85, 86, 89, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 114, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 165, 169, 172, 188, 196, 198, 202, 203, 206, 213, 214, 215, 217, 218, 220, 222, 223, 224, 225, 227, 229, 244, 247, 249, 250, 251, 253, 257, 258, 259], "posit": [2, 23, 24, 62, 70, 84, 122, 126, 127, 134, 140, 143, 146, 158, 207, 252, 259], "sai": [2, 23, 24, 55, 57, 70, 98, 102, 122, 126, 127, 134, 140, 143, 144, 146, 147, 252, 253, 254, 259], "off": [2, 35, 36, 102, 129, 138, 139, 142, 143, 144, 156, 234, 249], "process": [2, 4, 5, 6, 7, 10, 11, 15, 16, 25, 26, 35, 36, 37, 39, 45, 51, 57, 62, 67, 71, 80, 81, 83, 85, 86, 87, 88, 89, 91, 92, 98, 109, 111, 116, 120, 124, 125, 127, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 158, 160, 163, 206, 220, 224, 231, 235, 249, 250, 251, 252, 253, 254, 255, 257, 258], "occur": [2, 57, 233], "much": [2, 4, 5, 6, 7, 23, 24, 70, 71, 102, 140, 141, 143, 146, 207, 235, 249, 251, 253, 255, 258, 259], "faster": [2, 51, 224, 249, 251, 253], "compar": [2, 10, 11, 37, 51, 61, 96, 99, 113, 124, 138, 158, 248, 250, 251, 253, 258], "artifici": [2, 251], "delai": [2, 252], "would": [2, 4, 5, 60, 67, 86, 95, 98, 122, 125, 127, 134, 140, 143, 144, 146, 147, 236, 247, 250, 251, 253, 255, 259], "why": [2, 53, 140, 143, 144, 146, 147, 236, 253], "matter": [2, 259], "keyword_spotting_mobilenetv2": [2, 148, 255, 257], "loop": [2, 4, 5, 6, 7, 35, 39, 62, 67, 86, 94, 111, 112, 116, 122, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 251, 253], "200m": [2, 4, 5, 253], "200": [2, 4, 5, 111, 112, 116, 131, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 154, 207, 251, 253, 254, 259], "left": [2, 36, 67, 69, 97, 102, 126, 127, 141, 145, 146, 147, 156, 234, 249, 250, 251, 253, 254, 255, 257, 258], "right": [2, 36, 50, 64, 67, 69, 73, 97, 102, 126, 127, 138, 141, 145, 146, 147, 156, 234, 249, 250, 251, 254, 255, 256, 257, 258], "down": [2, 23, 24, 36, 51, 67, 69, 70, 81, 97, 102, 122, 126, 127, 134, 140, 141, 143, 144, 145, 146, 147, 156, 224, 234, 249, 254, 255, 257, 258], "stop": [2, 36, 54, 89, 91, 97, 102, 111, 112, 116, 119, 122, 126, 127, 132, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 149, 152, 156, 197, 204, 208, 227, 234, 245, 249, 251, 254, 255, 256, 257], "go": [2, 36, 73, 74, 97, 102, 141, 145, 146, 147, 156, 234, 254, 255, 257], "after": [2, 4, 5, 17, 18, 19, 20, 23, 24, 25, 26, 35, 36, 37, 39, 41, 43, 44, 52, 55, 60, 62, 64, 65, 67, 69, 70, 71, 74, 76, 81, 86, 91, 102, 117, 120, 121, 122, 126, 127, 132, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 163, 218, 227, 238, 239, 240, 243, 244, 245, 249, 250, 251, 252, 253, 254, 256, 258, 259], "awhil": [2, 8, 9, 44, 240, 245, 251, 253, 257, 258, 259], "ctrl": [2, 19, 20, 71, 73, 229], "wav": [2, 4, 5, 80, 83, 91, 94, 97, 101, 102, 127, 140, 143, 144, 145, 146, 147, 206, 253, 254, 259], "user": [2, 8, 9, 12, 13, 19, 20, 35, 36, 37, 40, 43, 62, 67, 71, 75, 77, 129, 130, 160, 190, 223, 234, 238, 239, 240, 243, 244, 245, 247, 249, 250, 251, 252, 253, 257, 258], "home": [2, 4, 5, 77, 223, 231, 249, 253, 257], "audio_classify_record": [2, 253], "dump_audio": 2, "avi": 2, "video": [2, 4, 5, 145, 146, 147, 253, 254], "jpg": [2, 4, 5, 39, 81, 85, 86, 91, 127, 140, 143, 144, 146, 147, 250, 251, 253], "assum": [2, 14, 60, 62, 65, 80, 85, 122, 153, 224, 231, 239, 244, 249, 251, 253, 255, 257], "you": [2, 14, 23, 24, 33, 34, 35, 37, 39, 41, 43, 44, 45, 47, 48, 50, 54, 56, 57, 58, 64, 67, 70, 71, 73, 74, 76, 81, 86, 102, 111, 112, 116, 122, 124, 125, 127, 128, 129, 130, 132, 134, 138, 140, 142, 143, 146, 148, 172, 182, 188, 190, 235, 236, 240, 242, 245, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "entir": [2, 41, 72, 89, 91, 122, 140, 143, 144, 146, 253, 254], "If": [2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 48, 50, 52, 54, 56, 62, 65, 66, 67, 69, 70, 71, 74, 75, 80, 81, 84, 85, 86, 89, 91, 102, 111, 112, 113, 114, 115, 116, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 165, 169, 171, 172, 188, 190, 202, 203, 206, 208, 212, 213, 215, 218, 222, 223, 224, 225, 227, 228, 231, 233, 236, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "red": [2, 35, 36, 37, 39, 255, 257], "led": [2, 4, 5, 6, 7, 35, 36, 37, 39, 251, 253, 255, 257], "turn": [2, 35, 36, 39, 253, 255, 257], "activ": [2, 4, 5, 6, 7, 14, 19, 20, 23, 24, 35, 36, 37, 39, 62, 67, 69, 70, 71, 74, 83, 84, 96, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 166, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 191, 192, 193, 201, 206, 220, 224, 225, 238, 240, 241, 242, 244, 245, 247, 249, 251, 252, 253, 254, 255, 256, 257, 258], "green": [2, 35, 36, 37, 39, 255, 257], "addition": [2, 6, 7, 12, 13, 23, 24, 36, 51, 55, 57, 61, 65, 69, 74, 78, 81, 235, 237, 247, 251, 253, 254, 257, 258], "serial": [2, 4, 5, 6, 7, 12, 13, 15, 16, 35, 36, 38, 39, 62, 77, 86, 119, 160, 182, 190, 216, 223, 227, 233, 251, 252, 253], "log": [2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 44, 55, 60, 62, 67, 69, 70, 71, 76, 77, 111, 116, 119, 122, 124, 126, 127, 134, 136, 138, 140, 143, 144, 146, 147, 158, 163, 164, 172, 213, 222, 225, 234, 240, 245, 249, 250, 251, 252, 253, 258], "update_param": [2, 14, 28, 52, 60, 62, 250, 251, 252, 253, 254], "re": [2, 4, 5, 6, 7, 12, 13, 14, 27, 28, 34, 43, 44, 57, 74, 80, 89, 91, 96, 102, 111, 116, 122, 124, 127, 128, 129, 130, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 188, 202, 217, 223, 226, 227, 242, 247, 249, 250, 251, 252, 253, 255, 257, 258, 259], "differ": [2, 6, 7, 35, 36, 37, 39, 41, 52, 58, 61, 71, 86, 100, 102, 111, 112, 116, 122, 124, 126, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 235, 247, 248, 249, 250, 251, 253, 254, 255, 257, 258, 259], "disabl": [2, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 23, 24, 35, 36, 41, 62, 70, 71, 81, 84, 86, 89, 91, 100, 122, 124, 126, 127, 132, 134, 140, 143, 144, 145, 146, 147, 151, 160, 172, 214, 218, 224, 251, 252, 253, 254], "modul": [2, 6, 7, 12, 13, 14, 37, 39, 50, 58, 62, 66, 67, 84, 86, 91, 92, 111, 112, 116, 123, 224, 225, 250, 251], "fe": [2, 62, 126, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 253, 257], "experiment": [2, 4, 5, 30, 31, 70, 122, 127, 134, 140, 143, 144, 146, 147, 153, 156, 236, 251, 253, 254, 257], "audiodatasetgener": [2, 97, 101, 207, 253, 259], "text": [2, 12, 13, 14, 21, 35, 36, 59, 60, 64, 67, 68, 70, 118, 138, 143, 159, 205, 235, 249, 250, 251, 252, 253, 257, 259], "speech": [2, 62, 84, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 206, 244, 249, 252, 253, 259], "tt": [2, 252, 259], "servic": [2, 35, 36, 54, 73, 207, 236, 249, 251, 252], "cloud": [2, 10, 11, 14, 15, 16, 19, 20, 25, 26, 59, 69, 70, 71, 73, 74, 75, 121, 124, 127, 134, 140, 143, 144, 146, 147, 158, 160, 163, 206, 207, 234, 236, 252], "gcp": [2, 206, 207], "microsoft": [2, 34, 42, 43, 44, 58, 74, 207, 252, 253], "azur": [2, 206, 207], "amazon": [2, 207, 252, 253], "web": [2, 36, 49, 72, 102, 124, 207, 234, 245, 246, 249, 251, 253, 254], "aw": [2, 206, 207], "inform": [2, 8, 9, 14, 48, 59, 60, 63, 67, 68, 70, 71, 76, 153, 174, 175, 178, 181, 183, 187, 188, 191, 195, 196, 198, 199, 240, 250, 252, 255, 258], "audio": [4, 5, 12, 13, 14, 30, 31, 40, 45, 46, 52, 57, 62, 67, 70, 88, 89, 91, 111, 126, 127, 132, 134, 135, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 204, 205, 206, 210, 211, 216, 219, 234, 235, 236, 250, 251, 255], "util": [4, 8, 9, 14, 29, 30, 32, 34, 35, 36, 41, 43, 44, 59, 63, 67, 70, 83, 88, 109, 111, 112, 116, 117, 126, 127, 128, 129, 132, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 207, 219, 226, 232, 235, 236, 238, 241, 242, 247, 248, 249, 250, 252, 254, 257, 258, 259], "app": [4, 5, 6, 7, 12, 13, 27, 28, 29, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 72, 76, 102, 138, 140, 143, 144, 146, 147, 188, 233, 245, 251, 252, 253, 254, 258], "event": [4, 5, 61, 96, 119, 120, 122, 233, 236, 250, 251, 253, 254], "own": [4, 5, 8, 9, 30, 31, 71, 74, 100, 127, 134, 137, 138, 140, 141, 142, 143, 144, 146, 147, 249, 250, 251, 253, 254, 255, 259], "risk": [4, 5, 30, 31, 253], "either": [4, 5, 27, 28, 39, 49, 62, 65, 81, 84, 86, 91, 102, 111, 112, 116, 122, 128, 140, 143, 146, 160, 162, 164, 165, 171, 172, 173, 188, 189, 190, 202, 205, 212, 223, 246, 247, 250, 251, 252, 253, 258], "OR": [4, 5, 19, 20, 25, 26, 44, 81, 102, 116, 123, 164, 173, 182, 188, 189, 190, 203, 223, 253], "given": [4, 5, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 39, 41, 52, 60, 61, 62, 63, 64, 67, 68, 69, 72, 77, 80, 81, 84, 85, 86, 89, 90, 91, 98, 102, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122, 123, 125, 130, 133, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 158, 160, 162, 163, 164, 165, 166, 169, 171, 172, 174, 175, 177, 178, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 195, 196, 199, 201, 202, 203, 206, 212, 215, 222, 223, 224, 225, 227, 230, 231, 233, 235, 237, 240, 244, 245, 247, 250, 251, 253, 254, 255, 257], "system": [4, 5, 33, 34, 43, 44, 61, 71, 75, 81, 86, 91, 224, 248, 249, 253, 254], "dataflow": [4, 5, 253], "tflite_micro": [4, 5, 27, 28, 67, 109, 150, 167, 241, 244, 253], "tflite_micro_speech": [4, 5, 27, 28, 62, 67, 69, 235, 244, 253], "For": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 39, 55, 57, 59, 61, 62, 63, 65, 67, 68, 69, 71, 72, 81, 89, 91, 102, 111, 112, 116, 122, 125, 127, 128, 129, 130, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 158, 227, 238, 240, 245, 247, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259], "simul": [4, 5, 15, 16, 41, 47, 62, 64, 67, 95, 98, 102, 117, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 172, 247, 249, 255, 257, 258], "latenc": [4, 5, 6, 7, 51, 63, 149, 235, 249, 251, 253, 254, 255], "take": [4, 5, 8, 9, 35, 44, 51, 62, 67, 74, 81, 86, 89, 122, 126, 127, 129, 130, 138, 141, 142, 148, 151, 152, 225, 240, 245, 247, 249, 251, 253, 254, 255, 257, 258, 259], "per": [4, 5, 10, 11, 12, 13, 81, 86, 89, 91, 102, 111, 112, 116, 120, 122, 127, 136, 140, 143, 144, 146, 147, 158, 160, 177, 180, 188, 201, 206, 249, 250, 251, 253, 254, 259], "workspac": [4, 5, 10, 11, 15, 16, 29, 32, 52, 55, 60, 62, 63, 67, 68, 71, 72, 77, 121, 238, 239, 240, 243, 244, 245, 249, 251, 253, 257, 258], "averag": [4, 5, 6, 7, 35, 36, 39, 62, 125, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 158, 237, 240, 245, 250, 251, 253, 257, 258], "1200m": [4, 5, 140, 253], "drop": [4, 5, 6, 7, 64, 72, 76, 104, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 233, 245, 250, 251, 253, 254, 258], "older": [4, 5, 6, 7, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 251, 253], "than": [4, 5, 6, 7, 15, 16, 17, 18, 21, 22, 29, 32, 35, 36, 39, 41, 61, 62, 77, 84, 86, 99, 102, 122, 126, 127, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 160, 165, 218, 233, 244, 249, 250, 251, 252, 253, 255, 257, 258], "now": [4, 5, 6, 7, 43, 73, 124, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 247, 249, 250, 251, 252, 253, 254, 257, 258], "minu": [4, 5, 6, 7, 62, 84, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 251, 253, 259], "minimum": [4, 5, 6, 7, 35, 62, 67, 69, 122, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 251, 253], "count": [4, 5, 6, 7, 10, 11, 89, 91, 111, 112, 116, 118, 122, 126, 128, 129, 130, 131, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 197, 204, 206, 207, 208, 238, 241, 247, 251, 253, 254, 258, 259], "must": [4, 5, 6, 7, 12, 13, 15, 16, 23, 24, 27, 28, 33, 37, 39, 41, 44, 45, 47, 48, 56, 57, 61, 63, 65, 67, 69, 70, 71, 74, 80, 81, 83, 91, 111, 112, 116, 117, 119, 121, 122, 124, 125, 126, 127, 129, 130, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 158, 164, 166, 172, 182, 188, 190, 206, 208, 213, 218, 219, 220, 224, 225, 232, 236, 238, 242, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "last": [4, 5, 6, 7, 25, 26, 69, 84, 89, 91, 111, 112, 116, 122, 124, 125, 128, 131, 149, 171, 190, 250, 251, 253, 257], "befor": [4, 5, 6, 7, 15, 16, 19, 20, 21, 22, 23, 24, 29, 32, 33, 34, 37, 43, 45, 47, 48, 62, 69, 71, 74, 80, 81, 84, 86, 89, 91, 102, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 125, 126, 127, 129, 130, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 158, 160, 163, 165, 202, 203, 207, 212, 213, 224, 227, 228, 233, 243, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "175": [4, 5, 149, 251, 253], "infer": [4, 5, 6, 7, 12, 13, 33, 35, 36, 42, 62, 63, 122, 126, 127, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 169, 172, 188, 238, 241, 248, 249, 251, 252, 253, 254, 257, 258], "within": [4, 5, 51, 85, 127, 136, 140, 143, 144, 146, 147, 223, 234, 235, 250, 251, 252, 253, 254, 257, 258], "least": [4, 5, 81, 86, 252, 253, 259], "suppress": [4, 5, 6, 7, 251, 253], "750m": [4, 5, 253], "onc": [4, 5, 19, 20, 35, 36, 57, 70, 71, 74, 102, 109, 111, 116, 117, 122, 124, 127, 133, 140, 143, 144, 146, 147, 149, 249, 250, 251, 252, 253, 254, 256, 258, 259], "wait": [4, 5, 19, 20, 35, 37, 122, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 165, 206, 207, 218, 224, 226, 227, 232, 233, 253, 259], "john": [4, 5, 253], "750": [4, 5, 35, 36, 126, 127, 141, 142, 148, 152, 157, 244, 253, 257], "dump": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 61, 71, 127, 128, 131, 133, 134, 138, 140, 143, 144, 146, 147, 149, 158, 228, 237, 251, 253, 254], "argument": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 66, 67, 69, 70, 81, 83, 86, 89, 91, 111, 112, 113, 116, 119, 120, 122, 123, 124, 125, 127, 129, 130, 134, 136, 140, 141, 142, 143, 144, 145, 146, 147, 149, 160, 164, 169, 190, 203, 206, 208, 215, 218, 222, 223, 224, 225, 238, 240, 243, 245, 247, 250, 251, 252, 253, 254, 257, 258], "path": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 52, 59, 67, 68, 71, 73, 75, 77, 80, 81, 85, 86, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 116, 119, 120, 121, 122, 123, 124, 126, 127, 128, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 156, 158, 160, 162, 163, 164, 165, 172, 188, 190, 202, 203, 206, 212, 213, 215, 225, 228, 231, 236, 238, 240, 241, 242, 243, 244, 245, 250, 251, 252, 253, 254, 255, 259], "archiv": [4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 41, 43, 44, 55, 59, 61, 62, 66, 68, 69, 71, 72, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 111, 116, 119, 120, 123, 126, 143, 146, 148, 152, 158, 163, 164, 203, 236, 237, 240, 243, 244, 245, 248, 249, 251, 252, 253, 254, 255, 259], "zip": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 55, 60, 62, 64, 65, 66, 71, 77, 96, 98, 119, 123, 126, 127, 128, 130, 131, 132, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 165, 203, 239, 244, 248, 249, 250, 251, 252, 253, 254, 258], "previous": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 37, 71, 83, 143, 146, 148, 162, 164, 165, 172, 203, 212, 218, 247, 250, 251, 253, 254, 255], "default": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 41, 52, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 75, 77, 81, 84, 86, 91, 102, 111, 112, 113, 114, 115, 116, 119, 122, 124, 125, 126, 127, 128, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 158, 160, 164, 169, 171, 188, 190, 203, 213, 220, 223, 225, 242, 249, 251, 252, 253, 256, 257, 258], "none": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 39, 67, 80, 81, 84, 85, 86, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 114, 115, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 205, 206, 209, 212, 213, 214, 215, 217, 218, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 238, 240, 241, 242, 244, 245, 250, 251, 253, 254, 255, 257, 258], "requir": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 37, 39, 43, 44, 47, 48, 57, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 76, 81, 84, 86, 91, 102, 117, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 164, 170, 171, 196, 206, 234, 235, 236, 238, 240, 241, 242, 245, 247, 248, 249, 253, 257, 259], "acceler": [4, 5, 6, 7, 12, 13, 15, 16, 27, 28, 33, 37, 39, 41, 42, 46, 47, 51, 64, 73, 78, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 164, 166, 169, 170, 171, 172, 213, 234, 238, 241, 248, 249, 250, 251, 252, 253, 254, 255, 258], "omit": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 41, 62, 67, 74, 75, 80, 81, 86, 89, 91, 102, 111, 116, 125, 126, 127, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 158, 160, 164, 202, 203, 208, 212, 213, 223, 227, 228, 251, 253], "kernel": [4, 5, 15, 16, 27, 28, 33, 37, 39, 41, 42, 46, 47, 63, 73, 136, 160, 164, 166, 169, 170, 172, 175, 176, 177, 178, 179, 180, 189, 191, 193, 199, 200, 201, 242, 253], "NOT": [4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 25, 26, 27, 28, 80, 85, 111, 116, 138, 140, 144, 147, 160, 164, 172, 174, 175, 178, 181, 183, 187, 188, 191, 195, 196, 199, 203, 208, 236, 238, 244, 251, 252, 253, 259], "sinc": [4, 5, 71, 86, 102, 111, 112, 116, 117, 122, 127, 129, 130, 132, 134, 140, 143, 144, 145, 146, 147, 148, 149, 238, 240, 245, 247, 249, 250, 251, 253, 254, 255, 257, 258], "hw": [4, 5, 253], "slow": [4, 5, 23, 24, 62, 70, 81, 84, 91, 122, 126, 127, 134, 140, 143, 144, 146, 147, 224, 249, 252, 253, 257, 259], "otherwis": [4, 5, 43, 56, 80, 84, 85, 86, 123, 124, 136, 138, 140, 141, 142, 143, 145, 146, 148, 149, 153, 158, 165, 171, 188, 190, 203, 218, 220, 225, 250, 251, 253, 259], "port": [4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 23, 24, 29, 32, 35, 36, 44, 64, 70, 77, 160, 165, 216, 226, 227, 233, 249, 251, 252, 253], "com": [4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 34, 35, 36, 43, 44, 45, 47, 48, 58, 71, 74, 77, 88, 93, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 125, 128, 132, 134, 135, 137, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 159, 190, 216, 227, 233, 236, 238, 240, 241, 242, 244, 245, 251, 252, 253, 258, 259], "attempt": [4, 5, 6, 7, 12, 13, 15, 16, 61, 111, 112, 116, 160, 237, 251, 253], "determin": [4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 30, 31, 47, 51, 63, 67, 69, 81, 86, 89, 102, 111, 112, 116, 122, 138, 140, 141, 142, 145, 148, 149, 153, 164, 172, 203, 212, 235, 236, 238, 240, 241, 244, 245, 249, 251, 253, 254, 258, 259], "v": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 52, 57, 73, 84, 128, 138, 158, 171, 190, 250, 251, 253], "consol": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 62, 67, 158, 186, 222, 242, 249, 250, 251, 252, 253], "window_dur": [4, 5, 6, 7, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 251, 253], "w": [4, 5, 6, 7, 10, 11, 17, 18, 25, 26, 140, 144, 147, 218, 222, 248, 251, 253, 258, 259], "durat": [4, 5, 6, 7, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 249, 251, 253], "m": [4, 5, 6, 7, 35, 36, 62, 74, 84, 102, 126, 131, 132, 133, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 154, 156, 157, 230, 240, 244, 245, 251, 253, 257], "control": [4, 5, 6, 7, 37, 39, 41, 62, 81, 84, 86, 89, 91, 102, 125, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 232, 233, 251, 253, 254, 255, 256, 257], "smooth": [4, 5, 6, 7, 62, 84, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 251, 253], "all": [4, 5, 6, 7, 10, 11, 14, 25, 26, 33, 35, 41, 42, 43, 44, 55, 57, 61, 63, 64, 67, 68, 69, 70, 71, 73, 76, 81, 84, 86, 89, 91, 99, 100, 102, 103, 104, 105, 111, 112, 113, 114, 116, 119, 121, 123, 126, 127, 129, 130, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 157, 158, 160, 171, 188, 190, 202, 206, 207, 208, 222, 223, 224, 225, 227, 231, 233, 236, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "longer": [4, 5, 6, 7, 74, 102, 122, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 172, 249, 251, 252, 253, 257], "millisecond": [4, 5, 6, 7, 35, 62, 67, 84, 111, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 251, 253, 257], "confid": [4, 5, 6, 7, 36, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 251, 253, 257], "correct": [4, 5, 6, 7, 36, 53, 56, 126, 127, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 188, 251, 253], "miss": [4, 5, 6, 7, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 251, 253], "number": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 25, 26, 35, 39, 47, 51, 61, 62, 63, 64, 67, 68, 69, 77, 81, 84, 85, 86, 89, 91, 102, 111, 112, 113, 114, 115, 116, 119, 120, 122, 125, 126, 127, 131, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 158, 160, 163, 166, 169, 171, 172, 174, 175, 178, 181, 183, 187, 188, 191, 194, 195, 196, 197, 199, 204, 206, 208, 213, 214, 223, 224, 233, 243, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "t": [4, 5, 6, 7, 23, 24, 33, 53, 70, 91, 98, 100, 102, 104, 122, 124, 125, 126, 127, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 149, 152, 153, 160, 203, 223, 249, 251, 253, 254, 257], "consid": [4, 5, 6, 7, 10, 11, 37, 39, 62, 80, 81, 84, 89, 102, 113, 122, 126, 127, 136, 138, 140, 141, 142, 143, 144, 148, 149, 152, 158, 235, 236, 240, 245, 250, 251, 253, 259], "increas": [4, 5, 6, 7, 57, 67, 81, 86, 122, 125, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 172, 249, 251, 253, 254, 255, 257, 259], "precis": [4, 5, 6, 7, 126, 127, 141, 142, 148, 149, 152, 158, 230, 237, 248, 251, 253, 258], "cost": [4, 5, 6, 7, 86, 126, 127, 141, 142, 145, 148, 149, 152, 249, 251, 253, 254, 257], "recal": [4, 5, 6, 7, 57, 126, 127, 140, 141, 142, 144, 147, 148, 149, 152, 158, 237, 248, 250, 251, 253, 256, 258], "amount": [4, 5, 6, 7, 35, 62, 67, 71, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 160, 165, 170, 206, 218, 227, 233, 249, 250, 251, 253, 254, 257], "new": [4, 5, 35, 36, 37, 39, 41, 43, 50, 52, 61, 62, 65, 67, 69, 74, 84, 91, 96, 102, 111, 112, 116, 120, 122, 126, 127, 141, 142, 145, 148, 152, 166, 171, 188, 190, 214, 223, 225, 227, 234, 239, 242, 244, 250, 251, 252, 253, 255, 258, 259], "l": [4, 5, 6, 7, 70, 136, 225, 249, 251, 253], "non": [4, 5, 23, 24, 60, 68, 70, 80, 85, 100, 122, 124, 125, 126, 127, 131, 134, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 154, 160, 223, 233, 237, 240, 244, 245, 247, 250, 251, 252, 253, 258, 259], "specifi": [4, 5, 19, 20, 23, 24, 25, 26, 33, 34, 35, 36, 37, 39, 41, 47, 52, 58, 59, 61, 62, 64, 67, 68, 69, 70, 71, 75, 81, 83, 86, 89, 91, 96, 102, 111, 112, 116, 121, 122, 124, 125, 126, 127, 129, 130, 132, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 158, 172, 182, 188, 190, 202, 203, 206, 207, 209, 218, 224, 233, 238, 239, 240, 243, 244, 245, 247, 249, 250, 251, 252, 253, 254, 258, 259], "volum": [4, 5, 62, 67, 81, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 244, 252, 253], "u": [4, 5, 34, 43, 44, 58, 240, 245, 253, 257, 258, 259], "gain": [4, 5, 62, 84, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 247, 249, 253, 254], "scaler": [4, 5, 62, 67, 126, 127, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 177, 180, 185, 188, 194, 201, 253], "amplitud": [4, 5, 62, 67, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 253], "x": [4, 5, 6, 7, 36, 39, 57, 81, 86, 90, 111, 112, 113, 114, 115, 116, 118, 122, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 143, 144, 145, 146, 147, 149, 151, 153, 158, 173, 175, 178, 188, 191, 198, 199, 207, 224, 242, 247, 250, 251, 253, 258, 259], "gener": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 40, 41, 42, 44, 45, 46, 50, 52, 57, 59, 60, 61, 63, 65, 68, 69, 70, 72, 76, 80, 81, 83, 84, 85, 86, 88, 89, 91, 97, 101, 109, 111, 112, 115, 116, 117, 118, 119, 120, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 172, 174, 175, 178, 181, 182, 183, 186, 187, 188, 190, 191, 195, 196, 199, 202, 203, 205, 206, 208, 209, 212, 215, 216, 231, 234, 235, 236, 240, 242, 243, 244, 245, 247, 248, 249, 255, 257, 258], "unquant": [4, 5, 119, 122, 253], "mp4": [4, 5, 253], "z": [4, 5, 12, 13, 62, 84, 253], "sensit": [4, 5, 6, 7, 35, 36, 61, 152, 251, 253], "float": [4, 5, 6, 7, 10, 11, 27, 28, 39, 56, 57, 62, 81, 84, 86, 89, 90, 91, 102, 111, 112, 116, 122, 124, 125, 136, 138, 140, 143, 144, 147, 158, 160, 163, 165, 171, 182, 189, 190, 194, 206, 212, 217, 218, 220, 224, 227, 230, 233, 251, 253], "indic": [4, 5, 6, 7, 35, 36, 39, 51, 61, 62, 75, 84, 89, 91, 102, 111, 116, 122, 134, 141, 169, 233, 237, 251, 253, 258], "less": [4, 5, 6, 7, 61, 102, 122, 136, 138, 141, 142, 145, 148, 160, 218, 233, 249, 250, 251, 253, 257, 259], "By": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 23, 24, 33, 35, 36, 61, 64, 68, 70, 71, 81, 86, 91, 98, 112, 119, 122, 126, 127, 133, 134, 143, 146, 149, 153, 158, 188, 242, 248, 249, 251, 252, 253, 255, 257], "download": [4, 5, 6, 7, 8, 9, 12, 13, 19, 20, 34, 43, 48, 58, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 121, 127, 128, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 153, 156, 157, 203, 240, 244, 245, 247, 249, 250, 251, 252, 253, 256, 257, 259], "overrid": [4, 5, 6, 7, 12, 13, 25, 26, 35, 39, 41, 52, 69, 75, 77, 86, 111, 112, 116, 121, 122, 126, 127, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 163, 243, 251, 253, 257], "altern": [4, 5, 6, 7, 12, 13, 35, 37, 39, 43, 44, 53, 62, 63, 67, 68, 74, 123, 141, 142, 182, 190, 206, 245, 251, 252, 253, 254, 255, 257, 259], "exist": [4, 5, 6, 7, 12, 13, 19, 20, 33, 66, 73, 74, 91, 129, 140, 143, 144, 146, 147, 188, 223, 224, 225, 234, 249, 251, 253, 258], "test": [4, 5, 6, 7, 10, 11, 12, 13, 25, 26, 34, 43, 44, 50, 61, 69, 93, 102, 103, 104, 105, 111, 112, 116, 118, 119, 120, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 165, 202, 223, 232, 240, 243, 245, 247, 250, 254, 256, 258], "unit": [4, 5, 6, 7, 12, 13, 15, 16, 62, 67, 69, 131, 138, 152, 160, 173, 183, 207, 230, 250, 251, 253, 254, 259], "show": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 44, 61, 71, 122, 136, 138, 158, 163, 203, 237, 238, 239, 240, 243, 245, 249, 250, 251, 253, 254], "messag": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 54, 63, 122, 158, 160, 169, 225, 250, 251, 253, 254], "exit": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 123, 214, 238, 250, 251, 253, 254], "usag": [5, 7, 9, 11, 13, 16, 18, 20, 22, 24, 26, 28, 31, 32, 51, 59, 65, 81, 83, 84, 86, 127, 134, 140, 141, 142, 143, 144, 145, 146, 147, 149, 188, 214, 224, 235, 249, 250, 251, 253, 254, 258, 259], "rgb": [6, 14, 39, 40, 86, 116, 157], "camera": [6, 7, 14, 39, 40, 57, 250, 251, 254], "arducam": [6, 7, 39, 251], "www": [6, 7, 12, 13, 23, 24, 34, 43, 44, 70, 97, 99, 100, 101, 102, 103, 120, 122, 127, 129, 130, 131, 134, 136, 138, 140, 141, 142, 143, 145, 146, 148, 149, 154, 157, 247, 251, 253, 258, 259], "product": [6, 7, 12, 13, 37, 39, 78, 236, 252, 259], "2mp": [6, 7], "spi": [6, 7, 8, 9, 39], "b0067": [6, 7], "arduino": [6, 7], "onlin": [6, 7, 12, 13, 35, 36, 37, 38, 39, 41, 52, 71, 249, 254], "cpp_develop": [6, 7, 12, 13], "image_classi": [6, 7], "fier": [6, 7], "setup": [6, 7, 12, 13, 54, 75, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 250, 251, 253, 254], "image_classif": [6, 7, 65, 67, 68, 72, 235], "rock_paper_scissor": [6, 7, 39, 106, 107, 251], "mvp": [6, 7, 15, 16, 33, 37, 39, 41, 42, 46, 51, 78, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 234, 248, 249, 250, 251, 252, 253, 254, 255, 258], "again": [6, 7, 35, 37, 140, 141, 143, 144, 146, 147, 149, 242, 249, 251, 253, 257], "uniqu": [6, 7, 37, 40, 62, 138, 170, 209, 234, 250, 251, 259], "everi": [6, 7, 10, 11, 23, 24, 70, 111, 112, 113, 116, 122, 126, 127, 134, 138, 141, 142, 143, 145, 146, 148, 149, 158, 249, 251, 253], "closer": [6, 7, 143, 146, 251], "suffici": [6, 7, 39, 251], "prior": [6, 7, 251], "improv": [6, 7, 12, 13, 23, 24, 81, 86, 91, 122, 126, 127, 128, 132, 133, 134, 138, 141, 142, 143, 145, 146, 148, 149, 152, 172, 234, 249, 251, 253, 254, 255, 257, 258], "throughput": [6, 7, 12, 13, 91, 127, 134, 140, 143, 144, 146, 147, 172, 249, 251], "image_classifi": [6, 7, 39, 149, 251], "classify_imag": [7, 14, 37, 78, 149, 250, 251, 254], "silicon": [8, 14, 35, 36, 42, 43, 44, 137, 142, 235, 240, 244, 247, 249, 250, 251, 253, 254, 257], "lab": [8, 14, 35, 36, 42, 43, 44, 137, 142, 235, 240, 244, 247, 249, 250, 251, 253, 254, 257], "simplic": [8, 9, 14, 42, 44, 77, 140, 223, 235, 250, 251, 254], "extract": [8, 9, 35, 36, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 119, 125, 127, 131, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 157, 202, 203, 249, 250, 251, 253, 255, 257, 258], "dri": [8, 9, 253], "commander_win32_x64_1v12p0b1057": [8, 9], "v1": [8, 9, 132, 134, 153, 156, 157, 249, 258, 259], "12": [8, 9, 19, 20, 75, 81, 125, 126, 132, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 154, 156, 157, 238, 240, 244, 251, 252, 253, 254, 257, 258, 259], "pleas": [8, 9, 59, 81, 86, 99, 102, 240, 245, 247, 249, 251, 253, 258], "patient": [8, 9, 240, 245, 249, 251, 257, 258], "list": [8, 9, 10, 11, 53, 62, 66, 71, 75, 77, 81, 86, 89, 91, 94, 98, 102, 111, 112, 113, 116, 119, 120, 121, 122, 123, 125, 128, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 158, 160, 163, 166, 169, 170, 172, 174, 175, 177, 178, 180, 181, 182, 183, 187, 188, 190, 191, 194, 195, 196, 198, 199, 201, 202, 206, 207, 208, 212, 213, 222, 223, 225, 227, 228, 230, 233, 242, 249, 251, 258, 259], "below": [8, 9, 27, 28, 39, 62, 71, 80, 81, 84, 111, 112, 116, 132, 134, 141, 142, 145, 148, 149, 153, 227, 249, 250, 251, 252, 253, 255, 257, 258, 259], "its": [8, 9, 14, 17, 18, 37, 39, 51, 60, 61, 67, 71, 81, 86, 89, 103, 104, 105, 123, 127, 133, 134, 136, 138, 140, 143, 144, 146, 147, 148, 149, 185, 203, 208, 224, 225, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258], "descript": [8, 9, 14, 27, 28, 40, 44, 49, 59, 63, 67, 69, 76, 109, 111, 112, 116, 117, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 164, 170, 188, 234, 235, 240, 241, 244, 245, 247, 251, 252, 253], "h": [8, 9, 19, 20, 23, 24, 29, 32, 35, 36, 62, 71, 81, 84, 212, 230, 249, 258], "displai": [8, 9, 10, 11, 25, 26, 37, 39, 61, 64, 70, 136, 138, 158, 188, 237, 249, 250, 251, 253, 254], "version": [8, 9, 50, 62, 67, 69, 74, 86, 102, 117, 119, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 166, 170, 172, 182, 203, 225, 236, 240, 241, 242, 244, 245, 247, 248, 250, 251, 253, 254, 257, 258, 259], "adapt": [8, 9, 77, 131, 136, 138, 149, 154, 156, 223, 251, 254], "aem": [8, 9], "advanc": [8, 9, 235, 253, 258], "energi": [8, 9, 15, 16, 36, 61, 63, 68, 72, 159, 160, 171, 238, 240, 241, 245, 251, 253, 254, 257, 258], "monitor": [8, 9, 14, 23, 44, 59, 67, 122, 126, 127, 128, 132, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 224, 236, 248, 251, 253], "combin": [8, 9, 127, 134, 140, 143, 144, 146, 147, 157, 206, 247, 253], "one": [8, 9, 10, 11, 17, 18, 19, 20, 25, 26, 36, 39, 44, 50, 51, 54, 67, 71, 77, 81, 83, 86, 102, 111, 112, 116, 117, 120, 122, 124, 127, 130, 134, 136, 138, 140, 143, 144, 146, 147, 148, 158, 160, 169, 172, 182, 188, 190, 223, 224, 234, 235, 243, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "ctune": [8, 9], "ebl": [8, 9], "encrypt": [8, 9], "decrypt": [8, 9], "other": [8, 9, 10, 11, 19, 20, 44, 50, 61, 62, 67, 69, 70, 71, 74, 81, 86, 89, 91, 102, 113, 117, 119, 122, 124, 127, 129, 130, 134, 140, 143, 144, 146, 147, 158, 160, 188, 233, 247, 250, 251, 252, 253, 254, 256, 258, 259], "handl": [8, 9, 57, 67, 145, 146, 147, 231], "extflash": [8, 9], "extern": [8, 9, 160, 235, 251], "flash": [8, 9, 27, 28, 35, 37, 39, 41, 51, 52, 63, 65, 126, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 238, 241, 248, 249, 250, 251, 252, 253, 254, 257, 258], "write": [8, 9, 23, 24, 39, 41, 52, 70, 75, 80, 85, 109, 122, 126, 127, 134, 140, 141, 142, 143, 144, 145, 146, 147, 149, 188, 218, 220, 222, 227, 228, 232, 233, 251, 258, 259], "gbl": [8, 9], "nvm3": [8, 9], "readmem": [8, 9], "memori": [8, 9, 14, 17, 27, 28, 33, 37, 39, 41, 47, 48, 51, 52, 59, 63, 81, 86, 103, 104, 105, 126, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 226, 236, 238, 240, 241, 244, 245, 248, 250, 251, 252, 253, 254, 257, 258], "secur": [8, 9, 71, 236, 249], "element": [8, 9, 10, 11, 39, 62, 86, 89, 111, 112, 113, 116, 133, 149, 158, 194, 196, 197, 225], "swo": [8, 9], "tokendump": [8, 9], "token": [8, 9, 259], "tokenhead": [8, 9], "group": [8, 9, 60, 89, 92, 124, 140, 144, 147, 209, 250, 253], "current": [8, 9, 17, 18, 19, 20, 35, 36, 37, 65, 66, 73, 74, 78, 84, 89, 111, 112, 116, 122, 124, 127, 134, 140, 141, 143, 144, 146, 147, 160, 174, 175, 178, 181, 182, 183, 187, 188, 189, 190, 191, 195, 196, 199, 207, 213, 223, 225, 228, 230, 231, 238, 251, 253, 254, 255, 257, 258, 259], "done": [8, 9, 39, 57, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 81, 86, 119, 126, 129, 130, 141, 196, 206, 226, 235, 243, 244, 247, 249, 250, 251, 252, 253, 254, 257, 258], "evaluate_model": [10, 49, 61, 66, 113, 114, 115, 117, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 159, 237, 247, 251, 253], "valid": [10, 11, 23, 24, 57, 65, 70, 81, 86, 89, 91, 93, 102, 111, 112, 116, 120, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 189, 209, 238, 240, 241, 242, 244, 245, 247, 249, 250, 251, 253, 254, 257, 258, 259], "summari": [10, 11, 14, 15, 16, 21, 22, 25, 26, 59, 60, 62, 111, 112, 116, 118, 119, 120, 122, 129, 130, 158, 159, 160, 162, 182, 186, 188, 190, 206, 207, 235, 236, 238, 244, 247, 248, 250, 254, 257, 258, 259], "model_evalu": [10, 11], "h5": [10, 11, 17, 18, 21, 22, 25, 26, 29, 32, 53, 55, 60, 68, 72, 119, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 162, 165, 240, 245, 247, 250, 251, 253, 255], "float32": [10, 11, 39, 51, 56, 61, 62, 65, 76, 80, 81, 83, 85, 90, 91, 119, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 182, 188, 237, 238, 240, 242, 247, 251, 253, 254], "audio_example1": [10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 62, 67, 69], "limit": [10, 11, 25, 26, 34, 43, 44, 89, 91, 102, 111, 112, 116, 120, 136, 153, 156, 158, 160, 218, 224, 249, 253, 258, 259], "max": [10, 11, 62, 81, 84, 122, 125, 136, 140, 173, 177, 180, 185, 193, 201, 207, 223, 249, 250, 257, 258, 259], "100": [10, 11, 25, 26, 67, 81, 111, 112, 116, 117, 122, 126, 127, 129, 130, 131, 133, 134, 136, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 207, 232, 237, 238, 244, 247, 250, 251, 253, 258, 259], "auto": [10, 11, 62, 67, 84, 113, 116, 122, 128, 135, 143, 146, 153, 158, 203], "encod": [10, 11, 67, 81, 86, 91, 102, 111, 113, 116, 127, 128, 130, 134, 135, 140, 143, 144, 146, 147, 153, 158, 188, 252, 254], "fully_connected_autoencod": [10, 11], "dir": [10, 11, 12, 13, 17, 18, 25, 26, 44, 70, 124, 138, 158, 213, 223, 238, 240, 241, 242, 244, 245, 250], "eval": [10, 11, 60, 111, 113, 116, 138, 158, 250], "kera": [10, 11, 17, 18, 21, 22, 25, 26, 29, 32, 53, 60, 61, 69, 70, 81, 85, 86, 105, 109, 111, 112, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 158, 163, 165, 235, 242, 247, 250, 254, 255, 257, 258], "weight": [10, 11, 17, 18, 23, 24, 25, 26, 27, 28, 33, 51, 59, 61, 62, 65, 69, 70, 76, 86, 111, 112, 116, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 158, 163, 164, 177, 180, 183, 185, 201, 234, 235, 237, 240, 244, 245, 247, 250, 251, 252, 253, 257, 258], "previou": [10, 11, 17, 18, 25, 26, 51, 70, 124, 149, 158, 172, 218, 222, 225, 249, 251, 254], "session": [10, 11, 17, 18, 19, 20, 25, 26, 102, 121, 122, 124, 158, 206, 248, 249], "absolut": [10, 11, 17, 18, 25, 26, 71, 89, 102, 119, 122, 124, 140, 141, 142, 143, 144, 145, 146, 147, 148, 158, 218, 223, 254], "best": [10, 11, 17, 18, 25, 26, 122, 126, 148, 158, 163, 240, 245, 248, 249, 251, 252, 253, 254, 255, 259], "find": [10, 11, 17, 18, 25, 26, 35, 36, 41, 71, 73, 123, 125, 136, 138, 140, 141, 143, 144, 146, 147, 158, 160, 225, 227, 233, 248, 249, 250, 251, 253, 254, 258], "filenam": [10, 11, 17, 18, 25, 26, 67, 69, 70, 81, 82, 86, 87, 89, 91, 102, 119, 122, 140, 141, 144, 145, 147, 158, 188, 203, 223, 230, 242, 250, 258], "evaluateautoencod": [10, 11], "mixin": [10, 11, 19, 20, 61, 67, 69, 71, 112, 113, 114, 117, 119, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 247, 251, 253], "comma": [10, 11, 158, 225], "seper": [10, 11, 158, 249], "first": [10, 11, 29, 32, 34, 35, 36, 37, 39, 41, 43, 44, 50, 52, 54, 63, 68, 70, 72, 73, 81, 84, 86, 99, 102, 111, 112, 113, 116, 129, 130, 143, 146, 158, 160, 162, 171, 174, 190, 197, 204, 208, 213, 238, 240, 242, 245, 247, 249, 250, 251, 253, 254, 256, 257], "normal": [10, 11, 37, 41, 62, 74, 81, 84, 86, 113, 122, 128, 134, 138, 143, 146, 153, 158, 172, 188, 223, 242, 251], "abnorm": [10, 11, 113, 128, 158], "independ": [10, 11, 113, 122, 124, 158, 235], "place": [10, 11, 37, 41, 81, 86, 90, 94, 96, 102, 120, 158, 196], "upper": [10, 11, 73, 86, 120, 153, 156, 158, 223, 249, 253], "decod": [10, 11, 80, 85, 128, 140, 143, 144, 146, 147, 158], "diagram": [10, 11, 25, 26, 60, 61, 158, 159, 163, 237, 250, 251, 255, 258], "arch": [10, 11], "doe": [10, 11, 15, 16, 25, 26, 53, 57, 62, 63, 68, 69, 71, 72, 80, 81, 84, 85, 89, 100, 111, 112, 116, 117, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 171, 174, 175, 178, 181, 183, 187, 190, 191, 195, 196, 199, 209, 225, 236, 238, 240, 245, 247, 250, 251, 252, 253, 254, 255, 258], "thing": [10, 11, 25, 26, 51, 225, 249, 250, 251, 253, 258], "post": [10, 11, 15, 16, 25, 26, 65, 67, 120, 122, 141, 147, 158, 160, 163, 248, 258], "upload": [10, 11, 15, 16, 19, 20, 25, 26, 63, 64, 72, 121, 124, 143, 146, 158, 160, 163, 248, 249], "evalu": [11, 14, 25, 26, 49, 53, 59, 60, 65, 66, 76, 88, 96, 102, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 159, 234, 235, 236, 247, 248, 254, 257], "fingerprint": [12, 13, 14, 40, 138, 139, 234, 251, 254], "authent": [12, 13, 40, 138, 139, 234], "eader": [12, 13], "r503": [12, 13, 37, 250], "adafruit": [12, 13, 252], "4651": [12, 13], "fingerprint_": [12, 13], "ee": [12, 13, 207, 259], "fingerprint_authent": [12, 13, 250], "sequenc": [12, 13, 37, 61, 69, 81, 111, 112, 116, 249, 250, 253, 258], "finger": [12, 13, 37, 138, 250], "With": [12, 13, 19, 20, 35, 36, 37, 39, 41, 44, 57, 62, 63, 69, 70, 71, 84, 86, 122, 149, 243, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259], "integ": [12, 13, 23, 24, 35, 65, 70, 81, 86, 91, 103, 104, 105, 111, 112, 116, 119, 122, 125, 126, 127, 134, 136, 143, 146, 163, 173, 188, 189, 194, 197, 212, 224, 251, 258], "collect": [12, 13, 96, 98, 138, 144, 147, 182, 235, 247, 248, 250, 251, 253, 254], "5": [12, 13, 19, 20, 61, 62, 67, 69, 74, 75, 81, 84, 91, 105, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 173, 224, 238, 240, 241, 243, 244, 245, 247, 251, 253, 254, 257, 258, 259], "reader": [12, 13, 37], "fingerprint_read": [13, 14, 37, 78, 138, 250, 251, 254], "describ": [14, 34, 43, 44, 59, 61, 62, 63, 65, 68, 69, 71, 72, 73, 74, 234, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "avail": [14, 19, 20, 34, 40, 41, 43, 44, 46, 61, 62, 63, 65, 68, 69, 70, 71, 72, 74, 81, 86, 88, 91, 96, 100, 105, 113, 114, 117, 124, 127, 134, 140, 143, 144, 146, 147, 159, 160, 206, 216, 218, 223, 224, 233, 236, 240, 245, 248, 249, 251, 252, 254, 255, 257, 259], "prompt": [14, 43, 73, 102, 249], "access": [14, 43, 45, 47, 48, 61, 62, 63, 65, 68, 69, 72, 73, 76, 109, 151, 186, 188, 190, 225, 235, 249, 250, 251, 253, 254, 259], "mltk_pyvenv": [14, 50, 74], "bat": [14, 43, 44, 74], "bin": [14, 43, 44, 74, 145, 153, 156, 182, 190, 253, 254, 257, 258], "profil": [14, 16, 17, 23, 24, 33, 37, 39, 40, 49, 51, 52, 59, 60, 66, 78, 109, 117, 120, 122, 124, 127, 129, 130, 131, 132, 134, 136, 159, 160, 167, 169, 171, 172, 226, 235, 236, 247, 248, 250], "etc": [14, 27, 28, 67, 111, 112, 116, 122, 143, 146, 158, 235, 248, 250, 251, 252, 253, 259], "addit": [14, 16, 28, 46, 51, 57, 62, 65, 68, 74, 76, 77, 86, 117, 119, 120, 122, 124, 125, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 160, 174, 175, 178, 181, 183, 187, 188, 191, 195, 196, 199, 206, 208, 213, 242, 244, 247, 250, 251, 253, 254, 257, 258], "flag": [14, 63, 68, 71, 72, 122, 227, 249, 251, 253], "append": [14, 25, 26, 69, 71, 123, 127, 131, 134, 136, 138, 140, 141, 143, 144, 146, 147, 151, 212, 223, 224, 225, 243, 250, 251, 253], "tensorboard": [14, 24, 59, 67, 74, 122, 126, 127, 134, 143, 146, 236], "ssh": [14, 20, 59, 69, 121, 236, 248, 251, 252, 253], "remot": [14, 19, 20, 63, 64, 72, 73, 121, 236, 245, 250, 251, 253, 258], "server": [14, 19, 20, 23, 24, 29, 32, 59, 63, 70, 71, 72, 73, 74, 124, 165, 245, 249, 250, 251, 253, 258], "reduc": [14, 15, 16, 17, 41, 53, 59, 65, 122, 148, 160, 189, 224, 235, 236, 248, 249, 251, 253, 254, 257, 258, 259], "footprint": [14, 17, 236], "summar": [14, 22, 49, 62, 111, 112, 116, 126, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 162, 235, 250, 251, 253, 254], "graph": [14, 23, 24, 29, 32, 70, 72, 91, 122, 126, 127, 134, 143, 146, 165, 235, 245, 250, 251, 253, 254], "interact": [14, 29, 32, 59, 61, 72, 102, 159, 165, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 250, 251, 253, 254, 258], "visual": [14, 23, 24, 29, 30, 34, 42, 43, 45, 47, 48, 50, 58, 59, 61, 70, 74, 86, 122, 126, 127, 134, 136, 143, 146, 155, 157, 165, 235, 236, 248, 249, 250, 254, 256], "ani": [15, 16, 19, 20, 25, 26, 27, 28, 33, 35, 36, 37, 39, 41, 44, 48, 50, 62, 63, 67, 68, 70, 71, 72, 73, 74, 76, 81, 84, 86, 102, 111, 112, 116, 117, 119, 120, 121, 122, 124, 127, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 218, 225, 227, 233, 236, 248, 249, 250, 251, 253, 254, 256, 257, 258], "profile_model": [15, 49, 63, 66, 74, 117, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 159, 167, 172, 226, 238, 241, 247, 258], "model_profil": [15, 16, 27, 28, 33], "image_example1": [15, 16, 25, 26, 29, 32, 33, 41, 61, 63, 66, 67, 69, 71, 237, 238, 239, 240, 241, 242, 243, 245, 251, 254], "estim": [15, 16, 63, 136, 138, 144, 147, 160, 166, 172, 241, 250, 251, 253, 258], "without": [15, 16, 27, 28, 48, 62, 68, 74, 86, 102, 122, 140, 141, 142, 144, 145, 147, 149, 162, 188, 203, 227, 236, 249, 251, 252, 253, 254], "some_model": [15, 16], "One": [15, 16, 17, 18, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 57, 70, 81, 86, 96, 102, 112, 118, 120, 122, 123, 131, 188, 218, 249, 250, 251, 253], "compil": [15, 16, 34, 43, 44, 67, 69, 96, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 166, 172, 226, 247, 250, 251, 253, 254, 255, 257], "rather": [15, 16, 17, 18, 21, 22, 29, 32, 41, 86, 102, 141, 142, 145, 149, 165, 244, 251], "instead": [15, 16, 27, 28, 35, 37, 39, 41, 47, 52, 71, 73, 74, 81, 86, 111, 112, 116, 122, 164, 224, 235, 247, 249, 251, 253, 257], "o": [15, 16, 17, 18, 21, 22, 27, 28, 71, 75, 77, 91, 132, 138, 140, 141, 143, 144, 145, 146, 147, 207, 213, 223, 224, 229, 231, 238, 240, 241, 242, 244, 245, 251, 252, 258, 259], "report": [15, 16, 160, 248, 251, 257], "format": [15, 16, 19, 20, 25, 26, 34, 36, 43, 44, 56, 57, 60, 62, 64, 71, 77, 81, 84, 102, 122, 136, 143, 146, 151, 160, 170, 172, 186, 212, 214, 230, 234, 247, 251, 253], "return": [15, 16, 53, 56, 61, 63, 67, 69, 71, 80, 81, 83, 84, 85, 86, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 212, 213, 214, 215, 217, 218, 220, 222, 223, 224, 225, 227, 228, 230, 231, 232, 233, 238, 242, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258], "unformat": [15, 16], "metric": [15, 16, 23, 24, 67, 69, 70, 99, 111, 112, 116, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 163, 166, 172, 234, 236, 241, 247, 250, 251, 253, 254, 255, 257], "cpu": [15, 16, 41, 51, 63, 71, 81, 86, 91, 126, 127, 128, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 171, 224, 238, 241, 248, 252, 254, 257, 258], "cycl": [15, 16, 41, 47, 51, 57, 63, 126, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 171, 238, 241, 251, 253, 254, 257, 258], "extra": [15, 16, 143, 146], "info": [15, 16, 62, 67, 71, 103, 105, 109, 124, 126, 138, 140, 141, 142, 144, 147, 148, 152, 188, 222, 224, 238, 239, 240, 243, 244, 245, 250, 253, 257, 258], "quantize_model": [17, 49, 65, 119, 120, 159, 239], "mltk_model": [17, 18, 61, 62, 66, 67, 69, 113, 119, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 163, 247, 250, 251, 253], "tflite_convert": [17, 18, 56, 57, 65, 67, 69, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 239, 247, 251, 253], "model_quant": [17, 18], "associ": [17, 18, 27, 28, 35, 36, 37, 39, 91, 102, 160, 162, 169, 174, 175, 178, 181, 183, 187, 188, 191, 195, 196, 198, 199, 249, 250, 251, 252, 253, 254, 255, 257, 258], "structur": [17, 18, 27, 28, 42, 62, 76, 89, 91, 109, 132, 164, 202, 236, 250, 251, 253, 259], "back": [19, 20, 35, 36, 140, 144, 147, 242, 251], "open": [19, 20, 23, 24, 50, 64, 71, 72, 73, 102, 140, 144, 147, 217, 218, 219, 220, 223, 227, 228, 233, 238, 240, 241, 242, 244, 245, 249, 251, 252, 253, 254, 256, 257, 258, 259], "user_set": [19, 20, 66, 75, 77, 121, 223, 248, 249], "yaml": [19, 20, 27, 28, 66, 75, 77, 121, 223, 248, 249], "config": [19, 20, 34, 35, 36, 37, 39, 41, 52, 77, 124, 126, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 174, 175, 178, 181, 183, 187, 191, 195, 196, 199, 206, 207, 240, 242, 244, 249, 251, 252, 253, 257, 258, 259], "export": [19, 20, 71, 75, 91, 121, 143, 146, 224, 235, 258], "variabl": [19, 20, 33, 36, 37, 39, 41, 44, 66, 71, 77, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 121, 122, 124, 143, 144, 146, 212, 213, 223, 224, 225, 228, 236, 251, 253, 254, 256], "6": [19, 20, 36, 37, 39, 81, 84, 86, 90, 99, 105, 126, 127, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 173, 233, 238, 240, 241, 243, 244, 247, 249, 251, 253, 254, 257, 258], "startup": [19, 20, 35, 36, 37, 39, 249], "shell": [19, 20, 71, 121, 228, 250, 251, 253, 254], "7": [19, 20, 37, 73, 74, 75, 105, 126, 127, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 165, 217, 238, 240, 241, 243, 244, 245, 247, 251, 253, 254, 257, 258], "detach": [19, 20, 71], "subprocess": [19, 20, 71, 81, 86, 91, 127, 134, 140, 143, 144, 146, 147, 224, 240, 245, 253, 254], "continu": [19, 20, 43, 71, 122, 131, 140, 143, 144, 146, 147, 207, 232, 238, 239, 240, 243, 245, 247, 250, 251, 252, 253, 254, 255, 256, 259], "even": [19, 20, 62, 71, 84, 102, 132, 249, 251, 253, 259], "prematur": [19, 20, 71, 249], "close": [19, 20, 43, 102, 138, 217, 218, 220, 227, 233, 249, 250, 259], "8": [19, 20, 34, 39, 43, 44, 67, 69, 73, 74, 81, 84, 89, 91, 105, 122, 125, 126, 127, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 188, 233, 238, 240, 241, 243, 244, 245, 247, 249, 251, 253, 254, 257, 258, 259], "poll": [19, 20, 71], "abort": [19, 20, 37, 71, 227, 249], "9": [19, 20, 34, 43, 44, 73, 74, 75, 103, 104, 105, 125, 126, 127, 128, 131, 132, 133, 134, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 225, 238, 240, 241, 243, 244, 245, 247, 249, 251, 252, 253, 254, 255, 257, 258], "11": [19, 20, 128, 132, 133, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 238, 240, 244, 245, 251, 253, 254, 257, 258], "shutdown": [19, 20, 127, 134, 140, 143, 144, 146, 147, 206, 224], "credenti": [19, 20, 70, 71, 206, 252, 259], "line": [19, 20, 27, 28, 42, 43, 44, 45, 47, 48, 61, 63, 64, 65, 68, 69, 70, 72, 74, 77, 78, 109, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 212, 225, 228, 236, 249, 252, 255, 257, 258, 259], "ssh4": [19, 20, 249], "vast": [19, 20, 71, 121, 234, 235, 248, 251, 252, 253, 254, 255, 257], "ai": [19, 20, 71, 121, 147, 234, 235, 248, 251, 252, 253, 254, 255, 257, 258, 259], "p": [19, 20, 23, 24, 27, 28, 29, 32, 67, 71, 73, 86, 102, 127, 133, 138, 140, 143, 144, 146, 147, 149, 249, 251, 254], "18492": [19, 20], "id_vast_ai": [19, 20, 71, 249], "start": [19, 20, 23, 24, 29, 30, 31, 32, 35, 36, 39, 41, 52, 64, 71, 73, 89, 91, 111, 112, 116, 120, 127, 129, 130, 134, 137, 140, 143, 144, 146, 147, 148, 153, 197, 204, 208, 224, 226, 227, 233, 240, 245, 247, 253, 254, 255, 257, 259], "later": [19, 20, 57, 62, 65, 71, 87, 122, 140, 141, 142, 143, 144, 145, 146, 148, 182, 190, 239, 242, 244, 249, 251, 253], "resum": [19, 20, 25, 26, 71, 122, 124, 163, 249], "store": [19, 20, 25, 26, 59, 60, 71, 119, 144, 172, 248, 249, 250, 258], "retriev": [19, 20, 39, 61, 62, 134, 143, 146, 188, 226, 242, 255], "disconnect": [19, 20, 71, 220], "discard": [19, 20, 143, 146], "forc": [19, 20, 35, 36, 37, 39, 41, 52, 71, 138, 182, 190, 214, 240, 245, 249, 252, 253, 258], "sshmixin": [19, 20, 140, 143, 146], "model_training_via_ssh": [19, 20], "cancel": [19, 20], "mltk_command": [19, 20], "hostnam": [19, 20, 77, 249], "login": [19, 20, 71, 248], "22": [19, 20, 71, 126, 127, 132, 136, 138, 140, 141, 144, 145, 147, 148, 153, 154, 157, 238, 240, 245, 250, 253, 254, 257], "myserv": [19, 20, 71], "192": [19, 20, 64, 71, 138, 153, 257], "168": [19, 20, 64, 71, 144, 147, 156, 257], "56": [19, 20, 71, 126, 140, 141, 144, 147, 148, 253, 254, 257], "ubuntu": [19, 20, 34, 43, 44, 71], "456": [19, 20, 71, 257], "worksp": [19, 20], "identity_fil": [19, 20], "kei": [19, 20, 62, 84, 111, 112, 116, 119, 131, 140, 148, 160, 171, 174, 175, 178, 181, 182, 183, 187, 188, 190, 191, 195, 196, 199, 225, 242, 248, 255, 258, 259], "privat": [19, 20, 71, 249, 259], "pem": [19, 20], "listen": [19, 20, 23, 24, 29, 32, 35, 64, 71, 165, 252, 253], "password": [19, 20, 249], "clean": [19, 20, 25, 26, 45, 47, 48, 70, 102, 117, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 163, 202, 213, 247, 249, 251, 253, 256, 257, 259], "AND": [19, 20, 122, 123, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 236], "summarize_model": [21, 49, 68, 120, 159, 240, 244], "model_summari": [21, 22], "tf": [21, 22, 49, 53, 57, 65, 67, 69, 70, 76, 80, 85, 91, 105, 111, 112, 113, 114, 115, 116, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 160, 166, 169, 170, 172, 234, 247, 250, 254], "someth": [23, 24, 35, 36, 41, 249, 250, 251, 256], "often": [23, 24, 122], "abl": [23, 24, 35, 36, 38, 39, 41, 47, 51, 61, 63, 73, 124, 235, 249, 251, 252, 256, 258], "measur": [23, 24, 61, 63, 122, 225], "workflow": [23, 24], "track": [23, 24, 70, 129, 130, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 247, 248, 251, 253, 255], "experi": [23, 24, 124, 248, 250, 253], "like": [23, 24, 67, 69, 71, 74, 84, 86, 102, 111, 112, 116, 119, 122, 124, 125, 142, 144, 147, 171, 188, 190, 222, 227, 228, 235, 247, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259], "loss": [23, 24, 67, 69, 70, 111, 112, 113, 116, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 247, 248, 249, 251, 253, 254, 255, 257], "accuraci": [23, 24, 51, 59, 61, 67, 70, 96, 99, 122, 126, 127, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 159, 235, 236, 237, 247, 248, 250, 254, 257, 258], "dimension": [23, 24, 70, 136, 251], "space": [23, 24, 41, 70, 98, 136, 138, 250], "org": [23, 24, 34, 43, 44, 70, 81, 99, 100, 102, 120, 122, 125, 127, 128, 129, 130, 134, 136, 138, 141, 142, 143, 145, 146, 148, 149, 152, 153, 154, 156, 157, 160, 247, 251, 253, 254, 259], "get_start": [23, 24], "model_training_monitor": [23, 24], "being": [23, 24, 35, 36, 54, 56, 67, 86, 120, 136, 140, 143, 144, 166, 214, 236, 247, 249, 251, 253, 256], "properti": [23, 24, 36, 62, 65, 67, 69, 70, 71, 81, 84, 86, 87, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 127, 129, 130, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 158, 160, 163, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 209, 210, 211, 218, 220, 221, 224, 225, 227, 233, 242, 247, 250, 251, 252, 253], "dict": [23, 24, 70, 71, 81, 84, 86, 89, 91, 111, 112, 116, 118, 120, 122, 124, 126, 127, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 156, 157, 158, 160, 163, 164, 169, 170, 171, 174, 175, 178, 181, 182, 183, 187, 188, 190, 191, 195, 196, 199, 206, 213, 218, 224, 225, 227, 228, 233, 251, 255], "histogram_freq": [23, 24, 70, 122, 126, 127, 134, 143, 146], "epoch": [23, 24, 25, 26, 67, 70, 111, 112, 116, 117, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 162, 163, 238, 240, 245, 247, 249, 251, 252, 253, 257], "histogram": [23, 24, 70, 122, 126, 127, 134, 143, 146], "layer": [23, 24, 41, 48, 57, 62, 65, 68, 70, 72, 85, 111, 112, 116, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 168, 169, 171, 172, 174, 175, 176, 177, 178, 180, 181, 183, 184, 185, 187, 188, 189, 191, 192, 193, 195, 196, 199, 200, 201, 238, 240, 244, 245, 247, 250, 251, 253, 254, 255, 257, 258], "won": [23, 24, 70, 102, 122, 124, 126, 127, 134, 143, 146], "split": [23, 24, 70, 81, 86, 89, 91, 102, 122, 126, 127, 128, 129, 130, 134, 140, 143, 144, 146, 147, 225, 247, 251], "write_graph": [23, 24, 70, 122, 126, 127, 134, 143, 146], "whether": [23, 24, 64, 70, 81, 86, 111, 112, 116, 122, 125, 126, 127, 134, 136, 143, 146, 249], "becom": [23, 24, 70, 122, 126, 127, 134, 143, 146, 249, 251], "quit": [23, 24, 70, 122, 126, 127, 134, 143, 146, 251], "write_imag": [23, 24, 70, 122, 126, 127, 134, 143, 146], "update_freq": [23, 24, 70, 122, 126, 127, 134, 143, 146], "batch": [23, 24, 67, 70, 81, 82, 85, 86, 87, 89, 90, 91, 111, 112, 113, 114, 115, 116, 122, 126, 127, 129, 130, 134, 138, 140, 141, 143, 144, 146, 147, 151, 188, 224, 247, 254, 258], "let": [23, 24, 44, 70, 122, 126, 127, 134, 141, 142, 143, 145, 146, 148, 149, 248, 249, 251, 253, 257, 258], "callback": [23, 24, 50, 57, 81, 86, 89, 91, 113, 114, 115, 119, 120, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 156, 157, 158, 172, 202, 206, 223, 224, 227, 228, 229, 247, 250], "too": [23, 24, 70, 122, 126, 127, 134, 143, 146, 160, 250, 251, 252, 253, 254, 257, 259], "frequent": [23, 24, 70, 122, 126, 127, 134, 143, 146, 236, 249, 253], "profile_batch": [23, 24, 70, 122, 126, 127, 134, 143, 146], "characterist": [23, 24, 36, 61, 70, 122, 126, 127, 134, 143, 146, 158, 251, 252, 259], "neg": [23, 24, 61, 70, 122, 126, 127, 134, 143, 146, 151, 249, 253], "tupl": [23, 24, 70, 80, 81, 84, 86, 89, 91, 93, 102, 103, 104, 105, 111, 112, 116, 119, 122, 125, 126, 127, 129, 130, 134, 136, 138, 140, 141, 143, 144, 145, 146, 147, 148, 160, 163, 171, 172, 175, 178, 188, 190, 191, 197, 199, 203, 214, 223, 227, 228, 247], "pair": [23, 24, 70, 71, 84, 122, 126, 127, 134, 136, 138, 143, 146, 171, 182, 190], "signifi": [23, 24, 37, 70, 122, 126, 127, 134, 143, 146], "rang": [23, 24, 57, 62, 70, 81, 84, 86, 99, 103, 104, 105, 122, 126, 127, 129, 130, 131, 134, 136, 138, 140, 143, 144, 146, 154, 224, 247, 249, 250, 253, 257], "second": [23, 24, 63, 70, 86, 99, 102, 122, 126, 127, 134, 139, 143, 146, 160, 171, 174, 206, 218, 227, 233, 249, 251, 253, 254, 257, 258], "keyword_spotting_on_ff_v2": [23, 24], "webpag": [23, 24, 36, 41, 59, 63, 64, 70, 72, 76, 245, 248, 249, 251, 253], "gui": [23, 24, 30, 31, 34, 43, 44, 70, 188, 253, 257], "separ": [23, 24, 98, 127, 134, 140, 143, 144, 146, 147, 220, 224, 249, 254], "localhost": [23, 24, 64, 245, 249], "6002": [23, 24], "launch": [23, 24, 50, 70, 256, 257], "webbrows": [23, 24, 29, 32, 165], "train_model": [25, 49, 66, 69, 117, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 159, 243, 247, 256], "model_train": [25, 26], "dryrun": [25, 26, 118, 127, 129, 130, 134, 140, 143, 144, 146, 147, 247], "checkpoint": [25, 26, 67, 69, 122, 126, 127, 128, 132, 133, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 251, 253], "43": [25, 26, 27, 28, 62, 133, 136, 138, 140, 141, 144, 147, 148, 244, 251, 253, 254, 257], "everyth": [25, 26, 59, 67, 69, 140, 143, 144, 146, 235, 243, 251, 253, 257, 259], "quickli": [25, 26, 69, 71, 143, 148, 234, 236, 249, 252, 254, 255], "dry": [25, 26, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 247, 249], "size": [25, 26, 41, 53, 62, 63, 67, 81, 84, 86, 89, 91, 111, 112, 116, 125, 126, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 164, 175, 178, 188, 191, 197, 199, 224, 233, 238, 240, 241, 244, 245, 249, 252, 253, 254, 255, 257, 258], "initi": [25, 26, 37, 124, 127, 140, 143, 144, 146, 147, 148, 206, 214, 248, 253, 254], "histori": [25, 26, 60, 122, 124, 163, 248], "update_model_paramet": [27, 49, 62, 119, 159, 244], "metadata": [27, 28, 35, 36, 62, 65, 67, 119, 129, 130, 164, 172, 174, 175, 178, 181, 183, 187, 188, 190, 191, 195, 196, 199, 242, 244, 247, 259], "taken": [27, 28, 35, 102, 152, 153, 157, 164, 207, 219, 226, 232, 251, 253], "param": [27, 28, 57, 62, 81, 86, 132, 138, 141, 145, 153, 163, 164, 175, 178, 183, 191, 199, 203, 240, 242, 244, 245, 251, 253], "json": [27, 28, 50, 60, 64, 160, 203, 225, 259], "int": [27, 28, 57, 62, 80, 81, 83, 84, 85, 86, 89, 91, 94, 95, 96, 98, 111, 116, 122, 124, 125, 127, 130, 131, 132, 133, 136, 138, 140, 141, 143, 144, 145, 146, 147, 149, 151, 153, 158, 160, 163, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 206, 208, 212, 213, 218, 220, 222, 224, 225, 227, 228, 230, 231, 233, 254], "str": [27, 28, 62, 80, 81, 85, 86, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 116, 118, 119, 122, 123, 124, 125, 127, 128, 129, 130, 134, 136, 138, 140, 141, 143, 144, 145, 146, 147, 151, 158, 160, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 178, 179, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 195, 196, 198, 199, 200, 202, 203, 205, 206, 208, 209, 212, 213, 214, 215, 218, 220, 222, 223, 224, 225, 227, 228, 230, 231, 233, 242, 247, 250, 258], "made": [27, 28, 35, 36, 45, 48, 71, 105, 122, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 236, 242, 251, 253], "my_param": [27, 28, 182, 190], "my": [27, 28, 53, 61, 67, 69, 70, 73, 74, 188, 251, 259], "great": [27, 28, 67, 69, 251, 253], "my_custom_param": [27, 28, 62], "led_period_m": [27, 28], "runtime_memory_s": [27, 28, 62, 126, 128, 131, 132, 133, 136, 138, 141, 142, 145, 148, 149, 151, 152, 153, 154, 156, 157, 160, 164, 170, 251], "cmsi": [27, 28, 63, 164], "view_model": [29, 49, 72, 159, 245], "netron": [29, 32, 72, 76, 138, 188, 245, 258], "model_visu": [29, 32], "8080": [29, 32, 64, 245, 249], "augment": [30, 31, 76, 81, 86, 88, 98, 113, 114, 127, 131, 132, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 206, 207, 249, 254], "parallelaudiodatagener": [30, 31, 50, 62, 67, 83, 86, 88, 111, 126, 132, 135, 141, 142, 145, 148, 152, 249, 255], "doesn": [33, 100, 122, 126, 127, 132, 133, 134, 136, 138, 141, 142, 143, 145, 146, 149, 152, 223, 249, 251], "veri": [33, 63, 68, 72, 74, 94, 102, 140, 141, 142, 143, 145, 146, 148, 149, 225, 238, 240, 245, 247, 249, 251, 252, 253, 255, 257, 259], "begin": [33, 35, 36, 69, 80, 111, 112, 116, 120, 122, 140, 141, 143, 144, 146, 147, 153, 249, 252, 254, 259], "debug": [33, 53, 62, 67, 81, 86, 89, 91, 126, 131, 132, 133, 138, 141, 142, 143, 145, 146, 148, 149, 152, 153, 213, 216, 219, 220, 222, 224, 234, 244, 250, 251, 252], "oper": [33, 37, 44, 51, 61, 62, 65, 68, 69, 71, 72, 91, 109, 112, 117, 122, 126, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 171, 174, 175, 178, 181, 183, 187, 191, 195, 196, 199, 236, 238, 241, 249, 250, 251, 253, 254, 257], "gecko": [33, 35, 36, 37, 39, 41, 45, 78, 251, 253, 258], "sdk": [33, 35, 36, 37, 39, 41, 45, 251, 253, 258], "tflm": [33, 37, 39, 41, 47, 48, 52, 81, 83, 136, 160, 166, 167, 170, 172, 235], "phase": [33, 143, 146, 251], "find_packag": 33, "mltk_find_packag": 33, "wrapper": [33, 57, 74, 83, 109, 166, 169, 172, 187, 194, 197, 198, 236, 247], "mltk_tflite_micro_wrapp": [33, 48], "symbol": [33, 89, 91, 213, 223], "releas": [33, 34, 37, 44, 102, 253, 258], "fulli": [33, 62, 63, 65, 68, 69, 72, 73, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 162, 184, 238, 239, 240, 243, 244, 245, 247, 249, 250, 251, 252, 253, 254, 255, 257], "optim": [33, 41, 67, 68, 69, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 213, 234, 240, 241, 244, 245, 247, 251, 253, 254, 255, 258], "ON": [33, 35, 36, 41, 252], "disassembl": 33, "assembli": 33, "instruct": [33, 58, 152, 166, 172, 250, 251, 252, 253, 254, 259], "mltk_model_profil": [33, 34, 41, 44, 64], "hint": [33, 37, 39, 41, 69, 70, 71, 138, 242, 249, 252, 253], "just": [33, 37, 39, 41, 50, 67, 111, 112, 116, 119, 124, 127, 128, 129, 130, 131, 134, 136, 138, 140, 143, 144, 146, 147, 203, 225, 236, 238, 242, 247, 249, 250, 253, 255, 256, 257, 259], "search": [33, 37, 39, 41, 59, 67, 75, 77, 89, 91, 99, 126, 140, 144, 147, 172, 223, 225, 236, 240, 241, 243, 244, 245, 249, 251, 252, 258], "model_search_path": [33, 37, 39, 41], "mltk_audio_classifi": [33, 35, 252], "ram": [33, 41, 47, 48, 51, 57, 62, 63, 65, 71, 98, 122, 126, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 170, 224, 235, 238, 240, 241, 242, 244, 248, 249, 251, 252, 253, 254, 257, 258], "caus": [33, 74, 119, 242, 253, 258, 259], "resid": [33, 71, 81, 86, 249], "well": [33, 35, 44, 47, 51, 61, 63, 67, 78, 100, 119, 140, 141, 142, 144, 145, 148, 202, 203, 242, 249, 250, 251, 252, 253, 255, 256], "bobcat": 33, "256k": 33, "total": [33, 51, 61, 86, 99, 111, 112, 113, 114, 115, 116, 122, 126, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 170, 197, 207, 240, 241, 244, 245, 251, 253, 257, 258, 259], "fit": [33, 41, 51, 67, 80, 81, 86, 120, 122, 127, 129, 130, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 163, 234, 247, 251, 252, 253, 254, 257, 259], "few": [34, 43, 44, 65, 112, 223, 235, 249, 251, 253, 255], "long": [34, 43, 44, 51, 70, 102, 138, 140, 142, 249, 251, 254, 255, 259], "en": [34, 43, 44, 58, 99, 100, 258, 259], "win32": [34, 43, 44], "fileio": [34, 43, 44], "maximum": [34, 43, 44, 81, 86, 89, 91, 113, 114, 136, 138, 158, 206, 208, 218, 223, 224, 227, 233, 249, 250], "tab": [34, 43, 44, 50, 251, 253], "registri": [34, 43, 44], "studio": [34, 42, 45, 47, 48, 50, 74, 140, 235, 249, 250, 251, 252, 254, 256], "3rd": [34, 43, 44, 102, 124, 140, 143, 144, 146, 147, 248, 259], "parti": [34, 43, 44, 94, 124, 127, 140, 143, 144, 146, 147, 248, 249, 259], "visualstudio": [34, 43, 44], "Be": [34, 43, 44, 73, 249, 250, 251, 252, 253, 256, 257, 258], "sure": [34, 43, 44, 50, 57, 73, 74, 84, 122, 125, 129, 130, 138, 144, 147, 247, 249, 250, 251, 252, 253, 256, 257, 258, 259], "check": [34, 39, 41, 43, 44, 52, 122, 226, 249, 257, 259], "desktop": [34, 44, 78, 249, 252], "workload": [34, 43, 44, 249], "sudo": [34, 43, 44, 54, 71, 77, 249], "apt": [34, 43, 44, 71, 77, 249], "y": [34, 43, 44, 71, 77, 81, 86, 111, 112, 116, 118, 122, 125, 127, 128, 129, 130, 131, 134, 136, 138, 140, 143, 144, 146, 147, 153, 158, 188, 224, 230, 247, 249, 250, 251, 258], "ppa": [34, 43, 44], "toolchain": [34, 43, 44, 45, 47, 48], "r": [34, 43, 44, 140, 144, 147, 218, 219, 220, 226, 227, 258, 259], "deadsnak": [34, 43, 44], "essenti": [34, 43, 44], "ninja": [34, 43, 44], "gdb": [34, 43], "p7zip": [34, 43, 44, 71, 77, 249], "lf": [34, 43, 44], "python3": [34, 43, 44, 73, 74, 259], "venv": [34, 43, 44, 71, 74, 238, 239, 240, 243, 245, 251, 253, 257, 258], "libusb": [34, 43, 44], "libgl1": [34, 43, 44], "high": [34, 39, 43, 44, 250, 254, 259], "compress": [34, 43, 44, 59, 61, 159, 250, 252, 255], "ratio": [34, 43, 44, 61, 157, 160], "asset": [34, 43, 44, 94, 140, 143, 146, 238, 239, 240, 243, 245], "64": [34, 43, 44, 67, 69, 102, 122, 125, 126, 127, 129, 130, 131, 132, 134, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 154, 156, 157, 240, 244, 247, 251, 252, 253, 254, 257, 258], "scm": [34, 43, 44], "navig": [34, 43, 44, 248, 249, 251, 253], "cd": [34, 43, 44, 45, 47, 48, 50, 55, 74, 249, 257], "desir": [34, 62, 74, 84, 249, 253, 254], "dcmake_toolchain_fil": 34, "gcc": [34, 45, 47, 48], "win64_toolchain": 34, "linux_toolchain": 34, "ex": [34, 44, 50, 240, 245, 251], "microcontrol": [35, 36], "word": [35, 36, 99, 102, 140, 141, 143, 144, 146, 147, 155, 156, 157, 207, 252, 253, 257, 259], "record": [35, 36, 41, 95, 96, 98, 99, 102, 143, 144, 145, 146, 147, 153, 163, 166, 169, 172, 251, 252, 254, 258], "written": [35, 36, 57, 80, 85, 218, 233, 238, 239, 240, 243, 245, 259], "vcom": [35, 36, 252], "alexa": [35, 139, 140, 207, 234], "demo": [35, 37, 39, 40, 42, 150, 234, 253, 259], "voic": [35, 99, 140, 144, 147, 204, 205, 206, 207, 210, 211, 252, 253, 259], "av": [35, 234, 252], "two": [35, 36, 61, 68, 71, 81, 86, 89, 91, 102, 111, 112, 116, 131, 136, 138, 141, 142, 144, 145, 147, 148, 149, 160, 234, 249, 250, 251, 252, 253, 254, 255, 259], "audio_classifier_config": 35, "led1": [35, 36], "led0": [35, 36], "regular": [35, 36, 111, 112, 116, 124, 125, 132, 142, 145], "interv": [35, 36, 86, 122], "score": [35, 36, 102, 113, 126, 158, 247, 249], "top": [35, 36, 43, 49, 50, 61, 64, 67, 69, 73, 104, 125, 246, 249, 250, 251, 253, 256, 257], "trigger": [35, 36, 119, 120, 122, 143, 146, 169, 248, 252, 259], "light": [35, 36, 247, 251, 253], "respond": [35, 36], "greater": [35, 36, 136, 160], "blink": [35, 36], "500": [35, 36, 111, 112, 116, 149, 251, 253], "clear": [35, 36, 70, 84, 112, 127, 138, 140, 143, 144, 146, 147, 171, 190, 250], "map": [35, 36, 37, 39, 62, 67, 71, 84, 111, 112, 116, 130, 131, 138, 144, 146, 147, 149, 151, 158, 182, 251, 255], "silenc": [35, 36, 80, 81, 89, 91, 95, 102, 140, 141, 143, 144, 146, 147, 252, 253, 254], "unknown": [35, 36, 37, 81, 89, 91, 119, 122, 127, 140, 141, 143, 144, 146, 147, 156, 172, 251, 252, 254, 255], "usual": [35, 36, 51, 65, 127, 141, 142, 148, 249, 251, 253, 257, 259], "out": [35, 36, 61, 62, 71, 84, 86, 158, 171, 190, 223, 226, 249, 251, 254, 258, 259], "label": [35, 36, 39, 62, 67, 81, 86, 89, 91, 97, 101, 102, 103, 104, 105, 106, 107, 111, 112, 116, 118, 127, 128, 130, 131, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 156, 157, 158, 160, 170, 250, 253, 254, 258], "underscor": [35, 36, 39, 67, 102, 208, 251, 259], "blob": [35, 36, 52, 125, 141, 145, 154, 157, 182, 188, 190], "master": [35, 36, 88, 95, 96, 106, 107, 108, 125, 132, 135, 137, 139, 140, 141, 143, 144, 145, 146, 147, 150, 152, 153, 154, 155, 156, 157, 159, 190, 216, 238, 240, 241, 242, 244, 245, 253], "toolkit": [35, 36, 250, 251, 253, 254, 258], "replac": [35, 36, 37, 39, 41, 52, 74, 86, 104, 127, 140, 141, 143, 144, 146, 147, 250, 251, 253, 254, 255, 257, 259], "insid": [35, 36, 74, 81, 86, 111, 116, 125, 256], "renam": [35, 36, 37, 39, 41, 52, 257], "1_": [35, 36, 37, 39, 41, 52], "folder": [35, 36, 37, 39, 41, 50, 52, 102], "sort": [35, 36, 37, 39, 41, 52, 81, 86, 89, 102, 111, 116, 138, 140, 143, 144, 147, 248, 250], "alphabet": [35, 36, 37, 39, 41, 52, 81, 86, 89, 111, 116], "ascend": [35, 36, 37, 39, 41, 52], "order": [35, 36, 37, 39, 41, 52, 62, 65, 66, 71, 81, 84, 86, 111, 116, 119, 171, 190, 258], "ad": [35, 36, 37, 39, 41, 52, 55, 61, 62, 65, 67, 69, 71, 81, 84, 89, 91, 102, 111, 116, 119, 140, 142, 143, 144, 146, 148, 164, 182, 188, 222, 242, 243, 247, 249, 250, 251, 253, 254, 256], "flatbuff": [35, 36, 37, 39, 41, 52, 62, 76, 109, 119, 120, 122, 160, 174, 175, 178, 181, 183, 186, 187, 188, 190, 191, 195, 196, 198, 199, 242], "tell": [35, 37, 39, 44, 57, 111, 112, 116, 136, 149, 232, 248, 249, 250, 251, 252, 253, 254], "audio_classifier_model": [35, 52, 252], "correctli": [35, 36, 54, 57, 81, 86, 250, 251], "section": [35, 36, 39, 41, 44, 62, 65, 71, 102, 141, 142, 145, 149, 190, 244, 248, 249, 250, 251, 252, 253, 254, 259], "origin": [35, 80, 86, 102, 105, 128, 143, 146, 236, 250, 251, 254], "relev": [35, 60, 61, 86, 111, 112, 116, 117, 127, 129, 130, 134, 140, 143, 144, 146, 147, 247, 248, 253], "popul": [35, 43, 67, 69, 89, 91, 117, 119, 124, 140, 144, 147, 190, 224, 247], "driver": [35, 54, 74, 249, 252, 253], "length": [35, 62, 80, 81, 83, 84, 102, 111, 112, 116, 127, 136, 140, 141, 143, 144, 145, 146, 147, 188, 212, 233, 253, 254, 257, 259], "average_window_duration_m": [35, 62, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 244, 251, 253, 257], "highest": [35, 36, 62, 84], "detection_threshold": [35, 62, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 244, 251, 257], "185": [35, 62, 140, 147, 152, 244, 254], "minimum_count": [35, 62, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 244, 251, 253, 257], "multipli": [35, 39, 63, 68, 86, 125, 126, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 177, 178, 179, 180, 185, 201, 238, 240, 241, 244, 251, 253, 254, 257, 258], "uart": [35, 44, 49, 216, 226, 233, 252], "effect": [35, 50, 51, 63, 64, 67, 91, 94, 111, 112, 116, 138, 140, 141, 143, 144, 146, 147, 190, 247, 250, 251, 253, 257], "transmit": 36, "bluetooth": [36, 254], "low": [36, 140, 143, 144, 146, 147, 249, 252, 254, 259], "client": [36, 40, 254], "live": [36, 124, 253, 259], "plai": [36, 145, 146, 147, 234, 252, 253, 254], "move": [36, 140, 144, 147, 251, 254], "accordingli": [36, 129, 130, 247, 251, 254, 257], "ble_audio_classifi": [36, 140, 143, 144, 146, 147, 254], "pacman": [36, 146, 147, 254], "upon": [36, 249], "advertis": 36, "kw": [36, 125, 126, 140, 144, 147, 156, 253], "uuid": 36, "c20ffe90": 36, "4ed4": 36, "46b9": 36, "8f6c": 36, "ec143fce3e4": 36, "string": [36, 62, 80, 81, 85, 86, 118, 119, 120, 122, 125, 129, 130, 140, 144, 147, 158, 160, 162, 173, 174, 175, 176, 178, 179, 181, 182, 183, 184, 187, 189, 190, 191, 192, 195, 196, 198, 199, 200, 202, 206, 208, 212, 214, 218, 222, 223, 225, 227, 228, 230, 242, 247, 259], "id": [36, 62, 91, 102, 124, 131, 158, 231, 242, 245, 249, 254], "probabl": [36, 39, 61, 133, 149, 254, 255, 258], "uint8": [36, 39, 57, 65, 85, 103, 104, 105, 122, 138, 140, 143, 144, 146, 147, 182, 190, 242], "whenev": [36, 128, 133], "ble_audio_classifier_config": 36, "keyword_spotting_pacman": [36, 146], "gecko_sdk_enable_bluetooth": 36, "ble_audio_classifier_model": 36, "mltk_ble_audio_classifi": 36, "qsg169": 36, "v3": [36, 139], "ug103": 36, "14": [36, 129, 130, 132, 136, 140, 141, 144, 145, 147, 148, 151, 153, 154, 156, 157, 242, 247, 251, 253, 254, 257, 258], "le": 36, "fundament": [36, 259], "ug434": 36, "grayscal": [37, 39, 86, 103, 104, 105, 106, 107, 116, 133, 138, 149, 242, 250, 251], "person": [37, 93, 102, 134, 140, 144, 147, 155, 157, 248, 250, 251], "against": [37, 61, 117, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 227, 237, 247, 250], "similar": [37, 41, 44, 50, 58, 61, 68, 81, 86, 102, 112, 129, 130, 136, 138, 140, 143, 146, 148, 149, 223, 247, 249, 250, 251, 252, 253, 255, 257, 258, 259], "page": [37, 39, 70, 73, 74, 153, 248, 252], "click": [37, 43, 64, 73, 74, 126, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 237, 238, 239, 240, 241, 242, 243, 244, 249, 250, 251, 253, 254, 258, 259], "button": [37, 43, 64, 73, 74, 249, 251, 253, 256], "iter": [37, 81, 84, 86, 111, 112, 116, 122, 141, 145, 171, 188, 190, 223, 225, 228, 251, 258], "solid": [37, 86, 251], "blue": [37, 81, 249], "purpl": 37, "press": [37, 73, 229], "eras": 37, "puls": 37, "elaps": 37, "error": [37, 53, 54, 63, 91, 122, 123, 138, 152, 160, 168, 169, 222, 225, 226, 238, 249, 250, 257, 258, 259], "try": [37, 70, 140, 143, 144, 146, 147, 160, 227, 233, 238, 252, 254, 259], "repeat": [37, 111, 112, 116, 151, 250, 251], "fingerprint_signature_gener": [37, 249, 250], "howev": [37, 39, 41, 50, 51, 57, 61, 67, 68, 71, 73, 74, 136, 138, 140, 143, 144, 146, 148, 172, 240, 245, 249, 250, 251, 252, 253, 254, 255, 258, 259], "method": [37, 39, 41, 81, 82, 83, 84, 86, 87, 91, 99, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 124, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 209, 217, 218, 220, 221, 224, 225, 227, 229, 233], "fingeprint_authent": 37, "usart": 37, "peripher": [37, 39, 252], "pin": [37, 39, 252], "expans": [37, 39, 182], "gnd": [37, 39, 252], "black": [37, 86, 249], "suppli": [37, 62, 81, 86, 113, 244, 250, 259], "20": [37, 67, 81, 111, 112, 116, 126, 127, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 157, 222, 230, 244, 249, 251, 252, 253, 254, 257, 258], "3vt": 37, "white": [37, 81], "txd": 37, "yellow": 37, "rxd": 37, "wakeup": 37, "mltk_fingerprint_authent": 37, "them": [37, 46, 86, 102, 125, 140, 141, 144, 147, 249, 250, 251, 253, 254], "simpl": [38, 102, 129, 131, 154, 235, 236, 247, 250, 251, 252, 253, 258, 259], "printf": 38, "mltk_hello_world": [38, 44], "_unknown_": [39, 81, 91, 107, 126, 127, 140, 141, 142, 143, 144, 146, 147, 148, 149, 152, 207, 244, 251, 253, 255, 257, 259], "shape": [39, 63, 65, 67, 68, 81, 84, 86, 103, 104, 105, 106, 107, 111, 112, 116, 119, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 188, 197, 198, 238, 240, 241, 242, 244, 245, 247, 250, 251, 253, 254, 255, 257, 258], "height": [39, 81, 83, 84, 86, 106, 107, 111, 127, 134, 140, 141, 143, 144, 145, 146, 147, 175, 176, 177, 178, 179, 180, 189, 191, 192, 193, 199, 200, 201, 242, 254, 257, 258], "width": [39, 81, 83, 84, 86, 106, 107, 111, 125, 127, 132, 134, 140, 141, 143, 144, 145, 146, 147, 175, 176, 177, 178, 179, 180, 189, 191, 192, 193, 199, 200, 201, 242, 254, 257, 258], "channel": [39, 62, 81, 84, 85, 86, 116, 125, 127, 132, 134, 140, 143, 144, 146, 147, 194, 253, 254, 257], "datatyp": [39, 136, 182, 190], "samplewise_norm": [39, 62, 126, 129, 130, 131, 132, 133, 134, 138, 141, 142, 145, 148, 149, 152, 153, 154, 156, 157, 240, 242, 247, 251, 257], "rescal": [39, 62, 81, 86, 90, 126, 129, 130, 131, 132, 133, 138, 141, 142, 145, 148, 149, 152, 153, 154, 156, 157, 240, 242, 247, 251, 257], "scale": [39, 62, 80, 81, 83, 84, 85, 125, 129, 130, 131, 154, 194, 242, 247, 251, 252, 253, 258], "factor": [39, 67, 86, 122, 126, 127, 132, 133, 134, 138, 141, 142, 143, 145, 146, 149, 152, 177, 180, 251, 258], "model_input_tensor": 39, "img": [39, 62, 134, 138, 242, 251], "mean_and_std": [39, 62, 126, 131, 132, 133, 134, 138, 141, 142, 145, 148, 149, 152, 153, 154, 156, 157, 240, 251, 257], "center": [39, 81, 99, 153, 249, 250], "standard": [39, 50, 60, 61, 62, 67, 69, 71, 81, 86, 125, 129, 130, 134, 141, 142, 145, 149, 182, 190, 225, 235, 238, 241, 242, 247, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259], "deviat": [39, 62], "std": [39, 62, 81, 86, 90, 134, 222, 242, 251], "128": [39, 57, 62, 84, 93, 125, 128, 129, 130, 131, 132, 138, 140, 142, 143, 144, 146, 147, 149, 151, 153, 154, 157, 242, 247, 249, 251, 252, 253], "i2c": 39, "vcc": 39, "18": [39, 128, 132, 136, 140, 141, 143, 144, 146, 147, 148, 149, 151, 157, 240, 244, 245, 253, 254, 257], "mosi": 39, "miso": 39, "sck": 39, "sda": 39, "scl": 39, "15": [39, 62, 84, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 238, 240, 241, 247, 251, 253, 254, 255, 257, 258, 259], "mltk_image_classifi": 39, "hello": 40, "world": [40, 98, 100, 102, 251, 253], "ble": [40, 254], "signatur": [40, 81, 86, 89, 91, 112, 113, 114, 115, 119, 138, 139, 234, 258], "standalon": [41, 59, 63, 64], "mtlk": 41, "stand": [41, 249], "alon": [41, 249], "opresolv": 41, "greatli": [41, 86, 91, 143, 146, 148, 172, 235, 248, 249, 255], "consum": [41, 63, 68, 72, 81, 86, 99, 102, 111, 112, 116, 235, 238, 240, 245, 252, 253], "linker": 41, "hardcod": [41, 141, 142, 145, 149, 249, 251], "tensor": [41, 51, 57, 62, 63, 70, 80, 85, 86, 91, 111, 112, 116, 124, 125, 136, 138, 160, 164, 169, 172, 174, 175, 178, 181, 183, 187, 188, 191, 194, 195, 196, 197, 198, 199, 242, 251, 258], "arena": [41, 62, 160, 164], "alloc": [41, 226, 249, 258], "heap": 41, "100000": 41, "bss": 41, "counter": [41, 86, 127, 134, 140, 143, 144, 146, 147], "along": [41, 86, 99, 104, 105, 251, 253], "could": [41, 56, 58, 63, 71, 111, 112, 116, 122, 126, 129, 130, 133, 141, 142, 149, 249, 250, 251, 253, 259], "deprec": [41, 253], "demonstr": [42, 49, 128, 131, 132, 135, 137, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 250, 251, 252, 256, 259], "implement": [42, 51, 65, 73, 83, 111, 112, 116, 141, 158, 169, 225, 252], "vscode": [42, 49, 50, 78, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 256], "tflite_micro_wrapp": [42, 48, 166], "mvp_wrapper": [42, 47], "what": [43, 44, 61, 76, 86, 95, 122, 131, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 235, 237, 250, 251, 252, 253, 255, 258, 259], "_desktop": 43, "_": [43, 120, 122, 131, 133, 138, 140, 141, 143, 144, 146, 147, 149, 151, 249, 251, 253, 254, 258, 259], "silab": [43, 45, 47, 48, 71, 73, 74, 134, 140, 144, 147, 157, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 253, 254, 257, 258, 259], "date": [43, 62, 74, 126, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 170, 203, 223, 240, 241, 242, 244, 251, 253, 257], "next": [43, 44, 62, 70, 71, 84, 111, 112, 116, 207, 224, 251, 253, 256, 257], "Then": [43, 44, 45, 47, 48, 55, 70, 71, 73, 126, 133, 138, 140, 141, 142, 144, 145, 147, 149, 152, 247, 249, 251, 252, 257, 258], "install_mltk": [43, 44, 74], "stack": [43, 252], "extens": [43, 50, 61, 68, 70, 73, 75, 76, 89, 91, 123, 188, 223, 249, 251, 253], "gsdk_mltk_extens": 43, "gsdk": 43, "toolbar": 43, "prefer": 43, "sidebar": [43, 249], "expand": [43, 253], "entri": [43, 62, 71, 89, 91, 111, 116, 119, 140, 158, 169, 172, 182, 190, 212, 223, 224, 225, 249, 258], "locat": [43, 98, 102, 153, 249, 259], "v4": 43, "ok": [43, 251], "trust": 43, "point": [43, 50, 54, 71, 73, 74, 75, 77, 86, 127, 128, 131, 134, 136, 137, 140, 141, 143, 144, 145, 146, 147, 148, 177, 180, 185, 194, 201, 227, 238, 240, 241, 242, 244, 245, 249, 250, 251, 252, 253, 254, 255, 258, 259], "suit": 43, "launcher": 43, "creation": [43, 67], "link": [43, 44, 50, 58, 64, 78, 89, 91, 217, 220, 223, 233, 235], "directli": [43, 44, 47, 51, 52, 57, 60, 62, 65, 67, 76, 81, 83, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 188, 235, 238, 239, 240, 243, 245, 247, 249, 251, 253], "edit": [43, 249, 257], "skip": [44, 57, 71, 81, 148, 251, 253, 255, 258], "j": [44, 63, 81, 217, 220, 238, 241, 251, 252, 254, 258], "pack": [44, 153], "jlink": [44, 216, 217, 218, 219, 220, 233], "linksoftwareanddocumentationpack": 44, "jlink_windows_x86_64": 44, "integr": [44, 136], "anoth": [44, 57, 81, 86, 89, 91, 112, 148, 182, 190, 235, 249, 250, 251, 252, 253, 255, 257, 258], "teraterm": 44, "free": [44, 71, 73, 74, 94, 248, 249, 251, 253, 259], "2015": [44, 74, 96], "2017": [44, 74, 102], "2019": [44, 74, 230], "mani": [44, 57, 60, 86, 99, 100, 111, 112, 116, 122, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 235, 248, 249, 250, 251, 253, 255, 257, 258, 259], "And": [44, 55, 70, 71, 141, 224, 249, 250], "mode": [44, 62, 67, 74, 86, 116, 119, 122, 123, 125, 128, 131, 138, 141, 142, 143, 145, 146, 148, 153, 158, 162, 163, 218, 219, 220, 224, 227, 238, 240, 241, 242, 244, 245, 250, 251, 253], "breakpoint": [44, 50, 132, 256], "usb": 44, "cdc": [44, 233], "speed": [44, 81, 127, 134, 140, 143, 144, 146, 147, 249, 252, 253], "aka": [44, 143, 146, 158, 177, 180, 185, 201, 250, 258], "baud": [44, 140, 160, 227, 233], "115200": [44, 160, 227, 233, 252], "hello_world": 44, "mltk_hello_world_download": 44, "mltk_hello_world_download_run": 44, "mltk_hello_world_reset": 44, "reset": [44, 122, 218], "mltk_model_profiler_download": 44, "mltk_model_profiler_download_run": 44, "mltk_model_profiler_reset": 44, "compon": [45, 62, 84, 253, 254], "pip": [45, 47, 48, 71, 73, 74, 225, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 253, 254, 258, 259], "git": [45, 47, 48, 74, 166, 172, 236], "clone": [45, 47, 48, 74, 254], "build_opt": [45, 47, 48], "mltk_audio_feature_generator_wrapp": 45, "manag": [46, 67, 71, 130, 141, 142, 143, 145, 146, 148, 188, 248, 249], "clock": [47, 63, 126, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 171, 238, 241, 251, 253, 254, 257, 258], "tflitemicro": [47, 48, 167, 235, 241], "mltk_mvp_wrapper": 47, "helper": [48, 67, 71, 83, 109, 118, 140, 144, 147, 217, 249], "tflitemicromodel": [48, 49, 167, 172], "jupyt": [49, 73, 225, 246, 250, 251, 253, 258], "notebook": [49, 74, 225, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 253, 254, 259], "browser": [49, 64, 72, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 258, 259], "colab": [49, 246, 250, 251, 253, 255, 257, 258, 259], "instanc": [49, 57, 61, 62, 81, 89, 91, 111, 112, 116, 120, 122, 123, 125, 127, 129, 130, 134, 136, 140, 143, 144, 146, 147, 148, 158, 160, 162, 163, 164, 165, 166, 172, 188, 214, 215, 224, 225, 247, 251, 252, 253, 254, 255, 258, 259], "tflitemodel": [49, 68, 109, 113, 114, 115, 119, 120, 123, 136, 138, 160, 162, 164, 165, 166, 172, 174, 175, 178, 181, 183, 186, 187, 190, 191, 195, 196, 198, 199, 235, 242, 250, 251, 253, 258], "request": [50, 70, 102, 238, 240, 241, 242, 244, 245, 259], "arg": [50, 70, 80, 84, 89, 119, 120, 125, 127, 129, 130, 134, 140, 143, 144, 146, 147, 158, 161, 171, 182, 190, 196, 206, 215, 222, 224, 225, 227, 247, 250, 251, 253, 254], "manner": 50, "datagen": [50, 57, 67, 111, 116, 126, 131, 132, 133, 138, 141, 142, 145, 148, 149, 152, 153, 154, 156, 157, 251], "keep": [51, 102, 127, 134, 136, 140, 141, 143, 144, 146, 147, 251, 253, 255], "mind": [51, 251, 253, 258], "hold": [51, 89, 91, 105, 140, 143, 144, 146, 147, 158, 212, 249, 253, 254, 258], "happen": [51, 65, 83, 129, 130, 242, 247], "slower": [51, 133, 149, 251], "tip": [51, 251], "most": [51, 62, 65, 66, 71, 74, 100, 102, 129, 130, 141, 143, 146, 239, 244, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 259], "4x": [51, 57, 65, 146, 252], "conv2d": [51, 67, 69, 122, 126, 127, 129, 130, 131, 133, 136, 138, 142, 143, 145, 146, 149, 151, 152, 240, 241, 242, 244, 245, 247, 251, 253, 257], "depthwiseconv2d": [51, 126], "depth_multipli": [51, 126, 180], "expens": [51, 81, 86, 141, 142, 143, 145, 146, 148, 149, 249, 251, 252, 253, 254, 259], "smaller": [51, 141, 142, 143, 145, 146, 148, 160, 249], "larger": [51, 62, 71, 81, 86, 122, 126, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 207, 249, 250, 251, 252, 253, 254, 257, 259], "constraint": [51, 63, 125, 234, 252, 253, 257], "kernel_s": [51, 67, 69, 122, 126, 129, 130, 133, 152, 175, 178, 199, 247], "dens": [51, 67, 69, 122, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 142, 143, 145, 146, 149, 151, 152, 240, 241, 242, 244, 245, 247, 251, 253], "k": [51, 62, 74, 84, 86, 126, 128, 136, 140, 142, 143, 144, 146, 147, 151, 152, 153, 171, 190, 240, 244, 251, 253], "maxpool2d": [51, 151], "averagepool2d": 51, "faq": [52, 56, 249, 251], "thought": [52, 235], "simpli": [52, 69, 136, 141, 142, 144, 145, 148, 247, 251, 253, 254], "uint8_t": [52, 253], "arrai": [52, 80, 81, 85, 86, 89, 103, 104, 105, 111, 112, 116, 120, 128, 132, 133, 136, 149, 153, 158, 172, 182, 188, 212, 242, 251, 253, 258], "deploi": [52, 138, 249, 250, 258], "model_profiler_model": 52, "isn": [53, 122, 124, 140, 144, 147], "gpu": [53, 71, 73, 74, 81, 86, 91, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 224, 245, 248, 251, 252, 253, 254], "am": 53, "solut": [54, 248, 249], "reload": [54, 123, 225], "cuda": [54, 214, 253], "gdm3": 54, "rmmod": 54, "nvidia_uvm": 54, "nvidia_drm": 54, "nvidia_modeset": 54, "nvidia": [54, 74, 224, 245], "modprob": 54, "intermedi": 55, "ll": [55, 57, 124, 140, 141, 142, 143, 144, 145, 146, 147, 148, 249, 251, 253, 256], "accept": [56, 224, 251, 253], "properli": [56, 143, 146, 238, 251, 252, 253], "easiest": [56, 74], "fix": [56, 140, 249, 258], "inference_input_typ": [56, 57, 67, 69, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 247, 251, 253, 258], "inference_output_typ": [56, 57, 67, 69, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 247, 251, 253, 258], "reason": [57, 63, 68, 72, 102, 238, 240, 245, 249, 250, 251, 253], "whatev": [57, 251, 253], "compris": [57, 62, 96, 251, 253], "our": [57, 61, 67, 69, 70, 99, 117, 127, 129, 130, 131, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 242, 247, 249, 251, 252, 253, 256, 257, 258], "might": [57, 61, 62, 65, 67, 69, 250, 251, 253, 258], "parallelimagedatagener": [57, 62, 67, 88, 116, 131, 133, 135, 138, 149, 153, 154, 156, 157, 249, 251], "def": [57, 67, 69, 81, 86, 89, 91, 111, 112, 116, 119, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 224, 242, 247, 249, 250, 251, 253, 254, 255, 257, 258], "convert_img_from_uint8_to_int8": 57, "parallelprocessparam": [57, 81, 86, 132, 138, 141, 145, 148, 153], "ndarrai": [57, 80, 81, 83, 85, 86, 90, 91, 98, 127, 129, 130, 132, 134, 138, 140, 141, 143, 144, 145, 146, 147, 153, 158, 169, 172, 174, 175, 178, 181, 183, 187, 188, 191, 195, 196, 198, 199, 247, 254], "clip": [57, 83, 95, 96, 98, 100, 102, 127, 138, 140, 143, 144, 146, 147, 252, 253, 254], "alreadi": [57, 74, 138, 148, 203, 240, 245, 249, 251, 254, 255, 257, 258], "astyp": [57, 83, 128, 129, 130, 131, 132, 136, 138, 140, 143, 144, 146, 147, 154, 242, 247, 258], "convers": [57, 102, 122, 129, 130, 234, 247, 253, 259], "preprocessing_funct": [57, 81, 82, 86, 87, 116, 138, 141, 153], "manual": [57, 67, 71, 99, 102, 111, 116, 124, 127, 129, 130, 132, 134, 138, 140, 143, 144, 146, 147, 153, 247, 249, 253], "image_length": 57, "model_input": [57, 128], "int8_t": 57, "image_data": 57, "abov": [57, 64, 69, 112, 131, 136, 138, 141, 142, 145, 149, 206, 247, 249, 250, 251, 253, 254, 258, 259], "nor": 57, "tfliteconvert": [57, 65, 67, 120, 122, 138, 149, 247, 251, 258], "dequant": [57, 128, 133, 136, 138, 149, 151, 153, 156, 157, 181, 238, 240, 251, 258], "sizeof": 57, "importerror": 58, "fail": [58, 67, 69, 138, 140, 144, 147, 160, 226, 227, 238, 250, 253, 254, 258], "_pywrap_tensorflow_intern": 58, "due": [58, 61, 63, 102, 125, 250], "latest": [58, 74, 122, 249, 258, 259], "redistribut": [58, 74, 236], "2977003": 58, "x64": 58, "txt": [60, 71, 77, 89, 140, 144, 147], "png": [60, 81, 86, 91, 138, 250], "focus": [61, 69, 249], "aspect": [61, 67, 69, 157, 251, 253, 258], "ipynb": [61, 62, 63, 65, 68, 69, 72, 73], "involv": [61, 65], "versu": [61, 250, 251, 253], "evaluatemixin": [61, 136, 138], "my_model_v1": [61, 67, 69], "audiodatasetmixin": [61, 67, 69, 71, 112, 119, 126, 132, 141, 142, 145, 148, 152], "instanti": [61, 67, 69, 71, 81, 117, 123, 125, 126, 127, 128, 131, 132, 133, 134, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 173, 174, 175, 178, 181, 182, 183, 187, 189, 190, 191, 195, 196, 199, 207, 224, 225, 247, 251, 253, 255, 259], "among": 61, "classifierevaluationresult": [61, 138, 250, 258], "tabl": [61, 182, 259], "layout": [61, 68, 76, 126, 131, 132, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 235, 253, 258], "row": [61, 125, 136, 140, 144, 147, 160, 253, 254], "repres": [61, 81, 111, 112, 116, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 247, 251, 252, 258, 259], "column": [61, 128, 136, 160], "vice": 61, "versa": 61, "curv": [61, 158], "plot": [61, 120, 122, 136, 138, 158, 250, 251, 253], "illustr": [61, 250, 253, 254, 255], "diagnost": 61, "discrimin": 61, "vari": [61, 249], "tpr": [61, 158], "fpr": [61, 158], "fraction": [61, 62, 84, 86, 111, 112, 116], "known": [61, 125, 140, 141, 143, 144, 146, 147, 148, 252, 254, 255, 259], "proport": [61, 102], "those": [61, 202, 259], "who": [61, 100, 102], "condit": [61, 227, 233, 251], "judg": 61, "gold": 61, "statist": [61, 98, 158, 235, 238, 239, 240, 243, 245, 249, 250, 251, 253], "multipl": [61, 86, 91, 102, 111, 112, 116, 126, 136, 141, 148, 156, 157, 160, 171, 188, 224, 250, 251, 253, 255, 257, 259], "comparison": [61, 237], "fall": 61, "alarm": 61, "reject": [61, 250, 252, 253, 259], "null": 61, "hypothesi": 61, "particular": [61, 65, 102, 140, 142, 144, 145, 147, 149, 249, 251, 258], "wrongli": 61, "categor": [61, 67, 69, 81, 86, 111, 116, 125, 126, 127, 130, 132, 133, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 154, 156, 157, 158, 251, 258], "regardless": [61, 122, 227, 249], "autoencoderevaluationresult": 61, "belong": [61, 89, 102, 151, 237, 240, 245, 251, 255], "anomaly_detect": [61, 67, 235, 237], "reconstruct": [61, 128, 237], "wors": [61, 237], "further": [61, 119, 237, 257], "anomali": [61, 128, 153, 155, 237], "atom": 62, "easili": [62, 249, 252], "assur": 62, "synchron": [62, 233], "dictionari": [62, 71, 84, 89, 91, 111, 112, 116, 118, 119, 120, 122, 124, 136, 140, 144, 147, 158, 160, 163, 164, 171, 172, 182, 188, 190, 206, 213, 225, 228, 242, 244], "typic": [62, 67, 69, 76, 77, 119, 122, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 169, 224, 243, 249, 251, 252, 253, 255, 257, 259], "schema": [62, 76, 176, 179, 184, 186, 188, 190, 192, 200], "fb": [62, 76, 182, 186, 188, 190], "de": [62, 65, 138, 182, 188, 214], "unchang": 62, "bool": [62, 81, 83, 84, 86, 89, 91, 102, 111, 112, 116, 118, 119, 123, 124, 127, 128, 129, 130, 134, 136, 138, 140, 143, 144, 146, 147, 151, 158, 160, 162, 163, 165, 166, 169, 172, 175, 178, 182, 183, 188, 190, 196, 199, 202, 203, 206, 213, 215, 218, 220, 223, 224, 225, 227, 230, 231, 233, 247, 250], "byte": [62, 119, 126, 128, 129, 130, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 169, 182, 188, 190, 212, 217, 218, 220, 232, 233, 238, 241, 247, 249, 251, 253, 254, 257, 258], "iso8601": [62, 170], "hash": [62, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 126, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 166, 170, 172, 203, 209, 215, 240, 241, 242, 244, 251, 253, 257], "md5": [62, 203, 215], "exclud": [62, 160, 202, 223, 225, 250, 251, 253], "match": [62, 66, 71, 83, 134, 136, 138, 140, 144, 147, 166, 203, 227, 233, 242, 250, 251, 253, 256, 258], "hz": [62, 84, 126, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 238, 241, 251, 253, 254, 257, 258], "filterbank": [62, 84], "lowest": [62, 84], "smoothing_bit": [62, 84], "coeffici": [62, 84, 96], "odd": [62, 84, 125], "preserv": [62, 84, 157], "pcan_en": [62, 84, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 253, 257], "pcan": [62, 84, 143, 145, 146], "pcan_strength": [62, 84, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 253, 257], "expon": [62, 84], "pcan_offset": [62, 84, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 253, 257], "denomin": [62, 84], "pcan_gain_bit": [62, 84, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 253, 257], "log_scale_en": [62, 84, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 253, 257], "logarithm": [62, 84], "log_scale_shift": [62, 84, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 253, 257], "scale_shift": [62, 84], "fft_length": [62, 84, 126, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 253, 257], "fft": [62, 84, 148], "smallest": [62, 81, 89, 91], "activity_detection_en": [62, 84, 127, 140, 143, 144, 145, 146, 147, 253], "activity_detection_alpha_a": [62, 84, 127, 140, 143, 144, 145, 146, 147, 253], "fast": [62, 84, 236, 252, 259], "pole": [62, 84], "iir": [62, 84], "activity_detection_alpha_b": [62, 84, 127, 140, 143, 144, 145, 146, 147, 253], "activity_detection_arm_threshold": [62, 84, 127, 140, 143, 144, 145, 146, 147, 253], "activity_detection_trip_threshold": [62, 84, 127, 140, 143, 144, 145, 146, 147, 253], "negat": [62, 84], "q": [62, 84], "127": [62, 84, 132, 157, 227, 238, 242], "anyth": [62, 67, 84, 102], "db": [62, 67, 84], "norm_sampl": 62, "norm_img": [62, 242, 251], "approach": [62, 74, 250, 251, 252, 253, 259], "volume_db": [62, 67, 126, 141, 142, 148, 152, 244, 257], "latency_m": [62, 67, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 244, 253, 257], "level": [62, 67, 172, 222, 225, 233, 249, 258], "log_level": [62, 67, 126, 141, 142, 148, 152, 244, 257], "suppression_m": [62, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 244, 253, 257], "1500": [62, 126, 152, 244], "outsid": [62, 86, 235, 244], "No": [63, 64, 71, 102, 140, 144, 147, 173, 235, 254], "individu": [63, 70, 81, 102, 153, 160, 249, 253, 258], "mathemat": [63, 102, 251], "accumul": [63, 68, 126, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 171, 183, 238, 241, 249, 251, 253, 254, 257, 258], "unsupport": [63, 126, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 238, 241, 251, 253, 254, 257, 258], "percentag": [63, 80, 81, 86, 89, 91, 144, 160, 224], "rel": [63, 71, 81, 89, 91, 121, 124, 127, 140, 142, 143, 144, 145, 147, 149, 160, 171, 202, 223, 249, 251, 253, 254, 255, 259], "idl": [63, 160, 171], "op": [63, 70, 122, 126, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 171, 174, 175, 178, 181, 183, 187, 191, 195, 196, 199, 238, 240, 241, 244, 245, 251, 253, 254, 257, 258], "mac": [63, 68, 71, 126, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 171, 238, 240, 241, 244, 245, 251, 253, 254, 257, 258], "index": [63, 81, 86, 89, 91, 111, 116, 122, 126, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 168, 169, 174, 175, 178, 181, 183, 187, 188, 191, 195, 196, 197, 198, 199, 204, 208, 225, 238, 240, 241, 242, 244, 250, 251, 253, 254, 257, 258], "opcod": [63, 126, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 174, 175, 178, 181, 183, 187, 191, 195, 196, 199, 238, 240, 241, 242, 244, 251, 253, 254, 257, 258], "acc": [63, 126, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 238, 251, 253, 254, 257, 258], "els": [63, 80, 84, 85, 89, 91, 120, 122, 123, 127, 128, 129, 130, 134, 136, 138, 140, 141, 143, 144, 145, 146, 147, 151, 153, 160, 169, 171, 188, 190, 202, 203, 206, 222, 223, 225, 247, 249, 250, 252, 253, 254, 258, 259], "msg": [63, 152, 160, 168, 225, 257, 258], "arm": [63, 84, 156], "cortex": 63, "m33": 63, "efr32xg24": [63, 64, 78, 126, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 253], "78mhz": 63, "know": [63, 68, 148, 238, 240, 249, 254, 255], "invest": [63, 68, 72, 238, 240, 245, 253], "drag": [64, 72, 76, 245, 258], "box": [64, 86, 116, 157, 259], "respect": [64, 136, 138, 250], "serv": [64, 236, 245], "network": [64, 86, 102, 125, 136, 138, 140, 142, 144, 145, 147, 149, 252, 253, 254, 255], "ip": [64, 71, 77, 223], "address": [64, 71, 73, 74, 77, 96, 223, 249], "8000": [64, 142, 143, 145, 146], "represent": [65, 214, 255], "opsset": [65, 67, 69, 122, 126, 127, 131, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 154, 253, 258], "tflite_builtins_int8": [65, 67, 69, 122, 126, 127, 128, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 251, 253, 258], "alwai": [65, 102, 122, 153, 218, 247, 253], "target_spec": [65, 122, 258], "targetspec": [65, 122], "subset": [65, 69, 81, 82, 86, 87, 89, 99, 111, 112, 116, 118, 120, 127, 128, 129, 130, 131, 133, 134, 136, 138, 140, 141, 143, 144, 146, 147, 149, 151, 153, 209, 243, 247, 249, 251, 252, 253, 254, 258], "hundr": 65, "randomli": [65, 81, 86, 89, 91, 140, 141, 143, 144, 146, 206, 207, 252, 253, 259], "chosen": [65, 140, 157, 249, 253], "oppos": [66, 67], "keyword_spotting_model": 66, "load_mltk_model": [66, 148, 243, 255], "model_path": [66, 123, 136, 223, 258], "recurs": [66, 71, 89, 91, 119, 202, 223, 225], "repositori": [66, 74], "mltk_model_path": 66, "architectur": [67, 127, 134, 135, 137, 138, 140, 141, 143, 146, 235, 250, 257], "ye": [67, 102, 152, 156, 235, 244], "alphanumer": [67, 81, 86, 251], "charact": [67, 206, 251, 255, 257, 259], "list_mltk_model": 67, "delimit": [67, 75, 128, 223], "imagedatasetmixin": [67, 112, 122, 131, 133, 138, 149, 153, 154, 156, 157, 251], "rest": [67, 69, 81, 141, 142, 144, 145, 148, 251, 253, 257, 258], "batch_siz": [67, 69, 81, 85, 86, 111, 112, 116, 117, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 247, 251, 253], "adam": [67, 69, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 247, 251, 253, 254], "speech_commands_v2": [67, 69, 126, 127, 141, 142, 143, 144, 145, 146, 147, 148, 152, 253, 254], "class_mod": [67, 69, 81, 82, 86, 87, 111, 116, 126, 131, 132, 133, 138, 141, 142, 145, 148, 149, 152, 153, 154, 156, 157, 251], "kerasmodel": [67, 68, 69, 110, 113, 114, 115, 120, 122, 123, 136, 138, 162, 163, 165, 247, 250, 251, 253], "build_model_funct": [67, 69, 120, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 247, 253, 257], "my_model_build": [67, 69, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 144, 145, 147, 148, 149, 151, 152, 153, 154, 156, 157, 247, 251, 253, 254, 255, 257], "keras_model": [67, 69, 120, 122, 126, 127, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 156, 157, 163, 250, 251, 253, 254, 255, 257], "sequenti": [67, 69, 122, 126, 127, 128, 129, 130, 131, 132, 133, 142, 143, 145, 146, 149, 151, 152, 247, 251], "inputlay": [67, 69, 152, 253], "input_shap": [67, 69, 104, 105, 106, 107, 116, 119, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 247, 251, 253, 254, 255, 257, 258], "use_bia": [67, 69, 126, 133, 152, 175, 178, 183, 199], "pad": [67, 69, 80, 81, 83, 122, 126, 127, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 156, 157, 175, 176, 177, 178, 179, 180, 189, 191, 192, 193, 199, 200, 201, 238, 240, 241, 242, 244, 251, 252, 253, 254, 257, 258], "stride": [67, 69, 125, 126, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 175, 176, 178, 179, 191, 192, 199, 200, 238, 240, 241, 242, 244, 251, 253, 254, 257, 258], "relu": [67, 69, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 140, 142, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 156, 157, 173, 238, 240, 241, 242, 244, 247, 251, 253, 254, 258], "flatten": [67, 69, 122, 126, 127, 129, 130, 131, 132, 133, 136, 138, 140, 142, 143, 144, 145, 146, 147, 149, 151, 152, 197, 225, 240, 241, 242, 244, 245, 247, 250, 251, 253], "n_class": [67, 69, 111, 112, 116, 119, 122, 126, 127, 132, 133, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 158, 251, 253, 254, 255, 257, 258], "over": [67, 69, 70, 86, 99, 102, 103, 122, 242, 251, 253, 256, 259], "bad": [67, 69, 253], "log_dir": [67, 119, 122, 124, 143], "reduce_lr_on_plateau": [67, 122, 126, 127, 132, 133, 134, 138, 141, 142, 143, 145, 146, 149, 152, 251], "25": [67, 81, 84, 86, 89, 91, 122, 126, 132, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 157, 230, 244, 251, 252, 253, 254, 257, 258], "patienc": [67, 122, 126, 127, 132, 133, 134, 138, 141, 142, 143, 145, 146, 149, 152, 251], "train_callback": [67, 122, 127, 129, 130, 134, 140, 143, 144, 146, 147, 247, 253], "lr_schedul": [67, 122, 132, 141, 142, 148, 156, 157, 255], "early_stop": [67, 122, 126, 127, 132, 133, 134, 138, 141, 142, 143, 145, 146, 148, 149, 152, 251], "supported_op": [67, 69, 122, 126, 127, 128, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 251, 253, 258], "representative_dataset": [67, 69, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 247, 251, 253, 258], "strongli": [67, 251], "wherea": 67, "rock_paper_scissors_v1": [67, 133], "rock": [67, 133, 139, 149, 234, 237, 240, 241, 242, 245], "paper": [67, 96, 98, 99, 125, 133, 139, 149, 234, 237, 240, 241, 242, 245], "scissor": [67, 133, 139, 149, 234, 237, 240, 241, 242, 245], "96": [67, 106, 107, 125, 127, 128, 134, 140, 141, 143, 144, 146, 147, 148, 157, 237, 240, 245, 250, 251, 252, 253, 254, 257, 259], "robust": [67, 141, 142, 145, 148, 251, 252, 253, 254], "unknown_class_percentag": [67, 81, 89, 91, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152], "silence_class_percentag": [67, 81, 91, 126, 132, 141, 142, 145, 148, 152], "offset_rang": [67, 81, 126, 132, 141, 142, 145, 148, 152], "trim_threshold_db": [67, 80, 81, 83, 126, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 254], "noise_color": [67, 81, 126, 132, 141, 142, 145, 148, 152], "bg_noise_rang": [67, 81, 126, 132, 141, 142, 145, 148, 152], "bg_noise_dir": [67, 81, 126, 132, 141, 142, 145, 148, 152], "_background_noise_": [67, 102, 126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 156, 254], "rotation_rang": [67, 86, 131, 133, 138, 149, 154, 156, 157, 251], "35": [67, 125, 127, 131, 133, 134, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 156, 157, 251, 252, 253, 254, 257], "contrast_rang": [67, 86, 133, 138, 149, 156, 251], "50": [67, 96, 99, 103, 111, 112, 116, 125, 133, 134, 136, 138, 140, 141, 143, 144, 145, 146, 147, 148, 151, 153, 154, 156, 157, 251, 252, 253, 254, 257, 258], "70": [67, 133, 138, 141, 144, 145, 146, 147, 148, 253, 254, 257], "gauss": [67, 86, 133, 138, 149, 251], "poisson": [67, 86, 133, 138, 149, 251], "horizontal_flip": [67, 86, 131, 133, 138, 149, 154, 157, 251], "vertical_flip": [67, 86, 131, 133, 138, 149, 251], "basic_tf_dataset_exampl": 67, "image_tf_dataset": [67, 70], "audio_tf_dataset": [67, 140, 143, 144, 146, 147], "evaluateautoencodermixin": [67, 128, 153, 158], "idea": [67, 70, 74, 138, 141, 142, 143, 145, 146, 148, 250, 251, 253, 254, 255], "conv1d_exampl": 67, "siamese_contrast": 67, "tflite_micro_magic_wand": [67, 235], "tinyml": [67, 137, 153, 154, 156, 157, 235, 254], "keyword_spot": [67, 235, 240, 244, 245], "visual_wake_word": [67, 235, 249], "trainabl": [68, 148, 240, 244, 245, 249, 251, 253, 254, 255], "slightli": [68, 141, 142, 145, 148, 257], "child": 69, "sometim": [69, 243, 251, 253], "restart": [69, 70, 102, 249], "bias": [70, 124, 234, 235, 251], "api_doc": [70, 122, 127, 129, 130, 134, 141, 142, 143, 145, 146, 148, 149, 247, 251], "51": [70, 126, 127, 134, 140, 141, 143, 144, 145, 146, 147, 148, 241, 242, 251, 253, 254, 257], "stat": [70, 86, 127, 134, 140, 143, 144, 146, 147, 158, 160, 253], "bottleneck": [70, 125, 249, 253], "weboag": 70, "n": [70, 86, 122, 126, 127, 128, 134, 138, 140, 143, 144, 146, 147, 151, 207, 225, 235, 238, 242, 258, 259], "forward": [70, 172, 188, 202, 223, 252, 258], "constrain": 71, "seamlessli": [71, 236, 249], "appear": [71, 72, 89, 140, 141, 144, 147, 209, 223, 245, 249, 252], "had": [71, 169, 249], "protocol": 71, "scope": [71, 249, 251, 258], "openssh": 71, "upgrad": [71, 74, 225, 237, 238, 239, 240, 241, 242, 243, 244, 245, 250, 251, 253, 254, 258, 259], "consist": [71, 111, 112, 116, 125, 233, 249, 251, 253], "public": [71, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 134, 157], "past": [71, 74, 247, 249, 253, 259], "anywher": [71, 248, 249], "keygen": [71, 249], "ed25519": [71, 249], "id_my_kei": 71, "my_kei": 71, "prioriti": 71, "my_serv": [71, 77], "remote_dir": [71, 77], "domain": 71, "145": [71, 140, 141, 148], "243": [71, 144, 257], "23": [71, 99, 132, 136, 138, 140, 141, 144, 147, 148, 149, 157, 160, 251, 253, 254, 257, 258], "222": [71, 77], "four": [71, 102, 148, 234, 251, 255], "ssh3": 71, "34567": 71, "2222": 71, "filepath": [71, 122, 141, 145], "id_myserv": 71, "identityfil": 71, "key_filenam": [71, 77], "merg": [71, 225, 251, 253], "overwrit": [71, 122, 124, 182, 188, 190], "prod_env": 71, "cuda_devic": 71, "pipe": [71, 75], "csv": [71, 128, 160], "glob": [71, 124], "patch": 71, "wildcard": 71, "upload_fil": [71, 77], "bash": [71, 250], "startup_cmd": [71, 77, 248, 249], "mylib": 71, "7zip": [71, 249], "retlavi": 71, "download_fil": [71, 77], "shutdown_cmd": [71, 77], "curl": [71, 77], "f": [71, 77, 81, 84, 125, 126, 127, 128, 131, 132, 133, 134, 138, 140, 143, 144, 145, 146, 147, 149, 151, 171, 173, 188, 190, 207, 222, 223, 226, 232, 237, 238, 240, 241, 242, 244, 245, 250, 251, 253, 254, 258, 259], "sync_local_mltk": 71, "ssh_remote_dir": [71, 121], "ssh_create_venv": [71, 121], "ssh_environ": [71, 121, 143, 146], "ssh_startup_cmd": [71, 121], "ssh_upload_fil": [71, 121, 143, 146], "ssh_download_fil": [71, 121, 143, 146], "ssh_shutdown_cmd": [71, 121], "echo": 71, "config_path": [71, 77], "create_venv": [71, 77, 249], "ssh_config": [71, 77], "joe": [71, 77], "id_my_serv": [71, 77], "cuda_visible_devic": [71, 77, 251, 253, 254], "dev_env": [71, 77], "libsndfile1": [71, 77, 249], "custom_log": [71, 77], "overridden": [71, 112, 149], "vast_ai": [71, 249], "ssh6": [71, 249], "31521": 71, "stricthostkeycheck": 71, "sub": [71, 77, 89, 91, 102, 111, 112, 113, 114, 116, 140, 143, 144, 147, 203, 213, 251, 253], "ssh5": 71, "23452": 71, "immedi": [71, 140, 143, 144, 146, 147, 203, 218, 224, 233], "until": [71, 111, 112, 113, 114, 115, 116, 122, 124, 227, 233, 251], "finish": [71, 111, 112, 113, 114, 115, 116, 117, 122, 207, 249, 252, 259], "viewer": [72, 245], "markdown": 73, "inlin": [73, 251, 253], "offici": 73, "palett": 73, "shift": [73, 86, 177, 180, 185, 201, 253], "enter": [73, 249, 259], "cell": [73, 74], "ipykernel": 73, "leverag": [73, 74, 143, 146, 148, 235, 255], "As": [73, 134, 136, 138, 140, 247, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259], "account": [73, 74, 247, 248, 252, 253, 257, 259], "signup": [73, 74], "email": [73, 74, 248, 249], "gmail": [73, 74], "proper": 74, "highli": [74, 253], "fastest": 74, "pip3": [74, 236], "speedup": [74, 224], "17": [74, 132, 136, 140, 141, 144, 147, 148, 149, 153, 156, 157, 238, 251, 253, 254, 257, 258], "colaboratori": 74, "semicolon": 75, "colon": 75, "cach": [75, 188, 242], "te": [75, 112], "lambda": [75, 85, 130, 136, 138, 144, 146, 147, 207, 253, 259], "temporari": [75, 223], "numpi": [75, 80, 81, 83, 85, 86, 91, 103, 104, 105, 111, 112, 116, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 172, 188, 242, 247, 258], "19": [75, 126, 132, 136, 140, 141, 143, 144, 146, 147, 148, 154, 157, 251, 253, 254, 257, 259], "tensorflow_prob": 75, "onnxruntim": [75, 258], "temp": [75, 213, 223, 238, 240, 241, 242, 244, 245, 258, 259], "brief": [76, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 251, 253], "concept": [76, 250, 251, 252, 253, 257], "programm": 76, "mltk_user_settings_path": [77, 223], "dev_model": 77, "production_model": 77, "efr32": 77, "serial_numb": [77, 223], "123432": 77, "usernam": [77, 223, 231, 249], "resolv": [77, 122], "serialno": 77, "ip_address": [77, 223], "kit": 78, "tflite_micro_acceler": [78, 213, 252], "efm32": 78, "giant": 78, "s1": [78, 138], "gg11": 78, "starter": 78, "thunderboard": 78, "sens": 78, "pro": [78, 259], "dbm": 78, "read_audio_fil": [80, 83, 127, 140, 143, 144, 146, 147, 254], "return_sample_r": [80, 83, 127, 140, 143, 144, 146, 147, 254], "return_numpi": [80, 83, 85, 127, 140, 143, 144, 146, 147, 254], "kwarg": [80, 81, 84, 86, 89, 91, 111, 112, 116, 118, 119, 125, 127, 128, 129, 130, 134, 136, 138, 140, 143, 144, 146, 147, 151, 158, 160, 161, 166, 171, 172, 174, 175, 178, 182, 183, 188, 190, 191, 196, 199, 206, 222, 224, 225, 247], "mono": [80, 141, 145], "1d": [80, 81, 83, 86, 111, 112, 116, 131, 132, 149, 158, 251], "union": [80, 85, 91, 94, 113, 114, 115, 119, 123, 125, 136, 138, 158, 160, 162, 163, 164, 165, 172, 182, 188, 190, 202, 203, 206, 212, 213, 215, 222, 223, 224, 225, 227, 228, 230, 250], "write_audio_fil": [80, 127, 140, 143, 144, 146, 147], "sample_r": [80, 81, 82, 127, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148], "timestamp": [80, 85, 124], "int16": [80, 83, 182, 190], "32768": [80, 83, 252], "eager": [80, 85], "adjust_length": [80, 81, 83, 127, 140, 141, 143, 144, 146, 147, 254], "target_sr": [80, 83, 127, 140, 143, 144, 146, 147, 254], "original_sr": 80, "out_length": [80, 81, 83, 127, 140, 141, 143, 144, 146, 147, 254], "offset": [80, 81, 83, 127, 136, 140, 141, 143, 144, 146, 147, 177, 180, 185, 201, 254], "zero": [80, 81, 89, 91, 96, 100, 102, 140, 141, 143, 144, 145, 146, 147, 177, 180, 185, 189, 194, 201, 218, 242, 249, 254], "crop": [80, 81, 138, 140, 141, 143, 144, 145, 146, 252], "teh": [80, 247], "in_length": 80, "decibel": [80, 81], "send": [80, 81, 134, 217, 231, 232, 233, 248, 249, 251, 252, 253], "parallel": [81, 91, 127, 134, 140, 143, 144, 146, 147, 206, 213, 224, 249, 253, 254, 259], "imagedatagener": [81, 86, 116, 133, 149, 251], "except": [81, 86, 119, 140, 143, 144, 146, 147, 222, 223, 225, 238, 254, 259], "asynchron": [81, 206, 232, 233], "multiprocess": [81, 86], "multi": [81, 98, 122, 225, 251, 252], "futur": [81, 124, 182, 253], "concurr": 81, "flow_from_directori": [81, 86], "a0": 81, "get_batch_funct": [81, 82, 86, 87, 141, 145], "noaug_preprocessing_funct": [81, 82, 86, 87, 141], "random": [81, 83, 86, 89, 98, 102, 113, 114, 127, 134, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 153, 251, 254, 255], "trim": [81, 102, 136, 140, 141, 143, 144, 146], "sample_length_second": [81, 132], "frontend_en": [81, 82, 111, 132, 141], "2d": [81, 83, 86, 111, 112, 116, 125, 127, 140, 143, 144, 146, 147, 158, 250, 251, 252, 253, 254], "postprocessing_funct": [81, 82, 132, 141], "samplewise_cent": [81, 86, 90, 126, 132, 133, 138, 141, 142, 145, 148, 149, 152, 251], "samplewise_std_norm": [81, 86, 90, 126, 132, 133, 138, 141, 142, 145, 148, 149, 152, 251], "unus": [81, 89, 91], "_silence_": [81, 91, 126, 141, 142, 145, 148, 152, 244, 255, 257], "spawn": [81, 86, 253], "thread": [81, 206, 220, 224, 233], "max_batches_pend": [81, 86, 126, 131, 132, 133, 138, 141, 142, 145, 148, 149, 152, 153, 154, 156, 157, 251], "queue": [81, 86], "get_batches_of_transformed_sampl": [81, 86], "batch_index": [81, 86, 141, 145], "batch_x": [81, 86, 138, 141, 145, 188], "batch_i": [81, 86, 138, 141, 145, 188], "sample_length": [81, 83, 84, 140, 141, 142, 143, 144, 145, 146, 147, 148], "librosa": [81, 140, 141, 143, 144, 145, 146, 147, 153], "my_processing_func": [81, 86, 224], "class_id": [81, 86, 129, 130, 140, 141, 143, 144, 145, 146, 147, 247, 254], "batch_class_id": [81, 86], "batch_filenam": [81, 86], "processed_x": [81, 86], "norm": 81, "divid": [81, 86, 111, 112, 116, 248, 249, 250, 251, 252, 253, 254, 259], "samplewise_normalize_rang": [81, 90], "validation_split": [81, 86, 111, 112, 116, 117, 126, 127, 128, 129, 130, 132, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 156, 157, 247, 251], "validation_augmentation_en": [81, 86, 126, 131, 132, 133, 138, 141, 142, 145, 148, 149, 152, 154, 251], "frontend_dtyp": [81, 82], "cast": [81, 83], "color": [81, 103, 116, 250, 251, 255], "brown": 81, "pink": 81, "violet": 81, "noise_color_rang": 81, "min": [81, 90, 122, 128, 136, 138, 140, 143, 146, 173, 177, 180, 185, 193, 201, 233, 258], "loud": 81, "speed_rang": [81, 126, 132, 141, 142, 145, 148, 152], "pitch_rang": [81, 126, 132, 141, 142, 145, 148, 152], "pitch": [81, 204, 205, 207, 210, 253, 259], "semiton": 81, "vtlp_rang": [81, 126, 141, 142, 145, 148, 152], "vocal": 81, "tract": 81, "perturb": 81, "loudness_rang": [81, 126, 132, 141, 142, 145, 148, 152], "decreas": [81, 122, 125, 126, 127, 133, 134, 141, 142, 143, 145, 146, 149, 152, 251, 252, 253, 254, 255, 257], "bg": 81, "bg_nois": [81, 141, 145], "ref": 81, "trimmed_audio": 81, "raw_audio": 81, "required_pad": 81, "len": [81, 83, 128, 129, 130, 136, 138, 140, 141, 143, 144, 145, 146, 147, 151, 188, 207, 224, 233, 247, 250, 251, 254, 258, 259], "pad_upto_index": 81, "uniform": [81, 83, 86, 111, 112, 116, 127, 140, 141, 143, 144, 145, 146, 147, 254], "padded_audio": 81, "concat": [81, 136], "800": [81, 89, 91, 142], "disable_random_transform": 81, "audiofeaturegeneratoret": 81, "sample_shap": [81, 82, 132, 141, 145], "disable_gpu_in_subprocess": [81, 86, 91, 224], "add_channel_dimens": [81, 82], "__init__": [81, 82, 83, 84, 86, 87, 119, 127, 134, 136, 140, 143, 144, 146, 147, 158, 160, 163, 166, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 205, 206, 209, 217, 218, 220, 222, 224, 227, 229, 233], "adc": 81, "32": [81, 84, 86, 103, 117, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 240, 244, 247, 249, 251, 252, 253, 254, 257, 258, 259], "shuffl": [81, 86, 89, 91, 111, 112, 113, 114, 116, 127, 130, 133, 134, 140, 143, 144, 146, 147, 149, 206, 207, 251, 252, 259], "shuffle_index_dir": [81, 86], "seed": [81, 86, 89, 91, 98, 127, 130, 134, 140, 143, 144, 146, 147, 206, 207, 254, 259], "follow_link": [81, 86, 89, 91, 102, 111, 116, 140, 144, 147], "max_samples_per_class": [81, 86, 89, 91, 111, 116, 120, 127, 128, 134, 140, 143, 144, 146, 147, 158], "list_valid_filenames_in_directory_funct": [81, 86, 89, 91, 140, 144, 146, 147], "class_count": [81, 86, 89, 91, 111, 112, 116, 118, 127, 129, 130, 134, 140, 143, 144, 146, 147, 247], "parallelaudiogener": 81, "subdirectori": [81, 86, 103, 104, 105, 111, 223, 251], "bmp": [81, 86], "ppm": [81, 86], "tif": [81, 86], "tree": [81, 86, 88, 93, 102, 108, 135, 137, 139, 140, 144, 147, 150, 151, 152, 153, 154, 155, 156, 157, 159, 216, 238, 240, 241, 242, 244, 245, 253], "dog": [81, 86, 102, 103, 111, 112, 116, 117, 131, 154, 158, 250, 255, 258], "cat": [81, 86, 102, 103, 111, 112, 116, 117, 131, 154, 158, 250, 255, 258], "spars": [81, 86, 111, 116, 141], "hot": [81, 86, 111, 116, 127, 130, 134, 140, 143, 144, 146, 147], "ident": [81, 86, 111, 116, 250, 253], "mainli": [81, 86, 111, 116], "autoencod": [81, 86, 111, 116, 128, 153, 158], "yield": [81, 86, 129, 130, 138, 247, 258], "reus": [81, 86, 102, 111, 116], "maintain": [81, 86, 111, 116, 249], "symlink": [81, 86, 111, 116], "list_valid_filenames_in_directori": [81, 86, 89, 91, 102, 140, 144, 146, 147], "base_directori": [81, 86, 89, 91, 102, 140, 144, 147], "search_class": [81, 86, 89, 91, 102, 140, 144, 147], "white_list_format": [81, 86, 89, 91, 102, 140, 144, 147], "shuffle_index_directori": [81, 86, 89, 91, 102, 140, 143, 144, 147], "directoryiter": [81, 86], "target_s": [81, 86, 87, 116, 138], "default_transform": [81, 86, 141, 145], "retrun": [81, 227], "get_random_transform": [81, 86, 141, 145], "configer": 81, "orignal_sr": [81, 141, 145], "whole_sampl": 81, "apply_transform": [81, 86, 141, 145], "keepdim": [81, 90, 136], "1e": [81, 86, 90, 132, 138, 140, 141, 142, 144, 145, 147, 253, 254], "diff": [81, 90], "ptp": [81, 90], "relat": [82, 86, 87, 102], "logic": [82, 87], "audio_data_gener": [82, 141, 145], "save_to_dir": [82, 86, 87, 131, 133, 138, 149], "save_prefix": [82, 86, 87], "save_format": [82, 86, 87, 138, 143, 146, 250], "class_indic": [82, 87, 141, 145], "grai": [83, 136, 138, 251, 252, 253], "1200": [83, 84, 126, 140, 141, 148, 252, 257], "108": [83, 84, 140, 252, 253, 257], "original_sample_r": [83, 127, 140, 143, 144, 146, 147, 254], "my_audio": 83, "resampl": [83, 86, 116, 127, 140, 143, 144, 146, 147, 254], "orig_sr": [83, 127, 140, 143, 144, 146, 147, 254], "squeez": [83, 138, 140, 143, 144, 146, 147, 258], "axi": [83, 86, 127, 136, 138, 140, 141, 143, 144, 145, 146, 147, 253, 254, 258], "process_sampl": [83, 89, 91], "dimens": [83, 86, 127, 140, 143, 144, 146, 147, 188, 189, 194, 252, 253, 254, 257, 258], "window_size_length": 83, "window_step_length": 83, "n_featur": [83, 84], "n_channel": [83, 140, 141, 142, 143, 144, 145, 146, 147, 148, 194, 242], "magic": [83, 150, 151], "micro_features_gener": 83, "cc": [83, 98, 99, 250, 252, 255], "l84": 83, "activity_was_detect": 83, "spectrogram_shap": [84, 127, 140, 143, 144, 146, 147, 254], "__new__": [84, 171, 190, 197, 214], "item": [84, 140, 171, 188, 190, 207, 242, 251, 259], "fromkei": [84, 171, 190], "pop": [84, 171, 190], "unrepresent": [84, 171, 190], "rais": [84, 86, 119, 125, 138, 140, 143, 144, 146, 147, 171, 190, 197, 204, 208, 226, 231, 250, 254], "keyerror": [84, 171, 190], "popitem": [84, 171, 190], "lifo": [84, 171, 190], "empti": [84, 89, 127, 134, 140, 141, 143, 144, 146, 147, 171, 190, 223, 225, 254, 258], "self": [84, 127, 128, 134, 136, 140, 141, 143, 144, 145, 146, 147, 151, 214, 222, 225, 230, 236], "setdefault": [84, 171, 190], "insert": [84, 119, 140, 143, 144, 146, 171, 182, 190], "present": [84, 96, 100, 140, 144, 147, 171, 190, 197, 204, 208, 251, 253, 254], "lack": [84, 171, 190, 253], "05": [84, 127, 133, 138, 142, 143, 146, 149, 152, 156, 157, 240, 251, 253], "80": [84, 126, 127, 132, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 156, 238, 251, 253, 254, 257, 259], "21": [84, 126, 127, 128, 132, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 154, 156, 157, 238, 240, 241, 245, 251, 253, 254, 257, 258, 259], "75": [84, 89, 91, 127, 140, 143, 144, 145, 146, 147, 149, 253, 254, 258], "trip": 84, "rhe": 84, "deep": [84, 98, 205, 246, 251], "read_image_fil": [85, 134], "target_channel": 85, "nativ": [85, 91, 138], "write_image_fil": [85, 127, 134], "auto_scal": 85, "foreground": 86, "threadpool": 86, "pool": [86, 91, 125, 127, 134, 140, 143, 144, 146, 147, 192, 193, 206, 224, 249, 252], "featurewise_cent": 86, "boolean": [86, 111, 112, 116, 122, 125, 136, 182], "wise": 86, "featurewise_std_norm": 86, "zca_epsilon": 86, "epsilon": [86, 136, 140, 144, 147, 253, 254], "zca": 86, "whiten": 86, "zca_whiten": 86, "degre": 86, "rotat": 86, "width_shift_rang": [86, 131, 133, 138, 149, 154, 156, 157, 251], "pixel": [86, 103, 105, 138, 251], "height_shift_rang": [86, 131, 133, 138, 149, 154, 156, 157, 251], "brightness_rang": [86, 133, 138, 149, 156, 251], "pick": [86, 141, 254], "bright": 86, "shear_rang": 86, "shear": 86, "intens": [86, 249, 251, 253], "angl": [86, 251], "clockwis": 86, "direct": [86, 122, 140, 143, 145, 146, 147], "zoom_rang": [86, 133, 138, 149, 156, 157, 251], "zoom": 86, "channel_shift_rang": 86, "fill_mod": [86, 138], "constant": [86, 138], "nearest": [86, 116], "reflect": [86, 98, 122, 136, 138, 250, 253], "boundari": 86, "fill": 86, "accord": [86, 122, 249], "thegiven": 86, "kkkkkkkk": 86, "abcd": 86, "cval": [86, 138], "aaaaaaaa": 86, "dddddddd": 86, "abcddcba": 86, "dcbaabcd": 86, "abcdabcd": 86, "flip": 86, "horizont": 86, "vertic": 86, "resiz": [86, 116, 131, 133, 134, 140, 143, 144, 146, 147, 149, 153, 154, 156, 157, 251], "interpol": [86, 87, 116, 153], "reserv": 86, "strictli": [86, 258], "enhanc": [86, 91], "contrast": [86, 135, 136, 138, 250], "tv": 86, "grei": 86, "gaussian": 86, "speckl": 86, "varianc": [86, 253], "random_transforms_en": 86, "256": [86, 131, 136, 138, 140, 141, 142, 143, 144, 147, 148, 157, 251, 252, 257], "color_mod": [86, 87, 116, 138, 242], "batch_shap": [86, 87, 141, 145], "bilinear": [86, 116], "rgba": [86, 116], "bicub": [86, 116], "lanczo": [86, 116], "ham": [86, 116], "sample_weight": [86, 111, 112, 116], "rank": 86, "feed": [86, 252, 255], "miscellan": 86, "pictur": 86, "prefix": [86, 91, 122, 224, 247], "jpeg": [86, 140, 143, 144, 146, 147, 251], "pdf": [86, 125, 153, 154, 156, 248, 254], "gif": 86, "form": [86, 111, 112, 116], "valueerror": [86, 125, 197, 204, 208], "img_shap": 86, "transform_paramet": 86, "round": [86, 113, 114, 115, 253], "random_transform": 86, "3d": [86, 127, 131, 140, 143, 144, 146, 147, 149, 251, 254], "signific": [86, 122, 249], "image_data_gener": 87, "data_format": 87, "attribut": [87, 105, 111, 116, 119, 122, 163, 212, 222, 225, 230], "list_dataset_directori": 89, "unknown_class_label": 89, "empty_class_percentag": 89, "empty_class_label": 89, "return_absolute_path": 89, "process_samples_funct": [89, 91, 140, 143, 144, 147], "label_id": [89, 91], "class1": [89, 91], "sample1": [89, 91, 253, 259], "sample2": [89, 91, 253, 259], "sample9": [89, 91], "class2": [89, 91], "class3": [89, 91], "return_audio_data": [89, 91, 127, 140, 143, 144, 146, 147], "sample_path": [89, 91, 140, 143, 144, 147, 251], "split_file_list": [89, 140, 143, 144, 147], "shuffle_file_list_by_group": [89, 140, 144, 147], "group_callback": 89, "42": [89, 98, 127, 130, 134, 140, 141, 143, 144, 146, 147, 148, 151, 182, 190, 207, 242, 253, 254, 257, 259], "flat": [89, 111, 112, 116, 127, 134, 140, 143, 144, 146, 147], "callabl": [89, 91, 113, 119, 125, 202, 206, 222, 223, 224, 227, 228, 238, 239, 240, 243, 245], "load_audio_directori": [91, 127, 140, 143, 144, 146, 147], "onehot_encod": [91, 127, 134, 140, 143, 144, 146, 147], "return_audio_sample_r": 91, "onehot": 91, "datasetv2": 91, "load_image_directori": [91, 134], "return_image_data": [91, 134], "parallel_process": [91, 127, 134, 140, 143, 144, 146, 147, 249, 252, 253], "n_job": [91, 127, 134, 140, 143, 144, 146, 147, 206, 207, 224, 249, 252, 259], "job_batch_s": 91, "parallelprocess": 91, "env": [91, 224, 228], "numpy_funct": 91, "cannot": [91, 111, 112, 116, 120], "nest": [91, 202, 224, 225], "job": [91, 141, 142, 145, 148, 206, 213, 224, 249, 259], "processpool": 91, "enable_numpy_behavior": [91, 134], "behavior": [91, 111, 112, 116], "reshap": [91, 116, 125, 126, 131, 132, 133, 136, 140, 142, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 156, 157, 196, 238, 240, 241, 242, 244, 251, 253, 254, 258], "ravel": 91, "promot": 91, "compat": [91, 125, 172, 258], "ones": [91, 102], "int32": [91, 126, 128, 130, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 182, 190, 240, 241, 242, 244, 251, 253, 257, 258], "throw": [91, 225], "incompat": 91, "float64": [91, 182], "obei": 91, "rule": 91, "capabl": [91, 259], "par": 91, "prepare_data": 93, "prepar": [93, 111, 116, 129, 130, 143, 146, 247, 258], "load_data": [93, 102, 103, 104, 105, 106, 107, 111, 116, 127, 129, 130, 131, 136, 138, 151, 154, 242, 247, 251, 258], "seq_length": [93, 151], "dataload": 93, "mixkit": [94, 140, 143, 146], "co": [94, 140, 143, 146, 253], "sound": [94, 98, 125, 140, 143, 144, 146, 147, 153, 252, 253, 254, 259], "sfxfree": 94, "download_url": [94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 128, 132, 140, 143, 146, 203], "sfx": [94, 140, 143, 146], "crowd": [94, 140, 143, 146], "pub": [94, 140, 143, 146, 249], "360": [94, 132, 140, 141, 143, 145, 146, 148, 151, 152, 153, 253], "big": [94, 140, 143, 146], "talk": [94, 140, 143, 146], "364": [94, 140, 143, 146], "restaur": [94, 140, 143, 146, 252], "ambienc": [94, 140, 143, 146], "444": [94, 140, 143, 146], "keyboard": [94, 140, 143, 254], "1386": [94, 140, 143], "offic": [94, 140, 143, 252], "447": [94, 140, 143], "hotel": [94, 140, 143], "lobbi": [94, 140, 143], "dine": [94, 140, 143], "area": [94, 140, 143, 158], "453": [94, 140, 143], "url": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 132, 134, 138, 140, 143, 145, 146, 147, 153, 156, 157, 203, 238, 240, 241, 242, 244, 245, 249, 250, 258], "dest_dir": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 119, 140, 143, 147, 202, 203], "sample_rate_hertz": [94, 95, 96, 144, 147], "logger": [94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 119, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 163, 166, 172, 203, 213, 214, 224, 225, 228, 247, 250], "mix": [95, 102, 144, 147, 253, 254], "mltk_asset": [95, 106, 107, 132, 140, 143, 145, 146, 147, 153, 156], "brd2601_background_audio": [95, 140, 143, 146], "7z": [95, 97, 99, 100, 101, 106, 107, 140, 143, 145, 146, 147, 153, 156, 251], "verify_sha1": [95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 132, 203], "3069a85002965a7830c660343c215edd4fae39c6": [95, 140, 143, 146], "sha1": [95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 203], "clean_dest_dir": [95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 140, 143, 144, 147, 202, 203], "karoldvl": 96, "obstacl": 96, "research": [96, 99, 125, 140, 144, 147, 157, 252, 253], "concentr": 96, "scarciti": 96, "suitabl": [96, 230, 249, 251], "publicli": [96, 100, 252], "tri": 96, "annot": 96, "000": [96, 99, 103, 104, 105, 128, 136, 152, 237, 244, 253, 258], "abund": 96, "unifi": 96, "250": [96, 238, 241, 253], "unlabel": 96, "auditori": 96, "excerpt": 96, "freesound": 96, "human": [96, 102, 144, 146, 147, 253, 254, 259], "baselin": [96, 99, 122, 136, 160, 171, 250, 253], "deriv": [96, 105], "mel": 96, "cepstral": 96, "cross": [96, 127, 130, 134, 140, 143, 144, 146, 147], "piczak": 96, "proceed": 96, "23rd": 96, "acm": 96, "confer": [96, 143, 146, 252], "multimedia": 96, "pp": 96, "1015": 96, "1018": 96, "60764eef4f073d27a766033a47956e23022a2ebc": 96, "dest_subdir": [96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 132, 134, 145, 146, 153, 156, 157, 203, 249, 258], "synthet": [97, 101, 140, 143, 144, 147, 206, 207, 216, 234, 254], "16khz": [97, 99, 100, 101, 140, 141, 143, 144, 145, 146, 147, 148, 206, 253, 254, 257], "dropbox": [97, 99, 100, 101, 140, 258], "ulumv0sxbtcssvr": 97, "synthetic_direction_command": 97, "dl": [97, 99, 100, 101, 140, 258], "9e9295b4eda3d9da9cd242063c1646b15908da55": 97, "generate_dataset": [97, 101], "out_dir": [97, 101, 206, 207, 259], "environment": [98, 253], "ir": [98, 144, 258], "traer": 98, "mcdermott": 98, "waveform": 98, "That": [98, 102, 248, 249], "instantan": 98, "pressur": 98, "damp": 98, "scatter": 98, "convolv": [98, 144, 253], "emit": 98, "techniqu": [98, 253, 259], "commonli": [98, 259], "problem": [98, 125, 141, 142, 145, 148, 149, 251, 253, 259], "style": [98, 259], "spoken": [98, 99, 102, 127, 140, 141, 142, 148, 252, 253, 257], "reverber": 98, "acoust": 98, "BY": [98, 99, 102, 252, 255], "creativ": [98, 102, 105], "2016": 98, "natur": [98, 259], "perceptu": 98, "mcdermottlab": 98, "edu": [98, 103, 131, 154], "reverb": 98, "irmaudio": 98, "de04f5be419c12f4f847f65d7ef8e2356b73aa38": 98, "apply_ir": 98, "load_dataset": [98, 111, 112, 116, 118, 120, 127, 128, 131, 132, 133, 134, 136, 138, 140, 143, 144, 146, 147, 149, 151], "dataset_dir": [98, 127, 134, 140, 143, 144, 146, 147, 242, 251, 254], "apply_random_ir": [98, 144], "ir_sampl": 98, "appyli": 98, "multilingu": [99, 140, 252, 253], "polici": [99, 124], "english": [99, 100, 102, 259], "corpu": [99, 253], "grow": [99, 252, 253], "languag": [99, 100, 102, 127, 141, 142, 148, 206, 209, 252, 253, 257], "academ": [99, 252], "commerci": [99, 236, 248, 252], "term": [99, 100, 105, 249, 252], "licens": [99, 102, 104, 249, 252], "under": [99, 102, 104, 105, 111, 112, 116, 158, 252], "340": 99, "million": [99, 259], "hour": [99, 249, 251, 253], "autom": [99, 248], "align": [99, 102, 122, 247], "analysi": 99, "outlier": [99, 250], "download_url1": 99, "j4p9w4h92e8rruo": [99, 140], "mlcommons_keywords_subset_part1": [99, 140], "verify_url1_sha1": 99, "6f515d8247e2fee70cd0941420918c8fe57a31e8": [99, 140], "download_url2": 99, "zacujsccjgk92b2": [99, 140], "mlcommons_keywords_subset_part2": [99, 140], "verify_url2_sha1": 99, "7816f5ffa1deeafa9b5b3faae563f44198031796": [99, 140], "commonvoic": 100, "mozilla": [100, 140, 252], "creativecommon": 100, "publicdomain": 100, "peopl": [100, 102, 140, 250, 251, 252, 253], "volunt": 100, "contributor": 100, "around": [100, 102, 134, 136, 247], "compani": 100, "stifl": 100, "innov": 100, "underrepres": 100, "speaker": [100, 102, 259], "colour": 100, "women": 100, "lgbtqia": 100, "technologi": [100, 259], "equal": [100, 111, 112, 116, 126, 133, 136, 141, 142, 145, 149, 152, 160, 251, 258], "everyon": [100, 102], "mobilis": 100, "everywher": 100, "l9uxyr22w3jgenc": [100, 140], "common_voice_subset": [100, 140], "ce424afd5d9b754f3ea6b3a4f78304f48e865f93": [100, 140], "mkvbeyjdks28241": 101, "sl_synthetic_on_off": 101, "b20697b82f883e4dc5e0afc4b7dc950d3339e703": 101, "catalog": 102, "varieti": [102, 125, 259], "cover": [102, 142, 253], "arxiv": [102, 125, 152, 153, 154, 156], "ab": [102, 127, 134, 136, 152, 250], "1804": [102, 152], "03209": [102, 152], "Its": 102, "speech_commands_v0": [102, 156], "02": [102, 126, 131, 132, 136, 141, 142, 148, 151, 152, 153, 154, 156, 157, 253], "tar": [102, 103, 134, 156, 157, 202, 249, 259], "gz": [102, 103, 134, 156, 157, 202, 249, 259], "01": [102, 127, 138, 143, 146, 230, 250, 251], "august": 102, "727": 102, "105": [102, 144, 238, 241, 253, 259], "829": 102, "april": 102, "11th": 102, "2018": 102, "crowdsourc": 102, "aiyproject": 102, "withgoogl": 102, "open_speech_record": 102, "contribut": [102, 126, 133, 141, 142, 145, 149, 152, 251, 259], "enlarg": [102, 126, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157], "goal": [102, 122, 249, 250], "gather": 102, "speak": [102, 140, 204, 205, 211, 252, 259], "sentenc": [102, 140], "cours": [102, 252, 255], "five": [102, 148, 255], "minut": [102, 226, 249], "twenti": 102, "six": [102, 148, 255], "seven": [102, 148, 255], "eight": [102, 148, 255], "nine": [102, 148, 255], "distinguish": [102, 257], "unrecogn": 102, "ten": 102, "auxiliari": 102, "said": [102, 254], "bed": 102, "bird": [102, 103, 154, 258], "happi": [102, 259], "hous": 102, "marvin": 102, "sheila": 102, "wow": 102, "kept": [102, 125], "particip": 102, "ag": [102, 249], "gender": 102, "assign": [102, 148, 249, 251], "stabl": 102, "though": [102, 132, 249, 257], "utter": 102, "3cfc6b3a_nohash_2": 102, "3cfc6b3a": 102, "third": [102, 111, 112, 116, 127, 139, 249], "nohash": 102, "partit": 102, "repetit": 102, "unrealist": 102, "optimist": 102, "uncontrol": 102, "room": 102, "privaci": [102, 138, 250], "didn": 102, "stipul": 102, "qualiti": [102, 250, 252, 253, 257, 259], "encount": [102, 250, 251, 253, 258], "robot": [102, 259], "don": [102, 153, 160, 249], "equip": 102, "ogg": 102, "vorbi": 102, "littl": [102, 122, 149, 247, 249, 251, 252, 259], "endian": 102, "wave": [102, 152], "extract_loudest_sect": 102, "screen": 102, "incorrect": 102, "arrang": 102, "cope": 102, "noisi": 102, "realist": [102, 259], "readm": [102, 152, 258], "md": [102, 125, 152, 157], "cite": 102, "articl": 102, "speechcommandsv2": 102, "author": [102, 236, 248], "warden": 102, "titl": [102, 138, 250], "vocabulari": 102, "recognit": 102, "journal": 102, "archiveprefix": 102, "eprint": 102, "primaryclass": 102, "cl": [102, 197, 225], "scienc": 102, "year": 102, "month": [102, 249, 259], "apr": 102, "massiv": 102, "thank": [102, 259], "donat": 102, "grate": 102, "couldn": 102, "put": [102, 116, 140, 143, 144, 146, 147, 182, 190, 251, 252], "billi": 102, "rutledg": 102, "rajat": 102, "monga": 102, "raziel": 102, "alvarez": 102, "brad": 102, "krueger": 102, "barbara": 102, "petit": 102, "gursheesh": 102, "kour": 102, "aii": 102, "team": [102, 137, 150, 248], "pete": 102, "petewarden": 102, "4264eb9753e38eef2ec1d15dfac8441f09751ca9": 102, "mltk_cache_dir": [102, 203, 223], "load_clean_data": [102, 143, 144, 146, 147], "v2_clean": 102, "clean_in_plac": 102, "invalid": [102, 125, 143, 146, 172], "invalid_sampl": 102, "_clean": 102, "accident": 102, "stabil": 102, "_nohash_": [102, 140, 144, 147], "bobby_nohash_0": 102, "bobby_nohash_1": 102, "32x32": 103, "categori": [103, 104], "cifar": [103, 131, 154], "homepag": [103, 105], "airplan": [103, 154, 258], "automobil": [103, 154, 258], "deer": [103, 154, 258], "frog": [103, 154, 258], "hors": [103, 154, 258], "ship": [103, 154, 258], "truck": [103, 154, 255, 258], "x_train": [103, 104, 105, 116, 129, 130, 131, 136, 154, 247], "y_train": [103, 104, 105, 116, 129, 130, 131, 136, 154, 247], "x_test": [103, 104, 105, 116, 129, 130, 131, 136, 154, 247, 258], "y_test": [103, 104, 105, 116, 129, 130, 131, 136, 154, 247, 258], "assert": [103, 104, 105, 132, 140, 144, 147, 242, 258], "50000": 103, "10000": [103, 104, 105, 132, 140, 144, 147, 207, 253, 258, 259], "toronto": [103, 131, 154], "kriz": [103, 131, 154], "6d958be074577803d12ecdefd02955f39262c83c16fe9348329d7fe0b5c001c": 103, "load_data_directori": [103, 104, 105], "60": [104, 105, 126, 129, 130, 133, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 154, 156, 157, 226, 233, 238, 247, 251, 253, 254, 257, 258, 259], "28x28": [104, 105], "shirt": 104, "trouser": 104, "pullov": 104, "dress": 104, "coat": 104, "sandal": 104, "sneaker": 104, "bag": 104, "ankl": 104, "boot": 104, "60000": [104, 105, 136], "28": [104, 105, 129, 130, 134, 136, 140, 141, 142, 143, 144, 145, 147, 148, 149, 154, 157, 247, 251, 252, 253, 254, 257], "copyright": [104, 105], "held": [104, 236], "zalando": 104, "se": 104, "mit": [104, 144, 253], "tshirt": 104, "flash_mnist": 104, "digit": [105, 253], "yann": 105, "lecun": 105, "corinna": 105, "cort": 105, "nist": 105, "alik": 105, "storag": [105, 128, 249], "googleapi": [105, 128, 259], "npz": 105, "731c5ac602752760c8e48fbffcf8c3b850d9dc2a2aedcf2cc48468fc17b673d1": 105, "hand": [106, 107, 133, 149, 234, 240, 245, 250, 251], "gestur": [106, 107, 133, 149, 234, 240, 245, 251], "1ce48f66f7ff999958550147d75aba8da185280c": 106, "input_height": [106, 107, 131, 153, 154], "input_width": [106, 107, 131, 154], "input_depth": [106, 107, 131, 154], "depth": [106, 107, 130, 178, 179, 180, 223, 252, 254, 258], "96x96x1": [106, 107, 133, 149, 240, 242], "77ed1793be7871dcaa79d935b39ba4d23a28e2c3": 107, "tflite_model": [109, 119, 120, 136, 138, 160, 164, 186, 188, 190, 240, 242, 244, 258], "tflite_model_paramet": 109, "cli": [109, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 247], "alia": [110, 205, 214], "datset": [111, 138], "shuffle_dataset_en": [111, 116, 133, 149, 251], "audio_class": 111, "audio_input_shap": 111, "hertz": [111, 160], "class_weight": [111, 112, 116, 117, 126, 127, 129, 130, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 247, 251, 252], "balanc": [111, 112, 116, 117, 126, 127, 129, 130, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 247, 249, 250, 251], "goat": [111, 112, 116, 117, 158, 250], "Or": [111, 112, 116, 236], "pai": [111, 112, 116, 249, 259], "attent": [111, 112, 116], "n_sampl": [111, 112, 116, 127, 134, 136, 140, 143, 144, 146, 147, 158, 258], "bincount": [111, 112, 116, 129, 130, 247], "datagen_context": [111, 116], "context": [111, 116], "audiofeaturegeneratorsettingsset": 111, "get_datagen_cr": [111, 116], "get_shuffle_index_dir": [111, 116], "parallelimagegener": [111, 116, 133, 149], "reproduc": [111, 116, 124, 127, 134, 140, 143, 144, 146, 147, 251, 254], "henc": [111, 116], "loaded_subset": [111, 112, 116], "tempor": [111, 112, 116, 125, 140, 144, 147, 252, 253, 254], "sequence_length": [111, 112, 116], "timestep": [111, 112, 116], "special": [111, 112, 116, 138, 145, 146, 147, 250, 254], "deal": [111, 112, 116, 249], "hdf5": [111, 112, 116, 143, 146], "chunk": [111, 112, 116], "steps_per_epoch": [111, 112, 116, 151], "declar": [111, 112, 113, 114, 115, 116], "exhaust": [111, 112, 113, 114, 115, 116], "infinit": [111, 112, 116], "summarize_dataset": [111, 112, 116, 118, 120, 128, 140, 144, 147, 151], "unload_dataset": [111, 112, 116, 118, 120, 127, 131, 133, 134, 136, 138, 140, 143, 144, 146, 147, 149], "unload": [111, 112, 116, 118, 127, 134, 140, 143, 144, 146, 147, 172], "validation_batch_s": [111, 112, 116], "unspecifi": [111, 112, 116], "validation_data": [111, 112, 116, 118, 127, 128, 130, 134, 136, 138, 140, 143, 144, 146, 147, 151], "fact": [111, 112, 116, 259], "dropout": [111, 112, 116, 127, 129, 130, 131, 132, 142, 143, 145, 146, 149, 151, 152, 244, 247, 251, 253], "x_val": [111, 112, 116, 136], "y_val": [111, 112, 116, 136], "val_sample_weight": [111, 112, 116], "validation_step": [111, 112, 116, 151], "eg": [111, 112, 116], "validation_freq": [111, 112, 116], "collections_abc": [111, 112, 116], "1st": [111, 112, 116], "2nd": [111, 112, 116], "10th": [111, 112, 116], "apart": [111, 112, 116], "draw": [111, 112, 116], "unpack": [111, 112, 116], "invers": [111, 112, 116], "obtain": [111, 112, 116, 122, 248, 249, 252, 253], "parallel_gener": [111, 116, 126, 131, 132, 133, 138, 141, 142, 145, 148, 149, 152, 153, 154, 156, 157, 251], "validation_datagen": [111, 116], "mltkdataset": [112, 127, 134, 140, 143, 144, 146, 147], "my_dataset_load": [112, 129, 130, 131, 154, 247], "definit": [112, 122, 251], "caller": 112, "scoring_funct": [113, 158], "eval_class": 113, "eval_aug": [113, 114], "datageneratordatasetmixin": [113, 114], "eval_custom_funct": [113, 114, 115, 136, 138, 250], "my_custom_eval_funct": [113, 114, 115], "built_model": [113, 114, 115, 136, 138, 162, 250], "evaluationresult": [113, 114, 115, 120, 136, 138, 158, 250], "isinst": [113, 114, 115, 136, 138, 242], "overall_accuraci": [113, 114, 115, 136, 158], "calculate_accuraci": [113, 114, 115], "eval_max_samples_per_class": [113, 114], "eval_shuffl": [113, 114], "eval_steps_per_epoch": [113, 114, 115, 151], "get_scoring_funct": 113, "image_class": 116, "image_input_shap": 116, "snippet": [117, 145, 207, 219, 226, 232, 253, 254, 258], "basic_exampl": [117, 118, 130], "mltk_core": [117, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 247, 248, 253, 256], "__name__": [117, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 247, 256], "__main__": [117, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 247, 256], "portion": [118, 127, 129, 130, 134, 140, 143, 144, 146, 147, 247, 258], "purpos": [118, 127, 129, 130, 134, 138, 140, 143, 144, 146, 147, 236, 247, 249, 250, 251, 253, 254, 257, 258, 259], "static": [118, 172, 174, 175, 177, 178, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 195, 196, 197, 199, 201, 206, 214, 227, 233, 253], "summarize_class_count": [118, 140, 144, 147], "fore": 119, "model_script_path": 119, "get_attribut": 119, "regist": [119, 131, 133, 136, 149, 172], "model_specification_path": [119, 143, 146], "create_log_dir": [119, 127, 131, 133, 134, 138, 140, 143, 144, 146, 147, 149, 252], "suffix": [119, 223], "delete_exist": [119, 131, 133, 138, 149], "create_logg": 119, "parent": [119, 222], "h5_log_dir_path": [119, 138, 143, 146, 250], "tflite_log_dir_path": 119, "unquantized_tflite_log_dir_path": 119, "keras_custom_object": [119, 136, 138, 140, 144, 147, 253], "serialization_and_sav": 119, "test_mode_en": [119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 247], "enable_test_mod": 119, "add_event_handl": [119, 120], "handler": [119, 120, 222], "_raise_except": 119, "mltkmodelev": 119, "my_event_handl": 119, "collid": 119, "trigger_ev": 119, "add_archive_dir": 119, "base_dir": [119, 223, 242], "create_new": 119, "add_archive_fil": 119, "add_model_parameter_populate_callback": 119, "add_tflite_metadata_entri": 119, "tflitemodelmetadataentri": 119, "archive_path": [119, 120, 202, 203, 259], "mdk": 119, "check_archive_file_is_writ": 119, "throw_except": [119, 218, 225], "writabl": 119, "deserialize_tflite_metadata": 119, "get_archive_dir": 119, "get_archive_fil": [119, 143, 146], "get_tflite_metadata_summari": 119, "include_tag": 119, "exclude_tag": 119, "h5_archive_path": [119, 126, 148, 255], "populate_model_paramet": 119, "tflitemodelparamet": [119, 242], "serialize_tflite_metadata": 119, "metedata": 119, "tag": [119, 126, 128, 131, 132, 133, 136, 138, 141, 142, 145, 148, 149, 151, 152, 153, 154, 156, 157, 188, 251], "set_model_paramet": 119, "paremet": 119, "tflite_archive_path": [119, 126], "tflite_metadata_entri": 119, "stage": 120, "before_model_load": 120, "after_model_load": 120, "before_load_dataset": 120, "after_load_dataset": 120, "before_unload_dataset": 120, "after_unload_dataset": 120, "summary_dict": 120, "train_startup": 120, "post_process": [120, 158, 160, 163], "before_build_train_model": 120, "after_build_train_model": 120, "populate_train_callback": 120, "keras_callback": 120, "before_train": 120, "fit_kwarg": 120, "after_train": 120, "training_histori": [120, 163], "before_save_train_model": 120, "keras_model_dict": 120, "keas_model": 120, "after_save_train_model": 120, "before_save_train_result": 120, "trainingresult": [120, 122, 126, 138], "output_dir": [120, 138, 158, 160, 250, 258], "after_save_train_result": 120, "before_save_train_arch": 120, "after_save_train_arch": 120, "train_shutdown": 120, "quantize_startup": 120, "tflite_converter_set": 120, "before_quant": 120, "converter_dict": 120, "after_quant": 120, "tflite_flatbuff": [120, 190], "tflite_flatbuffer_dict": 120, "update_arch": [120, 158], "quantize_shutdown": 120, "evaluate_startup": 120, "evaluate_shutdown": 120, "generate_evaluate_plot": 120, "fig": [120, 136, 138, 250], "matlibplot": 120, "figur": [120, 138, 153, 250], "after_profil": 120, "profilingmodelresult": [120, 166, 172], "remote_directori": 121, "softmax": [122, 125, 126, 127, 129, 130, 132, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 156, 157, 238, 240, 241, 242, 244, 247, 251, 253, 254, 257, 258], "build_model": 122, "on_training_complet": [122, 126], "successfulli": [122, 126, 138, 163, 249, 250], "_on_training_complet": [122, 126], "on_save_keras_model": [122, 138, 143, 146, 250], "_on_save_keras_model": 122, "understood": 122, "final": [122, 131, 140, 143, 144, 146, 147, 249, 254, 255, 258], "mere": 122, "reach": [122, 218, 259], "arbitrarili": 122, "calback": 122, "gradient": [122, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 251, 253], "categorical_crossentropi": [122, 126, 127, 129, 130, 132, 133, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 154, 156, 157, 247, 251, 253, 254], "checkpoints_en": 122, "logdir": 122, "learningrateschedul": [122, 141, 142, 148, 257], "schedul": [122, 140, 141, 142, 144, 147, 148, 156, 157, 253, 255], "quiet": 122, "favor": 122, "val_loss": [122, 128, 134, 153, 253], "quantiti": 122, "new_lr": 122, "lr": [122, 253], "min_delta": [122, 127, 133, 134, 138, 141, 143, 145, 146, 149, 251], "0001": [122, 133, 143, 146, 156], "optimum": 122, "focu": [122, 148, 248], "cooldown": 122, "min_lr": [122, 141], "bound": [122, 157], "benefit": [122, 236, 248, 251, 253], "stagnat": 122, "seen": [122, 143, 146, 235, 251, 253, 255], "reducelronplateau": [122, 141, 142], "val_accuraci": [122, 126, 127, 128, 132, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 240, 245, 251, 253], "val_": 122, "save_best_onli": 122, "overwritten": 122, "save_weights_onli": 122, "save_weight": 122, "decis": 122, "maxim": [122, 136, 138, 250], "minim": [122, 136, 138, 247, 250], "val_acc": 122, "save_freq": 122, "steps_per_execut": 122, "criteria": [122, 249], "nth": 122, "reliabl": [122, 253, 259], "checkpointopt": 122, "saved_model": 122, "saveopt": 122, "modelcheckpoint": [122, 127, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 251, 253], "conjunct": [122, 248], "state": [122, 249, 253], "qualifi": 122, "restore_best_weight": [122, 138], "restor": 122, "stop_train": 122, "mark": [122, 236], "earli": 122, "earlystop": [122, 126, 141, 142, 152], "subject": [122, 236], "awar": 122, "builtin": 122, "allow_custom_op": 122, "experimental_new_convert": [122, 138], "mlir": 122, "toco": 122, "experimental_new_quant": [122, 138], "experimental_enable_resource_vari": 122, "resourc": [122, 234, 241, 242, 249, 257], "from_saved_model": [122, 258], "generate_unquant": 122, "tflite_builtin": 122, "checkpoints_dir": 122, "get_checkpoint_path": 122, "weights_dir": 122, "contian": 122, "weights_file_format": 122, "get_weights_path": 122, "train_kwarg": 122, "print_not_found_err": 123, "specificaton": 123, "for_utest": 123, "model_typ": [123, 136, 138, 158], "IF": [123, 223, 250, 256], "return_tflite_path": 123, "archive_file_ext": 123, "backend": [124, 136, 172, 205, 206, 207, 209, 252, 258, 259], "wandb_is_initi": 124, "wandb": [124, 147, 248], "wandb_is_dis": 124, "wandb_init_kwarg": 124, "init": 124, "job_typ": 124, "wandb_session_id": 124, "never": [124, 218, 251, 253], "wandb_config": 124, "hyperparamet": 124, "analyz": [124, 235, 253, 257], "wandb_callback": 124, "wandbcallback": 124, "wandb_model_checkpoint_callback": 124, "period": [124, 220, 233, 249], "wandbmodelcheckpoint": 124, "wandb_sav": [124, 248], "glob_str": 124, "base_path": 124, "unix": 124, "noop": 124, "wandb_log": [124, 248], "commit": 124, "serializ": 124, "data_typ": [124, 258], "increment": [124, 127, 134, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 251, 253, 259], "global": [124, 125, 127, 134, 140, 143, 144, 146, 147, 224, 254], "persist": [124, 188, 242], "earlier": 124, "depthwiseseparableconv2d_arm": [125, 156], "num_class": [125, 129, 130, 136, 154, 247], "l2": [125, 132, 142, 145], "1711": [125, 156], "07128": [125, 156], "mcu": [125, 156, 253, 254], "platform_ml_model": [125, 152, 153, 154, 156, 157], "eembc": [125, 152, 153, 154, 156, 157], "kws10_arm_dsconv": [125, 156], "dsconv_arm_eembc": 125, "fullyconnectedautoencod": [125, 153], "dense_unit": 125, "latent_unit": 125, "dcase": [125, 153], "commun": [125, 153, 236, 249, 252, 254], "challenge2020": [125, 153], "task": [125, 141, 153, 160, 206, 247, 249, 251, 253, 255, 257], "unsupervis": [125, 153], "anomal": [125, 153], "kawagu": [125, 153], "dcase2020_task2_baselin": [125, 153], "toyadmos_fc_a": [125, 153], "toyadmos_autoencoder_eembc": 125, "mobilenetv1": [125, 155, 157], "num_filt": 125, "slim": [125, 157], "net": [125, 157], "mobilenet_v1": [125, 157], "person_detect": [125, 157], "mobilenet_v1_eembc": 125, "mobilenetv2": [125, 134, 139, 141, 148, 255, 257], "alpha": [125, 134, 141, 143, 146, 148, 255, 257], "include_top": [125, 134, 148, 255], "classifier_activ": 125, "last_block_filt": [125, 141, 148, 255, 257], "invert": 125, "residu": 125, "linear": [125, 173], "imagenet": 125, "kind": 125, "mobilenet_v2": 125, "preprocess_input": 125, "resolut": [125, 253, 254, 257], "224": [125, 138, 142, 151], "exactli": 125, "proportion": 125, "4d": 125, "convolut": [125, 140, 142, 144, 145, 147, 149, 176, 177, 179, 180, 200, 201, 235, 250, 252, 253, 254, 255, 257], "avg": 125, "unless": 125, "logit": 125, "1280": [125, 257], "1024": 125, "hardar": 125, "backward": [125, 258], "pretrain": 125, "resnet10v1": [125, 154], "1512": [125, 154], "03385": [125, 154], "resnet": [125, 154], "cifar10_resnetv1": [125, 154], "resnet_v1_eembc": 125, "block_depth": 125, "channel_increas": 125, "neural": [125, 136, 138, 140, 142, 144, 145, 147, 149, 250, 252, 253, 254, 255, 259], "depthwis": [125, 140, 144, 147, 179, 180, 252, 253, 254], "treat": [125, 144, 147, 253, 254], "timeseri": [125, 144, 147, 253, 254], "concret": 125, "explicitli": 125, "2010": 125, "09960": 125, "stridedibb": [125, 254], "ibb": [125, 254], "multitempor": 125, "nonzero": 125, "speech_command": [126, 127, 141, 142, 143, 145, 146, 148, 152, 156, 257], "physic": [126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 249, 257], "depthwise_conv_2d": [126, 138, 140, 141, 144, 147, 148, 156, 157, 178, 240, 244, 253, 254, 257], "59x49x1": [126, 141, 148, 257], "30x25x8": [126, 141, 148, 257], "2x2": [126, 131, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 154, 156, 157, 238, 240, 241, 242, 244, 251, 253, 254, 257, 258], "7x7x8": 126, "conv_2d": [126, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 156, 157, 175, 238, 240, 241, 242, 244, 251, 253, 254, 257, 258], "14x12x24": 126, "3x3x8": [126, 138, 141, 142, 148, 157], "24": [126, 132, 133, 136, 140, 141, 143, 144, 146, 147, 148, 152, 156, 157, 238, 240, 241, 242, 244, 245, 253, 254, 257, 258], "max_pool_2d": [126, 131, 132, 142, 143, 145, 146, 149, 151, 191, 251, 258], "7x6x24": 126, "5x4x20": 126, "1x1": [126, 131, 132, 133, 136, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 154, 156, 157, 238, 240, 241, 242, 244, 251, 253, 254, 257, 258], "3x3x24": [126, 133, 240, 242], "2x2x20": 126, "builtinoptionstyp": [126, 128, 131, 132, 133, 136, 141, 142, 148, 149, 151, 152, 153, 154, 156, 157, 251, 257], "fully_connect": [126, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 183, 238, 240, 241, 242, 244, 251, 253, 254, 257], "671": 126, "184": [126, 257, 259], "357": [126, 253], "b8d28debb3af3495c6d8d2a67eedfa22": 126, "2022": [126, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 145, 146, 148, 149, 151, 152, 153, 154, 156, 157, 240, 241, 244, 245, 251, 258], "03t22": 126, "08": [126, 128, 140, 144, 240, 241, 242, 244, 245, 258], "361z": 126, "12052": 126, "165": [126, 127, 140, 157, 257, 258], "49": [126, 140, 141, 143, 144, 147, 148, 238, 251, 253, 254, 257, 258], "3999": [126, 141, 142, 148, 257], "02500000037252903": [126, 132, 140, 141, 143, 144, 146, 147, 148, 152, 253, 257], "05999999865889549": [126, 132, 140, 141, 143, 144, 146, 147, 148, 152, 253, 257], "029999999329447746": [126, 141, 143, 146, 148, 257], "949999988079071": [126, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 253, 257], "512": [126, 128, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 156, 157, 240, 253, 257], "0kb": [126, 133, 141], "1x59x49x1": [126, 141, 148, 257], "1x6": [126, 143, 146], "0k": [126, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 238, 251, 253, 254, 257, 258, 259], "3k": [126, 128, 133, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 152, 153, 154, 157, 238, 241, 251, 253, 254, 255, 257, 258, 259], "4m": [126, 128, 133, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 154, 157, 160, 230, 238, 251, 253, 254, 257, 258], "2k": [126, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 156, 157, 238, 241, 251, 253, 254, 257, 258], "738": [126, 145, 148], "353": 126, "1k": [126, 128, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 238, 241, 251, 253, 254, 257, 258], "37": [126, 131, 140, 141, 144, 147, 148, 156, 253, 254, 257, 258], "78": [126, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 238, 241, 253, 254, 258], "0m": [126, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 238, 241, 251, 253, 254, 257, 258], "2m": [126, 128, 133, 140, 141, 142, 143, 144, 147, 148, 149, 152, 153, 154, 156, 157, 238, 241, 251, 253, 254, 257, 258], "113": 126, "1m": [126, 138, 140, 141, 143, 144, 145, 146, 148, 149, 151, 152, 153, 154, 157, 238, 241, 251, 252, 253, 254, 257, 258], "55": [126, 136, 138, 140, 141, 144, 147, 148, 151, 152, 153, 251, 253, 254, 257, 258], "82": [126, 132, 141, 144, 147, 148, 151, 157, 238, 251, 253, 254], "606": 126, "294": [126, 157], "433": 126, "284": 126, "7m": [126, 133, 138, 141, 142, 143, 146, 148, 149, 154, 156, 157, 238, 251, 253, 257, 258], "1x7x7x8": 126, "1x30x25x8": [126, 141, 148, 257], "592": 126, "7k": [126, 128, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 156, 157, 238, 241, 251, 253, 254, 257, 258], "290": 126, "233": [126, 257], "5k": [126, 128, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 156, 157, 238, 241, 251, 253, 254, 257, 258], "24x3x3x8": 126, "1x14x12x24": 126, "8k": [126, 128, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 154, 156, 157, 238, 241, 251, 253, 254, 257, 258, 259], "270": [126, 141, 144, 147, 148, 152, 154, 238, 253, 254, 257], "0u": [126, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 238, 241, 251, 253, 254, 257, 258], "1x7x6x24": 126, "174": 126, "86": [126, 141, 144, 147, 148, 154, 251, 253, 254, 257, 258], "4k": [126, 127, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 156, 157, 238, 251, 253, 254, 257, 258], "67": [126, 141, 142, 144, 147, 148, 253, 254, 257], "930": [126, 140, 253], "20x3x3x24": 126, "1x5x4x20": 126, "320": [126, 152, 156, 257], "380": [126, 144, 152, 253], "240": [126, 128, 138, 140, 141, 143, 144, 145, 146, 147, 148, 154, 240, 245, 253, 254, 257], "1x2x2x20": 126, "866": 126, "1x80": [126, 143, 146], "966": 126, "480": [126, 140, 143, 144, 146, 147, 253, 254, 257], "772": 126, "6x80": 126, "softmaxopt": [126, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 156, 157, 238, 240, 241, 242, 244, 253, 254, 258], "batchnorm": [126, 127, 132, 133, 136, 138, 142, 143, 145, 146, 149, 152, 251, 253], "maxpooling2d": [126, 127, 129, 130, 131, 142, 143, 145, 146, 149, 247, 251], "discover": [126, 128, 131, 132, 133, 136, 138, 141, 142, 145, 148, 149, 151, 152, 153, 154, 156, 157, 251], "practic": [126, 152, 207, 259], "45": [126, 140, 141, 142, 143, 144, 146, 147, 148, 151, 238, 250, 253, 254, 257, 258], "4000": [126, 127, 141, 142, 148, 152, 244, 257], "03": [126, 141, 143, 144, 146, 147, 148, 254, 257], "pool_siz": [126, 129, 130, 131, 132, 133, 136, 138, 142, 143, 146, 149, 191, 247, 251], "get_best_metr": [126, 163], "tflite_path": [126, 167, 186, 190, 238, 239, 241, 242], "h5_path": [126, 138, 143, 146, 250], "volume_gain": [126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 244, 253], "verbose_model_output_log": [126, 127, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 244, 253], "get_logg": [126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 172, 222, 247], "train_result": [126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 247], "tflite_eval_result": [126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 247], "profiling_result": [126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 167, 238, 241, 247], "audioment": [127, 140, 143, 144, 146, 147, 252, 254], "tf_dataset": [127, 134, 140, 143, 144, 146, 147, 253], "tf_dataset_util": [127, 134, 140, 143, 144, 146, 147, 249, 252], "image_util": [127, 134, 140, 143, 144, 146, 147], "install_pip_packag": [127, 140, 143, 144, 146, 147, 225], "kerascallback": [127, 129, 130, 134, 143, 146, 247], "terminateonnan": [127, 129, 130, 134, 140, 143, 144, 146, 147, 247, 253], "post_training_integer_qu": [127, 129, 130, 134, 247], "convert_using_integ": [127, 129, 130, 134, 247], "only_quant": [127, 129, 130, 134, 247], "004": [127, 140, 142, 144, 147, 244, 253], "uncom": [127, 134, 140, 143, 144, 146, 147, 252], "data_dump_dir": [127, 134, 140, 143, 144, 146, 147, 252], "dataset_dump": [127, 134, 140, 143, 144, 146, 147, 252], "audio_augmentation_pipelin": [127, 140, 143, 144, 146, 147], "batch_length": [127, 134, 140, 143, 144, 146, 147, 254], "y_shape": [127, 134], "y_batch": [127, 134], "audio_path": [127, 140, 143, 144, 146, 147, 254], "enumer": [127, 129, 130, 131, 133, 134, 136, 138, 140, 141, 143, 144, 145, 146, 147, 149, 238, 241, 247, 254, 258], "new_se": [127, 134], "stateless_split": [127, 134], "num": [127, 134, 257], "np_seed": [127, 134], "adjusted_sampl": 127, "audio_augment": [127, 140, 143, 144, 146, 147, 254], "compos": [127, 140, 143, 144, 146, 147, 254], "90": [127, 128, 134, 140, 141, 142, 143, 144, 146, 147, 148, 156, 237, 253, 254, 257, 258], "pitchshift": [127, 143, 146], "min_semiton": [127, 143, 146], "max_semiton": [127, 143, 146], "timestretch": [127, 143, 146], "min_rat": [127, 143, 146], "max_rat": [127, 143, 146], "min_gain_in_db": [127, 140, 143, 144, 146, 147, 254], "max_gain_in_db": [127, 140, 143, 144, 146, 147, 254], "airabsorpt": 127, "min_temperatur": 127, "max_temperatur": 127, "min_humid": 127, "max_humid": 127, "min_dist": 127, "max_dist": 127, "addbackgroundnois": [127, 140, 143, 144, 146, 147, 254], "min_snr_in_db": [127, 140, 143, 144, 146, 147, 254], "max_snr_in_db": [127, 140, 143, 144, 146, 147, 254], "noise_rm": [127, 140, 143, 144, 146, 147, 254], "lru_cache_s": [127, 140, 143, 144, 146, 147, 254], "expand_dim": [127, 129, 130, 132, 136, 138, 140, 141, 143, 144, 145, 146, 147, 247, 254, 258], "audio_dump_path": [127, 140, 143, 144, 146, 147], "image_dump_path": [127, 140, 143, 144, 146, 147], "organ": [127, 134, 140, 143, 144, 146, 147, 248, 258], "mydataset": [127, 134, 140, 143, 144, 146, 147, 249], "super": [127, 128, 134, 136, 140, 143, 144, 146, 147, 151], "train_dataset": [127, 130, 134, 140, 143, 144, 146, 147], "validation_dataset": [127, 130, 134, 140, 143, 144, 146, 147], "_load_subset": [127, 134], "shut": [127, 134, 140, 143, 144, 146, 147, 249], "features_d": [127, 130, 134, 140, 143, 144, 146, 147, 249, 252], "labels_d": [127, 130, 134, 140, 143, 144, 146, 147], "entropi": [127, 130, 134, 140, 143, 144, 146, 147], "2x": [127, 252], "seed_count": [127, 134, 140, 143, 144, 146, 147], "spread": [127, 134, 140, 143, 144, 146, 147, 249], "per_job_batch_s": [127, 134, 140, 143, 144, 146, 147], "drop_remaind": [127, 134, 140, 143, 144, 146, 147], "65": [127, 134, 138, 140, 141, 143, 144, 146, 147, 148, 149, 251, 252, 253, 254, 257, 258], "unbatch": [127, 130, 134, 140, 143, 144, 146, 147], "fetch": [127, 134, 140, 143, 144, 146, 147], "prefetch": [127, 134, 140, 143, 144, 146, 147], "perfect": [127, 134, 140, 143, 144, 146, 147], "reshuffle_each_iter": [127, 134, 140, 143, 144, 146, 147], "coupl": [127, 134, 140, 143, 144, 146, 147, 249], "ecg5000": 128, "electrocardiogram": 128, "140": [128, 151, 257], "simplifi": [128, 235, 247], "rhythm": 128, "interest": [128, 249, 253], "identifi": [128, 236, 249, 250, 251], "compars": [128, 138, 158, 225], "logist": [128, 131, 136], "564": 128, "ecg": 128, "66c8e81181a47dfcc2f0ff53a55aef49": 128, "04": [128, 133, 251], "28t19": 128, "38": [128, 140, 141, 144, 147, 148, 153, 253, 254, 257], "662z": 128, "2028": 128, "8kb": [128, 131, 132, 253], "1x140": 128, "9k": [128, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 156, 157, 238, 241, 251, 253, 254, 257, 258], "131": [128, 149, 154, 251, 258], "89": [128, 144, 147, 253, 254, 257], "9m": [128, 138, 140, 143, 145, 146, 147, 149, 153, 154, 157, 238, 241, 251, 253, 257, 258], "5m": [128, 133, 138, 140, 141, 143, 144, 146, 147, 148, 149, 154, 156, 157, 238, 251, 253, 254, 257, 258], "529": 128, "560": [128, 146], "120": [128, 140, 141, 144, 147, 148, 149, 151, 154, 156, 253, 254, 257], "32x140": 128, "1x32": [128, 140, 149, 251], "878": 128, "16x32": 128, "1x16": [128, 138, 151], "280": [128, 141, 144, 146, 147, 148, 153, 254], "254": [128, 251], "8x16": 128, "1x8": [128, 141, 153, 257], "304": [128, 145], "302": [128, 257], "16x8": 128, "974": 128, "32x16": 128, "6k": [128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 238, 241, 251, 253, 254, 257, 258, 259], "140x32": 128, "210": [128, 141, 144, 147, 148, 151, 156, 254, 257], "sklearn": 128, "model_select": 128, "train_test_split": 128, "create_user_dir": [128, 140, 144, 147, 223], "archive_download": [128, 132, 134, 140, 143, 145, 146, 153, 156, 157, 249, 258], "dataset_path": 128, "ecg500": 128, "genfromtxt": 128, "train_data": [128, 151], "test_data": [128, 151], "train_label": 128, "test_label": 128, "test_siz": 128, "random_st": 128, "min_val": 128, "reduce_min": 128, "max_val": 128, "reduce_max": 128, "train_labels_bool": 128, "test_labels_bool": 128, "normal_train_data": 128, "normal_test_data": 128, "anomalous_train_data": 128, "anomalous_test_data": 128, "_normal_train_count": 128, "_normal_test_count": 128, "_abnormal_train_count": 128, "_abnormal_test_count": 128, "sample_count": 128, "whole": 128, "mae": 128, "sigmoid": [128, 131, 136, 138, 173], "mnist": [129, 130, 136, 247], "convnet": [129, 247, 251], "truncat": [129, 130, 206, 207, 208, 247, 259], "matric": [129, 247], "to_categor": [129, 154, 247], "step_per_epoch": [129, 130, 247], "my_representative_dataset_gener": [129, 130, 136, 138, 247], "input_valu": [129, 247], "from_tensor_slic": [129, 130, 140, 247], "sync": [129, 130, 233, 247], "my_boolean": [129, 130, 247], "my_str": [129, 130, 242, 247], "my_byt": [129, 130, 242, 247], "my_float_list": [129, 130, 247], "fashion": 130, "fashion_mnist": 130, "n_validation_sampl": 130, "n_train_sampl": 130, "x_valid": 130, "y_valid": 130, "_create_dataset_subset": 130, "evaluation_dataset": 130, "one_hot": 130, "my_tf_training_dataset": 130, "my_tf_validation_dataset": 130, "resnetv1": [131, 154, 155], "cifar10": [131, 154, 155, 258], "binary_crossentropi": 131, "bottom": [131, 249, 250, 257], "datagen_dump": [131, 133, 138], "32x32x3": [131, 154, 258], "30x30x32": 131, "3x3x3": [131, 154, 157], "15x15x32": 131, "13x13x32": 131, "3x3x32": [131, 154, 157, 257], "6x6x32": 131, "4x4x64": [131, 257, 258], "2x2x64": 131, "646": 131, "363": 131, "de33dd53e0afb91a365fd2fff0e4c461": 131, "11t17": 131, "986z": 131, "38740": 131, "53": [131, 140, 141, 144, 147, 148, 156, 157, 240, 253, 254, 257, 258], "functool": [131, 154], "cifar10_x_train": 131, "cifar10_y_train": 131, "cifar10_x_test": 131, "cifar10_y_test": 131, "cats_and_dogs_x_train": 131, "cats_and_dogs_y_train": 131, "cats_and_dogs_x_test": 131, "cats_and_dogs_y_test": 131, "n_cat": 131, "n_dog": 131, "elif": [131, 138, 140, 141, 143, 144, 146, 147, 242], "asarrai": [131, 138], "partial": [131, 140, 141, 143, 144, 146, 154, 252, 253], "typer": [131, 133, 136, 138, 149], "datagen_dump_custom_command": [131, 133, 138], "break": [131, 133, 136, 138, 140, 143, 144, 146, 149, 250, 251, 258], "conv1d": [132, 135], "3600x1": 132, "1x3600x1": 132, "52": [132, 140, 141, 144, 147, 148, 152, 157, 238, 253, 254, 257, 258], "1x900x16": 132, "4x1": 132, "1x7x1": 132, "900x16": 132, "900x1x16": 132, "450x1x16": 132, "1x2": [132, 140, 144, 157, 253], "450x16": 132, "1x450x16": 132, "1x450x32": 132, "1x5x16": 132, "450x32": 132, "450x1x32": 132, "225x1x32": 132, "225x32": 132, "1x225x32": 132, "13": [132, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 238, 240, 241, 245, 251, 253, 254, 257, 258, 259], "1x225x64": 132, "1x3x32": 132, "225x64": 132, "225x1x64": 132, "112x1x64": 132, "112x64": 132, "1x112x64": 132, "1x112x128": 132, "1x3x64": 132, "112x128": 132, "112x1x128": 132, "56x1x128": 132, "7168": 132, "416": 132, "034": 132, "nsr": 132, "apb": 132, "afib": 132, "pvc": 132, "ba4d5f7fb808e7566d44a63b4335516": 132, "04t22": 132, "345z": 132, "33920": 132, "05000000074505806": [132, 142, 145, 152], "maxpooling1d": 132, "download_verify_extract": [132, 134, 140, 143, 145, 146, 153, 156, 157, 203, 249, 258], "initial_learning_r": [132, 141, 142, 148, 255], "001": [132, 134, 140, 141, 142, 143, 144, 145, 146, 147, 149, 156, 157, 251, 253, 254, 257], "decay_per_epoch": [132, 141, 142, 148, 255], "99": [132, 143, 144, 146, 147, 154, 237, 251, 253, 254, 258], "lrate": [132, 141, 142, 148, 156, 157, 255], "ekg_waveform": 132, "8221333c8ecef29843d05b6385a4f47074820480": 132, "file_hash": [132, 134, 140, 143, 145, 146, 153, 156, 157, 203, 258], "show_progress": [132, 134, 140, 143, 145, 146, 153, 156, 157, 203, 249, 258], "remove_root_dir": [132, 134, 140, 143, 145, 146, 153, 156, 157, 202, 203, 249], "post_processing_callback": 132, "weight_decai": [132, 142, 145], "kernel_regular": [132, 142], "48x48x24": [133, 240, 242], "3x3x1": [133, 141, 142, 143, 145, 146, 148, 149, 240, 242, 251, 257], "average_pool_2d": [133, 136, 138, 140, 144, 147, 154, 156, 157, 191, 238, 240, 241, 242, 244, 253, 254], "24x24x24": [133, 240, 242], "11x11x16": [133, 240, 242], "9x9x24": [133, 240, 242], "3x3x16": [133, 142, 149, 154, 157, 240, 242, 251, 257], "4x4x24": [133, 240, 242], "384": [133, 141, 148, 240, 242, 244, 245, 253, 255, 257], "197": [133, 240, 245, 253, 257], "561": [133, 240, 253, 257], "31bdc72ea90bfbcfcbe0fccaed749686": 133, "28t17": 133, "33": [133, 138, 140, 141, 144, 145, 147, 148, 153, 157, 251, 253, 254, 257], "474z": 133, "71408": 133, "1x96x96x1": [133, 238, 241, 242], "1x3": [133, 143, 144, 151, 238, 241, 242, 253], "85": [133, 141, 142, 144, 147, 148, 152, 157, 238, 253, 254, 258], "970": 133, "87": [133, 144, 146, 147, 251, 253, 254, 258], "3m": [133, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 157, 238, 241, 251, 253, 254, 257, 258], "39": [133, 140, 141, 144, 145, 147, 148, 251, 253, 254, 257, 258], "36": [133, 140, 141, 143, 144, 146, 147, 148, 151, 156, 238, 244, 252, 253, 254, 257, 258], "314": 133, "497": [133, 157, 238, 241], "902": [133, 253], "24x3x3x1": [133, 238, 241, 242], "1x48x48x24": [133, 238, 241, 242], "69": [133, 141, 144, 147, 148, 238, 241, 253, 254, 257], "48": [133, 138, 140, 141, 143, 144, 147, 148, 153, 157, 238, 240, 245, 252, 253, 254, 257], "569": 133, "6m": [133, 138, 140, 141, 143, 144, 147, 148, 153, 154, 157, 238, 241, 251, 253, 254, 257, 258], "1x24x24x24": [133, 238, 241, 242], "842": [133, 238, 241], "418": [133, 238, 241], "326": [133, 258], "16x3x3x24": [133, 238, 241, 242], "1x11x11x16": [133, 238, 241, 242], "565": [133, 238, 241], "279": [133, 238, 241], "217": [133, 251], "8m": [133, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 154, 157, 253, 254, 257, 258], "24x3x3x16": [133, 238, 241, 242], "1x9x9x24": [133, 238, 241, 242], "540": [133, 140], "1x4x4x24": [133, 238, 241, 242], "1x384": [133, 141, 148, 238, 241, 242, 257], "3x384": [133, 238, 241, 242], "averagepooling2d": [133, 136, 138], "non_person": [134, 157], "image_augment": 134, "image_std": 134, "enabled_numpy_behavior": 134, "image_path": [134, 160, 242], "smart_res": 134, "stateless_random_bright": 134, "max_delta": 134, "stateless_random_contrast": 134, "stateless_random_hu": 134, "stateless_random_satur": 134, "stateless_random_flip_up_down": 134, "stateless_random_flip_left_right": 134, "random_channel_shift": 134, "channel_axi": 134, "random_shear": 134, "row_axi": 134, "col_axi": 134, "random_zoom": 134, "random_shift": 134, "random_rot": 134, "per_image_standard": 134, "machine_learn": [134, 157], "benchmark": [134, 137, 153, 154, 155, 156, 157, 235, 240, 244, 245], "vw_coco2014_96": [134, 157], "mscoco14": [134, 157], "a5a465082d3f396407f8b5abaf824dd5b28439c4": [134, 157], "siames": [135, 136, 138], "vision": [136, 143, 146], "sister": [136, 138, 250], "supervis": [136, 138, 250], "distanc": [136, 138, 250, 251, 253], "segment": [136, 138, 250], "28x28x1": 136, "24x24x4": 136, "5x5x1": 136, "tanh": [136, 173], "12x12x4": 136, "8x8x16": 136, "5x5x4": 136, "4x4x16": [136, 141, 148], "concaten": 136, "26": [136, 140, 141, 143, 144, 145, 146, 147, 148, 157, 244, 253, 254, 257, 258], "27": [136, 140, 141, 144, 145, 147, 148, 153, 156, 157, 238, 251, 253, 254, 257], "327": [136, 141, 148], "440": [136, 140, 143], "676": 136, "823": [136, 258], "400f59a4a68872982f23f08a9de3fe92": 136, "04t18": [136, 141], "645z": 136, "11368": 136, "4kb": [136, 143, 240, 253], "load_tflite_or_keras_model": [136, 138], "x_train_val": 136, "y_train_val": 136, "train_val": 136, "30000": [136, 140], "del": 136, "pairs_train": 136, "labels_train": 136, "make_pair": 136, "x_train_1": 136, "x_train_2": 136, "pairs_val": 136, "labels_v": 136, "x_val_1": 136, "x_val_2": 136, "pairs_test": 136, "labels_test": 136, "x_test_1": 136, "20000": [136, 140, 207, 259], "x_test_2": 136, "pairs_of_sampl": 136, "2len": 136, "n_features_dim": 136, "digit_indic": 136, "idx1": 136, "x1": [136, 138], "label1": 136, "idx2": 136, "choic": [136, 140, 141, 143, 144, 146, 249, 253], "x2": 136, "label2": 136, "randint": [136, 141], "contrastiveloss": [136, 138], "margin": [136, 138, 250], "true_valu": [136, 250], "squar": [136, 138, 250], "dissimilar": [136, 250], "y_true": 136, "y_pred": [136, 138, 158, 250, 258], "square_pr": 136, "math": [136, 140, 144, 147], "margin_squar": 136, "reduce_mean": 136, "get_config": [136, 257], "t1": 136, "t2": 136, "euclidean": [136, 138, 250], "sqrt": [136, 138], "sum": [136, 138, 160, 207, 250, 259], "euclidean_dist": [136, 138], "vect": 136, "sum_squar": 136, "reduce_sum": 136, "embedding_network": [136, 138, 250], "input_1": [136, 138, 253], "input_2": [136, 138], "mention": [136, 138], "tower": [136, 138, 250], "tower_1": [136, 138], "tower_2": [136, 138], "technic": 136, "squared_differ": 136, "emul": 136, "merge_lay": [136, 138], "normal_lay": [136, 138], "conc": 136, "dense_1": [136, 251], "output_lay": [136, 138], "my_model_evalu": [136, 138, 250], "eval_dir": [136, 138, 250], "eval_loss": 136, "eval_accuraci": 136, "tflite_interpret": 136, "input_tensor": [136, 175, 178, 181, 183, 191, 195, 196, 199, 258], "get_input_detail": 136, "output_tensor": [136, 174, 175, 178, 181, 183, 191, 195, 196, 199], "get_output_detail": 136, "new_input_shap": 136, "new_output_shap": 136, "resize_tensor_input": 136, "allocate_tensor": 136, "n_correct": 136, "x1_batch": 136, "x2_batch": 136, "set_tensor": 136, "get_tensor": [136, 188], "pred": [136, 138, 258], "rmsprop": 136, "save_and_seri": [136, 138], "registering_the_custom_object": [136, 138], "x_1": 136, "x_2": 136, "retval": [136, 143, 146, 151], "to_show": 136, "num_col": 136, "exce": [136, 160, 251], "matplotlib": [136, 138, 251], "pyplot": [136, 138, 251], "plt": [136, 138, 250, 251], "num_row": 136, "decrement": [136, 218], "ax": [136, 138, 251], "subplot": [136, 251], "figsiz": [136, 138, 251], "imshow": [136, 138, 251], "cmap": [136, 138, 251], "set_axis_off": 136, "set_titl": 136, "5f": 136, "tight_layout": [136, 138], "rect": 136, "w_pad": 136, "visualize_custom_command": 136, "col": 136, "180x180x1": 138, "88x88x8": 138, "5x5x8": 138, "44x44x8": 138, "42x42x16": 138, "reduceropt": [138, 141, 148], "581": [138, 258], "330": [138, 141, 145, 148, 153, 251, 257], "c5b17e1deffd907e823bfadf519b2d5d": 138, "24t22": 138, "34": [138, 140, 141, 142, 144, 147, 148, 149, 240, 241, 242, 253, 254, 257, 258], "383z": 138, "95964": 138, "18000000715255737": 138, "sharpen_filt": [138, 250], "\u00fe\u00fd\u00fd\u00fd\u00fe\u00fd\u00fd\u00fd\u00fd\u00fd\u00fd\u00fdd\u00fd\u00fd\u00fd\u00fd\u00fd\u00fd\u00fd\u00fe\u00fd\u00fd\u00fd\u00fe": 138, "sharpen_filter_width": [138, 250], "sharpen_filter_height": [138, 250], "sharpen_gain": [138, 250], "balance_threshold_max": [138, 250], "balance_threshold_min": [138, 250], "border": [138, 189, 250], "verify_imin": [138, 250], "verify_imax": [138, 250], "verify_full_threshold": [138, 250], "verify_center_threshold": [138, 250], "5kb": [138, 253], "1x180x180x1": 138, "143": 138, "57": [138, 140, 141, 144, 147, 148, 154, 156, 238, 253, 254, 257], "119": [138, 142, 238, 253, 257], "62": [138, 141, 144, 145, 147, 148, 151, 157, 237, 253, 254, 257], "29": [138, 140, 141, 143, 144, 145, 146, 147, 148, 156, 157, 253, 254, 257, 258], "31": [138, 140, 141, 144, 147, 148, 151, 157, 230, 253, 254, 257], "1x5x5x8": 138, "1x88x88x8": 138, "77": [138, 144, 147, 149, 153, 237, 253, 254, 258], "54": [138, 140, 141, 144, 147, 148, 244, 253, 254, 257], "1x44x44x8": 138, "16x3x3x8": [138, 142], "1x42x42x16": 138, "528": [138, 240, 245], "496": 138, "16x16": 138, "tqdm": [138, 207, 259], "img_to_arrai": [138, 242], "load_img": [138, 242], "fingerprint_signature_generator_dataset": [138, 250], "fingerprintsignaturegeneratordataset": 138, "build_model_tow": 138, "globalaveragepooling2d": 138, "nomatch_multipli": 138, "180": [138, 141, 144, 148, 151, 156, 253, 254, 257], "crop_and_convert_from_uint8_to_int8": 138, "th": [138, 251, 253], "h_offset": 138, "w_offset": 138, "nan_to_num": 138, "0xff": 138, "dataset_archive_url": [138, 250], "dataset_hash": 138, "dataset_path_or_url": 138, "g_filter_s": 138, "approxim": [138, 144, 147, 251, 252, 255], "radiu": 138, "g_filter_sigma": 138, "threshold_vs_accuraci": [138, 250], "preprocess_param": [138, 250], "tobyt": [138, 250], "my_keras_model_sav": [138, 250], "unpack_x_y_sample_weight": 138, "batch_x0": 138, "batch_x1": 138, "x0": 138, "saver": 138, "siamese_network_h5_path": [138, 250], "runtimeerror": [138, 140, 143, 144, 146, 147, 226, 250, 254], "generate_predict": [138, 250], "_compare_signatur": 138, "s2": 138, "di": [138, 250], "y_di": [138, 250], "y_label": [138, 250], "desc": [138, 207, 259], "zeropoint": [138, 188, 194, 242], "look": [138, 143, 146, 249, 250, 251, 254], "tfliitemodel": 138, "y_dtype": [138, 188, 258], "progbar": 138, "s0": 138, "batch_s0": 138, "batch_s1": 138, "collect_sampl": 138, "1e12": 138, "match_sampl": 138, "nomatch_sampl": 138, "all_x": 138, "all_i": 138, "generate_plot": [138, 158, 250, 258], "match_di": [138, 250], "nomatch_di": [138, 250], "match_dis_x": [138, 250], "nomatch_dis_x": [138, 250], "arang": [138, 250], "match_acc": [138, 250], "nomatch_acc": [138, 250], "thre": [138, 250], "valid_count": [138, 250], "ylim": [138, 250], "legend": [138, 250], "loc": [138, 250], "xlabel": [138, 250], "ylabel": [138, 250], "grid": [138, 250], "major": [138, 140, 144, 147, 225, 250, 251, 253, 254, 259], "output_path": [138, 188, 212, 250], "savefig": [138, 250], "eclidean_dist": [138, 250], "dump_dir": 138, "x_sampl": 138, "y_sampl": 138, "tflite_y_pr": 138, "h5_y_pr": 138, "nomatch": 138, "3f": 138, "add_subplot": 138, "preprocess_custom_command": 138, "compare_preprocess": 138, "preprocess_samples_en": 138, "unprocessed_dir": 138, "all_sampl": 138, "list_all_sampl": 138, "fn": [138, 140, 143, 144, 146, 147], "unprocessed_img": 138, "processed_img": 138, "preprocess_sampl": 138, "img_valid": 138, "verify_sampl": 138, "basenam": [138, 140, 143, 144, 146, 147, 203, 258], "previous_verify_msg": 138, "dropp": 138, "v2": [139, 249, 251, 253, 257, 258], "pac": [139, 145, 146, 147, 234], "man": [139, 145, 146, 147, 234], "tenet": [140, 144, 147, 252, 253, 254], "avoid": [140, 249, 254], "mlcommon": [140, 144, 147, 153, 154, 156, 157, 240, 244, 245, 252, 253, 254], "30m": [140, 141, 142, 144, 147, 148, 156, 253, 254], "10m": [140, 143, 144, 145, 146, 147, 253, 254], "118x1x108": 140, "118x1x32": 140, "3x1x108": 140, "118x1x96": 140, "1x1x32": [140, 154, 157, 257], "59x1x96": 140, "9x1x96": 140, "59x1x32": 140, "1x1x96": [140, 141, 148, 257], "30x1x96": 140, "30x1x32": 140, "15x1x96": 140, "15x1x32": 140, "41": [140, 141, 144, 147, 148, 157, 251, 253, 254, 257], "44": [140, 141, 143, 144, 145, 146, 147, 148, 251, 252, 253, 254, 257], "46": [140, 141, 142, 144, 147, 148, 151, 253, 254, 257], "47": [140, 141, 144, 147, 148, 251, 253, 254, 257], "1x15": 140, "562": 140, "247": 140, "keyword_spotting_alexa_v2": 140, "344": 140, "026c2f86bf499c3a1386c348888021e5": 140, "10t00": 140, "325z": 140, "4000000059604645": [140, 144, 147, 253], "800000011920929": [140, 143, 144, 145, 146, 147, 253], "216": [140, 147, 251], "900": [140, 143, 145, 151], "208": [140, 251], "1kb": [140, 244, 253], "1x118x1x108": 140, "207": [140, 157], "825": 140, "32x3x1x108": 140, "1x118x1x32": 140, "759": [140, 238], "362": 140, "307": [140, 257], "96x1x1x32": 140, "1x118x1x96": 140, "118": [140, 154], "91": [140, 143, 144, 146, 153, 250, 253, 258], "88": [140, 144, 147, 253, 254, 258], "1x9x1x96": 140, "1x59x1x96": 140, "181": [140, 147, 156], "32x1x1x96": [140, 257], "1x59x1x32": 140, "126": [140, 141, 148, 153, 257, 258], "690": [140, 144, 147, 253, 254], "32x1x1x32": [140, 157], "379": 140, "154": [140, 145, 147, 253, 254], "840": [140, 144, 154], "1x30x1x96": 140, "92": [140, 144, 147, 153, 250, 251, 253, 257], "74": [140, 141, 144, 145, 147, 148, 157, 253, 254, 257], "960": [140, 253, 257], "1x30x1x32": 140, "390": [140, 141, 142, 144, 147, 148, 149, 253, 254], "193": [140, 157], "810": [140, 141, 144, 147, 148, 254], "990": [140, 257], "420": [140, 143, 144, 146, 147, 157, 254, 257], "1x15x1x96": 140, "510": [140, 141, 148, 253, 257], "1x15x1x32": 140, "570": [140, 253, 257], "309": 140, "1x1x1x32": 140, "595": 140, "130": [140, 255], "123": [140, 144, 147, 153, 157, 254], "2x32": 140, "steppedlearnrateschedul": [140, 144, 147, 253], "trivial": [140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 247, 251, 253, 258, 259], "9999": [140, 144, 147, 253], "teacher": [140, 143, 146], "swap": [140, 144, 147, 253, 254], "time_s": [140, 144, 147, 253, 254], "feature_s": [140, 144, 147, 253, 254], "tenet12": [140, 144, 147, 253, 254], "learning_r": [140, 143, 144, 146, 147, 253, 254], "multiscaletemporalconvolut": [140, 144, 147, 253], "kws_stream": [140, 144, 147, 253], "002": [140, 144, 147, 253], "003": [140, 144, 147, 253], "005": [140, 144, 147, 253], "0005": [140, 144, 147, 148, 156, 157, 253, 255], "5000": [140, 144, 147, 253], "meta": [140, 143, 144, 145, 146, 147, 253], "unknown_class_id": [140, 141, 143, 144, 147, 254], "towardsdatasci": [140, 143, 144, 146, 147], "f1e54688e7df": [140, 143, 144, 146, 147], "unknown_class_multipli": [140, 143, 146], "forget": [140, 144, 147, 252], "audio_pipeline_with_augment": [140, 144, 147, 252, 253, 254], "path_batch": [140, 143, 144, 146, 147, 254], "label_batch": [140, 143, 144, 146, 147, 254], "unknown_samples_batch": 140, "x_shape": [140, 143, 144, 146, 147, 254], "x_batch": [140, 143, 144, 146, 147, 254], "warm": [140, 143, 144, 146, 147, 252, 253, 254], "padding_length_m": [140, 143, 144, 146, 147, 254], "padded_frontend_set": [140, 143, 144, 146, 147, 254], "unknown_sampl": [140, 143], "argmax": [140, 143, 144, 146, 147, 254], "rn": [140, 143, 144, 146, 147, 254], "use_cropped_sample_as_unknown": [140, 141, 143, 144, 146], "using_silence_as_unknown": [140, 143, 144, 146], "choice_index": [140, 143, 144, 146], "err": [140, 144, 147, 226, 238, 254], "padding_length": [140, 143, 144, 146, 147, 254], "padded_sample_length": [140, 143, 144, 146, 147, 254], "padded_sampl": [140, 143, 144, 146, 147, 254], "trimmed_sampl": [140, 143, 144, 146], "top_db": [140, 141, 143, 144, 146], "eventu": [140, 143, 144, 146, 251, 253], "trimmed_sample_length": [140, 143, 144, 146], "cropped_sample_perc": [140, 141, 143, 144, 146], "cropped_sample_length": [140, 141, 143, 144, 146], "min_absolute_rms_in_db": [140, 143, 144, 146, 147, 254], "max_absolute_rms_in_db": [140, 143, 144, 146, 147, 254], "ambient": [140, 143, 144, 146, 147, 253, 254], "snr": [140, 144, 147, 254], "louder": [140, 144, 147, 254], "addgaussiansnr": [140, 143, 144, 146, 147, 254], "cv2": [140, 143, 144, 146, 147], "utf": [140, 143, 144, 146, 147, 188, 254], "spectrogram_dump": [140, 143, 144, 146, 147], "transpos": [140, 143, 144, 146, 147, 200, 201, 258], "valid_sample_length": [140, 143, 144, 147], "valid_augmented_sampl": [140, 143, 144, 147], "jpg_data": [140, 143, 144, 146, 147], "applycolormap": [140, 143, 144, 146, 147], "colormap_hot": [140, 143, 144, 146, 147], "imwrit": [140, 143, 144, 146, 147], "all_unknown_sampl": 140, "load_subset": [140, 143, 144, 146, 147], "b6nd8xr7zzwmd6d": 140, "sl_synthetic_alexa": 140, "e657e91d6ea55639ce2e9a4dd8994c112fda2de0": 140, "_unknown": [140, 144, 147], "86wh4defrqj0n9r": 140, "sl_synthetic_alexa_unknown": 140, "2693e5fc72c52f199de2a69ed720644c2c363591": 140, "zwvztg39a340b5q": 140, "sl_synthetic_generic_unknown": 140, "6729b4763a506e427beb0909069219767f3d0d6f": 140, "mlcommons_keyword": [140, 144, 147], "mlcommons_voic": 140, "dst_path": [140, 143, 146, 202, 203], "makedir": [140, 143, 144, 146, 147, 258], "dirnam": [140, 143, 144, 146, 147, 258], "exist_ok": [140, 143, 144, 146, 147, 258], "add_unknown_sampl": [140, 144, 147], "unknown_samples_d": 140, "per_job_batch_multipli": [140, 143, 144, 147], "84": [140, 141, 143, 144, 147, 148, 149, 251, 252, 253, 254, 257], "72": [140, 141, 143, 144, 146, 147, 148, 151, 156, 249, 251, 252, 253, 254], "file_list": [140, 144, 147], "index_path": [140, 144, 147], "strip": [140, 144, 147, 259], "class_base_dir": [140, 144, 147], "walk": [140, 144, 147, 223], "followlink": [140, 144, 147, 223], "startswith": [140, 144, 147], "fname": [140, 144, 147], "endswith": [140, 144, 147, 251], "abs_path": [140, 144, 147], "join": [140, 141, 144, 145, 147, 206, 207, 242, 258, 259], "getsiz": [140, 144, 147], "rel_path": [140, 144, 147], "relpath": [140, 144, 147], "get_sample_group_id_from_path": [140, 144, 147], "get_mltk_logg": [140, 144, 147], "n_file": [140, 144, 147], "ceil": [140, 144, 147, 189], "other_subset_hash": [140, 144, 147], "othersid": [140, 144, 147], "this_subset_hash": [140, 144, 147], "side": [140, 144, 147, 158, 233, 251], "unknown_dir": 140, "mlcommons_keywords_dir": [140, 144, 147], "mlcommons_voice_dir": 140, "listdir": [140, 143, 144, 147, 242, 251], "isdir": [140, 144, 147, 251], "mp3": [140, 144, 147, 252], "c53b335a_nohash_1": [140, 144, 147], "c53b335a": [140, 144, 147], "tok": [140, 144, 147], "common_voice_en_20127845": [140, 144, 147], "20127845": [140, 144, 147], "common_voice_": [140, 144, 147], "azure_af": [140, 144, 147], "za": [140, 144, 147], "adrineur": [140, 144, 147], "aww": [140, 144, 147, 207, 259], "medium": [140, 144, 147, 207, 258, 259], "588b6ace": [140, 144, 147], "gcp_": [140, 144, 147], "azure_": [140, 144, 147], "aws_": [140, 144, 147], "baud_rat": [140, 252], "460800": [140, 252], "industri": [141, 255, 257], "20m": [141, 142, 143, 145, 146, 148, 156], "relu6": [141, 148, 173, 257], "1x1x8": [141, 148, 157, 257], "30x25x48": [141, 148, 257], "31x27x48": [141, 148, 257], "15x13x48": [141, 148, 257], "3x3x48": [141, 148, 257], "15x13x8": [141, 148], "1x1x48": [141, 148, 257], "17x15x48": [141, 148], "8x7x48": [141, 148], "8x7x8": [141, 148], "9x9x48": [141, 148], "4x4x48": [141, 148, 257], "4x4x96": [141, 148, 257], "1x1x16": [141, 148, 154, 157, 257], "3x3x96": [141, 148, 257], "5x5x96": [141, 148], "2x2x96": [141, 148], "2x2x24": [141, 148], "2x2x144": [141, 148], "1x1x24": [141, 148, 257], "144": [141, 142, 148, 153, 257], "3x3x144": [141, 148, 257], "58": [141, 144, 147, 148, 253, 254, 257], "1x1x144": [141, 148, 257], "59": [141, 144, 147, 148, 153, 253, 254, 257], "61": [141, 144, 147, 148, 253, 254, 257, 258], "63": [141, 144, 147, 148, 253, 254, 257], "66": [141, 143, 144, 146, 147, 148, 238, 251, 253, 254, 257], "2x2x48": [141, 148], "2x2x384": [141, 148], "68": [141, 143, 144, 146, 147, 148, 253, 254, 257], "737": [141, 253], "977": 141, "e7018a67a673713fe4935f20ca88b492": 141, "420z": 141, "105016": 141, "259": [141, 253], "258": [141, 258], "71": [141, 144, 147, 148, 238, 240, 241, 253, 254, 257, 258], "8x3x3x1": [141, 142, 148, 257], "189": [141, 148, 253, 257], "214": [141, 144, 148, 253], "1x3x3x8": [141, 148, 157, 257], "102": [141, 144, 148, 253, 257], "780": [141, 148], "8x1x1x8": [141, 148, 257], "300": [141, 144, 147, 148, 149, 153, 157, 251, 253, 257, 258, 259], "684": [141, 148, 152, 244, 257], "288": [141, 148, 253, 257, 258], "48x1x1x8": [141, 148, 257], "1x30x25x48": [141, 148, 257], "241": [141, 144, 147, 148, 149, 254, 257], "967": [141, 148, 257], "4x2": [141, 148, 257, 258], "1x31x27x48": [141, 148, 257], "padopt": [141, 148, 258], "196": [141, 148, 257], "157": [141, 142, 148], "282": [141, 148], "1x3x3x48": [141, 148, 257], "1x15x13x48": [141, 148, 257], "151": [141, 148, 237, 257], "870": [141, 144, 147, 148, 149, 251, 254], "8x1x1x48": [141, 148, 257], "1x15x13x8": [141, 148, 257], "177": [141, 148, 253, 257], "73": [141, 144, 147, 148, 253, 254, 257], "277": [141, 148, 250, 257], "1x17x15x48": [141, 148, 257], "1x8x7x48": [141, 148, 257], "1x8x7x8": [141, 148, 257], "81": [141, 144, 147, 148, 153, 238, 253, 254, 257, 258], "448": [141, 145, 148, 257], "1x9x9x48": [141, 148, 257], "1x4x4x48": [141, 148, 257], "16x1x1x48": [141, 148, 257], "1x4x4x16": [141, 148, 257], "96x1x1x16": [141, 148, 257], "1x4x4x96": [141, 148, 257], "1x3x3x96": [141, 148, 257], "16x1x1x96": [141, 148, 257], "908": [141, 145, 148], "1x5x5x96": [141, 148, 257], "1x2x2x96": [141, 148, 257], "24x1x1x96": [141, 148, 257], "1x2x2x24": [141, 148, 257], "144x1x1x24": [141, 148, 257], "1x2x2x144": [141, 148, 257], "1x3x3x144": [141, 148, 257], "24x1x1x144": [141, 148, 257], "348": [141, 148], "48x1x1x144": [141, 148, 257], "1x2x2x48": [141, 148, 257], "152": [141, 148, 257], "384x1x1x48": [141, 148, 257], "1x2x2x384": [141, 148, 257], "246": [141, 148], "8x384": [141, 257], "python_api": [141, 142, 144, 145, 148], "audio_dataset_mixin": [141, 142, 145, 148], "pseudo": [141, 142, 148], "16k": [141, 142, 145, 148, 257], "get_batches_sampl": [141, 145], "l241": [141, 145], "keyword_spotting_overview": 141, "non_unknown_class_indic": 141, "class_index": 141, "sr": [141, 143, 145, 146], "transform_param": [141, 145], "x_len": 141, "bg_noise_offset": 141, "bg_noise_factor": 141, "loudness_factor": 141, "sample_index": 141, "sample_data": 141, "sample_trim": 141, "cnn": [142, 143, 144, 145, 146, 147, 149, 251, 255, 258], "8khz": [142, 145], "49x32x1": 142, "25x16x8": 142, "13x8x16": 142, "7x4x32": 142, "1x4x32": 142, "1x7": [142, 145, 146, 147, 254], "278": [142, 143], "563": 142, "084": 142, "782baa4c65acec0db85a71d2be78eb29": 142, "04t19": [142, 148, 151, 152, 153, 154, 156, 157], "747z": 142, "6712": 142, "160": [142, 144, 147, 251, 254, 257], "004000000189989805": [142, 145], "3kb": [142, 144, 153, 154, 240, 253], "1x49x32x1": 142, "1x4": [142, 147, 149, 151, 152, 251, 253, 254], "574": 142, "98": [142, 144, 149, 250, 251, 253, 257, 258], "76": [142, 144, 147, 253, 254, 257, 258], "273": 142, "720": [142, 143, 144, 145, 146, 147, 254], "1x25x16x8": 142, "244": 142, "1x13x8x16": 142, "260": [142, 148, 149, 251], "129": [142, 144, 147, 254], "32x3x3x16": [142, 149, 154, 251], "1x7x4x32": 142, "896": [142, 257], "1x1x4x32": 142, "1x128": [142, 153], "809": 142, "4x128": 142, "msla": 142, "knowledg": [143, 146, 148, 235, 255], "distal": [143, 146], "behind": [143, 146, 233, 251, 253, 255], "student": [143, 146], "guidanc": [143, 146], "train_teach": [143, 146], "keyword_spotting_on_off": [143, 253, 257], "distil": [143, 146], "90m": [143, 146], "respons": [143, 144, 146, 217, 234, 249, 252], "ah": [143, 207, 259], "onning": 143, "hum": [143, 146], "1000m": [143, 146, 253, 254], "99x68x1": [143, 146], "99x68x10": [143, 146], "49x34x10": [143, 146], "49x34x20": [143, 146], "3x3x10": [143, 146], "24x17x20": [143, 146], "24x17x40": [143, 146], "3x3x20": [143, 146], "12x8x40": [143, 146], "3x3x40": [143, 146], "6x4x40": [143, 146], "6x4x20": [143, 146], "1x4x20": [143, 146], "098": [143, 146], "436": [143, 146, 258], "272": 143, "d701916160b1c6e41f145a166428b7c3": 143, "04t23": 143, "214z": 143, "178": 143, "1x99x68x1": [143, 146], "83": [143, 144, 146, 147, 237, 253, 254, 258], "199": [143, 257], "605": [143, 146], "959": 143, "10x3x3x1": [143, 146], "1x99x68x10": [143, 146], "1x49x34x10": [143, 146], "20x3x3x10": [143, 146], "1x49x34x20": [143, 146], "1x24x17x20": [143, 146], "40x3x3x20": [143, 146], "1x24x17x40": [143, 146], "450": [143, 146, 154, 257], "1x12x8x40": [143, 146], "912": 143, "40x3x3x40": [143, 146], "1x6x4x40": [143, 146], "347": [143, 146], "172": [143, 146, 257, 258], "20x3x3x40": [143, 146], "1x6x4x20": [143, 146], "460": [143, 146], "1x1x4x20": [143, 146], "860": [143, 146], "483": 143, "396": [143, 156], "3x80": 143, "warn": [143, 144, 146, 147, 222, 225, 238, 239, 240, 243, 245, 250, 251, 253, 258], "shutil": [143, 146, 238, 240, 241, 242, 244, 245], "knowledgedistillationmodel": [143, 146], "my_teacher_model_build": [143, 146], "knowledge_distil": [143, 146], "output_shap": [143, 146, 151, 160], "my_teacher_model_sav": [143, 146], "teacher_h5_path": [143, 146], "get_teacher_h5_path": [143, 146], "check_exist": [143, 146], "my_student_model_build": [143, 146], "try_arch": [143, 146], "teacher_model": [143, 146], "load_model": [143, 146], "student_loss_fn": [143, 146], "categoricalcrossentropi": [143, 146], "distillation_loss_fn": [143, 146], "kldiverg": [143, 146], "temperatur": [143, 146], "my_student_model_sav": [143, 146], "student_model": [143, 146], "val_student_loss": [143, 146], "noisereduc": [143, 146], "pyloudnorm": [143, 146], "catch_warn": [143, 146], "simplefilt": [143, 146], "peak": [143, 146], "reduce_nois": [143, 146], "stationari": [143, 146], "700m": [143, 144, 145], "dataset_background_dir": [143, 146], "synthetic_on_off_v1": 143, "0e691aaa4e61c82720b397fb82f5702d8355df11": 143, "_on_off_unknown": 143, "additional_unknown_dataset_dir": 143, "synthetic_on_off_unknown_v1": 143, "075c9e513c7830dfd531cef0306d100f4a3fb94b": 143, "_add_additional_unknown_sampl": 143, "rng": [143, 144, 147], "randomst": [143, 144, 147], "ext": [143, 146], "nexport": [143, 146], "prepare_teacher_or_student_model": [143, 146], "enviro": [143, 146], "on_off": [144, 253], "ml_commons_keyword": [144, 147, 253, 254], "background_nois": [144, 147, 253, 254], "esc50": [144, 147, 253, 254], "came": [144, 147, 254], "mit_ir_survei": [144, 253], "impuls": 144, "29155": 144, "9071": 144, "9034": 144, "11050": 144, "5135": [144, 253], "1595": [144, 253], "1590": [144, 253], "1950": [144, 253], "07": [144, 148, 253, 259], "upper_band_limit": [144, 147], "lower_band_limit": [144, 147], "98x1x104": [144, 147, 253], "98x1x40": [144, 147, 253], "3x1x104": [144, 147, 253], "98x1x120": [144, 147, 253], "1x1x40": [144, 147, 253], "49x1x120": [144, 147, 253], "9x1x120": [144, 147, 253], "49x1x40": [144, 147, 253], "1x1x120": [144, 147, 253], "25x1x120": [144, 147, 253], "25x1x40": [144, 147, 253], "13x1x120": [144, 147, 253], "13x1x40": [144, 147, 253], "7x1x120": [144, 147, 253], "7x1x40": [144, 147, 253], "4x1x120": [144, 147, 253], "4x1x40": [144, 147, 253], "79": [144, 147, 253, 254, 258], "2x1x120": [144, 253], "2x1x40": [144, 253], "93": [144, 152, 237, 253, 258], "94": [144, 146, 147, 151, 153, 156, 253, 254, 258], "97": [144, 237, 250, 251, 253, 258], "101": [144, 253], "103": [144, 253], "106": [144, 253], "116": [144, 156, 253], "312": [144, 253, 257], "ec453c2e09670f7971bb728f4de7d122": [144, 253], "2023": [144, 147, 253, 259], "19t21": [144, 253], "660z": [144, 253], "detection_threshold_list": [144, 145, 146, 147, 253], "242": [144, 146, 253], "700": [144, 145, 147, 157, 253], "533": [144, 253], "1x98x1x104": [144, 147, 253, 254], "531": 144, "107": [144, 149, 251], "928": [144, 147, 157, 254], "40x3x1x104": [144, 147, 254], "1x98x1x40": [144, 147, 254], "976": [144, 147, 254], "470": [144, 147, 254], "120x1x1x40": [144, 147, 254], "1x98x1x120": [144, 147, 254], "1x9x1x120": [144, 147, 254], "1x49x1x120": [144, 147, 254], "472": [144, 147, 241, 254], "235": [144, 146, 147, 254], "186": 144, "40x1x1x120": [144, 147, 254], "1x49x1x40": [144, 147, 254], "162": [144, 147, 254], "40x1x1x40": [144, 147, 254], "488": [144, 147, 254], "195": [144, 147, 253, 254], "1x25x1x120": [144, 147, 254], "1x25x1x40": [144, 147, 254], "249": [144, 147, 157, 254], "1x13x1x120": [144, 147, 254], "1x13x1x40": [144, 147, 254], "520": [144, 147, 254], "660": [144, 147, 254], "1x7x1x120": [144, 147, 254], "1x7x1x40": [144, 147, 254], "992": [144, 147, 152, 254], "1x4x1x120": [144, 147, 254], "1x4x1x40": [144, 147, 254], "572": [144, 147, 254], "1x2x1x120": 144, "1x2x1x40": 144, "292": 144, "114": 144, "1x1x1x40": [144, 147, 254], "640": [144, 147, 153, 154, 254, 258], "1x40": [144, 147, 254], "3x40": 144, "audio_dataset": [144, 147], "ir_dataset": 144, "_ir_responses_": 144, "rstate": 144, "current_sample_is_in_unknown_class": 144, "hi": 144, "direction_command": [144, 147, 254], "esc": [144, 147], "esc50_dir": [144, 147], "all_keyword": [144, 147], "11k": [144, 147], "extend": [144, 147, 248], "11000": [144, 147], "game": [145, 146, 147, 234, 254], "69x70x1": 145, "69x70x7": 145, "34x35x7": 145, "34x35x14": 145, "3x3x7": 145, "17x17x14": 145, "17x17x28": 145, "3x3x14": 145, "8x8x28": 145, "3x3x28": 145, "4x4x28": 145, "2x2x28": 145, "112": [145, 152, 257, 259], "939": 145, "997": [145, 156], "ba1f45639f61f277834e4c8ee71ae040": 145, "24t15": 145, "413z": 145, "45475": 145, "205": [145, 257], "215": 145, "230": 145, "9kb": [145, 146, 240], "1x69x70x1": 145, "265": 145, "710": 145, "486": 145, "7x3x3x1": 145, "1x69x70x7": 145, "1x34x35x7": 145, "14x3x3x7": 145, "1x34x35x14": 145, "1x17x17x14": 145, "28x3x3x14": 145, "1x17x17x28": 145, "1x8x8x28": 145, "451": [145, 157], "293": [145, 258], "28x3x3x28": 145, "1x4x4x28": 145, "227": 145, "532": 145, "1x2x2x28": 145, "1x112": 145, "784": [145, 253], "7x112": 145, "mltk_dir": 145, "pacman_background_noise_dir": [145, 146], "recorded_pacman_game_plai": [145, 146, 147], "749f552bc2aba11e618969d8b0f6e5bdd62ac7a2": [145, 146, 147], "pacman_background_noise_path": 145, "pacman_background_nois": 145, "add_game_background_nois": 145, "40m": 146, "c536b6f6dd07177d0ea769829f66623d": 146, "21t16": 146, "603z": 146, "239": [146, 257], "252": [146, 147, 253, 257], "198": [146, 257], "965": 146, "916": [146, 153], "899": 146, "7x80": 146, "50m": 146, "mous": 146, "050": [146, 149, 251], "cropped_sample_offset": 146, "pacman_background_noise_dst_path": 146, "pacman_background_noise_src_path": 146, "brd2601_background_noise_dst_path": 146, "background_noise_dir": 146, "background_noise_src_path": 146, "soundjai": 146, "62865": 147, "8382": 147, "12573": 147, "6435": 147, "858": 147, "1287": 147, "018": 147, "804": 147, "fa5f9b8ea1c47d942d537ef3702ffa76": 147, "01t20": 147, "940z": 147, "234": 147, "446": [147, 254, 257], "6kb": [147, 152, 253], "953": 147, "567": [147, 254, 258], "477": [147, 254], "7x40": [147, 254], "weightsandbiasesmixin": [147, 248], "download_and_extract": 147, "learnt": [148, 255], "979": 148, "536b7f0ff2de1d1db7c6b35d1e8cb721": 148, "433z": 148, "105032": 148, "2kb": [148, 149, 151, 157, 251, 253, 257], "1x11": 148, "11x384": 148, "cna": 148, "base_mltk_model": [148, 255], "base_model_h5_path": [148, 255], "load_weight": [148, 255], "by_nam": [148, 255], "skip_mismatch": [148, 255], "mismatch": [148, 255], "transfer_learn": [148, 255], "freez": [148, 255], "gave": [148, 255], "84x84x1": [149, 251], "82x82x16": [149, 251], "41x41x16": [149, 251], "39x39x16": [149, 251], "19x19x16": [149, 251], "17x17x32": [149, 251], "8x8x32": [149, 251], "2048": [149, 152, 251, 258], "9b557f35e32df7614723ddaafd77d75f": 149, "02t23": 149, "997z": 149, "137176": [149, 251], "suppression_count": [149, 251], "1x84x84x1": [149, 251], "137": [149, 251, 258], "354": 149, "159": [149, 238, 251, 258], "968": [149, 251], "16x3x3x1": [149, 251, 257], "1x82x82x16": [149, 251], "1x41x41x16": [149, 251], "16x3x3x16": [149, 154, 251], "1x39x39x16": [149, 251], "1x19x19x16": [149, 251], "1x17x17x32": [149, 251], "1x8x8x32": [149, 251], "1x2048": [149, 251], "32x2048": [149, 251], "231": [149, 251], "4x32": [149, 251], "bring": [149, 251], "rock_paper_scissors_v2": [149, 242, 251], "blog": [149, 251], "filter_count": [149, 251], "dump_custom_command": 149, "wand": [150, 151], "magic_wand": [151, 235], "128x3x1": 151, "128x3x8": 151, "4x3x1": 151, "42x1x8": 151, "3x3": [151, 157, 258], "42x1x16": 151, "4x1x8": 151, "14x1x16": 151, "016": 151, "133": 151, "268": 151, "wing": 151, "ring": 151, "slope": 151, "c044953d468755c572f05f4f2750d1ef": 151, "646z": 151, "5444": 151, "1x128x3x1": 151, "8x4x3x1": 151, "1x128x3x8": 151, "1x42x1x8": 151, "16x4x1x8": 151, "1x42x1x16": 151, "672": [151, 258], "1x14x1x16": 151, "1x224": 151, "16x224": 151, "132": [151, 251, 257], "135": 151, "4x16": 151, "acceleromet": [151, 250], "tflm_magic_wand": 151, "tflm_magic_wand_dataset": 151, "_data_load": 151, "valid_data": 151, "reshape_funct": 151, "reshaped_data": 151, "_unbatched_validation_data": 151, "sparse_categorical_crossentropi": 151, "_generate_representative_dataset": 151, "pylint": 151, "protect": 151, "3gb": 152, "auc": [152, 153, 154, 156, 157, 158, 237, 250, 251, 253, 258], "993": 152, "somewhat": 152, "49x40x1": 152, "25x20x8": 152, "10x8x1": 152, "336": [152, 244, 257], "680": 152, "012": 152, "36dd6db8f633c9fca61b418402ea698f": 152, "143z": 152, "9028": 152, "1x49x40x1": 152, "404": 152, "115": [152, 154, 254], "164": [152, 153], "652": 152, "8x10x8x1": 152, "1x25x20x8": 152, "1x4000": 152, "4x4000": 152, "weights_shap": 152, "mlperf": [153, 155], "tini": [153, 154, 155, 156, 157, 240, 244, 245], "zenodo": 153, "3351307": 153, "1908": 153, "03299": 153, "pattern": [153, 202, 223, 227, 253], "toi": 153, "car": [153, 255], "toyadmo": 153, "front": [153, 156, 251], "64m": 153, "32m": 153, "24khz": 153, "923": 153, "5x128x1": 153, "strided_slic": 153, "264": [153, 258], "535": 153, "176": [153, 258], "anonomli": 153, "5cf2dc0ea093044c7a31a226d44b8084": 153, "676z": 153, "9396": 153, "1x5x128x1": 153, "406": 153, "147": [153, 253, 257, 258], "1x640": 153, "128x640": 153, "128x128": 153, "8x128": 153, "128x8": 153, "640x128": 153, "369": [153, 253, 259], "shapeopt": 153, "stridedsliceopt": 153, "packopt": 153, "rnd": 153, "mean_squared_error": 153, "download_dataset": [153, 156], "features_toy_car_al": 153, "8fc5779a38694eb17e75ad21ef457bd39e6ef937": 153, "reshape_input_callback": 153, "x_length": 153, "subsect": 153, "left_offset": 153, "right_offset": 153, "randrang": 153, "middl": [153, 252, 254], "subsection_data": 153, "cifar10_main": 154, "989": 154, "988": [154, 258], "32x32x16": 154, "16x16x32": 154, "8x8x64": [154, 258], "3x3x64": [154, 156, 157, 240, 244], "1x1x64": [154, 156, 157, 240, 244, 257, 258], "8x8": 154, "502": 154, "122": [154, 242, 251, 253], "d170adc21388920caa3f64ba22cd5b5d": 154, "062z": 154, "53972": 154, "1x32x32x3": [154, 258], "1x10": [154, 258], "225": [154, 257], "211": 154, "933": 154, "442": 154, "583": [154, 157], "16x3x3x3": 154, "1x32x32x16": 154, "883": 154, "1x16x16x32": 154, "32x3x3x32": 154, "32x1x1x16": [154, 157], "830": 154, "64x3x3x32": 154, "1x8x8x64": [154, 258], "64x3x3x64": 154, "266": [154, 237], "64x1x1x32": [154, 157], "1x1x1x64": [154, 156, 258], "769": 154, "1x64": [154, 156], "10x64": 154, "wake": [155, 157], "wakeword": [155, 157], "coco14": [155, 157], "4khz": 156, "998": 156, "50x10x1": 156, "25x5x64": [156, 240, 244], "10x4x1": [156, 240, 244], "5x25": [156, 240, 244], "657": [156, 240, 244], "dsconv_arm": 156, "eb6e9d70cacfd495cdf36577882b83fc": 156, "066z": 156, "21424": 156, "7kb": 156, "1x50x10x1": 156, "1x12": 156, "831": 156, "664": [156, 251], "382": 156, "64x10x4x1": 156, "1x25x5x64": 156, "1x3x3x64": [156, 157], "412": 156, "64x1x1x64": [156, 157], "779": 156, "768": [156, 257], "12x64": 156, "speech_dataset_spec": 156, "20e36646073492fdb4fb8285ec49042e70f9e60": 156, "00025": [156, 157], "cocodataset": 157, "coco": 157, "cocoapi": 157, "mimim": 157, "96x96": [157, 251], "antialia": 157, "buildpersondetectiondatabas": 157, "mobilenet_v1_0": 157, "25_96": 157, "931": 157, "vww_model": 157, "96x96x3": 157, "48x48x8": 157, "48x48x16": 157, "24x24x16": 157, "24x24x32": 157, "12x12x32": 157, "12x12x64": [157, 258], "6x6x64": 157, "6x6x128": 157, "3x3x128": 157, "1x1x128": 157, "3x3x256": 157, "1x1x256": 157, "490": 157, "324": 157, "0fdc40de5812cfa530f6ec120c55171a": 157, "736z": 157, "156424": 157, "334": 157, "1x96x96x3": 157, "156": [157, 257], "110": 157, "941": 157, "695": 157, "8x3x3x3": 157, "1x48x48x8": 157, "387": [157, 251], "341": [157, 251], "16x1x1x8": 157, "1x48x48x16": 157, "297": 157, "257": 157, "1x3x3x16": [157, 257], "1x24x24x16": 157, "645": 157, "281": 157, "1x24x24x32": 157, "299": [157, 257], "806": 157, "1x3x3x32": 157, "589": 157, "507": [157, 258], "202": 157, "1x12x12x32": 157, "617": 157, "251": 157, "1x12x12x64": [157, 258], "139": 157, "474": 157, "1x6x6x64": 157, "603": 157, "236": 157, "128x1x1x64": 157, "1x6x6x128": 157, "1x3x3x128": 157, "458": 157, "128x1x1x128": 157, "596": 157, "229": [157, 259], "256x1x1x128": 157, "1x3x3x256": 157, "256x1x1x256": 157, "1x1x1x256": 157, "1x256": 157, "797": 157, "2x256": 157, "938": 157, "download_data": 157, "generate_summari": [158, 258], "include_al": 158, "evalut": 158, "progress": [158, 203, 207, 259], "bar": [158, 203, 207, 225, 259], "overal": [158, 207, 237, 250, 251, 253, 258, 259], "class_accuraci": 158, "false_positive_r": 158, "roc_auc": 158, "roc_threshold": 158, "roc_auc_avg": 158, "confusion_matrix": 158, "confus": 158, "matrix": [158, 258], "overall_precis": 158, "overall_recal": 158, "overall_pr_accuraci": 158, "overall_tpr": 158, "overall_fpr": 158, "overall_roc_auc": 158, "overall_threshold": 158, "calcuat": 158, "class_stat": 158, "all_scor": 158, "use_devic": [160, 238], "runtime_buffer_s": [160, 169, 172], "return_estim": [160, 172, 238], "discov": 160, "cpu_clock_r": 160, "runtime_memory_byt": 160, "is_simul": 160, "sram": 160, "dsp": 160, "flatbuffer_s": [160, 188], "n_layer": 160, "input_shape_str": [160, 258], "input_dtype_str": 160, "output_shape_str": 160, "output_dtype_str": 160, "accelerator_cycl": [160, 171], "cpu_cycl": [160, 171], "cpu_util": 160, "n_unsupported_lay": 160, "unsupported_lay": 160, "stat_tot": 160, "get_summari": [160, 206, 207, 259], "include_label": 160, "format_unit": [160, 230], "exclude_nul": 160, "full_summari": 160, "generate_report": 160, "to_dict": 160, "0234": 160, "to_json": 160, "indent": 160, "summary_label": 160, "printabl": [160, 182], "layers_label": 160, "member": 160, "input_dtyp": 160, "output_dtyp": 160, "tflite_s": 160, "joul": [160, 171], "j_per_op": 160, "j_per_mac": 160, "op_per_": 160, "mac_per_": 160, "inf_per_": 160, "err_msg": 160, "to_csv": 160, "include_head": 160, "dialect": 160, "excel": 160, "to_str": [160, 173, 189], "tflite_lay": 160, "error_msg": 160, "tflitelay": [160, 172, 174, 175, 178, 181, 183, 188, 191, 195, 196, 199], "is_acceler": 160, "is_unsupport": 160, "opcodestr": [160, 174, 175, 178, 181, 183, 187, 191, 195, 196, 199], "opcode_str": [160, 174, 175, 178, 181, 183, 187, 191, 195, 196, 199], "builtinoper": [160, 174, 175, 178, 181, 183, 187, 191, 195, 196, 199], "options_str": 160, "excluded_column": 160, "resume_epoch": 163, "create_arch": 163, "__note": 163, "__": 163, "model_archive_path": 163, "asdict": 163, "timeout": [165, 206, 217, 218, 220, 226, 227, 233], "termina": 165, "accelerator_wrapp": 166, "variant": [166, 259], "active_vari": 166, "api_vers": [166, 172], "git_hash": [166, 172], "tflitemicroacceleratorwrapp": 166, "supports_model_compil": 166, "estimate_profiling_result": 166, "enable_program_record": 166, "enable_data_record": 166, "compile_model": 166, "report_path": 166, "tflm_wrapper": 169, "tflm_acceler": 169, "flatbuffer_data": [169, 188], "enable_profil": [169, 172], "enable_tensor_record": [169, 172], "force_buffer_overlap": [169, 172], "tflitemicroacceler": [169, 172], "layer_error": 169, "tflitemicrolayererror": 169, "fallback": 169, "tflitemicromodeldetail": [169, 172], "input_s": 169, "output_s": 169, "is_profiler_en": 169, "get_profiling_result": 169, "tflitemicroprofiledlayerresult": 169, "is_tensor_recorder_en": 169, "get_recorded_data": 169, "get_layer_error": 169, "wrapper_detail": 170, "accelerat": 170, "specifc": 171, "shallow": [171, 190], "default_factori": 171, "factori": [171, 177, 180, 193, 201], "__missing__": 171, "set_log_level": 172, "get_log_level": 172, "set_logg": 172, "normalize_accelerator_nam": 172, "insensit": [172, 225], "get_supported_acceler": 172, "accelerator_is_support": 172, "load_tflite_model": [172, 241], "unload_model": [172, 241], "disable_simulator_backend": 172, "input_data": [172, 175, 178, 181, 183, 191, 195, 196, 199], "record_model": [172, 241], "enable_accelerator_record": 172, "return_model_detail": 172, "input0": 172, "accelerator_data": 172, "add_accelerator_path": 172, "register_acceler": 172, "get_acceler": 172, "rectifi": 173, "relu_n1_to_1": 173, "hyperbol": 173, "tangent": 173, "sign_bit": 173, "fb_oper": [174, 175, 178, 181, 183, 187, 191, 195, 196, 199], "operatort": [174, 175, 178, 181, 183, 187, 191, 195, 196, 199], "tfliteaddlayeropt": 174, "fuse": [174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 191, 192, 193, 201, 251, 253, 258], "input1_tensor": 174, "tflitetensor": [174, 175, 178, 181, 183, 187, 188, 191, 195, 196, 199], "input1_data": 174, "input2_tensor": 174, "input2_data": 174, "output_data": [174, 175, 178, 181, 183, 191, 195, 196, 199, 242], "from_flatbuff": [174, 175, 178, 181, 183, 187, 191, 195, 196, 199], "get_input_data": [174, 175, 178, 181, 183, 187, 188, 191, 195, 196, 199], "get_input_tensor": [174, 175, 178, 181, 183, 187, 188, 191, 195, 196, 199], "get_output_data": [174, 175, 178, 181, 183, 187, 188, 191, 195, 196, 199], "get_output_tensor": [174, 175, 178, 181, 183, 187, 188, 191, 195, 196, 199], "framework": [174, 175, 178, 181, 183, 187, 191, 195, 196, 199, 247, 258], "typevar": [174, 175, 178, 181, 183, 187, 191, 195, 196, 198, 199], "n_input": [174, 175, 178, 181, 183, 187, 188, 191, 195, 196, 199], "n_output": [174, 175, 178, 181, 183, 187, 188, 191, 195, 196, 199], "numer": [174, 175, 178, 181, 183, 187, 191, 195, 196, 199, 230, 235, 251, 252, 253, 259], "tfliteconv2dlayeropt": 175, "bia": [175, 178, 183, 199], "filters_tensor": [175, 178, 199, 242], "filters_data": [175, 178, 199], "bias_tensor": [175, 178, 183, 199], "bias_data": [175, 178, 183, 199], "tfliteconvparam": [175, 242], "opt": [176, 179, 184, 192, 200], "activation_str": [176, 179, 184, 192], "tfliteactiv": [176, 179, 184, 192], "padding_str": [176, 179, 192, 200], "tflitepad": [176, 177, 179, 180, 192, 193, 200, 201], "stride_width": [176, 177, 179, 180, 189, 192, 193, 200, 201], "stride_height": [176, 177, 179, 180, 189, 192, 193, 200, 201], "options_typ": [176, 179, 184, 192, 200], "builtinopt": [176, 179, 184, 192, 200], "options_type_str": [176, 179, 184, 192, 200], "convparamsquant": 177, "dilation_width_factor": [177, 180], "dilat": [177, 180], "dilation_height_factor": [177, 180], "input_offset": [177, 180, 185, 201], "weights_offset": [177, 180, 185, 201], "output_offset": [177, 180, 185, 201, 242], "per_channel_output_multipli": [177, 180, 201, 242], "per_channel_output_shift": [177, 180, 201, 242], "quantized_activation_min": [177, 180, 185, 193, 201, 242], "quantized_activation_max": [177, 180, 185, 193, 201, 242], "tflitedepthwiseconv2dlayeropt": 178, "tflitedepthwiseconvparam": [178, 242], "depthwiseconvparamsquant": 180, "opcode_vers": [181, 187, 195], "tflitelayeropt": [181, 187, 195, 196], "scalar": [182, 190], "syntax": [182, 190], "foo": [182, 190, 225], "int64": [182, 190], "uint32": [182, 190], "uint64": [182, 190], "doubl": [182, 190, 254, 257], "str_list": [182, 190], "deseri": [182, 190], "serialized_data": [182, 190], "boolvalu": 182, "sign": 182, "int8valu": 182, "unsign": [182, 212, 233], "uint8valu": 182, "int16valu": 182, "uint16valu": 182, "int32valu": 182, "uint32valu": 182, "int64valu": 182, "uint64valu": 182, "floatvalu": 182, "doublevalu": 182, "binaryvalu": 182, "stringvalu": 182, "stringlist": 182, "int32list": 182, "floatlist": 182, "i8": 182, "u8": 182, "i16": 182, "u16": 182, "i32": 182, "u32": 182, "i64": 182, "u64": 182, "f32": 182, "f64": 182, "int32_list": 182, "float_list": 182, "schema_vers": 182, "root_typ": 182, "tflitefullyconnectedlayeropt": 183, "accumulator_depth": 183, "neuron": [183, 250], "weights_tensor": 183, "weights_data": 183, "tflitefullyconnectedparam": [183, 242], "fullyconnectedparamsquant": 185, "output_multipli": 185, "output_shift": 185, "load_flatbuffer_fil": [186, 188, 242, 258], "schema_v3": 188, "awesom": 188, "my_new_model": 188, "add_metadata": [188, 242], "my_metadata": [188, 242], "all_metadata": 188, "get_all_metadata": 188, "input_buff": 188, "inference_result": 188, "cwd": [188, 223, 228], "backslash": 188, "slash": [188, 202, 223], "flatbuffer_model": 188, "modelt": 188, "flatbuffer_subgraph": 188, "subgrapht": 188, "subgraph": [188, 198], "selected_model_subgraph": 188, "n_subgraph": 188, "get_flatbuffer_subgraph": 188, "get_tensor_data": 188, "get_metadata": [188, 242], "lookup": 188, "remove_metadata": 188, "regenerate_flatbuff": [188, 242], "underli": [188, 206, 242, 259], "quantize_to_input_dtyp": 188, "input_index": 188, "dequantize_output_to_float32": 188, "output_index": 188, "out_height": 189, "in_height": 189, "out_width": 189, "in_width": 189, "region": 189, "filter_height": [189, 192], "filter_width": [189, 192], "l1235": 190, "add_to_tflite_fil": 190, "load_from_tflite_fil": 190, "flatbufferdictionari": 190, "load_from_tflite_flatbuff": 190, "load_from_tflite_model": [190, 242], "add_to_tflite_flatbuff": 190, "add_to_tflite_model": [190, 242], "tflitepool2dlayeropt": 191, "tflitepoolparam": [191, 242], "averagepoolingevalquant": 193, "fb_quantiz": 194, "quantizationparameterst": 194, "quantization_dimens": 194, "requires_copi": 196, "memcpi": 196, "n_input_el": 196, "flat_siz": 197, "occurr": [197, 204, 208], "sy": [197, 204, 208, 227, 238, 258], "maxsiz": [197, 204, 208], "fb_tensor": 198, "tensort": 198, "dtype_str": 198, "tfliteshap": 198, "tflitequant": 198, "shape_dtype_str": 198, "include_batch": 198, "dim0": 198, "dim1": 198, "transpose_conv": 199, "tflitetransposeconvlayeropt": 199, "tflitetransposeconvparam": 199, "calculateopdata": 201, "extract_arch": 202, "extract_nest": [202, 203], "destin": [202, 203, 225], "gzip_fil": 202, "src_path": 202, "gzip": 202, "gzip_directory_fil": [202, 259], "src_dir": 202, "dst_archiv": 202, "regex": [202, 223, 227, 233], "download_dir": 203, "archive_fnam": 203, "file_hash_algorithm": 203, "update_onchange_onli": 203, "download_details_fnam": 203, "return_uptod": 203, "progressbar": 203, "sha256": 203, "hasn": [203, 257], "verify_extract": 203, "extract_details_fnam": 203, "tarbal": 203, "verify_file_hash": 203, "file_path": [203, 223], "expected_sha1": 203, "verify_sha256": 203, "expected_sha256": 203, "voicepitch": [204, 205, 207, 259], "voicer": [204, 205, 207, 259], "keyword_group": 205, "list_supported_backend": 206, "is_run": [206, 224], "is_backend_load": 206, "raise_except": 206, "load_backend": [206, 207, 259], "install_python_packag": [206, 207, 259], "boto3": 206, "cognitiveservic": 206, "speechconfig": 206, "texttospeech": 206, "texttospeechcli": 206, "auto_install_python_packag": 206, "comment": [206, 225, 247, 251], "list_languag": 206, "list_voic": [206, 207, 259], "language_cod": [206, 209], "list_configur": [206, 207, 208, 259], "max_count": [206, 207, 208, 259], "generationconfig": 206, "count_charact": [206, 259], "charg": [206, 249, 259], "char": [206, 212, 227], "as_dict": 206, "on_finish": [206, 207, 259], "forev": [206, 233], "alexa_dataset_gener": [207, 259], "audio_dataset_gener": [207, 216, 259], "alexa_dataset": [207, 259], "alias": [207, 208, 257, 259], "ehlexa": [207, 259], "eelexa": [207, 259], "aalexa": [207, 259], "aah": [207, 259], "uh": [207, 259], "ala": [207, 259], "alex": [207, 259], "lex": [207, 259], "lexa": [207, 259], "lexu": [207, 259], "alexu": [207, 259], "exu": [207, 259], "exa": [207, 259], "alert": [207, 248, 259], "alec": [207, 259], "alef": [207, 259], "ale": [207, 259], "al": [207, 259], "aleph": [207, 259], "alevin": [207, 259], "alegar": [207, 259], "alexia": [207, 252, 259], "alexin": [207, 259], "alencon": [207, 259], "aleuron": [207, 259], "alemb": [207, 259], "alic": [207, 252, 259], "aleeyah": [207, 259], "xslow": [207, 259], "xfast": [207, 259], "all_configur": [207, 259], "n_config": [207, 259], "pretti": [207, 259], "rjust": [207, 230, 259], "pb_outer": [207, 259], "config_list": [207, 259], "pb_inner": [207, 259], "as_list": [208, 225], "hashable_valu": 209, "hex_hash": 209, "var_nam": 212, "length_var_nam": 212, "data_length": 212, "const": [212, 241, 242], "prepend_lin": 212, "fmt_str": 212, "prepend": [212, 225], "stdint": 212, "0x": 212, "02x": 212, "build_mltk_target": 213, "additional_vari": 213, "source_dir": 213, "build_dir": 213, "build_subdir": 213, "use_user_opt": 213, "config_onli": 213, "build_onli": 213, "previosli": 213, "invoke_mltk_target": 213, "build_target": 213, "get_build_directori": 213, "parse_vari": 213, "cmake_vari": 213, "tensorflowcudavers": 214, "__getnewargs__": 214, "plain": 214, "pickl": 214, "__match_args__": 214, "cudnn": 214, "python_min": 214, "python_max": 214, "__module__": [214, 222, 225, 230], "_cl": 214, "__repr__": 214, "nice": 214, "__slots__": 214, "deiniti": 214, "get_tensorflow_version_with_cudnn_vers": 214, "cudnn_ver": 214, "check_tensorflow_cuda_compatibility_error": 214, "log_file_path": 214, "generate_hash": 215, "hash_fil": 215, "include_filenam": 215, "hashlib": 215, "_hash": 215, "hash_object": 215, "jlink_stream": [216, 219], "serial_read": [216, 226], "command_stream": 217, "cmd": [217, 228, 232, 240, 245, 258], "response_stream": 217, "jlinkstreamopt": [217, 220], "reset_devic": [217, 220], "no_respons": 217, "ifc": 218, "stream_context": 218, "deviceinterfac": 218, "is_open": [218, 227, 233], "max_read_s": 218, "end_tim": 218, "buffer_us": 218, "pend": 218, "buffer_unus": 218, "read_data_avail": [218, 219], "readi": [218, 233, 249, 250, 254, 258], "write_data_avail": 218, "buffer_hexdump": 218, "hexdump": 218, "max_siz": [218, 220, 233], "read_al": [218, 219, 233], "initial_timeout": 218, "flush": [218, 222, 227], "classify_audio_mltk_cli": 219, "jlinkstream": [219, 221], "jlinkdatastream": [219, 220], "audio_stream": 219, "chunk_data": 219, "default_opt": 220, "is_connect": 220, "log_fil": 222, "log_file_mod": 222, "base_level": 222, "file_level": 222, "add_console_logg": 222, "make_filelik": 222, "redirect_stream": 222, "stderr": 222, "close_atexit": 222, "redirect": 222, "textio": [222, 227], "timing_decor": 222, "decor": [222, 225], "set_console_level": 222, "get_level": 222, "consoleloggerlevelcontext": 222, "__enter__": 222, "__exit__": 222, "traceback": 222, "__dict__": [222, 225, 230], "mappingproxi": [222, 225, 230], "__weakref__": [222, 225, 230], "__doc__": [222, 225, 230], "__annotations__": [222, 225, 230], "weak": [222, 225, 230], "dummylogg": 222, "fullpath": [223, 250], "get_actual_path": 223, "has_filenam": 223, "create_dir": 223, "create_tempdir": [223, 258], "subdir": 223, "get_user_set": 223, "settings_fil": 223, "add_user_set": 223, "remove_directori": 223, "retri": 223, "clean_directori": 223, "copy_directori": 223, "src": [223, 238, 240, 241, 242, 244, 245], "dst": [223, 238, 240, 241, 242, 244, 245], "exclude_dir": 223, "set_file_last_modifi": 223, "dt": 223, "datetim": 223, "file_is_new": 223, "source_path": 223, "other_path": 223, "file_is_in_us": 223, "recursive_listdir": 223, "return_relative_path": 223, "walk_with_depth": 223, "gil": 224, "driven": 224, "_processing_callback": 224, "pool_callback": 224, "sleep": 224, "create_batch": 224, "pool_batch": 224, "entry_point": 224, "expend": 224, "clamp": 224, "complex": [224, 249, 253, 254, 255, 257, 258], "processpoolbatch": 224, "short_vers": 225, "minor": 225, "defaultdict": 225, "dictobject": 225, "my_dict_obj": 225, "__getattr__": 225, "__setattr__": 225, "setattr": 225, "merge_dict": 225, "copy_destin": 225, "obj": 225, "flatten_list": 225, "list_rindex": 225, "lst": 225, "revers": [225, 258], "contains_class_typ": 225, "get_case_insensit": 225, "is_tru": 225, "is_fals": 225, "forward_method_kwarg": 225, "prepend_exception_msg": 225, "append_exception_msg": 225, "debugger_is_act": 225, "debugg": [225, 256], "notebook_is_act": 225, "ipython": [225, 250], "module_nam": 225, "install_dir": 225, "no_dep": 225, "import_module_at_path": 225, "load_json_saf": 225, "trail": 225, "find_object_key_with_valu": 225, "needl": 225, "constructor": 225, "lowercas": 225, "find_object_value_with_kei": 225, "ignore_cas": 225, "enum": 225, "find_object_value_with_key_or_valu": 225, "timeit": 225, "set_absl_log_level": 225, "absl": [225, 238, 239, 240, 243, 245], "disable_warn": 225, "func": 225, "hide": 225, "profile_model_on_devic": 226, "serialread": 226, "start_regex": [226, 227], "ignorecas": [226, 227], "stop_regex": [226, 227], "fail_regex": [226, 227], "hardfault": 226, "timeouterror": 226, "error_messag": [226, 227], "device_log": 226, "captured_data": [226, 227], "multilin": 227, "dotal": 227, "outfil": [227, 228, 258], "stdout": [227, 258], "ascii": 227, "rb": 227, "callback_regex": 227, "ignore_char": 227, "list_port": [227, 233], "resolve_port": [227, 233], "activity_timeout": 227, "check_fail_condit": 227, "check_start_condit": 227, "check_stop_condit": 227, "delay_per_char": 227, "run_shell_cmd": [228, 258], "line_processor": 228, "retcod": [228, 258], "retmsg": [228, 258], "sig": [229, 231], "sigint": [229, 231], "resignal_on_exit": 229, "raise_exception_if_not_main_thread": 229, "formattedint": 230, "__str__": 230, "formattedfloat": 230, "add_spac": 230, "ljust": 230, "0314": 230, "pretty_time_str": 230, "iso_time_str": 230, "iso": 230, "8601": 230, "19t23": 230, "459z": 230, "iso_time_filename_str": 230, "459": 230, "get_current_o": 231, "osx": 231, "is_window": 231, "is_linux": 231, "is_osx": 231, "has_admin": 231, "admin": [231, 252], "permiss": [231, 236], "get_usernam": 231, "raise_sign": 231, "kill": 231, "make_path_execut": 231, "send_sign": 231, "pid": 231, "children": 231, "recept": [232, 233], "alexa_demo": [232, 252], "data_buff": 232, "bytesio": 232, "read_command": [232, 233], "flush_input": [232, 233], "seek": 232, "getbuff": 232, "nbyte": 232, "rx_buffer_length": 233, "rx": 233, "open_synchronize_timeout": 233, "4096": 233, "rx_bytes_avail": 233, "tx_bytes_avail": 233, "is_synchron": 233, "ack_read_data": 233, "synchronize_block": 233, "statu": [233, 248, 249], "exceed": [233, 257, 258, 259], "write_al": 233, "write_command": 233, "payload": 233, "guarante": 233, "unread": 233, "silent": 233, "vastli": [234, 251, 253, 254, 255, 257], "amp": 234, "onnx": 234, "micro_speech": 235, "inter": 235, "trainer": 235, "evaluat": 235, "stock": 235, "warranti": 236, "disclaim": 236, "impli": [236, 253], "concern": [236, 250, 259], "ask": [236, 249], "question": [236, 249, 251], "quick": 236, "spdx": 236, "zlib": 236, "licensor": 236, "laboratori": 236, "inc": 236, "express": [236, 259], "liabl": 236, "damag": 236, "aris": 236, "grant": 236, "anyon": [236, 249, 252], "alter": 236, "freeli": 236, "restrict": 236, "misrepres": 236, "claim": 236, "wrote": 236, "acknowledg": 236, "appreci": 236, "plainli": 236, "notic": [236, 249], "evaluation_result": [237, 251, 253], "674": 237, "roc": [237, 248, 250, 251, 253, 258], "919": 237, "987": 237, "891": 237, "880": 237, "484": 237, "411": 237, "893": 237, "981": [237, 251], "865": [237, 258], "832": 237, "auto_encod": 237, "636": 237, "308": [237, 250], "726": 237, "urllib": [238, 240, 241, 242, 244, 245], "tempfil": [238, 240, 241, 242, 244, 245, 259], "query_platform": 238, "tflite_model_url": [238, 240, 241, 242, 244, 245], "necesari": 238, "test_help": [238, 241, 242], "normpath": [238, 240, 241, 242, 244, 245], "gettempdir": [238, 240, 241, 242, 244, 245, 259], "wb": [238, 240, 241, 242, 244, 245, 258], "urlopen": [238, 240, 241, 242, 244, 245], "copyfileobj": [238, 240, 241, 242, 244, 245], "884": [238, 241], "5p": [238, 241, 258], "0n": [238, 241], "985": [238, 241], "148": [238, 241, 257], "187": [238, 241, 253], "5u": [238, 241, 251, 258], "718": [238, 241], "7u": [238, 241, 251, 258], "3u": [238, 241, 251, 258], "0p": [238, 241, 251, 258], "5n": [238, 241, 251, 258], "153": [238, 253, 257, 258], "9p": 238, "8p": [238, 251], "719": 238, "4u": [238, 258], "223": 238, "2n": [238, 258], "platform_nam": 238, "conenct": 238, "brd2601a": 238, "brd4186b": 238, "956": 238, "untrac": [238, 239, 240, 243, 245], "_jit_compiled_convolution_op": [238, 239, 240, 243, 245], "tmpc8yu6n46": 238, "reed": [238, 239, 240, 243, 244, 245, 251, 257, 258], "lib": [238, 239, 240, 243, 245, 251, 253, 257, 258], "site": [238, 239, 240, 243, 245, 251, 253, 257, 258], "766": [238, 239, 240, 243, 245], "userwarn": [238, 239, 240, 243, 245, 251, 258], "anywai": [238, 239, 240, 243, 245, 251], "415": 238, "219": 238, "6u": [238, 251, 258], "183": 238, "332": 238, "1n": [238, 251], "tmpvpnr_8op": 239, "tmp6fs6_29o": 239, "_________________________________________________________________": [240, 244, 245, 251], "average_pooling2d": [240, 241, 242, 245, 253], "averagep": [240, 245], "ooling2d": [240, 245], "conv2d_1": [240, 241, 242, 245, 251], "3472": [240, 245], "conv2d_2": [240, 241, 242, 245, 251], "3480": [240, 245], "batch_norm": [240, 241, 242, 244, 245, 253], "batchn": [240, 244, 245, 253], "ormal": [240, 244, 245, 253], "average_pooling2d_1": [240, 241, 242, 245], "epooling2d": [240, 245], "1155": [240, 245], "activation_1": [240, 245, 251], "443": [240, 245, 257], "395": [240, 245], "0242764704ebb6643ae7df4a6536bb83": 240, "06t16": [240, 244], "472z": 240, "trained_model": [240, 244, 245], "kws_ref_model": [240, 244, 245], "external_tflite_path": [240, 244, 245], "49x10x1": [240, 244], "394": [240, 244, 251, 259], "addon": [240, 245, 258], "satisfi": [240, 245], "typeguard": [240, 245], "pypars": [240, 245], "00": [240, 245, 249, 251, 253, 259], "333": [240, 245, 253, 258], "tmpv8h9r1ze": 240, "b13b48c": [240, 241, 244, 245, 258], "72320": [240, 245], "f84b0517005c8392d9746f6c6dae1f50": 240, "327z": 240, "tflite_micro_model": 241, "72192": 241, "2021": [241, 242, 257], "18t16": [241, 242], "028z": [241, 242], "e8463b1e31855c5e6319493226b8b582": [241, 242], "kbyte": 241, "recorded_lay": 241, "inp": 241, "tinput": [241, 242], "outp": 241, "toutput": [241, 242], "op0": [241, 242], "conv2d_input_int8": [241, 242], "biasadd": [241, 242], "readvariableop": [241, 242], "op1": [241, 242], "avgpool": [241, 242], "op2": [241, 242, 258], "op3": [241, 242, 258], "fusedbatchnormv3": [241, 242], "conv2d1": [241, 242], "op4": [241, 242], "op5": [241, 242], "op6": [241, 242], "matmul": [241, 242], "op7": [241, 242], "identity_int8": [241, 242], "arbitrari": 242, "tflite_model_param": 242, "my_bool": 242, "my_int": 242, "my_float": 242, "my_list_int": 242, "my_list_float": 242, "my_list_str": 242, "bytearrai": 242, "140000104904175": 242, "100000023841858": 242, "200000047683716": 242, "299999952316284": 242, "x01": 242, "x02": 242, "x03": 242, "x04": 242, "_load_sampl": 242, "class_nam": [242, 251], "img_arrai": 242, "rock_sampl": 242, "paper_sampl": 242, "scissors_sampl": 242, "prep": 242, "tfliteconv2dlay": 242, "tflitefullyconnectedlay": 242, "tflitepooling2dlay": 242, "conv2d_param": 242, "fully_connected_param": 242, "pool_param": 242, "padding_width": 242, "padding_height": 242, "conv2d_lay": 242, "updated_tflite_path": 242, "modified_image_example1": 242, "updated_tflite_model": 242, "updated_conv2d_lay": 242, "updated_filt": 242, "updated_quant": 242, "allclos": 242, "training_result": 243, "tmp6ab8ka6k": 243, "tmpgclx2y4d": 243, "tmppbx5mcil": 243, "tmpeoo7jyna": 243, "9600": 244, "648": [244, 257, 258], "16004": 244, "668": 244, "25472": 244, "a4fadcb07cc13bf4ce4249e7349cadf3": 244, "836z": 244, "831z": 244, "extracted_arch": 245, "geforc": 245, "rtx": 245, "2060": 245, "tmp_model": 245, "tmpsa1z1ouz": 245, "dive": 246, "hard": [247, 251, 253, 259], "defici": 247, "ideal": [247, 252, 259], "similarli": [247, 249], "refactor": 247, "easi": [248, 253, 259], "collabor": 248, "paid": [248, 249], "subscript": 248, "price": [248, 259], "relav": 248, "informa": 248, "disk": 248, "plotli": 248, "especi": [248, 251, 253, 254], "slack": 248, "artifact": 248, "audit": 248, "computation": 249, "dai": 249, "laptop": 249, "rent": 249, "matchmak": 249, "aggreg": 249, "10x": [249, 252], "caution": 249, "affili": 249, "incur": 249, "hr": 249, "12hr": 249, "flexibl": 249, "isol": 249, "unprivileg": 249, "docker": 249, "tier": 249, "datacent": 249, "hobbyist": 249, "vet": 249, "partner": 249, "lose": 249, "steal": 249, "incentiv": 249, "reput": 249, "exploit": 249, "roughli": 249, "payment": 249, "whenver": 249, "hit": 249, "destroi": 249, "outstand": 249, "rental": 249, "bandwidth": 249, "inact": 249, "offlin": 249, "broken": 249, "consider": 249, "stripe": 249, "confirm": 249, "dialog": 249, "chose": 249, "verif": 249, "moment": 249, "contact": 249, "fraudul": 249, "editor": [249, 250, 251, 253, 257], "aaaac3nzac1lzdi1nte5aaaaibqhisau": 249, "bhj7z6hpoqe0gx": 249, "efjau27aim738c4byojw": 249, "popup": 249, "10gb": 249, "hourli": 249, "slider": 249, "narrow": 249, "visibl": 249, "35023": 249, "trashcan": [249, 259], "icon": 249, "lost": 249, "wide": 249, "cheaper": 249, "dlperf": 249, "mid": 249, "Not": [249, 258], "i7": 249, "wheel": 249, "wast": 249, "libsndfil": 249, "machinc": 249, "advantag": [249, 258], "spun": 249, "my_dataset_download": 249, "spend": [249, 251, 252, 253, 257, 259], "monei": [249, 252, 259], "untrain": 249, "3hr": 249, "amd": 249, "threadripp": 249, "epyc": 249, "xeon": 249, "39975": 249, "ve": 249, "understand": [250, 251, 253, 254, 255], "favorit": [250, 251, 253, 257], "exclam": [250, 251, 253, 254], "zsh": 250, "fish": [250, 255], "powershel": 250, "pwsh": 250, "run_model_profiler_benchmark": 250, "tse_compress": 250, "utest": [250, 251, 253, 254], "review": [250, 251, 252, 253, 254, 255, 257], "someon": [250, 251], "nearli": 250, "certain": [250, 251, 259], "theoret": 250, "signet": 250, "friendli": 250, "introduct": 250, "abc": 250, "thumb": 250, "critic": [250, 252, 253, 259], "backup": 250, "192x192": 250, "sharpen": 250, "harpen": 250, "blur": 250, "heurist": 250, "blurri": 250, "data_preprocessor": 250, "formula": 250, "signature1": 250, "signature2": 250, "THEN": 250, "intent": 250, "hacker": 250, "spoof": 250, "469": 250, "465": 250, "982": 250, "245": 250, "intellig": 251, "differenti": 251, "learnabl": 251, "effort": 251, "10k": [251, 252, 253], "100k": [251, 253, 259], "orient": 251, "stuff": 251, "redund": 251, "duplic": [251, 253], "mislabl": 251, "degrad": 251, "sensor": 251, "patool": 251, "oe": 251, "tmp_archiv": 251, "sub_dir": 251, "mpimg": 251, "class_sampl": 251, "class_dir": 251, "sample_filenam": 251, "imread": 251, "fortun": 251, "purchas": 251, "image_classifier_imag": 251, "delet": 251, "clearli": 251, "retrain": 251, "scratch": [251, 253, 255], "my_rock_paper_scissor": 251, "newli": [251, 252, 253], "throughout": [251, 258], "internet": 251, "variat": 251, "converg": 251, "extrem": [251, 253], "yet": [251, 252, 253, 257], "29t23": 251, "550": 251, "02t17": 251, "359": [251, 253, 257], "204": 251, "max_pooling2d": 251, "2320": 251, "max_pooling2d_1": 251, "maxpool": 251, "4640": 251, "activation_2": 251, "max_pooling2d_2": 251, "65568": 251, "activation_3": 251, "820": 251, "303": [251, 253], "29t22": 251, "350": [251, 253], "746": 251, "2482ff1c6e512f70479605f20e18e5fc": 251, "03t23": 251, "754z": 251, "possibli": [251, 253], "345": 251, "141": 251, "3p": 251, "478": 251, "2u": [251, 258], "745": 251, "226": 251, "1u": [251, 258], "7n": 251, "8u": 251, "559938": 251, "358": [251, 253], "142": 251, "481894": 251, "offload": [251, 253], "revert": 251, "feasibl": [251, 253], "night": [251, 253], "wrong": [251, 253], "037": 251, "476": 251, "083": 251, "461": 251, "042": 251, "554": 251, "600": [251, 253, 257], "chanc": [251, 253], "wider": [251, 253], "filer": [251, 253], "safe": [251, 253], "sink": 252, "attach": 252, "ground": [252, 254], "segger": 252, "program_app": 252, "audio_io": 252, "keyword_spotting_alexa": 252, "me": 252, "joke": 252, "opu": 252, "codec": 252, "vad": 252, "decompress": 252, "vdac": 252, "3v3": 252, "acquir": [252, 254], "besid": 252, "divers": [252, 253], "substanti": 252, "adequ": 252, "intricaci": 252, "imbalanc": 252, "choos": [252, 254, 259], "shown": [252, 258], "importantli": 252, "plug": 252, "dummi": 252, "2hr": 252, "keyword_spottong_alexa": 252, "mltk_stack_siz": 252, "audio_classifier_enable_audio_io": 252, "mltk_audio_classifier_download": 252, "music": 252, "stori": 252, "wstk": 252, "baudrat": 252, "rebuild": 252, "discuss": [253, 257], "accent": [253, 259], "thousand": 253, "overcom": 253, "15k": 253, "harder": [253, 259], "switch": 253, "poor": 253, "heard": [253, 259], "household": 253, "meet": [253, 257], "suffer": 253, "dirti": 253, "corrupt": 253, "mislabel": 253, "insight": 253, "amplifi": 253, "diverg": [253, 258], "church": 253, "survei": 253, "constantli": [253, 259], "Near": [253, 257], "min_signal_remain": [253, 254], "playback": 253, "my_keyword_spotting_on_off": 253, "care": 253, "ultim": [253, 255], "my_keyword_spotting_on_off_v3": 253, "__________________________________________________________________________________________________": 253, "15650": 253, "pointwise_expand_conv": 253, "conv2": 253, "aliz": 253, "re_lu": 253, "mtconv": 253, "multiscaletemporalco": 253, "1350": 253, "nvolut": 253, "batch_normalization_1": 253, "batchno": 253, "rmaliz": 253, "re_lu_1": 253, "strided_residu": 253, "2500": 253, "pointwise_contract_conv": 253, "con": [253, 259], "v2d": 253, "batch_normalization_3": 253, "batch_normalization_2": 253, "re_lu_2": 253, "re_lu_3": 253, "batch_normalization_4": 253, "re_lu_4": 253, "batch_normalization_5": 253, "re_lu_5": 253, "batch_normalization_6": 253, "add_1": 253, "re_lu_6": 253, "batch_normalization_7": 253, "re_lu_7": 253, "batch_normalization_8": 253, "re_lu_8": 253, "batch_normalization_9": 253, "add_2": 253, "re_lu_9": 253, "batch_normalization_10": 253, "re_lu_10": 253, "batch_normalization_11": 253, "re_lu_11": 253, "batch_normalization_12": 253, "add_3": 253, "re_lu_12": 253, "batch_normalization_13": 253, "re_lu_13": 253, "batch_normalization_14": 253, "re_lu_14": 253, "batch_normalization_16": 253, "batch_normalization_15": 253, "re_lu_15": 253, "add_4": 253, "re_lu_16": 253, "batch_normalization_17": 253, "re_lu_17": 253, "batch_normalization_18": 253, "re_lu_18": 253, "batch_normalization_19": 253, "add_5": 253, "re_lu_19": 253, "batch_normalization_20": 253, "re_lu_20": 253, "batch_normalization_21": 253, "re_lu_21": 253, "batch_normalization_22": 253, "add_6": 253, "re_lu_22": 253, "batch_normalization_23": 253, "re_lu_23": 253, "batch_normalization_24": 253, "re_lu_24": 253, "batch_normalization_25": 253, "add_7": 253, "re_lu_25": 253, "batch_normalization_26": 253, "re_lu_26": 253, "batch_normalization_27": 253, "re_lu_27": 253, "batch_normalization_29": 253, "batch_normalization_28": 253, "re_lu_28": 253, "add_8": 253, "re_lu_29": 253, "batch_normalization_30": 253, "re_lu_30": 253, "batch_normalization_31": 253, "re_lu_31": 253, "batch_normalization_32": 253, "add_9": 253, "re_lu_32": 253, "conv": 253, "batch_normalization_33": 253, "re_lu_33": 253, "multiscaletemporalc": 253, "onvolut": 253, "batch_normalization_34": 253, "re_lu_34": 253, "nv2d": 253, "batch_normalization_35": 253, "add_10": 253, "re_lu_35": 253, "batch_normalization_36": 253, "re_lu_36": 253, "batch_normalization_37": 253, "re_lu_37": 253, "batch_normalization_38": 253, "add_11": 253, "re_lu_38": 253, "batch_normalization_39": 253, "re_lu_39": 253, "batch_normalization_40": 253, "re_lu_40": 253, "batch_normalization_42": 253, "batch_normalization_41": 253, "re_lu_41": 253, "add_12": 253, "re_lu_42": 253, "batch_normalization_43": 253, "re_lu_43": 253, "batch_normalization_44": 253, "re_lu_44": 253, "batch_normalization_45": 253, "add_13": 253, "re_lu_45": 253, "batch_normalization_46": 253, "re_lu_46": 253, "batch_normalization_47": 253, "re_lu_47": 253, "batch_normalization_48": 253, "add_14": 253, "re_lu_48": 253, "batch_normalization_49": 253, "re_lu_49": 253, "batch_normalization_50": 253, "re_lu_50": 253, "batch_normalization_51": 253, "add_15": 253, "re_lu_51": 253, "batch_normalization_52": 253, "re_lu_52": 253, "batch_normalization_53": 253, "re_lu_53": 253, "batch_normalization_55": 253, "batch_normalization_54": 253, "re_lu_54": 253, "add_16": 253, "re_lu_55": 253, "batch_normalization_56": 253, "re_lu_56": 253, "batch_normalization_57": 253, "re_lu_57": 253, "batch_normalization_58": 253, "add_17": 253, "re_lu_58": 253, "batch_normalization_59": 253, "re_lu_59": 253, "batch_normalization_60": 253, "re_lu_60": 253, "batch_normalization_61": 253, "add_18": 253, "re_lu_61": 253, "batch_normalization_62": 253, "re_lu_62": 253, "batch_normalization_63": 253, "re_lu_63": 253, "batch_normalization_64": 253, "add_19": 253, "re_lu_64": 253, "averagepool": 253, "ing2d": 253, "803": 253, "055": 253, "98x1x50": 253, "98x1x150": 253, "1x1x50": 253, "49x1x150": 253, "9x1x150": 253, "49x1x50": 253, "1x1x150": 253, "25x1x150": 253, "25x1x50": 253, "13x1x150": 253, "13x1x50": 253, "7x1x150": 253, "7x1x50": 253, "4x1x150": 253, "4x1x50": 253, "888": 253, "957": 253, "ff35e03b5bd73d1e70c4fb37444e1eb2": 253, "15t22": 253, "758z": 253, "608": 253, "50x3x1x104": 253, "1x98x1x50": 253, "735": 253, "428": 253, "150x1x1x50": 253, "1x98x1x150": 253, "1x9x1x150": 253, "1x49x1x150": 253, "367": 253, "50x1x1x150": 253, "1x49x1x50": 253, "50x1x1x50": 253, "757": 253, "1x25x1x150": 253, "376": 253, "1x25x1x50": 253, "386": 253, "109": 253, "1x13x1x150": 253, "1x13x1x50": 253, "650": 253, "1x7x1x150": 253, "1x7x1x50": 253, "875": 253, "1x4x1x150": 253, "1x4x1x50": 253, "1x1x1x50": 253, "1x50": 253, "237": 253, "3x50": 253, "583819": 253, "128kb": 253, "115kb": 253, "112kb": 253, "110kb": 253, "136kb": 253, "117kb": 253, "113kb": 253, "111kb": 253, "955": 253, "602": [253, 257], "301": 253, "117": 253, "630": [253, 257], "712": 253, "643935": 253, "autograph": 253, "pyct": 253, "static_analysi": 253, "lamba_check": 253, "09": 253, "fuction": 253, "statement": [253, 256], "56089": 253, "400": 253, "10400": 253, "20400": 253, "25400": 253, "30400": 253, "35400": 253, "40400": 253, "5629": 253, "3200": 253, "0010": 253, "183m": 253, "5616": 253, "3350": 253, "184m": 253, "5739": 253, "3433": 253, "7347": 253, "3333": 253, "eta": 253, "6279": 253, "2800": 253, "5664": 253, "2900": 253, "5099": 253, "3300": 253, "582m": 253, "3087": 253, "3067": 253, "5246": 253, "3000": 253, "4343": 253, "4006": 253, "3533": 253, "648m": 253, "2055": 253, "3567": 253, "63predict": 253, "21predict": 253, "37predict": 253, "88predict": 253, "007": 253, "163": 253, "45predict": 253, "95predict": 253, "464": [253, 257], "770": [253, 258], "505": [253, 258], "vm": 253, "intend": [253, 259], "certainli": 253, "benefici": 253, "fed": 253, "simultan": 253, "627": 253, "010": 253, "553": [253, 258, 259], "024": 253, "043": 253, "468": [253, 257], "scenario": 253, "mouth": [253, 255, 257], "inch": [253, 255, 257], "beamform": 253, "javascript": 254, "youtub": 254, "ran": 254, "keyword_spotting_pacman_v3": 254, "likewis": 254, "arrow": 254, "ghost": 254, "954": 254, "169": 254, "656699": 254, "engin": [254, 257, 258], "notif": 254, "lucio": 254, "panpinto": 254, "p5": 254, "vanilla": 254, "css": 254, "s37": 254, "keyword_spotting_with_transfer_learn": 255, "aphex34": 255, "sa": [255, 259], "meaning": 255, "textur": 255, "abstract": 255, "Of": 255, "relearn": 255, "bike": 255, "whose": [255, 259], "130m": 255, "tune": [255, 257], "shorter": 255, "mtlkobject": 255, "callstack": 256, "audiodatageneratorset": 257, "my_keyword_spotting_mobilenetv2": 257, "saniti": 257, "spec": 257, "1410": 257, "custommaskwarn": 257, "mask": 257, "custom_object": 257, "layer_config": 257, "serialize_layer_fn": 257, "fully_quant": 257, "inference_typ": 257, "input_inference_typ": 257, "output_inference_typ": 257, "00001": 257, "00002": 257, "00095": 257, "00003": 257, "0009025": 257, "30x25x32": 257, "30x25x16": 257, "30x25x96": 257, "31x27x96": 257, "15x13x96": 257, "15x13x24": 257, "15x13x144": 257, "17x15x144": 257, "8x7x144": 257, "8x7x32": 257, "8x7x192": 257, "3x3x192": 257, "1x1x192": 257, "9x9x192": 257, "4x4x192": 257, "4x4x384": 257, "3x3x384": 257, "1x1x384": 257, "4x4x576": 257, "576": 257, "3x3x576": 257, "1x1x576": 257, "5x5x576": 257, "2x2x576": 257, "2x2x160": 257, "2x2x960": 257, "1x1x160": 257, "3x3x960": 257, "1x1x960": 257, "2x2x320": 257, "2x2x1280": 257, "1x1x320": 257, "925": 257, "120e1504bcad5f01e644acf9d21b66ff": 257, "14t21": 257, "975z": 257, "7mb": 257, "5mb": 257, "15x13x16": 257, "17x15x96": 257, "8x7x96": 257, "8x7x16": 257, "9x9x96": 257, "4x4x32": 257, "4x4x288": 257, "3x3x288": 257, "1x1x288": 257, "5x5x288": 257, "2x2x288": 257, "2x2x80": 257, "2x2x480": 257, "1x1x80": 257, "3x3x480": 257, "1x1x480": 257, "819": 257, "371": 257, "d226b3204bbaf021713d425e9bdf623c": 257, "895z": 257, "983": 257, "983kb": 257, "368": 257, "1x30x25x16": 257, "378": 257, "318": 257, "8x1x1x16": 257, "149": 257, "1x15x13x16": 257, "655": 257, "1x15x13x96": 257, "393": 257, "286": 257, "146": 257, "544": 257, "1x17x15x96": 257, "1x8x7x96": 257, "134": 257, "1x8x7x16": 257, "188": 257, "161": [257, 258], "158": 257, "1x9x9x96": 257, "1x4x4x32": 257, "192x1x1x32": 257, "1x4x4x192": 257, "1x3x3x192": 257, "32x1x1x192": 257, "295": 257, "48x1x1x192": 257, "221": 257, "288x1x1x48": 257, "1x4x4x288": 257, "1x3x3x288": 257, "48x1x1x288": 257, "1x5x5x288": 257, "1x2x2x288": 257, "80x1x1x288": 257, "1x2x2x80": 257, "313": 257, "480x1x1x80": 257, "1x2x2x480": 257, "1x3x3x480": 257, "232": 257, "80x1x1x480": 257, "615": 257, "160x1x1x480": 257, "1x2x2x160": 257, "1280x1x1x160": 257, "1x2x2x1280": 257, "2560": 257, "2047": [257, 258], "1x1280": 257, "8x1280": 257, "375422": 257, "unfortun": [257, 258], "realli": 257, "120m": 257, "overkil": 257, "228": 257, "201": 257, "121": 257, "606283": 257, "matlab": 258, "cifar10_matlab_model": 258, "exportonnxnetwork": 258, "trainednet": 258, "straight": 258, "largest": 258, "assumpt": 258, "necessarili": 258, "mini": 258, "nchw": 258, "nhwc": 258, "onnx_tf": 258, "onnsim": 258, "daquexian": 258, "openvino_dev": 258, "openvino2tensorflow": 258, "primarili": [258, 259], "pinto0309": 258, "tensorflow_dataset": 258, "onnx_model_archive_url": 258, "8m72rmxtznvaki6": 258, "onnx_model_archive_sha1": 258, "c53827fc8b765183381cdc338afb88f735479d97": 258, "cifar10_matlab_model_example_dir": 258, "webapg": 258, "onnx_model_path": 258, "working_dir": 258, "cifar10_matlab_model_onnx_to_tflit": 258, "model_nam": 258, "class_label": 258, "particularli": 258, "mapped_class_label": 258, "class_id_map": 258, "veru": 258, "onnx_model": 258, "tf_rep": 258, "x_test_channels_first": 258, "chw": 258, "github_siliconlab": 258, "tensorflow_addon": 258, "ensure_tf_instal": 258, "nightli": 258, "bug": 258, "578": 258, "964": 258, "679": 258, "556": 258, "287": 258, "085": 258, "073": 258, "673": 258, "overhead": 258, "onnxsim": 258, "simplified_onnx_model": 258, "success": 258, "simplified_onnx_model_path": 258, "doabl": 258, "mo": 258, "mo_main": 258, "shell_cmd": 258, "openvino_out_dir": 258, "__file__": 258, "input_model": 258, "fp32": 258, "legaci": 258, "7019": 258, "cdb9bec7210": 258, "xml": [258, 259], "intel": 258, "tm": 258, "cid": 258, "prod": 258, "campid": 258, "ww_2022_bu_iotg_openvino": 258, "upg_al": 258, "v11": 258, "openvino2tensorflow_out_dir": 258, "openvino_xml_nam": 258, "nt": 258, "openvino2tensorflow_exe_cmd": 258, "model_output_path": 258, "output_saved_model": 258, "output_no_quant_float32_tflit": 258, "tflite_int8_model_path": 258, "tflite_quant_model": 258, "87295": 258, "mvp_estimators_v0": 258, "962": 258, "111": 258, "1x36x36x3": 258, "310": 258, "64x5x5x3": 258, "1x32x32x64": 258, "1x16x16x64": 258, "1x20x20x64": 258, "64x5x5x64": 258, "248": 258, "9u": 258, "1x4x4x64": 258, "64x4x4x64": 258, "10x1x1x64": 258, "1x1x1x10": 258, "36x36x3": 258, "32x32x64": 258, "5x5x3": 258, "16x16x64": 258, "20x20x64": 258, "5x5x64": 258, "1x1x10": 258, "909": 258, "429": 258, "949": 258, "889": 258, "796": 258, "778": 258, "389": 258, "848": 258, "pronunci": 259, "sad": 259, "excit": 259, "characterisit": 259, "50k": 259, "20k": 259, "sparingli": 259, "russian": 259, "smart": 259, "lid": 259, "react": 259, "closet": 259, "solv": 259, "cheap": 259, "januari": 259, "websit": 259, "wavenet": 259, "neural2": 259, "000004": 259, "usd": 259, "000016": 259, "markup": 259, "xmln": 259, "w3": 259, "2001": 259, "synthesi": 259, "lang": 259, "jennyneur": 259, "mstt": 259, "cheer": 259, "prosodi": 259, "whitespac": 259, "220": 259, "credit": 259, "quota": 259, "humanlik": 259, "synthes": 259, "prebuilt": 259, "brand": 259, "polli": 259, "lifelik": 259, "engag": 259, "cognit": 259, "pivot": 259, "speech_kei": 259, "e8699507e7c04a4cb8afdba62986987c": 259, "speech_region": 259, "westus2": 259, "codelab": 259, "serivc": 259, "google_application_credenti": 259, "private_kei": 259, "private_key_id": 259, "client_email": 259, "neb6y5zodg2dyjmm": 259, "jdahcnaprd9": 259, "hamrg3jl2jisvzo": 259, "03aexjyoewtblwfpyxpnqyz4wkbgqdd": 259, "yvywcrbxeecn": 259, "client_id": 259, "gcp_service_account_json_path": 259, "gcp_kei": 259, "gcp_service_account_json": 259, "service_account": 259, "project_id": 259, "strang": 259, "firefli": 259, "374023": 259, "8e074b2dc4da026810d6b728e1588e79a745a08c": 259, "nmiievqibadanbgkqhkig9w0baqefaascbkcwggsjageaaoibaqcuq4fpo6ilib78": 259, "nmhyrhb1ei2pcegtthrlxbqwe6rswppttopqvplsbxs30frarpd6d4hgqel46gc2d": 259, "ncrhh8omrgkmb4pagzhcefjd": 259, "xjkcknsyipltqgbjau3pt": 259, "wmukihdyiyzdd6qjr3": 259, "nugghp8hkt1gxgcgdfkplwvoj9b3m6b5": 259, "3cvgbthciycccykhqnfon6mtee6ofmpz": 259, "nwxy3frewywjiwiiivpbqanoijs92gb": 259, "ffgsg2ta63tgszmbvvhjtd3a98ewmvwsz": 259, "nbipxjqh5qlh3ychdgt42mqbxrinn11kmyoc56a2ic4mvrq3i8oapos2l6uglwx9j": 259, "ns6sq5jw1agmbaaecggeat7ps2vknnk61fpvcanjszangwkonmfru48rgvn7rpetq": 259, "n9": 259, "gkgfzium3hlit5ek7jkzlmg4higcfkvrqjlpglsagi8rpvcubxs8xncljujvm3": 259, "nvhf9arln": 259, "s3nkedic8tpnv": 259, "ouji": 259, "yivhpqmewbsxmdtd2jd3vbsf34": 259, "7rou5dz": 259, "n56bgmbbneb6y5zodg2dyjmm": 259, "hamrg3jl2jisvzogrlenelkznrp": 259, "n9t0uwqiv5ejitovbzd": 259, "ezadffjftdrkfwv1qixemiak1atbs5bhknk5ecyffmpm": 259, "ncivgp3wrxq7nfrjktnwdjzeafjqw4ckwlmn4xc2fgqkbgqdjobnxjgo7gq1pfeiq": 259, "nvssuwjixy63tru6jwrrhr1b9xuph6vivh2dz4lpfpywer9lx6omtn6aizihtpq1i": 259, "n19eskh0h6hwbw2ydzwghzrmhb9xs5i": 259, "hibkwrz9nw77uwh1d9g": 259, "ejcn6a2zl2ig": 259, "nk03aexjyoewtblwfpyxpnqyz4wkbgqdd": 259, "yvywcrbxeecna0fohw8wiro6ds6g84m": 259, "nmczkr0yooxpb8zriim": 259, "mv7paccelasz4lzbc2hcb1mvv9p6o2ieuhqngabwlfwid": 259, "ng7cc7rm4qee87p5u4obuhpciuzpa3ueaqbhxmwd1oxw5rjvxenn": 259, "7g4jzkxeru": 259, "nqif7cw6zhwkbgby5dctjwdpssol8yfnc36jyitjufn43nms30xlifiidwmmtnpui": 259, "nrmom42sshi1sgtegslyboiij6zbf": 259, "vrmm4x1y9ahzsjyngnxw9bc": 259, "s5nlmrjcck": 259, "n6iw30jtumlivjgtumocqwsuaewbrmrszgjl4zin3xl": 259, "aifkcptgxfg7daogavz6b": 259, "njmuzkjpoirjfsvrkhuus7p2dhojr5n0hbyct9a09dwkfnyiu": 259, "awhqnib": 259, "pymv2m8": 259, "njttmms9orc6gzpus4r8m7ipa": 259, "myn": 259, "twhvrh3pbwxzqw3eiroqrepxhepuuyiwz6r": 259, "nuvpkw3rrl": 259, "wjihdqavo89wrk": 259, "gzldgynqyqixescgyeaj": 259, "8nsq1ugod7sqfpia": 259, "n3wur4a": 259, "uyt8": 259, "nuatk2ww": 259, "gtbc": 259, "eddjre1lz3f": 259, "uqgtsxlsv7t1mw4a7ekrkfl36p": 259, "nlnvefbtb3ucd8jj0lpbtoqru9i8n": 259, "a4fqopmljoyelgtyt1oi": 259, "vxfwya7cmrz": 259, "n49be21meuv3prv1qwrrteem": 259, "iam": 259, "gserviceaccount": 259, "109154742213348109867": 259, "auth_uri": 259, "oauth2": 259, "auth": 259, "token_uri": 259, "auth_provider_x509_cert_url": 259, "cert": 259, "client_x509_cert_url": 259, "x509": 259, "40strang": 259, "dg": 259, "aws_access_key_id": 259, "akiatzwwzr5twbunf6ix": 259, "aws_secret_access_kei": 259, "v0irhpugenwj1ca7savduf1uxw84bgkzqpowlfdr": 259, "aws_default_region": 259, "west": 259, "aag": 259, "nwarn": 259, "npress": 259, "623": 259, "52word": 259, "17word": 259}, "objects": {"mltk.core": [[111, 0, 1, "", "AudioDatasetMixin"], [158, 0, 1, "", "AutoEncoderEvaluationResults"], [158, 0, 1, "", "ClassifierEvaluationResults"], [112, 0, 1, "", "DatasetMixin"], [113, 0, 1, "", "EvaluateAutoEncoderMixin"], [114, 0, 1, "", "EvaluateClassifierMixin"], [115, 0, 1, "", "EvaluateMixin"], [158, 0, 1, "", "EvaluationResults"], [116, 0, 1, "", "ImageDatasetMixin"], [110, 3, 1, "", "KerasModel"], [118, 0, 1, "", "MltkDataset"], [119, 0, 1, "", "MltkModel"], [120, 0, 1, "", "MltkModelEvent"], [121, 0, 1, "", "SshMixin"], [173, 0, 1, "", "TfliteActivation"], [174, 0, 1, "", "TfliteAddLayer"], [176, 0, 1, "", "TfliteConv2DLayerOptions"], [175, 0, 1, "", "TfliteConv2dLayer"], [177, 0, 1, "", "TfliteConvParams"], [179, 0, 1, "", "TfliteDepthwiseConv2DLayerOptions"], [178, 0, 1, "", "TfliteDepthwiseConv2dLayer"], [180, 0, 1, "", "TfliteDepthwiseConvParams"], [181, 0, 1, "", "TfliteDequantizeLayer"], [183, 0, 1, "", "TfliteFullyConnectedLayer"], [184, 0, 1, "", "TfliteFullyConnectedLayerOptions"], [185, 0, 1, "", "TfliteFullyConnectedParams"], [187, 0, 1, "", "TfliteLayer"], [188, 0, 1, "", "TfliteModel"], [190, 0, 1, "", "TfliteModelParameters"], [189, 0, 1, "", "TflitePadding"], [192, 0, 1, "", "TflitePool2DLayerOptions"], [193, 0, 1, "", "TflitePoolParams"], [191, 0, 1, "", "TflitePooling2dLayer"], [194, 0, 1, "", "TfliteQuantization"], [195, 0, 1, "", "TfliteQuantizeLayer"], [196, 0, 1, "", "TfliteReshapeLayer"], [197, 0, 1, "", "TfliteShape"], [198, 0, 1, "", "TfliteTensor"], [199, 0, 1, "", "TfliteTransposeConvLayer"], [200, 0, 1, "", "TfliteTransposeConvLayerOptions"], [201, 0, 1, "", "TfliteTransposeConvParams"], [122, 0, 1, "", "TrainMixin"], [124, 0, 1, "", "WeightsAndBiasesMixin"], [158, 4, 1, "", "evaluate_autoencoder"], [158, 4, 1, "", "evaluate_classifier"], [158, 4, 1, "", "evaluate_model"], [123, 4, 1, "", "list_mltk_models"], [123, 4, 1, "", "load_mltk_model"], [123, 4, 1, "", "load_mltk_model_with_path"], [123, 4, 1, "", "load_tflite_model"], [123, 4, 1, "", "load_tflite_or_keras_model"], [160, 4, 1, "", "profile_model"], [161, 4, 1, "", "quantize_model"], [162, 4, 1, "", "summarize_model"], [163, 4, 1, "", "train_model"], [164, 4, 1, "", "update_model_parameters"], [165, 4, 1, "", "view_model"]], "mltk.core.AudioDatasetMixin": [[111, 1, 1, "", "audio_classes"], [111, 1, 1, "", "audio_input_shape"], [111, 1, 1, "", "class_counts"], [111, 1, 1, "", "class_mode"], [111, 1, 1, "", "class_weights"], [111, 1, 1, "", "datagen"], [111, 1, 1, "", "datagen_context"], [111, 1, 1, "", "dataset"], [111, 1, 1, "", "follow_links"], [111, 1, 1, "", "frontend_settings"], [111, 2, 1, "", "get_datagen_creator"], [111, 2, 1, "", "get_shuffle_index_dir"], [111, 2, 1, "", "load_dataset"], [111, 1, 1, "", "loaded_subset"], [111, 1, 1, "", "sample_length_ms"], [111, 1, 1, "", "sample_rate_hz"], [111, 1, 1, "", "sample_weight"], [111, 1, 1, "", "shuffle"], [111, 1, 1, "", "shuffle_dataset_enabled"], [111, 1, 1, "", "steps_per_epoch"], [111, 2, 1, "", "summarize_dataset"], [111, 2, 1, "", "unload_dataset"], [111, 1, 1, "", "validation_batch_size"], [111, 1, 1, "", "validation_data"], [111, 1, 1, "", "validation_datagen"], [111, 1, 1, "", "validation_freq"], [111, 1, 1, "", "validation_split"], [111, 1, 1, "", "validation_steps"], [111, 1, 1, "", "x"], [111, 1, 1, "", "y"]], "mltk.core.AutoEncoderEvaluationResults": [[158, 2, 1, "", "__init__"], [158, 2, 1, "", "calculate"], [158, 1, 1, "", "class_stats"], [158, 1, 1, "", "classes"], [158, 2, 1, "", "generate_plots"], [158, 2, 1, "", "generate_summary"], [158, 1, 1, "", "overall_accuracy"], [158, 1, 1, "", "overall_fpr"], [158, 1, 1, "", "overall_pr_accuracy"], [158, 1, 1, "", "overall_precision"], [158, 1, 1, "", "overall_recall"], [158, 1, 1, "", "overall_roc_auc"], [158, 1, 1, "", "overall_thresholds"], [158, 1, 1, "", "overall_tpr"]], "mltk.core.ClassifierEvaluationResults": [[158, 2, 1, "", "__init__"], [158, 2, 1, "", "calculate"], [158, 1, 1, "", "class_accuracies"], [158, 1, 1, "", "classes"], [158, 1, 1, "", "confusion_matrix"], [158, 1, 1, "", "false_positive_rate"], [158, 1, 1, "", "fpr"], [158, 2, 1, "", "generate_plots"], [158, 2, 1, "", "generate_summary"], [158, 1, 1, "", "overall_accuracy"], [158, 1, 1, "", "precision"], [158, 1, 1, "", "recall"], [158, 1, 1, "", "roc_auc"], [158, 1, 1, "", "roc_auc_avg"], [158, 1, 1, "", "roc_thresholds"], [158, 1, 1, "", "tpr"]], "mltk.core.DatasetMixin": [[112, 1, 1, "", "class_counts"], [112, 1, 1, "", "class_weights"], [112, 1, 1, "", "dataset"], [112, 2, 1, "", "load_dataset"], [112, 1, 1, "", "loaded_subset"], [112, 1, 1, "", "sample_weight"], [112, 1, 1, "", "shuffle"], [112, 1, 1, "", "steps_per_epoch"], [112, 2, 1, "", "summarize_dataset"], [112, 2, 1, "", "unload_dataset"], [112, 1, 1, "", "validation_batch_size"], [112, 1, 1, "", "validation_data"], [112, 1, 1, "", "validation_freq"], [112, 1, 1, "", "validation_split"], [112, 1, 1, "", "validation_steps"], [112, 1, 1, "", "x"], [112, 1, 1, "", "y"]], "mltk.core.EvaluateAutoEncoderMixin": [[113, 1, 1, "", "eval_augment"], [113, 1, 1, "", "eval_classes"], [113, 1, 1, "", "eval_custom_function"], [113, 1, 1, "", "eval_max_samples_per_class"], [113, 1, 1, "", "eval_shuffle"], [113, 1, 1, "", "eval_steps_per_epoch"], [113, 2, 1, "", "get_scoring_function"], [113, 1, 1, "", "scoring_function"]], "mltk.core.EvaluateClassifierMixin": [[114, 1, 1, "", "eval_augment"], [114, 1, 1, "", "eval_custom_function"], [114, 1, 1, "", "eval_max_samples_per_class"], [114, 1, 1, "", "eval_shuffle"], [114, 1, 1, "", "eval_steps_per_epoch"]], "mltk.core.EvaluateMixin": [[115, 1, 1, "", "eval_custom_function"], [115, 1, 1, "", "eval_steps_per_epoch"]], "mltk.core.EvaluationResults": [[158, 2, 1, "", "__init__"], [158, 2, 1, "", "generate_plots"], [158, 2, 1, "", "generate_summary"], [158, 1, 1, "", "model_type"], [158, 1, 1, "", "name"]], "mltk.core.ImageDatasetMixin": [[116, 1, 1, "", "class_counts"], [116, 1, 1, "", "class_mode"], [116, 1, 1, "", "class_weights"], [116, 1, 1, "", "color_mode"], [116, 1, 1, "", "datagen"], [116, 1, 1, "", "datagen_context"], [116, 1, 1, "", "dataset"], [116, 1, 1, "", "follow_links"], [116, 2, 1, "", "get_datagen_creator"], [116, 2, 1, "", "get_shuffle_index_dir"], [116, 1, 1, "", "image_classes"], [116, 1, 1, "", "image_input_shape"], [116, 1, 1, "", "interpolation"], [116, 2, 1, "", "load_dataset"], [116, 1, 1, "", "loaded_subset"], [116, 1, 1, "", "sample_weight"], [116, 1, 1, "", "shuffle"], [116, 1, 1, "", "shuffle_dataset_enabled"], [116, 1, 1, "", "steps_per_epoch"], [116, 2, 1, "", "summarize_dataset"], [116, 1, 1, "", "target_size"], [116, 2, 1, "", "unload_dataset"], [116, 1, 1, "", "validation_batch_size"], [116, 1, 1, "", "validation_data"], [116, 1, 1, "", "validation_datagen"], [116, 1, 1, "", "validation_freq"], [116, 1, 1, "", "validation_split"], [116, 1, 1, "", "validation_steps"], [116, 1, 1, "", "x"], [116, 1, 1, "", "y"]], "mltk.core.MltkDataset": [[118, 2, 1, "", "load_dataset"], [118, 2, 1, "", "summarize_class_counts"], [118, 2, 1, "", "summarize_dataset"], [118, 2, 1, "", "unload_dataset"]], "mltk.core.MltkModel": [[119, 2, 1, "", "__init__"], [119, 2, 1, "", "add_archive_dir"], [119, 2, 1, "", "add_archive_file"], [119, 2, 1, "", "add_event_handler"], [119, 2, 1, "", "add_model_parameter_populate_callback"], [119, 2, 1, "", "add_tflite_metadata_entry"], [119, 1, 1, "", "archive_path"], [119, 1, 1, "", "attributes"], [119, 2, 1, "", "check_archive_file_is_writable"], [119, 1, 1, "", "classes"], [119, 1, 1, "", "cli"], [119, 2, 1, "", "create_log_dir"], [119, 2, 1, "", "create_logger"], [119, 1, 1, "", "description"], [119, 2, 1, "", "deserialize_tflite_metadata"], [119, 2, 1, "", "enable_test_mode"], [119, 2, 1, "", "get_archive_dir"], [119, 2, 1, "", "get_archive_file"], [119, 2, 1, "", "get_attribute"], [119, 2, 1, "", "get_tflite_metadata_summary"], [119, 1, 1, "", "h5_archive_path"], [119, 1, 1, "", "h5_log_dir_path"], [119, 1, 1, "", "input_shape"], [119, 1, 1, "", "keras_custom_objects"], [119, 1, 1, "", "log_dir"], [119, 1, 1, "", "model_parameters"], [119, 1, 1, "", "model_specification_path"], [119, 1, 1, "", "n_classes"], [119, 1, 1, "", "name"], [119, 2, 1, "", "populate_model_parameters"], [119, 2, 1, "", "serialize_tflite_metadata"], [119, 2, 1, "", "set_model_parameter"], [119, 2, 1, "", "summary"], [119, 1, 1, "", "test_mode_enabled"], [119, 1, 1, "", "tflite_archive_path"], [119, 1, 1, "", "tflite_log_dir_path"], [119, 1, 1, "", "tflite_metadata_entries"], [119, 2, 1, "", "trigger_event"], [119, 1, 1, "", "unquantized_tflite_log_dir_path"], [119, 1, 1, "", "version"]], "mltk.core.MltkModelEvent": [[120, 3, 1, "", "AFTER_BUILD_TRAIN_MODEL"], [120, 3, 1, "", "AFTER_LOAD_DATASET"], [120, 3, 1, "", "AFTER_MODEL_LOAD"], [120, 3, 1, "", "AFTER_PROFILE"], [120, 3, 1, "", "AFTER_QUANTIZE"], [120, 3, 1, "", "AFTER_SAVE_TRAIN_ARCHIVE"], [120, 3, 1, "", "AFTER_SAVE_TRAIN_MODEL"], [120, 3, 1, "", "AFTER_SAVE_TRAIN_RESULTS"], [120, 3, 1, "", "AFTER_TRAIN"], [120, 3, 1, "", "AFTER_UNLOAD_DATASET"], [120, 3, 1, "", "BEFORE_BUILD_TRAIN_MODEL"], [120, 3, 1, "", "BEFORE_LOAD_DATASET"], [120, 3, 1, "", "BEFORE_MODEL_LOAD"], [120, 3, 1, "", "BEFORE_QUANTIZE"], [120, 3, 1, "", "BEFORE_SAVE_TRAIN_ARCHIVE"], [120, 3, 1, "", "BEFORE_SAVE_TRAIN_MODEL"], [120, 3, 1, "", "BEFORE_SAVE_TRAIN_RESULTS"], [120, 3, 1, "", "BEFORE_TRAIN"], [120, 3, 1, "", "BEFORE_UNLOAD_DATASET"], [120, 3, 1, "", "EVALUATE_SHUTDOWN"], [120, 3, 1, "", "EVALUATE_STARTUP"], [120, 3, 1, "", "GENERATE_EVALUATE_PLOT"], [120, 3, 1, "", "POPULATE_TRAIN_CALLBACKS"], [120, 3, 1, "", "QUANTIZE_SHUTDOWN"], [120, 3, 1, "", "QUANTIZE_STARTUP"], [120, 3, 1, "", "SUMMARIZE_DATASET"], [120, 3, 1, "", "SUMMARIZE_MODEL"], [120, 3, 1, "", "TRAIN_SHUTDOWN"], [120, 3, 1, "", "TRAIN_STARTUP"]], "mltk.core.SshMixin": [[121, 1, 1, "", "ssh_create_venv"], [121, 1, 1, "", "ssh_download_files"], [121, 1, 1, "", "ssh_environment"], [121, 1, 1, "", "ssh_remote_dir"], [121, 1, 1, "", "ssh_shutdown_cmds"], [121, 1, 1, "", "ssh_startup_cmds"], [121, 1, 1, "", "ssh_upload_files"]], "mltk.core.TfliteActivation": [[173, 3, 1, "", "NONE"], [173, 3, 1, "", "RELU"], [173, 3, 1, "", "RELU6"], [173, 3, 1, "", "RELU_N1_TO_1"], [173, 3, 1, "", "SIGN_BIT"], [173, 3, 1, "", "TANH"], [173, 2, 1, "", "to_string"]], "mltk.core.TfliteAddLayer": [[174, 2, 1, "", "__init__"], [174, 1, 1, "", "activation"], [174, 2, 1, "", "from_flatbuffer"], [174, 2, 1, "", "get_input_data"], [174, 2, 1, "", "get_input_tensor"], [174, 2, 1, "", "get_output_data"], [174, 2, 1, "", "get_output_tensor"], [174, 1, 1, "", "index"], [174, 1, 1, "", "input1_data"], [174, 1, 1, "", "input1_tensor"], [174, 1, 1, "", "input2_data"], [174, 1, 1, "", "input2_tensor"], [174, 1, 1, "", "inputs"], [174, 1, 1, "", "metadata"], [174, 1, 1, "", "model"], [174, 1, 1, "", "n_inputs"], [174, 1, 1, "", "n_outputs"], [174, 1, 1, "", "name"], [174, 1, 1, "", "opcode"], [174, 1, 1, "", "opcode_str"], [174, 1, 1, "", "options"], [174, 1, 1, "", "output_data"], [174, 1, 1, "", "output_tensor"], [174, 1, 1, "", "outputs"]], "mltk.core.TfliteConv2DLayerOptions": [[176, 2, 1, "", "__init__"], [176, 1, 1, "", "activation"], [176, 1, 1, "", "activation_str"], [176, 1, 1, "", "options_type"], [176, 1, 1, "", "options_type_str"], [176, 1, 1, "", "padding"], [176, 1, 1, "", "padding_str"], [176, 1, 1, "", "stride_height"], [176, 1, 1, "", "stride_width"]], "mltk.core.TfliteConv2dLayer": [[175, 2, 1, "", "__init__"], [175, 1, 1, "", "activation"], [175, 1, 1, "", "bias_data"], [175, 1, 1, "", "bias_tensor"], [175, 1, 1, "", "filters"], [175, 1, 1, "", "filters_data"], [175, 1, 1, "", "filters_tensor"], [175, 2, 1, "", "from_flatbuffer"], [175, 2, 1, "", "get_input_data"], [175, 2, 1, "", "get_input_tensor"], [175, 2, 1, "", "get_output_data"], [175, 2, 1, "", "get_output_tensor"], [175, 1, 1, "", "index"], [175, 1, 1, "", "input_data"], [175, 1, 1, "", "input_tensor"], [175, 1, 1, "", "inputs"], [175, 1, 1, "", "kernel_size"], [175, 1, 1, "", "metadata"], [175, 1, 1, "", "model"], [175, 1, 1, "", "n_inputs"], [175, 1, 1, "", "n_outputs"], [175, 1, 1, "", "name"], [175, 1, 1, "", "opcode"], [175, 1, 1, "", "opcode_str"], [175, 1, 1, "", "options"], [175, 1, 1, "", "output_data"], [175, 1, 1, "", "output_tensor"], [175, 1, 1, "", "outputs"], [175, 1, 1, "", "padding"], [175, 1, 1, "", "params"], [175, 1, 1, "", "strides"], [175, 1, 1, "", "use_bias"]], "mltk.core.TfliteConvParams": [[177, 2, 1, "", "__init__"], [177, 2, 1, "", "calculate"], [177, 3, 1, "", "dilation_height_factor"], [177, 3, 1, "", "dilation_width_factor"], [177, 3, 1, "", "input_offset"], [177, 3, 1, "", "output_offset"], [177, 3, 1, "", "padding"], [177, 3, 1, "", "per_channel_output_multiplier"], [177, 3, 1, "", "per_channel_output_shift"], [177, 3, 1, "", "quantized_activation_max"], [177, 3, 1, "", "quantized_activation_min"], [177, 3, 1, "", "stride_height"], [177, 3, 1, "", "stride_width"], [177, 3, 1, "", "weights_offset"]], "mltk.core.TfliteDepthwiseConv2DLayerOptions": [[179, 2, 1, "", "__init__"], [179, 1, 1, "", "activation"], [179, 1, 1, "", "activation_str"], [179, 1, 1, "", "multiplier"], [179, 1, 1, "", "options_type"], [179, 1, 1, "", "options_type_str"], [179, 1, 1, "", "padding"], [179, 1, 1, "", "padding_str"], [179, 1, 1, "", "stride_height"], [179, 1, 1, "", "stride_width"]], "mltk.core.TfliteDepthwiseConv2dLayer": [[178, 2, 1, "", "__init__"], [178, 1, 1, "", "activation"], [178, 1, 1, "", "bias_data"], [178, 1, 1, "", "bias_tensor"], [178, 1, 1, "", "filters_data"], [178, 1, 1, "", "filters_tensor"], [178, 2, 1, "", "from_flatbuffer"], [178, 2, 1, "", "get_input_data"], [178, 2, 1, "", "get_input_tensor"], [178, 2, 1, "", "get_output_data"], [178, 2, 1, "", "get_output_tensor"], [178, 1, 1, "", "index"], [178, 1, 1, "", "input_data"], [178, 1, 1, "", "input_tensor"], [178, 1, 1, "", "inputs"], [178, 1, 1, "", "kernel_size"], [178, 1, 1, "", "metadata"], [178, 1, 1, "", "model"], [178, 1, 1, "", "multiplier"], [178, 1, 1, "", "n_inputs"], [178, 1, 1, "", "n_outputs"], [178, 1, 1, "", "name"], [178, 1, 1, "", "opcode"], [178, 1, 1, "", "opcode_str"], [178, 1, 1, "", "options"], [178, 1, 1, "", "output_data"], [178, 1, 1, "", "output_tensor"], [178, 1, 1, "", "outputs"], [178, 1, 1, "", "padding"], [178, 1, 1, "", "params"], [178, 1, 1, "", "strides"], [178, 1, 1, "", "use_bias"]], "mltk.core.TfliteDepthwiseConvParams": [[180, 2, 1, "", "__init__"], [180, 2, 1, "", "calculate"], [180, 3, 1, "", "depth_multiplier"], [180, 3, 1, "", "dilation_height_factor"], [180, 3, 1, "", "dilation_width_factor"], [180, 3, 1, "", "input_offset"], [180, 3, 1, "", "output_offset"], [180, 3, 1, "", "padding"], [180, 3, 1, "", "per_channel_output_multiplier"], [180, 3, 1, "", "per_channel_output_shift"], [180, 3, 1, "", "quantized_activation_max"], [180, 3, 1, "", "quantized_activation_min"], [180, 3, 1, "", "stride_height"], [180, 3, 1, "", "stride_width"], [180, 3, 1, "", "weights_offset"]], "mltk.core.TfliteDequantizeLayer": [[181, 2, 1, "", "__init__"], [181, 2, 1, "", "from_flatbuffer"], [181, 2, 1, "", "get_input_data"], [181, 2, 1, "", "get_input_tensor"], [181, 2, 1, "", "get_output_data"], [181, 2, 1, "", "get_output_tensor"], [181, 1, 1, "", "index"], [181, 1, 1, "", "input_data"], [181, 1, 1, "", "input_tensor"], [181, 1, 1, "", "inputs"], [181, 1, 1, "", "metadata"], [181, 1, 1, "", "model"], [181, 1, 1, "", "n_inputs"], [181, 1, 1, "", "n_outputs"], [181, 1, 1, "", "name"], [181, 1, 1, "", "opcode"], [181, 1, 1, "", "opcode_str"], [181, 1, 1, "", "options"], [181, 1, 1, "", "output_data"], [181, 1, 1, "", "output_tensor"], [181, 1, 1, "", "outputs"]], "mltk.core.TfliteFullyConnectedLayer": [[183, 2, 1, "", "__init__"], [183, 1, 1, "", "accumulator_depth"], [183, 1, 1, "", "activation"], [183, 1, 1, "", "bias_data"], [183, 1, 1, "", "bias_tensor"], [183, 2, 1, "", "from_flatbuffer"], [183, 2, 1, "", "get_input_data"], [183, 2, 1, "", "get_input_tensor"], [183, 2, 1, "", "get_output_data"], [183, 2, 1, "", "get_output_tensor"], [183, 1, 1, "", "index"], [183, 1, 1, "", "input_data"], [183, 1, 1, "", "input_tensor"], [183, 1, 1, "", "inputs"], [183, 1, 1, "", "metadata"], [183, 1, 1, "", "model"], [183, 1, 1, "", "n_inputs"], [183, 1, 1, "", "n_outputs"], [183, 1, 1, "", "name"], [183, 1, 1, "", "opcode"], [183, 1, 1, "", "opcode_str"], [183, 1, 1, "", "options"], [183, 1, 1, "", "output_data"], [183, 1, 1, "", "output_tensor"], [183, 1, 1, "", "outputs"], [183, 1, 1, "", "params"], [183, 1, 1, "", "units"], [183, 1, 1, "", "use_bias"], [183, 1, 1, "", "weights_data"], [183, 1, 1, "", "weights_tensor"]], "mltk.core.TfliteFullyConnectedLayerOptions": [[184, 2, 1, "", "__init__"], [184, 1, 1, "", "activation"], [184, 1, 1, "", "activation_str"], [184, 1, 1, "", "options_type"], [184, 1, 1, "", "options_type_str"]], "mltk.core.TfliteFullyConnectedParams": [[185, 2, 1, "", "__init__"], [185, 2, 1, "", "calculate"], [185, 3, 1, "", "input_offset"], [185, 3, 1, "", "output_multiplier"], [185, 3, 1, "", "output_offset"], [185, 3, 1, "", "output_shift"], [185, 3, 1, "", "quantized_activation_max"], [185, 3, 1, "", "quantized_activation_min"], [185, 3, 1, "", "weights_offset"]], "mltk.core.TfliteLayer": [[187, 2, 1, "", "__init__"], [187, 2, 1, "", "from_flatbuffer"], [187, 2, 1, "", "get_input_data"], [187, 2, 1, "", "get_input_tensor"], [187, 2, 1, "", "get_output_data"], [187, 2, 1, "", "get_output_tensor"], [187, 1, 1, "", "index"], [187, 1, 1, "", "inputs"], [187, 1, 1, "", "metadata"], [187, 1, 1, "", "model"], [187, 1, 1, "", "n_inputs"], [187, 1, 1, "", "n_outputs"], [187, 1, 1, "", "name"], [187, 1, 1, "", "opcode"], [187, 1, 1, "", "opcode_str"], [187, 1, 1, "", "options"], [187, 1, 1, "", "outputs"]], "mltk.core.TfliteModel": [[188, 2, 1, "", "__init__"], [188, 2, 1, "", "add_metadata"], [188, 2, 1, "", "dequantize_output_to_float32"], [188, 1, 1, "", "description"], [188, 1, 1, "", "filename"], [188, 1, 1, "", "flatbuffer_data"], [188, 1, 1, "", "flatbuffer_model"], [188, 1, 1, "", "flatbuffer_size"], [188, 1, 1, "", "flatbuffer_subgraph"], [188, 2, 1, "", "get_all_metadata"], [188, 2, 1, "", "get_flatbuffer_subgraph"], [188, 2, 1, "", "get_input_data"], [188, 2, 1, "", "get_input_tensor"], [188, 2, 1, "", "get_metadata"], [188, 2, 1, "", "get_output_data"], [188, 2, 1, "", "get_output_tensor"], [188, 2, 1, "", "get_tensor"], [188, 2, 1, "", "get_tensor_data"], [188, 1, 1, "", "inputs"], [188, 1, 1, "", "layers"], [188, 2, 1, "", "load_flatbuffer_file"], [188, 1, 1, "", "n_inputs"], [188, 1, 1, "", "n_outputs"], [188, 1, 1, "", "n_subgraphs"], [188, 1, 1, "", "name"], [188, 1, 1, "", "outputs"], [188, 1, 1, "", "path"], [188, 2, 1, "", "predict"], [188, 2, 1, "", "quantize_to_input_dtype"], [188, 2, 1, "", "regenerate_flatbuffer"], [188, 2, 1, "", "remove_metadata"], [188, 2, 1, "", "save"], [188, 1, 1, "", "selected_model_subgraph"], [188, 2, 1, "", "summary"], [188, 1, 1, "", "tensors"]], "mltk.core.TfliteModelParameters": [[190, 2, 1, "", "__init__"], [190, 2, 1, "", "__new__"], [190, 2, 1, "", "add_to_tflite_file"], [190, 2, 1, "", "add_to_tflite_flatbuffer"], [190, 2, 1, "", "add_to_tflite_model"], [190, 2, 1, "", "clear"], [190, 2, 1, "", "copy"], [190, 2, 1, "", "deserialize"], [190, 2, 1, "", "fromkeys"], [190, 2, 1, "", "get"], [190, 2, 1, "", "items"], [190, 2, 1, "", "keys"], [190, 2, 1, "", "load_from_tflite_file"], [190, 2, 1, "", "load_from_tflite_flatbuffer"], [190, 2, 1, "", "load_from_tflite_model"], [190, 2, 1, "", "pop"], [190, 2, 1, "", "popitem"], [190, 2, 1, "", "put"], [190, 2, 1, "", "serialize"], [190, 2, 1, "", "setdefault"], [190, 2, 1, "", "summary"], [190, 2, 1, "", "update"], [190, 2, 1, "", "values"]], "mltk.core.TflitePadding": [[189, 3, 1, "", "SAME"], [189, 3, 1, "", "VALID"], [189, 1, 1, "", "height"], [189, 2, 1, "", "to_string"], [189, 1, 1, "", "width"]], "mltk.core.TflitePool2DLayerOptions": [[192, 2, 1, "", "__init__"], [192, 1, 1, "", "activation"], [192, 1, 1, "", "activation_str"], [192, 1, 1, "", "filter_height"], [192, 1, 1, "", "filter_width"], [192, 1, 1, "", "options_type"], [192, 1, 1, "", "options_type_str"], [192, 1, 1, "", "padding"], [192, 1, 1, "", "padding_str"], [192, 1, 1, "", "stride_height"], [192, 1, 1, "", "stride_width"]], "mltk.core.TflitePoolParams": [[193, 2, 1, "", "__init__"], [193, 2, 1, "", "calculate"], [193, 3, 1, "", "padding"], [193, 3, 1, "", "quantized_activation_max"], [193, 3, 1, "", "quantized_activation_min"], [193, 3, 1, "", "stride_height"], [193, 3, 1, "", "stride_width"]], "mltk.core.TflitePooling2dLayer": [[191, 2, 1, "", "__init__"], [191, 1, 1, "", "activation"], [191, 2, 1, "", "from_flatbuffer"], [191, 2, 1, "", "get_input_data"], [191, 2, 1, "", "get_input_tensor"], [191, 2, 1, "", "get_output_data"], [191, 2, 1, "", "get_output_tensor"], [191, 1, 1, "", "index"], [191, 1, 1, "", "input_data"], [191, 1, 1, "", "input_tensor"], [191, 1, 1, "", "inputs"], [191, 1, 1, "", "metadata"], [191, 1, 1, "", "model"], [191, 1, 1, "", "n_inputs"], [191, 1, 1, "", "n_outputs"], [191, 1, 1, "", "name"], [191, 1, 1, "", "opcode"], [191, 1, 1, "", "opcode_str"], [191, 1, 1, "", "options"], [191, 1, 1, "", "output_data"], [191, 1, 1, "", "output_tensor"], [191, 1, 1, "", "outputs"], [191, 1, 1, "", "padding"], [191, 1, 1, "", "params"], [191, 1, 1, "", "pool_size"], [191, 1, 1, "", "strides"]], "mltk.core.TfliteQuantization": [[194, 2, 1, "", "__init__"], [194, 1, 1, "", "n_channels"], [194, 1, 1, "", "quantization_dimension"], [194, 1, 1, "", "scale"], [194, 1, 1, "", "zeropoint"]], "mltk.core.TfliteQuantizeLayer": [[195, 2, 1, "", "__init__"], [195, 2, 1, "", "from_flatbuffer"], [195, 2, 1, "", "get_input_data"], [195, 2, 1, "", "get_input_tensor"], [195, 2, 1, "", "get_output_data"], [195, 2, 1, "", "get_output_tensor"], [195, 1, 1, "", "index"], [195, 1, 1, "", "input_data"], [195, 1, 1, "", "input_tensor"], [195, 1, 1, "", "inputs"], [195, 1, 1, "", "metadata"], [195, 1, 1, "", "model"], [195, 1, 1, "", "n_inputs"], [195, 1, 1, "", "n_outputs"], [195, 1, 1, "", "name"], [195, 1, 1, "", "opcode"], [195, 1, 1, "", "opcode_str"], [195, 1, 1, "", "options"], [195, 1, 1, "", "output_data"], [195, 1, 1, "", "output_tensor"], [195, 1, 1, "", "outputs"]], "mltk.core.TfliteReshapeLayer": [[196, 2, 1, "", "__init__"], [196, 2, 1, "", "from_flatbuffer"], [196, 2, 1, "", "get_input_data"], [196, 2, 1, "", "get_input_tensor"], [196, 2, 1, "", "get_output_data"], [196, 2, 1, "", "get_output_tensor"], [196, 1, 1, "", "index"], [196, 1, 1, "", "input_data"], [196, 1, 1, "", "input_tensor"], [196, 1, 1, "", "inputs"], [196, 1, 1, "", "metadata"], [196, 1, 1, "", "model"], [196, 1, 1, "", "n_input_elements"], [196, 1, 1, "", "n_inputs"], [196, 1, 1, "", "n_outputs"], [196, 1, 1, "", "name"], [196, 1, 1, "", "opcode"], [196, 1, 1, "", "opcode_str"], [196, 1, 1, "", "options"], [196, 1, 1, "", "output_data"], [196, 1, 1, "", "output_tensor"], [196, 1, 1, "", "outputs"], [196, 1, 1, "", "requires_copy"]], "mltk.core.TfliteShape": [[197, 2, 1, "", "__new__"], [197, 2, 1, "", "count"], [197, 1, 1, "", "flat_size"], [197, 2, 1, "", "index"]], "mltk.core.TfliteTensor": [[198, 2, 1, "", "__init__"], [198, 1, 1, "", "data"], [198, 1, 1, "", "dtype"], [198, 1, 1, "", "dtype_str"], [198, 1, 1, "", "index"], [198, 1, 1, "", "model"], [198, 1, 1, "", "quantization"], [198, 1, 1, "", "shape"], [198, 2, 1, "", "shape_dtype_str"]], "mltk.core.TfliteTransposeConvLayer": [[199, 2, 1, "", "__init__"], [199, 1, 1, "", "bias_data"], [199, 1, 1, "", "bias_tensor"], [199, 1, 1, "", "filters"], [199, 1, 1, "", "filters_data"], [199, 1, 1, "", "filters_tensor"], [199, 2, 1, "", "from_flatbuffer"], [199, 2, 1, "", "get_input_data"], [199, 2, 1, "", "get_input_tensor"], [199, 2, 1, "", "get_output_data"], [199, 2, 1, "", "get_output_tensor"], [199, 1, 1, "", "index"], [199, 1, 1, "", "input_data"], [199, 1, 1, "", "input_tensor"], [199, 1, 1, "", "inputs"], [199, 1, 1, "", "kernel_size"], [199, 1, 1, "", "metadata"], [199, 1, 1, "", "model"], [199, 1, 1, "", "n_inputs"], [199, 1, 1, "", "n_outputs"], [199, 1, 1, "", "name"], [199, 1, 1, "", "opcode"], [199, 1, 1, "", "opcode_str"], [199, 1, 1, "", "options"], [199, 1, 1, "", "output_data"], [199, 1, 1, "", "output_tensor"], [199, 1, 1, "", "outputs"], [199, 1, 1, "", "padding"], [199, 1, 1, "", "params"], [199, 1, 1, "", "strides"], [199, 1, 1, "", "use_bias"]], "mltk.core.TfliteTransposeConvLayerOptions": [[200, 2, 1, "", "__init__"], [200, 1, 1, "", "options_type"], [200, 1, 1, "", "options_type_str"], [200, 1, 1, "", "padding"], [200, 1, 1, "", "padding_str"], [200, 1, 1, "", "stride_height"], [200, 1, 1, "", "stride_width"]], "mltk.core.TfliteTransposeConvParams": [[201, 2, 1, "", "__init__"], [201, 2, 1, "", "calculate"], [201, 3, 1, "", "input_offset"], [201, 3, 1, "", "output_offset"], [201, 3, 1, "", "padding"], [201, 3, 1, "", "per_channel_output_multiplier"], [201, 3, 1, "", "per_channel_output_shift"], [201, 3, 1, "", "quantized_activation_max"], [201, 3, 1, "", "quantized_activation_min"], [201, 3, 1, "", "stride_height"], [201, 3, 1, "", "stride_width"], [201, 3, 1, "", "weights_offset"]], "mltk.core.TrainMixin": [[122, 1, 1, "", "batch_size"], [122, 1, 1, "", "build_model_function"], [122, 1, 1, "", "checkpoint"], [122, 1, 1, "", "checkpoints_dir"], [122, 1, 1, "", "checkpoints_enabled"], [122, 1, 1, "", "early_stopping"], [122, 1, 1, "", "epochs"], [122, 2, 1, "", "get_checkpoint_path"], [122, 2, 1, "", "get_weights_path"], [122, 1, 1, "", "loss"], [122, 1, 1, "", "lr_schedule"], [122, 1, 1, "", "metrics"], [122, 1, 1, "", "on_save_keras_model"], [122, 1, 1, "", "on_training_complete"], [122, 1, 1, "", "optimizer"], [122, 1, 1, "", "reduce_lr_on_plateau"], [122, 1, 1, "", "tensorboard"], [122, 1, 1, "", "tflite_converter"], [122, 1, 1, "", "train_callbacks"], [122, 1, 1, "", "train_kwargs"], [122, 1, 1, "", "weights_dir"], [122, 1, 1, "", "weights_file_format"]], "mltk.core.WeightsAndBiasesMixin": [[124, 1, 1, "", "wandb_callback"], [124, 1, 1, "", "wandb_config"], [124, 1, 1, "", "wandb_init_kwargs"], [124, 1, 1, "", "wandb_is_disabled"], [124, 1, 1, "", "wandb_is_initialized"], [124, 2, 1, "", "wandb_log"], [124, 1, 1, "", "wandb_model_checkpoint_callback"], [124, 2, 1, "", "wandb_save"], [124, 1, 1, "", "wandb_session_id"]], "mltk.core.preprocess.audio.audio_feature_generator": [[83, 0, 1, "", "AudioFeatureGenerator"], [84, 0, 1, "", "AudioFeatureGeneratorSettings"]], "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator": [[83, 2, 1, "", "__init__"], [83, 2, 1, "", "activity_was_detected"], [83, 2, 1, "", "process_sample"]], "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings": [[84, 2, 1, "", "__init__"], [84, 2, 1, "", "__new__"], [84, 1, 1, "", "activity_detection_alpha_a"], [84, 1, 1, "", "activity_detection_alpha_b"], [84, 1, 1, "", "activity_detection_arm_threshold"], [84, 1, 1, "", "activity_detection_enable"], [84, 1, 1, "", "activity_detection_trip_threshold"], [84, 2, 1, "", "clear"], [84, 2, 1, "", "copy"], [84, 1, 1, "", "dc_notch_filter_coefficient"], [84, 1, 1, "", "dc_notch_filter_enable"], [84, 1, 1, "", "fft_length"], [84, 1, 1, "", "filterbank_lower_band_limit"], [84, 1, 1, "", "filterbank_n_channels"], [84, 1, 1, "", "filterbank_upper_band_limit"], [84, 2, 1, "", "fromkeys"], [84, 2, 1, "", "get"], [84, 2, 1, "", "items"], [84, 2, 1, "", "keys"], [84, 1, 1, "", "log_scale_enable"], [84, 1, 1, "", "log_scale_shift"], [84, 1, 1, "", "noise_reduction_enable"], [84, 1, 1, "", "noise_reduction_even_smoothing"], [84, 1, 1, "", "noise_reduction_min_signal_remaining"], [84, 1, 1, "", "noise_reduction_odd_smoothing"], [84, 1, 1, "", "noise_reduction_smoothing_bits"], [84, 1, 1, "", "pcan_enable"], [84, 1, 1, "", "pcan_gain_bits"], [84, 1, 1, "", "pcan_offset"], [84, 1, 1, "", "pcan_strength"], [84, 2, 1, "", "pop"], [84, 2, 1, "", "popitem"], [84, 1, 1, "", "quantize_dynamic_scale_enable"], [84, 1, 1, "", "quantize_dynamic_scale_range_db"], [84, 1, 1, "", "sample_length"], [84, 1, 1, "", "sample_length_ms"], [84, 1, 1, "", "sample_rate_hz"], [84, 2, 1, "", "setdefault"], [84, 1, 1, "", "spectrogram_shape"], [84, 2, 1, "", "update"], [84, 2, 1, "", "values"], [84, 1, 1, "", "window_size_ms"], [84, 1, 1, "", "window_step_ms"]], "mltk.core.preprocess.audio.parallel_generator": [[81, 0, 1, "", "ParallelAudioDataGenerator"], [82, 0, 1, "", "ParallelProcessParams"]], "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator": [[81, 2, 1, "", "__init__"], [81, 2, 1, "", "adjust_length"], [81, 2, 1, "", "apply_frontend"], [81, 2, 1, "", "apply_transform"], [81, 1, 1, "", "default_transform"], [81, 2, 1, "", "flow_from_directory"], [81, 2, 1, "", "get_random_transform"], [81, 1, 1, "", "sample_length"], [81, 1, 1, "", "sample_length_ms"], [81, 1, 1, "", "sample_rate_hz"], [81, 1, 1, "", "sample_shape"], [81, 2, 1, "", "standardize"]], "mltk.core.preprocess.audio.parallel_generator.ParallelProcessParams": [[82, 2, 1, "", "__init__"]], "mltk.core.preprocess.image.parallel_generator": [[86, 0, 1, "", "ParallelImageDataGenerator"], [87, 0, 1, "", "ParallelProcessParams"]], "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator": [[86, 2, 1, "", "__init__"], [86, 2, 1, "", "apply_transform"], [86, 1, 1, "", "default_transform"], [86, 2, 1, "", "fit"], [86, 2, 1, "", "flow"], [86, 2, 1, "", "flow_from_directory"], [86, 2, 1, "", "get_random_transform"], [86, 2, 1, "", "random_transform"], [86, 2, 1, "", "standardize"]], "mltk.core.preprocess.image.parallel_generator.ParallelProcessParams": [[87, 2, 1, "", "__init__"]], "mltk.core.preprocess.utils": [[80, 5, 0, "-", "audio"], [85, 5, 0, "-", "image"], [89, 5, 0, "-", "list_directory"], [90, 5, 0, "-", "normalize"], [91, 5, 0, "-", "tf_dataset"]], "mltk.core.preprocess.utils.audio": [[80, 4, 1, "", "adjust_length"], [80, 4, 1, "", "apply_frontend"], [80, 4, 1, "", "read_audio_file"], [80, 4, 1, "", "write_audio_file"]], "mltk.core.preprocess.utils.image": [[85, 4, 1, "", "read_image_file"], [85, 4, 1, "", "write_image_file"]], "mltk.core.preprocess.utils.list_directory": [[89, 4, 1, "", "list_dataset_directory"], [89, 4, 1, "", "list_valid_filenames_in_directory"], [89, 4, 1, "", "shuffle_file_list_by_group"], [89, 4, 1, "", "split_file_list"]], "mltk.core.preprocess.utils.normalize": [[90, 4, 1, "", "normalize"]], "mltk.core.preprocess.utils.tf_dataset": [[91, 4, 1, "", "enable_numpy_behavior"], [91, 4, 1, "", "load_audio_directory"], [91, 4, 1, "", "load_image_directory"], [91, 4, 1, "", "parallel_process"]], "mltk.core.profiling_results": [[160, 0, 1, "", "ProfilingLayerResult"], [160, 0, 1, "", "ProfilingModelResults"]], "mltk.core.profiling_results.ProfilingLayerResult": [[160, 2, 1, "", "__init__"], [160, 1, 1, "", "accelerator_cycles"], [160, 1, 1, "", "cpu_cycles"], [160, 1, 1, "", "energy"], [160, 1, 1, "", "error_msg"], [160, 2, 1, "", "get_summary"], [160, 1, 1, "", "index"], [160, 1, 1, "", "input_dtype_str"], [160, 1, 1, "", "input_shape_str"], [160, 1, 1, "", "is_accelerated"], [160, 1, 1, "", "is_unsupported"], [160, 1, 1, "", "macs"], [160, 1, 1, "", "name"], [160, 1, 1, "", "opcode"], [160, 1, 1, "", "opcode_str"], [160, 1, 1, "", "ops"], [160, 1, 1, "", "options_str"], [160, 1, 1, "", "output_dtype_str"], [160, 1, 1, "", "output_shape_str"], [160, 1, 1, "", "tflite_layer"], [160, 1, 1, "", "time"]], "mltk.core.profiling_results.ProfilingModelResults": [[160, 2, 1, "", "__init__"], [160, 1, 1, "", "accelerator"], [160, 1, 1, "", "accelerator_cycles"], [160, 1, 1, "", "cpu_clock_rate"], [160, 1, 1, "", "cpu_cycles"], [160, 1, 1, "", "cpu_utilization"], [160, 1, 1, "", "energy"], [160, 1, 1, "", "flatbuffer_size"], [160, 2, 1, "", "generate_report"], [160, 2, 1, "", "get_summary"], [160, 1, 1, "", "input_dtype_str"], [160, 1, 1, "", "input_shape_str"], [160, 1, 1, "", "is_simulated"], [160, 1, 1, "", "layers"], [160, 1, 1, "", "macs"], [160, 1, 1, "", "n_layers"], [160, 1, 1, "", "n_unsupported_layers"], [160, 1, 1, "", "name"], [160, 1, 1, "", "ops"], [160, 1, 1, "", "output_dtype_str"], [160, 1, 1, "", "output_shape_str"], [160, 1, 1, "", "platform"], [160, 1, 1, "", "runtime_memory_bytes"], [160, 2, 1, "", "stat_total"], [160, 1, 1, "", "tflite_model"], [160, 1, 1, "", "time"], [160, 2, 1, "", "to_csv"], [160, 2, 1, "", "to_dict"], [160, 2, 1, "", "to_json"], [160, 2, 1, "", "to_string"], [160, 1, 1, "", "unsupported_layers"]], "mltk.core.tflite_micro": [[172, 0, 1, "", "TfliteMicro"], [168, 0, 1, "", "TfliteMicroLayerError"], [169, 0, 1, "", "TfliteMicroModel"], [170, 0, 1, "", "TfliteMicroModelDetails"], [171, 0, 1, "", "TfliteMicroProfiledLayerResult"]], "mltk.core.tflite_micro.TfliteMicro": [[172, 2, 1, "", "accelerator_is_supported"], [172, 2, 1, "", "add_accelerator_path"], [172, 2, 1, "", "api_version"], [172, 2, 1, "", "get_accelerator"], [172, 2, 1, "", "get_log_level"], [172, 2, 1, "", "get_logger"], [172, 2, 1, "", "get_supported_accelerators"], [172, 2, 1, "", "git_hash"], [172, 2, 1, "", "load_tflite_model"], [172, 2, 1, "", "normalize_accelerator_name"], [172, 2, 1, "", "profile_model"], [172, 2, 1, "", "record_model"], [172, 2, 1, "", "register_accelerator"], [172, 2, 1, "", "set_log_level"], [172, 2, 1, "", "set_logger"], [172, 2, 1, "", "unload_model"]], "mltk.core.tflite_micro.TfliteMicroLayerError": [[168, 2, 1, "", "__init__"], [168, 1, 1, "", "index"], [168, 1, 1, "", "msg"], [168, 1, 1, "", "name"]], "mltk.core.tflite_micro.TfliteMicroModel": [[169, 2, 1, "", "__init__"], [169, 1, 1, "", "accelerator"], [169, 1, 1, "", "details"], [169, 2, 1, "", "get_layer_error"], [169, 2, 1, "", "get_profiling_results"], [169, 2, 1, "", "get_recorded_data"], [169, 2, 1, "", "input"], [169, 1, 1, "", "input_size"], [169, 2, 1, "", "invoke"], [169, 1, 1, "", "is_profiler_enabled"], [169, 1, 1, "", "is_tensor_recorder_enabled"], [169, 1, 1, "", "layer_errors"], [169, 2, 1, "", "output"], [169, 1, 1, "", "output_size"]], "mltk.core.tflite_micro.TfliteMicroModelDetails": [[170, 2, 1, "", "__init__"], [170, 1, 1, "", "accelerator"], [170, 1, 1, "", "classes"], [170, 1, 1, "", "date"], [170, 1, 1, "", "description"], [170, 1, 1, "", "hash"], [170, 1, 1, "", "name"], [170, 1, 1, "", "runtime_memory_size"], [170, 1, 1, "", "version"]], "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult": [[171, 2, 1, "", "__init__"], [171, 2, 1, "", "__new__"], [171, 1, 1, "", "accelerator_cycles"], [171, 2, 1, "", "clear"], [171, 2, 1, "", "copy"], [171, 1, 1, "", "cpu_cycles"], [171, 3, 1, "", "default_factory"], [171, 1, 1, "", "energy"], [171, 2, 1, "", "fromkeys"], [171, 2, 1, "", "get"], [171, 2, 1, "", "items"], [171, 2, 1, "", "keys"], [171, 1, 1, "", "macs"], [171, 1, 1, "", "name"], [171, 1, 1, "", "ops"], [171, 2, 1, "", "pop"], [171, 2, 1, "", "popitem"], [171, 2, 1, "", "setdefault"], [171, 1, 1, "", "time"], [171, 2, 1, "", "update"], [171, 2, 1, "", "values"]], "mltk.core.tflite_micro.tflite_micro_accelerator": [[166, 0, 1, "", "TfliteMicroAccelerator"]], "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator": [[166, 2, 1, "", "__init__"], [166, 1, 1, "", "accelerator_wrapper"], [166, 1, 1, "", "active_variant"], [166, 1, 1, "", "api_version"], [166, 2, 1, "", "compile_model"], [166, 2, 1, "", "enable_data_recorder"], [166, 2, 1, "", "enable_program_recorder"], [166, 2, 1, "", "estimate_profiling_results"], [166, 1, 1, "", "git_hash"], [166, 1, 1, "", "name"], [166, 1, 1, "", "supports_model_compilation"], [166, 1, 1, "", "variants"]], "mltk.core.tflite_model_parameters.flatbuffer_dictionary": [[182, 0, 1, "", "FlatbufferDictionary"]], "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary": [[182, 2, 1, "", "__init__"], [182, 2, 1, "", "deserialize"], [182, 2, 1, "", "put"], [182, 2, 1, "", "serialize"], [182, 2, 1, "", "summary"]], "mltk.core.train_model": [[163, 0, 1, "", "TrainingResults"]], "mltk.core.train_model.TrainingResults": [[163, 2, 1, "", "__init__"], [163, 2, 1, "", "asdict"], [163, 3, 1, "", "epochs"], [163, 2, 1, "", "get_best_metric"], [163, 3, 1, "", "history"], [163, 3, 1, "", "keras_model"], [163, 3, 1, "", "mltk_model"], [163, 1, 1, "", "model_archive_path"], [163, 3, 1, "", "params"]], "mltk.datasets.accelerometer": [[93, 5, 0, "-", "tflm_magic_wand"]], "mltk.datasets.accelerometer.tflm_magic_wand": [[93, 4, 1, "", "load_data"], [93, 4, 1, "", "prepare_data"]], "mltk.datasets.audio.background_noise": [[94, 5, 0, "-", "ambient"], [95, 5, 0, "-", "brd2601"], [96, 5, 0, "-", "esc50"]], "mltk.datasets.audio.background_noise.ambient": [[94, 6, 1, "", "DOWNLOAD_URLS"], [94, 4, 1, "", "download"]], "mltk.datasets.audio.background_noise.brd2601": [[95, 6, 1, "", "DOWNLOAD_URL"], [95, 6, 1, "", "VERIFY_SHA1"], [95, 4, 1, "", "download"]], "mltk.datasets.audio.background_noise.esc50": [[96, 6, 1, "", "DOWNLOAD_URL"], [96, 6, 1, "", "VERIFY_SHA1"], [96, 4, 1, "", "download"]], "mltk.datasets.audio": [[97, 5, 0, "-", "direction_commands"], [98, 5, 0, "-", "mit_ir_survey"], [101, 5, 0, "-", "on_off"]], "mltk.datasets.audio.direction_commands": [[97, 6, 1, "", "CLASSES"], [97, 6, 1, "", "DOWNLOAD_URL"], [97, 6, 1, "", "VERIFY_SHA1"], [97, 4, 1, "", "download"], [97, 4, 1, "", "generate_dataset"]], "mltk.datasets.audio.mit_ir_survey": [[98, 6, 1, "", "DOWNLOAD_URL"], [98, 6, 1, "", "VERIFY_SHA1"], [98, 4, 1, "", "apply_ir"], [98, 4, 1, "", "apply_random_ir"], [98, 4, 1, "", "download"], [98, 4, 1, "", "load_dataset"]], "mltk.datasets.audio.mlcommons": [[99, 5, 0, "-", "ml_commons_keywords"], [100, 5, 0, "-", "ml_commons_voice"]], "mltk.datasets.audio.mlcommons.ml_commons_keywords": [[99, 6, 1, "", "DOWNLOAD_URL1"], [99, 6, 1, "", "DOWNLOAD_URL2"], [99, 6, 1, "", "VERIFY_URL1_SHA1"], [99, 6, 1, "", "VERIFY_URL2_SHA1"], [99, 4, 1, "", "download"]], "mltk.datasets.audio.mlcommons.ml_commons_voice": [[100, 6, 1, "", "DOWNLOAD_URL"], [100, 6, 1, "", "VERIFY_SHA1"], [100, 4, 1, "", "download"]], "mltk.datasets.audio.on_off": [[101, 6, 1, "", "CLASSES"], [101, 6, 1, "", "DOWNLOAD_URL"], [101, 6, 1, "", "VERIFY_SHA1"], [101, 4, 1, "", "download"], [101, 4, 1, "", "generate_dataset"]], "mltk.datasets.audio.speech_commands": [[102, 5, 0, "-", "speech_commands_v2"]], "mltk.datasets.audio.speech_commands.speech_commands_v2": [[102, 6, 1, "", "CLASSES"], [102, 6, 1, "", "DOWNLOAD_URL"], [102, 6, 1, "", "VERIFY_SHA1"], [102, 4, 1, "", "list_valid_filenames_in_directory"], [102, 4, 1, "", "load_clean_data"], [102, 4, 1, "", "load_data"]], "mltk.datasets.image": [[103, 5, 0, "-", "cifar10"], [104, 5, 0, "-", "fashion_mnist"], [105, 5, 0, "-", "mnist"], [106, 5, 0, "-", "rock_paper_scissors_v1"], [107, 5, 0, "-", "rock_paper_scissors_v2"]], "mltk.datasets.image.cifar10": [[103, 6, 1, "", "DOWNLOAD_URL"], [103, 6, 1, "", "VERIFY_SHA1"], [103, 4, 1, "", "load_data"], [103, 4, 1, "", "load_data_directory"]], "mltk.datasets.image.fashion_mnist": [[104, 6, 1, "", "CLASSES"], [104, 6, 1, "", "INPUT_SHAPE"], [104, 4, 1, "", "load_data"], [104, 4, 1, "", "load_data_directory"]], "mltk.datasets.image.mnist": [[105, 6, 1, "", "CLASSES"], [105, 6, 1, "", "DOWNLOAD_URL"], [105, 6, 1, "", "INPUT_SHAPE"], [105, 6, 1, "", "VERIFY_SHA1"], [105, 4, 1, "", "load_data"], [105, 4, 1, "", "load_data_directory"]], "mltk.datasets.image.rock_paper_scissors_v1": [[106, 6, 1, "", "CLASSES"], [106, 6, 1, "", "DOWNLOAD_URL"], [106, 6, 1, "", "INPUT_DEPTH"], [106, 6, 1, "", "INPUT_HEIGHT"], [106, 6, 1, "", "INPUT_SHAPE"], [106, 6, 1, "", "INPUT_WIDTH"], [106, 6, 1, "", "VERIFY_SHA1"], [106, 4, 1, "", "load_data"]], "mltk.datasets.image.rock_paper_scissors_v2": [[107, 6, 1, "", "CLASSES"], [107, 6, 1, "", "DOWNLOAD_URL"], [107, 6, 1, "", "INPUT_DEPTH"], [107, 6, 1, "", "INPUT_HEIGHT"], [107, 6, 1, "", "INPUT_SHAPE"], [107, 6, 1, "", "INPUT_WIDTH"], [107, 6, 1, "", "VERIFY_SHA1"], [107, 4, 1, "", "load_data"]], "mltk.models.examples": [[126, 5, 0, "-", "audio_example1"], [127, 5, 0, "-", "audio_tf_dataset"], [128, 5, 0, "-", "autoencoder_example"], [129, 5, 0, "-", "basic_example"], [130, 5, 0, "-", "basic_tf_dataset_example"], [131, 5, 0, "-", "binary_classification"], [132, 5, 0, "-", "conv1d_example"], [133, 5, 0, "-", "image_example1"], [134, 5, 0, "-", "image_tf_dataset"], [136, 5, 0, "-", "siamese_contrastive"]], "mltk.models.shared.dsconv_arm": [[125, 4, 1, "", "DepthwiseSeparableConv2D_ARM"]], "mltk.models.shared.fully_connected_autoencoder": [[125, 4, 1, "", "FullyConnectedAutoEncoder"]], "mltk.models.shared.mobilenet_v1": [[125, 4, 1, "", "MobileNetV1"]], "mltk.models.shared.mobilenet_v2": [[125, 4, 1, "", "MobileNetV2"]], "mltk.models.shared.resnet_v1": [[125, 4, 1, "", "ResNet10V1"]], "mltk.models.shared.tenet": [[125, 4, 1, "", "TENet"]], "mltk.models.siliconlabs": [[138, 5, 0, "-", "fingerprint_signature_generator"], [140, 5, 0, "-", "keyword_spotting_alexa"], [141, 5, 0, "-", "keyword_spotting_mobilenetv2"], [142, 5, 0, "-", "keyword_spotting_on_off"], [143, 5, 0, "-", "keyword_spotting_on_off_v2"], [144, 5, 0, "-", "keyword_spotting_on_off_v3"], [145, 5, 0, "-", "keyword_spotting_pacman"], [146, 5, 0, "-", "keyword_spotting_pacman_v2"], [147, 5, 0, "-", "keyword_spotting_pacman_v3"], [148, 5, 0, "-", "keyword_spotting_with_transfer_learning"], [149, 5, 0, "-", "rock_paper_scissors"]], "mltk.models.tflite_micro": [[151, 5, 0, "-", "tflite_micro_magic_wand"], [152, 5, 0, "-", "tflite_micro_speech"]], "mltk.models.tinyml": [[153, 5, 0, "-", "anomaly_detection"], [154, 5, 0, "-", "image_classification"], [156, 5, 0, "-", "keyword_spotting"], [157, 5, 0, "-", "visual_wake_words"]], "mltk.utils": [[202, 5, 0, "-", "archive"], [203, 5, 0, "-", "archive_downloader"], [212, 5, 0, "-", "bin2header"], [213, 5, 0, "-", "cmake"], [214, 5, 0, "-", "gpu"], [215, 5, 0, "-", "hasher"], [222, 5, 0, "-", "logger"], [223, 5, 0, "-", "path"], [225, 5, 0, "-", "python"], [228, 5, 0, "-", "shell_cmd"], [230, 5, 0, "-", "string_formatting"], [231, 5, 0, "-", "system"]], "mltk.utils.archive": [[202, 4, 1, "", "extract_archive"], [202, 4, 1, "", "gzip_directory_files"], [202, 4, 1, "", "gzip_file"]], "mltk.utils.archive_downloader": [[203, 4, 1, "", "download_url"], [203, 4, 1, "", "download_verify_extract"], [203, 4, 1, "", "verify_extract"], [203, 4, 1, "", "verify_file_hash"], [203, 4, 1, "", "verify_sha1"], [203, 4, 1, "", "verify_sha256"]], "mltk.utils.audio_dataset_generator": [[206, 0, 1, "", "AudioDatasetGenerator"], [204, 0, 1, "", "Augmentation"], [205, 0, 1, "", "GenerationConfig"], [208, 0, 1, "", "Keyword"], [209, 0, 1, "", "Voice"], [210, 0, 1, "", "VoicePitch"], [211, 0, 1, "", "VoiceRate"]], "mltk.utils.audio_dataset_generator.AudioDatasetGenerator": [[206, 2, 1, "", "__init__"], [206, 2, 1, "", "count_characters"], [206, 2, 1, "", "generate"], [206, 2, 1, "", "get_summary"], [206, 2, 1, "", "is_backend_loaded"], [206, 1, 1, "", "is_running"], [206, 2, 1, "", "join"], [206, 2, 1, "", "list_configurations"], [206, 2, 1, "", "list_languages"], [206, 2, 1, "", "list_supported_backends"], [206, 2, 1, "", "list_voices"], [206, 2, 1, "", "load_backend"], [206, 1, 1, "", "out_dir"], [206, 2, 1, "", "shutdown"]], "mltk.utils.audio_dataset_generator.Augmentation": [[204, 2, 1, "", "count"], [204, 2, 1, "", "index"], [204, 3, 1, "", "pitch"], [204, 3, 1, "", "rate"]], "mltk.utils.audio_dataset_generator.GenerationConfig": [[205, 2, 1, "", "__init__"], [205, 2, 1, "", "copy"], [205, 3, 1, "", "keyword"], [205, 3, 1, "", "keyword_group"], [205, 3, 1, "", "pitch"], [205, 3, 1, "", "rate"], [205, 3, 1, "", "voice"]], "mltk.utils.audio_dataset_generator.Keyword": [[208, 3, 1, "", "aliases"], [208, 2, 1, "", "as_list"], [208, 2, 1, "", "count"], [208, 2, 1, "", "index"], [208, 3, 1, "", "max_count"], [208, 3, 1, "", "value"]], "mltk.utils.audio_dataset_generator.Voice": [[209, 2, 1, "", "__init__"], [209, 3, 1, "", "backend"], [209, 2, 1, "", "hashable_value"], [209, 1, 1, "", "hex_hash"], [209, 3, 1, "", "language_code"], [209, 3, 1, "", "name"]], "mltk.utils.bin2header": [[212, 4, 1, "", "bin2header"], [212, 4, 1, "", "main"]], "mltk.utils.cmake": [[213, 4, 1, "", "build_mltk_target"], [213, 4, 1, "", "get_build_directory"], [213, 4, 1, "", "invoke_mltk_target"], [213, 4, 1, "", "parse_variables"]], "mltk.utils.gpu": [[214, 0, 1, "", "TensorflowCudaVersions"], [214, 4, 1, "", "check_tensorflow_cuda_compatibility_error"], [214, 4, 1, "", "deinitialize"], [214, 4, 1, "", "disable"], [214, 4, 1, "", "get_tensorflow_version_with_cudnn_version"], [214, 4, 1, "", "initialize"]], "mltk.utils.gpu.TensorflowCudaVersions": [[214, 2, 1, "", "__getnewargs__"], [214, 3, 1, "", "__match_args__"], [214, 3, 1, "", "__module__"], [214, 2, 1, "", "__new__"], [214, 2, 1, "", "__repr__"], [214, 3, 1, "", "__slots__"], [214, 3, 1, "", "cuda"], [214, 3, 1, "", "cudnn"], [214, 3, 1, "", "python_max"], [214, 3, 1, "", "python_min"], [214, 3, 1, "", "tensorflow"]], "mltk.utils.hasher": [[215, 4, 1, "", "generate_hash"], [215, 4, 1, "", "hash_file"], [215, 4, 1, "", "hash_object"]], "mltk.utils.jlink_stream": [[218, 0, 1, "", "JLinkDataStream"], [217, 0, 1, "", "JlinkCommandStream"], [220, 0, 1, "", "JlinkStream"], [221, 0, 1, "", "JlinkStreamOptions"]], "mltk.utils.jlink_stream.JLinkDataStream": [[218, 2, 1, "", "__init__"], [218, 1, 1, "", "buffer_hexdump"], [218, 1, 1, "", "buffer_unused"], [218, 1, 1, "", "buffer_used"], [218, 2, 1, "", "close"], [218, 1, 1, "", "end_time"], [218, 2, 1, "", "flush"], [218, 1, 1, "", "is_opened"], [218, 1, 1, "", "max_read_size"], [218, 1, 1, "", "mode"], [218, 1, 1, "", "name"], [218, 2, 1, "", "read"], [218, 2, 1, "", "read_all"], [218, 1, 1, "", "read_data_available"], [218, 1, 1, "", "timeout"], [218, 2, 1, "", "write"], [218, 1, 1, "", "write_data_available"]], "mltk.utils.jlink_stream.JlinkCommandStream": [[217, 2, 1, "", "__init__"], [217, 2, 1, "", "close"], [217, 2, 1, "", "issue"], [217, 2, 1, "", "open"]], "mltk.utils.jlink_stream.JlinkStream": [[220, 2, 1, "", "__init__"], [220, 2, 1, "", "close"], [220, 2, 1, "", "connect"], [220, 1, 1, "", "default_options"], [220, 2, 1, "", "disconnect"], [220, 1, 1, "", "is_connected"], [220, 2, 1, "", "open"], [220, 2, 1, "", "process"], [220, 2, 1, "", "read"], [220, 2, 1, "", "write"]], "mltk.utils.logger": [[222, 0, 1, "", "ConsoleLoggerLevelContext"], [222, 0, 1, "", "DummyLogger"], [222, 4, 1, "", "add_console_logger"], [222, 4, 1, "", "get_level"], [222, 4, 1, "", "get_logger"], [222, 4, 1, "", "make_filelike"], [222, 4, 1, "", "redirect_stream"], [222, 4, 1, "", "set_console_level"], [222, 4, 1, "", "timing_decorator"]], "mltk.utils.logger.ConsoleLoggerLevelContext": [[222, 3, 1, "", "__dict__"], [222, 2, 1, "", "__enter__"], [222, 2, 1, "", "__exit__"], [222, 2, 1, "", "__init__"], [222, 3, 1, "", "__module__"], [222, 3, 1, "", "__weakref__"]], "mltk.utils.logger.DummyLogger": [[222, 3, 1, "", "__dict__"], [222, 2, 1, "", "__init__"], [222, 3, 1, "", "__module__"], [222, 3, 1, "", "__weakref__"], [222, 2, 1, "", "debug"], [222, 2, 1, "", "error"], [222, 2, 1, "", "exception"], [222, 2, 1, "", "flush"], [222, 2, 1, "", "info"], [222, 2, 1, "", "warning"], [222, 2, 1, "", "write"]], "mltk.utils.path": [[223, 4, 1, "", "add_user_setting"], [223, 4, 1, "", "clean_directory"], [223, 4, 1, "", "copy_directory"], [223, 4, 1, "", "create_dir"], [223, 4, 1, "", "create_tempdir"], [223, 4, 1, "", "create_user_dir"], [223, 4, 1, "", "extension"], [223, 4, 1, "", "file_is_in_use"], [223, 4, 1, "", "file_is_newer"], [223, 4, 1, "", "fullpath"], [223, 4, 1, "", "get_actual_path"], [223, 4, 1, "", "get_user_setting"], [223, 4, 1, "", "has_filename"], [223, 4, 1, "", "recursive_listdir"], [223, 4, 1, "", "remove_directory"], [223, 4, 1, "", "set_file_last_modified"], [223, 4, 1, "", "walk_with_depth"]], "mltk.utils.process_pool": [[224, 0, 1, "", "ProcessPool"]], "mltk.utils.process_pool.ProcessPool": [[224, 2, 1, "", "__init__"], [224, 2, 1, "", "create_batch"], [224, 1, 1, "", "is_running"], [224, 1, 1, "", "n_jobs"], [224, 1, 1, "", "name"], [224, 2, 1, "", "process"], [224, 2, 1, "", "shutdown"], [224, 2, 1, "", "start"]], "mltk.utils.python": [[225, 4, 1, "", "DefaultDict"], [225, 0, 1, "", "DictObject"], [225, 6, 1, "", "SHORT_VERSION"], [225, 4, 1, "", "append_exception_msg"], [225, 4, 1, "", "as_list"], [225, 4, 1, "", "contains_class_type"], [225, 4, 1, "", "debugger_is_active"], [225, 4, 1, "", "disable_warnings"], [225, 4, 1, "", "find_object_key_with_value"], [225, 4, 1, "", "find_object_value_with_key"], [225, 4, 1, "", "find_object_value_with_key_or_value"], [225, 4, 1, "", "flatten_list"], [225, 4, 1, "", "forward_method_kwargs"], [225, 4, 1, "", "get_case_insensitive"], [225, 4, 1, "", "import_module_at_path"], [225, 4, 1, "", "install_pip_package"], [225, 4, 1, "", "is_false"], [225, 4, 1, "", "is_true"], [225, 4, 1, "", "list_rindex"], [225, 4, 1, "", "load_json_safe"], [225, 4, 1, "", "merge_dict"], [225, 4, 1, "", "notebook_is_active"], [225, 4, 1, "", "prepend_exception_msg"], [225, 4, 1, "", "set_absl_log_level"], [225, 4, 1, "", "timeit"]], "mltk.utils.python.DictObject": [[225, 3, 1, "", "__dict__"], [225, 2, 1, "", "__getattr__"], [225, 3, 1, "", "__module__"], [225, 2, 1, "", "__setattr__"], [225, 3, 1, "", "__weakref__"]], "mltk.utils.serial_reader": [[227, 0, 1, "", "SerialReader"]], "mltk.utils.serial_reader.SerialReader": [[227, 2, 1, "", "__init__"], [227, 1, 1, "", "captured_data"], [227, 2, 1, "", "close"], [227, 1, 1, "", "error_message"], [227, 1, 1, "", "failed"], [227, 2, 1, "", "flush"], [227, 1, 1, "", "is_open"], [227, 2, 1, "", "list_ports"], [227, 2, 1, "", "open"], [227, 2, 1, "", "read"], [227, 2, 1, "", "resolve_port"], [227, 1, 1, "", "started"], [227, 1, 1, "", "stopped"], [227, 2, 1, "", "write"]], "mltk.utils.shell_cmd": [[228, 4, 1, "", "run_shell_cmd"]], "mltk.utils.signal_handler": [[229, 0, 1, "", "SignalHandler"]], "mltk.utils.signal_handler.SignalHandler": [[229, 2, 1, "", "__init__"]], "mltk.utils.string_formatting": [[230, 0, 1, "", "FormattedFloat"], [230, 0, 1, "", "FormattedInt"], [230, 4, 1, "", "format_units"], [230, 4, 1, "", "iso_time_filename_str"], [230, 4, 1, "", "iso_time_str"], [230, 4, 1, "", "pretty_time_str"]], "mltk.utils.string_formatting.FormattedFloat": [[230, 3, 1, "", "__dict__"], [230, 3, 1, "", "__module__"], [230, 2, 1, "", "__str__"], [230, 3, 1, "", "__weakref__"]], "mltk.utils.string_formatting.FormattedInt": [[230, 3, 1, "", "__dict__"], [230, 3, 1, "", "__module__"], [230, 2, 1, "", "__str__"]], "mltk.utils.system": [[231, 4, 1, "", "get_current_os"], [231, 4, 1, "", "get_username"], [231, 4, 1, "", "has_admin"], [231, 4, 1, "", "is_linux"], [231, 4, 1, "", "is_osx"], [231, 4, 1, "", "is_windows"], [231, 4, 1, "", "make_path_executable"], [231, 4, 1, "", "raise_signal"], [231, 4, 1, "", "send_signal"]], "mltk.utils.uart_stream": [[233, 0, 1, "", "UartStream"]], "mltk.utils.uart_stream.UartStream": [[233, 2, 1, "", "__init__"], [233, 1, 1, "", "baud"], [233, 2, 1, "", "close"], [233, 2, 1, "", "flush_input"], [233, 1, 1, "", "is_open"], [233, 1, 1, "", "is_synchronized"], [233, 2, 1, "", "list_ports"], [233, 2, 1, "", "open"], [233, 1, 1, "", "port"], [233, 2, 1, "", "read"], [233, 2, 1, "", "read_all"], [233, 2, 1, "", "read_command"], [233, 2, 1, "", "resolve_port"], [233, 1, 1, "", "rx_bytes_available"], [233, 2, 1, "", "synchronize"], [233, 2, 1, "", "synchronize_blocking"], [233, 1, 1, "", "tx_bytes_available"], [233, 2, 1, "", "wait"], [233, 2, 1, "", "write"], [233, 2, 1, "", "write_all"], [233, 2, 1, "", "write_command"]]}, "objtypes": {"0": "py:class", "1": "py:property", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:module", "6": "py:data"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "property", "Python property"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "module", "Python module"], "6": ["py", "data", "Python data"]}, "titleterms": {"uart": [0, 232], "stream": [0, 219, 232], "data": [0, 51, 57, 88, 242, 248, 249, 250, 251, 252, 253, 254, 258], "test": [0, 249, 251, 253, 255, 257], "setup": [0, 34, 37, 39, 43, 44, 58, 247, 256, 258, 259], "step": [0, 247, 249, 258, 259], "audio": [1, 2, 35, 36, 80, 81, 82, 83, 84, 94, 95, 96, 97, 98, 99, 100, 101, 102, 108, 207, 252, 253, 254, 257, 259], "featur": [1, 248, 253, 254, 259], "gener": [1, 2, 37, 62, 67, 71, 94, 207, 250, 251, 252, 253, 254, 259], "overview": [1, 3, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 79, 99, 100, 236, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "benefit": 1, "gecko": [1, 43, 235], "sdk": [1, 43, 235], "compon": 1, "sourc": [1, 42, 45, 47, 48, 252, 254], "code": [1, 35, 36, 37, 38, 39, 41, 42, 44, 45, 47, 48, 256], "mltk": [1, 34, 43, 44, 45, 47, 48, 71, 76, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 249, 250, 251, 253, 254, 256], "c": [1, 33, 40, 42, 44, 46, 235, 250, 252], "python": [1, 14, 34, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 65, 68, 69, 72, 74, 225, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 250, 251, 253, 254, 256, 258], "wrapper": [1, 34, 42, 44, 45, 46, 47, 48, 235], "usag": [1, 4, 6, 8, 10, 12, 15, 17, 19, 21, 23, 25, 27, 29, 30, 64, 117, 167, 186, 207, 219, 226, 232, 248], "visual": [1, 2, 35, 36, 37, 38, 39, 41, 44, 72, 245, 251, 252, 253], "util": [1, 2, 64, 80, 85, 89, 90, 91, 92, 123, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 251, 253], "classif": [2, 39, 61, 96, 237, 251], "classifi": [2, 35, 36, 39, 252, 253], "us": [2, 51, 57, 63, 250, 251, 253, 255], "pc": [2, 35, 37, 39, 253, 255], "microphon": [2, 255], "simul": [2, 63, 238, 251, 253], "latenc": 2, "record": [2, 241, 253, 259], "dump": [2, 35, 37, 39, 252], "spectrogram": [2, 35, 153, 156, 253], "develop": [2, 34, 42, 43, 44, 74, 235, 249, 252, 255], "board": [2, 255], "": [2, 51, 139], "from": [2, 70, 71, 143, 146, 247, 249, 250, 251, 252, 253, 254, 255, 258], "updat": [2, 35, 36, 37, 39, 41, 62, 65, 74, 239, 242, 244, 251, 255, 257], "audiofeaturegener": [2, 45, 83, 252, 257], "paramet": [2, 35, 36, 62, 67, 69, 235, 242, 244, 250, 251, 252, 253, 254], "synthet": [2, 252, 253, 259], "dataset": [2, 67, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 156, 157, 207, 249, 250, 251, 252, 253, 254, 258, 259], "keyword": [3, 99, 208, 252, 253, 254, 255, 257], "spot": [3, 252, 253, 254, 255], "classify_audio": [4, 35], "addit": [4, 6, 8, 10, 12, 15, 17, 19, 21, 23, 25, 27, 29, 30, 35, 36, 45, 47, 48, 67, 71], "document": [4, 6, 8, 10, 12, 15, 17, 19, 21, 23, 25, 27, 29, 30], "classify_imag": [6, 39], "command": [8, 14, 34, 35, 36, 37, 38, 39, 41, 45, 47, 48, 52, 61, 62, 63, 65, 68, 69, 71, 72, 77, 97, 102, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 235, 247, 250, 251, 252, 253, 254], "evalu": [10, 56, 61, 67, 237, 250, 251, 253, 258], "fingerprint_read": 12, "line": [14, 34, 35, 36, 37, 38, 39, 41, 52, 62, 71, 235, 247, 250, 251, 253, 254], "basic": [14, 62, 63, 67, 238, 248, 251, 253, 255], "enabl": 14, "virtual": [14, 43, 44], "environ": [14, 43, 44, 71, 75, 256, 258], "format": [14, 258], "help": 14, "support": [14, 78, 235, 258], "oper": [14, 63, 159, 258], "profil": [15, 41, 61, 63, 64, 70, 126, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 238, 241, 249, 251, 252, 253, 254, 257, 258], "quantiz": [17, 61, 65, 152, 153, 154, 156, 157, 239, 258], "ssh": [19, 70, 71, 77, 235, 249], "summar": [21, 68, 240, 257], "tensorboard": [23, 70], "train": [25, 50, 55, 63, 67, 68, 69, 70, 71, 72, 143, 146, 152, 235, 238, 240, 243, 245, 248, 249, 250, 251, 252, 253, 254, 255, 257], "update_param": [27, 39, 41], "view": [29, 62, 72, 245], "view_audio": 30, "build": [33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 47, 48, 250, 252, 254], "option": [33, 44, 64, 71, 235, 249], "mltk_cmake_log_level": 33, "mltk_platform_nam": 33, "tflite_micro_acceler": [33, 37, 39, 41, 166], "mltk_target": 33, "mltk_enable_debug_info_in_release_build": 33, "mltk_enable_output_disassembli": 33, "model_profiler_model": [33, 41], "audio_classifier_model": 33, "mltk_run_model_from_ram": [33, 41], "instal": [34, 43, 44, 71, 74, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 253, 254, 256, 258], "tool": [34, 43, 44, 235], "0": [34, 43, 44], "o": [34, 43, 44], "1": [34, 43, 44, 61, 62, 63, 65, 68, 69, 70, 71, 72, 237, 238, 239, 240, 241, 242, 243, 244, 245, 256], "cmake": [34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 52, 213], "2": [34, 43, 44, 61, 62, 63, 68, 69, 70, 71, 72, 237, 238, 240, 241, 242, 243, 244, 245, 256], "7": [34, 43, 44, 242], "zip": [34, 43, 44, 76], "3": [34, 43, 44, 61, 62, 63, 68, 69, 70, 71, 72, 237, 238, 240, 241, 242, 244, 245], "4": [34, 43, 44, 63, 68, 70, 71, 72, 238, 240, 242, 245], "git": [34, 43, 44], "5": [34, 43, 44, 70, 71, 242], "clone": [34, 43, 44], "repositori": [34, 43, 44], "sequenc": [34, 71, 251], "configur": [34, 44, 70, 71, 249, 251, 253, 255, 258], "set": [34, 37, 39, 41, 65, 67, 71, 77, 249, 251, 252, 253, 254, 255, 257], "project": [34, 44], "specif": [34, 61, 62, 67, 69, 76, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 244, 249, 251, 253, 255, 257], "target": [34, 44], "run": [34, 35, 36, 37, 38, 39, 41, 43, 44, 52, 69, 70, 242, 243, 247, 250, 251, 252, 253, 254, 255, 257, 258], "output": [34, 39, 69, 241, 258], "execut": 34, "exampl": [34, 40, 42, 43, 44, 49, 61, 62, 63, 65, 67, 68, 69, 71, 72, 73, 77, 117, 135, 167, 186, 207, 219, 226, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 259], "applic": [34, 43, 44, 250, 252, 254], "quick": [35, 36, 37, 38, 39, 41, 61, 62, 63, 65, 68, 69, 70, 71, 72, 76, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "link": [35, 36, 37, 38, 39, 41, 45, 47, 48, 219, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "behavior": [35, 36, 37, 39], "model": [35, 36, 37, 39, 41, 50, 51, 52, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 110, 117, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 167, 186, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258], "via": [35, 36, 37, 39, 41, 45, 47, 48, 62, 71, 235], "simplic": [35, 36, 37, 38, 39, 41, 43, 52, 253], "studio": [35, 36, 37, 38, 39, 41, 43, 44, 52, 253], "debug": [35, 36, 37, 38, 39, 41, 44, 50, 256], "modif": [35, 247], "variabl": [35, 75], "verbos": 35, "window_m": 35, "threshold": [35, 250], "suppression_m": 35, "count": [35, 51, 249], "volume_gain": 35, "latency_m": 35, "audio_classifier_enable_audio_io": 35, "read": [35, 36, 249, 252, 254, 255, 257], "ble": 36, "pac": [36, 254], "man": [36, 254], "demo": [36, 250, 251, 252, 254], "fingerprint": [37, 250], "authent": [37, 250], "video": [37, 39, 250, 251, 252], "state": 37, "diagram": [37, 126, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157], "signatur": [37, 250], "fingeprint_read": 37, "hardwar": [37, 39, 63, 78, 238, 250, 251, 252, 254, 257], "imag": [37, 39, 85, 86, 87, 103, 104, 105, 106, 107, 108, 249, 251], "fingerprint_authenticator_model": 37, "hello": 38, "world": 38, "input": [39, 51, 57, 241, 258], "normal": [39, 90], "image_classifier_model": 39, "model_profiler_generate_op_resolver_head": 41, "model_profiler_model_memory_sect": 41, "model_profiler_runtime_memory_s": 41, "model_profiler_runtime_memory_sect": 41, "tflite_micro_accelerator_profiler_en": 41, "mltk_runtime_memory_s": 41, "tflite_micro_recorder_en": 41, "mode": [42, 63], "script": [43, 44, 62, 235, 247, 251], "activ": [43, 44], "add": [43, 62, 242, 247, 249, 251], "segger": 44, "gdb": 44, "server": [44, 64], "serial": [44, 226], "termin": 44, "6": [44, 242], "window": [44, 58, 71], "redistribut": 44, "packag": [44, 74, 237, 238, 239, 240, 241, 242, 243, 244, 245, 250, 251, 253, 254, 256], "vscode": [44, 73], "open": [44, 70], "workspac": 44, "recommend": [44, 247, 255, 257], "extens": [44, 256], "select": [44, 249, 252, 253, 254, 257], "interpret": [44, 241], "linux": [44, 54, 71], "creat": [44, 249, 250, 251, 252, 253, 254, 257], "file": [44, 60, 62, 71, 76, 77, 238, 241, 242, 257, 258], "user_opt": 44, "kit": [44, 252], "type": [44, 51, 57, 76], "Or": 44, "embed": [44, 52, 57, 235], "arm": [44, 125], "gcc": 44, "download": [44, 64, 71, 238, 241, 242, 258], "pre": [45, 47, 48], "built": [45, 47, 48], "automat": [45, 47, 48], "manual": [45, 47, 48], "mvp": [47, 63, 238, 257], "tensorflow": [48, 58, 65, 67, 68, 72, 76, 93, 150, 167, 186, 235, 240, 245], "lite": [48, 56, 65, 67, 68, 72, 76, 93, 150, 167, 186, 235, 240, 241, 242, 245, 251, 253, 258], "micro": [48, 93, 150, 167, 235, 241], "api": [49, 61, 62, 63, 65, 67, 68, 69, 72, 109, 117, 167, 186, 207, 219, 226, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245], "how": [50, 51, 52, 249, 256], "can": [50, 51], "i": [50, 51, 52, 55, 57, 58, 235, 249], "my": [50, 51, 52, 55, 249], "dure": [50, 56], "reduc": [51, 255], "size": [51, 251], "what": [51, 249], "ar": 51, "resourc": [51, 71], "requir": [51, 58, 250, 251, 252, 254, 258], "int8": 51, "filter": 51, "increas": [51, 252], "stride": 51, "decreas": 51, "kernel": [51, 258], "fullyconnect": 51, "unit": 51, "pool": 51, "layer": [51, 63, 67, 69, 241, 242], "do": [52, 249], "an": [52, 71, 247, 249, 253, 257], "devic": [52, 57, 63, 238, 251, 253], "frequent": 53, "ask": 53, "question": 53, "why": [54, 56, 57, 235, 249], "isn": 54, "t": 54, "gpu": [54, 214, 249], "work": [54, 56, 71, 249, 256], "where": 55, "doe": [56, 70, 249, 256], "kera": [56, 67, 68, 72, 76, 110, 240, 245, 251, 253], "h5": [56, 61, 76, 237], "tf": [56, 241, 242, 251, 253, 258], "tflite": [56, 61, 65, 76, 152, 153, 154, 156, 157, 237, 238, 239, 241, 242], "return": [57, 244], "correct": 57, "result": [57, 61, 64, 71, 249], "preprocess": [57, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 140, 141, 142, 143, 144, 145, 146, 147, 148, 250, 251, 253], "hint": 57, "just": 57, "float32": [57, 258], "am": 58, "see": 58, "dll": 58, "error": 58, "when": 58, "import": [58, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251], "your": [58, 70], "miss": 58, "nvidia": 58, "cuda": 58, "driver": 58, "guid": [59, 73], "archiv": [60, 65, 76, 202, 239], "content": [60, 248, 249, 250, 251, 252, 253, 254, 259], "directori": [60, 71], "structur": 60, "refer": [61, 62, 63, 65, 68, 69, 70, 71, 72, 76, 108, 109, 117, 137, 167, 186, 207, 219, 226, 232], "non": 61, "v": [61, 68, 256, 258], "evaluateclassifiermixin": [61, 114], "confus": 61, "matrix": 61, "roc": 61, "precis": 61, "recal": 61, "true": 61, "posit": 61, "rate": [61, 252], "fals": 61, "evaluateautoencodermixin": [61, 113], "auto": [61, 125, 237], "encod": [61, 125, 237], "mixin": 62, "audiodatasetmixin": [62, 111], "imagedatasetmixin": [62, 116], "custom": [62, 248, 249], "json": 62, "metric": 63, "entir": 63, "per": 63, "physic": [63, 238, 251, 253], "acceler": [63, 257], "befor": [63, 68, 72, 238, 240, 245], "save": [64, 250], "local": [64, 70, 71, 74, 249, 251, 252, 253, 254], "http": [64, 70], "convert": [65, 67, 251, 253, 258], "optim": [65, 257], "supported_op": 65, "inference_input_typ": 65, "inference_output_typ": 65, "representative_dataset": 65, "search": 66, "path": [66, 223, 258], "name": 67, "discover": 67, "mltkmodel": [67, 69, 76, 119], "class": [67, 251, 252, 253, 258, 259], "instanc": [67, 69, 244, 249], "section": 67, "layout": [67, 69, 251, 257], "note": [67, 69, 249, 251, 253, 259], "about": [67, 69, 249, 251, 253, 258, 259], "hardcod": [67, 69], "callback": [67, 70, 251, 253], "augment": [67, 204, 251, 252, 253, 259], "summari": [68, 126, 128, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 240, 241, 242, 251, 253], "extern": [68, 72, 240, 245], "dry": [69, 243, 251, 253], "100": 69, "epoch": [69, 243, 255], "resum": 69, "monitor": 70, "start": [70, 249, 252], "troubleshoot": 70, "tab": 70, "appear": 70, "remot": [70, 71, 249, 252], "session": [70, 71], "machin": [70, 236, 249, 250, 251, 253, 254], "revers": 70, "tunnel": 70, "localhost": 70, "6002": 70, "web": [70, 259], "browser": 70, "connect": [71, 125], "client": [71, 249], "keypair": [71, 249], "hostnam": 71, "port": 71, "usernam": 71, "kei": [71, 249], "filenam": 71, "upload": 71, "startup": 71, "shutdown": [71, 249], "sync": 71, "locat": 71, "host": 71, "identity_fil": 71, "sshmixin": [71, 121], "user_set": 71, "yaml": 71, "config": 71, "without": 71, "wait": 71, "retriev": 71, "previou": 71, "new": [71, 249], "forcefulli": 71, "discard": 71, "notebook": [73, 250, 251, 258], "googl": [73, 74, 102, 259], "colab": [73, 74], "standard": 74, "mltk_model_path": 75, "mltk_cache_dir": 75, "mltk_user_settings_path": 75, "mltk_readonli": 75, "mltk_setup_py_dep": 75, "mltk_temp_dir": 75, "py": [76, 247], "object": [76, 250, 251, 253, 254], "tflitemodel": [76, 188, 244], "kerasmodel": 76, "model_path": 77, "brd2601": [78, 95], "brd2204": 78, "brd4166": 78, "brd4186": 78, "core": [80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "parallel_gener": [81, 82, 86, 87], "parallelaudiodatagener": 81, "parallelprocessparam": [82, 87], "audio_feature_gener": [83, 84], "audiofeaturegeneratorset": 84, "parallelimagedatagener": 86, "list_directori": 89, "tf_dataset": 91, "common": [92, 99, 100, 125], "acceleromet": [93, 108], "tflm_magic_wand": 93, "magic": 93, "wand": 93, "background_nois": [94, 95, 96], "ambient": 94, "background": [94, 95, 102], "nois": [94, 95, 102], "licens": [94, 98, 105, 142, 236], "esc50": 96, "esc": 96, "environment": 96, "sound": 96, "abstract": [96, 99, 100], "cite": 96, "direction_command": 97, "direct": 97, "mit_ir_survei": 98, "mit": 98, "impuls": [98, 253], "respons": [98, 253], "survei": 98, "credit": [98, 102, 249], "mlcommon": [99, 100], "ml_commons_keyword": 99, "ml": [99, 100, 252, 258], "ml_commons_voic": 100, "voic": [100, 209], "subset": 100, "on_off": 101, "On": [101, 253], "off": [101, 253], "speech_command": 102, "speech_commands_v2": 102, "speech": 102, "v2": [102, 107, 125], "histori": 102, "collect": 102, "organ": 102, "process": 102, "citat": 102, "cifar10": 103, "fashion_mnist": 104, "fashion": 104, "mnist": [104, 105], "rock_paper_scissors_v1": 106, "rock": [106, 107, 251], "paper": [106, 107, 251], "scissor": [106, 107, 251], "v1": [106, 125, 143, 146], "rock_paper_scissors_v2": 107, "datasetmixin": 112, "evaluatemixin": 115, "mltkdataset": 118, "mltkmodelev": 120, "trainmixin": 122, "load_mltk_model": 123, "load_mltk_model_with_path": 123, "list_mltk_model": 123, "load_tflite_or_keras_model": 123, "load_tflite_model": 123, "weightsandbiasesmixin": 124, "architectur": [125, 144, 147, 252, 253, 254], "depthwiseconv2d": 125, "fulli": 125, "mobilenet": 125, "resnetv1": 125, "10": [125, 243], "tenet": 125, "audio_example1": 126, "report": [126, 128, 133, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157], "audio_tf_dataset": 127, "autoencoder_exampl": 128, "basic_exampl": [129, 247, 256], "basic_tf_dataset_exampl": 130, "binary_classif": 131, "conv1d_exampl": 132, "image_example1": 133, "image_tf_dataset": 134, "siamese_contrast": 136, "fingerprint_signature_gener": 138, "silicon": [139, 236], "lab": [139, 236], "keyword_spotting_alexa": 140, "keyword_spotting_mobilenetv2": 141, "keyword_spotting_on_off": 142, "keyword_spotting_on_off_v2": 143, "chang": [143, 146], "keyword_spotting_on_off_v3": 144, "keyword_spotting_pacman": 145, "keyword_spotting_pacman_v2": 146, "keyword_spotting_pacman_v3": 147, "keyword_spotting_with_transfer_learn": 148, "rock_paper_scissor": 149, "tflite_micro_magic_wand": 151, "tflite_micro_speech": 152, "topologi": [152, 153, 154, 156, 157], "perform": [152, 153, 154, 156, 157], "float": [152, 153, 154, 156, 157], "point": [152, 153, 154, 156, 157], "anomaly_detect": 153, "characterist": [153, 156], "image_classif": 154, "tinyml": 155, "keyword_spot": 156, "visual_wake_word": 157, "evaluate_model": 158, "evaluate_classifi": 158, "classifierevaluationresult": 158, "evaluate_autoencod": 158, "autoencoderevaluationresult": 158, "profile_model": 160, "profilingmodelresult": 160, "profilinglayerresult": 160, "quantize_model": 161, "summarize_model": 162, "train_model": 163, "trainingresult": 163, "update_model_paramet": 164, "view_model": 165, "tflite_micro": [166, 168, 169, 170, 171, 172], "tflitemicroacceler": 166, "tflitemicrolayererror": 168, "tflitemicromodel": 169, "tflitemicromodeldetail": 170, "tflitemicroprofiledlayerresult": 171, "tflitemicro": 172, "tfliteactiv": 173, "tfliteaddlay": 174, "tfliteconv2dlay": 175, "tfliteconv2dlayeropt": 176, "tfliteconvparam": 177, "tflitedepthwiseconv2dlay": 178, "tflitedepthwiseconv2dlayeropt": 179, "tflitedepthwiseconvparam": 180, "tflitedequantizelay": 181, "flatbufferdictionari": 182, "tflitemodelparamet": [182, 190], "flatbuff": 182, "schema": 182, "tflitefullyconnectedlay": 183, "tflitefullyconnectedlayeropt": 184, "tflitefullyconnectedparam": 185, "tflitelay": 187, "tflitepad": 189, "tflitepooling2dlay": 191, "tflitepool2dlayeropt": 192, "tflitepoolparam": 193, "tflitequant": 194, "tflitequantizelay": 195, "tflitereshapelay": 196, "tfliteshap": 197, "tflitetensor": 198, "tflitetransposeconvlay": 199, "tflitetransposeconvlayeropt": 200, "tflitetransposeconvparam": 201, "archive_download": 203, "audio_dataset_gener": [204, 205, 206, 208, 209, 210, 211], "generationconfig": 205, "audiodatasetgener": 206, "voicepitch": 210, "voicer": 211, "bin2head": 212, "hasher": 215, "jlink_stream": [217, 218, 220, 221], "jlinkcommandstream": 217, "jlinkdatastream": 218, "j": 219, "jlinkstream": 220, "jlinkstreamopt": 221, "logger": 222, "process_pool": 224, "processpool": 224, "reader": 226, "serial_read": 227, "serialread": 227, "shell_cmd": 228, "signal_handl": 229, "signalhandl": 229, "string_format": 230, "system": [231, 252], "uart_stream": 233, "uartstream": 233, "tutori": [234, 246, 250, 251, 253, 254, 255, 257, 258], "onli": 235, "singl": 235, "need": 235, "comparison": 235, "other": [235, 236, 248, 249], "solut": 235, "lot": 235, "all": 235, "integr": 235, "cloud": [235, 248, 249, 251, 253, 254, 255, 257, 259], "log": [235, 248], "learn": [236, 250, 251, 253, 254, 255], "toolkit": 236, "inform": [236, 248], "load": [241, 242, 255, 258], "print": [241, 242], "tflm": 241, "each": 241, "tensor": 241, "iter": 242, "meta": 242, "infer": 242, "access": 242, "calcul": 242, "weight": [242, 248, 255], "argument": 244, "exist": 247, "origin": 247, "mnist_convnet": 247, "modifi": [247, 249], "next": [247, 249, 258, 259], "bias": 248, "disclaim": [248, 249], "default": 248, "vast": 249, "ai": 249, "nutshel": 249, "you": 249, "protect": 249, "provid": 249, "bill": 249, "price": 249, "should": 249, "trust": 249, "card": 249, "info": 249, "account": 249, "public": 249, "disk": 249, "space": 249, "login": 249, "cpu": [249, 251, 253], "suggest": 249, "flow": 249, "everyth": 249, "cli": 249, "thi": [250, 251, 253, 254, 255, 257, 258], "siames": 250, "network": [250, 251], "pair": 250, "loss": 250, "function": 250, "determin": [250, 252], "id": [251, 258], "convolut": 251, "neural": 251, "label": 251, "necessari": 251, "defin": [251, 253], "constraint": 251, "accuraci": [251, 253], "deploi": [251, 253], "alexa": [252, 259], "prerequisit": [252, 254], "efr32xg24": 252, "analog": 252, "speaker": 252, "amplifi": 252, "pinout": 252, "neg": [252, 259], "balanc": 252, "frontend": 252, "baud": 252, "tl": 253, "dr": 253, "acquir": 253, "repres": 253, "unknown": 253, "final": 253, "engin": 253, "edg": 253, "random": 253, "sampl": 253, "crop": 253, "known": 253, "detect": [253, 255], "pipelin": 253, "time": 253, "dsp": 253, "live": 254, "tradeoff": 254, "modul": 254, "firmwar": 254, "webpag": 254, "transfer": 255, "concept": 255, "base": 255, "descript": [255, 257], "small": 255, "valu": 255, "learningrateschedul": 255, "initi": 255, "unknown_class_percentag": 255, "adjust": 257, "onnx": 258, "convers": 258, "consider": 258, "map": 258, "channel": 258, "first": 258, "last": 258, "depend": 258, "saniti": 258, "check": 258, "simplifi": 258, "openvino": 258, "intermedi": 258, "real": 259, "peopl": 259, "languag": 259, "cost": 259, "platform": 259, "gcp": 259, "microsoft": 259, "azur": 259, "amazon": 259, "servic": 259, "aw": 259}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"UART Stream Data Test": [[0, "uart-stream-data-test"]], "Setup Steps": [[0, "setup-steps"]], "Audio Feature Generator": [[1, "audio-feature-generator"]], "Overview": [[1, "overview"], [60, "overview"], [61, "overview"], [62, "overview"], [63, "overview"], [65, "overview"], [67, "overview"], [68, "overview"], [69, "overview"], [70, "overview"], [71, "overview"], [72, "overview"], [79, "overview"], [99, "overview"], [100, "overview"], [236, "overview"], [249, "overview"], [250, "overview"], [251, "overview"], [253, "overview"], [254, "overview"], [256, "overview"], [257, "overview"], [258, "overview"], [259, "overview"]], "Benefits": [[1, "benefits"]], "Gecko SDK Component": [[1, "gecko-sdk-component"]], "Source Code": [[1, "source-code"], [1, "id1"], [42, "source-code"], [45, "source-code"], [47, "source-code"], [48, "source-code"]], "MLTK C++ Python Wrapper": [[1, "mltk-c-python-wrapper"]], "Usage": [[1, "usage"], [4, "usage"], [6, "usage"], [8, "usage"], [10, "usage"], [12, "usage"], [15, "usage"], [17, "usage"], [19, "usage"], [21, "usage"], [23, "usage"], [25, "usage"], [27, "usage"], [29, "usage"], [30, "usage"], [64, "usage"]], "Audio Visualizer Utility": [[1, "audio-visualizer-utility"]], "Audio Utilities": [[2, "audio-utilities"]], "Audio Classification Utility": [[2, "audio-classification-utility"]], "Classify using PC Microphone": [[2, "classify-using-pc-microphone"]], "Classify using PC Microphone with simulated latency": [[2, "classify-using-pc-microphone-with-simulated-latency"]], "Classify using PC Microphone and record audio": [[2, "classify-using-pc-microphone-and-record-audio"]], "Classify using PC Microphone and dump spectrograms": [[2, "classify-using-pc-microphone-and-dump-spectrograms"]], "Classify using development board\u2019s microphone": [[2, "classify-using-development-board-s-microphone"]], "Record audio from development board\u2019s microphone": [[2, "record-audio-from-development-board-s-microphone"]], "Dump spectrograms generated by development board": [[2, "dump-spectrograms-generated-by-development-board"]], "Update AudioFeatureGenerator parameters": [[2, "update-audiofeaturegenerator-parameters"]], "Audio Visualization Utility": [[2, "audio-visualization-utility"]], "Synthetic Audio Dataset Generator": [[2, "synthetic-audio-dataset-generator"]], "Keyword Spotting Overview": [[3, "keyword-spotting-overview"]], "classify_audio": [[4, "classify-audio"]], "Additional Documentation": [[4, "additional-documentation"], [6, "additional-documentation"], [8, "additional-documentation"], [10, "additional-documentation"], [12, "additional-documentation"], [15, "additional-documentation"], [17, "additional-documentation"], [19, "additional-documentation"], [21, "additional-documentation"], [23, "additional-documentation"], [25, "additional-documentation"], [27, "additional-documentation"], [29, "additional-documentation"], [30, "additional-documentation"]], "classify_image": [[6, "classify-image"]], "commander": [[8, "commander"], [77, "commander"]], "evaluate": [[10, "evaluate"]], "fingerprint_reader": [[12, "fingerprint-reader"]], "Command-Line": [[14, "command-line"]], "Command Basics": [[14, "command-basics"]], "Enable Python Virtual Environment": [[14, "enable-python-virtual-environment"]], "Command Format": [[14, "command-format"]], "Help": [[14, "help"]], "Supported Operations": [[14, "supported-operations"]], "profile": [[15, "profile"]], "quantize": [[17, "quantize"]], "ssh": [[19, "ssh"], [77, "ssh"]], "summarize": [[21, "summarize"]], "tensorboard": [[23, "tensorboard"]], "train": [[25, "train"]], "update_params": [[27, "update-params"]], "view": [[29, "view"]], "view_audio": [[30, "view-audio"]], "C++ Build Options": [[33, "c-build-options"]], "MLTK_CMAKE_LOG_LEVEL": [[33, "mltk-cmake-log-level"]], "MLTK_PLATFORM_NAME": [[33, "mltk-platform-name"]], "TFLITE_MICRO_ACCELERATOR": [[33, "tflite-micro-accelerator"], [37, "tflite-micro-accelerator"], [39, "tflite-micro-accelerator"], [41, "tflite-micro-accelerator"]], "MLTK_TARGET": [[33, "mltk-target"]], "MLTK_ENABLE_DEBUG_INFO_IN_RELEASE_BUILDS": [[33, "mltk-enable-debug-info-in-release-builds"]], "MLTK_ENABLE_OUTPUT_DISASSEMBLY": [[33, "mltk-enable-output-disassembly"]], "MODEL_PROFILER_MODEL": [[33, "model-profiler-model"], [41, "model-profiler-model"]], "AUDIO_CLASSIFIER_MODEL": [[33, "audio-classifier-model"]], "MLTK_RUN_MODEL_FROM_RAM": [[33, "mltk-run-model-from-ram"], [41, "mltk-run-model-from-ram"]], "Command-Line Development": [[34, "command-line-development"]], "Install Tools": [[34, "install-tools"], [43, "install-tools"], [44, "install-tools"]], "0) Setup OS": [[34, "setup-os"], [43, "setup-os"], [44, "setup-os"]], "1) Install CMake": [[34, "install-cmake"], [43, "install-cmake"], [44, "install-cmake"]], "2) Install 7-Zip": [[34, "install-7-zip"], [43, "install-7-zip"], [44, "install-7-zip"]], "3) Install Python": [[34, "install-python"], [43, "install-python"], [44, "install-python"]], "4) Install GIT": [[34, "install-git"], [43, "install-git"]], "5) Clone the MLTK repository": [[34, "clone-the-mltk-repository"]], "Build Sequence": [[34, "build-sequence"]], "1) Configure Build Settings": [[34, "configure-build-settings"]], "2) Configure CMake Project": [[34, "configure-cmake-project"]], "3) Build CMake Project for a specific target": [[34, "build-cmake-project-for-a-specific-target"]], "4) Run the output executable": [[34, "run-the-output-executable"]], "Example Applications": [[34, "example-applications"], [43, "example-applications"], [44, "example-applications"]], "Python Wrappers": [[34, "python-wrappers"], [42, "python-wrappers"], [44, "python-wrappers"]], "Audio Classifier": [[35, "audio-classifier"]], "Quick Links": [[35, "quick-links"], [36, "quick-links"], [37, "quick-links"], [38, "quick-links"], [39, "quick-links"], [41, "quick-links"], [248, "quick-links"], [249, "quick-links"], [250, "quick-links"], [251, "quick-links"], [252, "quick-links"], [253, "quick-links"], [254, "quick-links"], [255, "quick-links"], [257, "quick-links"], [258, "quick-links"], [259, "quick-links"], [259, "id1"], [259, "id3"], [259, "id4"]], "Behavior": [[35, "behavior"], [36, "behavior"], [37, "behavior"], [39, "behavior"]], "Updating the model": [[35, "updating-the-model"], [36, "updating-the-model"], [37, "updating-the-model"], [39, "updating-the-model"], [41, "updating-the-model"]], "via Simplicity Studio": [[35, "via-simplicity-studio"], [36, "via-simplicity-studio"], [37, "via-simplicity-studio"], [39, "via-simplicity-studio"], [41, "via-simplicity-studio"]], "via classify_audio Command": [[35, "via-classify-audio-command"]], "via CMake": [[35, "via-cmake"], [36, "via-cmake"], [37, "via-cmake"], [39, "via-cmake"], [41, "via-cmake"]], "Build, Run, Debug": [[35, "build-run-debug"], [36, "build-run-debug"], [37, "build-run-debug"], [38, "build-run-debug"], [39, "build-run-debug"], [41, "build-run-debug"]], "Simplicity Studio": [[35, "simplicity-studio"], [36, "simplicity-studio"], [37, "simplicity-studio"], [38, "simplicity-studio"], [39, "simplicity-studio"], [41, "simplicity-studio"], [52, "simplicity-studio"]], "Visual Studio Code": [[35, "visual-studio-code"], [36, "visual-studio-code"], [37, "visual-studio-code"], [38, "visual-studio-code"], [39, "visual-studio-code"], [41, "visual-studio-code"]], "Command-line": [[35, "command-line"], [36, "command-line"], [37, "command-line"], [38, "command-line"], [39, "command-line"], [41, "command-line"]], "Dumping audio & spectrograms to PC": [[35, "dumping-audio-spectrograms-to-pc"]], "Model Parameters": [[35, "model-parameters"], [36, "model-parameters"], [62, "model-parameters"], [250, "model-parameters"], [251, "model-parameters"], [253, "model-parameters"]], "Modifications": [[35, "modifications"]], "CMake Variables": [[35, "cmake-variables"]], "VERBOSE": [[35, "verbose"]], "WINDOW_MS": [[35, "window-ms"]], "THRESHOLD": [[35, "threshold"]], "SUPPRESSION_MS": [[35, "suppression-ms"]], "COUNT": [[35, "count"]], "VOLUME_GAIN": [[35, "volume-gain"]], "LATENCY_MS": [[35, "latency-ms"]], "AUDIO_CLASSIFIER_ENABLE_AUDIO_IO": [[35, "audio-classifier-enable-audio-io"]], "Additional Reading": [[35, "additional-reading"], [36, "additional-reading"]], "BLE Audio Classifier": [[36, "ble-audio-classifier"]], "Pac-Man Demo": [[36, "pac-man-demo"]], "Fingerprint Authenticator": [[37, "fingerprint-authenticator"]], "Video": [[37, "video"], [39, "video"]], "State Diagram": [[37, "state-diagram"]], "Signature Generation Model": [[37, "signature-generation-model"]], "via fingeprint_reader Command": [[37, "via-fingeprint-reader-command"]], "Hardware Setup": [[37, "hardware-setup"], [39, "hardware-setup"]], "Dumping images to PC": [[37, "dumping-images-to-pc"], [39, "dumping-images-to-pc"]], "Build Settings": [[37, "build-settings"], [39, "build-settings"], [41, "build-settings"]], "FINGERPRINT_AUTHENTICATOR_MODEL": [[37, "fingerprint-authenticator-model"]], "Hello World": [[38, "hello-world"]], "Image Classifier": [[39, "image-classifier"]], "Classification Model": [[39, "classification-model"]], "Model Input": [[39, "model-input"]], "Model Input Normalization": [[39, "model-input-normalization"]], "Model Output": [[39, "model-output"]], "via classify_image Command": [[39, "via-classify-image-command"]], "via update_params command": [[39, "via-update-params-command"], [41, "via-update-params-command"]], "IMAGE_CLASSIFIER_MODEL": [[39, "image-classifier-model"]], "C++ Examples": [[40, "c-examples"]], "Model Profiler": [[41, "model-profiler"], [63, "model-profiler"], [251, "model-profiler"], [253, "model-profiler"]], "MODEL_PROFILER_GENERATE_OP_RESOLVER_HEADER": [[41, "model-profiler-generate-op-resolver-header"]], "MODEL_PROFILER_MODEL_MEMORY_SECTION": [[41, "model-profiler-model-memory-section"]], "MODEL_PROFILER_RUNTIME_MEMORY_SIZE": [[41, "model-profiler-runtime-memory-size"]], "MODEL_PROFILER_RUNTIME_MEMORY_SECTION": [[41, "model-profiler-runtime-memory-section"]], "TFLITE_MICRO_ACCELERATOR_PROFILER_ENABLED": [[41, "tflite-micro-accelerator-profiler-enabled"]], "MLTK_RUNTIME_MEMORY_SIZE": [[41, "mltk-runtime-memory-size"]], "TFLITE_MICRO_RECORDER_ENABLED": [[41, "tflite-micro-recorder-enabled"]], "C++ Development": [[42, "c-development"]], "Development Modes": [[42, "development-modes"]], "Examples": [[42, "examples"], [67, "examples"]], "Simplicity Studio Development": [[43, "simplicity-studio-development"]], "5) Install Simplicity Studio 5": [[43, "install-simplicity-studio-5"]], "Install MLTK": [[43, "install-mltk"], [44, "install-mltk"]], "1) Clone the MLTK repository": [[43, "clone-the-mltk-repository"], [44, "clone-the-mltk-repository"]], "2) Run the install script": [[43, "run-the-install-script"], [44, "run-the-install-script"]], "3) Activate the MLTK Python virtual environment": [[43, "activate-the-mltk-python-virtual-environment"], [44, "activate-the-mltk-python-virtual-environment"]], "Install the MLTK into the Gecko SDK": [[43, "install-the-mltk-into-the-gecko-sdk"]], "Add the MLTK Gecko SDK to Simplicity Studio": [[43, "add-the-mltk-gecko-sdk-to-simplicity-studio"]], "Visual Studio Code Development": [[44, "visual-studio-code-development"]], "4) Install Segger GDB Debug Server": [[44, "install-segger-gdb-debug-server"]], "5) Install a Serial Terminal": [[44, "install-a-serial-terminal"]], "6) Install GIT": [[44, "install-git"]], "7) Windows: Install the C++ Redistributable Package": [[44, "windows-install-the-c-redistributable-package"]], "VSCode Setup": [[44, "vscode-setup"]], "1) Install VSCode": [[44, "install-vscode"]], "2) Open the MLTK VSCode workspace": [[44, "open-the-mltk-vscode-workspace"]], "3) Install the recommended extensions": [[44, "install-the-recommended-extensions"]], "4) Select the Python Interpreter": [[44, "select-the-python-interpreter"]], "Build for Windows or Linux": [[44, "build-for-windows-or-linux"]], "1) Optionally create file: user_options.cmake": [[44, "optionally-create-file-user-options-cmake"]], "2) Select the CMake Kit": [[44, "select-the-cmake-kit"]], "3) Configure the CMake Project": [[44, "configure-the-cmake-project"], [44, "id1"]], "4) Select the build type and build target": [[44, "select-the-build-type-and-build-target"], [44, "id2"]], "5) Build and run application": [[44, "build-and-run-application"]], "6) Or debug application": [[44, "or-debug-application"]], "Build for embedded": [[44, "build-for-embedded"]], "0) Configure Serial Terminal": [[44, "configure-serial-terminal"]], "1) Create file: user_options.cmake": [[44, "create-file-user-options-cmake"]], "2) Select the MLTK-ARM-GCC CMake Kit": [[44, "select-the-mltk-arm-gcc-cmake-kit"]], "5) Build, download, and run application": [[44, "build-download-and-run-application"]], "6) Build, download, and debug application": [[44, "build-download-and-debug-application"]], "AudioFeatureGenerator Python Wrapper": [[45, "audiofeaturegenerator-python-wrapper"]], "Additional Links": [[45, "additional-links"], [47, "additional-links"], [48, "additional-links"]], "Building the Wrapper": [[45, "building-the-wrapper"], [47, "building-the-wrapper"], [48, "building-the-wrapper"]], "Pre-built": [[45, "pre-built"], [47, "pre-built"], [48, "pre-built"]], "Automatic Build": [[45, "automatic-build"], [47, "automatic-build"], [48, "automatic-build"]], "Manual build via MLTK command": [[45, "manual-build-via-mltk-command"], [47, "manual-build-via-mltk-command"], [48, "manual-build-via-mltk-command"]], "Manual build via CMake": [[45, "manual-build-via-cmake"], [47, "manual-build-via-cmake"], [48, "manual-build-via-cmake"]], "C++ Python Wrappers": [[46, "c-python-wrappers"]], "MVP Python Wrapper": [[47, "mvp-python-wrapper"]], "Tensorflow-Lite Micro Python Wrapper": [[48, "tensorflow-lite-micro-python-wrapper"]], "API Examples": [[49, "api-examples"]], "How can I debug my model during training?": [[50, "how-can-i-debug-my-model-during-training"]], "How can I reduce my model\u2019s size?": [[51, "how-can-i-reduce-my-model-s-size"]], "What are the model resource requirements?": [[51, "what-are-the-model-resource-requirements"]], "Reduce model input size": [[51, "reduce-model-input-size"]], "Use int8 model input data type": [[51, "use-int8-model-input-data-type"]], "Reduce Filter Count": [[51, "reduce-filter-count"]], "Increase Strides": [[51, "increase-strides"]], "Decrease kernel sizes": [[51, "decrease-kernel-sizes"]], "Reduce FullyConnected units": [[51, "reduce-fullyconnected-units"]], "Use pooling layers": [[51, "use-pooling-layers"]], "How do I run my model on an embedded device?": [[52, "how-do-i-run-my-model-on-an-embedded-device"]], "CMake": [[52, "cmake"]], "Command line": [[52, "command-line"]], "Frequently Asked Questions": [[53, "frequently-asked-questions"]], "Linux: Why isn\u2019t the GPU working?": [[54, "linux-why-isn-t-the-gpu-working"]], "Where is my trained model?": [[55, "where-is-my-trained-model"]], "Why does the Keras (.h5) model work during evaluation but the TF-Lite (.tflite) does not?": [[56, "why-does-the-keras-h5-model-work-during-evaluation-but-the-tf-lite-tflite-does-not"]], "Why is the model not returning correct results on the embedded device?": [[57, "why-is-the-model-not-returning-correct-results-on-the-embedded-device"]], "Input Data Preprocessing": [[57, "input-data-preprocessing"]], "Input Data Type": [[57, "input-data-type"]], "Hint: Just use float32": [[57, "hint-just-use-float32"]], "Windows: I am seeing a DLL error when importing Tensorflow": [[58, "windows-i-am-seeing-a-dll-error-when-importing-tensorflow"]], "Your setup is missing a required DLL": [[58, "your-setup-is-missing-a-required-dll"]], "Your setup requires the NVIDIA CUDA driver": [[58, "your-setup-requires-the-nvidia-cuda-driver"]], "Modeling Guides": [[59, "modeling-guides"]], "Model Archive File": [[60, "model-archive-file"]], "Contents": [[60, "contents"], [248, "contents"], [249, "contents"]], "Directory Structure": [[60, "directory-structure"]], "Model Evaluation": [[61, "model-evaluation"], [251, "model-evaluation"], [253, "model-evaluation"]], "Quick Reference": [[61, "quick-reference"], [62, "quick-reference"], [63, "quick-reference"], [65, "quick-reference"], [68, "quick-reference"], [69, "quick-reference"], [70, "quick-reference"], [71, "quick-reference"], [72, "quick-reference"], [76, "quick-reference"]], "Non-Quantized vs Quantized Model Evaluation": [[61, "non-quantized-vs-quantized-model-evaluation"]], "Model Profiling vs Model Evaluation": [[61, "model-profiling-vs-model-evaluation"]], "Model Specification": [[61, "model-specification"], [67, "model-specification"], [69, "model-specification"], [126, "model-specification"], [127, "model-specification"], [128, "model-specification"], [129, "id1"], [130, "id1"], [131, "model-specification"], [132, "model-specification"], [133, "model-specification"], [134, "model-specification"], [136, "model-specification"], [138, "model-specification"], [140, "model-specification"], [141, "model-specification"], [142, "model-specification"], [143, "model-specification"], [144, "model-specification"], [145, "model-specification"], [146, "model-specification"], [147, "model-specification"], [148, "model-specification"], [149, "model-specification"], [151, "model-specification"], [152, "model-specification"], [153, "model-specification"], [154, "model-specification"], [156, "model-specification"], [157, "model-specification"], [253, "model-specification"], [257, "model-specification"]], "Evaluation Results": [[61, "evaluation-results"]], "EvaluateClassifierMixin": [[61, "evaluateclassifiermixin"]], "Confusion Matrix": [[61, "confusion-matrix"]], "ROC": [[61, "roc"]], "Precision vs Recall": [[61, "precision-vs-recall"]], "True Positive Rate": [[61, "true-positive-rate"]], "False Positive Rate": [[61, "false-positive-rate"]], "EvaluateAutoEncoderMixin": [[61, "evaluateautoencodermixin"]], "Command": [[61, "command"], [62, "command"], [63, "command"], [65, "command"], [68, "command"], [69, "command"], [71, "command"], [72, "command"], [251, "command"], [253, "command"]], "Example 1: Evaluate Classification .h5 Model": [[61, "example-1-evaluate-classification-h5-model"], [237, "example-1-evaluate-classification-h5-model"]], "Example 2: Evaluate Classification .tflite Model": [[61, "example-2-evaluate-classification-tflite-model"], [237, "example-2-evaluate-classification-tflite-model"]], "Example 3: Evaluate Auto-Encoder .h5 Model": [[61, "example-3-evaluate-auto-encoder-h5-model"], [237, "example-3-evaluate-auto-encoder-h5-model"]], "Python API": [[61, "python-api"], [62, "python-api"], [63, "python-api"], [65, "python-api"], [68, "python-api"], [69, "python-api"], [72, "python-api"]], "Parameter Basics": [[62, "parameter-basics"]], "Viewing Parameters": [[62, "viewing-parameters"]], "General Parameters": [[62, "general-parameters"]], "Model Mixins": [[62, "model-mixins"]], "AudioDatasetMixin": [[62, "audiodatasetmixin"]], "ImageDatasetMixin": [[62, "imagedatasetmixin"]], "Custom Parameters": [[62, "custom-parameters"]], "Add Via Model Script": [[62, "add-via-model-script"]], "Add Via Command/API": [[62, "add-via-command-api"]], "Example 1: Update model specification": [[62, "example-1-update-model-specification"], [244, "example-1-update-model-specification"]], "Example 2: Update with command-line": [[62, "example-2-update-with-command-line"]], "Example 3: Update with .json file": [[62, "example-3-update-with-json-file"]], "Profiling Metrics": [[63, "profiling-metrics"]], "Entire Model Metrics": [[63, "entire-model-metrics"]], "Per Layer Metrics": [[63, "per-layer-metrics"]], "Modes of Operation": [[63, "modes-of-operation"]], "Basic Simulator Mode": [[63, "basic-simulator-mode"]], "Hardware Simulator Mode": [[63, "hardware-simulator-mode"]], "Physical Device Mode": [[63, "physical-device-mode"]], "Example 1: Profile in basic simulator": [[63, "example-1-profile-in-basic-simulator"]], "Example 2: Profile in MVP hardware simulator": [[63, "example-2-profile-in-mvp-hardware-simulator"]], "Example 3: Profile on physical device using MVP hardware accelerator": [[63, "example-3-profile-on-physical-device-using-mvp-hardware-accelerator"]], "Example 4: Profile model before training": [[63, "example-4-profile-model-before-training"], [238, "example-4-profile-model-before-training"]], "Model Profiler Utility": [[64, "model-profiler-utility"]], "Download": [[64, "download"]], "Saving the results": [[64, "saving-the-results"]], "Local HTTP server options": [[64, "local-http-server-options"]], "Model Quantization": [[65, "model-quantization"]], "Tensorflow-Lite Converter Settings": [[65, "tensorflow-lite-converter-settings"], [67, "tensorflow-lite-converter-settings"]], "optimizations": [[65, "optimizations"]], "supported_ops": [[65, "supported-ops"]], "inference_input_type": [[65, "inference-input-type"]], "inference_output_type": [[65, "inference-output-type"]], "representative_dataset": [[65, "representative-dataset"]], "Example 1: Update .tflite in model archive": [[65, "example-1-update-tflite-in-model-archive"], [239, "example-1-update-tflite-in-model-archive"]], "Model Search Path": [[66, "model-search-path"]], "Model Name": [[67, "model-name"]], "Discoverable Models": [[67, "discoverable-models"]], "MltkModel Class Instance": [[67, "mltkmodel-class-instance"]], "Specification Sections": [[67, "specification-sections"]], "Model Layout": [[67, "model-layout"], [69, "model-layout"]], "Note about hardcoding model layer parameters": [[67, "note-about-hardcoding-model-layer-parameters"], [69, "note-about-hardcoding-model-layer-parameters"]], "General Settings": [[67, "general-settings"]], "Basic Training Settings": [[67, "basic-training-settings"]], "Training Keras Callback Settings": [[67, "training-keras-callback-settings"]], "Basic Dataset Settings": [[67, "basic-dataset-settings"]], "Dataset Augmentation Settings": [[67, "dataset-augmentation-settings"]], "Tensorflow Dataset API": [[67, "tensorflow-dataset-api"]], "Evaluation Settings": [[67, "evaluation-settings"]], "Additional Parameters": [[67, "additional-parameters"]], "Model Summary": [[68, "model-summary"], [126, "model-summary"], [128, "model-summary"], [131, "model-summary"], [132, "model-summary"], [133, "model-summary"], [136, "model-summary"], [138, "model-summary"], [140, "model-summary"], [141, "model-summary"], [142, "model-summary"], [143, "model-summary"], [144, "model-summary"], [145, "model-summary"], [146, "model-summary"], [147, "model-summary"], [148, "model-summary"], [149, "model-summary"], [151, "model-summary"], [152, "model-summary"], [153, "model-summary"], [154, "model-summary"], [156, "model-summary"], [157, "model-summary"], [251, "model-summary"], [253, "model-summary"]], "Keras Model vs Tensorflow-Lite Model Summary": [[68, "keras-model-vs-tensorflow-lite-model-summary"]], "Example 1: Summarize Keras model": [[68, "example-1-summarize-keras-model"], [240, "example-1-summarize-keras-model"]], "Example 2: Summarize Tensorflow-Lite model": [[68, "example-2-summarize-tensorflow-lite-model"], [240, "example-2-summarize-tensorflow-lite-model"]], "Example 3: Summarize external Tensorflow-Lite model": [[68, "example-3-summarize-external-tensorflow-lite-model"], [240, "example-3-summarize-external-tensorflow-lite-model"]], "Example 4: Summarize model before training": [[68, "example-4-summarize-model-before-training"], [240, "example-4-summarize-model-before-training"]], "Model Training": [[69, "model-training"], [251, "model-training"], [253, "model-training"]], "MltkModel Instance": [[69, "mltkmodel-instance"]], "Training Output": [[69, "training-output"]], "Example 1: Train as a \u201cdry run\u201d": [[69, "example-1-train-as-a-dry-run"], [243, "example-1-train-as-a-dry-run"]], "Example 2: Train for 100 epochs": [[69, "example-2-train-for-100-epochs"]], "Example 3: Resume Training": [[69, "example-3-resume-training"]], "Model Training Monitor": [[70, "model-training-monitor"]], "1) Configure the Tensorboard callback": [[70, "configure-the-tensorboard-callback"], [70, "id1"]], "2) Train the model": [[70, "train-the-model"]], "3) Start Tensorboard": [[70, "start-tensorboard"]], "Model Training Profiler": [[70, "model-training-profiler"]], "Troubleshoot: Profile tab does not appear": [[70, "troubleshoot-profile-tab-does-not-appear"]], "Run Tensorboard from remote SSH session": [[70, "run-tensorboard-from-remote-ssh-session"]], "2) Train the model on the remote machine": [[70, "train-the-model-on-the-remote-machine"]], "3) Start Tensorboard on the remote machine": [[70, "start-tensorboard-on-the-remote-machine"]], "4) Open a reverse SSH tunnel on the local machine": [[70, "open-a-reverse-ssh-tunnel-on-the-local-machine"]], "5) Open http://localhost:6002 in your web-browser": [[70, "open-http-localhost-6002-in-your-web-browser"]], "Model Training via SSH": [[71, "model-training-via-ssh"]], "SSH Connection": [[71, "ssh-connection"]], "Installing an SSH client": [[71, "installing-an-ssh-client"]], "Windows": [[71, "windows"]], "Linux": [[71, "linux"]], "Generating a Keypair": [[71, "generating-a-keypair"]], "Additional Resources": [[71, "additional-resources"]], "Command sequence": [[71, "command-sequence"]], "Settings": [[71, "settings"], [77, "settings"]], "Remote Working Directory": [[71, "remote-working-directory"]], "Hostname": [[71, "hostname"]], "Port": [[71, "port"]], "Username": [[71, "username"]], "Key Filename": [[71, "key-filename"]], "Environment": [[71, "environment"]], "Upload Files": [[71, "upload-files"]], "Startup Commands": [[71, "startup-commands"]], "Download Files": [[71, "download-files"]], "Shutdown Commands": [[71, "shutdown-commands"]], "Sync Local MLTK": [[71, "sync-local-mltk"]], "Settings Locations": [[71, "settings-locations"]], "Command-line options": [[71, "command-line-options"]], "\u2013host": [[71, "host"]], "\u2013port": [[71, "id1"]], "\u2013identity_file": [[71, "identity-file"]], "SshMixin": [[71, "sshmixin"]], "Example": [[71, "example"], [71, "id2"], [71, "id3"], [77, "example"]], "~/.mltk/user_settings.yaml": [[71, "mltk-user-settings-yaml"]], "~/.ssh/config": [[71, "ssh-config"]], "Command Examples": [[71, "command-examples"]], "Example 1: Train with settings configured in user_settings.yaml": [[71, "example-1-train-with-settings-configured-in-user-settings-yaml"]], "Example 2: Train with settings on command-line": [[71, "example-2-train-with-settings-on-command-line"]], "Example 3: Train without wait for results": [[71, "example-3-train-without-wait-for-results"]], "Example 4: Retrieve results from previous training session": [[71, "example-4-retrieve-results-from-previous-training-session"]], "Example 5: Train new model, and forcefully discard previous": [[71, "example-5-train-new-model-and-forcefully-discard-previous"]], "Model Visualizer": [[72, "model-visualizer"]], "Example 1: View Keras model": [[72, "example-1-view-keras-model"], [245, "example-1-view-keras-model"]], "Example 2: View Tensorflow-Lite model": [[72, "example-2-view-tensorflow-lite-model"], [245, "example-2-view-tensorflow-lite-model"]], "Example 3: View external Tensorflow-Lite model": [[72, "example-3-view-external-tensorflow-lite-model"], [245, "example-3-view-external-tensorflow-lite-model"]], "Example 4: View model before training": [[72, "example-4-view-model-before-training"], [245, "example-4-view-model-before-training"]], "Notebook Examples Guide": [[73, "notebook-examples-guide"]], "VSCode Notebooks": [[73, "vscode-notebooks"]], "Google Colab": [[73, "google-colab"], [74, "google-colab"]], "Installation": [[74, "installation"], [236, "installation"]], "Standard Python Package": [[74, "standard-python-package"]], "Update Python Package": [[74, "update-python-package"]], "Local Development": [[74, "local-development"]], "Environment Variables": [[75, "environment-variables"]], "MLTK_MODEL_PATHS": [[75, "mltk-model-paths"]], "MLTK_CACHE_DIR": [[75, "mltk-cache-dir"]], "MLTK_USER_SETTINGS_PATH": [[75, "mltk-user-settings-path"]], "MLTK_READONLY": [[75, "mltk-readonly"]], "MLTK_SETUP_PY_DEPS": [[75, "mltk-setup-py-deps"]], "MLTK_TEMP_DIR": [[75, "mltk-temp-dir"]], "File Types": [[76, "file-types"]], ".tflite: Tensorflow-Lite Model": [[76, "tflite-tensorflow-lite-model"]], ".h5: Keras Model": [[76, "h5-keras-model"]], ".mltk.zip: MLTK Model Archive": [[76, "mltk-zip-mltk-model-archive"]], ".py: Model Specification": [[76, "py-model-specification"]], "Model Object Types": [[76, "model-object-types"]], "MltkModel": [[76, "mltkmodel"]], "TfliteModel": [[76, "tflitemodel"]], "KerasModel": [[76, "kerasmodel"]], "Settings File": [[77, "settings-file"]], "model_paths": [[77, "model-paths"]], "Supported Hardware": [[78, "supported-hardware"]], "BRD2601": [[78, "brd2601"]], "BRD2204": [[78, "brd2204"]], "BRD4166": [[78, "brd4166"]], "BRD4186": [[78, "brd4186"]], "mltk.core.preprocess.utils.audio": [[80, "module-mltk.core.preprocess.utils.audio"]], "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator": [[81, "mltk-core-preprocess-audio-parallel-generator-parallelaudiodatagenerator"]], "mltk.core.preprocess.audio.parallel_generator.ParallelProcessParams": [[82, "mltk-core-preprocess-audio-parallel-generator-parallelprocessparams"]], "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator": [[83, "mltk-core-preprocess-audio-audio-feature-generator-audiofeaturegenerator"]], "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings": [[84, "mltk-core-preprocess-audio-audio-feature-generator-audiofeaturegeneratorsettings"]], "mltk.core.preprocess.utils.image": [[85, "module-mltk.core.preprocess.utils.image"]], "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator": [[86, "mltk-core-preprocess-image-parallel-generator-parallelimagedatagenerator"]], "mltk.core.preprocess.image.parallel_generator.ParallelProcessParams": [[87, "mltk-core-preprocess-image-parallel-generator-parallelprocessparams"]], "Data Preprocessing": [[88, "data-preprocessing"]], "mltk.core.preprocess.utils.list_directory": [[89, "module-mltk.core.preprocess.utils.list_directory"]], "mltk.core.preprocess.utils.normalize": [[90, "module-mltk.core.preprocess.utils.normalize"]], "mltk.core.preprocess.utils.tf_dataset": [[91, "module-mltk.core.preprocess.utils.tf_dataset"]], "Common Utilities": [[92, "common-utilities"]], "mltk.datasets.accelerometer.tflm_magic_wand": [[93, "module-mltk.datasets.accelerometer.tflm_magic_wand"]], "Tensorflow-Lite Micro Magic Wand": [[93, "tensorflow-lite-micro-magic-wand"]], "mltk.datasets.audio.background_noise.ambient": [[94, "module-mltk.datasets.audio.background_noise.ambient"]], "Generic Background Noise": [[94, "generic-background-noise"]], "License": [[94, "license"], [98, "license"], [105, "license"], [142, "license"], [236, "license"]], "mltk.datasets.audio.background_noise.brd2601": [[95, "module-mltk.datasets.audio.background_noise.brd2601"]], "BRD2601 Background Noise": [[95, "brd2601-background-noise"]], "mltk.datasets.audio.background_noise.esc50": [[96, "module-mltk.datasets.audio.background_noise.esc50"]], "ESC: Dataset for Environmental Sound Classification": [[96, "esc-dataset-for-environmental-sound-classification"]], "Abstract": [[96, "abstract"], [99, "abstract"], [100, "abstract"]], "Citing": [[96, "citing"]], "mltk.datasets.audio.direction_commands": [[97, "module-mltk.datasets.audio.direction_commands"]], "Direction Commands": [[97, "direction-commands"]], "mltk.datasets.audio.mit_ir_survey": [[98, "module-mltk.datasets.audio.mit_ir_survey"]], "MIT Impulse Response Survey": [[98, "mit-impulse-response-survey"]], "Credits": [[98, "credits"], [102, "credits"]], "mltk.datasets.audio.mlcommons.ml_commons_keywords": [[99, "module-mltk.datasets.audio.mlcommons.ml_commons_keywords"]], "ML Commons Keywords": [[99, "ml-commons-keywords"]], "mltk.datasets.audio.mlcommons.ml_commons_voice": [[100, "module-mltk.datasets.audio.mlcommons.ml_commons_voice"]], "ML Commons Voice Subset": [[100, "ml-commons-voice-subset"]], "mltk.datasets.audio.on_off": [[101, "module-mltk.datasets.audio.on_off"]], "On/Off": [[101, "on-off"]], "mltk.datasets.audio.speech_commands.speech_commands_v2": [[102, "module-mltk.datasets.audio.speech_commands.speech_commands_v2"]], "Google Speech Commands v2": [[102, "google-speech-commands-v2"]], "History": [[102, "history"]], "Collection": [[102, "collection"]], "Organization": [[102, "organization"]], "Processing": [[102, "processing"]], "Background Noise": [[102, "background-noise"]], "Citations": [[102, "citations"]], "mltk.datasets.image.cifar10": [[103, "module-mltk.datasets.image.cifar10"]], "CIFAR10": [[103, "cifar10"]], "mltk.datasets.image.fashion_mnist": [[104, "module-mltk.datasets.image.fashion_mnist"]], "Fashion-MNIST": [[104, "fashion-mnist"]], "mltk.datasets.image.mnist": [[105, "module-mltk.datasets.image.mnist"]], "MNIST": [[105, "mnist"]], "mltk.datasets.image.rock_paper_scissors_v1": [[106, "module-mltk.datasets.image.rock_paper_scissors_v1"]], "Rock, Paper, Scissors v1": [[106, "rock-paper-scissors-v1"]], "mltk.datasets.image.rock_paper_scissors_v2": [[107, "module-mltk.datasets.image.rock_paper_scissors_v2"]], "Rock, Paper, Scissors v2": [[107, "rock-paper-scissors-v2"]], "Reference Datasets": [[108, "reference-datasets"]], "Audio Datasets": [[108, "audio-datasets"]], "Image Datasets": [[108, "image-datasets"]], "Accelerometer Datasets": [[108, "accelerometer-datasets"]], "API Reference": [[109, "api-reference"], [117, "api-reference"], [167, "api-reference"], [186, "api-reference"], [207, "api-reference"], [219, "api-reference"], [226, "api-reference"], [232, "api-reference"]], "Keras Model": [[110, "keras-model"]], "mltk.core.AudioDatasetMixin": [[111, "mltk-core-audiodatasetmixin"]], "mltk.core.DatasetMixin": [[112, "mltk-core-datasetmixin"]], "mltk.core.EvaluateAutoEncoderMixin": [[113, "mltk-core-evaluateautoencodermixin"]], "mltk.core.EvaluateClassifierMixin": [[114, "mltk-core-evaluateclassifiermixin"]], "mltk.core.EvaluateMixin": [[115, "mltk-core-evaluatemixin"]], "mltk.core.ImageDatasetMixin": [[116, "mltk-core-imagedatasetmixin"]], "MLTK Model": [[117, "mltk-model"]], "Example Usage": [[117, "example-usage"], [167, "example-usage"], [186, "example-usage"], [207, "example-usage"], [219, "example-usage"], [226, "example-usage"], [232, "example-usage"]], "mltk.core.MltkDataset": [[118, "mltk-core-mltkdataset"]], "mltk.core.MltkModel": [[119, "mltk-core-mltkmodel"]], "mltk.core.MltkModelEvent": [[120, "mltk-core-mltkmodelevent"]], "mltk.core.SshMixin": [[121, "mltk-core-sshmixin"]], "mltk.core.TrainMixin": [[122, "mltk-core-trainmixin"]], "Model Utilities": [[123, "model-utilities"]], "load_mltk_model": [[123, "load-mltk-model"]], "load_mltk_model_with_path": [[123, "load-mltk-model-with-path"]], "list_mltk_models": [[123, "list-mltk-models"]], "load_tflite_or_keras_model": [[123, "load-tflite-or-keras-model"]], "load_tflite_model": [[123, "load-tflite-model"]], "mltk.core.WeightsAndBiasesMixin": [[124, "mltk-core-weightsandbiasesmixin"]], "Common Model Architectures": [[125, "common-model-architectures"]], "ARM DepthwiseConv2D": [[125, "arm-depthwiseconv2d"]], "Fully Connected Auto-encoder": [[125, "fully-connected-auto-encoder"]], "MobileNet v1": [[125, "mobilenet-v1"]], "MobileNet v2": [[125, "mobilenet-v2"]], "ResNetv1-10": [[125, "resnetv1-10"]], "TENet": [[125, "tenet"]], "audio_example1": [[126, "audio-example1"]], "Commands": [[126, "commands"], [127, "commands"], [128, "commands"], [129, "commands"], [130, "commands"], [131, "commands"], [132, "commands"], [133, "commands"], [134, "commands"], [136, "commands"], [138, "commands"], [140, "commands"], [141, "commands"], [142, "commands"], [143, "commands"], [144, "commands"], [145, "commands"], [146, "commands"], [147, "commands"], [148, "commands"], [149, "commands"], [151, "commands"], [152, "commands"], [153, "commands"], [154, "commands"], [156, "commands"], [157, "commands"]], "Model Profiling Report": [[126, "model-profiling-report"], [128, "model-profiling-report"], [133, "model-profiling-report"], [138, "model-profiling-report"], [140, "model-profiling-report"], [141, "model-profiling-report"], [142, "model-profiling-report"], [143, "model-profiling-report"], [144, "model-profiling-report"], [145, "model-profiling-report"], [146, "model-profiling-report"], [147, "model-profiling-report"], [148, "model-profiling-report"], [149, "model-profiling-report"], [151, "model-profiling-report"], [152, "model-profiling-report"], [153, "model-profiling-report"], [154, "model-profiling-report"], [156, "model-profiling-report"], [157, "model-profiling-report"]], "Model Diagram": [[126, "model-diagram"], [128, "model-diagram"], [131, "model-diagram"], [132, "model-diagram"], [133, "model-diagram"], [136, "model-diagram"], [138, "model-diagram"], [140, "model-diagram"], [141, "model-diagram"], [142, "model-diagram"], [143, "model-diagram"], [144, "model-diagram"], [145, "model-diagram"], [146, "model-diagram"], [147, "model-diagram"], [148, "model-diagram"], [149, "model-diagram"], [151, "model-diagram"], [152, "model-diagram"], [153, "model-diagram"], [154, "model-diagram"], [156, "model-diagram"], [157, "model-diagram"]], "audio_tf_dataset": [[127, "audio-tf-dataset"]], "autoencoder_example": [[128, "autoencoder-example"]], "basic_example": [[129, "basic-example"]], "basic_tf_dataset_example": [[130, "basic-tf-dataset-example"]], "binary_classification": [[131, "binary-classification"]], "conv1d_example": [[132, "conv1d-example"]], "image_example1": [[133, "image-example1"]], "image_tf_dataset": [[134, "image-tf-dataset"]], "Example Models": [[135, "example-models"]], "siamese_contrastive": [[136, "siamese-contrastive"]], "Reference Models": [[137, "reference-models"]], "fingerprint_signature_generator": [[138, "fingerprint-signature-generator"]], "Silicon Lab\u2019s Models": [[139, "silicon-lab-s-models"]], "keyword_spotting_alexa": [[140, "keyword-spotting-alexa"]], "Dataset": [[140, "dataset"], [141, "dataset"], [142, "dataset"], [143, "dataset"], [144, "dataset"], [145, "dataset"], [146, "dataset"], [147, "dataset"], [148, "dataset"], [152, "dataset"], [153, "dataset"], [154, "dataset"], [156, "dataset"], [157, "dataset"], [250, "dataset"]], "Preprocessing": [[140, "preprocessing"], [141, "preprocessing"], [142, "preprocessing"], [143, "preprocessing"], [144, "preprocessing"], [145, "preprocessing"], [146, "preprocessing"], [147, "preprocessing"], [148, "preprocessing"]], "keyword_spotting_mobilenetv2": [[141, "keyword-spotting-mobilenetv2"]], "keyword_spotting_on_off": [[142, "keyword-spotting-on-off"]], "keyword_spotting_on_off_v2": [[143, "keyword-spotting-on-off-v2"]], "Training the Model": [[143, "training-the-model"], [146, "training-the-model"]], "Changes from v1": [[143, "changes-from-v1"], [146, "changes-from-v1"]], "keyword_spotting_on_off_v3": [[144, "keyword-spotting-on-off-v3"]], "Dataset Summary": [[144, "dataset-summary"], [147, "dataset-summary"], [253, "dataset-summary"]], "Model Architecture": [[144, "model-architecture"], [147, "model-architecture"]], "keyword_spotting_pacman": [[145, "keyword-spotting-pacman"]], "keyword_spotting_pacman_v2": [[146, "keyword-spotting-pacman-v2"]], "keyword_spotting_pacman_v3": [[147, "keyword-spotting-pacman-v3"]], "keyword_spotting_with_transfer_learning": [[148, "keyword-spotting-with-transfer-learning"]], "rock_paper_scissors": [[149, "rock-paper-scissors"]], "Tensorflow-Lite Micro Models": [[150, "tensorflow-lite-micro-models"]], "tflite_micro_magic_wand": [[151, "tflite-micro-magic-wand"]], "tflite_micro_speech": [[152, "tflite-micro-speech"]], "Model Topology & Training": [[152, "model-topology-training"]], "Performance (floating point model)": [[152, "performance-floating-point-model"], [153, "performance-floating-point-model"], [154, "performance-floating-point-model"], [156, "performance-floating-point-model"], [157, "performance-floating-point-model"]], "Performance (quantized tflite model)": [[152, "performance-quantized-tflite-model"], [153, "performance-quantized-tflite-model"], [154, "performance-quantized-tflite-model"], [156, "performance-quantized-tflite-model"], [157, "performance-quantized-tflite-model"]], "anomaly_detection": [[153, "anomaly-detection"]], "Model Topology": [[153, "model-topology"], [154, "model-topology"], [156, "model-topology"], [157, "model-topology"]], "Spectrogram Characteristics": [[153, "spectrogram-characteristics"], [156, "spectrogram-characteristics"]], "image_classification": [[154, "image-classification"]], "TinyML Models": [[155, "tinyml-models"]], "keyword_spotting": [[156, "keyword-spotting"]], "visual_wake_words": [[157, "visual-wake-words"]], "evaluate_model": [[158, "evaluate-model"]], "evaluate_classifier": [[158, "evaluate-classifier"], [158, "id1"]], "ClassifierEvaluationResults": [[158, "classifierevaluationresults"]], "evaluate_autoencoder": [[158, "evaluate-autoencoder"]], "AutoEncoderEvaluationResults": [[158, "autoencoderevaluationresults"]], "Model Operations": [[159, "model-operations"]], "profile_model": [[160, "profile-model"]], "ProfilingModelResults": [[160, "profilingmodelresults"]], "ProfilingLayerResult": [[160, "profilinglayerresult"]], "quantize_model": [[161, "quantize-model"]], "summarize_model": [[162, "summarize-model"]], "train_model": [[163, "train-model"]], "TrainingResults": [[163, "trainingresults"]], "update_model_parameters": [[164, "update-model-parameters"]], "view_model": [[165, "view-model"]], "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator": [[166, "mltk-core-tflite-micro-tflite-micro-accelerator-tflitemicroaccelerator"]], "Tensorflow-Lite Micro Model": [[167, "tensorflow-lite-micro-model"]], "mltk.core.tflite_micro.TfliteMicroLayerError": [[168, "mltk-core-tflite-micro-tflitemicrolayererror"]], "mltk.core.tflite_micro.TfliteMicroModel": [[169, "mltk-core-tflite-micro-tflitemicromodel"]], "mltk.core.tflite_micro.TfliteMicroModelDetails": [[170, "mltk-core-tflite-micro-tflitemicromodeldetails"]], "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult": [[171, "mltk-core-tflite-micro-tflitemicroprofiledlayerresult"]], "mltk.core.tflite_micro.TfliteMicro": [[172, "mltk-core-tflite-micro-tflitemicro"]], "mltk.core.TfliteActivation": [[173, "mltk-core-tfliteactivation"]], "mltk.core.TfliteAddLayer": [[174, "mltk-core-tfliteaddlayer"]], "mltk.core.TfliteConv2dLayer": [[175, "mltk-core-tfliteconv2dlayer"]], "mltk.core.TfliteConv2DLayerOptions": [[176, "mltk-core-tfliteconv2dlayeroptions"]], "mltk.core.TfliteConvParams": [[177, "mltk-core-tfliteconvparams"]], "mltk.core.TfliteDepthwiseConv2dLayer": [[178, "mltk-core-tflitedepthwiseconv2dlayer"]], "mltk.core.TfliteDepthwiseConv2DLayerOptions": [[179, "mltk-core-tflitedepthwiseconv2dlayeroptions"]], "mltk.core.TfliteDepthwiseConvParams": [[180, "mltk-core-tflitedepthwiseconvparams"]], "mltk.core.TfliteDequantizeLayer": [[181, "mltk-core-tflitedequantizelayer"]], "FlatbufferDictionary": [[182, "flatbufferdictionary"]], "TfliteModelParameters Flatbuffer Schema": [[182, "tflitemodelparameters-flatbuffer-schema"]], "mltk.core.TfliteFullyConnectedLayer": [[183, "mltk-core-tflitefullyconnectedlayer"]], "mltk.core.TfliteFullyConnectedLayerOptions": [[184, "mltk-core-tflitefullyconnectedlayeroptions"]], "mltk.core.TfliteFullyConnectedParams": [[185, "mltk-core-tflitefullyconnectedparams"]], "Tensorflow-Lite Model": [[186, "tensorflow-lite-model"]], "mltk.core.TfliteLayer": [[187, "mltk-core-tflitelayer"]], "mltk.core.TfliteModel": [[188, "mltk-core-tflitemodel"]], "mltk.core.TflitePadding": [[189, "mltk-core-tflitepadding"]], "mltk.core.TfliteModelParameters": [[190, "mltk-core-tflitemodelparameters"]], "mltk.core.TflitePooling2dLayer": [[191, "mltk-core-tflitepooling2dlayer"]], "mltk.core.TflitePool2DLayerOptions": [[192, "mltk-core-tflitepool2dlayeroptions"]], "mltk.core.TflitePoolParams": [[193, "mltk-core-tflitepoolparams"]], "mltk.core.TfliteQuantization": [[194, "mltk-core-tflitequantization"]], "mltk.core.TfliteQuantizeLayer": [[195, "mltk-core-tflitequantizelayer"]], "mltk.core.TfliteReshapeLayer": [[196, "mltk-core-tflitereshapelayer"]], "mltk.core.TfliteShape": [[197, "mltk-core-tfliteshape"]], "mltk.core.TfliteTensor": [[198, "mltk-core-tflitetensor"]], "mltk.core.TfliteTransposeConvLayer": [[199, "mltk-core-tflitetransposeconvlayer"]], "mltk.core.TfliteTransposeConvLayerOptions": [[200, "mltk-core-tflitetransposeconvlayeroptions"]], "mltk.core.TfliteTransposeConvParams": [[201, "mltk-core-tflitetransposeconvparams"]], "mltk.utils.archive": [[202, "module-mltk.utils.archive"]], "mltk.utils.archive_downloader": [[203, "module-mltk.utils.archive_downloader"]], "mltk.utils.audio_dataset_generator.Augmentation": [[204, "mltk-utils-audio-dataset-generator-augmentation"]], "mltk.utils.audio_dataset_generator.GenerationConfig": [[205, "mltk-utils-audio-dataset-generator-generationconfig"]], "mltk.utils.audio_dataset_generator.AudioDatasetGenerator": [[206, "mltk-utils-audio-dataset-generator-audiodatasetgenerator"]], "Audio Dataset Generator": [[207, "audio-dataset-generator"]], "mltk.utils.audio_dataset_generator.Keyword": [[208, "mltk-utils-audio-dataset-generator-keyword"]], "mltk.utils.audio_dataset_generator.Voice": [[209, "mltk-utils-audio-dataset-generator-voice"]], "mltk.utils.audio_dataset_generator.VoicePitch": [[210, "mltk-utils-audio-dataset-generator-voicepitch"]], "mltk.utils.audio_dataset_generator.VoiceRate": [[211, "mltk-utils-audio-dataset-generator-voicerate"]], "mltk.utils.bin2header": [[212, "module-mltk.utils.bin2header"]], "mltk.utils.cmake": [[213, "module-mltk.utils.cmake"]], "mltk.utils.gpu": [[214, "module-mltk.utils.gpu"]], "mltk.utils.hasher": [[215, "module-mltk.utils.hasher"]], "Utilities": [[216, "utilities"]], "mltk.utils.jlink_stream.JlinkCommandStream": [[217, "mltk-utils-jlink-stream-jlinkcommandstream"]], "mltk.utils.jlink_stream.JLinkDataStream": [[218, "mltk-utils-jlink-stream-jlinkdatastream"]], "J-Link Stream": [[219, "j-link-stream"]], "mltk.utils.jlink_stream.JlinkStream": [[220, "mltk-utils-jlink-stream-jlinkstream"]], "mltk.utils.jlink_stream.JlinkStreamOptions": [[221, "mltk-utils-jlink-stream-jlinkstreamoptions"]], "mltk.utils.logger": [[222, "module-mltk.utils.logger"]], "mltk.utils.path": [[223, "module-mltk.utils.path"]], "mltk.utils.process_pool.ProcessPool": [[224, "mltk-utils-process-pool-processpool"]], "mltk.utils.python": [[225, "module-mltk.utils.python"]], "Serial Reader": [[226, "serial-reader"]], "mltk.utils.serial_reader.SerialReader": [[227, "mltk-utils-serial-reader-serialreader"]], "mltk.utils.shell_cmd": [[228, "module-mltk.utils.shell_cmd"]], "mltk.utils.signal_handler.SignalHandler": [[229, "mltk-utils-signal-handler-signalhandler"]], "mltk.utils.string_formatting": [[230, "module-mltk.utils.string_formatting"]], "mltk.utils.system": [[231, "module-mltk.utils.system"]], "UART Stream": [[232, "uart-stream"]], "mltk.utils.uart_stream.UartStream": [[233, "mltk-utils-uart-stream-uartstream"]], "Tutorials": [[234, "tutorials"], [246, "tutorials"]], "Why MLTK?": [[235, "why-mltk"]], "Only a single python script and command-line is needed": [[235, "only-a-single-python-script-and-command-line-is-needed"]], "Comparison with other solutions": [[235, "comparison-with-other-solutions"]], "Lots of tools, all optional": [[235, "lots-of-tools-all-optional"]], "C++ Python wrappers": [[235, "c-python-wrappers"]], "Embedded model parameters": [[235, "embedded-model-parameters"]], "Integration with Tensorflow": [[235, "integration-with-tensorflow"]], "Integration with Tensorflow-Lite": [[235, "integration-with-tensorflow-lite"]], "Integration with Tensorflow-Lite Micro": [[235, "integration-with-tensorflow-lite-micro"]], "Integration with the Gecko SDK": [[235, "integration-with-the-gecko-sdk"]], "Support for cloud development": [[235, "support-for-cloud-development"]], "Training via SSH": [[235, "training-via-ssh"]], "Logging to the cloud": [[235, "logging-to-the-cloud"]], "Silicon Labs Machine Learning Toolkit (MLTK)": [[236, "silicon-labs-machine-learning-toolkit-mltk"]], "Other Information": [[236, "other-information"]], "Model Evaluation API Examples": [[237, "model-evaluation-api-examples"]], "Install MLTK Python Package": [[237, "install-mltk-python-package"], [238, "install-mltk-python-package"], [239, "install-mltk-python-package"], [240, "install-mltk-python-package"], [241, "install-mltk-python-package"], [242, "install-mltk-python-package"], [243, "install-mltk-python-package"], [244, "install-mltk-python-package"], [245, "install-mltk-python-package"], [250, "install-mltk-python-package"], [251, "install-mltk-python-package"], [253, "install-mltk-python-package"], [254, "install-mltk-python-package"]], "Import Python Packages": [[237, "import-python-packages"], [238, "import-python-packages"], [239, "import-python-packages"], [240, "import-python-packages"], [241, "import-python-packages"], [242, "import-python-packages"], [243, "import-python-packages"], [244, "import-python-packages"], [245, "import-python-packages"]], "Model Profiler API Examples": [[238, "model-profiler-api-examples"]], "Download .tflite model file": [[238, "download-tflite-model-file"], [241, "download-tflite-model-file"], [242, "download-tflite-model-file"]], "Example 1: Profile .tflite file in basic simulator": [[238, "example-1-profile-tflite-file-in-basic-simulator"]], "Example 2: Profile .tflite file in MVP hardware simulator": [[238, "example-2-profile-tflite-file-in-mvp-hardware-simulator"]], "Example 3: Profile .tflite file on physical device": [[238, "example-3-profile-tflite-file-on-physical-device"]], "Model Quantization API Examples": [[239, "model-quantization-api-examples"]], "Model Summary API Examples": [[240, "model-summary-api-examples"]], "TF-Lite Micro Model API Examples": [[241, "tf-lite-micro-model-api-examples"]], "Example 1: Load model and print summary": [[241, "example-1-load-model-and-print-summary"]], "Example 2: Profile .tflite in TFLM interpreter": [[241, "example-2-profile-tflite-in-tflm-interpreter"]], "Example 3: Record each layers\u2019 input/output tensor": [[241, "example-3-record-each-layers-input-output-tensor"]], "TF-Lite Model API Examples": [[242, "tf-lite-model-api-examples"]], "Example 1: Load .tflite and print summary": [[242, "example-1-load-tflite-and-print-summary"]], "Example 2: Iterate the model layers": [[242, "example-2-iterate-the-model-layers"]], "Example 3: Add meta data to .tflite": [[242, "example-3-add-meta-data-to-tflite"]], "Example 4: Add model parameters to the .tflite": [[242, "example-4-add-model-parameters-to-the-tflite"]], "Example 5: Run inference": [[242, "example-5-run-inference"]], "Example 6: Access calculated layer parameters": [[242, "example-6-access-calculated-layer-parameters"]], "Example 7: Update model weights": [[242, "example-7-update-model-weights"]], "Model Training API Examples": [[243, "model-training-api-examples"]], "Example 2: Train for 10 epochs": [[243, "example-2-train-for-10-epochs"]], "Update Model Parameters API Examples": [[244, "update-model-parameters-api-examples"]], "Example 2: Update with argument": [[244, "example-2-update-with-argument"]], "Example 3: Return TfliteModel instance": [[244, "example-3-return-tflitemodel-instance"]], "Model Visualizer API Examples": [[245, "model-visualizer-api-examples"]], "Add an Existing Script to the MLTK": [[247, "add-an-existing-script-to-the-mltk"]], "Setup": [[247, "setup"]], "Existing Script": [[247, "existing-script"]], "Original mnist_convnet.py": [[247, "original-mnist-convnet-py"]], "MLTK Modifications": [[247, "mltk-modifications"]], "Modified mnist_convnet.py": [[247, "modified-mnist-convnet-py"]], "Run the modified script": [[247, "run-the-modified-script"]], "Run from command-line": [[247, "run-from-command-line"]], "Recommended Modifications": [[247, "recommended-modifications"]], "basic_example.py": [[247, "basic-example-py"]], "Next Steps": [[247, "next-steps"], [249, "next-steps"], [258, "next-steps"], [259, "next-steps"]], "Cloud Logging with Weights & Biases": [[248, "cloud-logging-with-weights-biases"]], "Disclaimer": [[248, "disclaimer"], [249, "disclaimer"]], "Basic Usage": [[248, "basic-usage"]], "Logging Information": [[248, "logging-information"]], "Default Data": [[248, "default-data"]], "Custom Data": [[248, "custom-data"]], "Training and logging in the cloud": [[248, "training-and-logging-in-the-cloud"]], "Other Features": [[248, "other-features"]], "Cloud Training with vast.ai": [[249, "cloud-training-with-vast-ai"]], "About vast.ai": [[249, "about-vast-ai"]], "What is Vast.ai?": [[249, "what-is-vast-ai"]], "How does it work in a nutshell?": [[249, "how-does-it-work-in-a-nutshell"]], "How do you protect my data from other clients?": [[249, "how-do-you-protect-my-data-from-other-clients"]], "How do you protect my data from providers?": [[249, "how-do-you-protect-my-data-from-providers"]], "How does billing work?": [[249, "how-does-billing-work"], [249, "id1"]], "How does pricing work?": [[249, "how-does-pricing-work"]], "Why should I trust vast.ai with my credit card info?": [[249, "why-should-i-trust-vast-ai-with-my-credit-card-info"]], "MLTK Installation": [[249, "mltk-installation"]], "Create an SSH Keypair": [[249, "create-an-ssh-keypair"]], "Create a vast.ai Account": [[249, "create-a-vast-ai-account"]], "Create new account": [[249, "create-new-account"]], "Add public SSH key to account": [[249, "add-public-ssh-key-to-account"]], "Add credit to account": [[249, "add-credit-to-account"]], "Configure instance image": [[249, "configure-instance-image"]], "Configure disk space": [[249, "configure-disk-space"]], "Select a Cloud Machine": [[249, "select-a-cloud-machine"]], "SSH Client Login": [[249, "ssh-client-login"]], "Notes about selecting a machine": [[249, "notes-about-selecting-a-machine"]], "Note about GPU Count": [[249, "note-about-gpu-count"]], "Note about CPU Count": [[249, "note-about-cpu-count"]], "Configure Settings": [[249, "configure-settings"]], "Develop a Model": [[249, "develop-a-model"]], "Suggested Reading": [[249, "suggested-reading"]], "Example Development Flow": [[249, "example-development-flow"]], "Modify the model specification": [[249, "modify-the-model-specification"]], "Note about custom datasets": [[249, "note-about-custom-datasets"]], "Test everything works locally": [[249, "test-everything-works-locally"]], "Profile model locally": [[249, "profile-model-locally"]], "Train Model in Cloud": [[249, "train-model-in-cloud"]], "Start cloud instance": [[249, "start-cloud-instance"]], "Start remote training": [[249, "start-remote-training"]], "Other CLI options": [[249, "other-cli-options"]], "Training Results": [[249, "training-results"]], "Shutdown Cloud Instance": [[249, "shutdown-cloud-instance"]], "Fingerprint Authentication": [[250, "fingerprint-authentication"]], "Demo Video": [[250, "demo-video"], [251, "demo-video"], [252, "demo-video"]], "Objectives": [[250, "objectives"], [251, "objectives"], [253, "objectives"], [254, "objectives"]], "Content": [[250, "content"], [251, "content"], [252, "content"], [253, "content"], [254, "content"], [259, "content"]], "Running this tutorial from a notebook": [[250, "running-this-tutorial-from-a-notebook"], [251, "running-this-tutorial-from-a-notebook"], [258, "running-this-tutorial-from-a-notebook"]], "Running this tutorial from the command-line": [[250, "running-this-tutorial-from-the-command-line"], [251, "running-this-tutorial-from-the-command-line"], [253, "running-this-tutorial-from-the-command-line"], [254, "running-this-tutorial-from-the-command-line"]], "Required Hardware": [[250, "required-hardware"], [251, "required-hardware"], [252, "required-hardware"], [254, "required-hardware"]], "Signature Generation Machine Learning Model Overview": [[250, "signature-generation-machine-learning-model-overview"]], "Siamese Networks": [[250, "siamese-networks"]], "Creating the dataset": [[250, "creating-the-dataset"]], "Generating the dataset": [[250, "generating-the-dataset"]], "Data preprocessing": [[250, "data-preprocessing"], [251, "data-preprocessing"]], "Generating fingerprint pairs": [[250, "generating-fingerprint-pairs"]], "Creating the Model": [[250, "creating-the-model"]], "Loss Function": [[250, "loss-function"]], "Saving the model": [[250, "saving-the-model"]], "Train the model": [[250, "train-the-model"], [252, "train-the-model"]], "Evaluating the model": [[250, "evaluating-the-model"]], "Determining the threshold": [[250, "determining-the-threshold"]], "Running the model": [[250, "running-the-model"]], "Using the command-line": [[250, "using-the-command-line"]], "Building the C++ example application": [[250, "building-the-c-example-application"]], "Image Classification - Rock, Paper, Scissors": [[251, "image-classification-rock-paper-scissors"]], "Classification Machine Learning Models Overview": [[251, "classification-machine-learning-models-overview"]], "Class IDs": [[251, "class-ids"]], "Convolution Neural Networks": [[251, "convolution-neural-networks"]], "Creating a Labeled Dataset": [[251, "creating-a-labeled-dataset"]], "Rock, Paper, Scissors Dataset Overview": [[251, "rock-paper-scissors-dataset-overview"]], "Update the Dataset": [[251, "update-the-dataset"]], "Update Sequence": [[251, "update-sequence"]], "Creating the Model Specification": [[251, "creating-the-model-specification"]], "Create the specification script": [[251, "create-the-specification-script"]], "Add necessary imports": [[251, "add-necessary-imports"]], "Define Model Object": [[251, "define-model-object"], [253, "define-model-object"]], "Configure the general model settings": [[251, "configure-the-general-model-settings"], [253, "configure-the-general-model-settings"]], "Configure the basic training settings": [[251, "configure-the-basic-training-settings"], [253, "configure-the-basic-training-settings"]], "Configure the training callbacks": [[251, "configure-the-training-callbacks"], [253, "configure-the-training-callbacks"]], "Configure the TF-Lite Converter settings": [[251, "configure-the-tf-lite-converter-settings"], [253, "configure-the-tf-lite-converter-settings"]], "Configure the dataset settings": [[251, "configure-the-dataset-settings"]], "Configure the data augmentation settings": [[251, "configure-the-data-augmentation-settings"]], "Define the model layout": [[251, "define-the-model-layout"]], "Model Visualization": [[251, "model-visualization"], [253, "model-visualization"]], "Visualize Keras model": [[251, "visualize-keras-model"], [253, "visualize-keras-model"]], "Visualize TF-Lite model": [[251, "visualize-tf-lite-model"], [253, "visualize-tf-lite-model"]], "Profile in simulator": [[251, "profile-in-simulator"], [253, "profile-in-simulator"]], "Profile on physical device": [[251, "profile-on-physical-device"], [253, "profile-on-physical-device"]], "Note about CPU utilization": [[251, "note-about-cpu-utilization"], [253, "note-about-cpu-utilization"]], "Note about model size and hardware constraints": [[251, "note-about-model-size-and-hardware-constraints"]], "Train as a \u201cdry run\u201d": [[251, "train-as-a-dry-run"], [253, "train-as-a-dry-run"]], "Training locally": [[251, "training-locally"], [253, "training-locally"]], "Train in cloud": [[251, "train-in-cloud"], [253, "train-in-cloud"], [254, "train-in-cloud"], [255, "train-in-cloud"], [257, "train-in-cloud"]], "Note about model accuracy": [[251, "note-about-model-accuracy"], [253, "note-about-model-accuracy"]], "Model Testing": [[251, "model-testing"], [253, "model-testing"]], "Deploying the Model": [[251, "deploying-the-model"], [253, "deploying-the-model"]], "Using the MLTK": [[251, "using-the-mltk"], [253, "using-the-mltk"]], "Keyword Spotting - Alexa": [[252, "keyword-spotting-alexa"]], "Quick start": [[252, "quick-start"]], "System Overview": [[252, "system-overview"]], "Prerequisite Reading": [[252, "prerequisite-reading"], [254, "prerequisite-reading"]], "EFR32xG24 development kit": [[252, "efr32xg24-development-kit"]], "Analog speaker with amplifier": [[252, "analog-speaker-with-amplifier"]], "Pinout": [[252, "pinout"]], "Develop the ML Model": [[252, "develop-the-ml-model"]], "Create the dataset": [[252, "create-the-dataset"]], "Synthetic dataset generation": [[252, "synthetic-dataset-generation"]], "\u201cNegative\u201d class": [[252, "negative-class"]], "Class balance": [[252, "class-balance"]], "Select the model architecture": [[252, "select-the-model-architecture"]], "Determine the audio frontend parameters": [[252, "determine-the-audio-frontend-parameters"]], "Audio visualizer command": [[252, "audio-visualizer-command"]], "AudioFeatureGenerator settings": [[252, "audiofeaturegenerator-settings"]], "Profile the model": [[252, "profile-the-model"]], "Model profiler command": [[252, "model-profiler-command"]], "Data augmentations": [[252, "data-augmentations"]], "Dump augmentations": [[252, "dump-augmentations"]], "Local Training": [[252, "local-training"]], "Remote Training": [[252, "remote-training"]], "Run the trained model": [[252, "run-the-trained-model"]], "Classify audio command": [[252, "classify-audio-command"]], "Run the demo": [[252, "run-the-demo"]], "Build C++ application from source": [[252, "build-c-application-from-source"]], "Increase the BAUD rate": [[252, "increase-the-baud-rate"]], "Keyword Spotting - On/Off": [[253, "keyword-spotting-on-off"]], "Machine Learning and Keyword-Spotting Overview": [[253, "machine-learning-and-keyword-spotting-overview"]], "Dataset Selection and Preprocessing Parameters": [[253, "dataset-selection-and-preprocessing-parameters"]], "TL;DR": [[253, "tl-dr"]], "Acquire a Representative Dataset": [[253, "acquire-a-representative-dataset"]], "Synthetically Generated Dataset": [[253, "synthetically-generated-dataset"]], "Creating an \u201cUnknown\u201d Class": [[253, "creating-an-unknown-class"]], "Final note about the dataset": [[253, "final-note-about-the-dataset"]], "Feature Engineering": [[253, "feature-engineering"]], "Featuring Engineering on the Edge": [[253, "featuring-engineering-on-the-edge"]], "Data Augmentation": [[253, "data-augmentation"]], "Random Impulse Response": [[253, "random-impulse-response"]], "Random \u201cunknown\u201d samples by cropping \u201cknown\u201d samples": [[253, "random-unknown-samples-by-cropping-known-samples"]], "Define the model architecture": [[253, "define-the-model-architecture"]], "Audio Feature Generator Settings": [[253, "audio-feature-generator-settings"], [254, "audio-feature-generator-settings"]], "Configure the keywords to detect": [[253, "configure-the-keywords-to-detect"]], "Data Pipeline": [[253, "data-pipeline"]], "Audio Visualization": [[253, "audio-visualization"]], "Note about training time": [[253, "note-about-training-time"]], "Classify audio on PC": [[253, "classify-audio-on-pc"]], "Classify audio on device": [[253, "classify-audio-on-device"]], "Note about DSP": [[253, "note-about-dsp"]], "Record audio and spectrograms from device": [[253, "record-audio-and-spectrograms-from-device"]], "Using Simplicity Studio": [[253, "using-simplicity-studio"]], "Keyword Spotting - Pac-Man": [[254, "keyword-spotting-pac-man"]], "Live Demo": [[254, "live-demo"]], "Creating the Machine Learning Model": [[254, "creating-the-machine-learning-model"]], "Select the dataset": [[254, "select-the-dataset"]], "Model Parameter Tradeoffs": [[254, "model-parameter-tradeoffs"]], "Module Architecture": [[254, "module-architecture"]], "Audio Data Generator": [[254, "audio-data-generator"]], "Profiling the model": [[254, "profiling-the-model"]], "Training the model": [[254, "training-the-model"]], "Creating the Firmware Application": [[254, "creating-the-firmware-application"]], "Creating the Pac-Man Webpage": [[254, "creating-the-pac-man-webpage"]], "Running the Demo": [[254, "running-the-demo"]], "Build firmware application from source": [[254, "build-firmware-application-from-source"]], "Run webpage locally": [[254, "run-webpage-locally"]], "Keyword Spotting with Transfer Learning": [[255, "keyword-spotting-with-transfer-learning"]], "Running this Tutorial": [[255, "running-this-tutorial"], [257, "running-this-tutorial"]], "Recommended Reading": [[255, "recommended-reading"], [257, "recommended-reading"]], "Basic Concept": [[255, "basic-concept"]], "Base Model Overview": [[255, "base-model-overview"]], "Test model using PC microphone": [[255, "test-model-using-pc-microphone"]], "Test model using development board": [[255, "test-model-using-development-board"]], "Configure Model Specification with Transfer Learning": [[255, "configure-model-specification-with-transfer-learning"]], "Update description": [[255, "update-description"]], "Set epochs to small value": [[255, "set-epochs-to-small-value"]], "Use LearningRateScheduler with small initial value": [[255, "use-learningratescheduler-with-small-initial-value"]], "Update the keywords to detect": [[255, "update-the-keywords-to-detect"]], "Reduce the \u201cunknown_class_percentage\u201d": [[255, "reduce-the-unknown-class-percentage"]], "Load the weights from the base model": [[255, "load-the-weights-from-the-base-model"]], "Train the Model": [[255, "train-the-model"], [257, "train-the-model"]], "Test the model": [[255, "test-the-model"]], "Model Debugging": [[256, "model-debugging"]], "Setup Environment": [[256, "setup-environment"]], "1) Install the MLTK Python Package": [[256, "install-the-mltk-python-package"]], "2) Install VS Code and the Python Extension": [[256, "install-vs-code-and-the-python-extension"]], "Debug model: basic_example": [[256, "debug-model-basic-example"]], "How does debugging work?": [[256, "how-does-debugging-work"]], "Model Optimization for MVP Hardware Accelerator": [[257, "model-optimization-for-mvp-hardware-accelerator"]], "Create the model specification file": [[257, "create-the-model-specification-file"]], "Update the model description": [[257, "update-the-model-description"]], "Update the Keywords": [[257, "update-the-keywords"]], "Update the AudioFeatureGenerator Settings": [[257, "update-the-audiofeaturegenerator-settings"]], "Select an audio file": [[257, "select-an-audio-file"]], "Adjust the AudioFeatureGenerator settings": [[257, "adjust-the-audiofeaturegenerator-settings"]], "Update Model Layout": [[257, "update-model-layout"]], "Summarize the model": [[257, "summarize-the-model"]], "Profile Model": [[257, "profile-model"]], "Test the Model": [[257, "test-the-model"]], "ONNX to TF-Lite Model Conversion": [[258, "onnx-to-tf-lite-model-conversion"]], "About this Tutorial": [[258, "about-this-tutorial"]], "Considerations": [[258, "considerations"]], "Input Data Format": [[258, "input-data-format"]], "Output Class ID Mapping": [[258, "output-class-id-mapping"]], "Supported ML Kernel Operations": [[258, "supported-ml-kernel-operations"]], "\u201cChannels-First\u201d vs \u201cChannels-Last\u201d": [[258, "channels-first-vs-channels-last"]], "Dataset Required for Quantization": [[258, "dataset-required-for-quantization"]], "Environment Setup": [[258, "environment-setup"]], "Install Python Dependencies": [[258, "install-python-dependencies"]], "Download ONNX Model": [[258, "download-onnx-model"]], "Configure Paths": [[258, "configure-paths"]], "Load the dataset": [[258, "load-the-dataset"]], "Sanity check: Evaluate the ONNX model": [[258, "sanity-check-evaluate-the-onnx-model"]], "Convert ONNX to Quantized TF-Lite Model File": [[258, "convert-onnx-to-quantized-tf-lite-model-file"]], "Simplify the ONNX model": [[258, "simplify-the-onnx-model"]], "Convert to OpenVino Intermediate Format": [[258, "convert-to-openvino-intermediate-format"]], "Convert from OpenVino to TF-Lite-Float32": [[258, "convert-from-openvino-to-tf-lite-float32"]], "Quantize the TF-Lite Model": [[258, "quantize-the-tf-lite-model"]], "Profile the Quantized Model": [[258, "profile-the-quantized-model"]], "Evaluate the Quantized Model": [[258, "evaluate-the-quantized-model"]], "Synthetic Audio Dataset Generation": [[259, "synthetic-audio-dataset-generation"]], "Recording real people": [[259, "recording-real-people"]], "Synthetic generation": [[259, "synthetic-generation"]], "Note about synthetic augmentations": [[259, "note-about-synthetic-augmentations"]], "Note about languages": [[259, "note-about-languages"]], "Note about the \u201cnegative\u201d class": [[259, "note-about-the-negative-class"]], "Note about cost": [[259, "note-about-cost"]], "Google Cloud Platform (GCP) Setup": [[259, "google-cloud-platform-gcp-setup"]], "Features": [[259, "features"], [259, "id2"]], "Microsoft Azure Setup": [[259, "microsoft-azure-setup"]], "Amazon Web Services (AWS) Setup": [[259, "amazon-web-services-aws-setup"]], "Alexa Example": [[259, "alexa-example"]]}, "indexentries": {"adjust_length() (in module mltk.core.preprocess.utils.audio)": [[80, "mltk.core.preprocess.utils.audio.adjust_length"]], "apply_frontend() (in module mltk.core.preprocess.utils.audio)": [[80, "mltk.core.preprocess.utils.audio.apply_frontend"]], "mltk.core.preprocess.utils.audio": [[80, "module-mltk.core.preprocess.utils.audio"]], "module": [[80, "module-mltk.core.preprocess.utils.audio"], [85, "module-mltk.core.preprocess.utils.image"], [89, "module-mltk.core.preprocess.utils.list_directory"], [90, "module-mltk.core.preprocess.utils.normalize"], [91, "module-mltk.core.preprocess.utils.tf_dataset"], [93, "module-mltk.datasets.accelerometer.tflm_magic_wand"], [94, "module-mltk.datasets.audio.background_noise.ambient"], [95, "module-mltk.datasets.audio.background_noise.brd2601"], [96, "module-mltk.datasets.audio.background_noise.esc50"], [97, "module-mltk.datasets.audio.direction_commands"], [98, "module-mltk.datasets.audio.mit_ir_survey"], [99, "module-mltk.datasets.audio.mlcommons.ml_commons_keywords"], [100, "module-mltk.datasets.audio.mlcommons.ml_commons_voice"], [101, "module-mltk.datasets.audio.on_off"], [102, "module-mltk.datasets.audio.speech_commands.speech_commands_v2"], [103, "module-mltk.datasets.image.cifar10"], [104, "module-mltk.datasets.image.fashion_mnist"], [105, "module-mltk.datasets.image.mnist"], [106, "module-mltk.datasets.image.rock_paper_scissors_v1"], [107, "module-mltk.datasets.image.rock_paper_scissors_v2"], [126, "module-mltk.models.examples.audio_example1"], [127, "module-mltk.models.examples.audio_tf_dataset"], [128, "module-mltk.models.examples.autoencoder_example"], [129, "module-mltk.models.examples.basic_example"], [130, "module-mltk.models.examples.basic_tf_dataset_example"], [131, "module-mltk.models.examples.binary_classification"], [132, "module-mltk.models.examples.conv1d_example"], [133, "module-mltk.models.examples.image_example1"], [134, "module-mltk.models.examples.image_tf_dataset"], [136, "module-mltk.models.examples.siamese_contrastive"], [138, "module-mltk.models.siliconlabs.fingerprint_signature_generator"], [140, "module-mltk.models.siliconlabs.keyword_spotting_alexa"], [141, "module-mltk.models.siliconlabs.keyword_spotting_mobilenetv2"], [142, "module-mltk.models.siliconlabs.keyword_spotting_on_off"], [143, "module-mltk.models.siliconlabs.keyword_spotting_on_off_v2"], [144, "module-mltk.models.siliconlabs.keyword_spotting_on_off_v3"], [145, "module-mltk.models.siliconlabs.keyword_spotting_pacman"], [146, "module-mltk.models.siliconlabs.keyword_spotting_pacman_v2"], [147, "module-mltk.models.siliconlabs.keyword_spotting_pacman_v3"], [148, "module-mltk.models.siliconlabs.keyword_spotting_with_transfer_learning"], [149, "module-mltk.models.siliconlabs.rock_paper_scissors"], [151, "module-mltk.models.tflite_micro.tflite_micro_magic_wand"], [152, "module-mltk.models.tflite_micro.tflite_micro_speech"], [153, "module-mltk.models.tinyml.anomaly_detection"], [154, "module-mltk.models.tinyml.image_classification"], [156, "module-mltk.models.tinyml.keyword_spotting"], [157, "module-mltk.models.tinyml.visual_wake_words"], [202, "module-mltk.utils.archive"], [203, "module-mltk.utils.archive_downloader"], [212, "module-mltk.utils.bin2header"], [213, "module-mltk.utils.cmake"], [214, "module-mltk.utils.gpu"], [215, "module-mltk.utils.hasher"], [222, "module-mltk.utils.logger"], [223, "module-mltk.utils.path"], [225, "module-mltk.utils.python"], [228, "module-mltk.utils.shell_cmd"], [230, "module-mltk.utils.string_formatting"], [231, "module-mltk.utils.system"]], "read_audio_file() (in module mltk.core.preprocess.utils.audio)": [[80, "mltk.core.preprocess.utils.audio.read_audio_file"]], "write_audio_file() (in module mltk.core.preprocess.utils.audio)": [[80, "mltk.core.preprocess.utils.audio.write_audio_file"]], "parallelaudiodatagenerator (class in mltk.core.preprocess.audio.parallel_generator)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator"]], "__init__() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.__init__"]], "adjust_length() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.adjust_length"]], "apply_frontend() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.apply_frontend"]], "apply_transform() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.apply_transform"]], "default_transform (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.default_transform"]], "flow_from_directory() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.flow_from_directory"]], "get_random_transform() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.get_random_transform"]], "sample_length (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.sample_length"]], "sample_length_ms (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.sample_length_ms"]], "sample_rate_hz (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.sample_rate_hz"]], "sample_shape (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.sample_shape"]], "standardize() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.standardize"]], "parallelprocessparams (class in mltk.core.preprocess.audio.parallel_generator)": [[82, "mltk.core.preprocess.audio.parallel_generator.ParallelProcessParams"]], "__init__() (parallelprocessparams method)": [[82, "mltk.core.preprocess.audio.parallel_generator.ParallelProcessParams.__init__"], [87, "mltk.core.preprocess.image.parallel_generator.ParallelProcessParams.__init__"]], "audiofeaturegenerator (class in mltk.core.preprocess.audio.audio_feature_generator)": [[83, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator"]], "__init__() (audiofeaturegenerator method)": [[83, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator.__init__"]], "activity_was_detected() (audiofeaturegenerator method)": [[83, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator.activity_was_detected"]], "process_sample() (audiofeaturegenerator method)": [[83, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator.process_sample"]], "audiofeaturegeneratorsettings (class in mltk.core.preprocess.audio.audio_feature_generator)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings"]], "__init__() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.__init__"]], "__new__() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.__new__"]], "activity_detection_alpha_a (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_alpha_a"]], "activity_detection_alpha_b (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_alpha_b"]], "activity_detection_arm_threshold (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_arm_threshold"]], "activity_detection_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_enable"]], "activity_detection_trip_threshold (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_trip_threshold"]], "clear() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.clear"]], "copy() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.copy"]], "dc_notch_filter_coefficient (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.dc_notch_filter_coefficient"]], "dc_notch_filter_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.dc_notch_filter_enable"]], "fft_length (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.fft_length"]], "filterbank_lower_band_limit (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.filterbank_lower_band_limit"]], "filterbank_n_channels (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.filterbank_n_channels"]], "filterbank_upper_band_limit (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.filterbank_upper_band_limit"]], "fromkeys() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.fromkeys"]], "get() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.get"]], "items() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.items"]], "keys() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.keys"]], "log_scale_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.log_scale_enable"]], "log_scale_shift (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.log_scale_shift"]], "noise_reduction_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_enable"]], "noise_reduction_even_smoothing (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_even_smoothing"]], "noise_reduction_min_signal_remaining (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_min_signal_remaining"]], "noise_reduction_odd_smoothing (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_odd_smoothing"]], "noise_reduction_smoothing_bits (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_smoothing_bits"]], "pcan_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pcan_enable"]], "pcan_gain_bits (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pcan_gain_bits"]], "pcan_offset (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pcan_offset"]], "pcan_strength (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pcan_strength"]], "pop() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pop"]], "popitem() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.popitem"]], "quantize_dynamic_scale_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.quantize_dynamic_scale_enable"]], "quantize_dynamic_scale_range_db (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.quantize_dynamic_scale_range_db"]], "sample_length (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.sample_length"]], "sample_length_ms (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.sample_length_ms"]], "sample_rate_hz (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.sample_rate_hz"]], "setdefault() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.setdefault"]], "spectrogram_shape (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.spectrogram_shape"]], "update() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.update"]], "values() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.values"]], "window_size_ms (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.window_size_ms"]], "window_step_ms (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.window_step_ms"]], "mltk.core.preprocess.utils.image": [[85, "module-mltk.core.preprocess.utils.image"]], "read_image_file() (in module mltk.core.preprocess.utils.image)": [[85, "mltk.core.preprocess.utils.image.read_image_file"]], "write_image_file() (in module mltk.core.preprocess.utils.image)": [[85, "mltk.core.preprocess.utils.image.write_image_file"]], "parallelimagedatagenerator (class in mltk.core.preprocess.image.parallel_generator)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator"]], "__init__() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.__init__"]], "apply_transform() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.apply_transform"]], "default_transform (parallelimagedatagenerator property)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.default_transform"]], "fit() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.fit"]], "flow() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.flow"]], "flow_from_directory() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.flow_from_directory"]], "get_random_transform() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.get_random_transform"]], "random_transform() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.random_transform"]], "standardize() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.standardize"]], "parallelprocessparams (class in mltk.core.preprocess.image.parallel_generator)": [[87, "mltk.core.preprocess.image.parallel_generator.ParallelProcessParams"]], "list_dataset_directory() (in module mltk.core.preprocess.utils.list_directory)": [[89, "mltk.core.preprocess.utils.list_directory.list_dataset_directory"]], "list_valid_filenames_in_directory() (in module mltk.core.preprocess.utils.list_directory)": [[89, "mltk.core.preprocess.utils.list_directory.list_valid_filenames_in_directory"]], "mltk.core.preprocess.utils.list_directory": [[89, "module-mltk.core.preprocess.utils.list_directory"]], "shuffle_file_list_by_group() (in module mltk.core.preprocess.utils.list_directory)": [[89, "mltk.core.preprocess.utils.list_directory.shuffle_file_list_by_group"]], "split_file_list() (in module mltk.core.preprocess.utils.list_directory)": [[89, "mltk.core.preprocess.utils.list_directory.split_file_list"]], "mltk.core.preprocess.utils.normalize": [[90, "module-mltk.core.preprocess.utils.normalize"]], "normalize() (in module mltk.core.preprocess.utils.normalize)": [[90, "mltk.core.preprocess.utils.normalize.normalize"]], "enable_numpy_behavior() (in module mltk.core.preprocess.utils.tf_dataset)": [[91, "mltk.core.preprocess.utils.tf_dataset.enable_numpy_behavior"]], "load_audio_directory() (in module mltk.core.preprocess.utils.tf_dataset)": [[91, "mltk.core.preprocess.utils.tf_dataset.load_audio_directory"]], "load_image_directory() (in module mltk.core.preprocess.utils.tf_dataset)": [[91, "mltk.core.preprocess.utils.tf_dataset.load_image_directory"]], "mltk.core.preprocess.utils.tf_dataset": [[91, "module-mltk.core.preprocess.utils.tf_dataset"]], "parallel_process() (in module mltk.core.preprocess.utils.tf_dataset)": [[91, "mltk.core.preprocess.utils.tf_dataset.parallel_process"]], "load_data() (in module mltk.datasets.accelerometer.tflm_magic_wand)": [[93, "mltk.datasets.accelerometer.tflm_magic_wand.load_data"]], "mltk.datasets.accelerometer.tflm_magic_wand": [[93, "module-mltk.datasets.accelerometer.tflm_magic_wand"]], "prepare_data() (in module mltk.datasets.accelerometer.tflm_magic_wand)": [[93, "mltk.datasets.accelerometer.tflm_magic_wand.prepare_data"]], "download_urls (in module mltk.datasets.audio.background_noise.ambient)": [[94, "mltk.datasets.audio.background_noise.ambient.DOWNLOAD_URLS"]], "download() (in module mltk.datasets.audio.background_noise.ambient)": [[94, "mltk.datasets.audio.background_noise.ambient.download"]], "mltk.datasets.audio.background_noise.ambient": [[94, "module-mltk.datasets.audio.background_noise.ambient"]], "download_url (in module mltk.datasets.audio.background_noise.brd2601)": [[95, "mltk.datasets.audio.background_noise.brd2601.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.background_noise.brd2601)": [[95, "mltk.datasets.audio.background_noise.brd2601.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.background_noise.brd2601)": [[95, "mltk.datasets.audio.background_noise.brd2601.download"]], "mltk.datasets.audio.background_noise.brd2601": [[95, "module-mltk.datasets.audio.background_noise.brd2601"]], "download_url (in module mltk.datasets.audio.background_noise.esc50)": [[96, "mltk.datasets.audio.background_noise.esc50.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.background_noise.esc50)": [[96, "mltk.datasets.audio.background_noise.esc50.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.background_noise.esc50)": [[96, "mltk.datasets.audio.background_noise.esc50.download"]], "mltk.datasets.audio.background_noise.esc50": [[96, "module-mltk.datasets.audio.background_noise.esc50"]], "classes (in module mltk.datasets.audio.direction_commands)": [[97, "mltk.datasets.audio.direction_commands.CLASSES"]], "download_url (in module mltk.datasets.audio.direction_commands)": [[97, "mltk.datasets.audio.direction_commands.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.direction_commands)": [[97, "mltk.datasets.audio.direction_commands.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.direction_commands)": [[97, "mltk.datasets.audio.direction_commands.download"]], "generate_dataset() (in module mltk.datasets.audio.direction_commands)": [[97, "mltk.datasets.audio.direction_commands.generate_dataset"]], "mltk.datasets.audio.direction_commands": [[97, "module-mltk.datasets.audio.direction_commands"]], "download_url (in module mltk.datasets.audio.mit_ir_survey)": [[98, "mltk.datasets.audio.mit_ir_survey.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.mit_ir_survey)": [[98, "mltk.datasets.audio.mit_ir_survey.VERIFY_SHA1"]], "apply_ir() (in module mltk.datasets.audio.mit_ir_survey)": [[98, "mltk.datasets.audio.mit_ir_survey.apply_ir"]], "apply_random_ir() (in module mltk.datasets.audio.mit_ir_survey)": [[98, "mltk.datasets.audio.mit_ir_survey.apply_random_ir"]], "download() (in module mltk.datasets.audio.mit_ir_survey)": [[98, "mltk.datasets.audio.mit_ir_survey.download"]], "load_dataset() (in module mltk.datasets.audio.mit_ir_survey)": [[98, "mltk.datasets.audio.mit_ir_survey.load_dataset"]], "mltk.datasets.audio.mit_ir_survey": [[98, "module-mltk.datasets.audio.mit_ir_survey"]], "download_url1 (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[99, "mltk.datasets.audio.mlcommons.ml_commons_keywords.DOWNLOAD_URL1"]], "download_url2 (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[99, "mltk.datasets.audio.mlcommons.ml_commons_keywords.DOWNLOAD_URL2"]], "verify_url1_sha1 (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[99, "mltk.datasets.audio.mlcommons.ml_commons_keywords.VERIFY_URL1_SHA1"]], "verify_url2_sha1 (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[99, "mltk.datasets.audio.mlcommons.ml_commons_keywords.VERIFY_URL2_SHA1"]], "download() (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[99, "mltk.datasets.audio.mlcommons.ml_commons_keywords.download"]], "mltk.datasets.audio.mlcommons.ml_commons_keywords": [[99, "module-mltk.datasets.audio.mlcommons.ml_commons_keywords"]], "download_url (in module mltk.datasets.audio.mlcommons.ml_commons_voice)": [[100, "mltk.datasets.audio.mlcommons.ml_commons_voice.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.mlcommons.ml_commons_voice)": [[100, "mltk.datasets.audio.mlcommons.ml_commons_voice.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.mlcommons.ml_commons_voice)": [[100, "mltk.datasets.audio.mlcommons.ml_commons_voice.download"]], "mltk.datasets.audio.mlcommons.ml_commons_voice": [[100, "module-mltk.datasets.audio.mlcommons.ml_commons_voice"]], "classes (in module mltk.datasets.audio.on_off)": [[101, "mltk.datasets.audio.on_off.CLASSES"]], "download_url (in module mltk.datasets.audio.on_off)": [[101, "mltk.datasets.audio.on_off.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.on_off)": [[101, "mltk.datasets.audio.on_off.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.on_off)": [[101, "mltk.datasets.audio.on_off.download"]], "generate_dataset() (in module mltk.datasets.audio.on_off)": [[101, "mltk.datasets.audio.on_off.generate_dataset"]], "mltk.datasets.audio.on_off": [[101, "module-mltk.datasets.audio.on_off"]], "classes (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[102, "mltk.datasets.audio.speech_commands.speech_commands_v2.CLASSES"]], "download_url (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[102, "mltk.datasets.audio.speech_commands.speech_commands_v2.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[102, "mltk.datasets.audio.speech_commands.speech_commands_v2.VERIFY_SHA1"]], "list_valid_filenames_in_directory() (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[102, "mltk.datasets.audio.speech_commands.speech_commands_v2.list_valid_filenames_in_directory"]], "load_clean_data() (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[102, "mltk.datasets.audio.speech_commands.speech_commands_v2.load_clean_data"]], "load_data() (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[102, "mltk.datasets.audio.speech_commands.speech_commands_v2.load_data"]], "mltk.datasets.audio.speech_commands.speech_commands_v2": [[102, "module-mltk.datasets.audio.speech_commands.speech_commands_v2"]], "download_url (in module mltk.datasets.image.cifar10)": [[103, "mltk.datasets.image.cifar10.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.image.cifar10)": [[103, "mltk.datasets.image.cifar10.VERIFY_SHA1"]], "load_data() (in module mltk.datasets.image.cifar10)": [[103, "mltk.datasets.image.cifar10.load_data"]], "load_data_directory() (in module mltk.datasets.image.cifar10)": [[103, "mltk.datasets.image.cifar10.load_data_directory"]], "mltk.datasets.image.cifar10": [[103, "module-mltk.datasets.image.cifar10"]], "classes (in module mltk.datasets.image.fashion_mnist)": [[104, "mltk.datasets.image.fashion_mnist.CLASSES"]], "input_shape (in module mltk.datasets.image.fashion_mnist)": [[104, "mltk.datasets.image.fashion_mnist.INPUT_SHAPE"]], "load_data() (in module mltk.datasets.image.fashion_mnist)": [[104, "mltk.datasets.image.fashion_mnist.load_data"]], "load_data_directory() (in module mltk.datasets.image.fashion_mnist)": [[104, "mltk.datasets.image.fashion_mnist.load_data_directory"]], "mltk.datasets.image.fashion_mnist": [[104, "module-mltk.datasets.image.fashion_mnist"]], "classes (in module mltk.datasets.image.mnist)": [[105, "mltk.datasets.image.mnist.CLASSES"]], "download_url (in module mltk.datasets.image.mnist)": [[105, "mltk.datasets.image.mnist.DOWNLOAD_URL"]], "input_shape (in module mltk.datasets.image.mnist)": [[105, "mltk.datasets.image.mnist.INPUT_SHAPE"]], "verify_sha1 (in module mltk.datasets.image.mnist)": [[105, "mltk.datasets.image.mnist.VERIFY_SHA1"]], "load_data() (in module mltk.datasets.image.mnist)": [[105, "mltk.datasets.image.mnist.load_data"]], "load_data_directory() (in module mltk.datasets.image.mnist)": [[105, "mltk.datasets.image.mnist.load_data_directory"]], "mltk.datasets.image.mnist": [[105, "module-mltk.datasets.image.mnist"]], "classes (in module mltk.datasets.image.rock_paper_scissors_v1)": [[106, "mltk.datasets.image.rock_paper_scissors_v1.CLASSES"]], "download_url (in module mltk.datasets.image.rock_paper_scissors_v1)": [[106, "mltk.datasets.image.rock_paper_scissors_v1.DOWNLOAD_URL"]], "input_depth (in module mltk.datasets.image.rock_paper_scissors_v1)": [[106, "mltk.datasets.image.rock_paper_scissors_v1.INPUT_DEPTH"]], "input_height (in module mltk.datasets.image.rock_paper_scissors_v1)": [[106, "mltk.datasets.image.rock_paper_scissors_v1.INPUT_HEIGHT"]], "input_shape (in module mltk.datasets.image.rock_paper_scissors_v1)": [[106, "mltk.datasets.image.rock_paper_scissors_v1.INPUT_SHAPE"]], "input_width (in module mltk.datasets.image.rock_paper_scissors_v1)": [[106, "mltk.datasets.image.rock_paper_scissors_v1.INPUT_WIDTH"]], "verify_sha1 (in module mltk.datasets.image.rock_paper_scissors_v1)": [[106, "mltk.datasets.image.rock_paper_scissors_v1.VERIFY_SHA1"]], "load_data() (in module mltk.datasets.image.rock_paper_scissors_v1)": [[106, "mltk.datasets.image.rock_paper_scissors_v1.load_data"]], "mltk.datasets.image.rock_paper_scissors_v1": [[106, "module-mltk.datasets.image.rock_paper_scissors_v1"]], "classes (in module mltk.datasets.image.rock_paper_scissors_v2)": [[107, "mltk.datasets.image.rock_paper_scissors_v2.CLASSES"]], "download_url (in module mltk.datasets.image.rock_paper_scissors_v2)": [[107, "mltk.datasets.image.rock_paper_scissors_v2.DOWNLOAD_URL"]], "input_depth (in module mltk.datasets.image.rock_paper_scissors_v2)": [[107, "mltk.datasets.image.rock_paper_scissors_v2.INPUT_DEPTH"]], "input_height (in module mltk.datasets.image.rock_paper_scissors_v2)": [[107, "mltk.datasets.image.rock_paper_scissors_v2.INPUT_HEIGHT"]], "input_shape (in module mltk.datasets.image.rock_paper_scissors_v2)": [[107, "mltk.datasets.image.rock_paper_scissors_v2.INPUT_SHAPE"]], "input_width (in module mltk.datasets.image.rock_paper_scissors_v2)": [[107, "mltk.datasets.image.rock_paper_scissors_v2.INPUT_WIDTH"]], "verify_sha1 (in module mltk.datasets.image.rock_paper_scissors_v2)": [[107, "mltk.datasets.image.rock_paper_scissors_v2.VERIFY_SHA1"]], "load_data() (in module mltk.datasets.image.rock_paper_scissors_v2)": [[107, "mltk.datasets.image.rock_paper_scissors_v2.load_data"]], "mltk.datasets.image.rock_paper_scissors_v2": [[107, "module-mltk.datasets.image.rock_paper_scissors_v2"]], "kerasmodel (in module mltk.core)": [[110, "mltk.core.KerasModel"]], "audiodatasetmixin (class in mltk.core)": [[111, "mltk.core.AudioDatasetMixin"]], "audio_classes (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.audio_classes"]], "audio_input_shape (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.audio_input_shape"]], "class_counts (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.class_counts"]], "class_mode (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.class_mode"]], "class_weights (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.class_weights"]], "datagen (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.datagen"]], "datagen_context (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.datagen_context"]], "dataset (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.dataset"]], "follow_links (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.follow_links"]], "frontend_settings (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.frontend_settings"]], "get_datagen_creator() (audiodatasetmixin method)": [[111, "mltk.core.AudioDatasetMixin.get_datagen_creator"]], "get_shuffle_index_dir() (audiodatasetmixin method)": [[111, "mltk.core.AudioDatasetMixin.get_shuffle_index_dir"]], "load_dataset() (audiodatasetmixin method)": [[111, "mltk.core.AudioDatasetMixin.load_dataset"]], "loaded_subset (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.loaded_subset"]], "sample_length_ms (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.sample_length_ms"]], "sample_rate_hz (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.sample_rate_hz"]], "sample_weight (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.sample_weight"]], "shuffle (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.shuffle"]], "shuffle_dataset_enabled (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.shuffle_dataset_enabled"]], "steps_per_epoch (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.steps_per_epoch"]], "summarize_dataset() (audiodatasetmixin method)": [[111, "mltk.core.AudioDatasetMixin.summarize_dataset"]], "unload_dataset() (audiodatasetmixin method)": [[111, "mltk.core.AudioDatasetMixin.unload_dataset"]], "validation_batch_size (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.validation_batch_size"]], "validation_data (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.validation_data"]], "validation_datagen (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.validation_datagen"]], "validation_freq (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.validation_freq"]], "validation_split (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.validation_split"]], "validation_steps (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.validation_steps"]], "x (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.x"]], "y (audiodatasetmixin property)": [[111, "mltk.core.AudioDatasetMixin.y"]], "datasetmixin (class in mltk.core)": [[112, "mltk.core.DatasetMixin"]], "class_counts (datasetmixin property)": [[112, "mltk.core.DatasetMixin.class_counts"]], "class_weights (datasetmixin property)": [[112, "mltk.core.DatasetMixin.class_weights"]], "dataset (datasetmixin property)": [[112, "mltk.core.DatasetMixin.dataset"]], "load_dataset() (datasetmixin method)": [[112, "mltk.core.DatasetMixin.load_dataset"]], "loaded_subset (datasetmixin property)": [[112, "mltk.core.DatasetMixin.loaded_subset"]], "sample_weight (datasetmixin property)": [[112, "mltk.core.DatasetMixin.sample_weight"]], "shuffle (datasetmixin property)": [[112, "mltk.core.DatasetMixin.shuffle"]], "steps_per_epoch (datasetmixin property)": [[112, "mltk.core.DatasetMixin.steps_per_epoch"]], "summarize_dataset() (datasetmixin method)": [[112, "mltk.core.DatasetMixin.summarize_dataset"]], "unload_dataset() (datasetmixin method)": [[112, "mltk.core.DatasetMixin.unload_dataset"]], "validation_batch_size (datasetmixin property)": [[112, "mltk.core.DatasetMixin.validation_batch_size"]], "validation_data (datasetmixin property)": [[112, "mltk.core.DatasetMixin.validation_data"]], "validation_freq (datasetmixin property)": [[112, "mltk.core.DatasetMixin.validation_freq"]], "validation_split (datasetmixin property)": [[112, "mltk.core.DatasetMixin.validation_split"]], "validation_steps (datasetmixin property)": [[112, "mltk.core.DatasetMixin.validation_steps"]], "x (datasetmixin property)": [[112, "mltk.core.DatasetMixin.x"]], "y (datasetmixin property)": [[112, "mltk.core.DatasetMixin.y"]], "evaluateautoencodermixin (class in mltk.core)": [[113, "mltk.core.EvaluateAutoEncoderMixin"]], "eval_augment (evaluateautoencodermixin property)": [[113, "mltk.core.EvaluateAutoEncoderMixin.eval_augment"]], "eval_classes (evaluateautoencodermixin property)": [[113, "mltk.core.EvaluateAutoEncoderMixin.eval_classes"]], "eval_custom_function (evaluateautoencodermixin property)": [[113, "mltk.core.EvaluateAutoEncoderMixin.eval_custom_function"]], "eval_max_samples_per_class (evaluateautoencodermixin property)": [[113, "mltk.core.EvaluateAutoEncoderMixin.eval_max_samples_per_class"]], "eval_shuffle (evaluateautoencodermixin property)": [[113, "mltk.core.EvaluateAutoEncoderMixin.eval_shuffle"]], "eval_steps_per_epoch (evaluateautoencodermixin property)": [[113, "mltk.core.EvaluateAutoEncoderMixin.eval_steps_per_epoch"]], "get_scoring_function() (evaluateautoencodermixin method)": [[113, "mltk.core.EvaluateAutoEncoderMixin.get_scoring_function"]], "scoring_function (evaluateautoencodermixin property)": [[113, "mltk.core.EvaluateAutoEncoderMixin.scoring_function"]], "evaluateclassifiermixin (class in mltk.core)": [[114, "mltk.core.EvaluateClassifierMixin"]], "eval_augment (evaluateclassifiermixin property)": [[114, "mltk.core.EvaluateClassifierMixin.eval_augment"]], "eval_custom_function (evaluateclassifiermixin property)": [[114, "mltk.core.EvaluateClassifierMixin.eval_custom_function"]], "eval_max_samples_per_class (evaluateclassifiermixin property)": [[114, "mltk.core.EvaluateClassifierMixin.eval_max_samples_per_class"]], "eval_shuffle (evaluateclassifiermixin property)": [[114, "mltk.core.EvaluateClassifierMixin.eval_shuffle"]], "eval_steps_per_epoch (evaluateclassifiermixin property)": [[114, "mltk.core.EvaluateClassifierMixin.eval_steps_per_epoch"]], "evaluatemixin (class in mltk.core)": [[115, "mltk.core.EvaluateMixin"]], "eval_custom_function (evaluatemixin property)": [[115, "mltk.core.EvaluateMixin.eval_custom_function"]], "eval_steps_per_epoch (evaluatemixin property)": [[115, "mltk.core.EvaluateMixin.eval_steps_per_epoch"]], "imagedatasetmixin (class in mltk.core)": [[116, "mltk.core.ImageDatasetMixin"]], "class_counts (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.class_counts"]], "class_mode (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.class_mode"]], "class_weights (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.class_weights"]], "color_mode (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.color_mode"]], "datagen (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.datagen"]], "datagen_context (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.datagen_context"]], "dataset (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.dataset"]], "follow_links (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.follow_links"]], "get_datagen_creator() (imagedatasetmixin method)": [[116, "mltk.core.ImageDatasetMixin.get_datagen_creator"]], "get_shuffle_index_dir() (imagedatasetmixin method)": [[116, "mltk.core.ImageDatasetMixin.get_shuffle_index_dir"]], "image_classes (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.image_classes"]], "image_input_shape (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.image_input_shape"]], "interpolation (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.interpolation"]], "load_dataset() (imagedatasetmixin method)": [[116, "mltk.core.ImageDatasetMixin.load_dataset"]], "loaded_subset (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.loaded_subset"]], "sample_weight (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.sample_weight"]], "shuffle (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.shuffle"]], "shuffle_dataset_enabled (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.shuffle_dataset_enabled"]], "steps_per_epoch (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.steps_per_epoch"]], "summarize_dataset() (imagedatasetmixin method)": [[116, "mltk.core.ImageDatasetMixin.summarize_dataset"]], "target_size (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.target_size"]], "unload_dataset() (imagedatasetmixin method)": [[116, "mltk.core.ImageDatasetMixin.unload_dataset"]], "validation_batch_size (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.validation_batch_size"]], "validation_data (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.validation_data"]], "validation_datagen (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.validation_datagen"]], "validation_freq (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.validation_freq"]], "validation_split (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.validation_split"]], "validation_steps (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.validation_steps"]], "x (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.x"]], "y (imagedatasetmixin property)": [[116, "mltk.core.ImageDatasetMixin.y"]], "mltkdataset (class in mltk.core)": [[118, "mltk.core.MltkDataset"]], "load_dataset() (mltkdataset method)": [[118, "mltk.core.MltkDataset.load_dataset"]], "summarize_class_counts() (mltkdataset static method)": [[118, "mltk.core.MltkDataset.summarize_class_counts"]], "summarize_dataset() (mltkdataset method)": [[118, "mltk.core.MltkDataset.summarize_dataset"]], "unload_dataset() (mltkdataset method)": [[118, "mltk.core.MltkDataset.unload_dataset"]], "mltkmodel (class in mltk.core)": [[119, "mltk.core.MltkModel"]], "__init__() (mltkmodel method)": [[119, "mltk.core.MltkModel.__init__"]], "add_archive_dir() (mltkmodel method)": [[119, "mltk.core.MltkModel.add_archive_dir"]], "add_archive_file() (mltkmodel method)": [[119, "mltk.core.MltkModel.add_archive_file"]], "add_event_handler() (mltkmodel method)": [[119, "mltk.core.MltkModel.add_event_handler"]], "add_model_parameter_populate_callback() (mltkmodel method)": [[119, "mltk.core.MltkModel.add_model_parameter_populate_callback"]], "add_tflite_metadata_entry() (mltkmodel method)": [[119, "mltk.core.MltkModel.add_tflite_metadata_entry"]], "archive_path (mltkmodel property)": [[119, "mltk.core.MltkModel.archive_path"]], "attributes (mltkmodel property)": [[119, "mltk.core.MltkModel.attributes"]], "check_archive_file_is_writable() (mltkmodel method)": [[119, "mltk.core.MltkModel.check_archive_file_is_writable"]], "classes (mltkmodel property)": [[119, "mltk.core.MltkModel.classes"]], "cli (mltkmodel property)": [[119, "mltk.core.MltkModel.cli"]], "create_log_dir() (mltkmodel method)": [[119, "mltk.core.MltkModel.create_log_dir"]], "create_logger() (mltkmodel method)": [[119, "mltk.core.MltkModel.create_logger"]], "description (mltkmodel property)": [[119, "mltk.core.MltkModel.description"]], "deserialize_tflite_metadata() (mltkmodel method)": [[119, "mltk.core.MltkModel.deserialize_tflite_metadata"]], "enable_test_mode() (mltkmodel method)": [[119, "mltk.core.MltkModel.enable_test_mode"]], "get_archive_dir() (mltkmodel method)": [[119, "mltk.core.MltkModel.get_archive_dir"]], "get_archive_file() (mltkmodel method)": [[119, "mltk.core.MltkModel.get_archive_file"]], "get_attribute() (mltkmodel method)": [[119, "mltk.core.MltkModel.get_attribute"]], "get_tflite_metadata_summary() (mltkmodel method)": [[119, "mltk.core.MltkModel.get_tflite_metadata_summary"]], "h5_archive_path (mltkmodel property)": [[119, "mltk.core.MltkModel.h5_archive_path"]], "h5_log_dir_path (mltkmodel property)": [[119, "mltk.core.MltkModel.h5_log_dir_path"]], "input_shape (mltkmodel property)": [[119, "mltk.core.MltkModel.input_shape"]], "keras_custom_objects (mltkmodel property)": [[119, "mltk.core.MltkModel.keras_custom_objects"]], "log_dir (mltkmodel property)": [[119, "mltk.core.MltkModel.log_dir"]], "model_parameters (mltkmodel property)": [[119, "mltk.core.MltkModel.model_parameters"]], "model_specification_path (mltkmodel property)": [[119, "mltk.core.MltkModel.model_specification_path"]], "n_classes (mltkmodel property)": [[119, "mltk.core.MltkModel.n_classes"]], "name (mltkmodel property)": [[119, "mltk.core.MltkModel.name"]], "populate_model_parameters() (mltkmodel method)": [[119, "mltk.core.MltkModel.populate_model_parameters"]], "serialize_tflite_metadata() (mltkmodel method)": [[119, "mltk.core.MltkModel.serialize_tflite_metadata"]], "set_model_parameter() (mltkmodel method)": [[119, "mltk.core.MltkModel.set_model_parameter"]], "summary() (mltkmodel method)": [[119, "mltk.core.MltkModel.summary"]], "test_mode_enabled (mltkmodel property)": [[119, "mltk.core.MltkModel.test_mode_enabled"]], "tflite_archive_path (mltkmodel property)": [[119, "mltk.core.MltkModel.tflite_archive_path"]], "tflite_log_dir_path (mltkmodel property)": [[119, "mltk.core.MltkModel.tflite_log_dir_path"]], "tflite_metadata_entries (mltkmodel property)": [[119, "mltk.core.MltkModel.tflite_metadata_entries"]], "trigger_event() (mltkmodel method)": [[119, "mltk.core.MltkModel.trigger_event"]], "unquantized_tflite_log_dir_path (mltkmodel property)": [[119, "mltk.core.MltkModel.unquantized_tflite_log_dir_path"]], "version (mltkmodel property)": [[119, "mltk.core.MltkModel.version"]], "after_build_train_model (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.AFTER_BUILD_TRAIN_MODEL"]], "after_load_dataset (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.AFTER_LOAD_DATASET"]], "after_model_load (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.AFTER_MODEL_LOAD"]], "after_profile (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.AFTER_PROFILE"]], "after_quantize (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.AFTER_QUANTIZE"]], "after_save_train_archive (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.AFTER_SAVE_TRAIN_ARCHIVE"]], "after_save_train_model (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.AFTER_SAVE_TRAIN_MODEL"]], "after_save_train_results (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.AFTER_SAVE_TRAIN_RESULTS"]], "after_train (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.AFTER_TRAIN"]], "after_unload_dataset (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.AFTER_UNLOAD_DATASET"]], "before_build_train_model (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.BEFORE_BUILD_TRAIN_MODEL"]], "before_load_dataset (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.BEFORE_LOAD_DATASET"]], "before_model_load (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.BEFORE_MODEL_LOAD"]], "before_quantize (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.BEFORE_QUANTIZE"]], "before_save_train_archive (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.BEFORE_SAVE_TRAIN_ARCHIVE"]], "before_save_train_model (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.BEFORE_SAVE_TRAIN_MODEL"]], "before_save_train_results (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.BEFORE_SAVE_TRAIN_RESULTS"]], "before_train (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.BEFORE_TRAIN"]], "before_unload_dataset (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.BEFORE_UNLOAD_DATASET"]], "evaluate_shutdown (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.EVALUATE_SHUTDOWN"]], "evaluate_startup (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.EVALUATE_STARTUP"]], "generate_evaluate_plot (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.GENERATE_EVALUATE_PLOT"]], "mltkmodelevent (class in mltk.core)": [[120, "mltk.core.MltkModelEvent"]], "populate_train_callbacks (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.POPULATE_TRAIN_CALLBACKS"]], "quantize_shutdown (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.QUANTIZE_SHUTDOWN"]], "quantize_startup (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.QUANTIZE_STARTUP"]], "summarize_dataset (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.SUMMARIZE_DATASET"]], "summarize_model (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.SUMMARIZE_MODEL"]], "train_shutdown (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.TRAIN_SHUTDOWN"]], "train_startup (mltkmodelevent attribute)": [[120, "mltk.core.MltkModelEvent.TRAIN_STARTUP"]], "sshmixin (class in mltk.core)": [[121, "mltk.core.SshMixin"]], "ssh_create_venv (sshmixin property)": [[121, "mltk.core.SshMixin.ssh_create_venv"]], "ssh_download_files (sshmixin property)": [[121, "mltk.core.SshMixin.ssh_download_files"]], "ssh_environment (sshmixin property)": [[121, "mltk.core.SshMixin.ssh_environment"]], "ssh_remote_dir (sshmixin property)": [[121, "mltk.core.SshMixin.ssh_remote_dir"]], "ssh_shutdown_cmds (sshmixin property)": [[121, "mltk.core.SshMixin.ssh_shutdown_cmds"]], "ssh_startup_cmds (sshmixin property)": [[121, "mltk.core.SshMixin.ssh_startup_cmds"]], "ssh_upload_files (sshmixin property)": [[121, "mltk.core.SshMixin.ssh_upload_files"]], "trainmixin (class in mltk.core)": [[122, "mltk.core.TrainMixin"]], "batch_size (trainmixin property)": [[122, "mltk.core.TrainMixin.batch_size"]], "build_model_function (trainmixin property)": [[122, "mltk.core.TrainMixin.build_model_function"]], "checkpoint (trainmixin property)": [[122, "mltk.core.TrainMixin.checkpoint"]], "checkpoints_dir (trainmixin property)": [[122, "mltk.core.TrainMixin.checkpoints_dir"]], "checkpoints_enabled (trainmixin property)": [[122, "mltk.core.TrainMixin.checkpoints_enabled"]], "early_stopping (trainmixin property)": [[122, "mltk.core.TrainMixin.early_stopping"]], "epochs (trainmixin property)": [[122, "mltk.core.TrainMixin.epochs"]], "get_checkpoint_path() (trainmixin method)": [[122, "mltk.core.TrainMixin.get_checkpoint_path"]], "get_weights_path() (trainmixin method)": [[122, "mltk.core.TrainMixin.get_weights_path"]], "loss (trainmixin property)": [[122, "mltk.core.TrainMixin.loss"]], "lr_schedule (trainmixin property)": [[122, "mltk.core.TrainMixin.lr_schedule"]], "metrics (trainmixin property)": [[122, "mltk.core.TrainMixin.metrics"]], "on_save_keras_model (trainmixin property)": [[122, "mltk.core.TrainMixin.on_save_keras_model"]], "on_training_complete (trainmixin property)": [[122, "mltk.core.TrainMixin.on_training_complete"]], "optimizer (trainmixin property)": [[122, "mltk.core.TrainMixin.optimizer"]], "reduce_lr_on_plateau (trainmixin property)": [[122, "mltk.core.TrainMixin.reduce_lr_on_plateau"]], "tensorboard (trainmixin property)": [[122, "mltk.core.TrainMixin.tensorboard"]], "tflite_converter (trainmixin property)": [[122, "mltk.core.TrainMixin.tflite_converter"]], "train_callbacks (trainmixin property)": [[122, "mltk.core.TrainMixin.train_callbacks"]], "train_kwargs (trainmixin property)": [[122, "mltk.core.TrainMixin.train_kwargs"]], "weights_dir (trainmixin property)": [[122, "mltk.core.TrainMixin.weights_dir"]], "weights_file_format (trainmixin property)": [[122, "mltk.core.TrainMixin.weights_file_format"]], "list_mltk_models() (in module mltk.core)": [[123, "mltk.core.list_mltk_models"]], "load_mltk_model() (in module mltk.core)": [[123, "mltk.core.load_mltk_model"]], "load_mltk_model_with_path() (in module mltk.core)": [[123, "mltk.core.load_mltk_model_with_path"]], "load_tflite_model() (in module mltk.core)": [[123, "mltk.core.load_tflite_model"]], "load_tflite_or_keras_model() (in module mltk.core)": [[123, "mltk.core.load_tflite_or_keras_model"]], "weightsandbiasesmixin (class in mltk.core)": [[124, "mltk.core.WeightsAndBiasesMixin"]], "wandb_callback (weightsandbiasesmixin property)": [[124, "mltk.core.WeightsAndBiasesMixin.wandb_callback"]], "wandb_config (weightsandbiasesmixin property)": [[124, "mltk.core.WeightsAndBiasesMixin.wandb_config"]], "wandb_init_kwargs (weightsandbiasesmixin property)": [[124, "mltk.core.WeightsAndBiasesMixin.wandb_init_kwargs"]], "wandb_is_disabled (weightsandbiasesmixin property)": [[124, "mltk.core.WeightsAndBiasesMixin.wandb_is_disabled"]], "wandb_is_initialized (weightsandbiasesmixin property)": [[124, "mltk.core.WeightsAndBiasesMixin.wandb_is_initialized"]], "wandb_log() (weightsandbiasesmixin method)": [[124, "mltk.core.WeightsAndBiasesMixin.wandb_log"]], "wandb_model_checkpoint_callback (weightsandbiasesmixin property)": [[124, "mltk.core.WeightsAndBiasesMixin.wandb_model_checkpoint_callback"]], "wandb_save() (weightsandbiasesmixin method)": [[124, "mltk.core.WeightsAndBiasesMixin.wandb_save"]], "wandb_session_id (weightsandbiasesmixin property)": [[124, "mltk.core.WeightsAndBiasesMixin.wandb_session_id"]], "depthwiseseparableconv2d_arm() (in module mltk.models.shared.dsconv_arm)": [[125, "mltk.models.shared.dsconv_arm.DepthwiseSeparableConv2D_ARM"]], "fullyconnectedautoencoder() (in module mltk.models.shared.fully_connected_autoencoder)": [[125, "mltk.models.shared.fully_connected_autoencoder.FullyConnectedAutoEncoder"]], "mobilenetv1() (in module mltk.models.shared.mobilenet_v1)": [[125, "mltk.models.shared.mobilenet_v1.MobileNetV1"]], "mobilenetv2() (in module mltk.models.shared.mobilenet_v2)": [[125, "mltk.models.shared.mobilenet_v2.MobileNetV2"]], "resnet10v1() (in module mltk.models.shared.resnet_v1)": [[125, "mltk.models.shared.resnet_v1.ResNet10V1"]], "tenet() (in module mltk.models.shared.tenet)": [[125, "mltk.models.shared.tenet.TENet"]], "mltk.models.examples.audio_example1": [[126, "module-mltk.models.examples.audio_example1"]], "mltk.models.examples.audio_tf_dataset": [[127, "module-mltk.models.examples.audio_tf_dataset"]], "mltk.models.examples.autoencoder_example": [[128, "module-mltk.models.examples.autoencoder_example"]], "mltk.models.examples.basic_example": [[129, "module-mltk.models.examples.basic_example"]], "mltk.models.examples.basic_tf_dataset_example": [[130, "module-mltk.models.examples.basic_tf_dataset_example"]], "mltk.models.examples.binary_classification": [[131, "module-mltk.models.examples.binary_classification"]], "mltk.models.examples.conv1d_example": [[132, "module-mltk.models.examples.conv1d_example"]], "mltk.models.examples.image_example1": [[133, "module-mltk.models.examples.image_example1"]], "mltk.models.examples.image_tf_dataset": [[134, "module-mltk.models.examples.image_tf_dataset"]], "mltk.models.examples.siamese_contrastive": [[136, "module-mltk.models.examples.siamese_contrastive"]], "mltk.models.siliconlabs.fingerprint_signature_generator": [[138, "module-mltk.models.siliconlabs.fingerprint_signature_generator"]], "mltk.models.siliconlabs.keyword_spotting_alexa": [[140, "module-mltk.models.siliconlabs.keyword_spotting_alexa"]], "mltk.models.siliconlabs.keyword_spotting_mobilenetv2": [[141, "module-mltk.models.siliconlabs.keyword_spotting_mobilenetv2"]], "mltk.models.siliconlabs.keyword_spotting_on_off": [[142, "module-mltk.models.siliconlabs.keyword_spotting_on_off"]], "mltk.models.siliconlabs.keyword_spotting_on_off_v2": [[143, "module-mltk.models.siliconlabs.keyword_spotting_on_off_v2"]], "mltk.models.siliconlabs.keyword_spotting_on_off_v3": [[144, "module-mltk.models.siliconlabs.keyword_spotting_on_off_v3"]], "mltk.models.siliconlabs.keyword_spotting_pacman": [[145, "module-mltk.models.siliconlabs.keyword_spotting_pacman"]], "mltk.models.siliconlabs.keyword_spotting_pacman_v2": [[146, "module-mltk.models.siliconlabs.keyword_spotting_pacman_v2"]], "mltk.models.siliconlabs.keyword_spotting_pacman_v3": [[147, "module-mltk.models.siliconlabs.keyword_spotting_pacman_v3"]], "mltk.models.siliconlabs.keyword_spotting_with_transfer_learning": [[148, "module-mltk.models.siliconlabs.keyword_spotting_with_transfer_learning"]], "mltk.models.siliconlabs.rock_paper_scissors": [[149, "module-mltk.models.siliconlabs.rock_paper_scissors"]], "mltk.models.tflite_micro.tflite_micro_magic_wand": [[151, "module-mltk.models.tflite_micro.tflite_micro_magic_wand"]], "mltk.models.tflite_micro.tflite_micro_speech": [[152, "module-mltk.models.tflite_micro.tflite_micro_speech"]], "mltk.models.tinyml.anomaly_detection": [[153, "module-mltk.models.tinyml.anomaly_detection"]], "mltk.models.tinyml.image_classification": [[154, "module-mltk.models.tinyml.image_classification"]], "mltk.models.tinyml.keyword_spotting": [[156, "module-mltk.models.tinyml.keyword_spotting"]], "mltk.models.tinyml.visual_wake_words": [[157, "module-mltk.models.tinyml.visual_wake_words"]], "autoencoderevaluationresults (class in mltk.core)": [[158, "mltk.core.AutoEncoderEvaluationResults"]], "classifierevaluationresults (class in mltk.core)": [[158, "mltk.core.ClassifierEvaluationResults"]], "evaluationresults (class in mltk.core)": [[158, "mltk.core.EvaluationResults"]], "__init__() (autoencoderevaluationresults method)": [[158, "mltk.core.AutoEncoderEvaluationResults.__init__"]], "__init__() (classifierevaluationresults method)": [[158, "mltk.core.ClassifierEvaluationResults.__init__"]], "__init__() (evaluationresults method)": [[158, "mltk.core.EvaluationResults.__init__"]], "calculate() (autoencoderevaluationresults method)": [[158, "mltk.core.AutoEncoderEvaluationResults.calculate"]], "calculate() (classifierevaluationresults method)": [[158, "mltk.core.ClassifierEvaluationResults.calculate"]], "class_accuracies (classifierevaluationresults property)": [[158, "mltk.core.ClassifierEvaluationResults.class_accuracies"]], "class_stats (autoencoderevaluationresults property)": [[158, "mltk.core.AutoEncoderEvaluationResults.class_stats"]], "classes (autoencoderevaluationresults property)": [[158, "mltk.core.AutoEncoderEvaluationResults.classes"]], "classes (classifierevaluationresults property)": [[158, "mltk.core.ClassifierEvaluationResults.classes"]], "confusion_matrix (classifierevaluationresults property)": [[158, "mltk.core.ClassifierEvaluationResults.confusion_matrix"]], "evaluate_autoencoder() (in module mltk.core)": [[158, "mltk.core.evaluate_autoencoder"]], "evaluate_classifier() (in module mltk.core)": [[158, "mltk.core.evaluate_classifier"]], "evaluate_model() (in module mltk.core)": [[158, "mltk.core.evaluate_model"]], "false_positive_rate (classifierevaluationresults property)": [[158, "mltk.core.ClassifierEvaluationResults.false_positive_rate"]], "fpr (classifierevaluationresults property)": [[158, "mltk.core.ClassifierEvaluationResults.fpr"]], "generate_plots() (autoencoderevaluationresults method)": [[158, "mltk.core.AutoEncoderEvaluationResults.generate_plots"]], "generate_plots() (classifierevaluationresults method)": [[158, "mltk.core.ClassifierEvaluationResults.generate_plots"]], "generate_plots() (evaluationresults method)": [[158, "mltk.core.EvaluationResults.generate_plots"]], "generate_summary() (autoencoderevaluationresults method)": [[158, "mltk.core.AutoEncoderEvaluationResults.generate_summary"]], "generate_summary() (classifierevaluationresults method)": [[158, "mltk.core.ClassifierEvaluationResults.generate_summary"]], "generate_summary() (evaluationresults method)": [[158, "mltk.core.EvaluationResults.generate_summary"]], "model_type (evaluationresults property)": [[158, "mltk.core.EvaluationResults.model_type"]], "name (evaluationresults property)": [[158, "mltk.core.EvaluationResults.name"]], "overall_accuracy (autoencoderevaluationresults property)": [[158, "mltk.core.AutoEncoderEvaluationResults.overall_accuracy"]], "overall_accuracy (classifierevaluationresults property)": [[158, "mltk.core.ClassifierEvaluationResults.overall_accuracy"]], "overall_fpr (autoencoderevaluationresults property)": [[158, "mltk.core.AutoEncoderEvaluationResults.overall_fpr"]], "overall_pr_accuracy (autoencoderevaluationresults property)": [[158, "mltk.core.AutoEncoderEvaluationResults.overall_pr_accuracy"]], "overall_precision (autoencoderevaluationresults property)": [[158, "mltk.core.AutoEncoderEvaluationResults.overall_precision"]], "overall_recall (autoencoderevaluationresults property)": [[158, "mltk.core.AutoEncoderEvaluationResults.overall_recall"]], "overall_roc_auc (autoencoderevaluationresults property)": [[158, "mltk.core.AutoEncoderEvaluationResults.overall_roc_auc"]], "overall_thresholds (autoencoderevaluationresults property)": [[158, "mltk.core.AutoEncoderEvaluationResults.overall_thresholds"]], "overall_tpr (autoencoderevaluationresults property)": [[158, "mltk.core.AutoEncoderEvaluationResults.overall_tpr"]], "precision (classifierevaluationresults property)": [[158, "mltk.core.ClassifierEvaluationResults.precision"]], "recall (classifierevaluationresults property)": [[158, "mltk.core.ClassifierEvaluationResults.recall"]], "roc_auc (classifierevaluationresults property)": [[158, "mltk.core.ClassifierEvaluationResults.roc_auc"]], "roc_auc_avg (classifierevaluationresults property)": [[158, "mltk.core.ClassifierEvaluationResults.roc_auc_avg"]], "roc_thresholds (classifierevaluationresults property)": [[158, "mltk.core.ClassifierEvaluationResults.roc_thresholds"]], "tpr (classifierevaluationresults property)": [[158, "mltk.core.ClassifierEvaluationResults.tpr"]], "profilinglayerresult (class in mltk.core.profiling_results)": [[160, "mltk.core.profiling_results.ProfilingLayerResult"]], "profilingmodelresults (class in mltk.core.profiling_results)": [[160, "mltk.core.profiling_results.ProfilingModelResults"]], "__init__() (profilinglayerresult method)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.__init__"]], "__init__() (profilingmodelresults method)": [[160, "mltk.core.profiling_results.ProfilingModelResults.__init__"]], "accelerator (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.accelerator"]], "accelerator_cycles (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.accelerator_cycles"]], "accelerator_cycles (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.accelerator_cycles"]], "cpu_clock_rate (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.cpu_clock_rate"]], "cpu_cycles (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.cpu_cycles"]], "cpu_cycles (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.cpu_cycles"]], "cpu_utilization (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.cpu_utilization"]], "energy (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.energy"]], "energy (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.energy"]], "error_msg (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.error_msg"]], "flatbuffer_size (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.flatbuffer_size"]], "generate_report() (profilingmodelresults method)": [[160, "mltk.core.profiling_results.ProfilingModelResults.generate_report"]], "get_summary() (profilinglayerresult method)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.get_summary"]], "get_summary() (profilingmodelresults method)": [[160, "mltk.core.profiling_results.ProfilingModelResults.get_summary"]], "index (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.index"]], "input_dtype_str (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.input_dtype_str"]], "input_dtype_str (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.input_dtype_str"]], "input_shape_str (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.input_shape_str"]], "input_shape_str (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.input_shape_str"]], "is_accelerated (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.is_accelerated"]], "is_simulated (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.is_simulated"]], "is_unsupported (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.is_unsupported"]], "layers (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.layers"]], "macs (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.macs"]], "macs (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.macs"]], "n_layers (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.n_layers"]], "n_unsupported_layers (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.n_unsupported_layers"]], "name (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.name"]], "name (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.name"]], "opcode (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.opcode"]], "opcode_str (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.opcode_str"]], "ops (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.ops"]], "ops (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.ops"]], "options_str (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.options_str"]], "output_dtype_str (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.output_dtype_str"]], "output_dtype_str (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.output_dtype_str"]], "output_shape_str (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.output_shape_str"]], "output_shape_str (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.output_shape_str"]], "platform (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.platform"]], "profile_model() (in module mltk.core)": [[160, "mltk.core.profile_model"]], "runtime_memory_bytes (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.runtime_memory_bytes"]], "stat_total() (profilingmodelresults method)": [[160, "mltk.core.profiling_results.ProfilingModelResults.stat_total"]], "tflite_layer (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.tflite_layer"]], "tflite_model (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.tflite_model"]], "time (profilinglayerresult property)": [[160, "mltk.core.profiling_results.ProfilingLayerResult.time"]], "time (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.time"]], "to_csv() (profilingmodelresults method)": [[160, "mltk.core.profiling_results.ProfilingModelResults.to_csv"]], "to_dict() (profilingmodelresults method)": [[160, "mltk.core.profiling_results.ProfilingModelResults.to_dict"]], "to_json() (profilingmodelresults method)": [[160, "mltk.core.profiling_results.ProfilingModelResults.to_json"]], "to_string() (profilingmodelresults method)": [[160, "mltk.core.profiling_results.ProfilingModelResults.to_string"]], "unsupported_layers (profilingmodelresults property)": [[160, "mltk.core.profiling_results.ProfilingModelResults.unsupported_layers"]], "quantize_model() (in module mltk.core)": [[161, "mltk.core.quantize_model"]], "summarize_model() (in module mltk.core)": [[162, "mltk.core.summarize_model"]], "trainingresults (class in mltk.core.train_model)": [[163, "mltk.core.train_model.TrainingResults"]], "__init__() (trainingresults method)": [[163, "mltk.core.train_model.TrainingResults.__init__"]], "asdict() (trainingresults method)": [[163, "mltk.core.train_model.TrainingResults.asdict"]], "epochs (trainingresults attribute)": [[163, "mltk.core.train_model.TrainingResults.epochs"]], "get_best_metric() (trainingresults method)": [[163, "mltk.core.train_model.TrainingResults.get_best_metric"]], "history (trainingresults attribute)": [[163, "mltk.core.train_model.TrainingResults.history"]], "keras_model (trainingresults attribute)": [[163, "mltk.core.train_model.TrainingResults.keras_model"]], "mltk_model (trainingresults attribute)": [[163, "mltk.core.train_model.TrainingResults.mltk_model"]], "model_archive_path (trainingresults property)": [[163, "mltk.core.train_model.TrainingResults.model_archive_path"]], "params (trainingresults attribute)": [[163, "mltk.core.train_model.TrainingResults.params"]], "train_model() (in module mltk.core)": [[163, "mltk.core.train_model"]], "update_model_parameters() (in module mltk.core)": [[164, "mltk.core.update_model_parameters"]], "view_model() (in module mltk.core)": [[165, "mltk.core.view_model"]], "tflitemicroaccelerator (class in mltk.core.tflite_micro.tflite_micro_accelerator)": [[166, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator"]], "__init__() (tflitemicroaccelerator method)": [[166, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.__init__"]], "accelerator_wrapper (tflitemicroaccelerator property)": [[166, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.accelerator_wrapper"]], "active_variant (tflitemicroaccelerator property)": [[166, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.active_variant"]], "api_version (tflitemicroaccelerator property)": [[166, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.api_version"]], "compile_model() (tflitemicroaccelerator method)": [[166, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.compile_model"]], "enable_data_recorder() (tflitemicroaccelerator method)": [[166, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.enable_data_recorder"]], "enable_program_recorder() (tflitemicroaccelerator method)": [[166, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.enable_program_recorder"]], "estimate_profiling_results() (tflitemicroaccelerator method)": [[166, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.estimate_profiling_results"]], "git_hash (tflitemicroaccelerator property)": [[166, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.git_hash"]], "name (tflitemicroaccelerator property)": [[166, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.name"]], "supports_model_compilation (tflitemicroaccelerator property)": [[166, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.supports_model_compilation"]], "variants (tflitemicroaccelerator property)": [[166, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.variants"]], "tflitemicrolayererror (class in mltk.core.tflite_micro)": [[168, "mltk.core.tflite_micro.TfliteMicroLayerError"]], "__init__() (tflitemicrolayererror method)": [[168, "mltk.core.tflite_micro.TfliteMicroLayerError.__init__"]], "index (tflitemicrolayererror property)": [[168, "mltk.core.tflite_micro.TfliteMicroLayerError.index"]], "msg (tflitemicrolayererror property)": [[168, "mltk.core.tflite_micro.TfliteMicroLayerError.msg"]], "name (tflitemicrolayererror property)": [[168, "mltk.core.tflite_micro.TfliteMicroLayerError.name"]], "tflitemicromodel (class in mltk.core.tflite_micro)": [[169, "mltk.core.tflite_micro.TfliteMicroModel"]], "__init__() (tflitemicromodel method)": [[169, "mltk.core.tflite_micro.TfliteMicroModel.__init__"]], "accelerator (tflitemicromodel property)": [[169, "mltk.core.tflite_micro.TfliteMicroModel.accelerator"]], "details (tflitemicromodel property)": [[169, "mltk.core.tflite_micro.TfliteMicroModel.details"]], "get_layer_error() (tflitemicromodel method)": [[169, "mltk.core.tflite_micro.TfliteMicroModel.get_layer_error"]], "get_profiling_results() (tflitemicromodel method)": [[169, "mltk.core.tflite_micro.TfliteMicroModel.get_profiling_results"]], "get_recorded_data() (tflitemicromodel method)": [[169, "mltk.core.tflite_micro.TfliteMicroModel.get_recorded_data"]], "input() (tflitemicromodel method)": [[169, "mltk.core.tflite_micro.TfliteMicroModel.input"]], "input_size (tflitemicromodel property)": [[169, "mltk.core.tflite_micro.TfliteMicroModel.input_size"]], "invoke() (tflitemicromodel method)": [[169, "mltk.core.tflite_micro.TfliteMicroModel.invoke"]], "is_profiler_enabled (tflitemicromodel property)": [[169, "mltk.core.tflite_micro.TfliteMicroModel.is_profiler_enabled"]], "is_tensor_recorder_enabled (tflitemicromodel property)": [[169, "mltk.core.tflite_micro.TfliteMicroModel.is_tensor_recorder_enabled"]], "layer_errors (tflitemicromodel property)": [[169, "mltk.core.tflite_micro.TfliteMicroModel.layer_errors"]], "output() (tflitemicromodel method)": [[169, "mltk.core.tflite_micro.TfliteMicroModel.output"]], "output_size (tflitemicromodel property)": [[169, "mltk.core.tflite_micro.TfliteMicroModel.output_size"]], "tflitemicromodeldetails (class in mltk.core.tflite_micro)": [[170, "mltk.core.tflite_micro.TfliteMicroModelDetails"]], "__init__() (tflitemicromodeldetails method)": [[170, "mltk.core.tflite_micro.TfliteMicroModelDetails.__init__"]], "accelerator (tflitemicromodeldetails property)": [[170, "mltk.core.tflite_micro.TfliteMicroModelDetails.accelerator"]], "classes (tflitemicromodeldetails property)": [[170, "mltk.core.tflite_micro.TfliteMicroModelDetails.classes"]], "date (tflitemicromodeldetails property)": [[170, "mltk.core.tflite_micro.TfliteMicroModelDetails.date"]], "description (tflitemicromodeldetails property)": [[170, "mltk.core.tflite_micro.TfliteMicroModelDetails.description"]], "hash (tflitemicromodeldetails property)": [[170, "mltk.core.tflite_micro.TfliteMicroModelDetails.hash"]], "name (tflitemicromodeldetails property)": [[170, "mltk.core.tflite_micro.TfliteMicroModelDetails.name"]], "runtime_memory_size (tflitemicromodeldetails property)": [[170, "mltk.core.tflite_micro.TfliteMicroModelDetails.runtime_memory_size"]], "version (tflitemicromodeldetails property)": [[170, "mltk.core.tflite_micro.TfliteMicroModelDetails.version"]], "tflitemicroprofiledlayerresult (class in mltk.core.tflite_micro)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult"]], "__init__() (tflitemicroprofiledlayerresult method)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.__init__"]], "__new__() (tflitemicroprofiledlayerresult method)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.__new__"]], "accelerator_cycles (tflitemicroprofiledlayerresult property)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.accelerator_cycles"]], "clear() (tflitemicroprofiledlayerresult method)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.clear"]], "copy() (tflitemicroprofiledlayerresult method)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.copy"]], "cpu_cycles (tflitemicroprofiledlayerresult property)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.cpu_cycles"]], "default_factory (tflitemicroprofiledlayerresult attribute)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.default_factory"]], "energy (tflitemicroprofiledlayerresult property)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.energy"]], "fromkeys() (tflitemicroprofiledlayerresult method)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.fromkeys"]], "get() (tflitemicroprofiledlayerresult method)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.get"]], "items() (tflitemicroprofiledlayerresult method)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.items"]], "keys() (tflitemicroprofiledlayerresult method)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.keys"]], "macs (tflitemicroprofiledlayerresult property)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.macs"]], "name (tflitemicroprofiledlayerresult property)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.name"]], "ops (tflitemicroprofiledlayerresult property)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.ops"]], "pop() (tflitemicroprofiledlayerresult method)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.pop"]], "popitem() (tflitemicroprofiledlayerresult method)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.popitem"]], "setdefault() (tflitemicroprofiledlayerresult method)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.setdefault"]], "time (tflitemicroprofiledlayerresult property)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.time"]], "update() (tflitemicroprofiledlayerresult method)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.update"]], "values() (tflitemicroprofiledlayerresult method)": [[171, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.values"]], "tflitemicro (class in mltk.core.tflite_micro)": [[172, "mltk.core.tflite_micro.TfliteMicro"]], "accelerator_is_supported() (tflitemicro static method)": [[172, "mltk.core.tflite_micro.TfliteMicro.accelerator_is_supported"]], "add_accelerator_path() (tflitemicro static method)": [[172, "mltk.core.tflite_micro.TfliteMicro.add_accelerator_path"]], "api_version() (tflitemicro static method)": [[172, "mltk.core.tflite_micro.TfliteMicro.api_version"]], "get_accelerator() (tflitemicro static method)": [[172, "mltk.core.tflite_micro.TfliteMicro.get_accelerator"]], "get_log_level() (tflitemicro static method)": [[172, "mltk.core.tflite_micro.TfliteMicro.get_log_level"]], "get_logger() (tflitemicro static method)": [[172, "mltk.core.tflite_micro.TfliteMicro.get_logger"]], "get_supported_accelerators() (tflitemicro static method)": [[172, "mltk.core.tflite_micro.TfliteMicro.get_supported_accelerators"]], "git_hash() (tflitemicro static method)": [[172, "mltk.core.tflite_micro.TfliteMicro.git_hash"]], "load_tflite_model() (tflitemicro static method)": [[172, "mltk.core.tflite_micro.TfliteMicro.load_tflite_model"]], "normalize_accelerator_name() (tflitemicro static method)": [[172, "mltk.core.tflite_micro.TfliteMicro.normalize_accelerator_name"]], "profile_model() (tflitemicro static method)": [[172, "mltk.core.tflite_micro.TfliteMicro.profile_model"]], "record_model() (tflitemicro static method)": [[172, "mltk.core.tflite_micro.TfliteMicro.record_model"]], "register_accelerator() (tflitemicro static method)": [[172, "mltk.core.tflite_micro.TfliteMicro.register_accelerator"]], "set_log_level() (tflitemicro static method)": [[172, "mltk.core.tflite_micro.TfliteMicro.set_log_level"]], "set_logger() (tflitemicro static method)": [[172, "mltk.core.tflite_micro.TfliteMicro.set_logger"]], "unload_model() (tflitemicro static method)": [[172, "mltk.core.tflite_micro.TfliteMicro.unload_model"]], "none (tfliteactivation attribute)": [[173, "mltk.core.TfliteActivation.NONE"]], "relu (tfliteactivation attribute)": [[173, "mltk.core.TfliteActivation.RELU"]], "relu6 (tfliteactivation attribute)": [[173, "mltk.core.TfliteActivation.RELU6"]], "relu_n1_to_1 (tfliteactivation attribute)": [[173, "mltk.core.TfliteActivation.RELU_N1_TO_1"]], "sign_bit (tfliteactivation attribute)": [[173, "mltk.core.TfliteActivation.SIGN_BIT"]], "tanh (tfliteactivation attribute)": [[173, "mltk.core.TfliteActivation.TANH"]], "tfliteactivation (class in mltk.core)": [[173, "mltk.core.TfliteActivation"]], "to_string() (tfliteactivation method)": [[173, "mltk.core.TfliteActivation.to_string"]], "tfliteaddlayer (class in mltk.core)": [[174, "mltk.core.TfliteAddLayer"]], "__init__() (tfliteaddlayer method)": [[174, "mltk.core.TfliteAddLayer.__init__"]], "activation (tfliteaddlayer property)": [[174, "mltk.core.TfliteAddLayer.activation"]], "from_flatbuffer() (tfliteaddlayer static method)": [[174, "mltk.core.TfliteAddLayer.from_flatbuffer"]], "get_input_data() (tfliteaddlayer method)": [[174, "mltk.core.TfliteAddLayer.get_input_data"]], "get_input_tensor() (tfliteaddlayer method)": [[174, "mltk.core.TfliteAddLayer.get_input_tensor"]], "get_output_data() (tfliteaddlayer method)": [[174, "mltk.core.TfliteAddLayer.get_output_data"]], "get_output_tensor() (tfliteaddlayer method)": [[174, "mltk.core.TfliteAddLayer.get_output_tensor"]], "index (tfliteaddlayer property)": [[174, "mltk.core.TfliteAddLayer.index"]], "input1_data (tfliteaddlayer property)": [[174, "mltk.core.TfliteAddLayer.input1_data"]], "input1_tensor (tfliteaddlayer property)": [[174, "mltk.core.TfliteAddLayer.input1_tensor"]], "input2_data (tfliteaddlayer property)": [[174, "mltk.core.TfliteAddLayer.input2_data"]], "input2_tensor (tfliteaddlayer property)": [[174, "mltk.core.TfliteAddLayer.input2_tensor"]], "inputs (tfliteaddlayer property)": [[174, "mltk.core.TfliteAddLayer.inputs"]], "metadata (tfliteaddlayer property)": [[174, "mltk.core.TfliteAddLayer.metadata"]], "model (tfliteaddlayer property)": [[174, "mltk.core.TfliteAddLayer.model"]], "n_inputs (tfliteaddlayer property)": [[174, "mltk.core.TfliteAddLayer.n_inputs"]], "n_outputs (tfliteaddlayer property)": [[174, "mltk.core.TfliteAddLayer.n_outputs"]], "name (tfliteaddlayer property)": [[174, "mltk.core.TfliteAddLayer.name"]], "opcode (tfliteaddlayer property)": [[174, "mltk.core.TfliteAddLayer.opcode"]], "opcode_str (tfliteaddlayer property)": [[174, "mltk.core.TfliteAddLayer.opcode_str"]], "options (tfliteaddlayer property)": [[174, "mltk.core.TfliteAddLayer.options"]], "output_data (tfliteaddlayer property)": [[174, "mltk.core.TfliteAddLayer.output_data"]], "output_tensor (tfliteaddlayer property)": [[174, "mltk.core.TfliteAddLayer.output_tensor"]], "outputs (tfliteaddlayer property)": [[174, "mltk.core.TfliteAddLayer.outputs"]], "tfliteconv2dlayer (class in mltk.core)": [[175, "mltk.core.TfliteConv2dLayer"]], "__init__() (tfliteconv2dlayer method)": [[175, "mltk.core.TfliteConv2dLayer.__init__"]], "activation (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.activation"]], "bias_data (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.bias_data"]], "bias_tensor (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.bias_tensor"]], "filters (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.filters"]], "filters_data (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.filters_data"]], "filters_tensor (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.filters_tensor"]], "from_flatbuffer() (tfliteconv2dlayer static method)": [[175, "mltk.core.TfliteConv2dLayer.from_flatbuffer"]], "get_input_data() (tfliteconv2dlayer method)": [[175, "mltk.core.TfliteConv2dLayer.get_input_data"]], "get_input_tensor() (tfliteconv2dlayer method)": [[175, "mltk.core.TfliteConv2dLayer.get_input_tensor"]], "get_output_data() (tfliteconv2dlayer method)": [[175, "mltk.core.TfliteConv2dLayer.get_output_data"]], "get_output_tensor() (tfliteconv2dlayer method)": [[175, "mltk.core.TfliteConv2dLayer.get_output_tensor"]], "index (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.index"]], "input_data (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.input_data"]], "input_tensor (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.input_tensor"]], "inputs (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.inputs"]], "kernel_size (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.kernel_size"]], "metadata (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.metadata"]], "model (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.model"]], "n_inputs (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.n_inputs"]], "n_outputs (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.n_outputs"]], "name (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.name"]], "opcode (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.opcode"]], "opcode_str (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.opcode_str"]], "options (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.options"]], "output_data (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.output_data"]], "output_tensor (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.output_tensor"]], "outputs (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.outputs"]], "padding (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.padding"]], "params (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.params"]], "strides (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.strides"]], "use_bias (tfliteconv2dlayer property)": [[175, "mltk.core.TfliteConv2dLayer.use_bias"]], "tfliteconv2dlayeroptions (class in mltk.core)": [[176, "mltk.core.TfliteConv2DLayerOptions"]], "__init__() (tfliteconv2dlayeroptions method)": [[176, "mltk.core.TfliteConv2DLayerOptions.__init__"]], "activation (tfliteconv2dlayeroptions property)": [[176, "mltk.core.TfliteConv2DLayerOptions.activation"]], "activation_str (tfliteconv2dlayeroptions property)": [[176, "mltk.core.TfliteConv2DLayerOptions.activation_str"]], "options_type (tfliteconv2dlayeroptions property)": [[176, "mltk.core.TfliteConv2DLayerOptions.options_type"]], "options_type_str (tfliteconv2dlayeroptions property)": [[176, "mltk.core.TfliteConv2DLayerOptions.options_type_str"]], "padding (tfliteconv2dlayeroptions property)": [[176, "mltk.core.TfliteConv2DLayerOptions.padding"]], "padding_str (tfliteconv2dlayeroptions property)": [[176, "mltk.core.TfliteConv2DLayerOptions.padding_str"]], "stride_height (tfliteconv2dlayeroptions property)": [[176, "mltk.core.TfliteConv2DLayerOptions.stride_height"]], "stride_width (tfliteconv2dlayeroptions property)": [[176, "mltk.core.TfliteConv2DLayerOptions.stride_width"]], "tfliteconvparams (class in mltk.core)": [[177, "mltk.core.TfliteConvParams"]], "__init__() (tfliteconvparams method)": [[177, "mltk.core.TfliteConvParams.__init__"]], "calculate() (tfliteconvparams static method)": [[177, "mltk.core.TfliteConvParams.calculate"]], "dilation_height_factor (tfliteconvparams attribute)": [[177, "mltk.core.TfliteConvParams.dilation_height_factor"]], "dilation_width_factor (tfliteconvparams attribute)": [[177, "mltk.core.TfliteConvParams.dilation_width_factor"]], "input_offset (tfliteconvparams attribute)": [[177, "mltk.core.TfliteConvParams.input_offset"]], "output_offset (tfliteconvparams attribute)": [[177, "mltk.core.TfliteConvParams.output_offset"]], "padding (tfliteconvparams attribute)": [[177, "mltk.core.TfliteConvParams.padding"]], "per_channel_output_multiplier (tfliteconvparams attribute)": [[177, "mltk.core.TfliteConvParams.per_channel_output_multiplier"]], "per_channel_output_shift (tfliteconvparams attribute)": [[177, "mltk.core.TfliteConvParams.per_channel_output_shift"]], "quantized_activation_max (tfliteconvparams attribute)": [[177, "mltk.core.TfliteConvParams.quantized_activation_max"]], "quantized_activation_min (tfliteconvparams attribute)": [[177, "mltk.core.TfliteConvParams.quantized_activation_min"]], "stride_height (tfliteconvparams attribute)": [[177, "mltk.core.TfliteConvParams.stride_height"]], "stride_width (tfliteconvparams attribute)": [[177, "mltk.core.TfliteConvParams.stride_width"]], "weights_offset (tfliteconvparams attribute)": [[177, "mltk.core.TfliteConvParams.weights_offset"]], "tflitedepthwiseconv2dlayer (class in mltk.core)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer"]], "__init__() (tflitedepthwiseconv2dlayer method)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.__init__"]], "activation (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.activation"]], "bias_data (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.bias_data"]], "bias_tensor (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.bias_tensor"]], "filters_data (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.filters_data"]], "filters_tensor (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.filters_tensor"]], "from_flatbuffer() (tflitedepthwiseconv2dlayer static method)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.from_flatbuffer"]], "get_input_data() (tflitedepthwiseconv2dlayer method)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.get_input_data"]], "get_input_tensor() (tflitedepthwiseconv2dlayer method)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.get_input_tensor"]], "get_output_data() (tflitedepthwiseconv2dlayer method)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.get_output_data"]], "get_output_tensor() (tflitedepthwiseconv2dlayer method)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.get_output_tensor"]], "index (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.index"]], "input_data (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.input_data"]], "input_tensor (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.input_tensor"]], "inputs (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.inputs"]], "kernel_size (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.kernel_size"]], "metadata (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.metadata"]], "model (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.model"]], "multiplier (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.multiplier"]], "n_inputs (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.n_inputs"]], "n_outputs (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.n_outputs"]], "name (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.name"]], "opcode (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.opcode"]], "opcode_str (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.opcode_str"]], "options (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.options"]], "output_data (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.output_data"]], "output_tensor (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.output_tensor"]], "outputs (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.outputs"]], "padding (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.padding"]], "params (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.params"]], "strides (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.strides"]], "use_bias (tflitedepthwiseconv2dlayer property)": [[178, "mltk.core.TfliteDepthwiseConv2dLayer.use_bias"]], "tflitedepthwiseconv2dlayeroptions (class in mltk.core)": [[179, "mltk.core.TfliteDepthwiseConv2DLayerOptions"]], "__init__() (tflitedepthwiseconv2dlayeroptions method)": [[179, "mltk.core.TfliteDepthwiseConv2DLayerOptions.__init__"]], "activation (tflitedepthwiseconv2dlayeroptions property)": [[179, "mltk.core.TfliteDepthwiseConv2DLayerOptions.activation"]], "activation_str (tflitedepthwiseconv2dlayeroptions property)": [[179, "mltk.core.TfliteDepthwiseConv2DLayerOptions.activation_str"]], "multiplier (tflitedepthwiseconv2dlayeroptions property)": [[179, "mltk.core.TfliteDepthwiseConv2DLayerOptions.multiplier"]], "options_type (tflitedepthwiseconv2dlayeroptions property)": [[179, "mltk.core.TfliteDepthwiseConv2DLayerOptions.options_type"]], "options_type_str (tflitedepthwiseconv2dlayeroptions property)": [[179, "mltk.core.TfliteDepthwiseConv2DLayerOptions.options_type_str"]], "padding (tflitedepthwiseconv2dlayeroptions property)": [[179, "mltk.core.TfliteDepthwiseConv2DLayerOptions.padding"]], "padding_str (tflitedepthwiseconv2dlayeroptions property)": [[179, "mltk.core.TfliteDepthwiseConv2DLayerOptions.padding_str"]], "stride_height (tflitedepthwiseconv2dlayeroptions property)": [[179, "mltk.core.TfliteDepthwiseConv2DLayerOptions.stride_height"]], "stride_width (tflitedepthwiseconv2dlayeroptions property)": [[179, "mltk.core.TfliteDepthwiseConv2DLayerOptions.stride_width"]], "tflitedepthwiseconvparams (class in mltk.core)": [[180, "mltk.core.TfliteDepthwiseConvParams"]], "__init__() (tflitedepthwiseconvparams method)": [[180, "mltk.core.TfliteDepthwiseConvParams.__init__"]], "calculate() (tflitedepthwiseconvparams static method)": [[180, "mltk.core.TfliteDepthwiseConvParams.calculate"]], "depth_multiplier (tflitedepthwiseconvparams attribute)": [[180, "mltk.core.TfliteDepthwiseConvParams.depth_multiplier"]], "dilation_height_factor (tflitedepthwiseconvparams attribute)": [[180, "mltk.core.TfliteDepthwiseConvParams.dilation_height_factor"]], "dilation_width_factor (tflitedepthwiseconvparams attribute)": [[180, "mltk.core.TfliteDepthwiseConvParams.dilation_width_factor"]], "input_offset (tflitedepthwiseconvparams attribute)": [[180, "mltk.core.TfliteDepthwiseConvParams.input_offset"]], "output_offset (tflitedepthwiseconvparams attribute)": [[180, "mltk.core.TfliteDepthwiseConvParams.output_offset"]], "padding (tflitedepthwiseconvparams attribute)": [[180, "mltk.core.TfliteDepthwiseConvParams.padding"]], "per_channel_output_multiplier (tflitedepthwiseconvparams attribute)": [[180, "mltk.core.TfliteDepthwiseConvParams.per_channel_output_multiplier"]], "per_channel_output_shift (tflitedepthwiseconvparams attribute)": [[180, "mltk.core.TfliteDepthwiseConvParams.per_channel_output_shift"]], "quantized_activation_max (tflitedepthwiseconvparams attribute)": [[180, "mltk.core.TfliteDepthwiseConvParams.quantized_activation_max"]], "quantized_activation_min (tflitedepthwiseconvparams attribute)": [[180, "mltk.core.TfliteDepthwiseConvParams.quantized_activation_min"]], "stride_height (tflitedepthwiseconvparams attribute)": [[180, "mltk.core.TfliteDepthwiseConvParams.stride_height"]], "stride_width (tflitedepthwiseconvparams attribute)": [[180, "mltk.core.TfliteDepthwiseConvParams.stride_width"]], "weights_offset (tflitedepthwiseconvparams attribute)": [[180, "mltk.core.TfliteDepthwiseConvParams.weights_offset"]], "tflitedequantizelayer (class in mltk.core)": [[181, "mltk.core.TfliteDequantizeLayer"]], "__init__() (tflitedequantizelayer method)": [[181, "mltk.core.TfliteDequantizeLayer.__init__"]], "from_flatbuffer() (tflitedequantizelayer static method)": [[181, "mltk.core.TfliteDequantizeLayer.from_flatbuffer"]], "get_input_data() (tflitedequantizelayer method)": [[181, "mltk.core.TfliteDequantizeLayer.get_input_data"]], "get_input_tensor() (tflitedequantizelayer method)": [[181, "mltk.core.TfliteDequantizeLayer.get_input_tensor"]], "get_output_data() (tflitedequantizelayer method)": [[181, "mltk.core.TfliteDequantizeLayer.get_output_data"]], "get_output_tensor() (tflitedequantizelayer method)": [[181, "mltk.core.TfliteDequantizeLayer.get_output_tensor"]], "index (tflitedequantizelayer property)": [[181, "mltk.core.TfliteDequantizeLayer.index"]], "input_data (tflitedequantizelayer property)": [[181, "mltk.core.TfliteDequantizeLayer.input_data"]], "input_tensor (tflitedequantizelayer property)": [[181, "mltk.core.TfliteDequantizeLayer.input_tensor"]], "inputs (tflitedequantizelayer property)": [[181, "mltk.core.TfliteDequantizeLayer.inputs"]], "metadata (tflitedequantizelayer property)": [[181, "mltk.core.TfliteDequantizeLayer.metadata"]], "model (tflitedequantizelayer property)": [[181, "mltk.core.TfliteDequantizeLayer.model"]], "n_inputs (tflitedequantizelayer property)": [[181, "mltk.core.TfliteDequantizeLayer.n_inputs"]], "n_outputs (tflitedequantizelayer property)": [[181, "mltk.core.TfliteDequantizeLayer.n_outputs"]], "name (tflitedequantizelayer property)": [[181, "mltk.core.TfliteDequantizeLayer.name"]], "opcode (tflitedequantizelayer property)": [[181, "mltk.core.TfliteDequantizeLayer.opcode"]], "opcode_str (tflitedequantizelayer property)": [[181, "mltk.core.TfliteDequantizeLayer.opcode_str"]], "options (tflitedequantizelayer property)": [[181, "mltk.core.TfliteDequantizeLayer.options"]], "output_data (tflitedequantizelayer property)": [[181, "mltk.core.TfliteDequantizeLayer.output_data"]], "output_tensor (tflitedequantizelayer property)": [[181, "mltk.core.TfliteDequantizeLayer.output_tensor"]], "outputs (tflitedequantizelayer property)": [[181, "mltk.core.TfliteDequantizeLayer.outputs"]], "flatbufferdictionary (class in mltk.core.tflite_model_parameters.flatbuffer_dictionary)": [[182, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary"]], "__init__() (flatbufferdictionary method)": [[182, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.__init__"]], "deserialize() (flatbufferdictionary static method)": [[182, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.deserialize"]], "put() (flatbufferdictionary method)": [[182, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.put"]], "serialize() (flatbufferdictionary method)": [[182, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.serialize"]], "summary() (flatbufferdictionary method)": [[182, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.summary"]], "tflitefullyconnectedlayer (class in mltk.core)": [[183, "mltk.core.TfliteFullyConnectedLayer"]], "__init__() (tflitefullyconnectedlayer method)": [[183, "mltk.core.TfliteFullyConnectedLayer.__init__"]], "accumulator_depth (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.accumulator_depth"]], "activation (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.activation"]], "bias_data (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.bias_data"]], "bias_tensor (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.bias_tensor"]], "from_flatbuffer() (tflitefullyconnectedlayer static method)": [[183, "mltk.core.TfliteFullyConnectedLayer.from_flatbuffer"]], "get_input_data() (tflitefullyconnectedlayer method)": [[183, "mltk.core.TfliteFullyConnectedLayer.get_input_data"]], "get_input_tensor() (tflitefullyconnectedlayer method)": [[183, "mltk.core.TfliteFullyConnectedLayer.get_input_tensor"]], "get_output_data() (tflitefullyconnectedlayer method)": [[183, "mltk.core.TfliteFullyConnectedLayer.get_output_data"]], "get_output_tensor() (tflitefullyconnectedlayer method)": [[183, "mltk.core.TfliteFullyConnectedLayer.get_output_tensor"]], "index (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.index"]], "input_data (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.input_data"]], "input_tensor (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.input_tensor"]], "inputs (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.inputs"]], "metadata (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.metadata"]], "model (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.model"]], "n_inputs (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.n_inputs"]], "n_outputs (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.n_outputs"]], "name (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.name"]], "opcode (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.opcode"]], "opcode_str (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.opcode_str"]], "options (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.options"]], "output_data (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.output_data"]], "output_tensor (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.output_tensor"]], "outputs (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.outputs"]], "params (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.params"]], "units (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.units"]], "use_bias (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.use_bias"]], "weights_data (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.weights_data"]], "weights_tensor (tflitefullyconnectedlayer property)": [[183, "mltk.core.TfliteFullyConnectedLayer.weights_tensor"]], "tflitefullyconnectedlayeroptions (class in mltk.core)": [[184, "mltk.core.TfliteFullyConnectedLayerOptions"]], "__init__() (tflitefullyconnectedlayeroptions method)": [[184, "mltk.core.TfliteFullyConnectedLayerOptions.__init__"]], "activation (tflitefullyconnectedlayeroptions property)": [[184, "mltk.core.TfliteFullyConnectedLayerOptions.activation"]], "activation_str (tflitefullyconnectedlayeroptions property)": [[184, "mltk.core.TfliteFullyConnectedLayerOptions.activation_str"]], "options_type (tflitefullyconnectedlayeroptions property)": [[184, "mltk.core.TfliteFullyConnectedLayerOptions.options_type"]], "options_type_str (tflitefullyconnectedlayeroptions property)": [[184, "mltk.core.TfliteFullyConnectedLayerOptions.options_type_str"]], "tflitefullyconnectedparams (class in mltk.core)": [[185, "mltk.core.TfliteFullyConnectedParams"]], "__init__() (tflitefullyconnectedparams method)": [[185, "mltk.core.TfliteFullyConnectedParams.__init__"]], "calculate() (tflitefullyconnectedparams static method)": [[185, "mltk.core.TfliteFullyConnectedParams.calculate"]], "input_offset (tflitefullyconnectedparams attribute)": [[185, "mltk.core.TfliteFullyConnectedParams.input_offset"]], "output_multiplier (tflitefullyconnectedparams attribute)": [[185, "mltk.core.TfliteFullyConnectedParams.output_multiplier"]], "output_offset (tflitefullyconnectedparams attribute)": [[185, "mltk.core.TfliteFullyConnectedParams.output_offset"]], "output_shift (tflitefullyconnectedparams attribute)": [[185, "mltk.core.TfliteFullyConnectedParams.output_shift"]], "quantized_activation_max (tflitefullyconnectedparams attribute)": [[185, "mltk.core.TfliteFullyConnectedParams.quantized_activation_max"]], "quantized_activation_min (tflitefullyconnectedparams attribute)": [[185, "mltk.core.TfliteFullyConnectedParams.quantized_activation_min"]], "weights_offset (tflitefullyconnectedparams attribute)": [[185, "mltk.core.TfliteFullyConnectedParams.weights_offset"]], "tflitelayer (class in mltk.core)": [[187, "mltk.core.TfliteLayer"]], "__init__() (tflitelayer method)": [[187, "mltk.core.TfliteLayer.__init__"]], "from_flatbuffer() (tflitelayer static method)": [[187, "mltk.core.TfliteLayer.from_flatbuffer"]], "get_input_data() (tflitelayer method)": [[187, "mltk.core.TfliteLayer.get_input_data"]], "get_input_tensor() (tflitelayer method)": [[187, "mltk.core.TfliteLayer.get_input_tensor"]], "get_output_data() (tflitelayer method)": [[187, "mltk.core.TfliteLayer.get_output_data"]], "get_output_tensor() (tflitelayer method)": [[187, "mltk.core.TfliteLayer.get_output_tensor"]], "index (tflitelayer property)": [[187, "mltk.core.TfliteLayer.index"]], "inputs (tflitelayer property)": [[187, "mltk.core.TfliteLayer.inputs"]], "metadata (tflitelayer property)": [[187, "mltk.core.TfliteLayer.metadata"]], "model (tflitelayer property)": [[187, "mltk.core.TfliteLayer.model"]], "n_inputs (tflitelayer property)": [[187, "mltk.core.TfliteLayer.n_inputs"]], "n_outputs (tflitelayer property)": [[187, "mltk.core.TfliteLayer.n_outputs"]], "name (tflitelayer property)": [[187, "mltk.core.TfliteLayer.name"]], "opcode (tflitelayer property)": [[187, "mltk.core.TfliteLayer.opcode"]], "opcode_str (tflitelayer property)": [[187, "mltk.core.TfliteLayer.opcode_str"]], "options (tflitelayer property)": [[187, "mltk.core.TfliteLayer.options"]], "outputs (tflitelayer property)": [[187, "mltk.core.TfliteLayer.outputs"]], "tflitemodel (class in mltk.core)": [[188, "mltk.core.TfliteModel"]], "__init__() (tflitemodel method)": [[188, "mltk.core.TfliteModel.__init__"]], "add_metadata() (tflitemodel method)": [[188, "mltk.core.TfliteModel.add_metadata"]], "dequantize_output_to_float32() (tflitemodel method)": [[188, "mltk.core.TfliteModel.dequantize_output_to_float32"]], "description (tflitemodel property)": [[188, "mltk.core.TfliteModel.description"]], "filename (tflitemodel property)": [[188, "mltk.core.TfliteModel.filename"]], "flatbuffer_data (tflitemodel property)": [[188, "mltk.core.TfliteModel.flatbuffer_data"]], "flatbuffer_model (tflitemodel property)": [[188, "mltk.core.TfliteModel.flatbuffer_model"]], "flatbuffer_size (tflitemodel property)": [[188, "mltk.core.TfliteModel.flatbuffer_size"]], "flatbuffer_subgraph (tflitemodel property)": [[188, "mltk.core.TfliteModel.flatbuffer_subgraph"]], "get_all_metadata() (tflitemodel method)": [[188, "mltk.core.TfliteModel.get_all_metadata"]], "get_flatbuffer_subgraph() (tflitemodel method)": [[188, "mltk.core.TfliteModel.get_flatbuffer_subgraph"]], "get_input_data() (tflitemodel method)": [[188, "mltk.core.TfliteModel.get_input_data"]], "get_input_tensor() (tflitemodel method)": [[188, "mltk.core.TfliteModel.get_input_tensor"]], "get_metadata() (tflitemodel method)": [[188, "mltk.core.TfliteModel.get_metadata"]], "get_output_data() (tflitemodel method)": [[188, "mltk.core.TfliteModel.get_output_data"]], "get_output_tensor() (tflitemodel method)": [[188, "mltk.core.TfliteModel.get_output_tensor"]], "get_tensor() (tflitemodel method)": [[188, "mltk.core.TfliteModel.get_tensor"]], "get_tensor_data() (tflitemodel method)": [[188, "mltk.core.TfliteModel.get_tensor_data"]], "inputs (tflitemodel property)": [[188, "mltk.core.TfliteModel.inputs"]], "layers (tflitemodel property)": [[188, "mltk.core.TfliteModel.layers"]], "load_flatbuffer_file() (tflitemodel static method)": [[188, "mltk.core.TfliteModel.load_flatbuffer_file"]], "n_inputs (tflitemodel property)": [[188, "mltk.core.TfliteModel.n_inputs"]], "n_outputs (tflitemodel property)": [[188, "mltk.core.TfliteModel.n_outputs"]], "n_subgraphs (tflitemodel property)": [[188, "mltk.core.TfliteModel.n_subgraphs"]], "name (tflitemodel property)": [[188, "mltk.core.TfliteModel.name"]], "outputs (tflitemodel property)": [[188, "mltk.core.TfliteModel.outputs"]], "path (tflitemodel property)": [[188, "mltk.core.TfliteModel.path"]], "predict() (tflitemodel method)": [[188, "mltk.core.TfliteModel.predict"]], "quantize_to_input_dtype() (tflitemodel method)": [[188, "mltk.core.TfliteModel.quantize_to_input_dtype"]], "regenerate_flatbuffer() (tflitemodel method)": [[188, "mltk.core.TfliteModel.regenerate_flatbuffer"]], "remove_metadata() (tflitemodel method)": [[188, "mltk.core.TfliteModel.remove_metadata"]], "save() (tflitemodel method)": [[188, "mltk.core.TfliteModel.save"]], "selected_model_subgraph (tflitemodel property)": [[188, "mltk.core.TfliteModel.selected_model_subgraph"]], "summary() (tflitemodel method)": [[188, "mltk.core.TfliteModel.summary"]], "tensors (tflitemodel property)": [[188, "mltk.core.TfliteModel.tensors"]], "same (tflitepadding attribute)": [[189, "mltk.core.TflitePadding.SAME"]], "tflitepadding (class in mltk.core)": [[189, "mltk.core.TflitePadding"]], "valid (tflitepadding attribute)": [[189, "mltk.core.TflitePadding.VALID"]], "height (tflitepadding property)": [[189, "mltk.core.TflitePadding.height"]], "to_string() (tflitepadding method)": [[189, "mltk.core.TflitePadding.to_string"]], "width (tflitepadding property)": [[189, "mltk.core.TflitePadding.width"]], "tflitemodelparameters (class in mltk.core)": [[190, "mltk.core.TfliteModelParameters"]], "__init__() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.__init__"]], "__new__() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.__new__"]], "add_to_tflite_file() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.add_to_tflite_file"]], "add_to_tflite_flatbuffer() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.add_to_tflite_flatbuffer"]], "add_to_tflite_model() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.add_to_tflite_model"]], "clear() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.clear"]], "copy() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.copy"]], "deserialize() (tflitemodelparameters static method)": [[190, "mltk.core.TfliteModelParameters.deserialize"]], "fromkeys() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.fromkeys"]], "get() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.get"]], "items() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.items"]], "keys() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.keys"]], "load_from_tflite_file() (tflitemodelparameters static method)": [[190, "mltk.core.TfliteModelParameters.load_from_tflite_file"]], "load_from_tflite_flatbuffer() (tflitemodelparameters static method)": [[190, "mltk.core.TfliteModelParameters.load_from_tflite_flatbuffer"]], "load_from_tflite_model() (tflitemodelparameters static method)": [[190, "mltk.core.TfliteModelParameters.load_from_tflite_model"]], "pop() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.pop"]], "popitem() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.popitem"]], "put() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.put"]], "serialize() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.serialize"]], "setdefault() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.setdefault"]], "summary() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.summary"]], "update() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.update"]], "values() (tflitemodelparameters method)": [[190, "mltk.core.TfliteModelParameters.values"]], "tflitepooling2dlayer (class in mltk.core)": [[191, "mltk.core.TflitePooling2dLayer"]], "__init__() (tflitepooling2dlayer method)": [[191, "mltk.core.TflitePooling2dLayer.__init__"]], "activation (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.activation"]], "from_flatbuffer() (tflitepooling2dlayer static method)": [[191, "mltk.core.TflitePooling2dLayer.from_flatbuffer"]], "get_input_data() (tflitepooling2dlayer method)": [[191, "mltk.core.TflitePooling2dLayer.get_input_data"]], "get_input_tensor() (tflitepooling2dlayer method)": [[191, "mltk.core.TflitePooling2dLayer.get_input_tensor"]], "get_output_data() (tflitepooling2dlayer method)": [[191, "mltk.core.TflitePooling2dLayer.get_output_data"]], "get_output_tensor() (tflitepooling2dlayer method)": [[191, "mltk.core.TflitePooling2dLayer.get_output_tensor"]], "index (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.index"]], "input_data (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.input_data"]], "input_tensor (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.input_tensor"]], "inputs (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.inputs"]], "metadata (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.metadata"]], "model (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.model"]], "n_inputs (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.n_inputs"]], "n_outputs (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.n_outputs"]], "name (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.name"]], "opcode (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.opcode"]], "opcode_str (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.opcode_str"]], "options (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.options"]], "output_data (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.output_data"]], "output_tensor (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.output_tensor"]], "outputs (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.outputs"]], "padding (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.padding"]], "params (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.params"]], "pool_size (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.pool_size"]], "strides (tflitepooling2dlayer property)": [[191, "mltk.core.TflitePooling2dLayer.strides"]], "tflitepool2dlayeroptions (class in mltk.core)": [[192, "mltk.core.TflitePool2DLayerOptions"]], "__init__() (tflitepool2dlayeroptions method)": [[192, "mltk.core.TflitePool2DLayerOptions.__init__"]], "activation (tflitepool2dlayeroptions property)": [[192, "mltk.core.TflitePool2DLayerOptions.activation"]], "activation_str (tflitepool2dlayeroptions property)": [[192, "mltk.core.TflitePool2DLayerOptions.activation_str"]], "filter_height (tflitepool2dlayeroptions property)": [[192, "mltk.core.TflitePool2DLayerOptions.filter_height"]], "filter_width (tflitepool2dlayeroptions property)": [[192, "mltk.core.TflitePool2DLayerOptions.filter_width"]], "options_type (tflitepool2dlayeroptions property)": [[192, "mltk.core.TflitePool2DLayerOptions.options_type"]], "options_type_str (tflitepool2dlayeroptions property)": [[192, "mltk.core.TflitePool2DLayerOptions.options_type_str"]], "padding (tflitepool2dlayeroptions property)": [[192, "mltk.core.TflitePool2DLayerOptions.padding"]], "padding_str (tflitepool2dlayeroptions property)": [[192, "mltk.core.TflitePool2DLayerOptions.padding_str"]], "stride_height (tflitepool2dlayeroptions property)": [[192, "mltk.core.TflitePool2DLayerOptions.stride_height"]], "stride_width (tflitepool2dlayeroptions property)": [[192, "mltk.core.TflitePool2DLayerOptions.stride_width"]], "tflitepoolparams (class in mltk.core)": [[193, "mltk.core.TflitePoolParams"]], "__init__() (tflitepoolparams method)": [[193, "mltk.core.TflitePoolParams.__init__"]], "calculate() (tflitepoolparams static method)": [[193, "mltk.core.TflitePoolParams.calculate"]], "padding (tflitepoolparams attribute)": [[193, "mltk.core.TflitePoolParams.padding"]], "quantized_activation_max (tflitepoolparams attribute)": [[193, "mltk.core.TflitePoolParams.quantized_activation_max"]], "quantized_activation_min (tflitepoolparams attribute)": [[193, "mltk.core.TflitePoolParams.quantized_activation_min"]], "stride_height (tflitepoolparams attribute)": [[193, "mltk.core.TflitePoolParams.stride_height"]], "stride_width (tflitepoolparams attribute)": [[193, "mltk.core.TflitePoolParams.stride_width"]], "tflitequantization (class in mltk.core)": [[194, "mltk.core.TfliteQuantization"]], "__init__() (tflitequantization method)": [[194, "mltk.core.TfliteQuantization.__init__"]], "n_channels (tflitequantization property)": [[194, "mltk.core.TfliteQuantization.n_channels"]], "quantization_dimension (tflitequantization property)": [[194, "mltk.core.TfliteQuantization.quantization_dimension"]], "scale (tflitequantization property)": [[194, "mltk.core.TfliteQuantization.scale"]], "zeropoint (tflitequantization property)": [[194, "mltk.core.TfliteQuantization.zeropoint"]], "tflitequantizelayer (class in mltk.core)": [[195, "mltk.core.TfliteQuantizeLayer"]], "__init__() (tflitequantizelayer method)": [[195, "mltk.core.TfliteQuantizeLayer.__init__"]], "from_flatbuffer() (tflitequantizelayer static method)": [[195, "mltk.core.TfliteQuantizeLayer.from_flatbuffer"]], "get_input_data() (tflitequantizelayer method)": [[195, "mltk.core.TfliteQuantizeLayer.get_input_data"]], "get_input_tensor() (tflitequantizelayer method)": [[195, "mltk.core.TfliteQuantizeLayer.get_input_tensor"]], "get_output_data() (tflitequantizelayer method)": [[195, "mltk.core.TfliteQuantizeLayer.get_output_data"]], "get_output_tensor() (tflitequantizelayer method)": [[195, "mltk.core.TfliteQuantizeLayer.get_output_tensor"]], "index (tflitequantizelayer property)": [[195, "mltk.core.TfliteQuantizeLayer.index"]], "input_data (tflitequantizelayer property)": [[195, "mltk.core.TfliteQuantizeLayer.input_data"]], "input_tensor (tflitequantizelayer property)": [[195, "mltk.core.TfliteQuantizeLayer.input_tensor"]], "inputs (tflitequantizelayer property)": [[195, "mltk.core.TfliteQuantizeLayer.inputs"]], "metadata (tflitequantizelayer property)": [[195, "mltk.core.TfliteQuantizeLayer.metadata"]], "model (tflitequantizelayer property)": [[195, "mltk.core.TfliteQuantizeLayer.model"]], "n_inputs (tflitequantizelayer property)": [[195, "mltk.core.TfliteQuantizeLayer.n_inputs"]], "n_outputs (tflitequantizelayer property)": [[195, "mltk.core.TfliteQuantizeLayer.n_outputs"]], "name (tflitequantizelayer property)": [[195, "mltk.core.TfliteQuantizeLayer.name"]], "opcode (tflitequantizelayer property)": [[195, "mltk.core.TfliteQuantizeLayer.opcode"]], "opcode_str (tflitequantizelayer property)": [[195, "mltk.core.TfliteQuantizeLayer.opcode_str"]], "options (tflitequantizelayer property)": [[195, "mltk.core.TfliteQuantizeLayer.options"]], "output_data (tflitequantizelayer property)": [[195, "mltk.core.TfliteQuantizeLayer.output_data"]], "output_tensor (tflitequantizelayer property)": [[195, "mltk.core.TfliteQuantizeLayer.output_tensor"]], "outputs (tflitequantizelayer property)": [[195, "mltk.core.TfliteQuantizeLayer.outputs"]], "tflitereshapelayer (class in mltk.core)": [[196, "mltk.core.TfliteReshapeLayer"]], "__init__() (tflitereshapelayer method)": [[196, "mltk.core.TfliteReshapeLayer.__init__"]], "from_flatbuffer() (tflitereshapelayer static method)": [[196, "mltk.core.TfliteReshapeLayer.from_flatbuffer"]], "get_input_data() (tflitereshapelayer method)": [[196, "mltk.core.TfliteReshapeLayer.get_input_data"]], "get_input_tensor() (tflitereshapelayer method)": [[196, "mltk.core.TfliteReshapeLayer.get_input_tensor"]], "get_output_data() (tflitereshapelayer method)": [[196, "mltk.core.TfliteReshapeLayer.get_output_data"]], "get_output_tensor() (tflitereshapelayer method)": [[196, "mltk.core.TfliteReshapeLayer.get_output_tensor"]], "index (tflitereshapelayer property)": [[196, "mltk.core.TfliteReshapeLayer.index"]], "input_data (tflitereshapelayer property)": [[196, "mltk.core.TfliteReshapeLayer.input_data"]], "input_tensor (tflitereshapelayer property)": [[196, "mltk.core.TfliteReshapeLayer.input_tensor"]], "inputs (tflitereshapelayer property)": [[196, "mltk.core.TfliteReshapeLayer.inputs"]], "metadata (tflitereshapelayer property)": [[196, "mltk.core.TfliteReshapeLayer.metadata"]], "model (tflitereshapelayer property)": [[196, "mltk.core.TfliteReshapeLayer.model"]], "n_input_elements (tflitereshapelayer property)": [[196, "mltk.core.TfliteReshapeLayer.n_input_elements"]], "n_inputs (tflitereshapelayer property)": [[196, "mltk.core.TfliteReshapeLayer.n_inputs"]], "n_outputs (tflitereshapelayer property)": [[196, "mltk.core.TfliteReshapeLayer.n_outputs"]], "name (tflitereshapelayer property)": [[196, "mltk.core.TfliteReshapeLayer.name"]], "opcode (tflitereshapelayer property)": [[196, "mltk.core.TfliteReshapeLayer.opcode"]], "opcode_str (tflitereshapelayer property)": [[196, "mltk.core.TfliteReshapeLayer.opcode_str"]], "options (tflitereshapelayer property)": [[196, "mltk.core.TfliteReshapeLayer.options"]], "output_data (tflitereshapelayer property)": [[196, "mltk.core.TfliteReshapeLayer.output_data"]], "output_tensor (tflitereshapelayer property)": [[196, "mltk.core.TfliteReshapeLayer.output_tensor"]], "outputs (tflitereshapelayer property)": [[196, "mltk.core.TfliteReshapeLayer.outputs"]], "requires_copy (tflitereshapelayer property)": [[196, "mltk.core.TfliteReshapeLayer.requires_copy"]], "tfliteshape (class in mltk.core)": [[197, "mltk.core.TfliteShape"]], "__new__() (tfliteshape static method)": [[197, "mltk.core.TfliteShape.__new__"]], "count() (tfliteshape method)": [[197, "mltk.core.TfliteShape.count"]], "flat_size (tfliteshape property)": [[197, "mltk.core.TfliteShape.flat_size"]], "index() (tfliteshape method)": [[197, "mltk.core.TfliteShape.index"]], "tflitetensor (class in mltk.core)": [[198, "mltk.core.TfliteTensor"]], "__init__() (tflitetensor method)": [[198, "mltk.core.TfliteTensor.__init__"]], "data (tflitetensor property)": [[198, "mltk.core.TfliteTensor.data"]], "dtype (tflitetensor property)": [[198, "mltk.core.TfliteTensor.dtype"]], "dtype_str (tflitetensor property)": [[198, "mltk.core.TfliteTensor.dtype_str"]], "index (tflitetensor property)": [[198, "mltk.core.TfliteTensor.index"]], "model (tflitetensor property)": [[198, "mltk.core.TfliteTensor.model"]], "quantization (tflitetensor property)": [[198, "mltk.core.TfliteTensor.quantization"]], "shape (tflitetensor property)": [[198, "mltk.core.TfliteTensor.shape"]], "shape_dtype_str() (tflitetensor method)": [[198, "mltk.core.TfliteTensor.shape_dtype_str"]], "tflitetransposeconvlayer (class in mltk.core)": [[199, "mltk.core.TfliteTransposeConvLayer"]], "__init__() (tflitetransposeconvlayer method)": [[199, "mltk.core.TfliteTransposeConvLayer.__init__"]], "bias_data (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.bias_data"]], "bias_tensor (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.bias_tensor"]], "filters (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.filters"]], "filters_data (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.filters_data"]], "filters_tensor (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.filters_tensor"]], "from_flatbuffer() (tflitetransposeconvlayer static method)": [[199, "mltk.core.TfliteTransposeConvLayer.from_flatbuffer"]], "get_input_data() (tflitetransposeconvlayer method)": [[199, "mltk.core.TfliteTransposeConvLayer.get_input_data"]], "get_input_tensor() (tflitetransposeconvlayer method)": [[199, "mltk.core.TfliteTransposeConvLayer.get_input_tensor"]], "get_output_data() (tflitetransposeconvlayer method)": [[199, "mltk.core.TfliteTransposeConvLayer.get_output_data"]], "get_output_tensor() (tflitetransposeconvlayer method)": [[199, "mltk.core.TfliteTransposeConvLayer.get_output_tensor"]], "index (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.index"]], "input_data (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.input_data"]], "input_tensor (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.input_tensor"]], "inputs (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.inputs"]], "kernel_size (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.kernel_size"]], "metadata (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.metadata"]], "model (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.model"]], "n_inputs (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.n_inputs"]], "n_outputs (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.n_outputs"]], "name (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.name"]], "opcode (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.opcode"]], "opcode_str (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.opcode_str"]], "options (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.options"]], "output_data (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.output_data"]], "output_tensor (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.output_tensor"]], "outputs (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.outputs"]], "padding (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.padding"]], "params (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.params"]], "strides (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.strides"]], "use_bias (tflitetransposeconvlayer property)": [[199, "mltk.core.TfliteTransposeConvLayer.use_bias"]], "tflitetransposeconvlayeroptions (class in mltk.core)": [[200, "mltk.core.TfliteTransposeConvLayerOptions"]], "__init__() (tflitetransposeconvlayeroptions method)": [[200, "mltk.core.TfliteTransposeConvLayerOptions.__init__"]], "options_type (tflitetransposeconvlayeroptions property)": [[200, "mltk.core.TfliteTransposeConvLayerOptions.options_type"]], "options_type_str (tflitetransposeconvlayeroptions property)": [[200, "mltk.core.TfliteTransposeConvLayerOptions.options_type_str"]], "padding (tflitetransposeconvlayeroptions property)": [[200, "mltk.core.TfliteTransposeConvLayerOptions.padding"]], "padding_str (tflitetransposeconvlayeroptions property)": [[200, "mltk.core.TfliteTransposeConvLayerOptions.padding_str"]], "stride_height (tflitetransposeconvlayeroptions property)": [[200, "mltk.core.TfliteTransposeConvLayerOptions.stride_height"]], "stride_width (tflitetransposeconvlayeroptions property)": [[200, "mltk.core.TfliteTransposeConvLayerOptions.stride_width"]], "tflitetransposeconvparams (class in mltk.core)": [[201, "mltk.core.TfliteTransposeConvParams"]], "__init__() (tflitetransposeconvparams method)": [[201, "mltk.core.TfliteTransposeConvParams.__init__"]], "calculate() (tflitetransposeconvparams static method)": [[201, "mltk.core.TfliteTransposeConvParams.calculate"]], "input_offset (tflitetransposeconvparams attribute)": [[201, "mltk.core.TfliteTransposeConvParams.input_offset"]], "output_offset (tflitetransposeconvparams attribute)": [[201, "mltk.core.TfliteTransposeConvParams.output_offset"]], "padding (tflitetransposeconvparams attribute)": [[201, "mltk.core.TfliteTransposeConvParams.padding"]], "per_channel_output_multiplier (tflitetransposeconvparams attribute)": [[201, "mltk.core.TfliteTransposeConvParams.per_channel_output_multiplier"]], "per_channel_output_shift (tflitetransposeconvparams attribute)": [[201, "mltk.core.TfliteTransposeConvParams.per_channel_output_shift"]], "quantized_activation_max (tflitetransposeconvparams attribute)": [[201, "mltk.core.TfliteTransposeConvParams.quantized_activation_max"]], "quantized_activation_min (tflitetransposeconvparams attribute)": [[201, "mltk.core.TfliteTransposeConvParams.quantized_activation_min"]], "stride_height (tflitetransposeconvparams attribute)": [[201, "mltk.core.TfliteTransposeConvParams.stride_height"]], "stride_width (tflitetransposeconvparams attribute)": [[201, "mltk.core.TfliteTransposeConvParams.stride_width"]], "weights_offset (tflitetransposeconvparams attribute)": [[201, "mltk.core.TfliteTransposeConvParams.weights_offset"]], "extract_archive() (in module mltk.utils.archive)": [[202, "mltk.utils.archive.extract_archive"]], "gzip_directory_files() (in module mltk.utils.archive)": [[202, "mltk.utils.archive.gzip_directory_files"]], "gzip_file() (in module mltk.utils.archive)": [[202, "mltk.utils.archive.gzip_file"]], "mltk.utils.archive": [[202, "module-mltk.utils.archive"]], "download_url() (in module mltk.utils.archive_downloader)": [[203, "mltk.utils.archive_downloader.download_url"]], "download_verify_extract() (in module mltk.utils.archive_downloader)": [[203, "mltk.utils.archive_downloader.download_verify_extract"]], "mltk.utils.archive_downloader": [[203, "module-mltk.utils.archive_downloader"]], "verify_extract() (in module mltk.utils.archive_downloader)": [[203, "mltk.utils.archive_downloader.verify_extract"]], "verify_file_hash() (in module mltk.utils.archive_downloader)": [[203, "mltk.utils.archive_downloader.verify_file_hash"]], "verify_sha1() (in module mltk.utils.archive_downloader)": [[203, "mltk.utils.archive_downloader.verify_sha1"]], "verify_sha256() (in module mltk.utils.archive_downloader)": [[203, "mltk.utils.archive_downloader.verify_sha256"]], "augmentation (class in mltk.utils.audio_dataset_generator)": [[204, "mltk.utils.audio_dataset_generator.Augmentation"]], "count() (augmentation method)": [[204, "mltk.utils.audio_dataset_generator.Augmentation.count"]], "index() (augmentation method)": [[204, "mltk.utils.audio_dataset_generator.Augmentation.index"]], "pitch (augmentation attribute)": [[204, "mltk.utils.audio_dataset_generator.Augmentation.pitch"]], "rate (augmentation attribute)": [[204, "mltk.utils.audio_dataset_generator.Augmentation.rate"]], "generationconfig (class in mltk.utils.audio_dataset_generator)": [[205, "mltk.utils.audio_dataset_generator.GenerationConfig"]], "__init__() (generationconfig method)": [[205, "mltk.utils.audio_dataset_generator.GenerationConfig.__init__"]], "copy() (generationconfig method)": [[205, "mltk.utils.audio_dataset_generator.GenerationConfig.copy"]], "keyword (generationconfig attribute)": [[205, "mltk.utils.audio_dataset_generator.GenerationConfig.keyword"]], "keyword_group (generationconfig attribute)": [[205, "mltk.utils.audio_dataset_generator.GenerationConfig.keyword_group"]], "pitch (generationconfig attribute)": [[205, "mltk.utils.audio_dataset_generator.GenerationConfig.pitch"]], "rate (generationconfig attribute)": [[205, "mltk.utils.audio_dataset_generator.GenerationConfig.rate"]], "voice (generationconfig attribute)": [[205, "mltk.utils.audio_dataset_generator.GenerationConfig.voice"]], "audiodatasetgenerator (class in mltk.utils.audio_dataset_generator)": [[206, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator"]], "__init__() (audiodatasetgenerator method)": [[206, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.__init__"]], "count_characters() (audiodatasetgenerator method)": [[206, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.count_characters"]], "generate() (audiodatasetgenerator method)": [[206, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.generate"]], "get_summary() (audiodatasetgenerator method)": [[206, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.get_summary"]], "is_backend_loaded() (audiodatasetgenerator method)": [[206, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.is_backend_loaded"]], "is_running (audiodatasetgenerator property)": [[206, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.is_running"]], "join() (audiodatasetgenerator method)": [[206, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.join"]], "list_configurations() (audiodatasetgenerator method)": [[206, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.list_configurations"]], "list_languages() (audiodatasetgenerator method)": [[206, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.list_languages"]], "list_supported_backends() (audiodatasetgenerator static method)": [[206, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.list_supported_backends"]], "list_voices() (audiodatasetgenerator method)": [[206, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.list_voices"]], "load_backend() (audiodatasetgenerator method)": [[206, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.load_backend"]], "out_dir (audiodatasetgenerator property)": [[206, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.out_dir"]], "shutdown() (audiodatasetgenerator method)": [[206, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.shutdown"]], "keyword (class in mltk.utils.audio_dataset_generator)": [[208, "mltk.utils.audio_dataset_generator.Keyword"]], "aliases (keyword attribute)": [[208, "mltk.utils.audio_dataset_generator.Keyword.aliases"]], "as_list() (keyword method)": [[208, "mltk.utils.audio_dataset_generator.Keyword.as_list"]], "count() (keyword method)": [[208, "mltk.utils.audio_dataset_generator.Keyword.count"]], "index() (keyword method)": [[208, "mltk.utils.audio_dataset_generator.Keyword.index"]], "max_count (keyword attribute)": [[208, "mltk.utils.audio_dataset_generator.Keyword.max_count"]], "value (keyword attribute)": [[208, "mltk.utils.audio_dataset_generator.Keyword.value"]], "voice (class in mltk.utils.audio_dataset_generator)": [[209, "mltk.utils.audio_dataset_generator.Voice"]], "__init__() (voice method)": [[209, "mltk.utils.audio_dataset_generator.Voice.__init__"]], "backend (voice attribute)": [[209, "mltk.utils.audio_dataset_generator.Voice.backend"]], "hashable_value() (voice method)": [[209, "mltk.utils.audio_dataset_generator.Voice.hashable_value"]], "hex_hash (voice property)": [[209, "mltk.utils.audio_dataset_generator.Voice.hex_hash"]], "language_code (voice attribute)": [[209, "mltk.utils.audio_dataset_generator.Voice.language_code"]], "name (voice attribute)": [[209, "mltk.utils.audio_dataset_generator.Voice.name"]], "voicepitch (class in mltk.utils.audio_dataset_generator)": [[210, "mltk.utils.audio_dataset_generator.VoicePitch"]], "voicerate (class in mltk.utils.audio_dataset_generator)": [[211, "mltk.utils.audio_dataset_generator.VoiceRate"]], "bin2header() (in module mltk.utils.bin2header)": [[212, "mltk.utils.bin2header.bin2header"]], "main() (in module mltk.utils.bin2header)": [[212, "mltk.utils.bin2header.main"]], "mltk.utils.bin2header": [[212, "module-mltk.utils.bin2header"]], "build_mltk_target() (in module mltk.utils.cmake)": [[213, "mltk.utils.cmake.build_mltk_target"]], "get_build_directory() (in module mltk.utils.cmake)": [[213, "mltk.utils.cmake.get_build_directory"]], "invoke_mltk_target() (in module mltk.utils.cmake)": [[213, "mltk.utils.cmake.invoke_mltk_target"]], "mltk.utils.cmake": [[213, "module-mltk.utils.cmake"]], "parse_variables() (in module mltk.utils.cmake)": [[213, "mltk.utils.cmake.parse_variables"]], "tensorflowcudaversions (class in mltk.utils.gpu)": [[214, "mltk.utils.gpu.TensorflowCudaVersions"]], "__getnewargs__() (tensorflowcudaversions method)": [[214, "mltk.utils.gpu.TensorflowCudaVersions.__getnewargs__"]], "__match_args__ (tensorflowcudaversions attribute)": [[214, "mltk.utils.gpu.TensorflowCudaVersions.__match_args__"]], "__module__ (tensorflowcudaversions attribute)": [[214, "mltk.utils.gpu.TensorflowCudaVersions.__module__"]], "__new__() (tensorflowcudaversions static method)": [[214, "mltk.utils.gpu.TensorflowCudaVersions.__new__"]], "__repr__() (tensorflowcudaversions method)": [[214, "mltk.utils.gpu.TensorflowCudaVersions.__repr__"]], "__slots__ (tensorflowcudaversions attribute)": [[214, "mltk.utils.gpu.TensorflowCudaVersions.__slots__"]], "check_tensorflow_cuda_compatibility_error() (in module mltk.utils.gpu)": [[214, "mltk.utils.gpu.check_tensorflow_cuda_compatibility_error"]], "cuda (tensorflowcudaversions attribute)": [[214, "mltk.utils.gpu.TensorflowCudaVersions.cuda"]], "cudnn (tensorflowcudaversions attribute)": [[214, "mltk.utils.gpu.TensorflowCudaVersions.cudnn"]], "deinitialize() (in module mltk.utils.gpu)": [[214, "mltk.utils.gpu.deinitialize"]], "disable() (in module mltk.utils.gpu)": [[214, "mltk.utils.gpu.disable"]], "get_tensorflow_version_with_cudnn_version() (in module mltk.utils.gpu)": [[214, "mltk.utils.gpu.get_tensorflow_version_with_cudnn_version"]], "initialize() (in module mltk.utils.gpu)": [[214, "mltk.utils.gpu.initialize"]], "mltk.utils.gpu": [[214, "module-mltk.utils.gpu"]], "python_max (tensorflowcudaversions attribute)": [[214, "mltk.utils.gpu.TensorflowCudaVersions.python_max"]], "python_min (tensorflowcudaversions attribute)": [[214, "mltk.utils.gpu.TensorflowCudaVersions.python_min"]], "tensorflow (tensorflowcudaversions attribute)": [[214, "mltk.utils.gpu.TensorflowCudaVersions.tensorflow"]], "generate_hash() (in module mltk.utils.hasher)": [[215, "mltk.utils.hasher.generate_hash"]], "hash_file() (in module mltk.utils.hasher)": [[215, "mltk.utils.hasher.hash_file"]], "hash_object() (in module mltk.utils.hasher)": [[215, "mltk.utils.hasher.hash_object"]], "mltk.utils.hasher": [[215, "module-mltk.utils.hasher"]], "jlinkcommandstream (class in mltk.utils.jlink_stream)": [[217, "mltk.utils.jlink_stream.JlinkCommandStream"]], "__init__() (jlinkcommandstream method)": [[217, "mltk.utils.jlink_stream.JlinkCommandStream.__init__"]], "close() (jlinkcommandstream method)": [[217, "mltk.utils.jlink_stream.JlinkCommandStream.close"]], "issue() (jlinkcommandstream method)": [[217, "mltk.utils.jlink_stream.JlinkCommandStream.issue"]], "open() (jlinkcommandstream method)": [[217, "mltk.utils.jlink_stream.JlinkCommandStream.open"]], "jlinkdatastream (class in mltk.utils.jlink_stream)": [[218, "mltk.utils.jlink_stream.JLinkDataStream"]], "__init__() (jlinkdatastream method)": [[218, "mltk.utils.jlink_stream.JLinkDataStream.__init__"]], "buffer_hexdump (jlinkdatastream property)": [[218, "mltk.utils.jlink_stream.JLinkDataStream.buffer_hexdump"]], "buffer_unused (jlinkdatastream property)": [[218, "mltk.utils.jlink_stream.JLinkDataStream.buffer_unused"]], "buffer_used (jlinkdatastream property)": [[218, "mltk.utils.jlink_stream.JLinkDataStream.buffer_used"]], "close() (jlinkdatastream method)": [[218, "mltk.utils.jlink_stream.JLinkDataStream.close"]], "end_time (jlinkdatastream property)": [[218, "mltk.utils.jlink_stream.JLinkDataStream.end_time"]], "flush() (jlinkdatastream method)": [[218, "mltk.utils.jlink_stream.JLinkDataStream.flush"]], "is_opened (jlinkdatastream property)": [[218, "mltk.utils.jlink_stream.JLinkDataStream.is_opened"]], "max_read_size (jlinkdatastream property)": [[218, "mltk.utils.jlink_stream.JLinkDataStream.max_read_size"]], "mode (jlinkdatastream property)": [[218, "mltk.utils.jlink_stream.JLinkDataStream.mode"]], "name (jlinkdatastream property)": [[218, "mltk.utils.jlink_stream.JLinkDataStream.name"]], "read() (jlinkdatastream method)": [[218, "mltk.utils.jlink_stream.JLinkDataStream.read"]], "read_all() (jlinkdatastream method)": [[218, "mltk.utils.jlink_stream.JLinkDataStream.read_all"]], "read_data_available (jlinkdatastream property)": [[218, "mltk.utils.jlink_stream.JLinkDataStream.read_data_available"]], "timeout (jlinkdatastream property)": [[218, "mltk.utils.jlink_stream.JLinkDataStream.timeout"]], "write() (jlinkdatastream method)": [[218, "mltk.utils.jlink_stream.JLinkDataStream.write"]], "write_data_available (jlinkdatastream property)": [[218, "mltk.utils.jlink_stream.JLinkDataStream.write_data_available"]], "jlinkstream (class in mltk.utils.jlink_stream)": [[220, "mltk.utils.jlink_stream.JlinkStream"]], "__init__() (jlinkstream method)": [[220, "mltk.utils.jlink_stream.JlinkStream.__init__"]], "close() (jlinkstream method)": [[220, "mltk.utils.jlink_stream.JlinkStream.close"]], "connect() (jlinkstream method)": [[220, "mltk.utils.jlink_stream.JlinkStream.connect"]], "default_options (jlinkstream property)": [[220, "mltk.utils.jlink_stream.JlinkStream.default_options"]], "disconnect() (jlinkstream method)": [[220, "mltk.utils.jlink_stream.JlinkStream.disconnect"]], "is_connected (jlinkstream property)": [[220, "mltk.utils.jlink_stream.JlinkStream.is_connected"]], "open() (jlinkstream method)": [[220, "mltk.utils.jlink_stream.JlinkStream.open"]], "process() (jlinkstream method)": [[220, "mltk.utils.jlink_stream.JlinkStream.process"]], "read() (jlinkstream method)": [[220, "mltk.utils.jlink_stream.JlinkStream.read"]], "write() (jlinkstream method)": [[220, "mltk.utils.jlink_stream.JlinkStream.write"]], "jlinkstreamoptions (class in mltk.utils.jlink_stream)": [[221, "mltk.utils.jlink_stream.JlinkStreamOptions"]], "consoleloggerlevelcontext (class in mltk.utils.logger)": [[222, "mltk.utils.logger.ConsoleLoggerLevelContext"]], "dummylogger (class in mltk.utils.logger)": [[222, "mltk.utils.logger.DummyLogger"]], "__dict__ (consoleloggerlevelcontext attribute)": [[222, "mltk.utils.logger.ConsoleLoggerLevelContext.__dict__"]], "__dict__ (dummylogger attribute)": [[222, "mltk.utils.logger.DummyLogger.__dict__"]], "__enter__() (consoleloggerlevelcontext method)": [[222, "mltk.utils.logger.ConsoleLoggerLevelContext.__enter__"]], "__exit__() (consoleloggerlevelcontext method)": [[222, "mltk.utils.logger.ConsoleLoggerLevelContext.__exit__"]], "__init__() (consoleloggerlevelcontext method)": [[222, "mltk.utils.logger.ConsoleLoggerLevelContext.__init__"]], "__init__() (dummylogger method)": [[222, "mltk.utils.logger.DummyLogger.__init__"]], "__module__ (consoleloggerlevelcontext attribute)": [[222, "mltk.utils.logger.ConsoleLoggerLevelContext.__module__"]], "__module__ (dummylogger attribute)": [[222, "mltk.utils.logger.DummyLogger.__module__"]], "__weakref__ (consoleloggerlevelcontext attribute)": [[222, "mltk.utils.logger.ConsoleLoggerLevelContext.__weakref__"]], "__weakref__ (dummylogger attribute)": [[222, "mltk.utils.logger.DummyLogger.__weakref__"]], "add_console_logger() (in module mltk.utils.logger)": [[222, "mltk.utils.logger.add_console_logger"]], "debug() (dummylogger method)": [[222, "mltk.utils.logger.DummyLogger.debug"]], "error() (dummylogger method)": [[222, "mltk.utils.logger.DummyLogger.error"]], "exception() (dummylogger method)": [[222, "mltk.utils.logger.DummyLogger.exception"]], "flush() (dummylogger method)": [[222, "mltk.utils.logger.DummyLogger.flush"]], "get_level() (in module mltk.utils.logger)": [[222, "mltk.utils.logger.get_level"]], "get_logger() (in module mltk.utils.logger)": [[222, "mltk.utils.logger.get_logger"]], "info() (dummylogger method)": [[222, "mltk.utils.logger.DummyLogger.info"]], "make_filelike() (in module mltk.utils.logger)": [[222, "mltk.utils.logger.make_filelike"]], "mltk.utils.logger": [[222, "module-mltk.utils.logger"]], "redirect_stream() (in module mltk.utils.logger)": [[222, "mltk.utils.logger.redirect_stream"]], "set_console_level() (in module mltk.utils.logger)": [[222, "mltk.utils.logger.set_console_level"]], "timing_decorator() (in module mltk.utils.logger)": [[222, "mltk.utils.logger.timing_decorator"]], "warning() (dummylogger method)": [[222, "mltk.utils.logger.DummyLogger.warning"]], "write() (dummylogger method)": [[222, "mltk.utils.logger.DummyLogger.write"]], "add_user_setting() (in module mltk.utils.path)": [[223, "mltk.utils.path.add_user_setting"]], "clean_directory() (in module mltk.utils.path)": [[223, "mltk.utils.path.clean_directory"]], "copy_directory() (in module mltk.utils.path)": [[223, "mltk.utils.path.copy_directory"]], "create_dir() (in module mltk.utils.path)": [[223, "mltk.utils.path.create_dir"]], "create_tempdir() (in module mltk.utils.path)": [[223, "mltk.utils.path.create_tempdir"]], "create_user_dir() (in module mltk.utils.path)": [[223, "mltk.utils.path.create_user_dir"]], "extension() (in module mltk.utils.path)": [[223, "mltk.utils.path.extension"]], "file_is_in_use() (in module mltk.utils.path)": [[223, "mltk.utils.path.file_is_in_use"]], "file_is_newer() (in module mltk.utils.path)": [[223, "mltk.utils.path.file_is_newer"]], "fullpath() (in module mltk.utils.path)": [[223, "mltk.utils.path.fullpath"]], "get_actual_path() (in module mltk.utils.path)": [[223, "mltk.utils.path.get_actual_path"]], "get_user_setting() (in module mltk.utils.path)": [[223, "mltk.utils.path.get_user_setting"]], "has_filename() (in module mltk.utils.path)": [[223, "mltk.utils.path.has_filename"]], "mltk.utils.path": [[223, "module-mltk.utils.path"]], "recursive_listdir() (in module mltk.utils.path)": [[223, "mltk.utils.path.recursive_listdir"]], "remove_directory() (in module mltk.utils.path)": [[223, "mltk.utils.path.remove_directory"]], "set_file_last_modified() (in module mltk.utils.path)": [[223, "mltk.utils.path.set_file_last_modified"]], "walk_with_depth() (in module mltk.utils.path)": [[223, "mltk.utils.path.walk_with_depth"]], "processpool (class in mltk.utils.process_pool)": [[224, "mltk.utils.process_pool.ProcessPool"]], "__init__() (processpool method)": [[224, "mltk.utils.process_pool.ProcessPool.__init__"]], "create_batch() (processpool method)": [[224, "mltk.utils.process_pool.ProcessPool.create_batch"]], "is_running (processpool property)": [[224, "mltk.utils.process_pool.ProcessPool.is_running"]], "n_jobs (processpool property)": [[224, "mltk.utils.process_pool.ProcessPool.n_jobs"]], "name (processpool property)": [[224, "mltk.utils.process_pool.ProcessPool.name"]], "process() (processpool method)": [[224, "mltk.utils.process_pool.ProcessPool.process"]], "shutdown() (processpool method)": [[224, "mltk.utils.process_pool.ProcessPool.shutdown"]], "start() (processpool method)": [[224, "mltk.utils.process_pool.ProcessPool.start"]], "defaultdict() (in module mltk.utils.python)": [[225, "mltk.utils.python.DefaultDict"]], "dictobject (class in mltk.utils.python)": [[225, "mltk.utils.python.DictObject"]], "short_version (in module mltk.utils.python)": [[225, "mltk.utils.python.SHORT_VERSION"]], "__dict__ (dictobject attribute)": [[225, "mltk.utils.python.DictObject.__dict__"]], "__getattr__() (dictobject method)": [[225, "mltk.utils.python.DictObject.__getattr__"]], "__module__ (dictobject attribute)": [[225, "mltk.utils.python.DictObject.__module__"]], "__setattr__() (dictobject method)": [[225, "mltk.utils.python.DictObject.__setattr__"]], "__weakref__ (dictobject attribute)": [[225, "mltk.utils.python.DictObject.__weakref__"]], "append_exception_msg() (in module mltk.utils.python)": [[225, "mltk.utils.python.append_exception_msg"]], "as_list() (in module mltk.utils.python)": [[225, "mltk.utils.python.as_list"]], "contains_class_type() (in module mltk.utils.python)": [[225, "mltk.utils.python.contains_class_type"]], "debugger_is_active() (in module mltk.utils.python)": [[225, "mltk.utils.python.debugger_is_active"]], "disable_warnings() (in module mltk.utils.python)": [[225, "mltk.utils.python.disable_warnings"]], "find_object_key_with_value() (in module mltk.utils.python)": [[225, "mltk.utils.python.find_object_key_with_value"]], "find_object_value_with_key() (in module mltk.utils.python)": [[225, "mltk.utils.python.find_object_value_with_key"]], "find_object_value_with_key_or_value() (in module mltk.utils.python)": [[225, "mltk.utils.python.find_object_value_with_key_or_value"]], "flatten_list() (in module mltk.utils.python)": [[225, "mltk.utils.python.flatten_list"]], "forward_method_kwargs() (in module mltk.utils.python)": [[225, "mltk.utils.python.forward_method_kwargs"]], "get_case_insensitive() (in module mltk.utils.python)": [[225, "mltk.utils.python.get_case_insensitive"]], "import_module_at_path() (in module mltk.utils.python)": [[225, "mltk.utils.python.import_module_at_path"]], "install_pip_package() (in module mltk.utils.python)": [[225, "mltk.utils.python.install_pip_package"]], "is_false() (in module mltk.utils.python)": [[225, "mltk.utils.python.is_false"]], "is_true() (in module mltk.utils.python)": [[225, "mltk.utils.python.is_true"]], "list_rindex() (in module mltk.utils.python)": [[225, "mltk.utils.python.list_rindex"]], "load_json_safe() (in module mltk.utils.python)": [[225, "mltk.utils.python.load_json_safe"]], "merge_dict() (in module mltk.utils.python)": [[225, "mltk.utils.python.merge_dict"]], "mltk.utils.python": [[225, "module-mltk.utils.python"]], "notebook_is_active() (in module mltk.utils.python)": [[225, "mltk.utils.python.notebook_is_active"]], "prepend_exception_msg() (in module mltk.utils.python)": [[225, "mltk.utils.python.prepend_exception_msg"]], "set_absl_log_level() (in module mltk.utils.python)": [[225, "mltk.utils.python.set_absl_log_level"]], "timeit() (in module mltk.utils.python)": [[225, "mltk.utils.python.timeit"]], "serialreader (class in mltk.utils.serial_reader)": [[227, "mltk.utils.serial_reader.SerialReader"]], "__init__() (serialreader method)": [[227, "mltk.utils.serial_reader.SerialReader.__init__"]], "captured_data (serialreader property)": [[227, "mltk.utils.serial_reader.SerialReader.captured_data"]], "close() (serialreader method)": [[227, "mltk.utils.serial_reader.SerialReader.close"]], "error_message (serialreader property)": [[227, "mltk.utils.serial_reader.SerialReader.error_message"]], "failed (serialreader property)": [[227, "mltk.utils.serial_reader.SerialReader.failed"]], "flush() (serialreader method)": [[227, "mltk.utils.serial_reader.SerialReader.flush"]], "is_open (serialreader property)": [[227, "mltk.utils.serial_reader.SerialReader.is_open"]], "list_ports() (serialreader static method)": [[227, "mltk.utils.serial_reader.SerialReader.list_ports"]], "open() (serialreader method)": [[227, "mltk.utils.serial_reader.SerialReader.open"]], "read() (serialreader method)": [[227, "mltk.utils.serial_reader.SerialReader.read"]], "resolve_port() (serialreader static method)": [[227, "mltk.utils.serial_reader.SerialReader.resolve_port"]], "started (serialreader property)": [[227, "mltk.utils.serial_reader.SerialReader.started"]], "stopped (serialreader property)": [[227, "mltk.utils.serial_reader.SerialReader.stopped"]], "write() (serialreader method)": [[227, "mltk.utils.serial_reader.SerialReader.write"]], "mltk.utils.shell_cmd": [[228, "module-mltk.utils.shell_cmd"]], "run_shell_cmd() (in module mltk.utils.shell_cmd)": [[228, "mltk.utils.shell_cmd.run_shell_cmd"]], "signalhandler (class in mltk.utils.signal_handler)": [[229, "mltk.utils.signal_handler.SignalHandler"]], "__init__() (signalhandler method)": [[229, "mltk.utils.signal_handler.SignalHandler.__init__"]], "formattedfloat (class in mltk.utils.string_formatting)": [[230, "mltk.utils.string_formatting.FormattedFloat"]], "formattedint (class in mltk.utils.string_formatting)": [[230, "mltk.utils.string_formatting.FormattedInt"]], "__dict__ (formattedfloat attribute)": [[230, "mltk.utils.string_formatting.FormattedFloat.__dict__"]], "__dict__ (formattedint attribute)": [[230, "mltk.utils.string_formatting.FormattedInt.__dict__"]], "__module__ (formattedfloat attribute)": [[230, "mltk.utils.string_formatting.FormattedFloat.__module__"]], "__module__ (formattedint attribute)": [[230, "mltk.utils.string_formatting.FormattedInt.__module__"]], "__str__() (formattedfloat method)": [[230, "mltk.utils.string_formatting.FormattedFloat.__str__"]], "__str__() (formattedint method)": [[230, "mltk.utils.string_formatting.FormattedInt.__str__"]], "__weakref__ (formattedfloat attribute)": [[230, "mltk.utils.string_formatting.FormattedFloat.__weakref__"]], "format_units() (in module mltk.utils.string_formatting)": [[230, "mltk.utils.string_formatting.format_units"]], "iso_time_filename_str() (in module mltk.utils.string_formatting)": [[230, "mltk.utils.string_formatting.iso_time_filename_str"]], "iso_time_str() (in module mltk.utils.string_formatting)": [[230, "mltk.utils.string_formatting.iso_time_str"]], "mltk.utils.string_formatting": [[230, "module-mltk.utils.string_formatting"]], "pretty_time_str() (in module mltk.utils.string_formatting)": [[230, "mltk.utils.string_formatting.pretty_time_str"]], "get_current_os() (in module mltk.utils.system)": [[231, "mltk.utils.system.get_current_os"]], "get_username() (in module mltk.utils.system)": [[231, "mltk.utils.system.get_username"]], "has_admin() (in module mltk.utils.system)": [[231, "mltk.utils.system.has_admin"]], "is_linux() (in module mltk.utils.system)": [[231, "mltk.utils.system.is_linux"]], "is_osx() (in module mltk.utils.system)": [[231, "mltk.utils.system.is_osx"]], "is_windows() (in module mltk.utils.system)": [[231, "mltk.utils.system.is_windows"]], "make_path_executable() (in module mltk.utils.system)": [[231, "mltk.utils.system.make_path_executable"]], "mltk.utils.system": [[231, "module-mltk.utils.system"]], "raise_signal() (in module mltk.utils.system)": [[231, "mltk.utils.system.raise_signal"]], "send_signal() (in module mltk.utils.system)": [[231, "mltk.utils.system.send_signal"]], "uartstream (class in mltk.utils.uart_stream)": [[233, "mltk.utils.uart_stream.UartStream"]], "__init__() (uartstream method)": [[233, "mltk.utils.uart_stream.UartStream.__init__"]], "baud (uartstream property)": [[233, "mltk.utils.uart_stream.UartStream.baud"]], "close() (uartstream method)": [[233, "mltk.utils.uart_stream.UartStream.close"]], "flush_input() (uartstream method)": [[233, "mltk.utils.uart_stream.UartStream.flush_input"]], "is_open (uartstream property)": [[233, "mltk.utils.uart_stream.UartStream.is_open"]], "is_synchronized (uartstream property)": [[233, "mltk.utils.uart_stream.UartStream.is_synchronized"]], "list_ports() (uartstream static method)": [[233, "mltk.utils.uart_stream.UartStream.list_ports"]], "open() (uartstream method)": [[233, "mltk.utils.uart_stream.UartStream.open"]], "port (uartstream property)": [[233, "mltk.utils.uart_stream.UartStream.port"]], "read() (uartstream method)": [[233, "mltk.utils.uart_stream.UartStream.read"]], "read_all() (uartstream method)": [[233, "mltk.utils.uart_stream.UartStream.read_all"]], "read_command() (uartstream method)": [[233, "mltk.utils.uart_stream.UartStream.read_command"]], "resolve_port() (uartstream static method)": [[233, "mltk.utils.uart_stream.UartStream.resolve_port"]], "rx_bytes_available (uartstream property)": [[233, "mltk.utils.uart_stream.UartStream.rx_bytes_available"]], "synchronize() (uartstream method)": [[233, "mltk.utils.uart_stream.UartStream.synchronize"]], "synchronize_blocking() (uartstream method)": [[233, "mltk.utils.uart_stream.UartStream.synchronize_blocking"]], "tx_bytes_available (uartstream property)": [[233, "mltk.utils.uart_stream.UartStream.tx_bytes_available"]], "wait() (uartstream method)": [[233, "mltk.utils.uart_stream.UartStream.wait"]], "write() (uartstream method)": [[233, "mltk.utils.uart_stream.UartStream.write"]], "write_all() (uartstream method)": [[233, "mltk.utils.uart_stream.UartStream.write_all"]], "write_command() (uartstream method)": [[233, "mltk.utils.uart_stream.UartStream.write_command"]]}})