Search.setIndex({"docnames": ["cpp/shared/uart_stream/examples/data_test/README", "docs/audio/audio_feature_generator", "docs/audio/audio_utilities", "docs/audio/keyword_spotting_overview", "docs/command_line/classify_audio", "docs/command_line/classify_audio_cli_help", "docs/command_line/classify_image", "docs/command_line/classify_image_cli_help", "docs/command_line/commander", "docs/command_line/commander_cli_help", "docs/command_line/evaluate", "docs/command_line/evaluate_cli_help", "docs/command_line/fingerprint_reader", "docs/command_line/fingerprint_reader_cli_help", "docs/command_line/index", "docs/command_line/profile", "docs/command_line/profile_cli_help", "docs/command_line/quantize", "docs/command_line/quantize_cli_help", "docs/command_line/ssh", "docs/command_line/ssh_cli_help", "docs/command_line/summarize", "docs/command_line/summarize_cli_help", "docs/command_line/tensorboard", "docs/command_line/tensorboard_cli_help", "docs/command_line/train", "docs/command_line/train_cli_help", "docs/command_line/update_params", "docs/command_line/update_params_cli_help", "docs/command_line/view", "docs/command_line/view_audio", "docs/command_line/view_audio_cli_help", "docs/command_line/view_cli_help", "docs/cpp_development/build_options", "docs/cpp_development/command_line", "docs/cpp_development/examples/audio_classifier", "docs/cpp_development/examples/ble_audio_classifier", "docs/cpp_development/examples/fingerprint_authenticator", "docs/cpp_development/examples/hello_world", "docs/cpp_development/examples/image_classifier", "docs/cpp_development/examples/index", "docs/cpp_development/examples/model_profiler", "docs/cpp_development/index", "docs/cpp_development/simplicity_studio", "docs/cpp_development/vscode", "docs/cpp_development/wrappers/audio_feature_generator_wrapper", "docs/cpp_development/wrappers/index", "docs/cpp_development/wrappers/mvp_wrapper", "docs/cpp_development/wrappers/tflite_micro_wrapper", "docs/examples", "docs/faq/how_to_debug_model_during_training", "docs/faq/how_to_reduce_model_size", "docs/faq/how_to_run_model_on_embedded", "docs/faq/index", "docs/faq/linux_why_is_gpu_not_working", "docs/faq/where_is_my_trained_model", "docs/faq/why_does_eval_not_work_with_tflite", "docs/faq/why_is_model_not_working_on_embedded", "docs/faq/windows_tensorflow_dll_error", "docs/guides/index", "docs/guides/model_archive", "docs/guides/model_evaluation", "docs/guides/model_parameters", "docs/guides/model_profiler", "docs/guides/model_profiler_utility", "docs/guides/model_quantization", "docs/guides/model_search_path", "docs/guides/model_specification", "docs/guides/model_summary", "docs/guides/model_training", "docs/guides/model_training_monitor", "docs/guides/model_training_via_ssh", "docs/guides/model_visualizer", "docs/guides/notebook_examples_guide", "docs/installation", "docs/other/environment_variables", "docs/other/quick_reference", "docs/other/settings_file", "docs/other/supported_hardware", "docs/overview", "docs/python_api/data_preprocessing/audio", "docs/python_api/data_preprocessing/audio_data_generator", "docs/python_api/data_preprocessing/audio_data_generator_params", "docs/python_api/data_preprocessing/audio_feature_generator", "docs/python_api/data_preprocessing/audio_feature_generator_settings", "docs/python_api/data_preprocessing/image", "docs/python_api/data_preprocessing/image_data_generator", "docs/python_api/data_preprocessing/image_data_generator_params", "docs/python_api/data_preprocessing/index", "docs/python_api/data_preprocessing/list_directory", "docs/python_api/data_preprocessing/normalize", "docs/python_api/data_preprocessing/tf_dataset", "docs/python_api/data_preprocessing/utilities", "docs/python_api/datasets/accelerometer/tflm_magic_wand", "docs/python_api/datasets/audio/background_noise/ambient", "docs/python_api/datasets/audio/background_noise/brd2601", "docs/python_api/datasets/audio/background_noise/esc50", "docs/python_api/datasets/audio/direction_commands", "docs/python_api/datasets/audio/ml_commons/keywords", "docs/python_api/datasets/audio/ml_commons/voice", "docs/python_api/datasets/audio/speech_commands_v2", "docs/python_api/datasets/image/cifar10", "docs/python_api/datasets/image/fashion_mnist", "docs/python_api/datasets/image/mnist", "docs/python_api/datasets/image/rock_paper_scissors_v1", "docs/python_api/datasets/image/rock_paper_scissors_v2", "docs/python_api/datasets/index", "docs/python_api/index", "docs/python_api/keras_model", "docs/python_api/mltk_model/audio_dataset_mixin", "docs/python_api/mltk_model/dataset_mixin", "docs/python_api/mltk_model/evaluate_autoencoder_mixin", "docs/python_api/mltk_model/evaluate_classifier_mixin", "docs/python_api/mltk_model/evaluate_mixin", "docs/python_api/mltk_model/image_dataset_mixin", "docs/python_api/mltk_model/index", "docs/python_api/mltk_model/mltk_dataset", "docs/python_api/mltk_model/model", "docs/python_api/mltk_model/model_event", "docs/python_api/mltk_model/ssh_mixin", "docs/python_api/mltk_model/train_mixin", "docs/python_api/mltk_model/utilities", "docs/python_api/mltk_model/weights_and_biases_mixin", "docs/python_api/models/common_models", "docs/python_api/models/examples/audio_example1", "docs/python_api/models/examples/audio_tf_dataset", "docs/python_api/models/examples/autoencoder_example", "docs/python_api/models/examples/basic_example", "docs/python_api/models/examples/basic_tf_dataset_example", "docs/python_api/models/examples/binary_classification", "docs/python_api/models/examples/conv1d_example", "docs/python_api/models/examples/image_example1", "docs/python_api/models/examples/image_tf_dataset", "docs/python_api/models/examples/index", "docs/python_api/models/examples/siamese_contrastive", "docs/python_api/models/index", "docs/python_api/models/siliconlabs/fingerprint_signature_generator", "docs/python_api/models/siliconlabs/index", "docs/python_api/models/siliconlabs/keyword_spotting_alexa", "docs/python_api/models/siliconlabs/keyword_spotting_mobilenetv2", "docs/python_api/models/siliconlabs/keyword_spotting_on_off", "docs/python_api/models/siliconlabs/keyword_spotting_on_off_v2", "docs/python_api/models/siliconlabs/keyword_spotting_pacman", "docs/python_api/models/siliconlabs/keyword_spotting_pacman_v2", "docs/python_api/models/siliconlabs/keyword_spotting_pacman_v3", "docs/python_api/models/siliconlabs/keyword_spotting_with_transfer_learning", "docs/python_api/models/siliconlabs/rock_paper_scissors", "docs/python_api/models/tflite_micro/index", "docs/python_api/models/tflite_micro/tflite_micro_magic_wand", "docs/python_api/models/tflite_micro/tflite_micro_speech", "docs/python_api/models/tinyml/anomaly_detection", "docs/python_api/models/tinyml/image_classification", "docs/python_api/models/tinyml/index", "docs/python_api/models/tinyml/keyword_spotting", "docs/python_api/models/tinyml/visual_wake_words", "docs/python_api/operations/evaluate", "docs/python_api/operations/index", "docs/python_api/operations/profile", "docs/python_api/operations/quantize", "docs/python_api/operations/summarize", "docs/python_api/operations/train", "docs/python_api/operations/update_model_parameters", "docs/python_api/operations/view", "docs/python_api/tflite_micro_model/accelerator", "docs/python_api/tflite_micro_model/index", "docs/python_api/tflite_micro_model/layer_error", "docs/python_api/tflite_micro_model/model", "docs/python_api/tflite_micro_model/model_details", "docs/python_api/tflite_micro_model/profiled_layer_result", "docs/python_api/tflite_micro_model/wrapper", "docs/python_api/tflite_model/activation", "docs/python_api/tflite_model/add_layer", "docs/python_api/tflite_model/conv2d_layer", "docs/python_api/tflite_model/conv2d_layer_options", "docs/python_api/tflite_model/conv_params", "docs/python_api/tflite_model/depthwise_conv2d_layer", "docs/python_api/tflite_model/depthwise_conv2d_layer_options", "docs/python_api/tflite_model/depthwise_conv_params", "docs/python_api/tflite_model/dequantize_layer", "docs/python_api/tflite_model/dictionary.fbs", "docs/python_api/tflite_model/fully_connected_layer", "docs/python_api/tflite_model/fully_connected_layer_options", "docs/python_api/tflite_model/fully_connected_params", "docs/python_api/tflite_model/index", "docs/python_api/tflite_model/layer", "docs/python_api/tflite_model/model", "docs/python_api/tflite_model/padding", "docs/python_api/tflite_model/parameters", "docs/python_api/tflite_model/pooling2d_layer", "docs/python_api/tflite_model/pooling2d_layer_options", "docs/python_api/tflite_model/pooling_params", "docs/python_api/tflite_model/quantization", "docs/python_api/tflite_model/quantize_layer", "docs/python_api/tflite_model/reshape_layer", "docs/python_api/tflite_model/shape", "docs/python_api/tflite_model/tensor", "docs/python_api/tflite_model/transpose_conv_layer", "docs/python_api/tflite_model/transpose_conv_layer_options", "docs/python_api/tflite_model/transpose_conv_params", "docs/python_api/utils/archive", "docs/python_api/utils/archive_downloader", "docs/python_api/utils/audio_dataset_generator/augmentation", "docs/python_api/utils/audio_dataset_generator/generation_config", "docs/python_api/utils/audio_dataset_generator/generator", "docs/python_api/utils/audio_dataset_generator/index", "docs/python_api/utils/audio_dataset_generator/keyword", "docs/python_api/utils/audio_dataset_generator/voice", "docs/python_api/utils/audio_dataset_generator/voice_pitch", "docs/python_api/utils/audio_dataset_generator/voice_rate", "docs/python_api/utils/bin2header", "docs/python_api/utils/cmake", "docs/python_api/utils/gpu", "docs/python_api/utils/hasher", "docs/python_api/utils/index", "docs/python_api/utils/jlink_stream/command_stream", "docs/python_api/utils/jlink_stream/data_stream", "docs/python_api/utils/jlink_stream/index", "docs/python_api/utils/jlink_stream/jlink_stream", "docs/python_api/utils/jlink_stream/stream_options", "docs/python_api/utils/logger", "docs/python_api/utils/path", "docs/python_api/utils/process_pool", "docs/python_api/utils/python", "docs/python_api/utils/serial_reader/index", "docs/python_api/utils/serial_reader/serial_reader", "docs/python_api/utils/shell_cmd", "docs/python_api/utils/signal_handler", "docs/python_api/utils/string_formatting", "docs/python_api/utils/system", "docs/python_api/utils/uart_stream/index", "docs/python_api/utils/uart_stream/uart_stream", "docs/tutorials", "docs/why_mltk", "index", "mltk/examples/evaluate_model", "mltk/examples/profile_model", "mltk/examples/quantize_model", "mltk/examples/summarize_model", "mltk/examples/tflite_micro_model", "mltk/examples/tflite_model", "mltk/examples/train_model", "mltk/examples/update_params", "mltk/examples/view_model", "mltk/tutorials/README", "mltk/tutorials/add_existing_script_to_mltk", "mltk/tutorials/cloud_logging_with_wandb", "mltk/tutorials/cloud_training_with_vast_ai", "mltk/tutorials/fingerprint_authentication", "mltk/tutorials/image_classification", "mltk/tutorials/keyword_spotting_alexa", "mltk/tutorials/keyword_spotting_on_off", "mltk/tutorials/keyword_spotting_pacman", "mltk/tutorials/keyword_spotting_with_transfer_learning", "mltk/tutorials/model_debugging", "mltk/tutorials/model_optimization", "mltk/tutorials/onnx_to_tflite", "mltk/tutorials/synthetic_audio_dataset_generation"], "filenames": ["cpp\\shared\\uart_stream\\examples\\data_test\\README.md", "docs\\audio\\audio_feature_generator.md", "docs\\audio\\audio_utilities.md", "docs\\audio\\keyword_spotting_overview.rst", "docs\\command_line\\classify_audio.md", "docs\\command_line\\classify_audio_cli_help.md", "docs\\command_line\\classify_image.md", "docs\\command_line\\classify_image_cli_help.md", "docs\\command_line\\commander.md", "docs\\command_line\\commander_cli_help.md", "docs\\command_line\\evaluate.md", "docs\\command_line\\evaluate_cli_help.md", "docs\\command_line\\fingerprint_reader.md", "docs\\command_line\\fingerprint_reader_cli_help.md", "docs\\command_line\\index.md", "docs\\command_line\\profile.md", "docs\\command_line\\profile_cli_help.md", "docs\\command_line\\quantize.md", "docs\\command_line\\quantize_cli_help.md", "docs\\command_line\\ssh.md", "docs\\command_line\\ssh_cli_help.md", "docs\\command_line\\summarize.md", "docs\\command_line\\summarize_cli_help.md", "docs\\command_line\\tensorboard.md", "docs\\command_line\\tensorboard_cli_help.md", "docs\\command_line\\train.md", "docs\\command_line\\train_cli_help.md", "docs\\command_line\\update_params.md", "docs\\command_line\\update_params_cli_help.md", "docs\\command_line\\view.md", "docs\\command_line\\view_audio.md", "docs\\command_line\\view_audio_cli_help.md", "docs\\command_line\\view_cli_help.md", "docs\\cpp_development\\build_options.md", "docs\\cpp_development\\command_line.md", "docs\\cpp_development\\examples\\audio_classifier.md", "docs\\cpp_development\\examples\\ble_audio_classifier.md", "docs\\cpp_development\\examples\\fingerprint_authenticator.md", "docs\\cpp_development\\examples\\hello_world.md", "docs\\cpp_development\\examples\\image_classifier.md", "docs\\cpp_development\\examples\\index.md", "docs\\cpp_development\\examples\\model_profiler.md", "docs\\cpp_development\\index.md", "docs\\cpp_development\\simplicity_studio.md", "docs\\cpp_development\\vscode.md", "docs\\cpp_development\\wrappers\\audio_feature_generator_wrapper.md", "docs\\cpp_development\\wrappers\\index.md", "docs\\cpp_development\\wrappers\\mvp_wrapper.md", "docs\\cpp_development\\wrappers\\tflite_micro_wrapper.md", "docs\\examples.md", "docs\\faq\\how_to_debug_model_during_training.md", "docs\\faq\\how_to_reduce_model_size.md", "docs\\faq\\how_to_run_model_on_embedded.md", "docs\\faq\\index.md", "docs\\faq\\linux_why_is_gpu_not_working.md", "docs\\faq\\where_is_my_trained_model.md", "docs\\faq\\why_does_eval_not_work_with_tflite.md", "docs\\faq\\why_is_model_not_working_on_embedded.md", "docs\\faq\\windows_tensorflow_dll_error.md", "docs\\guides\\index.md", "docs\\guides\\model_archive.md", "docs\\guides\\model_evaluation.md", "docs\\guides\\model_parameters.md", "docs\\guides\\model_profiler.md", "docs\\guides\\model_profiler_utility.md", "docs\\guides\\model_quantization.md", "docs\\guides\\model_search_path.md", "docs\\guides\\model_specification.md", "docs\\guides\\model_summary.md", "docs\\guides\\model_training.md", "docs\\guides\\model_training_monitor.md", "docs\\guides\\model_training_via_ssh.md", "docs\\guides\\model_visualizer.md", "docs\\guides\\notebook_examples_guide.md", "docs\\installation.md", "docs\\other\\environment_variables.md", "docs\\other\\quick_reference.md", "docs\\other\\settings_file.md", "docs\\other\\supported_hardware.md", "docs\\overview.rst", "docs\\python_api\\data_preprocessing\\audio.rst", "docs\\python_api\\data_preprocessing\\audio_data_generator.rst", "docs\\python_api\\data_preprocessing\\audio_data_generator_params.rst", "docs\\python_api\\data_preprocessing\\audio_feature_generator.rst", "docs\\python_api\\data_preprocessing\\audio_feature_generator_settings.rst", "docs\\python_api\\data_preprocessing\\image.rst", "docs\\python_api\\data_preprocessing\\image_data_generator.rst", "docs\\python_api\\data_preprocessing\\image_data_generator_params.rst", "docs\\python_api\\data_preprocessing\\index.md", "docs\\python_api\\data_preprocessing\\list_directory.rst", "docs\\python_api\\data_preprocessing\\normalize.rst", "docs\\python_api\\data_preprocessing\\tf_dataset.rst", "docs\\python_api\\data_preprocessing\\utilities.md", "docs\\python_api\\datasets\\accelerometer\\tflm_magic_wand.rst", "docs\\python_api\\datasets\\audio\\background_noise\\ambient.rst", "docs\\python_api\\datasets\\audio\\background_noise\\brd2601.rst", "docs\\python_api\\datasets\\audio\\background_noise\\esc50.rst", "docs\\python_api\\datasets\\audio\\direction_commands.rst", "docs\\python_api\\datasets\\audio\\ml_commons\\keywords.rst", "docs\\python_api\\datasets\\audio\\ml_commons\\voice.rst", "docs\\python_api\\datasets\\audio\\speech_commands_v2.rst", "docs\\python_api\\datasets\\image\\cifar10.rst", "docs\\python_api\\datasets\\image\\fashion_mnist.rst", "docs\\python_api\\datasets\\image\\mnist.rst", "docs\\python_api\\datasets\\image\\rock_paper_scissors_v1.rst", "docs\\python_api\\datasets\\image\\rock_paper_scissors_v2.rst", "docs\\python_api\\datasets\\index.md", "docs\\python_api\\index.md", "docs\\python_api\\keras_model.md", "docs\\python_api\\mltk_model\\audio_dataset_mixin.rst", "docs\\python_api\\mltk_model\\dataset_mixin.rst", "docs\\python_api\\mltk_model\\evaluate_autoencoder_mixin.rst", "docs\\python_api\\mltk_model\\evaluate_classifier_mixin.rst", "docs\\python_api\\mltk_model\\evaluate_mixin.rst", "docs\\python_api\\mltk_model\\image_dataset_mixin.rst", "docs\\python_api\\mltk_model\\index.md", "docs\\python_api\\mltk_model\\mltk_dataset.rst", "docs\\python_api\\mltk_model\\model.rst", "docs\\python_api\\mltk_model\\model_event.rst", "docs\\python_api\\mltk_model\\ssh_mixin.rst", "docs\\python_api\\mltk_model\\train_mixin.rst", "docs\\python_api\\mltk_model\\utilities.md", "docs\\python_api\\mltk_model\\weights_and_biases_mixin.rst", "docs\\python_api\\models\\common_models.md", "docs\\python_api\\models\\examples\\audio_example1.md", "docs\\python_api\\models\\examples\\audio_tf_dataset.md", "docs\\python_api\\models\\examples\\autoencoder_example.md", "docs\\python_api\\models\\examples\\basic_example.md", "docs\\python_api\\models\\examples\\basic_tf_dataset_example.md", "docs\\python_api\\models\\examples\\binary_classification.md", "docs\\python_api\\models\\examples\\conv1d_example.md", "docs\\python_api\\models\\examples\\image_example1.md", "docs\\python_api\\models\\examples\\image_tf_dataset.md", "docs\\python_api\\models\\examples\\index.md", "docs\\python_api\\models\\examples\\siamese_contrastive.md", "docs\\python_api\\models\\index.md", "docs\\python_api\\models\\siliconlabs\\fingerprint_signature_generator.md", "docs\\python_api\\models\\siliconlabs\\index.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_alexa.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_mobilenetv2.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_on_off.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_on_off_v2.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_pacman.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_pacman_v2.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_pacman_v3.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_with_transfer_learning.md", "docs\\python_api\\models\\siliconlabs\\rock_paper_scissors.md", "docs\\python_api\\models\\tflite_micro\\index.md", "docs\\python_api\\models\\tflite_micro\\tflite_micro_magic_wand.md", "docs\\python_api\\models\\tflite_micro\\tflite_micro_speech.md", "docs\\python_api\\models\\tinyml\\anomaly_detection.md", "docs\\python_api\\models\\tinyml\\image_classification.md", "docs\\python_api\\models\\tinyml\\index.md", "docs\\python_api\\models\\tinyml\\keyword_spotting.md", "docs\\python_api\\models\\tinyml\\visual_wake_words.md", "docs\\python_api\\operations\\evaluate.md", "docs\\python_api\\operations\\index.md", "docs\\python_api\\operations\\profile.md", "docs\\python_api\\operations\\quantize.md", "docs\\python_api\\operations\\summarize.md", "docs\\python_api\\operations\\train.md", "docs\\python_api\\operations\\update_model_parameters.md", "docs\\python_api\\operations\\view.md", "docs\\python_api\\tflite_micro_model\\accelerator.rst", "docs\\python_api\\tflite_micro_model\\index.md", "docs\\python_api\\tflite_micro_model\\layer_error.rst", "docs\\python_api\\tflite_micro_model\\model.rst", "docs\\python_api\\tflite_micro_model\\model_details.rst", "docs\\python_api\\tflite_micro_model\\profiled_layer_result.rst", "docs\\python_api\\tflite_micro_model\\wrapper.rst", "docs\\python_api\\tflite_model\\activation.rst", "docs\\python_api\\tflite_model\\add_layer.rst", "docs\\python_api\\tflite_model\\conv2d_layer.rst", "docs\\python_api\\tflite_model\\conv2d_layer_options.rst", "docs\\python_api\\tflite_model\\conv_params.rst", "docs\\python_api\\tflite_model\\depthwise_conv2d_layer.rst", "docs\\python_api\\tflite_model\\depthwise_conv2d_layer_options.rst", "docs\\python_api\\tflite_model\\depthwise_conv_params.rst", "docs\\python_api\\tflite_model\\dequantize_layer.rst", "docs\\python_api\\tflite_model\\dictionary.fbs.md", "docs\\python_api\\tflite_model\\fully_connected_layer.rst", "docs\\python_api\\tflite_model\\fully_connected_layer_options.rst", "docs\\python_api\\tflite_model\\fully_connected_params.rst", "docs\\python_api\\tflite_model\\index.md", "docs\\python_api\\tflite_model\\layer.rst", "docs\\python_api\\tflite_model\\model.rst", "docs\\python_api\\tflite_model\\padding.rst", "docs\\python_api\\tflite_model\\parameters.rst", "docs\\python_api\\tflite_model\\pooling2d_layer.rst", "docs\\python_api\\tflite_model\\pooling2d_layer_options.rst", "docs\\python_api\\tflite_model\\pooling_params.rst", "docs\\python_api\\tflite_model\\quantization.rst", "docs\\python_api\\tflite_model\\quantize_layer.rst", "docs\\python_api\\tflite_model\\reshape_layer.rst", "docs\\python_api\\tflite_model\\shape.rst", "docs\\python_api\\tflite_model\\tensor.rst", "docs\\python_api\\tflite_model\\transpose_conv_layer.rst", "docs\\python_api\\tflite_model\\transpose_conv_layer_options.rst", "docs\\python_api\\tflite_model\\transpose_conv_params.rst", "docs\\python_api\\utils\\archive.rst", "docs\\python_api\\utils\\archive_downloader.rst", "docs\\python_api\\utils\\audio_dataset_generator\\augmentation.rst", "docs\\python_api\\utils\\audio_dataset_generator\\generation_config.rst", "docs\\python_api\\utils\\audio_dataset_generator\\generator.rst", "docs\\python_api\\utils\\audio_dataset_generator\\index.md", "docs\\python_api\\utils\\audio_dataset_generator\\keyword.rst", "docs\\python_api\\utils\\audio_dataset_generator\\voice.rst", "docs\\python_api\\utils\\audio_dataset_generator\\voice_pitch.rst", "docs\\python_api\\utils\\audio_dataset_generator\\voice_rate.rst", "docs\\python_api\\utils\\bin2header.rst", "docs\\python_api\\utils\\cmake.rst", "docs\\python_api\\utils\\gpu.rst", "docs\\python_api\\utils\\hasher.rst", "docs\\python_api\\utils\\index.md", "docs\\python_api\\utils\\jlink_stream\\command_stream.rst", "docs\\python_api\\utils\\jlink_stream\\data_stream.rst", "docs\\python_api\\utils\\jlink_stream\\index.md", "docs\\python_api\\utils\\jlink_stream\\jlink_stream.rst", "docs\\python_api\\utils\\jlink_stream\\stream_options.rst", "docs\\python_api\\utils\\logger.rst", "docs\\python_api\\utils\\path.rst", "docs\\python_api\\utils\\process_pool.rst", "docs\\python_api\\utils\\python.rst", "docs\\python_api\\utils\\serial_reader\\index.md", "docs\\python_api\\utils\\serial_reader\\serial_reader.rst", "docs\\python_api\\utils\\shell_cmd.rst", "docs\\python_api\\utils\\signal_handler.rst", "docs\\python_api\\utils\\string_formatting.rst", "docs\\python_api\\utils\\system.rst", "docs\\python_api\\utils\\uart_stream\\index.md", "docs\\python_api\\utils\\uart_stream\\uart_stream.rst", "docs\\tutorials.md", "docs\\why_mltk.md", "index.md", "mltk\\examples\\evaluate_model.ipynb", "mltk\\examples\\profile_model.ipynb", "mltk\\examples\\quantize_model.ipynb", "mltk\\examples\\summarize_model.ipynb", "mltk\\examples\\tflite_micro_model.ipynb", "mltk\\examples\\tflite_model.ipynb", "mltk\\examples\\train_model.ipynb", "mltk\\examples\\update_params.ipynb", "mltk\\examples\\view_model.ipynb", "mltk\\tutorials\\README.md", "mltk\\tutorials\\add_existing_script_to_mltk.ipynb", "mltk\\tutorials\\cloud_logging_with_wandb.ipynb", "mltk\\tutorials\\cloud_training_with_vast_ai.ipynb", "mltk\\tutorials\\fingerprint_authentication.ipynb", "mltk\\tutorials\\image_classification.ipynb", "mltk\\tutorials\\keyword_spotting_alexa.ipynb", "mltk\\tutorials\\keyword_spotting_on_off.ipynb", "mltk\\tutorials\\keyword_spotting_pacman.ipynb", "mltk\\tutorials\\keyword_spotting_with_transfer_learning.ipynb", "mltk\\tutorials\\model_debugging.ipynb", "mltk\\tutorials\\model_optimization.ipynb", "mltk\\tutorials\\onnx_to_tflite.ipynb", "mltk\\tutorials\\synthetic_audio_dataset_generation.ipynb"], "titles": ["UART Stream Data Test", "Audio Feature Generator", "Audio Utilities", "Keyword Spotting Overview", "classify_audio", "&lt;no title&gt;", "classify_image", "&lt;no title&gt;", "commander", "&lt;no title&gt;", "evaluate", "&lt;no title&gt;", "fingerprint_reader", "&lt;no title&gt;", "Command-Line", "profile", "&lt;no title&gt;", "quantize", "&lt;no title&gt;", "ssh", "&lt;no title&gt;", "summarize", "&lt;no title&gt;", "tensorboard", "&lt;no title&gt;", "train", "&lt;no title&gt;", "update_params", "&lt;no title&gt;", "view", "view_audio", "&lt;no title&gt;", "&lt;no title&gt;", "C++ Build Options", "Command-Line Development", "Audio Classifier", "BLE Audio Classifier", "Fingerprint Authenticator", "Hello World", "Image Classifier", "C++ Examples", "Model Profiler", "C++ Development", "Simplicity Studio Development", "Visual Studio Code Development", "AudioFeatureGenerator Python Wrapper", "C++ Python Wrappers", "MVP Python Wrapper", "Tensorflow-Lite Micro Python Wrapper", "API Examples", "How can I debug my model during training?", "How can I reduce my model\u2019s size?", "How do I run my model on an embedded device?", "Frequently Asked Questions", "Linux: Why isn\u2019t the GPU working?", "Where is my trained model?", "Why does the Keras (.h5) model work during evaluation but the TF-Lite (.tflite) does not?", "Why is the model not returning correct results on the embedded device?", "Windows: I am seeing a DLL error when importing Tensorflow", "Modeling Guides", "Model Archive File", "Model Evaluation", "Model Parameters", "Model Profiler", "Model Profiler Utility", "Model Quantization", "Model Search Path", "Model Specification", "Model Summary", "Model Training", "Model Training Monitor", "Model Training via SSH", "Model Visualizer", "Notebook Examples Guide", "Installation", "Environment Variables", "Quick Reference", "Settings File", "Supported Hardware", "Overview", "audio", "ParallelAudioDataGenerator", "ParallelProcessParams", "AudioFeatureGenerator", "AudioFeatureGeneratorSettings", "image", "ParallelImageDataGenerator", "ParallelProcessParams", "Data Preprocessing", "list_directory", "normalize", "tf_dataset", "Common Utilities", "tflm_magic_wand", "ambient", "brd2601", "esc50", "direction_commands", "ml_commons_keywords", "ml_commons_voice", "speech_commands_v2", "cifar10", "fashion_mnist", "mnist", "rock_paper_scissors_v1", "rock_paper_scissors_v2", "Reference Datasets", "API Reference", "Keras Model", "AudioDatasetMixin", "DatasetMixin", "EvaluateAutoEncoderMixin", "EvaluateClassifierMixin", "EvaluateMixin", "ImageDatasetMixin", "MLTK Model", "MltkDataset", "MltkModel", "MltkModelEvent", "SshMixin", "TrainMixin", "Model Utilities", "WeightsAndBiasesMixin", "Common Model Architectures", "audio_example1", "audio_tf_dataset", "autoencoder_example", "basic_example", "basic_tf_dataset_example", "binary_classification", "conv1d_example", "image_example1", "image_tf_dataset", "Example Models", "siamese_contrastive", "Reference Models", "fingerprint_signature_generator", "Silicon Lab\u2019s Models", "keyword_spotting_alexa", "keyword_spotting_mobilenetv2", "keyword_spotting_on_off", "keyword_spotting_on_off_v2", "keyword_spotting_pacman", "keyword_spotting_pacman_v2", "keyword_spotting_pacman_v3", "keyword_spotting_with_transfer_learning", "rock_paper_scissors", "Tensorflow-Lite Micro Models", "tflite_micro_magic_wand", "tflite_micro_speech", "anomaly_detection", "image_classification", "TinyML Models", "keyword_spotting", "visual_wake_words", "evaluate_model", "Model Operations", "profile_model", "quantize_model", "summarize_model", "train_model", "update_model_parameters", "view_model", "TfliteMicroAccelerator", "Tensorflow-Lite Micro Model", "TfliteMicroLayerError", "TfliteMicroModel", "TfliteMicroModelDetails", "TfliteMicroProfiledLayerResult", "TfliteMicro", "TfliteActivation", "TfliteAddLayer", "TfliteConv2dLayer", "TfliteConv2DLayerOptions", "TfliteConvParams", "TfliteDepthwiseConv2dLayer", "TfliteDepthwiseConv2DLayerOptions", "TfliteDepthwiseConvParams", "TfliteDequantizeLayer", "FlatbufferDictionary", "TfliteFullyConnectedLayer", "TfliteFullyConnectedLayerOptions", "TfliteFullyConnectedParams", "Tensorflow-Lite Model", "TfliteLayer", "TfliteModel", "TflitePadding", "TfliteModelParameters", "TflitePooling2dLayer", "TflitePool2DLayerOptions", "TflitePoolParams", "TfliteQuantization", "TfliteQuantizeLayer", "TfliteReshapeLayer", "TfliteShape", "TfliteTensor", "TfliteTransposeConvLayer", "TfliteTransposeConvLayerOptions", "TfliteTransposeConvParams", "archive", "archive_downloader", "Augmentation", "GenerationConfig", "AudioDatasetGenerator", "Audio Dataset Generator", "Keyword", "Voice", "VoicePitch", "VoiceRate", "bin2header", "cmake", "gpu", "hasher", "Utilities", "JlinkCommandStream", "JLinkDataStream", "J-Link Stream", "JlinkStream", "JlinkStreamOptions", "logger", "path", "ProcessPool", "python", "Serial Reader", "SerialReader", "shell_cmd", "SignalHandler", "string_formatting", "system", "UART Stream", "UartStream", "Tutorials", "Why MLTK?", "Silicon Labs Machine Learning Toolkit (MLTK)", "Model Evaluation API Examples", "Model Profiler API Examples", "Model Quantization API Examples", "Model Summary API Examples", "TF-Lite Micro Model API Examples", "TF-Lite Model API Examples", "Model Training API Examples", "Update Model Parameters API Examples", "Model Visualizer API Examples", "Tutorials", "Add an Existing Script to the MLTK", "Cloud Logging with Weights &amp; Biases", "Cloud Training with vast.ai", "Fingerprint Authentication", "Image Classification - Rock, Paper, Scissors", "Keyword Spotting - Alexa", "Keyword Spotting - On/Off", "Keyword Spotting - Pac-Man", "Keyword Spotting with Transfer Learning", "Model Debugging", "Model Optimization for MVP Hardware Accelerator", "ONNX to TF-Lite Model Conversion", "Synthetic Audio Dataset Generation"], "terms": {"thi": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 89, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 199, 200, 202, 203, 204, 205, 206, 210, 211, 215, 216, 217, 219, 220, 221, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 249, 253, 256], "variou": [0, 1, 2, 19, 20, 34, 42, 49, 59, 60, 61, 62, 67, 69, 70, 71, 72, 78, 79, 92, 96, 107, 115, 118, 119, 122, 127, 128, 132, 135, 137, 139, 140, 142, 144, 145, 146, 155, 213, 231, 232, 239, 243, 244, 247, 248, 249, 250, 251, 253, 254, 255], "input": [0, 1, 8, 9, 10, 11, 35, 36, 41, 56, 61, 62, 63, 65, 67, 80, 81, 86, 90, 109, 110, 111, 112, 113, 114, 117, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 166, 169, 171, 172, 174, 175, 177, 178, 180, 182, 184, 185, 186, 188, 192, 193, 196, 198, 209, 234, 235, 236, 237, 239, 240, 241, 242, 244, 247, 248, 249, 250, 251, 252, 254, 256], "output": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 27, 28, 33, 35, 36, 41, 44, 51, 57, 61, 62, 63, 65, 68, 71, 80, 81, 83, 86, 90, 120, 122, 123, 124, 125, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 160, 161, 166, 169, 171, 172, 174, 175, 177, 178, 180, 182, 184, 185, 186, 187, 188, 192, 193, 196, 198, 203, 209, 225, 235, 237, 239, 241, 242, 246, 247, 248, 250, 251, 254], "featur": [0, 2, 14, 30, 35, 36, 46, 52, 59, 61, 62, 63, 67, 68, 70, 71, 72, 74, 78, 79, 81, 83, 84, 86, 89, 91, 96, 123, 125, 129, 138, 141, 143, 144, 146, 229, 230, 232, 233, 235, 237, 242, 243, 244, 246, 247, 248, 249, 252, 254], "uartstream": [0, 49, 229, 249], "librari": [0, 1, 34, 42, 45, 46, 48, 49, 71, 81, 83, 125, 157, 163, 169, 216, 217, 229, 230, 233, 249, 251], "contain": [0, 1, 14, 25, 26, 27, 28, 42, 50, 55, 57, 66, 67, 68, 69, 71, 75, 76, 81, 86, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 114, 117, 120, 126, 131, 134, 136, 138, 145, 146, 155, 157, 160, 166, 179, 199, 203, 222, 224, 232, 240, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255], "both": [0, 39, 42, 57, 61, 68, 71, 89, 134, 136, 138, 144, 222, 230, 246], "firmwar": [0, 1, 27, 28, 35, 37, 39, 57, 247, 248, 249, 250], "applic": [0, 1, 2, 4, 5, 27, 28, 33, 35, 36, 37, 38, 39, 40, 41, 42, 45, 47, 48, 51, 52, 57, 74, 78, 98, 99, 100, 120, 123, 124, 125, 132, 135, 136, 139, 140, 142, 145, 146, 149, 151, 157, 230, 232, 233, 244, 248, 250, 252, 254, 256], "plu": [0, 48, 138, 139, 140, 141, 142, 143, 144, 145, 250], "python": [0, 2, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 35, 49, 50, 57, 60, 66, 67, 70, 71, 73, 75, 76, 80, 81, 83, 85, 86, 91, 92, 101, 107, 109, 110, 114, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 161, 169, 171, 172, 175, 178, 179, 180, 184, 185, 187, 188, 192, 193, 196, 203, 210, 212, 213, 215, 216, 217, 221, 229, 230, 233, 244, 245, 246, 249, 254, 256], "script": [0, 1, 14, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 35, 42, 45, 46, 47, 48, 50, 57, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 107, 117, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 158, 160, 161, 171, 172, 175, 178, 180, 184, 187, 188, 192, 193, 196, 211, 213, 215, 216, 217, 222, 228, 229, 230, 231, 233, 235, 236, 237, 241, 242, 245, 246, 247, 249, 251, 253, 254, 255, 256], "work": [0, 1, 2, 4, 5, 15, 16, 19, 20, 25, 26, 33, 35, 36, 37, 39, 41, 44, 48, 51, 53, 57, 62, 63, 66, 68, 69, 72, 74, 81, 86, 99, 100, 103, 109, 114, 122, 127, 132, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 216, 225, 229, 232, 235, 240, 241, 242, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256], "togeth": [0, 1, 100, 249], "across": [0, 91, 125, 132, 138, 141, 143, 144, 221, 246, 251, 256], "see": [0, 1, 2, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 44, 49, 52, 53, 57, 59, 61, 62, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 81, 84, 89, 91, 98, 100, 101, 107, 115, 117, 118, 120, 122, 124, 125, 127, 128, 129, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 157, 164, 183, 185, 199, 200, 203, 204, 205, 209, 210, 211, 212, 217, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "sourc": [0, 14, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 57, 71, 74, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 232, 233, 244, 246, 247, 248, 250, 252, 254, 255, 256], "code": [0, 33, 40, 43, 46, 50, 52, 57, 73, 74, 77, 88, 100, 106, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 173, 176, 181, 189, 197, 199, 200, 203, 206, 209, 210, 211, 212, 213, 217, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 235, 238, 239, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256], "exampl": [0, 1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 35, 36, 37, 38, 39, 41, 45, 47, 48, 52, 55, 57, 74, 81, 83, 84, 91, 93, 98, 100, 101, 102, 103, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 137, 139, 140, 141, 142, 143, 145, 146, 148, 149, 155, 157, 158, 159, 160, 161, 162, 185, 227, 230, 232, 243, 244, 248, 249, 250, 251, 252, 254, 255], "github": [0, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 74, 84, 88, 93, 95, 96, 104, 105, 106, 123, 124, 125, 127, 128, 130, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 187, 199, 200, 209, 210, 211, 212, 213, 217, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 233, 235, 237, 238, 239, 241, 242, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256], "cpp": [0, 1, 33, 34, 36, 40, 42, 43, 44, 46, 229, 230], "share": [0, 1, 33, 36, 40, 42, 43, 45, 46, 48, 57, 71, 99, 103, 134, 136, 138, 139, 144, 145, 150, 151, 153, 154, 229, 230, 232, 233, 245, 246, 247, 250, 251, 254], "uart_stream": [0, 213, 229, 230], "data_test": [0, 230], "0": [0, 1, 2, 4, 5, 6, 7, 23, 24, 25, 26, 35, 37, 39, 50, 57, 62, 67, 70, 74, 75, 80, 81, 83, 84, 85, 86, 89, 91, 98, 99, 100, 101, 102, 103, 109, 110, 114, 115, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 160, 162, 166, 169, 170, 171, 172, 174, 175, 177, 178, 180, 182, 184, 185, 186, 188, 190, 192, 193, 194, 196, 198, 201, 204, 205, 211, 214, 221, 227, 228, 229, 230, 235, 237, 238, 239, 241, 242, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "mltk": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 46, 49, 50, 52, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 83, 84, 88, 92, 100, 101, 102, 103, 106, 107, 109, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 169, 183, 185, 199, 200, 204, 209, 210, 211, 212, 213, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 243, 245, 249, 252, 254, 255, 256], "c": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 34, 35, 36, 37, 39, 41, 43, 45, 47, 48, 52, 57, 58, 71, 74, 77, 78, 81, 100, 101, 129, 151, 169, 209, 216, 226, 229, 230, 233, 235, 236, 237, 240, 241, 242, 246, 248, 250, 251, 252, 254, 255], "develop": [0, 1, 4, 6, 7, 12, 13, 14, 15, 16, 36, 40, 45, 46, 47, 48, 57, 61, 62, 69, 71, 77, 78, 95, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 231, 233, 235, 244, 245, 247, 248, 250, 251, 254, 255, 256], "doc": [0, 1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 81, 83, 84, 91, 107, 109, 124, 125, 127, 128, 132, 138, 139, 140, 141, 142, 143, 144, 145, 157, 203, 221, 239, 244, 248, 249, 250, 255, 256], "set": [0, 1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 19, 20, 23, 24, 30, 31, 33, 35, 36, 44, 50, 61, 62, 66, 69, 70, 75, 80, 81, 83, 84, 86, 87, 89, 91, 100, 102, 103, 109, 110, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 158, 168, 169, 179, 185, 187, 215, 219, 220, 228, 232, 233, 236, 239, 241, 244, 247, 256], "up": [0, 1, 2, 35, 36, 43, 62, 67, 69, 74, 81, 84, 97, 100, 124, 125, 132, 138, 139, 140, 141, 142, 143, 144, 145, 153, 200, 223, 230, 231, 246, 249, 250, 251, 252, 254, 255], "your": [0, 1, 2, 4, 5, 23, 24, 30, 31, 34, 35, 36, 37, 39, 41, 43, 44, 49, 50, 52, 56, 64, 67, 69, 72, 73, 74, 77, 86, 100, 109, 110, 114, 120, 122, 123, 124, 125, 129, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 153, 154, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "environ": [0, 1, 19, 20, 50, 66, 73, 74, 77, 91, 100, 107, 119, 141, 143, 220, 221, 225, 233, 244, 246, 248, 249, 251, 256], "note": [0, 1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 19, 20, 23, 24, 27, 28, 30, 31, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 48, 61, 62, 63, 65, 68, 70, 71, 72, 73, 74, 77, 81, 83, 84, 86, 91, 109, 110, 111, 112, 114, 117, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 163, 169, 171, 172, 175, 178, 180, 184, 188, 192, 193, 196, 203, 211, 215, 216, 217, 219, 221, 222, 224, 229, 230, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 247, 249, 251, 252, 253, 254, 255], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 165, 168, 169, 171, 172, 175, 178, 179, 180, 183, 184, 185, 186, 187, 188, 192, 193, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "need": [0, 1, 15, 16, 17, 18, 21, 22, 23, 24, 29, 32, 34, 35, 36, 43, 44, 45, 47, 48, 51, 52, 57, 59, 62, 63, 67, 68, 70, 71, 72, 81, 86, 115, 120, 125, 127, 128, 129, 130, 131, 132, 134, 136, 138, 140, 141, 143, 144, 145, 148, 149, 169, 230, 235, 237, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "built": [0, 1, 2, 4, 5, 6, 7, 12, 13, 34, 35, 36, 37, 38, 39, 41, 43, 44, 52, 57, 63, 67, 68, 69, 72, 74, 118, 121, 123, 125, 132, 141, 143, 157, 158, 159, 163, 233, 235, 237, 242, 244, 247, 248, 249, 250, 251, 252, 255], "embed": [0, 1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 23, 24, 27, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 53, 56, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 76, 78, 79, 127, 128, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 156, 157, 213, 214, 216, 217, 223, 229, 230, 231, 233, 235, 239, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255], "1": [0, 1, 4, 5, 6, 7, 10, 11, 19, 20, 23, 24, 37, 39, 64, 67, 74, 75, 77, 81, 83, 84, 86, 89, 91, 98, 99, 101, 103, 104, 105, 109, 110, 111, 112, 114, 115, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 169, 170, 174, 177, 179, 185, 186, 195, 204, 211, 215, 220, 221, 222, 228, 229, 230, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "connect": [0, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 19, 20, 27, 28, 36, 37, 39, 43, 44, 63, 64, 72, 77, 150, 157, 181, 182, 214, 217, 224, 230, 235, 246, 247, 248, 249, 250, 251, 252, 254], "support": [0, 2, 6, 7, 10, 11, 12, 13, 15, 16, 19, 20, 25, 26, 27, 28, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 48, 52, 57, 58, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 77, 86, 100, 109, 110, 114, 120, 134, 138, 144, 149, 155, 157, 158, 160, 163, 166, 169, 185, 203, 231, 233, 235, 237, 239, 242, 244, 245, 246, 247, 248, 250, 251, 252, 254, 256], "board": [0, 4, 6, 7, 12, 13, 14, 15, 16, 35, 36, 37, 39, 44, 77, 95, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 235, 246, 247, 248, 249, 250, 251, 254], "e": [0, 1, 2, 4, 5, 10, 11, 14, 15, 16, 23, 24, 25, 26, 27, 28, 33, 34, 36, 37, 39, 41, 43, 44, 45, 47, 48, 50, 51, 52, 56, 57, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 78, 81, 83, 84, 86, 89, 91, 100, 101, 102, 103, 109, 110, 114, 115, 116, 117, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 182, 184, 185, 186, 187, 188, 192, 193, 196, 198, 204, 205, 209, 210, 213, 221, 222, 223, 226, 227, 232, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "g": [0, 1, 2, 4, 5, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25, 26, 27, 28, 33, 34, 37, 39, 41, 43, 44, 45, 47, 48, 50, 52, 56, 57, 60, 62, 64, 66, 67, 69, 70, 71, 74, 75, 78, 81, 83, 86, 89, 91, 101, 102, 103, 109, 110, 114, 116, 117, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 160, 169, 170, 179, 186, 187, 204, 205, 209, 213, 222, 223, 226, 227, 241, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256], "brd2601b": 0, "pc": [0, 1, 4, 5, 6, 7, 12, 13, 14, 34, 42, 73, 138, 139, 140, 141, 142, 143, 144, 145, 244, 247, 248, 249, 251, 253, 255], "2": [0, 1, 19, 20, 23, 24, 35, 37, 50, 64, 67, 73, 74, 75, 78, 84, 86, 91, 96, 103, 109, 110, 114, 115, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 168, 170, 187, 204, 211, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "creat": [0, 1, 2, 10, 11, 19, 20, 33, 35, 36, 37, 39, 41, 43, 45, 47, 48, 49, 50, 55, 57, 59, 60, 61, 65, 67, 69, 71, 73, 74, 78, 79, 81, 84, 86, 91, 109, 114, 115, 117, 119, 120, 124, 125, 127, 128, 130, 132, 133, 134, 138, 141, 143, 144, 145, 160, 168, 187, 211, 212, 219, 220, 221, 222, 232, 244, 245, 252, 253, 256], "modifi": [0, 17, 18, 27, 28, 35, 36, 37, 39, 41, 45, 47, 48, 62, 65, 68, 78, 118, 120, 139, 140, 142, 146, 150, 161, 232, 236, 239, 241, 245, 247, 248, 249, 250, 251, 254], "file": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 45, 47, 48, 50, 52, 55, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 94, 97, 98, 99, 100, 101, 103, 104, 105, 109, 114, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 169, 179, 183, 185, 187, 199, 200, 203, 209, 212, 219, 220, 222, 224, 225, 231, 232, 233, 234, 236, 237, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256], "repo": [0, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 52, 78, 154, 163, 169, 229, 230, 249], "root": [0, 19, 20, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 52, 66, 71, 74, 78, 91, 107, 115, 117, 138, 144, 199, 200, 210, 221, 246, 249], "user_opt": [0, 33, 34, 35, 36, 37, 39, 41, 45, 47, 48, 52, 78, 210, 249], "cmake": [0, 33, 38, 42, 78, 249], "add": [0, 2, 27, 28, 33, 34, 35, 36, 37, 39, 41, 44, 45, 47, 48, 50, 52, 57, 61, 65, 67, 69, 70, 81, 82, 84, 87, 89, 91, 117, 120, 124, 125, 127, 128, 129, 131, 132, 134, 136, 138, 139, 141, 142, 143, 144, 145, 146, 149, 151, 158, 161, 169, 171, 185, 186, 187, 210, 219, 220, 221, 231, 245, 247, 249, 251, 252, 253, 254, 255], "follow": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 39, 40, 41, 42, 43, 44, 46, 51, 54, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 88, 89, 91, 92, 107, 109, 110, 111, 112, 113, 114, 115, 116, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 164, 168, 183, 187, 204, 213, 216, 220, 223, 229, 231, 232, 233, 234, 235, 238, 239, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "mltk_set": [0, 33, 35, 36, 37, 39, 41, 44, 45, 47, 48, 52, 78, 249], "mltk_target": [0, 45, 47, 48, 210], "mltk_uart_stream_data_test": 0, "mltk_platform_nam": [0, 44, 78, 249], "brd2601": [0, 33, 36, 37, 39, 44, 138, 141, 143, 144, 235, 248, 249, 250, 251, 252], "chang": [0, 27, 28, 35, 36, 56, 64, 67, 69, 70, 71, 86, 91, 99, 100, 120, 122, 134, 138, 139, 140, 142, 144, 145, 146, 185, 225, 239, 244, 245, 246, 248, 249, 250, 252, 254, 255, 256], "platform": [0, 2, 33, 36, 41, 42, 43, 44, 78, 157, 204, 210, 233, 235, 247, 248, 249, 250, 251], "": [0, 1, 4, 5, 6, 7, 8, 10, 11, 14, 15, 16, 17, 18, 21, 22, 23, 24, 27, 28, 29, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 50, 52, 53, 56, 57, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 81, 83, 84, 86, 91, 95, 98, 99, 100, 107, 109, 110, 114, 117, 119, 120, 121, 122, 124, 125, 126, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 161, 163, 165, 166, 168, 169, 171, 172, 175, 178, 179, 180, 184, 185, 187, 188, 192, 193, 196, 200, 203, 206, 212, 219, 220, 221, 222, 225, 227, 230, 231, 233, 235, 236, 237, 239, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "name": [0, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 49, 50, 52, 55, 59, 60, 62, 63, 66, 68, 69, 70, 71, 75, 77, 78, 81, 86, 89, 91, 100, 107, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 171, 172, 175, 178, 179, 180, 184, 185, 187, 188, 192, 193, 196, 200, 203, 206, 209, 210, 215, 217, 219, 220, 221, 222, 224, 228, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256], "necessari": [0, 1, 34, 41, 43, 44, 50, 70, 71, 73, 74, 80, 81, 83, 114, 120, 121, 125, 126, 129, 131, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 153, 154, 185, 203, 220, 221, 222, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 249, 251, 254, 255, 256], "3": [0, 1, 4, 5, 19, 20, 35, 37, 67, 73, 74, 75, 86, 98, 101, 103, 114, 117, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 170, 211, 222, 227, 236, 240, 244, 246, 247, 248, 250, 251, 252, 254, 255], "invok": [0, 1, 19, 20, 45, 46, 61, 62, 63, 65, 67, 69, 70, 71, 91, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 141, 143, 144, 146, 155, 166, 169, 185, 203, 210, 221, 224, 225, 232, 244, 246, 247, 248, 249, 250, 252, 253], "target": [0, 1, 4, 5, 8, 9, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 59, 62, 63, 64, 80, 81, 86, 109, 110, 114, 120, 210, 231, 233, 246, 248, 249, 250, 251, 254, 255], "mltk_uart_stream_data_test_download": 0, "which": [0, 1, 6, 7, 12, 13, 15, 16, 23, 24, 25, 26, 30, 31, 35, 36, 37, 39, 41, 42, 44, 46, 47, 50, 51, 52, 55, 57, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 74, 81, 86, 89, 91, 99, 100, 103, 109, 110, 114, 117, 120, 123, 124, 125, 129, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 160, 179, 185, 187, 215, 221, 224, 228, 230, 232, 234, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "build": [0, 15, 16, 17, 18, 21, 22, 27, 28, 29, 32, 42, 43, 52, 63, 67, 68, 69, 72, 74, 78, 99, 118, 120, 121, 123, 125, 126, 127, 128, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 157, 158, 159, 162, 210, 232, 233, 235, 237, 242, 244, 245, 246, 248, 250, 254, 256], "program": [0, 4, 5, 6, 7, 12, 13, 27, 28, 35, 37, 39, 44, 52, 60, 65, 67, 69, 70, 76, 141, 143, 247, 248, 249, 250, 251, 252, 256], "4": [0, 19, 20, 37, 39, 64, 74, 75, 81, 86, 91, 98, 100, 103, 114, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 170, 203, 211, 238, 240, 241, 244, 246, 248, 249, 250, 251, 252, 254, 255, 256], "run": [0, 1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 25, 26, 33, 46, 47, 48, 49, 50, 53, 55, 58, 59, 60, 61, 62, 63, 65, 71, 73, 74, 75, 81, 86, 100, 107, 109, 110, 111, 112, 113, 114, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 167, 169, 185, 216, 217, 219, 221, 228, 229, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 245, 246, 256], "from": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 57, 58, 60, 61, 62, 63, 64, 65, 68, 69, 72, 73, 74, 80, 81, 82, 83, 84, 86, 87, 94, 96, 98, 100, 101, 103, 109, 110, 114, 115, 117, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 142, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 160, 161, 164, 168, 169, 171, 172, 175, 178, 180, 183, 184, 185, 187, 188, 192, 193, 196, 199, 200, 204, 205, 209, 211, 213, 215, 216, 217, 219, 221, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 253, 254, 256], "virtual": [0, 19, 20, 50, 71, 73, 74, 119, 244, 246, 248, 249, 250, 253], "py": [0, 1, 2, 17, 18, 27, 28, 30, 31, 35, 36, 43, 44, 50, 55, 60, 61, 66, 67, 69, 74, 75, 100, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 158, 159, 160, 162, 199, 200, 204, 209, 210, 211, 212, 216, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 235, 236, 237, 240, 242, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "verifi": [0, 8, 9, 74, 200, 239, 246, 248, 249, 250, 256], "transfer": [0, 137, 145, 213, 215, 216, 217, 230, 231, 250], "between": [0, 4, 5, 6, 7, 42, 45, 46, 57, 61, 81, 86, 91, 109, 110, 114, 123, 127, 128, 129, 134, 136, 138, 139, 141, 142, 143, 144, 155, 213, 216, 217, 224, 229, 230, 232, 233, 234, 244, 247, 248, 250, 251, 254], "dev": [0, 2, 34, 43, 44, 71, 78, 138, 141, 142, 143, 144, 249, 251], "us": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 91, 96, 98, 99, 100, 102, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 163, 166, 168, 169, 172, 175, 179, 180, 183, 185, 187, 196, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 219, 221, 222, 224, 225, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 251, 253, 254, 255, 256], "audiofeaturegener": [1, 4, 5, 30, 31, 42, 57, 62, 80, 81, 84, 88, 109, 117, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149], "i": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 53, 54, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 83, 84, 85, 86, 89, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 166, 168, 169, 171, 172, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "softwar": [1, 43, 44, 51, 62, 123, 153, 233, 246, 255], "convert": [1, 2, 8, 9, 35, 36, 37, 39, 41, 46, 52, 56, 57, 61, 68, 69, 76, 80, 81, 83, 84, 85, 86, 88, 90, 91, 96, 98, 99, 100, 114, 118, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 154, 185, 210, 222, 224, 227, 231, 232, 233, 235, 236, 237, 239, 240, 242, 244, 249, 251, 252, 256], "stream": [1, 2, 4, 5, 35, 49, 62, 84, 138, 139, 141, 143, 213, 214, 215, 217, 219, 230, 232, 233, 249, 250, 251, 254], "spectrogram": [1, 4, 5, 14, 30, 31, 42, 45, 46, 57, 62, 80, 81, 83, 84, 88, 109, 123, 125, 138, 139, 140, 141, 142, 143, 144, 145, 149, 232, 233, 247, 248, 249, 251, 254], "ar": [1, 2, 4, 5, 6, 7, 10, 11, 14, 17, 18, 19, 20, 25, 26, 27, 28, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 48, 49, 52, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 81, 83, 84, 86, 88, 89, 91, 92, 97, 98, 99, 100, 101, 102, 106, 109, 110, 114, 115, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 152, 155, 156, 157, 161, 168, 169, 179, 185, 187, 203, 204, 213, 220, 221, 222, 232, 233, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "classif": [1, 4, 5, 6, 7, 12, 13, 35, 36, 57, 67, 112, 115, 124, 125, 127, 128, 129, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 151, 152, 153, 154, 155, 231, 233, 244, 247, 249, 250, 251, 252, 254, 255], "machin": [1, 3, 19, 20, 23, 24, 35, 36, 37, 51, 59, 62, 67, 69, 71, 72, 78, 79, 99, 100, 119, 125, 132, 138, 141, 143, 144, 231, 232, 244, 245, 249, 252, 253, 254, 255, 256], "learn": [1, 3, 23, 24, 34, 35, 36, 37, 43, 44, 51, 59, 62, 67, 69, 70, 71, 72, 78, 79, 99, 100, 120, 124, 125, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 153, 154, 231, 232, 244, 245, 246, 249, 253, 254, 255, 256], "model": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 40, 42, 45, 46, 47, 48, 49, 53, 73, 74, 75, 77, 79, 81, 84, 86, 88, 91, 98, 99, 100, 106, 107, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, 155, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 171, 172, 175, 178, 179, 180, 184, 185, 187, 188, 192, 193, 195, 196, 220, 223, 231, 233, 244, 245, 256], "make": [1, 14, 27, 28, 45, 47, 48, 51, 61, 67, 100, 123, 125, 127, 128, 129, 134, 138, 141, 143, 144, 145, 219, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256], "predict": [1, 61, 81, 86, 111, 112, 113, 134, 136, 155, 185, 232, 234, 239, 247, 248, 250, 251, 252, 254, 255], "content": [1, 8, 9, 36, 71, 76, 98, 120, 166, 209, 232, 233, 253, 255], "A": [1, 2, 6, 7, 12, 13, 23, 24, 36, 37, 39, 41, 44, 51, 60, 61, 65, 70, 71, 73, 81, 84, 86, 89, 91, 100, 109, 110, 114, 117, 118, 120, 122, 123, 124, 125, 127, 128, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 159, 166, 179, 183, 185, 206, 225, 230, 232, 235, 238, 239, 244, 246, 247, 248, 249, 250, 251, 255, 256], "common": [1, 2, 33, 35, 36, 51, 57, 62, 65, 67, 76, 88, 91, 96, 100, 103, 107, 135, 138, 139, 140, 142, 145, 146, 222, 236, 241, 247, 248, 249, 250, 254, 255], "case": [1, 4, 5, 6, 7, 12, 13, 21, 22, 39, 51, 57, 62, 65, 67, 69, 80, 81, 84, 85, 86, 98, 109, 110, 114, 116, 120, 123, 126, 138, 141, 145, 150, 155, 168, 169, 185, 187, 200, 205, 210, 220, 222, 236, 241, 246, 248, 249, 250, 252, 253, 256], "keyword": [1, 2, 4, 5, 10, 11, 17, 18, 25, 26, 35, 36, 40, 65, 97, 100, 117, 118, 120, 123, 124, 125, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 149, 152, 153, 155, 202, 203, 204, 206, 213, 222, 231, 246, 247, 248, 256], "spot": [1, 2, 4, 5, 35, 36, 98, 123, 137, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 231, 246, 254, 256], "refer": [1, 2, 4, 5, 6, 7, 12, 13, 15, 16, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 49, 52, 56, 58, 64, 67, 73, 74, 80, 81, 83, 91, 108, 109, 110, 111, 112, 113, 114, 116, 117, 120, 134, 136, 149, 150, 152, 154, 157, 166, 169, 171, 172, 175, 178, 180, 184, 185, 188, 191, 192, 193, 195, 196, 203, 219, 222, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256], "more": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 49, 51, 52, 56, 57, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 84, 86, 89, 91, 98, 100, 101, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 127, 128, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 157, 158, 164, 183, 185, 191, 203, 204, 221, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "detail": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 49, 52, 56, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 84, 89, 91, 98, 100, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 120, 127, 128, 136, 141, 143, 144, 145, 150, 155, 157, 166, 167, 185, 191, 200, 203, 204, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "how": [1, 2, 3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 34, 35, 36, 37, 38, 39, 41, 43, 44, 49, 53, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 71, 72, 73, 74, 79, 86, 91, 109, 110, 114, 117, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256], "detect": [1, 2, 3, 4, 5, 6, 7, 35, 36, 37, 39, 40, 61, 62, 83, 84, 98, 123, 124, 125, 126, 131, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 152, 154, 226, 231, 234, 237, 242, 247, 248, 249, 251, 254, 256], "tutori": [1, 2, 6, 7, 12, 13, 35, 36, 37, 39, 59, 61, 69, 71, 73, 97, 122, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 203, 204, 232, 244, 245, 246, 249, 253, 256], "complet": [1, 2, 17, 18, 19, 20, 25, 26, 55, 59, 61, 62, 64, 65, 67, 69, 71, 74, 76, 124, 136, 138, 141, 143, 144, 160, 203, 221, 223, 236, 237, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 254], "guid": [1, 2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 36, 37, 39, 41, 43, 44, 49, 54, 61, 62, 63, 64, 69, 74, 77, 84, 110, 111, 112, 113, 117, 120, 125, 127, 128, 132, 134, 136, 138, 141, 143, 144, 145, 155, 157, 158, 159, 160, 161, 162, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255], "an": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 23, 24, 25, 26, 29, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 48, 49, 53, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 73, 74, 76, 77, 79, 80, 81, 84, 85, 86, 89, 91, 95, 96, 109, 110, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 155, 156, 157, 160, 162, 168, 169, 170, 179, 186, 187, 200, 205, 210, 212, 213, 217, 220, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 247, 248, 249, 250, 251, 252, 253, 255, 256], "ml": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 25, 26, 59, 61, 65, 68, 69, 72, 123, 126, 131, 136, 138, 144, 146, 153, 157, 231, 232, 233, 244, 247, 248, 250, 251, 254, 256], "There": [1, 52, 57, 71, 138, 144, 221, 233, 246, 247, 248, 249, 250, 251, 252], "three": [1, 39, 42, 63, 71, 74, 91, 100, 145, 221, 231, 250, 252], "main": [1, 43, 81, 93, 139, 140, 142, 145, 148, 209, 221, 250, 251, 255], "part": [1, 47, 74, 81, 98, 100, 109, 110, 114, 138, 139, 141, 143, 244, 247, 248, 249, 250, 252, 255, 256], "provid": [1, 2, 3, 4, 5, 10, 11, 14, 15, 16, 19, 20, 21, 22, 23, 24, 27, 28, 29, 32, 45, 48, 49, 59, 63, 66, 67, 68, 70, 71, 73, 76, 79, 80, 83, 84, 86, 89, 91, 94, 96, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 163, 166, 168, 179, 187, 203, 204, 205, 212, 224, 231, 233, 243, 244, 247, 248, 249, 250, 251, 254, 255, 256], "packag": [1, 2, 33, 34, 43, 45, 47, 48, 66, 71, 73, 75, 81, 107, 125, 138, 139, 140, 141, 142, 143, 144, 145, 164, 183, 203, 204, 213, 216, 221, 222, 229, 233, 244, 245, 246, 249, 254, 255, 256], "wrap": [1, 64, 86, 169, 222], "host": [1, 19, 20, 23, 24, 29, 32, 33, 42, 44, 46, 64, 162, 232, 246], "graphic": [1, 2, 61, 245], "view": [1, 12, 13, 14, 17, 18, 23, 24, 30, 31, 32, 35, 36, 37, 38, 39, 41, 44, 49, 59, 70, 74, 76, 84, 124, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 156, 162, 168, 187, 232, 233, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "real": [1, 2, 4, 5, 14, 30, 31, 40, 61, 62, 84, 86, 232, 248, 249, 250, 251, 254], "time": [1, 2, 4, 5, 6, 7, 14, 15, 16, 30, 31, 35, 37, 40, 51, 61, 62, 63, 67, 68, 69, 70, 72, 73, 81, 84, 86, 100, 109, 110, 114, 123, 124, 125, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 156, 157, 162, 168, 169, 187, 203, 215, 219, 220, 221, 222, 223, 224, 227, 230, 231, 232, 233, 235, 237, 239, 242, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256], "document": [1, 2, 7, 13, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 52, 59, 61, 69, 70, 71, 73, 83, 108, 109, 110, 122, 145, 233, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255], "about": [1, 14, 34, 35, 36, 39, 42, 43, 44, 48, 59, 63, 65, 68, 70, 71, 81, 120, 138, 139, 140, 141, 142, 143, 144, 145, 146, 166, 215, 237, 245, 247, 249, 252], "tool": [1, 23, 24, 35, 36, 37, 39, 41, 42, 52, 70, 71, 72, 100, 231, 233, 244, 247, 248, 249, 250, 251, 253, 254, 255, 256], "offer": [1, 2, 74, 92, 232, 233, 243, 244, 246, 248, 250, 251, 254, 256], "These": [1, 35, 36, 47, 49, 51, 52, 62, 67, 69, 77, 92, 100, 117, 120, 124, 125, 127, 128, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 232, 235, 236, 237, 240, 242, 243, 244, 246, 247, 248, 249, 250, 251, 256], "select": [1, 33, 35, 36, 37, 38, 39, 41, 43, 50, 64, 73, 81, 86, 89, 91, 96, 109, 110, 114, 138, 144, 185, 242, 248, 253], "view_audio": [1, 2, 14, 31, 139, 140, 142, 145, 247, 248, 249, 250, 251, 254], "command": [1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 16, 19, 20, 23, 24, 27, 28, 30, 31, 42, 43, 44, 50, 54, 55, 59, 60, 64, 66, 70, 73, 74, 78, 84, 107, 111, 115, 117, 119, 120, 122, 210, 214, 220, 225, 229, 230, 231, 233, 235, 237, 242, 245, 246, 252, 253, 254], "save": [1, 12, 13, 25, 26, 37, 39, 69, 80, 81, 85, 86, 89, 109, 114, 118, 120, 122, 124, 134, 136, 141, 143, 185, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 248, 251, 252, 255], "specif": [1, 8, 9, 14, 19, 20, 25, 26, 30, 31, 33, 37, 39, 41, 44, 49, 50, 55, 57, 59, 60, 63, 65, 66, 68, 70, 71, 72, 74, 77, 84, 107, 110, 111, 112, 115, 117, 119, 121, 123, 133, 135, 155, 157, 158, 160, 169, 171, 172, 174, 175, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 192, 193, 196, 198, 232, 233, 235, 236, 237, 239, 240, 242, 243, 244, 245, 247, 249, 251, 253, 255], "train": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 35, 36, 42, 45, 46, 49, 51, 52, 53, 54, 57, 59, 60, 61, 62, 65, 66, 73, 74, 76, 77, 81, 86, 88, 89, 93, 98, 99, 100, 101, 102, 103, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 139, 140, 142, 144, 145, 146, 148, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 206, 231, 233, 234, 236, 239, 241, 244, 253, 255, 256], "intern": [1, 2, 43, 44, 57, 69, 70, 71, 81, 83, 86, 96, 117, 122, 139, 140, 142, 145, 155, 158, 221, 240, 245, 249, 250], "dynam": [1, 35, 41, 62, 67, 69, 83, 84, 125, 138, 141, 142, 143, 144, 246, 248, 249, 250, 251, 252], "dataset": [1, 6, 7, 10, 11, 12, 13, 25, 26, 57, 65, 69, 71, 76, 77, 81, 86, 89, 91, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 114, 115, 116, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 146, 148, 155, 203, 213, 231, 237, 239, 242, 244, 245, 252, 254], "At": [1, 35, 36, 43, 62, 67, 69, 73, 99, 120, 125, 127, 128, 132, 138, 139, 141, 143, 144, 187, 239, 244, 246, 248, 249, 250, 252, 256], "end": [1, 27, 28, 35, 37, 39, 41, 52, 61, 65, 67, 69, 80, 85, 100, 109, 110, 114, 117, 118, 120, 122, 127, 128, 132, 138, 139, 141, 150, 153, 231, 232, 244, 246, 248, 250, 252, 253, 254, 256], "emb": [1, 59, 62, 232, 233, 245, 248, 250], "tflite": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 29, 32, 33, 35, 36, 37, 39, 40, 41, 47, 48, 52, 53, 55, 57, 60, 62, 63, 64, 67, 68, 69, 72, 74, 75, 84, 93, 107, 115, 117, 118, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 155, 157, 158, 159, 161, 162, 163, 164, 166, 169, 171, 172, 173, 175, 176, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 192, 193, 195, 196, 197, 231, 232, 237, 241, 242, 244, 247, 248, 249, 250, 251, 254, 255], "copi": [1, 19, 20, 35, 36, 37, 39, 41, 43, 52, 71, 74, 84, 86, 100, 138, 139, 141, 143, 144, 166, 168, 187, 202, 211, 220, 244, 246, 247, 248, 250, 251, 254, 256], "project": [1, 23, 24, 35, 36, 37, 38, 39, 41, 43, 45, 47, 48, 52, 70, 96, 122, 210, 232, 248, 250, 254], "pars": [1, 67, 232], "correspond": [1, 2, 4, 5, 33, 37, 62, 71, 81, 86, 89, 91, 101, 102, 103, 109, 110, 114, 117, 120, 121, 124, 125, 126, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 149, 155, 159, 160, 203, 204, 222, 230, 232, 247, 248, 249, 250, 251, 255, 256], "header": [1, 8, 9, 37, 39, 41, 157, 209, 249, 250], "imag": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 24, 40, 57, 61, 67, 70, 81, 82, 83, 86, 87, 88, 91, 101, 102, 103, 104, 105, 109, 114, 117, 120, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 141, 143, 144, 146, 150, 151, 152, 153, 154, 155, 231, 234, 237, 239, 242, 244, 247, 249, 250, 251, 252, 255], "load": [1, 2, 4, 5, 10, 11, 15, 16, 17, 18, 21, 22, 25, 26, 29, 32, 33, 35, 41, 45, 47, 48, 50, 52, 58, 60, 67, 69, 76, 81, 86, 89, 91, 100, 101, 102, 103, 104, 105, 109, 110, 114, 116, 117, 118, 120, 121, 123, 125, 126, 127, 128, 132, 134, 136, 138, 139, 141, 142, 143, 144, 145, 153, 155, 157, 158, 159, 160, 162, 166, 167, 169, 183, 185, 187, 203, 204, 209, 222, 223, 232, 235, 236, 237, 240, 242, 244, 246, 247, 250, 254, 256], "onto": [1, 60, 64, 246, 247, 250, 255], "tensorflow": [1, 15, 16, 23, 24, 33, 35, 36, 39, 41, 42, 44, 46, 47, 52, 53, 54, 59, 61, 62, 63, 69, 70, 74, 75, 80, 85, 91, 100, 103, 107, 108, 109, 110, 114, 118, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 158, 160, 185, 187, 211, 221, 231, 233, 235, 236, 238, 239, 240, 241, 244, 246, 248, 249, 250, 251, 255], "lite": [1, 15, 16, 21, 22, 33, 35, 36, 39, 41, 42, 46, 47, 49, 52, 53, 57, 61, 62, 63, 69, 107, 118, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 157, 163, 166, 167, 169, 187, 231, 233, 235, 236, 240, 241, 244, 251], "micro": [1, 15, 16, 33, 35, 36, 39, 41, 42, 46, 47, 49, 52, 62, 63, 65, 67, 69, 76, 81, 83, 107, 132, 135, 148, 149, 163, 166, 167, 169, 237, 239, 241, 242, 244, 250, 251, 255], "interpret": [1, 39, 41, 42, 46, 48, 50, 52, 65, 73, 76, 107, 132, 134, 163, 164, 166, 167, 169, 185, 221, 232, 250, 253], "On": [1, 4, 5, 6, 7, 12, 13, 35, 37, 39, 43, 71, 77, 100, 137, 140, 141, 231, 246, 248], "runtim": [1, 2, 35, 36, 41, 45, 47, 48, 57, 62, 63, 77, 120, 124, 126, 127, 128, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 167, 235, 237, 238, 241, 242, 244, 247, 248, 250, 251, 254, 255], "read": [1, 8, 9, 15, 16, 37, 39, 75, 80, 81, 83, 85, 98, 99, 107, 125, 127, 128, 132, 138, 141, 143, 144, 213, 215, 217, 223, 224, 229, 230, 244, 247, 248, 250, 255], "microphon": [1, 4, 5, 14, 35, 36, 40, 62, 67, 95, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 149, 232, 248, 249, 250, 251, 254], "b": [1, 17, 18, 21, 22, 29, 32, 34, 71, 81, 84, 127, 128, 129, 131, 134, 136, 146, 239, 244, 245, 246], "sent": [1, 36, 203, 215, 230, 246, 249, 250, 251, 256], "where": [1, 12, 13, 14, 17, 18, 19, 20, 27, 28, 35, 36, 37, 39, 41, 52, 53, 60, 64, 65, 70, 71, 77, 81, 86, 89, 91, 99, 100, 117, 118, 124, 126, 131, 134, 136, 138, 144, 146, 155, 157, 166, 179, 187, 199, 200, 203, 204, 245, 246, 247, 255, 256], "exact": [1, 45, 57, 68, 81, 86, 149, 232, 246, 247, 250, 255], "same": [1, 10, 11, 17, 18, 23, 24, 25, 26, 35, 36, 37, 39, 45, 55, 57, 61, 65, 67, 69, 70, 86, 89, 100, 109, 110, 114, 115, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 185, 186, 199, 206, 222, 232, 234, 235, 237, 238, 239, 241, 244, 246, 247, 248, 249, 250, 251, 254, 255, 256], "algorithm": [1, 42, 45, 46, 57, 61, 139, 140, 142, 145, 146, 200, 212, 232, 247, 248, 250, 251], "were": [1, 47, 57, 61, 100, 117, 120, 141, 143, 147, 150, 157, 224, 232, 235, 236, 237, 239, 240, 242, 248, 249, 250, 251, 254, 255], "dure": [1, 10, 11, 17, 18, 23, 24, 25, 26, 33, 42, 53, 54, 57, 60, 62, 67, 70, 81, 88, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 125, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 155, 224, 231, 232, 245, 246, 248, 249, 250, 251, 252, 253, 255], "classifi": [1, 4, 5, 6, 7, 14, 40, 52, 61, 62, 67, 96, 109, 114, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 232, 237, 242, 247, 248, 251, 252, 254, 255], "d": [1, 4, 5, 12, 13, 15, 16, 27, 28, 81, 84, 86, 125, 132, 138, 141, 143, 144, 168, 187, 222, 227, 230, 250, 256], "notifi": [1, 36, 40, 245], "also": [1, 2, 4, 5, 19, 20, 27, 28, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 49, 51, 55, 57, 60, 61, 62, 63, 65, 67, 68, 70, 71, 72, 74, 78, 80, 81, 91, 96, 99, 100, 115, 120, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 158, 169, 222, 229, 232, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "ensur": [1, 14, 25, 26, 34, 43, 44, 54, 56, 58, 69, 70, 71, 74, 89, 100, 109, 110, 114, 124, 125, 131, 132, 138, 139, 140, 141, 142, 143, 144, 146, 149, 169, 230, 232, 239, 240, 244, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256], "type": [1, 39, 50, 56, 62, 63, 65, 67, 68, 75, 80, 81, 83, 84, 85, 86, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 109, 110, 111, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 209, 210, 211, 212, 214, 215, 217, 219, 220, 221, 222, 224, 225, 227, 228, 230, 234, 235, 237, 238, 239, 241, 242, 244, 246, 247, 248, 250, 251, 252, 254, 255, 256], "wa": [1, 4, 5, 19, 20, 35, 36, 37, 61, 62, 63, 71, 83, 91, 100, 118, 122, 134, 136, 138, 140, 141, 143, 144, 145, 146, 151, 153, 157, 163, 168, 185, 193, 215, 224, 232, 234, 239, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "should": [1, 2, 6, 7, 10, 11, 12, 13, 37, 39, 43, 44, 50, 57, 61, 62, 65, 66, 67, 69, 70, 71, 73, 74, 75, 81, 84, 86, 89, 91, 100, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 127, 128, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 155, 157, 158, 204, 217, 221, 230, 232, 237, 242, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "allow": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 19, 20, 25, 26, 27, 28, 30, 31, 33, 39, 41, 42, 45, 46, 47, 48, 52, 57, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 81, 85, 86, 88, 89, 91, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 160, 163, 164, 169, 179, 183, 187, 204, 213, 216, 217, 221, 222, 223, 229, 230, 231, 232, 239, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256], "better": [1, 67, 70, 120, 138, 139, 140, 141, 142, 143, 144, 145, 146, 244, 246, 247, 248, 249, 250, 251, 252, 254, 256], "perform": [1, 10, 11, 14, 35, 36, 40, 41, 61, 65, 86, 96, 99, 109, 110, 114, 120, 125, 127, 128, 132, 139, 140, 142, 145, 155, 185, 244, 247, 248, 249, 250, 251, 252, 254, 256], "automat": [1, 4, 5, 6, 7, 12, 13, 15, 16, 17, 18, 23, 24, 33, 35, 36, 37, 39, 41, 44, 51, 52, 57, 60, 65, 67, 70, 71, 81, 85, 86, 89, 91, 109, 110, 114, 116, 117, 120, 122, 125, 127, 128, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 157, 158, 185, 200, 203, 209, 211, 212, 221, 224, 232, 244, 245, 246, 247, 248, 249, 250], "lock": [1, 221, 232], "step": [1, 33, 44, 50, 62, 71, 73, 74, 81, 84, 86, 109, 110, 111, 112, 113, 114, 120, 122, 136, 138, 139, 140, 141, 142, 143, 144, 145, 185, 232, 245, 247, 248, 249, 250, 251, 252, 253, 254], "design": [1, 35, 36, 37, 100, 127, 137, 138, 139, 140, 141, 142, 143, 144, 145, 232, 247, 248, 250, 251, 252, 254, 255], "onli": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 19, 20, 27, 28, 33, 35, 36, 37, 39, 41, 44, 57, 62, 63, 65, 67, 68, 71, 72, 75, 80, 81, 86, 89, 91, 100, 109, 110, 111, 112, 114, 116, 120, 122, 123, 125, 127, 128, 129, 132, 136, 138, 139, 140, 141, 143, 144, 145, 150, 155, 157, 158, 161, 169, 185, 186, 200, 203, 205, 210, 215, 220, 228, 230, 233, 235, 237, 239, 241, 242, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "distribut": [1, 59, 60, 62, 71, 86, 232, 233, 246, 252, 255], "singl": [1, 33, 44, 50, 60, 81, 86, 100, 185, 221, 222, 246, 253, 256], "come": [1, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 64, 67, 70, 106, 135, 139, 142, 171, 172, 175, 178, 180, 184, 188, 192, 193, 196, 213, 244, 246, 248, 250, 253, 254, 255], "full": [1, 34, 43, 44, 71, 74, 77, 98, 100, 120, 136, 138, 139, 165, 182, 210, 220, 246, 247, 249, 256], "larg": [1, 23, 24, 51, 70, 71, 81, 86, 98, 120, 124, 125, 132, 138, 141, 143, 144, 155, 246, 249, 250, 251, 254, 256], "base": [1, 12, 13, 29, 32, 35, 36, 39, 44, 63, 64, 67, 69, 76, 81, 86, 100, 109, 110, 111, 112, 113, 114, 119, 120, 122, 123, 126, 127, 138, 139, 140, 141, 143, 144, 145, 154, 155, 185, 202, 203, 204, 205, 209, 220, 244, 246, 248, 249, 250, 251, 256], "googl": [1, 2, 45, 49, 59, 62, 69, 124, 138, 139, 140, 141, 142, 143, 144, 145, 179, 203, 204, 232, 233, 243, 246, 247, 248, 249, 250, 251, 252, 254, 255], "microfrontend": [1, 45, 83, 141, 143, 150, 153], "call": [1, 19, 20, 35, 36, 57, 61, 70, 81, 83, 86, 98, 109, 110, 114, 116, 117, 118, 122, 123, 125, 127, 128, 132, 134, 136, 138, 141, 143, 144, 155, 168, 169, 183, 185, 203, 211, 217, 221, 230, 232, 239, 244, 245, 247, 248, 250, 253, 255], "frontend": [1, 81, 83, 130, 139, 142, 255], "receiv": [1, 37, 61, 155, 214, 215, 224, 229, 230, 246, 249], "raw": [1, 4, 5, 6, 7, 12, 13, 35, 51, 57, 81, 83, 88, 95, 104, 105, 130, 136, 138, 141, 142, 143, 144, 150, 153, 235, 237, 238, 239, 241, 242, 247, 248, 249, 250, 252], "produc": [1, 61, 129, 134, 136, 247, 248], "filter": [1, 33, 35, 36, 62, 65, 67, 69, 84, 123, 124, 125, 129, 130, 131, 134, 136, 138, 140, 141, 142, 143, 144, 146, 148, 149, 151, 153, 154, 172, 174, 175, 177, 182, 189, 196, 198, 235, 237, 238, 239, 241, 247, 248, 249, 250, 251, 252, 254, 255], "bank": 1, "vector": [1, 127, 129, 131, 134, 136, 146, 185, 244, 247, 248, 254, 255], "valu": [1, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 27, 28, 35, 41, 47, 51, 61, 62, 67, 69, 71, 81, 83, 84, 86, 90, 101, 103, 109, 110, 111, 112, 113, 114, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 155, 157, 160, 166, 168, 169, 171, 172, 174, 175, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 192, 193, 194, 196, 198, 201, 204, 205, 206, 215, 219, 220, 222, 227, 239, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256], "expect": [1, 14, 39, 56, 61, 80, 110, 114, 116, 117, 123, 130, 136, 138, 139, 142, 144, 150, 155, 235, 236, 237, 240, 242, 248, 250, 251, 255], "16": [1, 39, 62, 84, 97, 100, 120, 123, 124, 125, 126, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 154, 203, 235, 237, 238, 239, 241, 242, 246, 248, 249, 250, 251, 254, 255, 256], "bit": [1, 34, 39, 43, 44, 62, 84, 97, 100, 203, 230, 248, 250], "pcm": [1, 97, 98, 99, 100, 203], "configur": [1, 19, 20, 23, 24, 25, 26, 33, 35, 36, 37, 39, 41, 45, 47, 48, 50, 59, 62, 63, 65, 67, 69, 77, 81, 83, 86, 90, 110, 116, 120, 122, 127, 128, 130, 132, 138, 139, 140, 141, 142, 143, 144, 145, 150, 153, 154, 157, 202, 203, 204, 210, 217, 218, 244, 245, 249, 256], "sampl": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 23, 24, 35, 51, 57, 61, 62, 65, 67, 70, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 116, 118, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 185, 201, 202, 205, 206, 207, 208, 232, 237, 239, 242, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "rate": [1, 44, 62, 63, 80, 83, 84, 91, 96, 100, 109, 120, 124, 125, 126, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 201, 202, 204, 208, 224, 230, 235, 238, 245, 248, 250, 251, 252, 254, 255, 256], "signal": [1, 2, 62, 84, 136, 138, 144, 226, 228, 249, 250, 251], "goe": [1, 35, 36, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 248, 250, 254], "through": [1, 10, 11, 12, 13, 37, 50, 61, 62, 80, 81, 96, 138, 139, 140, 141, 142, 143, 144, 145, 146, 170, 185, 239, 245, 247, 248, 249, 250, 252, 254, 255], "pre": [1, 2, 15, 16, 17, 18, 21, 22, 29, 32, 37, 74, 88, 107, 109, 114, 123, 124, 125, 126, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 231, 232, 233, 247, 248, 249, 250, 251, 252, 255], "emphasi": 1, "option": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 39, 41, 43, 45, 47, 48, 50, 52, 61, 62, 63, 65, 67, 68, 69, 70, 72, 74, 75, 77, 78, 80, 81, 85, 86, 89, 90, 91, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 166, 169, 171, 172, 173, 175, 176, 178, 179, 180, 181, 184, 185, 187, 188, 189, 191, 192, 193, 195, 196, 197, 199, 200, 202, 203, 209, 210, 214, 215, 217, 218, 219, 220, 221, 222, 224, 225, 228, 230, 234, 235, 238, 240, 244, 245, 247, 248, 249, 250, 251, 252, 254, 255], "get": [1, 8, 9, 14, 34, 43, 44, 56, 70, 71, 73, 74, 82, 84, 86, 87, 109, 117, 120, 125, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 150, 168, 171, 172, 175, 178, 180, 184, 185, 187, 188, 192, 193, 196, 219, 222, 239, 245, 246, 247, 249, 250, 251, 252, 255, 256], "slice": 1, "potenti": [1, 98, 120], "overlap": 1, "frame": [1, 62, 84], "window": [1, 2, 4, 5, 14, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 47, 48, 53, 62, 64, 74, 75, 77, 78, 138, 139, 140, 141, 142, 143, 144, 145, 150, 153, 228, 233, 246, 250, 251, 254], "function": [1, 65, 67, 69, 75, 80, 81, 83, 85, 86, 89, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 116, 117, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 199, 200, 209, 210, 211, 212, 219, 220, 221, 222, 225, 227, 228, 235, 236, 237, 240, 242, 244, 246, 248, 249, 250, 251, 254], "appli": [1, 4, 5, 23, 24, 35, 43, 62, 65, 67, 70, 81, 86, 90, 109, 110, 114, 120, 123, 124, 125, 132, 138, 139, 140, 141, 142, 143, 144, 145, 149, 186, 201, 203, 204, 247, 249, 250, 251, 252, 254, 256], "each": [1, 8, 9, 10, 11, 23, 24, 35, 36, 39, 41, 49, 57, 61, 62, 65, 67, 68, 70, 75, 81, 85, 86, 89, 91, 96, 98, 100, 101, 102, 103, 109, 110, 114, 117, 120, 123, 124, 125, 126, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 155, 157, 160, 166, 169, 185, 203, 204, 209, 215, 221, 224, 225, 232, 239, 243, 244, 245, 247, 248, 249, 250, 251, 252, 255, 256], "afterward": 1, "we": [1, 2, 19, 20, 34, 35, 36, 43, 44, 50, 55, 57, 60, 61, 67, 68, 69, 72, 86, 99, 100, 109, 114, 115, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 221, 237, 239, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "do": [1, 19, 20, 25, 26, 41, 43, 53, 69, 71, 84, 86, 89, 100, 109, 110, 114, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 200, 210, 222, 240, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256], "fourier": 1, "transform": [1, 81, 82, 86, 87, 125, 138, 141, 143, 144, 248, 250, 251, 255], "short": [1, 96, 99, 138, 141, 142, 143, 144], "calcul": [1, 4, 5, 6, 7, 27, 28, 35, 61, 62, 63, 83, 84, 91, 109, 110, 114, 124, 125, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 155, 161, 172, 174, 175, 177, 180, 182, 186, 188, 190, 196, 198, 200, 232, 247, 248, 250, 255], "power": [1, 37, 62, 99, 145, 146, 248, 249, 250, 256], "spectrum": 1, "subsequ": [1, 81, 86, 109, 114, 215, 248, 250], "comput": [1, 19, 20, 23, 24, 51, 62, 70, 74, 77, 84, 86, 100, 120, 124, 125, 132, 138, 141, 143, 246, 251, 252, 254], "slight": 1, "modif": [1, 27, 28, 86], "so": [1, 33, 43, 51, 57, 67, 69, 70, 71, 81, 83, 100, 109, 114, 120, 125, 128, 129, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 186, 206, 232, 239, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "can": [1, 2, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 23, 24, 27, 28, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 49, 52, 53, 55, 57, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 81, 86, 89, 91, 99, 100, 102, 103, 109, 110, 114, 117, 120, 121, 124, 125, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 157, 169, 179, 185, 187, 199, 215, 220, 221, 232, 233, 235, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "linux": [1, 2, 14, 33, 34, 35, 37, 38, 39, 41, 42, 43, 45, 47, 48, 53, 64, 74, 75, 78, 228, 233, 246], "sl_ml_audio_feature_gener": 1, "gecko_sdk": [1, 43], "audio_feature_gener": [1, 81, 83, 84, 109, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 250, 251], "execut": [1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 19, 20, 25, 26, 35, 39, 40, 41, 42, 45, 47, 48, 51, 52, 57, 59, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 78, 80, 85, 117, 118, 119, 125, 132, 138, 141, 143, 144, 146, 157, 164, 166, 169, 221, 222, 225, 228, 232, 233, 235, 237, 242, 244, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256], "becaus": [1, 57, 67, 139, 232, 246, 248, 250, 252, 254], "devic": [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 27, 28, 35, 36, 37, 39, 41, 43, 45, 47, 48, 53, 56, 60, 61, 62, 64, 65, 67, 68, 69, 76, 77, 78, 79, 98, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 168, 213, 214, 215, 216, 217, 220, 223, 229, 230, 231, 232, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256], "mai": [1, 4, 5, 6, 7, 10, 11, 14, 15, 16, 17, 18, 19, 20, 25, 26, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 88, 95, 99, 106, 107, 109, 110, 114, 115, 117, 118, 120, 123, 124, 125, 127, 128, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 155, 156, 169, 170, 186, 203, 206, 213, 215, 225, 230, 233, 234, 237, 239, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "hopefulli": [1, 136, 232, 248, 250, 254], "lead": [1, 67, 139, 140, 141, 142, 143, 145, 146, 232, 248, 250], "accur": [1, 10, 14, 232, 248, 250, 251, 252, 255], "pybind11": [1, 46], "binari": [1, 33, 52, 58, 61, 62, 76, 81, 86, 109, 114, 118, 127, 129, 133, 134, 136, 139, 155, 179, 183, 185, 187, 209, 213, 216, 217, 224, 229, 230, 244, 250], "api": [1, 10, 15, 17, 21, 25, 27, 29, 45, 47, 48, 59, 60, 66, 73, 74, 83, 88, 89, 91, 92, 109, 110, 111, 112, 113, 117, 120, 123, 124, 125, 127, 128, 130, 131, 132, 133, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 149, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 169, 179, 185, 187, 203, 211, 213, 215, 217, 230, 232, 233, 244, 245, 246, 248, 250, 252, 253, 255, 256], "found": [1, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 52, 55, 58, 59, 61, 62, 63, 65, 67, 68, 69, 72, 84, 86, 88, 89, 91, 103, 106, 120, 121, 126, 129, 131, 132, 133, 134, 135, 137, 138, 140, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 166, 168, 185, 187, 200, 213, 219, 220, 222, 224, 235, 236, 237, 238, 239, 240, 241, 242, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256], "here": [1, 34, 35, 36, 37, 39, 43, 44, 58, 61, 64, 67, 69, 83, 98, 124, 125, 127, 128, 130, 132, 136, 140, 141, 143, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 251, 252, 255, 256], "core": [1, 62, 65, 67, 71, 74, 81, 83, 84, 86, 88, 91, 100, 107, 109, 110, 111, 112, 113, 114, 115, 116, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 183, 185, 221, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255], "preprocess": [1, 67, 81, 83, 84, 107, 109, 114, 123, 124, 125, 127, 128, 129, 130, 131, 132, 136, 146, 149, 150, 151, 153, 154, 239, 244, 246, 251, 255], "audio_feature_generator_wrapp": [1, 42, 45], "when": [1, 4, 5, 6, 7, 12, 13, 23, 24, 27, 28, 35, 36, 37, 39, 40, 41, 43, 45, 47, 48, 51, 52, 53, 57, 61, 62, 65, 69, 70, 71, 73, 75, 78, 84, 86, 89, 91, 100, 109, 110, 114, 116, 117, 118, 120, 122, 123, 124, 125, 127, 128, 132, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 157, 161, 169, 186, 203, 211, 221, 226, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "instal": [1, 2, 14, 45, 47, 48, 50, 58, 64, 70, 73, 75, 77, 107, 125, 138, 141, 143, 144, 203, 222, 244, 245, 249, 252, 254, 256], "local": [1, 2, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 23, 24, 27, 28, 29, 32, 34, 35, 37, 39, 43, 49, 63, 72, 73, 77, 119, 138, 139, 140, 141, 142, 143, 144, 145, 157, 162, 185, 199, 200, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 252, 253, 254, 255, 256], "dll": [1, 53], "directori": [1, 2, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 25, 26, 27, 28, 33, 34, 42, 43, 44, 45, 47, 48, 55, 66, 67, 69, 70, 75, 77, 80, 81, 82, 85, 86, 87, 89, 91, 96, 98, 99, 100, 101, 102, 103, 107, 109, 114, 117, 118, 119, 120, 125, 129, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 153, 154, 155, 157, 158, 160, 161, 199, 200, 203, 204, 210, 220, 222, 225, 228, 246, 247, 248, 249, 250, 254, 255, 256], "recommend": [1, 2, 4, 5, 33, 62, 65, 73, 74, 81, 145, 246, 247, 248, 249, 250, 251, 253, 256], "wai": [1, 19, 20, 51, 52, 57, 62, 70, 71, 84, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 221, 246, 247, 248, 249, 250, 251, 252, 254, 256], "via": [1, 14, 19, 33, 34, 44, 59, 61, 63, 65, 68, 69, 70, 72, 73, 74, 77, 119, 213, 214, 216, 217, 229, 230, 233, 237, 241, 242, 245, 246, 247, 248, 249, 250, 251], "parallelaudiodatagener": [1, 30, 31, 50, 62, 67, 83, 86, 88, 109, 124, 130, 133, 139, 140, 142, 145, 149, 246, 250, 252], "requir": [1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 37, 39, 43, 44, 47, 48, 57, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 76, 81, 84, 86, 91, 100, 115, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 161, 167, 168, 193, 203, 231, 232, 233, 235, 237, 238, 239, 242, 244, 245, 246, 250, 254, 256], "audiodatasetmixin": [1, 61, 67, 69, 71, 110, 117, 124, 130, 139, 140, 142, 145, 149, 250], "keyword_spotting_on_off": [1, 2, 67, 141, 250, 254], "basic": [1, 2, 19, 20, 34, 61, 68, 69, 70, 71, 74, 115, 124, 125, 127, 128, 130, 131, 132, 133, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 157, 187, 237, 244, 246, 247, 249, 251, 254, 255, 256], "In": [1, 4, 5, 6, 7, 12, 13, 19, 20, 21, 22, 23, 24, 33, 35, 36, 37, 39, 44, 51, 57, 61, 62, 63, 65, 67, 68, 71, 72, 74, 80, 81, 84, 85, 86, 96, 109, 110, 114, 116, 120, 124, 126, 127, 128, 134, 136, 138, 139, 140, 141, 143, 145, 149, 168, 187, 200, 204, 205, 210, 221, 233, 235, 236, 237, 241, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "defin": [1, 19, 20, 25, 26, 33, 35, 41, 44, 50, 52, 57, 61, 62, 67, 69, 71, 75, 76, 83, 84, 115, 117, 120, 124, 125, 127, 128, 129, 131, 132, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 155, 179, 183, 204, 219, 220, 222, 227, 232, 244, 245, 246, 247, 249, 251, 253, 255, 256], "object": [1, 61, 67, 69, 71, 84, 107, 108, 109, 114, 115, 117, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 158, 161, 166, 168, 171, 172, 175, 178, 179, 180, 184, 185, 187, 188, 192, 193, 196, 212, 219, 220, 221, 222, 224, 225, 227, 244, 252], "inherit": [1, 61, 67, 69, 115, 125, 127, 128, 132, 138, 141, 143, 144, 179, 187, 244, 248, 250, 255], "class": [1, 4, 5, 6, 7, 10, 11, 35, 36, 39, 61, 62, 69, 71, 80, 81, 82, 83, 84, 86, 87, 89, 91, 96, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 160, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 205, 206, 207, 208, 211, 214, 215, 217, 218, 219, 221, 222, 224, 226, 227, 230, 234, 237, 238, 239, 241, 242, 244, 245, 246, 247, 250, 251, 252, 254], "mymodel": [1, 61, 67, 69, 71, 111, 112, 113, 115, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 244, 245, 247, 248, 250, 251, 252, 254], "mltkmodel": [1, 10, 11, 15, 16, 25, 26, 27, 28, 49, 61, 62, 71, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 241, 244, 245, 248, 250], "trainmixin": [1, 61, 65, 67, 69, 71, 115, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 158, 232, 236, 244, 245, 247, 248, 250], "evaluateclassifiermixin": [1, 67, 69, 71, 115, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 153, 154, 244, 245, 248, 250], "pass": [1, 10, 11, 71, 81, 86, 109, 110, 114, 115, 117, 118, 120, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 153, 154, 170, 203, 222, 244, 245, 246, 248, 250, 251, 254, 256], "frontend_set": [1, 81, 83, 84, 109, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 249, 250, 251, 254], "audiofeaturegeneratorset": [1, 62, 80, 81, 83, 109, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 249, 250, 251, 254], "sample_rate_hz": [1, 62, 81, 83, 84, 91, 109, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 249, 250, 251, 254], "8000": [1, 64, 140, 141, 142, 143, 250], "16k": [1, 139, 140, 142, 145, 250, 254], "slightli": [1, 68, 139, 140, 142, 145, 250, 254], "cost": [1, 4, 5, 6, 7, 86, 124, 125, 139, 140, 142, 145, 146, 149, 246, 248, 250, 251, 254], "ram": [1, 33, 41, 47, 48, 51, 57, 62, 63, 65, 71, 120, 124, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 167, 221, 232, 235, 237, 238, 239, 241, 245, 246, 248, 249, 250, 251, 254, 255], "sample_length_m": [1, 62, 81, 82, 83, 84, 109, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 249, 250, 251, 254], "1000": [1, 23, 24, 62, 70, 81, 83, 84, 89, 91, 120, 123, 124, 125, 130, 132, 138, 139, 140, 141, 143, 144, 145, 148, 149, 221, 241, 250, 251, 254, 255], "window_size_m": [1, 62, 83, 84, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 249, 250, 251, 254], "30": [1, 80, 83, 84, 124, 125, 126, 130, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 235, 238, 248, 249, 250, 251, 254, 256], "window_step_m": [1, 62, 83, 84, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 249, 250, 251, 254], "20": [1, 37, 67, 81, 109, 110, 114, 124, 125, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 154, 219, 227, 241, 246, 248, 249, 250, 251, 254, 255], "filterbank_n_channel": [1, 62, 83, 84, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 249, 250, 251, 254], "32": [1, 81, 84, 86, 101, 115, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 237, 241, 244, 248, 249, 250, 251, 254, 255, 256], "filterbank_upper_band_limit": [1, 62, 83, 84, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 249, 250, 251, 254], "4000": [1, 124, 125, 139, 140, 145, 149, 241, 250, 254], "spoken": [1, 98, 100, 125, 138, 139, 140, 145, 249, 250, 254], "languag": [1, 98, 99, 100, 125, 139, 140, 145, 203, 206, 249, 250, 254], "usual": [1, 35, 36, 51, 65, 125, 139, 140, 145, 246, 248, 250, 254, 256], "4k": [1, 124, 125, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 153, 154, 235, 248, 250, 251, 254, 255], "filterbank_lower_band_limit": [1, 62, 83, 84, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 249, 250, 251, 254], "100": [1, 10, 11, 25, 26, 67, 81, 109, 110, 114, 115, 120, 124, 125, 127, 128, 129, 131, 132, 134, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 204, 229, 234, 235, 241, 244, 247, 248, 250, 255, 256], "noise_reduction_en": [1, 2, 62, 83, 84, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 249, 250, 251, 254], "true": [1, 23, 24, 50, 63, 67, 69, 70, 71, 80, 81, 83, 84, 85, 86, 89, 90, 91, 93, 100, 109, 110, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 162, 185, 193, 199, 200, 203, 204, 205, 210, 215, 217, 219, 220, 221, 222, 224, 226, 227, 229, 230, 234, 235, 237, 239, 240, 242, 244, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256], "noise_reduction_smoothing_bit": [1, 62, 83, 84, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 249, 250, 251, 254], "5": [1, 12, 13, 19, 20, 61, 62, 67, 69, 74, 75, 81, 84, 91, 103, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 170, 221, 235, 237, 238, 240, 241, 242, 244, 248, 250, 251, 254, 255, 256], "noise_reduction_even_smooth": [1, 62, 83, 84, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 249, 250, 251, 254], "004": [1, 125, 138, 140, 144, 241, 250], "noise_reduction_odd_smooth": [1, 62, 83, 84, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 249, 250, 251, 254], "noise_reduction_min_signal_remain": [1, 62, 83, 84, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 249, 250, 251, 254], "05": [1, 84, 125, 131, 136, 140, 141, 143, 146, 149, 153, 154, 237, 248, 250], "pcan_en": [1, 62, 84, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 250, 254], "fals": [1, 2, 23, 24, 63, 70, 71, 77, 80, 81, 84, 85, 86, 89, 90, 91, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 114, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 162, 166, 169, 185, 193, 195, 199, 200, 203, 210, 211, 212, 214, 215, 217, 219, 220, 221, 222, 224, 226, 241, 244, 246, 247, 248, 250, 254, 255, 256], "pcan_strength": [1, 62, 84, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 250, 254], "95": [1, 84, 124, 125, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 153, 247, 248, 249, 250, 251, 252, 254, 255], "pcan_offset": [1, 62, 84, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 250, 254], "80": [1, 84, 124, 125, 130, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 153, 235, 248, 250, 251, 254, 256], "pcan_gain_bit": [1, 62, 84, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 250, 254], "21": [1, 84, 124, 125, 126, 130, 134, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 151, 153, 154, 235, 237, 238, 242, 248, 250, 251, 254, 255, 256], "log_scale_en": [1, 62, 84, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 250, 254], "log_scale_shift": [1, 62, 84, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 250, 254], "6": [1, 19, 20, 36, 37, 39, 81, 84, 86, 90, 98, 103, 124, 125, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 170, 230, 235, 237, 238, 240, 241, 244, 246, 248, 250, 251, 254, 255], "my_model": [1, 4, 5, 10, 11, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 37, 39, 41, 50, 52, 55, 56, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 84, 109, 110, 111, 112, 113, 114, 115, 116, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 185, 235, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254], "datagen": [1, 50, 57, 67, 109, 114, 124, 129, 130, 131, 136, 139, 140, 142, 145, 146, 149, 150, 151, 153, 154, 246, 248, 250], "interfac": [1, 2, 14, 23, 24, 29, 32, 41, 46, 48, 59, 63, 64, 107, 120, 122, 213, 216, 217, 233, 245, 246], "thu": [1, 51, 67, 109, 110, 114, 123, 136, 221, 244, 246, 247, 250, 251, 254, 256], "It": [1, 2, 4, 5, 10, 11, 23, 24, 33, 35, 44, 52, 57, 61, 64, 65, 81, 82, 86, 87, 89, 91, 98, 100, 109, 110, 114, 123, 127, 128, 136, 138, 139, 140, 142, 143, 144, 146, 232, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255], "adjust": [1, 2, 80, 81, 125, 138, 139, 140, 141, 142, 143, 144, 145, 246, 248, 249, 250, 251, 252, 255, 256], "result": [1, 2, 4, 5, 6, 7, 10, 11, 15, 16, 19, 20, 25, 26, 35, 36, 39, 53, 56, 60, 62, 63, 109, 111, 112, 113, 114, 118, 120, 124, 125, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 155, 157, 158, 160, 163, 166, 168, 185, 221, 234, 235, 240, 245, 247, 248, 249, 250, 251, 255], "affect": [1, 2, 109, 110, 114, 122, 139, 140, 142, 144, 145, 250], "To": [1, 2, 14, 34, 35, 36, 37, 39, 41, 43, 45, 47, 48, 50, 51, 52, 61, 64, 67, 70, 71, 73, 78, 100, 134, 136, 141, 143, 144, 232, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "issu": [1, 2, 14, 19, 20, 43, 45, 47, 48, 57, 58, 61, 62, 63, 65, 68, 69, 70, 71, 72, 74, 96, 115, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 214, 225, 226, 231, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255], "wxpython": [1, 2, 30, 31, 250], "sever": [2, 34, 37, 39, 40, 41, 43, 44, 46, 51, 52, 58, 61, 67, 69, 71, 138, 141, 143, 144, 232, 244, 247, 248, 250, 251, 255], "aid": [2, 48, 57, 67, 69, 125, 132, 138, 141, 143, 144, 145, 221, 233, 244, 247, 248, 249, 250, 251, 256], "custom": [2, 4, 5, 6, 7, 8, 9, 12, 13, 33, 59, 61, 67, 69, 71, 81, 86, 89, 91, 107, 111, 112, 113, 117, 120, 122, 124, 129, 131, 134, 136, 138, 139, 140, 142, 144, 145, 146, 231, 232, 233, 247, 248, 250, 251, 254, 256], "data": [2, 4, 5, 8, 9, 23, 24, 30, 31, 35, 36, 39, 41, 46, 50, 56, 61, 62, 63, 64, 65, 67, 69, 70, 71, 77, 80, 81, 83, 85, 86, 89, 90, 91, 92, 96, 98, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 163, 166, 167, 169, 171, 172, 175, 178, 179, 180, 184, 185, 187, 188, 192, 193, 195, 196, 209, 212, 213, 214, 215, 216, 217, 219, 221, 223, 224, 229, 230, 231, 232, 235, 238, 240, 244, 252, 254, 256], "depend": [2, 51, 67, 74, 75, 84, 86, 100, 110, 245, 246, 248, 256], "usecas": [2, 247], "overview": [2, 74, 107], "abil": [2, 61, 250], "print": [2, 6, 7, 21, 22, 35, 36, 38, 39, 40, 54, 100, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 160, 164, 183, 185, 204, 219, 223, 229, 234, 235, 237, 241, 244, 246, 247, 248, 250, 254, 255, 256], "termin": [2, 4, 5, 19, 20, 23, 24, 38, 39, 71, 120, 228, 247, 248, 250, 251, 252, 254], "audio_classifi": [2, 4, 5, 27, 28, 35, 124, 125, 139, 140, 142, 145, 149, 249, 250], "flow": [2, 19, 20, 62, 70, 71, 86, 131, 146, 187, 229, 230, 231, 245, 248, 250], "recogn": [2, 4, 5, 250], "classify_audio": [2, 5, 14, 74, 78, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 149, 247, 248, 249, 250, 251, 252, 254], "help": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 39, 41, 43, 44, 51, 52, 58, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 84, 95, 100, 115, 125, 127, 128, 129, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 169, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "verbos": [2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 62, 67, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 160, 210, 244, 246, 248, 249, 250, 252], "threshold": [2, 4, 5, 6, 7, 36, 39, 61, 62, 80, 81, 84, 120, 124, 125, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 155, 241, 248, 250], "150": [2, 139, 142, 144, 145, 153, 248, 251, 254], "255": [2, 4, 5, 6, 7, 35, 36, 57, 85, 101, 103, 124, 125, 127, 128, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 244, 248, 250, 255], "lower": [2, 23, 24, 39, 70, 71, 81, 86, 90, 120, 136, 138, 141, 142, 143, 144, 220, 246, 247, 249, 251], "mean": [2, 39, 56, 62, 81, 86, 90, 99, 123, 132, 134, 136, 139, 145, 221, 239, 246, 247, 248, 250, 254, 255], "easier": [2, 15, 16, 48, 138, 141, 143, 144, 256], "higher": [2, 4, 5, 6, 7, 35, 36, 71, 81, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 247, 248, 250], "posit": [2, 23, 24, 62, 70, 84, 120, 124, 125, 132, 138, 141, 143, 155, 204, 249, 256], "sai": [2, 23, 24, 55, 57, 70, 100, 120, 124, 125, 132, 138, 141, 143, 144, 249, 250, 251, 256], "off": [2, 35, 36, 100, 127, 136, 137, 140, 141, 153, 231, 246], "process": [2, 4, 5, 6, 7, 10, 11, 15, 16, 25, 26, 35, 36, 37, 39, 45, 51, 57, 62, 67, 71, 80, 81, 83, 85, 86, 87, 88, 89, 91, 92, 107, 109, 114, 118, 122, 123, 125, 132, 138, 139, 140, 141, 142, 143, 144, 145, 149, 155, 157, 158, 160, 203, 217, 221, 228, 232, 246, 247, 248, 249, 250, 251, 252, 254, 255], "occur": [2, 57, 230], "much": [2, 4, 5, 6, 7, 23, 24, 70, 71, 100, 138, 139, 141, 143, 204, 232, 246, 248, 250, 252, 255, 256], "faster": [2, 51, 221, 246, 248, 250], "compar": [2, 10, 11, 37, 51, 61, 96, 98, 111, 122, 136, 155, 245, 247, 248, 250, 255], "artifici": [2, 248], "delai": [2, 249], "would": [2, 4, 5, 60, 67, 86, 95, 120, 123, 125, 132, 138, 141, 143, 144, 233, 244, 247, 248, 250, 252, 256], "why": [2, 53, 138, 141, 143, 144, 233], "matter": [2, 256], "keyword_spotting_mobilenetv2": [2, 145, 252, 254], "loop": [2, 4, 5, 6, 7, 35, 39, 62, 67, 86, 94, 109, 110, 114, 120, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 149, 248, 250], "200m": [2, 4, 5, 250], "200": [2, 4, 5, 109, 110, 114, 129, 136, 138, 139, 140, 141, 142, 143, 145, 146, 151, 204, 248, 250, 251, 256], "left": [2, 36, 67, 69, 97, 100, 124, 125, 139, 142, 143, 144, 153, 231, 246, 247, 248, 250, 251, 252, 254, 255], "right": [2, 36, 50, 64, 67, 69, 73, 97, 100, 124, 125, 136, 139, 142, 143, 144, 153, 231, 246, 247, 248, 250, 251, 252, 253, 254, 255], "down": [2, 23, 24, 36, 51, 67, 69, 70, 81, 97, 100, 120, 124, 125, 132, 138, 139, 141, 142, 143, 144, 153, 221, 231, 246, 250, 251, 252, 254, 255], "stop": [2, 36, 54, 89, 91, 97, 100, 109, 110, 114, 117, 120, 124, 125, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 146, 149, 153, 194, 201, 205, 224, 231, 242, 246, 248, 250, 251, 252, 253, 254], "go": [2, 36, 73, 74, 97, 100, 139, 142, 143, 144, 153, 231, 246, 250, 251, 252, 254], "captur": [2, 4, 5, 12, 13, 35, 37, 40, 95, 100, 138, 144, 223, 247, 248, 249, 250, 251], "after": [2, 4, 5, 17, 18, 19, 20, 23, 24, 25, 26, 35, 36, 37, 39, 41, 43, 44, 52, 55, 60, 62, 64, 65, 67, 69, 70, 71, 74, 76, 81, 86, 91, 100, 115, 118, 119, 120, 124, 125, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 160, 215, 224, 235, 236, 237, 240, 241, 242, 246, 247, 248, 249, 250, 251, 253, 255, 256], "awhil": [2, 44, 237, 242, 248, 250, 254, 255, 256], "ctrl": [2, 19, 20, 71, 73, 226], "wav": [2, 4, 5, 80, 83, 91, 94, 97, 100, 125, 138, 141, 142, 143, 144, 203, 250, 251, 256], "user": [2, 12, 13, 19, 20, 35, 36, 37, 40, 43, 62, 67, 71, 75, 77, 127, 128, 157, 187, 220, 231, 235, 236, 237, 240, 241, 242, 244, 246, 247, 248, 249, 250, 254, 255], "home": [2, 4, 5, 77, 220, 228, 246, 250, 254], "audio_classify_record": [2, 250], "dump_audio": 2, "avi": 2, "video": [2, 4, 5, 142, 143, 144, 250, 251], "jpg": [2, 4, 5, 39, 81, 85, 86, 91, 125, 138, 141, 143, 144, 247, 248, 250], "assum": [2, 14, 60, 62, 65, 80, 85, 120, 150, 221, 228, 236, 241, 246, 248, 250, 252, 254], "you": [2, 14, 23, 24, 33, 34, 35, 37, 39, 41, 43, 44, 45, 47, 48, 50, 54, 56, 57, 58, 64, 67, 70, 71, 73, 74, 76, 81, 86, 100, 109, 110, 114, 120, 122, 123, 125, 126, 127, 128, 130, 132, 136, 138, 140, 141, 143, 145, 169, 179, 185, 187, 232, 233, 237, 239, 242, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "have": [2, 4, 5, 6, 7, 12, 13, 23, 24, 35, 36, 37, 39, 44, 46, 51, 54, 55, 60, 61, 62, 65, 67, 68, 69, 71, 73, 74, 81, 86, 89, 91, 99, 100, 109, 110, 111, 112, 113, 114, 117, 118, 123, 125, 127, 128, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 157, 179, 185, 187, 210, 221, 224, 236, 241, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "entir": [2, 41, 72, 89, 91, 120, 138, 141, 143, 251], "If": [2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 48, 50, 52, 54, 56, 62, 65, 66, 67, 69, 70, 71, 74, 75, 80, 81, 84, 85, 86, 89, 91, 100, 109, 110, 111, 112, 113, 114, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 166, 168, 169, 185, 187, 199, 200, 203, 205, 209, 210, 212, 215, 219, 220, 221, 222, 224, 225, 228, 230, 233, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "red": [2, 35, 36, 37, 39, 252, 254], "led": [2, 4, 5, 6, 7, 35, 36, 37, 39, 248, 250, 252, 254], "turn": [2, 35, 36, 39, 250, 252, 254], "activ": [2, 4, 5, 6, 7, 14, 19, 20, 23, 24, 35, 36, 37, 39, 62, 67, 69, 70, 71, 74, 83, 84, 96, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 188, 189, 190, 198, 203, 217, 221, 222, 235, 237, 238, 239, 241, 242, 244, 246, 248, 249, 250, 251, 252, 253, 254, 255], "green": [2, 35, 36, 37, 39, 252, 254], "addition": [2, 6, 7, 12, 13, 23, 24, 36, 51, 55, 57, 61, 65, 69, 74, 78, 81, 232, 234, 244, 248, 250, 251, 254, 255], "serial": [2, 4, 5, 6, 7, 12, 13, 15, 16, 35, 36, 38, 39, 62, 77, 86, 117, 157, 179, 187, 213, 220, 224, 230, 248, 249, 250], "log": [2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 44, 55, 60, 62, 67, 69, 70, 71, 76, 77, 109, 114, 117, 120, 122, 124, 125, 132, 134, 136, 138, 141, 143, 144, 155, 158, 160, 161, 169, 210, 219, 231, 237, 242, 246, 247, 248, 249, 250, 255], "while": [2, 4, 5, 6, 7, 12, 13, 19, 20, 35, 37, 41, 44, 51, 58, 61, 67, 68, 69, 71, 81, 86, 89, 115, 125, 127, 128, 132, 134, 136, 138, 141, 143, 144, 145, 155, 157, 160, 166, 168, 169, 200, 210, 215, 221, 229, 230, 235, 236, 237, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256], "update_param": [2, 14, 28, 52, 60, 62, 247, 248, 249, 250, 251], "re": [2, 4, 5, 6, 7, 12, 13, 14, 27, 28, 34, 43, 44, 57, 74, 80, 89, 91, 96, 100, 109, 114, 120, 122, 125, 126, 127, 128, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 185, 199, 214, 220, 223, 224, 239, 244, 246, 247, 248, 249, 250, 252, 254, 255, 256], "differ": [2, 6, 7, 35, 36, 37, 39, 41, 52, 58, 61, 71, 86, 99, 100, 109, 110, 114, 120, 122, 124, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 232, 244, 245, 246, 247, 248, 250, 251, 252, 254, 255, 256], "disabl": [2, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 23, 24, 35, 36, 41, 62, 70, 71, 81, 84, 86, 89, 91, 99, 120, 122, 124, 125, 130, 132, 138, 141, 142, 143, 144, 148, 157, 169, 211, 215, 221, 248, 249, 251], "nois": [2, 62, 67, 81, 84, 86, 109, 110, 114, 125, 131, 136, 138, 139, 141, 142, 143, 144, 146, 248, 249, 250, 251, 254], "reduct": [2, 62, 84, 125, 134, 138, 141, 142, 143, 144, 249, 251, 254], "modul": [2, 6, 7, 12, 13, 14, 37, 39, 50, 58, 62, 66, 67, 84, 86, 91, 92, 109, 110, 114, 121, 221, 222, 247, 248], "fe": [2, 62, 124, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 250, 254], "experiment": [2, 4, 5, 30, 31, 70, 120, 125, 132, 138, 141, 143, 144, 150, 153, 233, 248, 250, 251, 254], "audiodatasetgener": [2, 97, 204, 256], "text": [2, 12, 13, 14, 21, 35, 36, 59, 60, 64, 67, 68, 70, 116, 136, 141, 156, 202, 232, 246, 247, 248, 249, 250, 251, 254, 256], "speech": [2, 62, 84, 125, 138, 139, 140, 141, 142, 143, 144, 145, 147, 149, 203, 241, 246, 249, 250, 256], "tt": [2, 249, 256], "servic": [2, 35, 36, 54, 73, 204, 233, 246, 248, 249, 250], "cloud": [2, 10, 11, 14, 15, 16, 19, 20, 25, 26, 59, 69, 70, 71, 73, 74, 75, 119, 122, 125, 132, 138, 141, 143, 144, 155, 157, 158, 160, 203, 204, 231, 233, 249], "gcp": [2, 203, 204], "microsoft": [2, 34, 42, 43, 44, 58, 74, 204, 249], "azur": [2, 203, 204], "amazon": [2, 204, 249], "web": [2, 36, 49, 72, 100, 122, 204, 231, 242, 243, 246, 248, 250, 251], "aw": [2, 203, 204], "inform": [2, 8, 9, 14, 48, 59, 60, 63, 67, 68, 70, 71, 76, 150, 171, 172, 175, 178, 180, 184, 185, 188, 192, 193, 195, 196, 237, 247, 249, 252, 255], "audio": [4, 5, 12, 13, 14, 30, 31, 40, 45, 46, 52, 57, 62, 67, 70, 81, 83, 84, 88, 89, 91, 95, 97, 98, 99, 100, 109, 124, 125, 130, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 149, 201, 202, 203, 207, 208, 213, 216, 231, 232, 233, 247, 248, 252], "util": [4, 8, 9, 14, 29, 30, 32, 34, 35, 36, 41, 43, 44, 59, 63, 67, 70, 80, 83, 85, 88, 89, 90, 91, 107, 109, 110, 114, 115, 124, 125, 126, 127, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 199, 200, 203, 204, 209, 210, 211, 212, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 235, 238, 239, 244, 245, 246, 247, 249, 251, 254, 255, 256], "app": [4, 5, 6, 7, 12, 13, 27, 28, 29, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 72, 76, 100, 136, 138, 141, 143, 144, 185, 230, 242, 248, 249, 250, 251, 255], "event": [4, 5, 61, 96, 117, 118, 120, 230, 233, 247, 248, 250, 251], "own": [4, 5, 8, 9, 30, 31, 71, 74, 99, 125, 132, 135, 136, 138, 139, 140, 141, 143, 144, 246, 247, 248, 250, 251, 252, 256], "risk": [4, 5, 30, 31, 250], "either": [4, 5, 27, 28, 39, 49, 62, 65, 81, 84, 86, 91, 100, 109, 110, 114, 120, 126, 138, 141, 143, 157, 159, 161, 162, 168, 169, 170, 185, 186, 187, 199, 202, 209, 220, 243, 244, 247, 248, 249, 250, 251, 255], "OR": [4, 5, 19, 20, 25, 26, 44, 74, 81, 100, 114, 121, 158, 161, 170, 179, 185, 186, 187, 200, 220, 250], "given": [4, 5, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 39, 41, 52, 60, 61, 62, 63, 64, 67, 68, 69, 72, 77, 80, 81, 84, 85, 86, 89, 90, 91, 100, 109, 110, 111, 112, 113, 114, 116, 117, 118, 120, 121, 123, 128, 131, 136, 138, 139, 140, 141, 143, 144, 145, 146, 155, 157, 158, 159, 160, 161, 162, 163, 166, 168, 169, 171, 172, 174, 175, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 192, 193, 196, 198, 199, 200, 203, 209, 212, 219, 220, 221, 222, 224, 227, 228, 230, 232, 234, 237, 241, 242, 244, 247, 248, 250, 251, 252, 254], "system": [4, 5, 33, 34, 43, 44, 61, 71, 75, 81, 86, 91, 245, 246, 250, 251], "dataflow": [4, 5, 250], "tflite_micro": [4, 5, 27, 28, 67, 107, 147, 164, 238, 241, 250], "tflite_micro_speech": [4, 5, 27, 28, 62, 67, 69, 232, 241, 250], "For": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 39, 55, 57, 59, 61, 62, 63, 65, 67, 68, 69, 71, 72, 81, 89, 91, 100, 109, 110, 114, 120, 123, 125, 126, 127, 128, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 155, 224, 235, 237, 242, 244, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256], "http": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 58, 67, 72, 74, 76, 81, 84, 88, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 117, 118, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 162, 185, 187, 213, 233, 235, 237, 238, 239, 241, 242, 244, 246, 248, 249, 250, 251, 252, 255, 256], "siliconlab": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 67, 74, 84, 88, 95, 104, 105, 106, 123, 124, 125, 127, 128, 130, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 152, 153, 154, 156, 213, 233, 235, 238, 239, 244, 249, 250], "io": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 67, 84, 117, 123, 124, 125, 127, 128, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 151, 225, 229, 239, 244, 248, 249, 250, 252], "audio_util": [4, 5, 30, 31, 83, 125, 138, 141, 143, 144, 251], "simul": [4, 5, 15, 16, 41, 47, 62, 64, 67, 95, 100, 115, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 169, 244, 246, 252, 254, 255], "latenc": [4, 5, 6, 7, 51, 63, 146, 232, 246, 248, 250, 251, 252], "take": [4, 5, 35, 44, 51, 62, 67, 74, 81, 86, 89, 120, 124, 125, 127, 128, 136, 139, 140, 145, 148, 149, 222, 237, 242, 244, 246, 248, 250, 251, 252, 254, 255, 256], "per": [4, 5, 10, 11, 12, 13, 81, 86, 89, 91, 100, 109, 110, 114, 118, 120, 125, 134, 138, 141, 143, 144, 155, 157, 174, 177, 198, 203, 246, 247, 248, 250, 251, 256], "enabl": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 41, 43, 44, 46, 50, 61, 62, 67, 70, 72, 81, 83, 84, 86, 91, 98, 99, 107, 111, 112, 117, 118, 120, 124, 125, 130, 132, 138, 139, 140, 141, 142, 143, 144, 145, 149, 150, 155, 163, 166, 169, 210, 213, 216, 217, 232, 233, 237, 242, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256], "workspac": [4, 5, 10, 11, 15, 16, 29, 32, 52, 55, 60, 62, 63, 67, 68, 71, 72, 77, 119, 235, 236, 237, 240, 241, 242, 246, 248, 250, 254, 255], "averag": [4, 5, 6, 7, 35, 36, 39, 62, 123, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 155, 234, 237, 242, 247, 248, 250, 254, 255], "1200m": [4, 5, 138, 250], "drop": [4, 5, 6, 7, 64, 72, 76, 102, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 230, 242, 247, 248, 250, 251, 255], "older": [4, 5, 6, 7, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 248, 250], "than": [4, 5, 6, 7, 15, 16, 17, 18, 21, 22, 29, 32, 35, 36, 39, 41, 61, 62, 77, 84, 86, 98, 100, 120, 124, 125, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 157, 162, 215, 230, 241, 246, 247, 248, 249, 250, 252, 254, 255], "now": [4, 5, 6, 7, 43, 73, 122, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 244, 246, 247, 248, 249, 250, 251, 254, 255], "minu": [4, 5, 6, 7, 62, 84, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 248, 250, 256], "minimum": [4, 5, 6, 7, 35, 62, 67, 69, 120, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 248, 250], "count": [4, 5, 6, 7, 10, 11, 89, 91, 109, 110, 114, 116, 120, 124, 126, 127, 128, 129, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 194, 201, 203, 204, 205, 235, 238, 244, 248, 250, 251, 255, 256], "must": [4, 5, 6, 7, 12, 13, 15, 16, 23, 24, 27, 28, 33, 37, 39, 41, 44, 45, 47, 48, 56, 57, 61, 63, 65, 67, 69, 70, 71, 74, 80, 81, 83, 91, 109, 110, 114, 115, 117, 119, 120, 122, 123, 124, 125, 127, 128, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 155, 161, 163, 169, 179, 185, 187, 203, 205, 210, 215, 216, 217, 221, 222, 229, 233, 235, 239, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "last": [4, 5, 6, 7, 25, 26, 69, 84, 89, 91, 109, 110, 114, 120, 122, 123, 126, 129, 146, 168, 187, 247, 248, 250, 254], "befor": [4, 5, 6, 7, 15, 16, 19, 20, 21, 22, 23, 24, 29, 32, 33, 34, 37, 43, 45, 47, 48, 62, 69, 71, 74, 80, 81, 84, 86, 89, 91, 100, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 123, 124, 125, 127, 128, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 155, 157, 160, 162, 199, 200, 204, 209, 210, 221, 224, 225, 230, 240, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "175": [4, 5, 146, 248, 250], "infer": [4, 5, 6, 7, 12, 13, 33, 35, 36, 42, 62, 63, 120, 124, 125, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 166, 169, 185, 235, 238, 245, 246, 248, 249, 250, 251, 254, 255], "within": [4, 5, 51, 85, 125, 134, 138, 141, 143, 144, 220, 231, 232, 247, 248, 249, 250, 251, 254, 255], "least": [4, 5, 81, 86, 249, 250, 256], "suppress": [4, 5, 6, 7, 248, 250], "750m": [4, 5, 250], "onc": [4, 5, 19, 20, 35, 36, 57, 70, 71, 74, 100, 107, 109, 114, 115, 120, 122, 125, 131, 138, 141, 143, 144, 146, 246, 247, 248, 249, 250, 251, 253, 255, 256], "wait": [4, 5, 19, 20, 35, 37, 120, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 149, 162, 203, 204, 215, 221, 223, 224, 229, 230, 250, 256], "john": [4, 5, 250], "750": [4, 5, 35, 36, 124, 125, 139, 140, 145, 149, 154, 241, 250, 254], "dump": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 61, 71, 125, 126, 129, 131, 132, 136, 138, 141, 143, 144, 146, 155, 225, 234, 248, 250, 251], "argument": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 66, 67, 69, 70, 81, 83, 86, 89, 91, 109, 110, 111, 114, 117, 118, 120, 121, 122, 123, 125, 127, 128, 132, 134, 138, 139, 140, 141, 142, 143, 144, 146, 157, 158, 161, 166, 187, 200, 203, 205, 212, 215, 219, 220, 221, 222, 235, 237, 240, 242, 244, 247, 248, 249, 250, 251, 254, 255], "path": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 52, 59, 67, 68, 71, 73, 75, 77, 80, 81, 85, 86, 89, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 109, 114, 117, 118, 119, 120, 121, 122, 124, 125, 126, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 153, 155, 157, 158, 159, 160, 161, 162, 169, 185, 187, 199, 200, 203, 209, 210, 212, 222, 225, 228, 233, 235, 237, 238, 239, 240, 241, 242, 247, 248, 249, 250, 251, 252, 256], "archiv": [4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 41, 43, 44, 55, 59, 61, 62, 66, 68, 69, 71, 72, 95, 96, 98, 99, 100, 101, 103, 104, 105, 109, 114, 117, 118, 121, 124, 141, 143, 145, 149, 155, 158, 160, 161, 200, 233, 234, 237, 240, 241, 242, 245, 246, 248, 249, 250, 251, 252, 256], "zip": [4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 55, 60, 62, 64, 65, 66, 71, 77, 96, 117, 121, 124, 125, 126, 128, 129, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 200, 236, 241, 245, 246, 247, 248, 249, 250, 251, 255], "been": [4, 5, 6, 7, 12, 13, 14, 21, 22, 35, 36, 57, 62, 65, 71, 74, 99, 117, 120, 126, 136, 138, 141, 143, 144, 157, 200, 203, 210, 224, 236, 241, 244, 246, 248, 249, 250, 251, 252, 254, 255, 256], "previous": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 37, 71, 83, 141, 143, 145, 158, 159, 161, 162, 169, 200, 209, 215, 244, 247, 248, 250, 251, 252], "default": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 41, 52, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 75, 77, 81, 84, 86, 91, 100, 109, 110, 111, 112, 113, 114, 120, 122, 123, 124, 125, 126, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 155, 157, 158, 161, 166, 168, 185, 187, 200, 210, 217, 220, 222, 239, 246, 248, 249, 250, 253, 254, 255], "none": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 39, 67, 80, 81, 84, 85, 86, 89, 90, 91, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 116, 117, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 185, 187, 189, 190, 191, 195, 196, 197, 198, 199, 200, 202, 203, 206, 209, 210, 211, 212, 214, 215, 217, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 235, 237, 238, 239, 241, 242, 247, 248, 250, 251, 252, 254, 255], "acceler": [4, 5, 6, 7, 12, 13, 15, 16, 27, 28, 33, 37, 39, 41, 42, 46, 47, 51, 64, 73, 78, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 161, 163, 166, 167, 168, 169, 210, 231, 235, 238, 245, 246, 247, 248, 249, 250, 251, 252, 255], "omit": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 41, 62, 67, 74, 75, 80, 81, 86, 89, 91, 100, 109, 114, 123, 124, 125, 136, 138, 139, 140, 141, 142, 143, 144, 145, 149, 155, 157, 161, 199, 200, 205, 209, 210, 220, 224, 225, 248, 250], "kernel": [4, 5, 15, 16, 27, 28, 33, 37, 39, 41, 42, 46, 47, 63, 73, 134, 157, 161, 163, 166, 167, 169, 172, 173, 174, 175, 176, 177, 186, 188, 190, 196, 197, 198, 239, 250], "NOT": [4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 25, 26, 27, 28, 80, 85, 109, 114, 136, 138, 144, 157, 158, 161, 169, 171, 172, 175, 178, 180, 184, 188, 192, 193, 196, 200, 205, 233, 235, 241, 248, 249, 250, 256], "sinc": [4, 5, 71, 86, 100, 109, 110, 114, 115, 120, 125, 127, 128, 130, 132, 138, 141, 142, 143, 144, 145, 146, 235, 237, 242, 244, 246, 247, 248, 250, 251, 252, 254, 255], "hw": [4, 5, 250], "slow": [4, 5, 23, 24, 62, 70, 81, 84, 91, 120, 124, 125, 132, 138, 141, 143, 144, 221, 246, 249, 250, 254, 256], "otherwis": [4, 5, 43, 56, 80, 84, 85, 86, 121, 122, 134, 136, 138, 139, 140, 141, 142, 143, 145, 146, 150, 155, 162, 168, 185, 187, 200, 215, 217, 222, 247, 248, 250, 256], "port": [4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 23, 24, 29, 32, 35, 36, 44, 64, 70, 77, 157, 162, 213, 223, 224, 230, 246, 248, 249, 250], "com": [4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 34, 35, 36, 43, 44, 45, 47, 48, 58, 71, 74, 77, 88, 93, 95, 96, 98, 99, 100, 103, 104, 105, 106, 123, 126, 130, 132, 133, 135, 137, 138, 139, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 156, 187, 213, 224, 230, 233, 235, 237, 238, 239, 241, 242, 248, 249, 250, 255, 256], "attempt": [4, 5, 6, 7, 12, 13, 15, 16, 61, 109, 110, 114, 157, 234, 248, 250], "determin": [4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 30, 31, 47, 51, 63, 67, 69, 81, 86, 89, 100, 109, 110, 114, 120, 136, 138, 139, 140, 142, 145, 146, 150, 158, 161, 169, 200, 209, 232, 233, 235, 237, 238, 241, 242, 246, 248, 250, 251, 255, 256], "v": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 52, 57, 73, 84, 126, 136, 155, 168, 187, 247, 248, 250], "consol": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 62, 67, 155, 183, 219, 239, 246, 247, 248, 249, 250], "window_dur": [4, 5, 6, 7, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 248, 250], "w": [4, 5, 6, 7, 10, 11, 17, 18, 25, 26, 138, 144, 215, 219, 245, 248, 250, 255, 256], "durat": [4, 5, 6, 7, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 246, 248, 250], "m": [4, 5, 6, 7, 35, 36, 62, 74, 84, 100, 124, 129, 130, 131, 136, 138, 139, 141, 142, 143, 144, 145, 146, 151, 153, 154, 227, 237, 241, 242, 248, 250, 254], "control": [4, 5, 6, 7, 37, 39, 41, 62, 81, 84, 86, 89, 91, 100, 123, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 229, 230, 248, 250, 251, 252, 253, 254], "smooth": [4, 5, 6, 7, 62, 84, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 248, 250], "all": [4, 5, 6, 7, 10, 11, 14, 25, 26, 33, 35, 41, 42, 43, 44, 55, 57, 61, 63, 64, 67, 68, 69, 70, 71, 73, 76, 81, 84, 86, 89, 91, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 114, 117, 119, 121, 124, 125, 127, 128, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 154, 155, 157, 168, 185, 187, 199, 203, 204, 205, 219, 220, 221, 222, 224, 228, 230, 233, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "longer": [4, 5, 6, 7, 74, 100, 120, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 169, 246, 248, 249, 250, 254], "millisecond": [4, 5, 6, 7, 35, 62, 67, 84, 109, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 248, 250, 254], "give": [4, 5, 6, 7, 14, 39, 86, 100, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 199, 239, 248, 249, 250, 251], "confid": [4, 5, 6, 7, 36, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 248, 250, 254], "correct": [4, 5, 6, 7, 36, 53, 56, 124, 125, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 248, 250], "miss": [4, 5, 6, 7, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 248, 250], "some": [4, 5, 6, 7, 21, 22, 27, 28, 33, 34, 35, 36, 43, 44, 48, 57, 67, 68, 73, 74, 76, 86, 91, 100, 120, 124, 125, 129, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 185, 238, 239, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255], "number": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 25, 26, 35, 39, 47, 51, 61, 62, 63, 64, 67, 68, 69, 77, 81, 84, 85, 86, 89, 91, 100, 109, 110, 111, 112, 113, 114, 117, 118, 120, 123, 124, 125, 129, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 155, 157, 160, 163, 166, 168, 169, 171, 172, 175, 178, 180, 184, 185, 188, 191, 192, 193, 194, 196, 201, 203, 205, 210, 211, 220, 221, 230, 240, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "t": [4, 5, 6, 7, 23, 24, 33, 53, 70, 91, 99, 100, 102, 120, 122, 123, 124, 125, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 146, 149, 150, 157, 200, 220, 246, 248, 250, 251, 254], "consid": [4, 5, 6, 7, 10, 11, 37, 39, 62, 80, 81, 84, 89, 100, 111, 120, 124, 125, 134, 136, 138, 139, 140, 141, 145, 146, 149, 155, 232, 233, 237, 242, 247, 248, 250, 256], "increas": [4, 5, 6, 7, 57, 67, 81, 86, 120, 123, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 169, 246, 248, 250, 251, 252, 254, 256], "precis": [4, 5, 6, 7, 124, 125, 139, 140, 145, 146, 149, 155, 227, 234, 245, 248, 250, 255], "recal": [4, 5, 6, 7, 57, 124, 125, 138, 139, 140, 144, 145, 146, 149, 155, 234, 245, 247, 248, 250, 253, 255], "amount": [4, 5, 6, 7, 35, 62, 67, 71, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 149, 157, 162, 167, 203, 215, 224, 230, 246, 247, 248, 250, 251, 254], "new": [4, 5, 35, 36, 37, 39, 41, 43, 50, 52, 61, 62, 65, 67, 69, 74, 84, 91, 96, 100, 109, 110, 114, 118, 120, 124, 125, 139, 140, 142, 145, 149, 163, 168, 185, 187, 211, 220, 224, 231, 236, 239, 241, 247, 248, 249, 250, 252, 255, 256], "l": [4, 5, 6, 7, 70, 134, 222, 246, 248, 250], "non": [4, 5, 23, 24, 60, 68, 70, 80, 85, 99, 120, 122, 123, 124, 125, 129, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 151, 220, 230, 234, 237, 241, 242, 244, 247, 248, 249, 250, 255, 256], "specifi": [4, 5, 19, 20, 23, 24, 25, 26, 33, 34, 35, 36, 37, 39, 41, 47, 52, 58, 59, 61, 62, 64, 67, 68, 69, 70, 71, 75, 81, 83, 86, 89, 91, 96, 100, 109, 110, 114, 119, 120, 122, 123, 124, 125, 127, 128, 130, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 155, 169, 179, 185, 187, 199, 200, 203, 204, 206, 215, 230, 235, 236, 237, 240, 241, 242, 244, 246, 247, 248, 249, 250, 251, 255, 256], "volum": [4, 5, 62, 67, 81, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 149, 241, 249, 250], "u": [4, 5, 34, 43, 44, 58, 237, 242, 250, 254, 255, 256], "gain": [4, 5, 62, 84, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 149, 244, 246, 250, 251], "scaler": [4, 5, 62, 67, 124, 125, 136, 138, 139, 140, 141, 142, 143, 144, 145, 149, 174, 177, 182, 185, 191, 198, 250], "amplitud": [4, 5, 62, 67, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 149, 250], "x": [4, 5, 6, 7, 36, 39, 57, 81, 86, 90, 109, 110, 111, 112, 113, 114, 116, 120, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 141, 142, 143, 144, 146, 148, 150, 155, 170, 172, 175, 185, 188, 195, 196, 204, 221, 239, 244, 247, 248, 250, 255, 256], "gener": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 40, 41, 42, 44, 45, 46, 50, 52, 57, 59, 60, 61, 63, 65, 68, 69, 70, 72, 76, 80, 81, 83, 84, 85, 86, 88, 89, 91, 97, 107, 109, 110, 113, 114, 115, 116, 117, 118, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 169, 171, 172, 175, 178, 179, 180, 183, 184, 185, 187, 188, 192, 193, 196, 199, 200, 202, 203, 205, 206, 209, 212, 213, 228, 231, 232, 233, 237, 239, 240, 241, 242, 244, 245, 246, 252, 254, 255], "unquant": [4, 5, 117, 120, 250], "mp4": [4, 5, 250], "z": [4, 5, 12, 13, 62, 84, 250], "quantiz": [4, 5, 10, 11, 14, 15, 16, 18, 25, 26, 37, 39, 41, 49, 51, 57, 59, 60, 62, 67, 68, 69, 76, 83, 84, 110, 115, 117, 118, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 155, 156, 158, 159, 160, 164, 174, 177, 182, 185, 190, 191, 192, 195, 198, 232, 233, 234, 235, 237, 239, 240, 242, 244, 247, 248, 249, 250, 251, 254], "sensit": [4, 5, 6, 7, 35, 36, 61, 149, 248, 250], "float": [4, 5, 6, 7, 10, 11, 27, 28, 39, 56, 57, 62, 81, 84, 86, 89, 90, 91, 100, 109, 110, 114, 120, 122, 123, 134, 136, 138, 141, 144, 155, 157, 160, 162, 168, 179, 186, 187, 191, 203, 209, 214, 215, 217, 224, 227, 230, 248, 250], "indic": [4, 5, 6, 7, 35, 36, 39, 51, 61, 62, 75, 84, 89, 91, 100, 109, 114, 120, 132, 139, 166, 230, 234, 248, 250, 255], "less": [4, 5, 6, 7, 61, 100, 120, 134, 136, 139, 140, 142, 145, 157, 215, 230, 246, 247, 248, 250, 254, 256], "ha": [4, 5, 6, 7, 8, 9, 14, 21, 22, 33, 35, 36, 37, 39, 42, 44, 51, 57, 58, 60, 62, 63, 65, 70, 71, 74, 81, 84, 86, 89, 91, 98, 107, 109, 110, 114, 117, 118, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 168, 172, 175, 179, 186, 187, 196, 199, 200, 203, 220, 224, 228, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "By": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 23, 24, 33, 35, 36, 61, 64, 68, 70, 71, 81, 86, 91, 110, 120, 124, 125, 131, 132, 141, 143, 146, 150, 155, 185, 239, 245, 246, 248, 249, 250, 252, 254], "download": [4, 5, 6, 7, 12, 13, 19, 20, 34, 43, 48, 58, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 119, 125, 126, 136, 138, 139, 140, 141, 142, 143, 144, 145, 150, 153, 154, 200, 237, 241, 242, 244, 246, 247, 248, 249, 250, 253, 254, 256], "overrid": [4, 5, 6, 7, 12, 13, 25, 26, 35, 39, 41, 52, 69, 75, 77, 86, 109, 110, 114, 119, 120, 124, 125, 132, 138, 139, 140, 141, 142, 143, 144, 145, 149, 158, 160, 240, 248, 250, 254], "altern": [4, 5, 6, 7, 12, 13, 35, 37, 39, 43, 44, 62, 63, 67, 68, 74, 121, 139, 140, 179, 187, 203, 242, 248, 249, 250, 251, 252, 254, 256], "exist": [4, 5, 6, 7, 12, 13, 19, 20, 33, 66, 73, 74, 91, 127, 138, 141, 143, 144, 185, 220, 221, 222, 231, 246, 248, 250, 255], "test": [4, 5, 6, 7, 10, 11, 12, 13, 25, 26, 34, 43, 44, 50, 61, 69, 93, 100, 101, 102, 103, 109, 110, 114, 116, 117, 118, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 159, 160, 162, 199, 220, 229, 237, 240, 242, 244, 247, 251, 253, 255], "unit": [4, 5, 6, 7, 12, 13, 15, 16, 62, 67, 69, 129, 136, 149, 157, 170, 180, 204, 227, 247, 248, 250, 251, 256], "show": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 44, 61, 71, 120, 134, 136, 155, 160, 200, 234, 235, 236, 237, 240, 242, 246, 247, 248, 250, 251], "messag": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 54, 63, 120, 155, 157, 166, 222, 247, 248, 250, 251], "exit": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 121, 211, 235, 247, 248, 250, 251], "usag": [5, 7, 9, 11, 13, 16, 18, 20, 22, 24, 26, 28, 31, 32, 51, 59, 65, 81, 83, 84, 86, 125, 132, 138, 139, 140, 141, 142, 143, 144, 146, 185, 211, 221, 232, 246, 247, 248, 250, 251, 255, 256], "rgb": [6, 14, 39, 40, 86, 114, 154], "camera": [6, 7, 14, 39, 40, 57, 247, 248, 251], "arducam": [6, 7, 39, 248], "www": [6, 7, 12, 13, 23, 24, 34, 43, 44, 70, 98, 99, 100, 101, 118, 120, 125, 127, 128, 129, 132, 134, 136, 138, 139, 140, 141, 142, 143, 145, 146, 151, 154, 244, 248, 250, 255, 256], "product": [6, 7, 12, 13, 37, 39, 78, 233, 249, 256], "2mp": [6, 7], "spi": [6, 7, 8, 9, 39], "b0067": [6, 7], "arduino": [6, 7], "onlin": [6, 7, 12, 13, 35, 36, 37, 38, 39, 41, 52, 71, 246, 251], "cpp_develop": [6, 7, 12, 13], "image_classi": [6, 7], "fier": [6, 7], "html": [6, 7, 12, 13, 33, 34, 37, 39, 41, 43, 44, 81, 84, 124, 125, 127, 128, 129, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 151, 157, 239, 244, 248, 249, 250, 251, 255, 256], "hardwar": [6, 7, 12, 13, 14, 15, 16, 33, 41, 42, 44, 46, 51, 64, 73, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 161, 163, 166, 169, 231, 246, 250, 255], "setup": [6, 7, 12, 13, 54, 75, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 247, 248, 250, 251], "image_classif": [6, 7, 65, 67, 68, 72, 232, 250], "rock_paper_scissor": [6, 7, 39, 104, 105, 248], "mvp": [6, 7, 15, 16, 33, 37, 39, 41, 42, 46, 51, 78, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 231, 245, 246, 247, 248, 249, 250, 251, 252, 255], "again": [6, 7, 35, 37, 138, 139, 141, 143, 144, 146, 239, 246, 248, 250, 254], "uniqu": [6, 7, 37, 40, 62, 136, 167, 206, 231, 247, 248, 256], "thei": [6, 7, 49, 62, 67, 70, 84, 89, 91, 100, 109, 110, 114, 117, 123, 124, 125, 136, 138, 139, 140, 141, 143, 144, 146, 149, 243, 246, 247, 248, 249, 250, 251, 255, 256], "everi": [6, 7, 10, 11, 23, 24, 70, 109, 110, 111, 114, 120, 124, 125, 132, 136, 139, 140, 141, 142, 143, 145, 146, 155, 246, 248, 250], "closer": [6, 7, 141, 143, 248], "suffici": [6, 7, 39, 248], "prior": [6, 7, 248], "improv": [6, 7, 12, 13, 23, 24, 81, 86, 91, 120, 124, 125, 126, 130, 131, 132, 136, 139, 140, 141, 142, 143, 145, 146, 149, 169, 231, 246, 248, 250, 251, 252, 254, 255], "throughput": [6, 7, 12, 13, 91, 125, 132, 138, 141, 143, 144, 169, 246, 248], "image_classifi": [6, 7, 39, 146, 248], "classify_imag": [7, 14, 37, 78, 146, 247, 248, 251], "silicon": [8, 14, 35, 36, 42, 43, 44, 135, 140, 232, 237, 241, 244, 246, 247, 248, 250, 251, 254], "lab": [8, 14, 35, 36, 42, 43, 44, 135, 140, 232, 237, 241, 244, 246, 247, 248, 250, 251, 254], "simplic": [8, 9, 14, 42, 44, 77, 138, 220, 232, 247, 248, 251], "list": [8, 9, 10, 11, 62, 66, 71, 75, 77, 81, 86, 89, 91, 94, 100, 109, 110, 111, 114, 117, 118, 119, 120, 121, 123, 126, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 155, 157, 160, 166, 167, 169, 171, 172, 174, 175, 177, 178, 179, 180, 184, 185, 187, 188, 191, 192, 193, 195, 196, 198, 199, 203, 204, 205, 209, 210, 219, 220, 222, 224, 225, 227, 230, 239, 246, 248, 250, 255, 256], "below": [8, 9, 27, 28, 39, 62, 71, 80, 81, 84, 109, 110, 114, 130, 132, 139, 140, 142, 145, 146, 150, 224, 246, 247, 248, 249, 250, 252, 254, 255, 256], "its": [8, 9, 14, 17, 18, 37, 39, 51, 60, 61, 67, 71, 81, 86, 89, 101, 102, 103, 121, 125, 131, 132, 134, 136, 138, 141, 143, 144, 145, 146, 182, 200, 205, 221, 222, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255], "descript": [8, 9, 14, 27, 28, 40, 44, 49, 59, 63, 67, 69, 76, 107, 109, 110, 114, 115, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 161, 167, 185, 231, 232, 237, 238, 241, 242, 244, 248, 249, 250], "h": [8, 9, 19, 20, 23, 24, 29, 32, 35, 36, 62, 71, 81, 84, 209, 227, 246, 255], "displai": [8, 9, 10, 11, 25, 26, 37, 39, 61, 64, 70, 134, 136, 155, 185, 234, 246, 247, 248, 250, 251], "version": [8, 9, 50, 62, 67, 69, 74, 86, 100, 115, 117, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 163, 167, 169, 179, 200, 222, 233, 237, 238, 239, 241, 242, 244, 245, 247, 248, 250, 251, 254, 255, 256], "adapt": [8, 9, 77, 129, 134, 136, 146, 151, 153, 220, 248, 250, 251], "aem": [8, 9], "advanc": [8, 9, 232, 250, 255], "energi": [8, 9, 15, 16, 36, 61, 63, 68, 72, 156, 157, 168, 235, 237, 238, 242, 248, 250, 251, 254, 255], "monitor": [8, 9, 14, 23, 44, 59, 67, 120, 124, 125, 126, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 221, 233, 245, 248, 250], "combin": [8, 9, 125, 132, 138, 141, 143, 144, 154, 203, 244], "one": [8, 9, 10, 11, 17, 18, 19, 20, 25, 26, 36, 39, 44, 50, 51, 54, 67, 71, 77, 81, 83, 86, 100, 109, 110, 114, 115, 118, 120, 122, 125, 128, 132, 134, 136, 138, 141, 143, 144, 145, 155, 157, 166, 169, 179, 187, 220, 221, 231, 232, 240, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "ctune": [8, 9], "ebl": [8, 9], "encrypt": [8, 9], "decrypt": [8, 9], "other": [8, 9, 10, 11, 19, 20, 44, 50, 61, 62, 67, 69, 70, 71, 74, 81, 86, 89, 91, 100, 111, 115, 117, 120, 122, 125, 127, 128, 132, 138, 141, 143, 144, 155, 185, 230, 244, 247, 248, 249, 250, 251, 253, 255, 256], "handl": [8, 9, 57, 67, 142, 143, 144, 228], "extflash": [8, 9], "extern": [8, 9, 157, 232, 248, 250], "flash": [8, 9, 27, 28, 35, 37, 39, 41, 51, 52, 63, 65, 124, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 235, 238, 245, 246, 247, 248, 249, 250, 251, 254, 255], "write": [8, 9, 23, 24, 39, 41, 52, 70, 75, 80, 85, 107, 120, 124, 125, 132, 138, 139, 140, 141, 142, 143, 144, 146, 185, 215, 217, 219, 224, 225, 229, 230, 248, 250, 255, 256], "gbl": [8, 9], "nvm3": [8, 9], "readmem": [8, 9], "memori": [8, 9, 14, 17, 27, 28, 33, 37, 39, 41, 47, 48, 51, 52, 59, 63, 81, 86, 101, 102, 103, 124, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 223, 233, 235, 237, 238, 241, 242, 245, 247, 248, 249, 250, 251, 254, 255], "secur": [8, 9, 71, 233, 246], "element": [8, 9, 10, 11, 39, 62, 86, 89, 109, 110, 111, 114, 131, 146, 155, 191, 193, 194, 222], "swo": [8, 9], "tokendump": [8, 9], "token": [8, 9, 256], "tokenhead": [8, 9], "group": [8, 9, 60, 89, 92, 122, 138, 144, 206, 247, 250], "current": [8, 9, 17, 18, 19, 20, 35, 36, 37, 65, 66, 73, 74, 78, 84, 89, 109, 110, 114, 120, 122, 125, 132, 138, 139, 141, 143, 144, 157, 171, 172, 175, 178, 179, 180, 184, 185, 186, 187, 188, 192, 193, 196, 204, 210, 220, 222, 225, 227, 228, 235, 248, 250, 251, 252, 254, 255, 256], "done": [8, 9, 39, 57, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 81, 86, 117, 124, 127, 128, 139, 193, 203, 223, 232, 240, 241, 244, 246, 247, 248, 249, 250, 251, 254, 255], "evaluate_model": [10, 49, 61, 66, 111, 112, 113, 115, 118, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 156, 234, 244, 248, 250], "valid": [10, 11, 23, 24, 57, 65, 70, 81, 86, 89, 91, 93, 100, 109, 110, 114, 118, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 186, 206, 235, 237, 238, 239, 241, 242, 244, 247, 248, 250, 251, 254, 255, 256], "summari": [10, 11, 14, 21, 22, 25, 26, 59, 60, 62, 109, 110, 114, 116, 117, 118, 120, 127, 128, 155, 156, 157, 159, 179, 183, 185, 187, 203, 204, 232, 233, 235, 241, 244, 245, 247, 251, 254, 255, 256], "model_evalu": [10, 11], "h5": [10, 11, 17, 18, 21, 22, 25, 26, 29, 32, 53, 55, 60, 68, 72, 117, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 158, 159, 162, 237, 242, 244, 247, 248, 250, 252], "float32": [10, 11, 39, 51, 56, 61, 62, 65, 76, 80, 81, 83, 85, 90, 91, 117, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 179, 185, 234, 235, 237, 239, 244, 248, 250, 251], "audio_example1": [10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 62, 67, 69], "limit": [10, 11, 25, 26, 34, 43, 44, 89, 91, 100, 109, 110, 114, 118, 134, 150, 153, 155, 157, 215, 221, 246, 250, 255, 256], "max": [10, 11, 62, 81, 84, 120, 123, 134, 138, 170, 174, 177, 182, 190, 198, 204, 220, 246, 247, 254, 255, 256], "auto": [10, 11, 62, 67, 84, 111, 114, 120, 126, 133, 141, 143, 150, 155, 200], "encod": [10, 11, 67, 81, 86, 91, 100, 109, 111, 114, 125, 126, 128, 132, 133, 138, 141, 143, 144, 150, 155, 185, 249, 251], "fully_connected_autoencod": [10, 11], "dir": [10, 11, 12, 13, 17, 18, 25, 26, 44, 70, 122, 136, 155, 210, 220, 235, 237, 238, 239, 241, 242, 247], "eval": [10, 11, 60, 109, 111, 114, 136, 155, 247], "updat": [10, 11, 14, 17, 18, 27, 28, 34, 43, 44, 49, 50, 60, 61, 71, 84, 91, 118, 120, 122, 125, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 155, 156, 158, 161, 163, 168, 169, 185, 187, 204, 222, 234, 235, 237, 238, 240, 242, 245, 246, 247, 249, 250, 251, 255, 256], "kera": [10, 11, 17, 18, 21, 22, 25, 26, 29, 32, 53, 60, 61, 69, 70, 81, 85, 86, 103, 107, 109, 110, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 155, 158, 160, 162, 232, 239, 244, 247, 251, 252, 254, 255], "weight": [10, 11, 17, 18, 23, 24, 25, 26, 27, 28, 33, 51, 59, 61, 62, 65, 69, 70, 76, 86, 109, 110, 114, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 155, 158, 160, 161, 174, 177, 180, 182, 198, 231, 232, 234, 237, 241, 242, 244, 247, 248, 249, 250, 254, 255], "previou": [10, 11, 17, 18, 25, 26, 51, 70, 122, 146, 155, 169, 215, 219, 246, 248, 251], "session": [10, 11, 17, 18, 19, 20, 25, 26, 100, 119, 120, 122, 155, 203, 245, 246], "absolut": [10, 11, 17, 18, 25, 26, 71, 89, 100, 117, 120, 122, 138, 139, 140, 141, 142, 143, 144, 145, 155, 215, 220, 250, 251], "best": [10, 11, 17, 18, 25, 26, 120, 124, 145, 155, 160, 237, 242, 245, 246, 248, 249, 250, 251, 252, 256], "find": [10, 11, 17, 18, 25, 26, 35, 36, 41, 71, 73, 121, 123, 134, 136, 138, 139, 141, 143, 144, 155, 157, 222, 224, 230, 245, 246, 247, 248, 250, 251, 255], "filenam": [10, 11, 17, 18, 25, 26, 67, 69, 70, 81, 82, 86, 87, 89, 91, 100, 117, 120, 138, 139, 142, 144, 155, 185, 200, 220, 227, 239, 247, 255], "evaluateautoencod": [10, 11], "mixin": [10, 11, 19, 20, 61, 67, 69, 71, 110, 111, 112, 115, 117, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 244, 248, 250], "comma": [10, 11, 155, 222], "seper": [10, 11, 155, 246], "first": [10, 11, 29, 32, 34, 35, 36, 37, 39, 41, 43, 44, 50, 52, 54, 63, 68, 70, 72, 73, 81, 84, 86, 98, 100, 109, 110, 111, 114, 127, 128, 141, 143, 155, 157, 158, 159, 168, 171, 187, 194, 201, 205, 210, 235, 237, 239, 242, 244, 246, 247, 248, 250, 251, 253, 254], "normal": [10, 11, 37, 41, 62, 74, 81, 84, 86, 111, 120, 126, 132, 136, 141, 143, 150, 155, 169, 185, 220, 239, 248], "abnorm": [10, 11, 111, 126, 155], "independ": [10, 11, 111, 120, 122, 155, 232], "place": [10, 11, 37, 41, 81, 86, 90, 94, 96, 100, 118, 155, 193], "upper": [10, 11, 73, 86, 118, 150, 153, 155, 220, 246, 250], "decod": [10, 11, 80, 85, 126, 138, 141, 143, 144, 155], "diagram": [10, 11, 25, 26, 60, 61, 155, 156, 160, 234, 247, 248, 252, 255], "arch": [10, 11], "doe": [10, 11, 15, 16, 25, 26, 53, 57, 62, 63, 68, 69, 71, 72, 80, 81, 84, 85, 89, 99, 109, 110, 114, 115, 118, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 168, 171, 172, 175, 178, 180, 184, 187, 188, 192, 193, 196, 206, 222, 233, 235, 237, 242, 244, 247, 248, 249, 250, 251, 252, 255], "thing": [10, 11, 25, 26, 51, 222, 246, 247, 248, 250, 255], "post": [10, 11, 15, 16, 25, 26, 65, 67, 118, 120, 139, 144, 155, 157, 158, 160, 245, 255], "upload": [10, 11, 15, 16, 19, 20, 25, 26, 63, 64, 72, 119, 122, 141, 143, 155, 157, 158, 160, 245, 246], "evalu": [11, 14, 25, 26, 49, 53, 59, 60, 65, 66, 76, 88, 96, 100, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 156, 231, 232, 233, 244, 245, 251, 254], "fingerprint": [12, 13, 14, 40, 136, 137, 231, 248, 251], "authent": [12, 13, 40, 136, 137, 231], "eader": [12, 13], "r503": [12, 13, 37, 247], "adafruit": [12, 13, 249], "4651": [12, 13], "fingerprint_": [12, 13], "ee": [12, 13, 204, 256], "fingerprint_authent": [12, 13, 247], "sequenc": [12, 13, 37, 61, 69, 81, 109, 110, 114, 246, 247, 250, 255], "finger": [12, 13, 37, 136, 247], "With": [12, 13, 19, 20, 35, 36, 37, 39, 41, 44, 57, 62, 63, 69, 70, 71, 84, 86, 120, 146, 240, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256], "integ": [12, 13, 23, 24, 35, 65, 70, 81, 86, 91, 101, 102, 103, 109, 110, 114, 117, 120, 123, 124, 125, 132, 134, 141, 143, 160, 170, 186, 191, 194, 209, 248, 255], "collect": [12, 13, 96, 136, 144, 179, 232, 244, 245, 247, 248, 250, 251], "reader": [12, 13, 37], "fingerprint_read": [13, 14, 37, 78, 136, 247, 248, 251], "describ": [14, 34, 43, 44, 59, 61, 62, 63, 65, 68, 69, 71, 72, 73, 74, 231, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "avail": [14, 19, 20, 34, 40, 41, 43, 44, 46, 61, 62, 63, 65, 68, 69, 70, 71, 72, 74, 81, 86, 88, 91, 96, 99, 103, 111, 112, 115, 122, 125, 132, 138, 141, 143, 144, 156, 157, 203, 213, 215, 220, 221, 230, 233, 237, 242, 245, 246, 248, 249, 250, 251, 252, 254, 256], "prompt": [14, 43, 73, 100, 246], "access": [14, 43, 45, 47, 48, 61, 62, 63, 65, 68, 69, 72, 73, 76, 107, 148, 183, 185, 187, 222, 232, 246, 247, 248, 250, 251, 256], "mltk_pyvenv": [14, 50, 74], "bat": [14, 43, 44, 74], "bin": [14, 43, 44, 74, 142, 150, 153, 179, 187, 251, 254, 255], "profil": [14, 16, 17, 23, 24, 33, 37, 39, 40, 49, 51, 52, 59, 60, 66, 78, 107, 115, 118, 120, 122, 125, 127, 128, 129, 130, 132, 134, 156, 157, 164, 166, 168, 169, 223, 232, 233, 244, 245, 247], "etc": [14, 27, 28, 67, 109, 110, 114, 120, 141, 143, 155, 232, 245, 247, 248, 249, 250, 256], "addit": [14, 16, 28, 46, 51, 57, 62, 65, 68, 74, 76, 77, 86, 115, 117, 118, 120, 122, 123, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 149, 150, 157, 171, 172, 175, 178, 180, 184, 185, 188, 192, 193, 196, 203, 205, 210, 239, 241, 244, 247, 248, 250, 251, 254, 255], "flag": [14, 63, 68, 71, 72, 120, 224, 246, 248, 250], "append": [14, 25, 26, 69, 71, 121, 125, 129, 132, 134, 136, 138, 139, 141, 143, 144, 148, 209, 220, 221, 222, 240, 247, 248, 250], "effici": [14, 15, 16, 59, 61, 63, 67, 81, 88, 123, 138, 139, 141, 143, 144, 233, 235, 246, 248, 249, 250, 251, 252, 254, 255], "tensorboard": [14, 24, 59, 67, 74, 120, 124, 125, 132, 141, 143, 233], "ssh": [14, 20, 59, 69, 119, 233, 245, 248, 249, 250], "remot": [14, 19, 20, 63, 64, 72, 73, 119, 233, 242, 247, 248, 250, 251, 255], "server": [14, 19, 20, 23, 24, 29, 32, 59, 63, 70, 71, 72, 73, 74, 122, 162, 242, 246, 247, 248, 250, 251, 255], "reduc": [14, 15, 16, 17, 41, 53, 59, 65, 120, 145, 157, 186, 221, 232, 233, 245, 246, 248, 250, 251, 254, 255, 256], "footprint": [14, 17, 233], "summar": [14, 22, 49, 62, 109, 110, 114, 124, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 159, 232, 247, 248, 250, 251], "graph": [14, 23, 24, 29, 32, 70, 72, 91, 120, 124, 125, 132, 141, 143, 162, 232, 242, 247, 248, 250, 251], "interact": [14, 29, 32, 59, 61, 72, 100, 156, 162, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 247, 248, 250, 251, 255], "visual": [14, 23, 24, 29, 30, 34, 42, 43, 45, 47, 48, 50, 58, 59, 61, 70, 74, 86, 120, 124, 125, 132, 134, 141, 143, 152, 154, 158, 162, 232, 233, 245, 246, 247, 251, 253], "paramet": [14, 17, 18, 27, 28, 30, 31, 39, 49, 51, 59, 61, 65, 68, 76, 80, 81, 83, 84, 85, 86, 89, 90, 91, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109, 110, 114, 116, 117, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 174, 175, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 192, 193, 195, 196, 198, 199, 200, 202, 203, 206, 209, 210, 211, 212, 214, 215, 217, 219, 220, 221, 222, 224, 225, 227, 228, 230, 233, 244, 246, 252, 254, 255], "ani": [15, 16, 19, 20, 25, 26, 27, 28, 33, 35, 36, 37, 39, 41, 44, 48, 50, 62, 63, 67, 68, 70, 71, 72, 73, 74, 76, 81, 84, 86, 100, 109, 110, 114, 115, 117, 118, 119, 120, 122, 125, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 158, 215, 222, 224, 230, 233, 245, 246, 247, 248, 250, 251, 253, 254, 255], "profile_model": [15, 49, 63, 66, 74, 115, 118, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 156, 164, 169, 223, 235, 238, 244, 255], "model_profil": [15, 16, 27, 28, 33], "image_example1": [15, 16, 25, 26, 29, 32, 33, 41, 61, 63, 66, 67, 69, 71, 234, 235, 236, 237, 238, 239, 240, 242, 248, 251], "estim": [15, 16, 63, 134, 136, 144, 157, 163, 169, 238, 247, 248, 250, 255], "without": [15, 16, 27, 28, 48, 62, 68, 74, 86, 100, 120, 138, 139, 140, 142, 144, 146, 158, 159, 185, 200, 224, 233, 246, 248, 249, 250, 251], "some_model": [15, 16], "One": [15, 16, 17, 18, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 57, 70, 81, 86, 96, 100, 110, 116, 118, 120, 121, 129, 215, 246, 247, 248, 250], "compil": [15, 16, 34, 43, 44, 67, 69, 96, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 163, 169, 223, 244, 247, 248, 250, 251, 252, 254], "rather": [15, 16, 17, 18, 21, 22, 29, 32, 41, 86, 100, 139, 140, 142, 146, 158, 162, 241, 248, 250], "instead": [15, 16, 27, 28, 35, 37, 39, 41, 47, 52, 71, 73, 74, 81, 86, 109, 110, 114, 120, 158, 161, 221, 232, 244, 246, 248, 250, 254], "o": [15, 16, 17, 18, 21, 22, 27, 28, 71, 75, 77, 91, 130, 136, 138, 139, 141, 142, 143, 144, 204, 210, 220, 221, 226, 228, 235, 237, 238, 239, 241, 242, 248, 249, 255, 256], "report": [15, 16, 157, 245, 248, 250, 254], "format": [15, 16, 19, 20, 25, 26, 34, 36, 43, 44, 56, 57, 60, 62, 64, 71, 77, 81, 84, 100, 120, 134, 141, 143, 148, 157, 167, 169, 183, 209, 211, 227, 231, 244, 248, 250], "return": [15, 16, 53, 56, 61, 63, 67, 69, 71, 80, 81, 83, 84, 85, 86, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 209, 210, 211, 212, 214, 215, 217, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 235, 239, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255], "unformat": [15, 16], "metric": [15, 16, 23, 24, 67, 69, 70, 98, 109, 110, 114, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 160, 163, 169, 231, 233, 238, 244, 247, 248, 250, 251, 252, 254], "cpu": [15, 16, 41, 51, 63, 71, 81, 86, 91, 124, 125, 126, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 168, 221, 235, 238, 245, 249, 251, 254, 255], "cycl": [15, 16, 41, 47, 51, 57, 63, 124, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 168, 235, 238, 248, 250, 251, 254, 255], "quantize_model": [17, 49, 65, 117, 118, 156, 236], "mltk_model": [17, 18, 61, 62, 66, 67, 69, 111, 117, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 158, 160, 244, 247, 248, 250], "tflite_convert": [17, 18, 56, 57, 65, 67, 69, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 158, 236, 244, 248, 250], "model_quant": [17, 18], "associ": [17, 18, 27, 28, 35, 36, 37, 39, 91, 100, 157, 159, 166, 171, 172, 175, 178, 180, 184, 185, 188, 192, 193, 195, 196, 246, 247, 248, 249, 250, 251, 252, 254, 255], "structur": [17, 18, 27, 28, 42, 62, 76, 89, 91, 107, 130, 161, 199, 233, 247, 248, 250, 256], "back": [19, 20, 35, 36, 138, 144, 239, 248], "open": [19, 20, 23, 24, 50, 64, 71, 72, 73, 100, 138, 144, 214, 215, 216, 217, 220, 224, 225, 230, 235, 237, 238, 239, 241, 242, 246, 248, 249, 250, 251, 253, 254, 255, 256], "user_set": [19, 20, 66, 75, 77, 119, 220, 245, 246], "yaml": [19, 20, 27, 28, 66, 75, 77, 119, 220, 245, 246], "config": [19, 20, 34, 35, 36, 37, 39, 41, 52, 77, 122, 124, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 171, 172, 175, 178, 180, 184, 188, 192, 193, 196, 203, 204, 237, 239, 241, 246, 248, 249, 250, 254, 255, 256], "export": [19, 20, 71, 75, 91, 119, 141, 143, 221, 232, 255], "variabl": [19, 20, 33, 36, 37, 39, 41, 44, 66, 71, 77, 91, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 119, 120, 122, 141, 143, 209, 210, 220, 221, 222, 225, 233, 248, 251, 253], "startup": [19, 20, 35, 36, 37, 39, 246], "shell": [19, 20, 71, 119, 225, 247, 248, 250, 251], "7": [19, 20, 37, 73, 74, 75, 103, 124, 125, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 162, 214, 235, 237, 238, 240, 241, 242, 244, 248, 250, 251, 254, 255], "detach": [19, 20, 71], "subprocess": [19, 20, 71, 81, 86, 91, 125, 132, 138, 141, 143, 144, 221, 237, 242, 251], "continu": [19, 20, 43, 71, 120, 129, 138, 141, 143, 144, 204, 229, 235, 236, 237, 240, 242, 244, 247, 248, 249, 250, 251, 252, 253, 256], "even": [19, 20, 62, 71, 84, 100, 130, 246, 248, 256], "prematur": [19, 20, 71, 246], "close": [19, 20, 43, 100, 136, 214, 215, 217, 224, 230, 246, 247, 256], "8": [19, 20, 34, 39, 43, 44, 67, 69, 73, 74, 81, 84, 89, 91, 103, 120, 123, 124, 125, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 185, 230, 235, 237, 238, 240, 241, 242, 244, 248, 250, 251, 254, 255, 256], "poll": [19, 20, 71], "abort": [19, 20, 37, 71, 224, 246], "9": [19, 20, 34, 43, 44, 73, 74, 75, 101, 102, 103, 123, 124, 125, 126, 129, 130, 131, 132, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 222, 235, 237, 238, 240, 241, 242, 244, 246, 248, 249, 250, 251, 252, 254, 255], "10": [19, 20, 34, 37, 39, 43, 44, 62, 67, 69, 73, 74, 78, 83, 84, 101, 102, 103, 109, 110, 114, 120, 124, 125, 126, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 204, 222, 235, 237, 238, 241, 244, 246, 248, 249, 250, 251, 252, 254, 255, 256], "11": [19, 20, 126, 130, 131, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 235, 237, 241, 242, 248, 250, 251, 254, 255], "12": [19, 20, 75, 81, 123, 124, 130, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 153, 154, 235, 237, 241, 248, 249, 251, 254, 255, 256], "shutdown": [19, 20, 125, 132, 138, 141, 143, 144, 203, 221], "credenti": [19, 20, 70, 71, 203, 249, 256], "keyword_spotting_on_off_v2": [19, 20, 35, 71, 246, 250], "line": [19, 20, 27, 28, 42, 43, 44, 45, 47, 48, 61, 63, 64, 65, 68, 69, 70, 72, 74, 77, 78, 107, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 149, 209, 222, 225, 233, 246, 249, 252, 254, 255, 256], "ssh4": [19, 20, 246], "vast": [19, 20, 71, 119, 231, 232, 245, 248, 249, 250, 251, 252, 254], "ai": [19, 20, 71, 119, 144, 231, 232, 245, 248, 249, 250, 251, 252, 254, 255, 256], "p": [19, 20, 23, 24, 27, 28, 29, 32, 67, 71, 73, 86, 100, 125, 131, 136, 138, 141, 143, 144, 146, 246, 248, 251], "18492": [19, 20], "id_vast_ai": [19, 20, 71, 246], "start": [19, 20, 23, 24, 29, 30, 31, 32, 35, 36, 39, 41, 52, 64, 71, 73, 89, 91, 109, 110, 114, 118, 125, 127, 128, 132, 135, 138, 141, 143, 144, 145, 150, 194, 201, 205, 221, 223, 224, 230, 237, 242, 244, 250, 251, 252, 254, 256], "later": [19, 20, 57, 62, 65, 71, 87, 120, 138, 139, 140, 141, 142, 143, 145, 179, 187, 236, 239, 241, 246, 248, 250], "resum": [19, 20, 25, 26, 71, 120, 122, 160, 246], "store": [19, 20, 25, 26, 59, 60, 71, 117, 169, 245, 246, 247, 255], "retriev": [19, 20, 39, 61, 62, 132, 141, 143, 185, 223, 239, 252], "disconnect": [19, 20, 71, 217], "discard": [19, 20, 141, 143], "forc": [19, 20, 35, 36, 37, 39, 41, 52, 71, 136, 179, 187, 211, 237, 242, 246, 249, 250, 255], "sshmixin": [19, 20, 138, 141, 143], "model_training_via_ssh": [19, 20], "cancel": [19, 20], "mltk_command": [19, 20], "hostnam": [19, 20, 77, 246], "login": [19, 20, 71, 245], "22": [19, 20, 71, 124, 125, 130, 134, 136, 138, 139, 142, 144, 145, 150, 151, 154, 235, 237, 242, 247, 250, 251, 254], "myserv": [19, 20, 71], "192": [19, 20, 64, 71, 136, 150, 254], "168": [19, 20, 64, 71, 153, 254], "56": [19, 20, 71, 124, 138, 139, 144, 145, 250, 251, 254], "ubuntu": [19, 20, 34, 43, 44, 71], "456": [19, 20, 71, 254], "worksp": [19, 20], "identity_fil": [19, 20], "kei": [19, 20, 62, 84, 109, 110, 114, 117, 129, 138, 145, 157, 168, 171, 172, 175, 178, 179, 180, 184, 185, 187, 188, 192, 193, 196, 222, 239, 245, 252, 255, 256], "privat": [19, 20, 71, 246, 256], "pem": [19, 20], "listen": [19, 20, 23, 24, 29, 32, 35, 64, 71, 162, 249, 250], "password": [19, 20, 246], "clean": [19, 20, 25, 26, 45, 47, 48, 70, 100, 115, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 160, 199, 210, 244, 246, 248, 250, 253, 254, 256], "AND": [19, 20, 120, 121, 125, 138, 139, 140, 141, 142, 143, 144, 145, 233, 250], "summarize_model": [21, 49, 68, 118, 156, 237, 241], "model_summari": [21, 22], "tf": [21, 22, 49, 53, 57, 65, 67, 69, 70, 76, 80, 85, 91, 103, 109, 110, 111, 112, 113, 114, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 157, 163, 166, 167, 169, 231, 244, 247, 251], "someth": [23, 24, 35, 36, 41, 246, 247, 248, 253], "often": [23, 24, 120], "abl": [23, 24, 35, 36, 38, 39, 41, 47, 51, 61, 63, 73, 122, 232, 246, 248, 249, 253, 255], "measur": [23, 24, 61, 63, 120, 222], "workflow": [23, 24], "track": [23, 24, 70, 127, 128, 138, 139, 140, 141, 142, 143, 144, 145, 146, 244, 245, 248, 250, 252], "experi": [23, 24, 122, 245, 247], "like": [23, 24, 67, 69, 71, 74, 84, 86, 100, 109, 110, 114, 117, 120, 122, 123, 140, 144, 168, 185, 187, 219, 224, 225, 232, 244, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256], "loss": [23, 24, 67, 69, 70, 109, 110, 111, 114, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 244, 245, 246, 248, 250, 251, 252, 254], "accuraci": [23, 24, 51, 59, 61, 67, 70, 96, 98, 120, 124, 125, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 156, 232, 233, 234, 244, 245, 247, 251, 254, 255], "dimension": [23, 24, 70, 134, 248], "space": [23, 24, 41, 70, 134, 136, 247], "org": [23, 24, 34, 43, 44, 70, 81, 98, 99, 100, 118, 120, 123, 125, 126, 127, 128, 132, 134, 136, 139, 140, 141, 142, 143, 145, 146, 149, 150, 151, 153, 154, 157, 244, 248, 250, 251, 256], "get_start": [23, 24], "model_training_monitor": [23, 24], "being": [23, 24, 35, 36, 54, 56, 67, 86, 118, 134, 138, 141, 211, 233, 244, 246, 248, 250, 253], "properti": [23, 24, 36, 62, 65, 67, 69, 70, 71, 81, 84, 86, 87, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 125, 127, 128, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 155, 157, 160, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 205, 206, 207, 208, 215, 217, 218, 221, 222, 224, 230, 239, 244, 247, 248, 249, 250], "dict": [23, 24, 70, 71, 81, 84, 86, 89, 91, 109, 110, 114, 116, 118, 120, 122, 124, 125, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 153, 154, 155, 157, 158, 160, 161, 166, 167, 168, 171, 172, 175, 178, 179, 180, 184, 185, 187, 188, 192, 193, 196, 203, 210, 215, 221, 222, 224, 225, 230, 248, 250, 252], "histogram_freq": [23, 24, 70, 120, 124, 125, 132, 141, 143], "frequenc": [23, 24, 62, 70, 84, 96, 120, 124, 125, 132, 138, 141, 142, 143, 144, 150, 153, 249, 251, 254], "epoch": [23, 24, 25, 26, 67, 70, 109, 110, 114, 115, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 158, 159, 160, 235, 237, 242, 244, 246, 248, 249, 250, 254], "histogram": [23, 24, 70, 120, 124, 125, 132, 141, 143], "layer": [23, 24, 41, 48, 57, 62, 65, 68, 70, 72, 85, 109, 110, 114, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 165, 166, 168, 169, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 184, 185, 186, 188, 189, 190, 192, 193, 196, 197, 198, 235, 237, 241, 242, 244, 247, 248, 250, 251, 252, 254, 255], "won": [23, 24, 70, 100, 120, 122, 124, 125, 132, 141, 143], "split": [23, 24, 70, 81, 86, 89, 91, 100, 120, 124, 125, 126, 127, 128, 132, 138, 141, 143, 144, 222, 244, 248], "write_graph": [23, 24, 70, 120, 124, 125, 132, 141, 143], "whether": [23, 24, 64, 70, 81, 86, 109, 110, 114, 120, 123, 124, 125, 132, 134, 141, 143, 246], "becom": [23, 24, 70, 120, 124, 125, 132, 141, 143, 246, 248], "quit": [23, 24, 70, 120, 124, 125, 132, 141, 143, 248], "write_imag": [23, 24, 70, 120, 124, 125, 132, 141, 143], "update_freq": [23, 24, 70, 120, 124, 125, 132, 141, 143], "batch": [23, 24, 67, 70, 81, 82, 85, 86, 87, 89, 90, 91, 109, 110, 111, 112, 113, 114, 120, 124, 125, 127, 128, 132, 136, 138, 139, 141, 143, 144, 148, 185, 221, 244, 246, 251, 255], "let": [23, 24, 44, 70, 120, 124, 125, 132, 139, 140, 141, 142, 143, 145, 146, 245, 246, 248, 250, 254, 255], "callback": [23, 24, 50, 57, 81, 86, 89, 91, 111, 112, 113, 117, 118, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 153, 154, 155, 169, 199, 203, 220, 221, 224, 225, 226, 244, 247], "too": [23, 24, 70, 120, 124, 125, 132, 141, 143, 157, 247, 248, 249, 250, 251, 254, 256], "frequent": [23, 24, 70, 120, 124, 125, 132, 141, 143, 233, 246, 250], "profile_batch": [23, 24, 70, 120, 124, 125, 132, 141, 143], "characterist": [23, 24, 36, 61, 70, 120, 124, 125, 132, 141, 143, 155, 248, 249, 256], "neg": [23, 24, 61, 70, 120, 124, 125, 132, 141, 143, 148, 246], "tupl": [23, 24, 70, 80, 81, 84, 86, 89, 91, 93, 100, 101, 102, 103, 109, 110, 114, 117, 120, 123, 124, 125, 127, 128, 132, 134, 136, 138, 139, 141, 142, 143, 144, 145, 157, 160, 168, 169, 172, 175, 185, 187, 188, 194, 196, 200, 211, 220, 224, 225, 244], "pair": [23, 24, 70, 71, 84, 120, 124, 125, 132, 134, 136, 141, 143, 168, 179, 187], "signifi": [23, 24, 37, 70, 120, 124, 125, 132, 141, 143], "rang": [23, 24, 57, 62, 70, 81, 84, 86, 98, 101, 102, 103, 120, 124, 125, 127, 128, 129, 132, 134, 136, 138, 141, 143, 151, 221, 244, 246, 247, 250, 254], "second": [23, 24, 63, 70, 86, 98, 100, 120, 124, 125, 132, 137, 141, 143, 157, 168, 171, 203, 215, 224, 230, 246, 248, 250, 251, 254, 255], "keyword_spotting_on_ff_v2": [23, 24], "webpag": [23, 24, 36, 41, 59, 63, 64, 70, 72, 76, 242, 245, 246, 248, 250], "gui": [23, 24, 30, 31, 34, 43, 44, 70, 185, 250, 254], "separ": [23, 24, 125, 132, 138, 141, 143, 144, 217, 221, 246, 251], "localhost": [23, 24, 64, 242, 246, 250], "6002": [23, 24], "launch": [23, 24, 50, 70, 253, 254], "webbrows": [23, 24, 29, 32, 162], "train_model": [25, 49, 66, 69, 115, 118, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 156, 240, 244, 253], "model_train": [25, 26], "dryrun": [25, 26, 116, 125, 127, 128, 132, 138, 141, 143, 144, 244], "checkpoint": [25, 26, 67, 69, 120, 124, 125, 126, 130, 131, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 248, 250], "43": [25, 26, 27, 28, 62, 131, 134, 136, 138, 139, 144, 145, 241, 248, 251, 254], "everyth": [25, 26, 59, 67, 69, 138, 141, 143, 232, 240, 248, 250, 254, 256], "quickli": [25, 26, 69, 71, 141, 145, 231, 233, 246, 249, 251, 252], "dry": [25, 26, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 244, 246], "size": [25, 26, 41, 53, 62, 63, 67, 81, 84, 86, 89, 91, 109, 110, 114, 123, 124, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 161, 172, 175, 185, 188, 194, 196, 221, 230, 235, 237, 238, 241, 242, 246, 249, 250, 251, 252, 254, 255], "initi": [25, 26, 37, 122, 125, 138, 141, 143, 144, 145, 203, 211, 245, 251], "histori": [25, 26, 60, 120, 122, 160, 245], "update_model_paramet": [27, 49, 62, 117, 156, 241], "metadata": [27, 28, 35, 36, 62, 65, 67, 117, 127, 128, 158, 161, 169, 171, 172, 175, 178, 180, 184, 185, 187, 188, 192, 193, 196, 239, 241, 244, 256], "taken": [27, 28, 35, 100, 149, 150, 154, 161, 204, 216, 223, 229, 248, 250], "param": [27, 28, 57, 62, 81, 86, 130, 136, 139, 142, 150, 160, 161, 172, 175, 180, 188, 196, 200, 237, 239, 241, 242, 248, 250], "json": [27, 28, 50, 60, 64, 157, 200, 222, 256], "int": [27, 28, 57, 62, 80, 81, 83, 84, 85, 86, 89, 91, 94, 95, 96, 109, 114, 120, 122, 123, 125, 128, 129, 130, 131, 134, 136, 138, 139, 141, 142, 143, 144, 146, 148, 150, 155, 157, 160, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 203, 205, 209, 210, 215, 217, 219, 221, 222, 224, 225, 227, 228, 230, 251], "str": [27, 28, 62, 80, 81, 85, 86, 89, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 114, 116, 117, 120, 121, 122, 123, 125, 126, 127, 128, 132, 134, 136, 138, 139, 141, 142, 143, 144, 148, 155, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 192, 193, 195, 196, 197, 199, 200, 202, 203, 205, 206, 209, 210, 211, 212, 215, 217, 219, 220, 221, 222, 224, 225, 227, 228, 230, 239, 244, 247, 255], "model_paramet": [27, 28, 62, 67, 84, 117, 124, 125, 127, 128, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 239, 241, 244, 247, 249], "made": [27, 28, 35, 36, 45, 48, 71, 103, 120, 138, 139, 140, 141, 142, 143, 144, 145, 146, 233, 239, 248, 250], "my_param": [27, 28, 179, 187], "my": [27, 28, 53, 61, 67, 69, 70, 73, 74, 185, 248, 256], "great": [27, 28, 67, 69, 248, 250], "my_custom_param": [27, 28, 62], "led_period_m": [27, 28], "runtime_memory_s": [27, 28, 62, 124, 126, 129, 130, 131, 134, 136, 139, 140, 142, 145, 146, 148, 149, 150, 151, 153, 154, 157, 161, 167, 248, 250], "cmsi": [27, 28, 63, 161], "view_model": [29, 49, 72, 156, 242], "netron": [29, 32, 72, 76, 136, 185, 242, 255], "model_visu": [29, 32], "8080": [29, 32, 64, 242, 246, 250], "augment": [30, 31, 76, 81, 86, 88, 111, 112, 125, 129, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 203, 204, 246, 251], "doesn": [33, 99, 120, 124, 125, 130, 131, 132, 134, 136, 139, 140, 141, 142, 143, 146, 149, 220, 246, 248, 250], "includ": [33, 52, 57, 62, 66, 67, 68, 69, 76, 81, 82, 84, 86, 87, 89, 91, 98, 100, 117, 120, 123, 124, 125, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 149, 154, 157, 160, 199, 205, 209, 220, 233, 244, 245, 247, 248, 249, 250, 251, 253, 254, 256], "veri": [33, 63, 68, 72, 74, 94, 100, 138, 139, 140, 141, 142, 143, 145, 146, 235, 237, 242, 244, 246, 248, 249, 250, 252, 254, 256], "begin": [33, 35, 36, 69, 80, 109, 110, 114, 118, 120, 138, 139, 141, 143, 144, 150, 246, 249, 251, 256], "debug": [33, 53, 62, 67, 81, 86, 89, 91, 124, 129, 130, 131, 136, 139, 140, 141, 142, 143, 145, 146, 149, 150, 210, 213, 216, 217, 219, 221, 231, 241, 247, 248, 249, 250], "oper": [33, 37, 44, 51, 61, 62, 65, 68, 69, 71, 72, 91, 107, 110, 115, 120, 124, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 168, 171, 172, 175, 178, 180, 184, 188, 192, 193, 196, 233, 235, 238, 246, 247, 248, 250, 251, 254], "gecko": [33, 35, 36, 37, 39, 41, 45, 78, 248, 250, 255], "sdk": [33, 35, 36, 37, 39, 41, 45, 248, 250, 255], "tflm": [33, 37, 39, 41, 47, 48, 52, 81, 83, 134, 157, 163, 164, 167, 169, 232, 250], "phase": [33, 141, 143, 248], "find_packag": 33, "mltk_find_packag": 33, "wrapper": [33, 57, 74, 83, 107, 163, 166, 169, 184, 191, 194, 195, 233, 244], "mltk_tflite_micro_wrapp": [33, 48], "symbol": [33, 89, 91, 210, 220], "releas": [33, 34, 37, 44, 100, 250, 255], "fulli": [33, 62, 63, 65, 68, 69, 72, 73, 118, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 158, 159, 181, 235, 236, 237, 240, 241, 242, 244, 246, 247, 248, 249, 250, 251, 252, 254], "optim": [33, 41, 67, 68, 69, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 210, 231, 237, 238, 241, 242, 244, 248, 250, 251, 252, 255], "still": [33, 81, 86, 138, 139, 144, 246, 249, 251, 252, 254, 256], "ON": [33, 35, 36, 41, 249], "disassembl": 33, "assembli": 33, "instruct": [33, 58, 149, 163, 169, 247, 248, 249, 251, 256], "mltk_model_profil": [33, 34, 41, 44, 64, 250], "hint": [33, 37, 39, 41, 69, 70, 71, 136, 239, 246, 249, 250], "just": [33, 37, 39, 41, 50, 67, 109, 110, 114, 117, 122, 125, 126, 127, 128, 129, 132, 134, 136, 138, 141, 143, 144, 200, 222, 233, 235, 239, 244, 246, 247, 252, 253, 254, 256], "search": [33, 37, 39, 41, 59, 67, 75, 77, 89, 91, 98, 124, 138, 144, 169, 220, 222, 233, 237, 238, 240, 241, 242, 246, 248, 249, 250, 255], "model_search_path": [33, 37, 39, 41], "mltk_audio_classifi": [33, 35, 249], "caus": [33, 74, 239, 250, 255, 256], "resid": [33, 71, 81, 86, 246], "well": [33, 35, 44, 47, 51, 61, 63, 67, 78, 99, 117, 138, 139, 140, 142, 145, 199, 200, 239, 246, 247, 248, 249, 250, 252, 253], "bobcat": 33, "256k": 33, "total": [33, 51, 61, 86, 98, 109, 110, 111, 112, 113, 114, 120, 124, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 167, 194, 204, 237, 238, 241, 242, 248, 250, 254, 255, 256], "small": [33, 65, 100, 116, 125, 127, 128, 132, 134, 138, 141, 143, 144, 145, 157, 244, 246, 248, 249, 250, 251, 254, 255, 256], "enough": [33, 39, 139, 144, 246, 248, 249, 250, 251, 252, 254], "fit": [33, 41, 51, 67, 80, 81, 86, 118, 120, 125, 127, 128, 138, 139, 140, 141, 142, 143, 144, 145, 146, 160, 231, 244, 248, 249, 250, 251, 254, 256], "few": [34, 43, 44, 65, 110, 220, 232, 246, 248, 250, 252], "long": [34, 43, 44, 51, 70, 100, 136, 138, 140, 246, 248, 250, 251, 252, 256], "en": [34, 43, 44, 58, 98, 99, 255, 256], "win32": [34, 43, 44], "fileio": [34, 43, 44], "maximum": [34, 43, 44, 81, 86, 89, 91, 111, 112, 134, 136, 155, 203, 205, 215, 220, 224, 230, 246, 247], "tab": [34, 43, 44, 50, 248, 250], "registri": [34, 43, 44], "studio": [34, 42, 45, 47, 48, 50, 74, 138, 232, 246, 247, 248, 249, 251, 253], "3rd": [34, 43, 44, 100, 122, 138, 141, 143, 144, 245, 256], "parti": [34, 43, 44, 94, 122, 125, 138, 141, 143, 144, 245, 246, 256], "visualstudio": [34, 43, 44], "Be": [34, 43, 44, 73, 246, 247, 248, 249, 250, 253, 254, 255], "sure": [34, 43, 44, 50, 57, 73, 74, 84, 120, 123, 127, 128, 136, 144, 244, 246, 247, 248, 249, 250, 253, 254, 255, 256], "check": [34, 39, 41, 43, 44, 52, 120, 223, 246, 254, 256], "desktop": [34, 44, 78, 246, 249], "workload": [34, 43, 44, 246], "sudo": [34, 43, 44, 54, 71, 77, 246], "apt": [34, 43, 44, 71, 77, 246], "y": [34, 43, 44, 71, 77, 81, 86, 109, 110, 114, 116, 120, 123, 125, 126, 127, 128, 129, 132, 134, 136, 138, 141, 143, 144, 150, 155, 185, 221, 227, 244, 246, 247, 248, 255], "ppa": [34, 43, 44], "toolchain": [34, 43, 44, 45, 47, 48], "r": [34, 43, 44, 138, 144, 215, 216, 217, 223, 224, 255, 256], "deadsnak": [34, 43, 44], "essenti": [34, 43, 44], "ninja": [34, 43, 44], "gdb": [34, 43], "p7zip": [34, 43, 44, 71, 77, 246], "lf": [34, 43, 44], "python3": [34, 43, 44, 73, 74, 256], "venv": [34, 43, 44, 71, 74, 235, 236, 237, 240, 242, 248, 250, 254, 255], "libusb": [34, 43, 44], "libgl1": [34, 43, 44], "high": [34, 39, 43, 44, 247, 251, 256], "compress": [34, 43, 44, 59, 61, 156, 247, 249, 252], "ratio": [34, 43, 44, 61, 154], "asset": [34, 43, 44, 94, 138, 141, 143, 235, 236, 237, 240, 242], "64": [34, 43, 44, 67, 69, 100, 120, 123, 124, 125, 127, 128, 129, 130, 132, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 151, 153, 154, 237, 241, 244, 248, 249, 250, 251, 254, 255], "scm": [34, 43, 44], "navig": [34, 43, 44, 245, 246, 248, 250], "cd": [34, 43, 44, 45, 47, 48, 50, 55, 74, 246, 254], "desir": [34, 62, 74, 84, 246, 251], "dcmake_toolchain_fil": 34, "gcc": [34, 45, 47, 48], "win64_toolchain": 34, "linux_toolchain": 34, "ex": [34, 44, 50, 237, 242, 248], "microcontrol": [35, 36], "word": [35, 36, 98, 100, 138, 139, 141, 143, 144, 152, 153, 154, 204, 249, 250, 254, 256], "record": [35, 36, 41, 95, 96, 98, 100, 141, 142, 143, 144, 150, 160, 163, 166, 169, 248, 249, 251, 255], "written": [35, 36, 57, 80, 85, 215, 230, 235, 236, 237, 240, 242, 256], "vcom": [35, 36, 249], "alexa": [35, 137, 138, 204, 231], "demo": [35, 37, 39, 40, 42, 147, 231, 250, 256], "voic": [35, 98, 138, 144, 201, 202, 203, 204, 207, 208, 249, 250, 256], "av": [35, 231, 249], "two": [35, 36, 61, 68, 71, 81, 86, 89, 91, 100, 109, 110, 114, 129, 134, 136, 139, 140, 142, 144, 145, 146, 157, 231, 246, 247, 248, 249, 250, 251, 252, 256], "audio_classifier_config": 35, "led1": [35, 36], "led0": [35, 36], "regular": [35, 36, 109, 110, 114, 122, 123, 130, 140, 142, 250], "interv": [35, 36, 86, 120], "score": [35, 36, 100, 111, 124, 155, 244, 246], "top": [35, 36, 43, 49, 50, 61, 64, 67, 69, 73, 102, 123, 243, 246, 247, 248, 250, 253, 254], "trigger": [35, 36, 117, 118, 120, 141, 143, 166, 245, 249, 256], "light": [35, 36, 244, 248], "respond": [35, 36], "greater": [35, 36, 134, 157], "blink": [35, 36], "500": [35, 36, 109, 110, 114, 144, 146, 248], "clear": [35, 36, 70, 84, 110, 125, 136, 138, 141, 143, 144, 168, 187, 247], "map": [35, 36, 37, 39, 62, 67, 71, 84, 109, 110, 114, 128, 129, 136, 143, 144, 146, 148, 155, 179, 248, 252], "silenc": [35, 36, 80, 81, 89, 91, 95, 100, 138, 139, 141, 143, 144, 249, 251], "unknown": [35, 36, 37, 81, 89, 91, 117, 120, 125, 138, 139, 141, 143, 144, 153, 169, 248, 249, 250, 251, 252], "want": [35, 36, 57, 64, 73, 86, 99, 100, 109, 114, 115, 120, 125, 127, 128, 129, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 233, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "ignor": [35, 36, 39, 100, 109, 110, 111, 112, 113, 114, 120, 123, 138, 141, 143, 144, 157, 185, 210, 222, 224, 247, 249, 251, 256], "out": [35, 36, 61, 62, 71, 84, 86, 155, 168, 187, 220, 223, 246, 248, 250, 251, 255, 256], "label": [35, 36, 39, 62, 67, 81, 86, 89, 91, 100, 101, 102, 103, 104, 105, 109, 110, 114, 116, 125, 126, 128, 129, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 153, 154, 155, 157, 167, 247, 250, 251, 255], "underscor": [35, 36, 39, 67, 100, 205, 248, 250, 256], "blob": [35, 36, 52, 123, 139, 142, 151, 154, 179, 185, 187], "master": [35, 36, 88, 95, 96, 104, 105, 106, 123, 130, 133, 135, 137, 138, 139, 141, 142, 143, 144, 147, 149, 150, 151, 152, 153, 154, 156, 187, 213, 235, 237, 238, 239, 241, 242], "toolkit": [35, 36, 247, 248, 250, 251, 255], "replac": [35, 36, 37, 39, 41, 52, 74, 86, 102, 125, 138, 139, 141, 143, 144, 247, 248, 250, 251, 252, 254, 256], "insid": [35, 36, 74, 81, 86, 109, 114, 123, 253], "renam": [35, 36, 37, 39, 41, 52, 254], "1_": [35, 36, 37, 39, 41, 52], "folder": [35, 36, 37, 39, 41, 50, 52, 100], "sort": [35, 36, 37, 39, 41, 52, 81, 86, 89, 100, 109, 114, 136, 138, 141, 144, 245, 247], "alphabet": [35, 36, 37, 39, 41, 52, 81, 86, 89, 109, 114], "ascend": [35, 36, 37, 39, 41, 52], "order": [35, 36, 37, 39, 41, 52, 62, 65, 66, 71, 81, 84, 86, 109, 114, 117, 168, 187, 255], "ad": [35, 36, 37, 39, 41, 52, 55, 61, 62, 65, 67, 69, 71, 81, 84, 89, 91, 100, 109, 114, 117, 138, 140, 141, 143, 145, 161, 179, 219, 239, 240, 244, 246, 247, 248, 250, 251, 253], "flatbuff": [35, 36, 37, 39, 41, 52, 62, 76, 107, 117, 118, 120, 157, 171, 172, 175, 178, 180, 183, 184, 185, 187, 188, 192, 193, 195, 196, 239], "tell": [35, 37, 39, 44, 57, 109, 110, 114, 134, 146, 229, 245, 246, 247, 248, 249, 250, 251], "audio_classifier_model": [35, 52, 249], "correctli": [35, 36, 54, 57, 81, 86, 247, 248], "section": [35, 36, 39, 41, 44, 62, 65, 71, 100, 139, 140, 142, 146, 187, 241, 245, 246, 247, 248, 249, 250, 251, 256], "extract": [35, 36, 96, 98, 99, 100, 101, 102, 103, 117, 123, 125, 129, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 154, 199, 200, 246, 247, 248, 250, 252, 254, 255], "origin": [35, 80, 86, 100, 103, 126, 141, 143, 233, 247, 248, 251], "relev": [35, 60, 61, 86, 109, 110, 114, 115, 125, 127, 128, 132, 138, 141, 143, 144, 244, 245], "popul": [35, 43, 67, 69, 89, 91, 115, 117, 122, 138, 144, 187, 221, 244], "driver": [35, 54, 74, 246, 249], "length": [35, 62, 80, 81, 83, 84, 100, 109, 110, 114, 125, 134, 138, 139, 141, 142, 143, 144, 185, 209, 230, 251, 254, 256], "average_window_duration_m": [35, 62, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 241, 248, 250, 254], "highest": [35, 36, 62, 84], "detection_threshold": [35, 62, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 241, 248, 250, 254], "185": [35, 62, 138, 149, 241, 251], "minimum_count": [35, 62, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 241, 248, 250, 254], "multipli": [35, 39, 63, 68, 86, 123, 124, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 174, 175, 176, 177, 182, 198, 235, 237, 238, 241, 248, 250, 251, 254, 255], "uart": [35, 44, 49, 213, 223, 230, 249], "effect": [35, 50, 51, 63, 64, 67, 91, 94, 109, 110, 114, 136, 138, 139, 141, 143, 144, 187, 244, 247, 248, 250, 254], "transmit": 36, "bluetooth": [36, 251], "low": [36, 138, 141, 143, 144, 246, 249, 251, 256], "client": [36, 40, 251], "live": [36, 122, 256], "plai": [36, 142, 143, 144, 231, 249, 250, 251], "move": [36, 138, 144, 248, 251], "accordingli": [36, 127, 128, 244, 248, 251, 254], "ble_audio_classifi": [36, 138, 141, 143, 144, 251], "pacman": [36, 143, 144, 251], "upon": [36, 246], "advertis": 36, "kw": [36, 123, 124, 138, 144, 153, 250], "uuid": 36, "c20ffe90": 36, "4ed4": 36, "46b9": 36, "8f6c": 36, "ec143fce3e4": 36, "string": [36, 62, 80, 81, 85, 86, 116, 117, 118, 120, 123, 127, 128, 138, 144, 155, 157, 159, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 184, 186, 187, 188, 189, 192, 193, 195, 196, 197, 199, 203, 205, 209, 211, 215, 219, 220, 222, 224, 225, 227, 239, 244, 256], "id": [36, 62, 91, 100, 122, 129, 155, 228, 239, 242, 246, 251], "probabl": [36, 39, 61, 131, 146, 251, 252, 255], "uint8": [36, 39, 57, 65, 85, 101, 102, 103, 120, 136, 138, 141, 143, 144, 179, 187, 239], "whenev": [36, 126, 131], "ble_audio_classifier_config": 36, "keyword_spotting_pacman": [36, 143], "gecko_sdk_enable_bluetooth": 36, "ble_audio_classifier_model": 36, "mltk_ble_audio_classifi": 36, "qsg169": 36, "v3": [36, 137], "ug103": 36, "14": [36, 127, 128, 130, 134, 138, 139, 142, 144, 145, 148, 150, 151, 153, 154, 239, 244, 248, 250, 251, 254, 255], "le": 36, "fundament": [36, 256], "ug434": 36, "grayscal": [37, 39, 86, 101, 102, 103, 104, 105, 114, 131, 136, 146, 239, 247, 248], "person": [37, 93, 100, 132, 138, 144, 152, 154, 245, 247, 248], "against": [37, 61, 115, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 224, 234, 244, 247], "similar": [37, 41, 44, 50, 58, 61, 68, 81, 86, 100, 110, 127, 128, 134, 136, 138, 141, 143, 145, 146, 220, 244, 246, 247, 248, 249, 250, 252, 254, 255, 256], "page": [37, 39, 70, 73, 74, 150, 245, 249], "click": [37, 43, 64, 73, 74, 124, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 234, 235, 236, 237, 238, 239, 240, 241, 246, 247, 248, 250, 251, 255, 256], "button": [37, 43, 64, 73, 74, 246, 248, 250, 253], "iter": [37, 81, 84, 86, 109, 110, 114, 120, 139, 142, 168, 185, 187, 220, 222, 225, 248, 255], "solid": [37, 86, 248], "blue": [37, 81, 246], "purpl": 37, "press": [37, 73, 226], "eras": 37, "puls": 37, "elaps": 37, "error": [37, 53, 54, 63, 91, 120, 121, 136, 149, 157, 165, 166, 219, 223, 235, 246, 247, 254, 255, 256], "try": [37, 70, 138, 141, 143, 144, 157, 224, 230, 235, 249, 251, 256], "repeat": [37, 109, 110, 114, 148, 247, 248], "fingerprint_signature_gener": [37, 246, 247], "howev": [37, 39, 41, 50, 51, 57, 61, 67, 68, 71, 73, 74, 134, 136, 138, 141, 143, 145, 169, 237, 242, 246, 247, 248, 249, 250, 251, 252, 255, 256], "method": [37, 39, 41, 81, 82, 83, 84, 86, 87, 91, 98, 109, 110, 111, 112, 113, 114, 116, 117, 119, 120, 122, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 205, 206, 214, 215, 217, 218, 221, 222, 224, 226, 230], "fingeprint_authent": 37, "usart": 37, "peripher": [37, 39, 249], "pin": [37, 39, 249], "expans": [37, 39, 179], "gnd": [37, 39, 249], "black": [37, 86, 246], "suppli": [37, 62, 81, 86, 111, 158, 241, 247, 256], "3vt": 37, "white": [37, 81], "txd": 37, "yellow": 37, "rxd": 37, "wakeup": 37, "mltk_fingerprint_authent": 37, "them": [37, 46, 86, 100, 123, 138, 139, 144, 246, 247, 248, 250, 251], "simpl": [38, 100, 127, 129, 151, 232, 233, 244, 247, 248, 249, 250, 255, 256], "printf": 38, "mltk_hello_world": [38, 44], "_unknown_": [39, 81, 91, 105, 124, 125, 138, 139, 140, 141, 143, 144, 145, 146, 149, 204, 241, 248, 250, 252, 254, 256], "shape": [39, 63, 65, 67, 68, 81, 84, 86, 101, 102, 103, 104, 105, 109, 110, 114, 117, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 185, 194, 195, 235, 237, 238, 239, 241, 242, 244, 247, 248, 250, 251, 252, 254, 255], "height": [39, 81, 83, 84, 86, 104, 105, 109, 125, 132, 138, 139, 141, 142, 143, 144, 172, 173, 174, 175, 176, 177, 186, 188, 189, 190, 196, 197, 198, 239, 251, 254, 255], "width": [39, 81, 83, 84, 86, 104, 105, 109, 123, 125, 130, 132, 138, 139, 141, 142, 143, 144, 172, 173, 174, 175, 176, 177, 186, 188, 189, 190, 196, 197, 198, 239, 251, 254, 255], "channel": [39, 62, 81, 84, 85, 86, 114, 123, 125, 130, 132, 138, 141, 143, 144, 191, 251, 254], "datatyp": [39, 134, 179, 187], "int8": [39, 56, 57, 61, 65, 67, 69, 81, 83, 85, 115, 120, 124, 125, 126, 127, 128, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 179, 187, 234, 235, 237, 238, 239, 241, 244, 248, 249, 250, 251, 254, 255], "samplewise_norm": [39, 62, 124, 127, 128, 129, 130, 131, 132, 136, 139, 140, 142, 145, 146, 149, 150, 151, 153, 154, 237, 239, 244, 248, 250, 254], "rescal": [39, 62, 81, 86, 90, 124, 127, 128, 129, 130, 131, 136, 139, 140, 142, 145, 146, 149, 150, 151, 153, 154, 237, 239, 244, 248, 250, 254], "scale": [39, 62, 80, 81, 83, 84, 85, 123, 127, 128, 129, 151, 191, 239, 244, 248, 249, 250, 255], "factor": [39, 67, 86, 120, 124, 125, 130, 131, 132, 136, 139, 140, 141, 142, 143, 146, 149, 174, 177, 248, 250, 255], "model_input_tensor": 39, "img": [39, 62, 132, 136, 239, 248], "mean_and_std": [39, 62, 124, 129, 130, 131, 132, 136, 139, 140, 142, 145, 146, 149, 150, 151, 153, 154, 237, 248, 250, 254], "center": [39, 81, 98, 150, 246, 247], "standard": [39, 50, 60, 61, 62, 67, 69, 71, 81, 86, 123, 127, 128, 132, 139, 140, 142, 146, 179, 187, 222, 232, 235, 238, 239, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256], "deviat": [39, 62], "std": [39, 62, 81, 86, 90, 132, 219, 239, 248], "128": [39, 57, 62, 84, 93, 123, 126, 127, 128, 129, 130, 136, 138, 140, 141, 143, 144, 146, 148, 150, 151, 154, 239, 244, 246, 248, 249, 250], "i2c": 39, "vcc": 39, "18": [39, 126, 130, 134, 138, 139, 141, 143, 144, 145, 146, 148, 154, 237, 241, 242, 250, 251, 254], "mosi": 39, "miso": 39, "sck": 39, "sda": 39, "scl": 39, "15": [39, 62, 74, 84, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 235, 237, 238, 244, 248, 250, 251, 252, 254, 255, 256], "mltk_image_classifi": 39, "hello": 40, "world": [40, 99, 100, 248, 250], "ble": [40, 251], "signatur": [40, 81, 86, 89, 91, 110, 111, 112, 113, 117, 136, 137, 231, 255], "standalon": [41, 59, 63, 64], "mtlk": 41, "stand": [41, 246], "alon": [41, 246], "opresolv": 41, "greatli": [41, 86, 91, 141, 143, 145, 169, 232, 245, 246, 252], "consum": [41, 63, 68, 72, 81, 86, 98, 100, 109, 110, 114, 232, 235, 237, 242, 249, 250], "lot": [41, 138, 141, 142, 143, 144, 246, 249, 250, 251, 256], "linker": 41, "hardcod": [41, 139, 140, 142, 146, 246, 248, 250], "tensor": [41, 51, 57, 62, 63, 70, 80, 85, 86, 91, 109, 110, 114, 122, 123, 134, 136, 157, 161, 166, 169, 171, 172, 175, 178, 180, 184, 185, 188, 191, 192, 193, 194, 195, 196, 239, 248, 255], "arena": [41, 62, 157, 161], "alloc": [41, 223, 246, 255], "heap": 41, "100000": 41, "buffer": [41, 57, 138, 139, 141, 143, 144, 166, 185, 215, 224, 230, 249, 251, 254], "bss": 41, "counter": [41, 86, 125, 132, 138, 141, 143, 144], "along": [41, 86, 98, 102, 103, 248, 250], "could": [41, 56, 58, 63, 71, 109, 110, 114, 120, 124, 127, 128, 131, 139, 140, 146, 246, 247, 248, 250, 256], "deprec": 41, "demonstr": [42, 49, 126, 129, 130, 133, 135, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 247, 248, 249, 253, 256], "implement": [42, 51, 65, 73, 83, 109, 110, 114, 139, 155, 166, 222, 249], "vscode": [42, 49, 50, 78, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 253], "tflite_micro_wrapp": [42, 48, 163], "mvp_wrapper": [42, 47], "what": [43, 44, 61, 76, 86, 95, 120, 129, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 232, 234, 247, 248, 249, 250, 252, 255, 256], "_desktop": 43, "_": [43, 118, 120, 129, 131, 136, 138, 139, 141, 143, 144, 146, 148, 246, 248, 251, 255, 256], "silab": [43, 45, 47, 48, 71, 73, 74, 132, 138, 144, 154, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 250, 251, 254, 255, 256], "date": [43, 62, 74, 124, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 167, 200, 220, 237, 238, 239, 241, 248, 250, 254], "next": [43, 44, 62, 70, 71, 84, 109, 110, 114, 204, 221, 248, 250, 253, 254], "Then": [43, 44, 45, 47, 48, 55, 70, 71, 73, 124, 131, 136, 138, 139, 140, 142, 144, 146, 149, 244, 246, 248, 249, 254, 255], "install_mltk": [43, 44, 74], "stack": [43, 249], "extens": [43, 50, 61, 68, 70, 73, 75, 76, 89, 91, 185, 220, 246, 248, 250], "gsdk_mltk_extens": 43, "gsdk": 43, "toolbar": 43, "prefer": 43, "sidebar": [43, 246], "expand": [43, 250], "entri": [43, 62, 71, 89, 91, 109, 114, 117, 138, 155, 166, 169, 179, 187, 209, 220, 221, 222, 246, 255], "locat": [43, 100, 150, 246, 256], "v4": 43, "ok": [43, 248], "trust": 43, "point": [43, 50, 54, 71, 73, 74, 75, 77, 86, 125, 126, 129, 132, 134, 135, 138, 139, 141, 142, 143, 144, 145, 174, 177, 182, 191, 198, 224, 235, 237, 238, 239, 241, 242, 246, 247, 248, 249, 250, 251, 252, 255, 256], "suit": 43, "launcher": 43, "creation": [43, 67], "link": [43, 44, 50, 58, 64, 78, 89, 91, 214, 217, 220, 230, 232], "directli": [43, 44, 47, 51, 52, 57, 60, 62, 65, 67, 76, 81, 83, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 185, 232, 235, 236, 237, 240, 242, 244, 246, 248, 250], "edit": [43, 246, 254], "skip": [44, 57, 71, 81, 145, 248, 250, 252, 255], "j": [44, 63, 81, 214, 217, 235, 238, 248, 249, 250, 251, 255], "pack": [44, 150], "jlink": [44, 213, 214, 215, 216, 217, 230], "linksoftwareanddocumentationpack": 44, "jlink_windows_x86_64": 44, "integr": [44, 134], "anoth": [44, 57, 81, 86, 89, 91, 110, 145, 179, 187, 232, 246, 247, 248, 249, 250, 252, 254, 255], "teraterm": 44, "free": [44, 71, 73, 74, 94, 245, 246, 248, 250, 256], "2015": [44, 74, 96], "2017": [44, 74, 100], "2019": [44, 74, 227], "mani": [44, 57, 60, 86, 98, 99, 109, 110, 114, 120, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 232, 245, 246, 247, 248, 250, 252, 254, 255, 256], "And": [44, 55, 70, 71, 139, 221, 246, 247], "mode": [44, 62, 67, 74, 86, 114, 117, 120, 121, 123, 126, 129, 136, 139, 140, 141, 142, 143, 145, 150, 155, 159, 160, 215, 216, 217, 221, 224, 235, 237, 238, 239, 241, 242, 247, 248, 250, 251], "breakpoint": [44, 50, 130, 253], "usb": 44, "cdc": [44, 230], "speed": [44, 81, 125, 132, 138, 141, 143, 144, 246, 249, 250], "aka": [44, 141, 143, 155, 174, 177, 182, 198, 247, 255], "baud": [44, 138, 157, 224, 230], "115200": [44, 157, 224, 230, 249], "hello_world": 44, "mltk_hello_world_download": 44, "mltk_hello_world_download_run": 44, "mltk_hello_world_reset": 44, "reset": [44, 120, 215], "mltk_model_profiler_download": 44, "mltk_model_profiler_download_run": 44, "mltk_model_profiler_reset": 44, "compon": [45, 62, 84, 250, 251], "pip": [45, 47, 48, 71, 73, 74, 222, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 250, 251, 255, 256], "git": [45, 47, 48, 74, 163, 169, 233], "clone": [45, 47, 48, 74, 251], "build_opt": [45, 47, 48], "mltk_audio_feature_generator_wrapp": 45, "remov": [45, 47, 48, 84, 89, 91, 100, 120, 138, 141, 143, 144, 168, 185, 187, 199, 200, 220, 233, 246, 247, 248, 249, 250, 251, 252, 254, 256], "manag": [46, 67, 71, 128, 139, 140, 141, 142, 143, 145, 245, 246, 250], "clock": [47, 63, 124, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 168, 235, 238, 248, 250, 251, 254, 255], "tflitemicro": [47, 48, 164, 232, 238], "mltk_mvp_wrapper": 47, "helper": [48, 67, 71, 83, 107, 116, 138, 144, 214, 246], "actual": [48, 61, 63, 67, 69, 76, 129, 134, 138, 140, 141, 142, 143, 144, 145, 146, 220, 239, 244, 246, 247, 248, 249, 250, 251, 252, 254], "tflitemicromodel": [48, 49, 164, 169], "jupyt": [49, 73, 222, 243, 247, 248, 250, 251, 255], "notebook": [49, 74, 222, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 256], "browser": [49, 64, 72, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 250, 251, 255, 256], "colab": [49, 243, 247, 248, 250, 251, 252, 254, 255, 256], "instanc": [49, 57, 61, 62, 81, 89, 91, 109, 110, 114, 118, 120, 121, 123, 125, 127, 128, 132, 134, 138, 141, 143, 144, 145, 155, 157, 158, 159, 160, 161, 162, 163, 169, 185, 211, 212, 221, 222, 244, 248, 249, 250, 251, 252, 255, 256], "tflitemodel": [49, 68, 107, 111, 112, 113, 117, 118, 121, 134, 136, 157, 158, 159, 161, 162, 163, 169, 171, 172, 175, 178, 180, 183, 184, 187, 188, 192, 193, 195, 196, 232, 239, 247, 248, 250, 255], "request": [50, 70, 100, 235, 237, 238, 239, 241, 242, 256], "arg": [50, 70, 80, 84, 89, 117, 118, 123, 125, 127, 128, 132, 138, 141, 143, 144, 155, 168, 179, 187, 193, 203, 212, 219, 221, 222, 224, 244, 247, 248, 250, 251], "manner": 50, "keep": [51, 100, 125, 132, 134, 138, 139, 141, 143, 144, 248, 250, 252], "mind": [51, 248, 250, 255], "hold": [51, 89, 91, 103, 138, 141, 143, 144, 155, 209, 246, 251, 255], "happen": [51, 65, 83, 127, 128, 239, 244], "slower": [51, 131, 146, 248], "tip": [51, 248], "most": [51, 62, 65, 66, 71, 74, 99, 100, 127, 128, 139, 141, 143, 236, 241, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 256], "4x": [51, 57, 65, 143, 249], "conv2d": [51, 67, 69, 120, 124, 125, 127, 128, 129, 131, 134, 136, 140, 141, 142, 143, 146, 148, 149, 237, 238, 239, 241, 242, 244, 248, 250, 254], "depthwiseconv2d": [51, 124], "depth_multipli": [51, 124, 177], "expens": [51, 81, 86, 139, 140, 141, 142, 143, 145, 146, 246, 248, 249, 250, 251, 256], "smaller": [51, 139, 140, 141, 142, 143, 145, 246, 250], "larger": [51, 62, 71, 81, 86, 120, 124, 138, 139, 140, 141, 142, 143, 144, 145, 146, 204, 246, 247, 248, 249, 250, 251, 254, 256], "constraint": [51, 63, 123, 231, 249, 250, 254], "kernel_s": [51, 67, 69, 120, 124, 127, 128, 131, 149, 172, 175, 196, 244], "dens": [51, 67, 69, 120, 124, 125, 126, 127, 128, 129, 130, 131, 134, 136, 140, 141, 142, 143, 146, 148, 149, 237, 238, 239, 241, 242, 244, 248, 250], "k": [51, 62, 74, 84, 86, 124, 126, 134, 138, 140, 141, 143, 144, 148, 149, 150, 168, 187, 237, 241, 248, 250], "maxpool2d": [51, 148], "averagepool2d": 51, "faq": [52, 56, 246, 248], "thought": [52, 232], "simpli": [52, 69, 134, 139, 140, 142, 145, 244, 248, 250, 251], "uint8_t": [52, 250], "arrai": [52, 80, 81, 85, 86, 89, 101, 102, 103, 109, 110, 114, 118, 126, 130, 131, 134, 146, 150, 155, 169, 179, 185, 209, 239, 248, 250, 255], "deploi": [52, 136, 246, 247, 255], "model_profiler_model": 52, "isn": [53, 120, 122, 138, 144], "gpu": [53, 71, 73, 74, 81, 86, 91, 138, 139, 140, 141, 142, 143, 144, 145, 146, 221, 242, 245, 248, 249, 250, 251], "am": 53, "import": [53, 61, 67, 69, 71, 74, 83, 84, 107, 115, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 164, 183, 185, 204, 216, 221, 222, 223, 229, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256], "possibl": [54, 62, 81, 84, 86, 120, 121, 138, 140, 141, 142, 143, 144, 145, 203, 204, 247, 248, 249, 250, 251, 252, 256], "solut": [54, 245, 246], "reload": [54, 121, 222], "cuda": [54, 211], "gdm3": 54, "rmmod": 54, "nvidia_uvm": 54, "nvidia_drm": 54, "nvidia_modeset": 54, "nvidia": [54, 74, 221, 242], "modprob": 54, "intermedi": 55, "ll": [55, 57, 122, 138, 139, 140, 141, 142, 143, 144, 145, 246, 248, 250, 253], "accept": [56, 221, 248, 250], "properli": [56, 141, 143, 235, 248, 249, 250], "easiest": [56, 74], "fix": [56, 138, 246, 255], "inference_input_typ": [56, 57, 67, 69, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 244, 248, 250, 255], "inference_output_typ": [56, 57, 67, 69, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 244, 248, 250, 255], "reason": [57, 63, 68, 72, 100, 235, 237, 242, 246, 247, 248, 250], "whatev": [57, 248, 250], "compris": [57, 62, 96, 248], "our": [57, 61, 67, 69, 70, 98, 115, 125, 127, 128, 129, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 239, 244, 246, 248, 249, 250, 253, 254, 255], "But": [57, 138, 144, 249, 251], "might": [57, 61, 62, 65, 67, 69, 247, 248, 250, 255], "parallelimagedatagener": [57, 62, 67, 88, 114, 129, 131, 133, 136, 146, 150, 151, 153, 154, 246, 248, 250], "def": [57, 67, 69, 81, 86, 89, 91, 109, 110, 114, 117, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 221, 239, 244, 246, 247, 248, 250, 251, 252, 254, 255], "convert_img_from_uint8_to_int8": 57, "parallelprocessparam": [57, 81, 86, 130, 136, 139, 142, 145, 150], "np": [57, 81, 83, 86, 90, 91, 109, 110, 114, 124, 125, 126, 127, 128, 129, 130, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 171, 172, 175, 178, 180, 184, 185, 188, 192, 193, 196, 239, 244, 247, 249, 250, 251, 255], "ndarrai": [57, 80, 81, 83, 85, 86, 90, 91, 125, 127, 128, 130, 132, 136, 138, 139, 141, 142, 143, 144, 150, 155, 166, 169, 171, 172, 175, 178, 180, 184, 185, 188, 192, 193, 195, 196, 244, 251], "dtype": [57, 62, 80, 81, 82, 83, 86, 87, 90, 91, 117, 124, 125, 126, 128, 130, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 149, 179, 185, 187, 195, 209, 238, 239, 249, 250, 251, 255], "clip": [57, 83, 95, 96, 99, 100, 125, 136, 138, 141, 143, 144, 249, 250, 251], "alreadi": [57, 74, 136, 145, 200, 237, 242, 246, 248, 251, 252, 254, 255], "astyp": [57, 83, 126, 127, 128, 129, 130, 134, 136, 138, 141, 143, 144, 151, 239, 244, 255], "convers": [57, 100, 120, 127, 128, 231, 244, 256], "preprocessing_funct": [57, 81, 82, 86, 87, 114, 136, 139, 150], "manual": [57, 67, 71, 98, 100, 109, 114, 122, 125, 127, 128, 130, 132, 136, 138, 141, 143, 144, 150, 244, 246, 250], "image_length": 57, "model_input": [57, 126], "int8_t": 57, "image_data": 57, "abov": [57, 64, 69, 110, 129, 134, 136, 139, 140, 142, 146, 203, 244, 246, 247, 248, 250, 251, 255, 256], "nor": 57, "tfliteconvert": [57, 65, 67, 118, 120, 136, 146, 158, 244, 248, 255], "dequant": [57, 126, 131, 134, 136, 146, 148, 150, 153, 154, 178, 235, 237, 248, 255], "sizeof": 57, "importerror": 58, "fail": [58, 67, 69, 136, 138, 144, 157, 223, 224, 235, 247, 251, 255], "_pywrap_tensorflow_intern": 58, "due": [58, 61, 63, 100, 123, 247], "latest": [58, 74, 120, 246, 255, 256], "redistribut": [58, 74, 233], "2977003": 58, "x64": 58, "pleas": [59, 81, 86, 98, 100, 237, 242, 244, 246, 248, 250, 255], "txt": [60, 71, 77, 89, 138, 144], "png": [60, 81, 86, 91, 136, 247], "focus": [61, 69, 246], "aspect": [61, 67, 69, 154, 248, 250, 255], "ipynb": [61, 62, 63, 65, 68, 69, 72, 73], "involv": [61, 65], "versu": [61, 247, 248, 250], "evaluatemixin": [61, 134, 136], "my_model_v1": [61, 67, 69], "instanti": [61, 67, 69, 71, 81, 115, 121, 123, 124, 125, 126, 129, 130, 131, 132, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 170, 171, 172, 175, 178, 179, 180, 184, 186, 187, 188, 192, 193, 196, 204, 221, 222, 244, 248, 250, 252, 256], "among": 61, "classifierevaluationresult": [61, 136, 247, 255], "tabl": [61, 179, 256], "layout": [61, 68, 76, 124, 129, 130, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 232, 255], "row": [61, 123, 134, 138, 144, 157, 251], "repres": [61, 81, 109, 110, 114, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 244, 248, 249, 255, 256], "column": [61, 126, 134, 157], "vice": 61, "versa": 61, "curv": [61, 155], "plot": [61, 118, 120, 134, 136, 155, 247, 248, 250], "illustr": [61, 247, 252], "diagnost": 61, "discrimin": 61, "vari": [61, 246], "tpr": [61, 155], "fpr": [61, 155], "fraction": [61, 62, 84, 86, 109, 110, 114], "known": [61, 123, 138, 139, 141, 143, 144, 145, 249, 251, 252, 256], "proport": [61, 100], "those": [61, 199, 256], "who": [61, 99, 100], "condit": [61, 224, 230, 248], "judg": 61, "gold": 61, "statist": [61, 155, 232, 235, 236, 237, 240, 242, 246, 247, 248, 250], "multipl": [61, 86, 91, 100, 109, 110, 114, 124, 134, 139, 145, 153, 154, 157, 168, 221, 247, 248, 250, 252, 254, 256], "comparison": [61, 234], "fall": 61, "alarm": 61, "reject": [61, 247, 249, 256], "null": 61, "hypothesi": 61, "particular": [61, 65, 100, 138, 140, 142, 144, 146, 246, 248, 250, 255], "wrongli": 61, "categor": [61, 67, 69, 81, 86, 109, 114, 123, 124, 125, 128, 130, 131, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 151, 153, 154, 155, 248, 250, 255], "regardless": [61, 120, 224, 246], "autoencoderevaluationresult": 61, "belong": [61, 89, 100, 148, 234, 237, 242, 248, 250, 252], "anomaly_detect": [61, 67, 232, 234], "reconstruct": [61, 126, 234], "wors": [61, 234], "further": [61, 117, 234, 246, 254], "anomali": [61, 126, 150, 152, 234], "atom": 62, "easili": [62, 246, 249], "assur": 62, "synchron": [62, 230], "dictionari": [62, 71, 84, 89, 91, 109, 110, 114, 116, 117, 118, 120, 122, 134, 138, 144, 155, 157, 158, 160, 161, 168, 169, 179, 185, 187, 203, 210, 222, 225, 239, 241], "typic": [62, 67, 69, 76, 77, 117, 120, 138, 139, 140, 141, 142, 143, 144, 145, 146, 166, 221, 240, 246, 248, 249, 250, 252, 254, 256], "schema": [62, 76, 173, 176, 181, 183, 185, 187, 189, 197], "fb": [62, 76, 179, 183, 185, 187], "de": [62, 65, 136, 179, 185, 211], "unchang": 62, "bool": [62, 81, 83, 84, 86, 89, 91, 100, 109, 110, 114, 116, 117, 121, 122, 125, 126, 127, 128, 132, 134, 136, 138, 141, 143, 144, 148, 155, 157, 158, 159, 160, 162, 163, 166, 169, 172, 175, 179, 180, 185, 187, 193, 196, 199, 200, 203, 210, 212, 215, 217, 220, 221, 222, 224, 227, 228, 230, 244, 247], "byte": [62, 117, 124, 126, 127, 128, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 166, 179, 185, 187, 209, 214, 215, 217, 229, 230, 235, 238, 244, 246, 248, 250, 251, 254, 255], "iso8601": [62, 167], "hash": [62, 95, 96, 98, 99, 100, 101, 103, 104, 105, 124, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 163, 167, 169, 200, 206, 212, 237, 238, 239, 241, 248, 250, 254], "md5": [62, 200, 212], "exclud": [62, 157, 199, 220, 222, 247, 248, 250, 251], "match": [62, 66, 71, 83, 132, 134, 136, 138, 144, 163, 200, 224, 230, 239, 247, 248, 250, 253, 255], "hz": [62, 84, 124, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 235, 238, 248, 250, 251, 254, 255], "filterbank": [62, 84], "lowest": [62, 84], "smoothing_bit": [62, 84], "coeffici": [62, 84, 96], "odd": [62, 84, 123], "preserv": [62, 84, 154], "pcan": [62, 84, 141, 142, 143], "expon": [62, 84], "denomin": [62, 84], "logarithm": [62, 84], "scale_shift": [62, 84], "fft_length": [62, 84, 124, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 250, 254], "fft": [62, 84, 145], "smallest": [62, 81, 89, 91], "activity_detection_en": [62, 84, 125, 138, 141, 142, 143, 144], "block": [62, 84, 123, 125, 136, 138, 141, 142, 143, 144, 230, 246, 247, 249, 251, 253, 254], "activity_detection_alpha_a": [62, 84, 125, 138, 141, 142, 143, 144], "fast": [62, 84, 233, 249, 256], "pole": [62, 84], "iir": [62, 84], "activity_detection_alpha_b": [62, 84, 125, 138, 141, 142, 143, 144], "activity_detection_arm_threshold": [62, 84, 125, 138, 141, 142, 143, 144], "activity_detection_trip_threshold": [62, 84, 125, 138, 141, 142, 143, 144], "dc_notch_filter_en": [62, 84, 125, 138, 141, 142, 143, 144, 249, 251], "dc": [62, 84, 125, 138, 141, 142, 143, 144, 249, 251], "notch": [62, 84, 125, 138, 141, 142, 143, 144, 249, 251], "negat": [62, 84], "dc_notch_filter_coeffici": [62, 84, 125, 138, 141, 142, 143, 144, 249, 251], "q": [62, 84], "quantize_dynamic_scale_en": [62, 83, 84, 125, 138, 141, 142, 143, 144, 249, 251], "127": [62, 84, 130, 144, 154, 224, 235, 239], "quantize_dynamic_scale_range_db": [62, 83, 84, 125, 138, 141, 142, 143, 144, 249, 251], "anyth": [62, 67, 84, 100], "db": [62, 67, 84], "norm_sampl": 62, "norm_img": [62, 239, 248], "approach": [62, 74, 247, 248, 249, 250, 251, 256], "volume_db": [62, 67, 124, 139, 140, 145, 149, 241, 250, 254], "latency_m": [62, 67, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 149, 241, 250, 254], "level": [62, 67, 169, 219, 230, 246, 255], "log_level": [62, 67, 124, 139, 140, 145, 149, 241, 250, 254], "info": [62, 67, 71, 101, 103, 107, 122, 124, 136, 138, 139, 140, 144, 145, 149, 185, 219, 221, 235, 236, 237, 240, 241, 242, 247, 250, 254, 255], "suppression_m": [62, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 149, 241, 250, 254], "1500": [62, 124, 149, 241], "untouch": [62, 138, 144, 241, 249, 251], "outsid": [62, 86, 232, 241], "No": [63, 64, 71, 100, 138, 144, 170, 232, 250, 251], "individu": [63, 70, 81, 100, 150, 157, 246, 250, 255], "mathemat": [63, 100, 248], "accumul": [63, 68, 124, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 168, 180, 235, 238, 246, 248, 250, 251, 254, 255], "unsupport": [63, 124, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 235, 238, 248, 250, 251, 254, 255], "percentag": [63, 80, 81, 86, 89, 91, 157], "rel": [63, 71, 81, 89, 91, 119, 122, 125, 138, 140, 141, 142, 144, 146, 157, 168, 199, 220, 246, 248, 250, 251, 252, 256], "idl": [63, 157, 168], "op": [63, 70, 120, 124, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 168, 171, 172, 175, 178, 180, 184, 188, 192, 193, 196, 235, 237, 238, 241, 242, 248, 250, 251, 254, 255], "mac": [63, 68, 71, 124, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 168, 235, 237, 238, 241, 242, 248, 250, 251, 254, 255], "index": [63, 81, 86, 89, 91, 109, 114, 120, 124, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 165, 166, 171, 172, 175, 178, 180, 184, 185, 188, 192, 193, 194, 195, 196, 201, 205, 222, 235, 237, 238, 239, 241, 247, 248, 250, 251, 254, 255], "opcod": [63, 124, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 171, 172, 175, 178, 180, 184, 188, 192, 193, 196, 235, 237, 238, 239, 241, 248, 250, 251, 254, 255], "acc": [63, 124, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 235, 248, 250, 251, 254, 255], "els": [63, 80, 84, 85, 89, 91, 118, 120, 121, 125, 126, 127, 128, 132, 134, 136, 138, 139, 141, 142, 143, 144, 148, 150, 157, 166, 168, 185, 187, 199, 200, 203, 219, 220, 222, 244, 247, 249, 251, 255, 256], "msg": [63, 149, 157, 165, 222, 254, 255], "arm": [63, 84, 153], "cortex": 63, "m33": 63, "efr32xg24": [63, 64, 78, 124, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154], "78mhz": 63, "know": [63, 68, 145, 235, 237, 246, 251, 252], "invest": [63, 68, 72, 235, 237, 242, 250], "drag": [64, 72, 76, 242, 255], "box": [64, 86, 114, 154, 256], "respect": [64, 134, 136, 247], "serv": [64, 233, 242, 250], "network": [64, 86, 100, 123, 134, 136, 138, 140, 142, 144, 146, 249, 250, 251, 252], "ip": [64, 71, 77, 220], "address": [64, 71, 73, 74, 77, 96, 220, 246], "represent": [65, 211, 252], "opsset": [65, 67, 69, 120, 124, 125, 129, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 151, 250, 255], "tflite_builtins_int8": [65, 67, 69, 120, 124, 125, 126, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 248, 250, 255], "alwai": [65, 100, 120, 150, 215, 244, 250], "target_spec": [65, 120, 255], "field": [65, 66, 70, 117, 120, 138, 139, 140, 141, 142, 143, 144, 145, 146, 157, 185, 203, 211, 246, 248, 249, 250, 251, 252, 256], "targetspec": [65, 120], "subset": [65, 69, 81, 82, 86, 87, 89, 98, 109, 110, 114, 116, 118, 125, 126, 127, 128, 129, 131, 132, 134, 136, 138, 139, 141, 143, 144, 146, 148, 150, 206, 240, 244, 246, 248, 249, 250, 251, 255], "hundr": 65, "randomli": [65, 81, 86, 89, 91, 138, 139, 141, 143, 203, 204, 249, 250, 256], "chosen": [65, 138, 154, 246, 250], "oppos": [66, 67], "keyword_spotting_model": 66, "load_mltk_model": [66, 145, 240, 252], "model_path": [66, 121, 134, 220, 255], "recurs": [66, 71, 89, 91, 117, 199, 220], "repositori": [66, 74], "mltk_model_path": 66, "architectur": [67, 125, 132, 133, 135, 136, 138, 139, 141, 143, 232, 247, 254], "ye": [67, 100, 149, 153, 232, 241, 250], "alphanumer": [67, 81, 86, 248, 250], "charact": [67, 203, 248, 250, 252, 254, 256], "list_mltk_model": 67, "delimit": [67, 75, 126, 220], "datasetmixin": [67, 69, 115, 116, 125, 126, 127, 128, 132, 134, 138, 141, 143, 144, 148, 244, 245], "imagedatasetmixin": [67, 110, 120, 129, 131, 136, 146, 150, 151, 153, 154, 248], "rest": [67, 69, 81, 139, 140, 142, 145, 248, 250, 254, 255], "batch_siz": [67, 69, 81, 85, 86, 109, 110, 114, 115, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 244, 248, 250], "adam": [67, 69, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 244, 248, 250, 251], "speech_commands_v2": [67, 69, 124, 125, 139, 140, 141, 142, 143, 144, 145, 149, 250, 251], "class_mod": [67, 69, 81, 82, 86, 87, 109, 114, 124, 129, 130, 131, 136, 139, 140, 142, 145, 146, 149, 150, 151, 153, 154, 248, 250], "kerasmodel": [67, 68, 69, 108, 111, 112, 113, 118, 120, 121, 134, 136, 159, 160, 162, 244, 247, 248, 250], "build_model_funct": [67, 69, 118, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 244, 250, 254], "my_model_build": [67, 69, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 142, 144, 145, 146, 148, 149, 150, 151, 153, 154, 244, 248, 250, 251, 252, 254], "keras_model": [67, 69, 118, 120, 124, 125, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 153, 154, 158, 160, 247, 248, 250, 251, 252, 254], "sequenti": [67, 69, 120, 124, 125, 126, 127, 128, 129, 130, 131, 140, 141, 142, 143, 146, 148, 149, 244, 248, 250], "inputlay": [67, 69, 149], "input_shap": [67, 69, 102, 103, 104, 105, 114, 117, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 244, 248, 250, 251, 252, 254, 255], "use_bia": [67, 69, 124, 131, 149, 172, 175, 180, 196], "pad": [67, 69, 80, 81, 83, 120, 124, 125, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 153, 154, 172, 173, 174, 175, 176, 177, 186, 188, 189, 190, 196, 197, 198, 235, 237, 238, 239, 241, 248, 249, 250, 251, 254, 255], "stride": [67, 69, 123, 124, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 172, 173, 175, 176, 188, 189, 196, 197, 235, 237, 238, 239, 241, 248, 250, 251, 254, 255], "relu": [67, 69, 124, 125, 126, 127, 128, 129, 130, 131, 134, 136, 138, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 153, 154, 170, 235, 237, 238, 239, 241, 244, 248, 250, 251, 255], "flatten": [67, 69, 120, 124, 125, 127, 128, 129, 130, 131, 134, 136, 138, 140, 141, 142, 143, 144, 146, 148, 149, 194, 222, 237, 238, 239, 241, 242, 244, 247, 248, 250], "n_class": [67, 69, 109, 110, 114, 117, 120, 124, 125, 130, 131, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 155, 248, 250, 251, 252, 254, 255], "over": [67, 69, 70, 86, 98, 100, 101, 120, 239, 248, 250, 253, 256], "good": [67, 69, 138, 141, 143, 144, 246, 248, 249, 250, 251], "bad": [67, 69, 250], "log_dir": [67, 117, 120, 122, 141], "reduce_lr_on_plateau": [67, 120, 124, 125, 130, 131, 132, 136, 139, 140, 141, 142, 143, 146, 149, 248, 250], "25": [67, 81, 84, 86, 89, 91, 120, 124, 130, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 154, 227, 241, 248, 249, 250, 251, 254, 255], "patienc": [67, 120, 124, 125, 130, 131, 132, 136, 139, 140, 141, 142, 143, 146, 149, 248, 250], "train_callback": [67, 120, 125, 127, 128, 132, 138, 141, 143, 144, 244], "lr_schedul": [67, 120, 130, 139, 140, 145, 153, 154, 250, 252], "early_stop": [67, 120, 124, 125, 130, 131, 132, 136, 139, 140, 141, 142, 143, 145, 146, 149, 248, 250], "supported_op": [67, 69, 120, 124, 125, 126, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 248, 250, 255], "representative_dataset": [67, 69, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 244, 248, 250, 255], "strongli": [67, 248, 250], "wherea": 67, "rock_paper_scissors_v1": [67, 131], "rock": [67, 131, 137, 146, 231, 234, 237, 238, 239, 242], "paper": [67, 96, 98, 123, 131, 137, 146, 231, 234, 237, 238, 239, 242], "scissor": [67, 131, 137, 146, 231, 234, 237, 238, 239, 242], "96": [67, 104, 105, 123, 125, 126, 132, 138, 139, 141, 143, 144, 145, 154, 234, 237, 242, 247, 248, 249, 251, 254, 256], "robust": [67, 139, 140, 142, 145, 248, 249, 250, 251], "unknown_class_percentag": [67, 81, 89, 91, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 250], "silence_class_percentag": [67, 81, 91, 124, 130, 139, 140, 142, 145, 149, 250], "offset_rang": [67, 81, 124, 130, 139, 140, 142, 145, 149, 250], "trim_threshold_db": [67, 80, 81, 83, 124, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 250, 251], "noise_color": [67, 81, 124, 130, 139, 140, 142, 145, 149, 250], "bg_noise_rang": [67, 81, 124, 130, 139, 140, 142, 145, 149, 250], "bg_noise_dir": [67, 81, 124, 130, 139, 140, 142, 145, 149, 250], "_background_noise_": [67, 100, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 149, 153, 250, 251], "rotation_rang": [67, 86, 129, 131, 136, 146, 151, 153, 154, 248], "35": [67, 123, 125, 129, 131, 132, 138, 139, 141, 142, 143, 144, 145, 146, 149, 150, 151, 153, 154, 248, 249, 251, 254], "contrast_rang": [67, 86, 131, 136, 146, 153, 248], "50": [67, 96, 98, 101, 109, 110, 114, 123, 131, 132, 134, 136, 138, 139, 141, 142, 143, 144, 145, 148, 150, 151, 153, 154, 248, 249, 250, 251, 254, 255], "70": [67, 131, 136, 139, 142, 143, 145, 251, 254], "gauss": [67, 86, 131, 136, 146, 248], "poisson": [67, 86, 131, 136, 146, 248], "horizontal_flip": [67, 86, 129, 131, 136, 146, 151, 154, 248], "vertical_flip": [67, 86, 129, 131, 136, 146, 248], "basic_tf_dataset_exampl": 67, "image_tf_dataset": [67, 70], "audio_tf_dataset": [67, 138, 141, 143, 144], "evaluateautoencodermixin": [67, 126, 150, 155], "idea": [67, 70, 74, 136, 139, 140, 141, 142, 143, 145, 247, 248, 250, 251, 252], "conv1d_exampl": 67, "siamese_contrast": 67, "tflite_micro_magic_wand": [67, 232], "tinyml": [67, 135, 150, 151, 153, 154, 232, 251], "keyword_spot": [67, 232, 237, 241, 242], "visual_wake_word": [67, 232, 246], "trainabl": [68, 145, 237, 241, 242, 246, 248, 250, 251, 252], "child": 69, "sometim": [69, 240, 248, 250], "restart": [69, 70, 100, 246], "bias": [70, 122, 231, 232, 248], "api_doc": [70, 120, 125, 127, 128, 132, 139, 140, 141, 142, 143, 145, 146, 244, 248, 250], "51": [70, 124, 125, 132, 138, 139, 141, 142, 143, 144, 145, 238, 239, 248, 250, 251, 254], "stat": [70, 86, 125, 132, 138, 141, 143, 144, 155, 157], "bottleneck": [70, 123, 246, 250], "pipelin": [70, 123, 125, 132, 138, 141, 143, 144, 245], "weboag": 70, "n": [70, 86, 120, 124, 125, 126, 132, 136, 138, 141, 143, 144, 148, 204, 222, 232, 235, 239, 255, 256], "forward": [70, 169, 185, 199, 220, 249, 255], "constrain": 71, "seamlessli": [71, 233, 246], "appear": [71, 72, 89, 138, 139, 144, 206, 220, 242, 246, 249], "had": [71, 166, 246], "protocol": 71, "scope": [71, 246, 248, 250, 255], "openssh": 71, "upgrad": [71, 74, 222, 234, 235, 236, 237, 238, 239, 240, 241, 242, 247, 248, 250, 251, 255, 256], "consist": [71, 109, 110, 114, 123, 230, 246, 248, 250], "public": [71, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 132, 154], "past": [71, 74, 244, 246, 256], "anywher": [71, 245, 246], "keygen": [71, 246], "ed25519": [71, 246], "id_my_kei": 71, "my_kei": 71, "prioriti": 71, "my_serv": [71, 77], "remote_dir": [71, 77], "domain": 71, "145": [71, 138, 139, 145], "243": [71, 254], "23": [71, 98, 130, 134, 136, 138, 139, 144, 145, 146, 154, 157, 248, 250, 251, 254, 255], "222": [71, 77], "four": [71, 100, 145, 231, 248, 250, 252], "ssh3": 71, "34567": 71, "2222": 71, "filepath": [71, 120, 139, 142], "id_myserv": 71, "identityfil": 71, "key_filenam": [71, 77], "merg": [71, 222, 248, 250], "overwrit": [71, 120, 122, 179, 185, 187], "prod_env": 71, "cuda_devic": 71, "pipe": [71, 75], "csv": [71, 126, 157], "glob": [71, 122], "patch": 71, "wildcard": 71, "upload_fil": [71, 77], "bash": [71, 247], "startup_cmd": [71, 77, 245, 246], "mylib": 71, "7zip": [71, 246], "retlavi": 71, "download_fil": [71, 77], "shutdown_cmd": [71, 77], "curl": [71, 77], "f": [71, 77, 81, 84, 123, 124, 125, 126, 129, 130, 131, 132, 136, 138, 141, 142, 143, 144, 146, 148, 168, 170, 185, 187, 204, 219, 220, 223, 229, 234, 235, 237, 238, 239, 241, 242, 247, 248, 250, 251, 255, 256], "sync_local_mltk": 71, "ssh_remote_dir": [71, 119], "ssh_create_venv": [71, 119], "ssh_environ": [71, 119, 141, 143], "ssh_startup_cmd": [71, 119], "ssh_upload_fil": [71, 119, 141, 143], "ssh_download_fil": [71, 119, 141, 143], "ssh_shutdown_cmd": [71, 119], "echo": 71, "config_path": [71, 77], "create_venv": [71, 77, 246], "ssh_config": [71, 77], "joe": [71, 77], "id_my_serv": [71, 77], "cuda_visible_devic": [71, 77, 248, 251], "dev_env": [71, 77], "libsndfile1": [71, 77, 246], "custom_log": [71, 77], "overridden": [71, 110, 146], "vast_ai": [71, 246], "ssh6": [71, 246], "31521": 71, "stricthostkeycheck": 71, "sub": [71, 77, 89, 91, 100, 109, 110, 111, 112, 114, 138, 141, 144, 200, 210, 248, 250], "ssh5": 71, "23452": 71, "immedi": [71, 138, 141, 143, 144, 200, 215, 221, 230], "background": [71, 81, 86, 138, 139, 141, 142, 143, 144, 248, 249, 250, 251], "until": [71, 109, 110, 111, 112, 113, 114, 120, 122, 224, 230, 248], "finish": [71, 109, 110, 111, 112, 113, 114, 115, 120, 204, 246, 249, 256], "viewer": [72, 242], "markdown": 73, "inlin": [73, 248, 250], "offici": 73, "palett": 73, "shift": [73, 86, 174, 177, 182, 198, 250], "enter": [73, 246, 256], "cell": [73, 74], "ipykernel": 73, "leverag": [73, 74, 141, 143, 145, 232, 250, 252], "As": [73, 132, 134, 136, 138, 244, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256], "account": [73, 74, 244, 245, 249, 250, 254, 256], "signup": [73, 74], "email": [73, 74, 245, 246], "gmail": [73, 74], "proper": 74, "highli": [74, 250], "fastest": 74, "pip3": [74, 233], "speedup": [74, 221], "colaboratori": 74, "semicolon": 75, "colon": 75, "cach": [75, 185, 239], "te": [75, 110], "lambda": [75, 85, 128, 134, 136, 143, 144, 204, 256], "temporari": [75, 220], "numpi": [75, 80, 81, 83, 85, 86, 91, 101, 102, 103, 109, 110, 114, 124, 125, 126, 127, 128, 129, 130, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 169, 185, 239, 244, 250, 255], "19": [75, 124, 130, 134, 138, 139, 141, 143, 144, 145, 151, 154, 248, 250, 251, 254, 256], "tensorflow_prob": 75, "onnxruntim": [75, 255], "temp": [75, 210, 220, 235, 237, 238, 239, 241, 242, 255, 256], "brief": [76, 138, 139, 140, 141, 142, 143, 144, 145, 146, 248, 250], "concept": [76, 247, 248, 249, 250, 254], "programm": 76, "mltk_user_settings_path": [77, 220], "dev_model": 77, "production_model": 77, "efr32": 77, "serial_numb": [77, 220], "123432": 77, "usernam": [77, 220, 228, 246], "resolv": [77, 120], "serialno": 77, "ip_address": [77, 220], "kit": 78, "tflite_micro_acceler": [78, 210, 249], "efm32": 78, "giant": 78, "s1": [78, 136], "gg11": 78, "starter": 78, "thunderboard": 78, "sens": 78, "pro": [78, 256], "dbm": 78, "read_audio_fil": [80, 83, 125, 138, 141, 143, 144, 251], "return_sample_r": [80, 83, 125, 138, 141, 143, 144, 251], "return_numpi": [80, 83, 85, 125, 138, 141, 143, 144, 251], "kwarg": [80, 81, 84, 86, 89, 91, 109, 110, 114, 116, 117, 123, 125, 126, 127, 128, 132, 134, 136, 138, 141, 143, 144, 148, 155, 157, 163, 168, 169, 171, 172, 175, 179, 180, 185, 187, 188, 193, 196, 203, 219, 221, 222, 244], "mono": [80, 139, 142], "1d": [80, 81, 83, 86, 109, 110, 114, 129, 130, 146, 155, 248], "union": [80, 85, 91, 94, 111, 112, 113, 117, 121, 123, 134, 136, 155, 157, 158, 159, 160, 161, 162, 169, 179, 185, 187, 199, 200, 203, 209, 210, 219, 220, 221, 222, 224, 225, 227, 247], "write_audio_fil": [80, 125, 138, 141, 143, 144], "sample_r": [80, 81, 82, 125, 130, 138, 139, 140, 141, 142, 143, 144, 145], "timestamp": [80, 85, 122], "int16": [80, 83, 179, 187], "32768": [80, 83, 249], "eager": [80, 85], "adjust_length": [80, 81, 83, 125, 138, 139, 141, 143, 144, 251], "target_sr": [80, 83, 125, 138, 141, 143, 144, 251], "original_sr": 80, "out_length": [80, 81, 83, 125, 138, 139, 141, 143, 144, 251], "offset": [80, 81, 83, 125, 134, 138, 139, 141, 143, 144, 174, 177, 182, 198, 251], "zero": [80, 81, 89, 91, 96, 99, 100, 138, 139, 141, 142, 143, 144, 158, 174, 177, 182, 186, 191, 198, 215, 239, 246, 250, 251], "crop": [80, 81, 136, 138, 139, 141, 142, 143, 249], "teh": [80, 244], "in_length": 80, "decibel": [80, 81], "apply_frontend": [80, 81, 83, 125, 138, 139, 141, 142, 143, 144, 251], "send": [80, 81, 132, 214, 228, 229, 230, 245, 246, 248, 249, 250], "parallel": [81, 91, 125, 132, 138, 141, 143, 144, 203, 210, 221, 246, 250, 251, 256], "imagedatagener": [81, 86, 114, 131, 146, 248], "except": [81, 86, 117, 138, 141, 143, 144, 219, 220, 222, 235, 251, 256], "asynchron": [81, 203, 229, 230], "multiprocess": [81, 86], "multi": [81, 120, 222, 248, 249, 250], "futur": [81, 122, 179, 250], "concurr": 81, "flow_from_directori": [81, 86], "a0": 81, "get_batch_funct": [81, 82, 86, 87, 139, 142], "noaug_preprocessing_funct": [81, 82, 86, 87, 139], "random": [81, 83, 86, 89, 100, 111, 112, 125, 132, 134, 138, 139, 140, 141, 142, 143, 144, 145, 150, 248, 250, 251, 252], "trim": [81, 100, 134, 138, 139, 141, 143], "sample_length_second": [81, 130], "frontend_en": [81, 82, 109, 130, 139], "2d": [81, 83, 86, 109, 110, 114, 123, 125, 138, 141, 143, 144, 155, 247, 248, 249, 251], "postprocessing_funct": [81, 82, 130, 139], "samplewise_cent": [81, 86, 90, 124, 130, 131, 136, 139, 140, 142, 145, 146, 149, 248, 250], "samplewise_std_norm": [81, 86, 90, 124, 130, 131, 136, 139, 140, 142, 145, 146, 149, 248, 250], "unus": [81, 89, 91], "_silence_": [81, 91, 124, 139, 140, 142, 145, 149, 241, 250, 252, 254], "spawn": [81, 86, 250], "thread": [81, 203, 217, 221, 230], "max_batches_pend": [81, 86, 124, 129, 130, 131, 136, 139, 140, 142, 145, 146, 149, 150, 151, 153, 154, 246, 248, 250], "queue": [81, 86], "get_batches_of_transformed_sampl": [81, 86], "batch_index": [81, 86, 139, 142], "batch_x": [81, 86, 136, 139, 142, 185], "batch_i": [81, 86, 136, 139, 142, 185], "sample_length": [81, 83, 84, 138, 139, 140, 141, 142, 143, 144, 145], "librosa": [81, 138, 139, 141, 142, 143, 144, 150], "my_processing_func": [81, 86, 221], "class_id": [81, 86, 127, 128, 138, 139, 141, 142, 143, 144, 244, 251], "batch_class_id": [81, 86], "batch_filenam": [81, 86], "processed_x": [81, 86], "norm": 81, "divid": [81, 86, 109, 110, 114, 245, 246, 247, 248, 249, 250, 251, 256], "samplewise_normalize_rang": [81, 90], "validation_split": [81, 86, 109, 110, 114, 115, 124, 125, 126, 127, 128, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 153, 154, 244, 248, 250], "validation_augmentation_en": [81, 86, 124, 129, 130, 131, 136, 139, 140, 142, 145, 146, 149, 151, 248, 250], "frontend_dtyp": [81, 82], "uint16": [81, 83, 138, 142, 144, 179, 187, 249, 251], "cast": [81, 83], "color": [81, 101, 114, 247, 248, 252], "brown": 81, "pink": 81, "violet": 81, "noise_color_rang": 81, "min": [81, 90, 120, 126, 134, 136, 138, 141, 143, 170, 174, 177, 182, 190, 198, 230, 255], "loud": 81, "speed_rang": [81, 124, 130, 139, 140, 142, 145, 149, 250], "pitch_rang": [81, 124, 130, 139, 140, 142, 145, 149, 250], "pitch": [81, 201, 202, 204, 207, 250, 256], "semiton": 81, "vtlp_rang": [81, 124, 139, 140, 142, 145, 149, 250], "vocal": 81, "tract": 81, "perturb": 81, "loudness_rang": [81, 124, 130, 139, 140, 142, 145, 149, 250], "decreas": [81, 120, 123, 124, 125, 131, 132, 139, 140, 141, 142, 143, 146, 149, 248, 249, 250, 251, 252, 254], "bg": 81, "bg_nois": [81, 139, 142], "ref": 81, "trimmed_audio": 81, "raw_audio": 81, "required_pad": 81, "len": [81, 83, 126, 127, 128, 134, 136, 138, 139, 141, 142, 143, 144, 148, 185, 204, 221, 230, 244, 247, 248, 251, 255, 256], "pad_upto_index": 81, "uniform": [81, 83, 86, 109, 110, 114, 125, 138, 139, 141, 142, 143, 144, 251], "padded_audio": 81, "concat": [81, 134], "800": [81, 89, 91, 140, 144, 250], "disable_random_transform": 81, "audiofeaturegeneratoret": 81, "sample_shap": [81, 82, 130, 139, 142], "disable_gpu_in_subprocess": [81, 86, 91, 221], "add_channel_dimens": [81, 82], "__init__": [81, 82, 83, 84, 86, 87, 117, 125, 132, 134, 138, 141, 143, 144, 155, 157, 160, 163, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 202, 203, 206, 214, 215, 217, 219, 221, 224, 226, 230], "adc": 81, "shuffl": [81, 86, 89, 91, 109, 110, 111, 112, 114, 125, 128, 131, 132, 138, 141, 143, 144, 146, 203, 204, 248, 249, 256], "shuffle_index_dir": [81, 86], "seed": [81, 86, 89, 91, 125, 128, 132, 138, 141, 143, 144, 203, 204, 251, 256], "follow_link": [81, 86, 89, 91, 100, 109, 114, 138, 144], "max_samples_per_class": [81, 86, 89, 91, 109, 114, 118, 125, 126, 132, 138, 141, 143, 144, 155, 250], "list_valid_filenames_in_directory_funct": [81, 86, 89, 91, 138, 143, 144], "class_count": [81, 86, 89, 91, 109, 110, 114, 116, 125, 127, 128, 132, 138, 141, 143, 144, 244], "parallelaudiogener": 81, "subdirectori": [81, 86, 101, 102, 103, 109, 220, 248], "bmp": [81, 86], "ppm": [81, 86], "tif": [81, 86], "tree": [81, 86, 88, 93, 100, 106, 133, 135, 137, 138, 144, 147, 148, 149, 150, 151, 152, 153, 154, 156, 213, 235, 237, 238, 239, 241, 242, 250], "dog": [81, 86, 100, 101, 109, 110, 114, 115, 129, 151, 155, 247, 252, 255], "cat": [81, 86, 100, 101, 109, 110, 114, 115, 129, 151, 155, 247, 252, 255], "spars": [81, 86, 109, 114, 139], "hot": [81, 86, 109, 114, 125, 128, 132, 138, 141, 143, 144], "ident": [81, 86, 109, 114, 247, 250], "mainli": [81, 86, 109, 114], "autoencod": [81, 86, 109, 114, 126, 150, 155], "yield": [81, 86, 127, 128, 136, 244, 255], "reus": [81, 86, 100, 109, 114], "maintain": [81, 86, 109, 114, 246], "symlink": [81, 86, 109, 114], "list_valid_filenames_in_directori": [81, 86, 89, 91, 100, 138, 143, 144], "base_directori": [81, 86, 89, 91, 100, 138, 144], "search_class": [81, 86, 89, 91, 100, 138, 144], "white_list_format": [81, 86, 89, 91, 100, 138, 144], "shuffle_index_directori": [81, 86, 89, 91, 100, 138, 141, 144], "directoryiter": [81, 86], "target_s": [81, 86, 87, 114, 136], "default_transform": [81, 86, 139, 142], "retrun": [81, 224], "get_random_transform": [81, 86, 139, 142], "configer": 81, "orignal_sr": [81, 139, 142], "whole_sampl": 81, "apply_transform": [81, 86, 139, 142], "keepdim": [81, 90, 134], "1e": [81, 86, 90, 130, 136, 138, 139, 140, 142, 144, 250, 251], "diff": [81, 90], "ptp": [81, 90], "relat": [82, 86, 87, 100], "logic": [82, 87], "audio_data_gener": [82, 139, 142], "save_to_dir": [82, 86, 87, 129, 131, 136, 146], "save_prefix": [82, 86, 87], "save_format": [82, 86, 87, 136, 141, 143, 247], "class_indic": [82, 87, 139, 142], "grai": [83, 134, 136, 248, 249, 250], "16000": [83, 84, 94, 95, 96, 100, 124, 125, 138, 139, 141, 142, 143, 144, 145, 149, 249, 251, 254], "1200": [83, 84, 124, 138, 139, 145, 249, 254], "108": [83, 84, 138, 144, 249, 254], "7500": [83, 84, 130, 138, 144, 149, 249, 251], "125": [83, 84, 124, 130, 138, 139, 141, 143, 144, 145, 146, 149, 248, 249, 251, 254], "025": [83, 84, 124, 138, 139, 141, 143, 144, 145, 149, 249, 251, 254], "06": [83, 84, 124, 138, 139, 141, 142, 143, 144, 145, 149, 237, 238, 241, 242, 248, 249, 251, 254, 255], "40": [83, 84, 125, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 153, 248, 249, 250, 251, 254, 256], "original_sample_r": [83, 125, 138, 141, 143, 144, 251], "my_audio": 83, "resampl": [83, 86, 114, 125, 138, 141, 143, 144, 251], "orig_sr": [83, 125, 138, 141, 143, 144, 251], "squeez": [83, 136, 138, 141, 143, 144, 255], "axi": [83, 86, 125, 134, 136, 138, 139, 141, 142, 143, 144, 251, 255], "process_sampl": [83, 89, 91], "dimens": [83, 86, 125, 138, 141, 143, 144, 186, 191, 249, 250, 251, 254, 255], "window_size_length": 83, "window_step_length": 83, "n_featur": [83, 84], "n_channel": [83, 138, 139, 140, 141, 142, 143, 144, 145, 191, 239], "magic": [83, 147, 148], "micro_features_gener": 83, "cc": [83, 98, 247, 249, 252], "l84": 83, "activity_was_detect": 83, "spectrogram_shap": [84, 125, 138, 141, 143, 144, 251], "__new__": [84, 168, 187, 194, 211], "item": [84, 138, 168, 185, 187, 204, 239, 248, 256], "fromkei": [84, 168, 187], "pop": [84, 168, 187], "unrepresent": [84, 168, 187], "rais": [84, 86, 117, 123, 136, 138, 141, 143, 144, 168, 187, 194, 201, 205, 223, 228, 247, 251], "keyerror": [84, 168, 187], "popitem": [84, 168, 187], "lifo": [84, 168, 187], "empti": [84, 89, 125, 132, 138, 139, 141, 143, 144, 168, 187, 220, 222, 251, 255], "self": [84, 125, 126, 132, 134, 138, 139, 141, 142, 143, 144, 148, 211, 219, 222, 227, 233], "setdefault": [84, 168, 187], "insert": [84, 117, 138, 141, 143, 168, 179, 187], "present": [84, 96, 99, 138, 144, 168, 187, 194, 201, 205, 248, 250, 251], "lack": [84, 168, 187, 250], "75": [84, 89, 91, 125, 138, 141, 142, 143, 144, 146, 251, 255], "trip": 84, "rhe": 84, "deep": [84, 202, 243, 248], "read_image_fil": [85, 132], "target_channel": 85, "nativ": [85, 91, 136], "write_image_fil": [85, 125, 132], "auto_scal": 85, "foreground": 86, "threadpool": [86, 250], "pool": [86, 91, 123, 125, 132, 138, 141, 143, 144, 189, 190, 203, 221, 249], "featurewise_cent": 86, "boolean": [86, 109, 110, 114, 120, 123, 134, 179], "wise": 86, "featurewise_std_norm": 86, "zca_epsilon": 86, "epsilon": [86, 134, 138, 144, 251], "zca": 86, "whiten": 86, "zca_whiten": 86, "degre": 86, "rotat": 86, "width_shift_rang": [86, 129, 131, 136, 146, 151, 153, 154, 248], "pixel": [86, 101, 103, 136, 248], "height_shift_rang": [86, 129, 131, 136, 146, 151, 153, 154, 248], "brightness_rang": [86, 131, 136, 146, 153, 248], "pick": [86, 139, 251], "bright": 86, "shear_rang": 86, "shear": 86, "intens": [86, 246, 248, 250], "angl": [86, 248], "clockwis": 86, "direct": [86, 120, 138, 141, 142, 143, 144], "zoom_rang": [86, 131, 136, 146, 153, 154, 248], "zoom": 86, "channel_shift_rang": 86, "fill_mod": [86, 136], "constant": [86, 136], "nearest": [86, 114], "reflect": [86, 120, 134, 136, 247, 250], "boundari": 86, "fill": 86, "accord": [86, 120, 246], "thegiven": 86, "kkkkkkkk": 86, "abcd": 86, "cval": [86, 136], "aaaaaaaa": 86, "dddddddd": 86, "abcddcba": 86, "dcbaabcd": 86, "abcdabcd": 86, "flip": 86, "horizont": 86, "vertic": 86, "resiz": [86, 114, 129, 131, 132, 138, 141, 143, 144, 146, 150, 151, 153, 154, 248], "interpol": [86, 87, 114, 150], "reserv": 86, "strictli": [86, 255], "enhanc": [86, 91], "contrast": [86, 133, 134, 136, 247], "tv": 86, "grei": 86, "gaussian": 86, "speckl": 86, "varianc": [86, 250], "random_transforms_en": 86, "256": [86, 129, 134, 136, 138, 139, 140, 141, 144, 145, 154, 246, 248, 249, 250, 254], "color_mod": [86, 87, 114, 136, 239], "batch_shap": [86, 87, 139, 142], "bilinear": [86, 114], "rgba": [86, 114], "bicub": [86, 114], "lanczo": [86, 114], "ham": [86, 114], "sample_weight": [86, 109, 110, 114], "rank": 86, "feed": [86, 249, 252], "miscellan": 86, "pictur": 86, "prefix": [86, 91, 120, 221, 244], "jpeg": [86, 138, 141, 143, 144, 248], "pdf": [86, 123, 150, 151, 153, 245, 251], "gif": 86, "form": [86, 109, 110, 114], "valueerror": [86, 123, 194, 201, 205], "img_shap": 86, "transform_paramet": 86, "round": [86, 111, 112, 113, 250], "random_transform": 86, "3d": [86, 125, 129, 138, 141, 143, 144, 146, 248, 251], "signific": [86, 120, 246], "image_data_gener": 87, "data_format": 87, "attribut": [87, 103, 109, 114, 117, 120, 160, 209, 219, 222, 227], "list_dataset_directori": 89, "unknown_class_label": 89, "empty_class_percentag": 89, "empty_class_label": 89, "return_absolute_path": 89, "process_samples_funct": [89, 91, 138, 141, 144], "label_id": [89, 91], "class1": [89, 91], "sample1": [89, 91, 250, 256], "sample2": [89, 91, 250, 256], "sample9": [89, 91], "class2": [89, 91], "class3": [89, 91], "return_audio_data": [89, 91, 125, 138, 141, 143, 144], "sample_path": [89, 91, 138, 141, 144, 248], "split_file_list": [89, 138, 141, 144], "shuffle_file_list_by_group": [89, 138, 144], "group_callback": 89, "42": [89, 125, 128, 132, 138, 139, 141, 143, 144, 145, 148, 179, 187, 204, 239, 251, 254, 256], "flat": [89, 109, 110, 114, 125, 132, 138, 141, 143, 144], "callabl": [89, 91, 111, 117, 123, 199, 203, 219, 220, 221, 224, 225, 235, 236, 237, 240, 242], "load_audio_directori": [91, 125, 138, 141, 143, 144], "onehot_encod": [91, 125, 132, 138, 141, 143, 144], "return_audio_sample_r": 91, "onehot": 91, "datasetv2": 91, "load_image_directori": [91, 132], "return_image_data": [91, 132], "parallel_process": [91, 125, 132, 138, 141, 143, 144, 246, 249], "n_job": [91, 125, 132, 138, 141, 143, 144, 203, 204, 221, 249, 256], "job_batch_s": 91, "parallelprocess": 91, "env": [91, 221, 225], "numpy_funct": 91, "cannot": [91, 109, 110, 114, 118], "nest": [91, 199, 221, 222], "job": [91, 139, 140, 142, 145, 203, 210, 221, 246, 250, 256], "processpool": [91, 250], "enable_numpy_behavior": [91, 132], "behavior": [91, 109, 110, 114], "reshap": [91, 114, 123, 124, 129, 130, 131, 134, 138, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 153, 154, 193, 235, 237, 238, 239, 241, 248, 250, 251, 255], "ravel": 91, "promot": 91, "compat": [91, 123, 169, 255], "ones": [91, 100], "int32": [91, 124, 126, 128, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 179, 187, 237, 238, 239, 241, 248, 250, 254, 255], "throw": [91, 222], "incompat": 91, "float64": [91, 179], "obei": 91, "rule": 91, "capabl": [91, 256], "par": 91, "magic_wand": [93, 148, 232], "prepare_data": 93, "prepar": [93, 109, 114, 127, 128, 141, 143, 244, 255], "load_data": [93, 100, 101, 102, 103, 104, 105, 109, 114, 125, 127, 128, 129, 134, 136, 148, 151, 239, 244, 248, 255], "seq_length": [93, 148], "dataload": 93, "mixkit": [94, 138, 141, 143], "co": [94, 138, 141, 143], "sound": [94, 123, 138, 141, 143, 144, 150, 249, 250, 251, 256], "sfxfree": 94, "download_url": [94, 95, 96, 99, 100, 101, 103, 104, 105, 126, 130, 138, 141, 143, 200], "sfx": [94, 138, 141, 143], "crowd": [94, 138, 141, 143], "pub": [94, 138, 141, 143, 246], "360": [94, 130, 138, 139, 141, 142, 143, 144, 145, 148, 149, 150, 250], "big": [94, 138, 141, 143], "talk": [94, 138, 141, 143], "364": [94, 138, 141, 143], "restaur": [94, 138, 141, 143, 249], "ambienc": [94, 138, 141, 143], "444": [94, 138, 141, 143], "keyboard": [94, 138, 141, 251], "1386": [94, 138, 141], "offic": [94, 138, 141, 249], "447": [94, 138, 141], "hotel": [94, 138, 141], "lobbi": [94, 138, 141], "dine": [94, 138, 141], "area": [94, 138, 141, 155], "453": [94, 138, 141], "url": [94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 130, 132, 136, 138, 141, 142, 143, 144, 150, 153, 154, 200, 235, 237, 238, 239, 241, 242, 246, 247, 255], "dest_dir": [94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 117, 138, 141, 144, 199, 200], "sample_rate_hertz": [94, 95, 96, 144], "logger": [94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 117, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 160, 163, 169, 200, 210, 211, 221, 222, 225, 244, 247], "mix": [95, 100, 144, 251], "mltk_asset": [95, 104, 105, 130, 138, 141, 142, 143, 144, 150, 153], "brd2601_background_audio": [95, 138, 141, 143], "7z": [95, 98, 99, 104, 105, 138, 141, 142, 143, 144, 150, 153, 248], "verify_sha1": [95, 96, 99, 100, 101, 103, 104, 105, 130, 200], "3069a85002965a7830c660343c215edd4fae39c6": [95, 138, 141, 143], "sha1": [95, 96, 98, 99, 100, 101, 103, 104, 105, 200], "clean_dest_dir": [95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 138, 141, 144, 199, 200], "karoldvl": 96, "obstacl": 96, "research": [96, 98, 123, 138, 144, 154, 249], "concentr": 96, "scarciti": 96, "suitabl": [96, 227, 246, 248], "publicli": [96, 99, 249], "tri": 96, "annot": 96, "000": [96, 98, 101, 102, 103, 126, 134, 149, 234, 241, 250, 255], "abund": 96, "unifi": 96, "250": [96, 235, 238], "unlabel": 96, "auditori": 96, "excerpt": 96, "freesound": 96, "human": [96, 100, 143, 144, 250, 251, 256], "baselin": [96, 98, 120, 134, 157, 168, 247, 250], "deriv": [96, 103], "mel": 96, "cepstral": 96, "cross": [96, 125, 128, 132, 138, 141, 143, 144], "piczak": 96, "proceed": 96, "23rd": 96, "acm": 96, "confer": [96, 141, 143, 249], "multimedia": 96, "pp": 96, "1015": 96, "1018": 96, "60764eef4f073d27a766033a47956e23022a2ebc": 96, "dest_subdir": [96, 100, 101, 102, 103, 104, 105, 130, 132, 142, 143, 150, 153, 154, 200, 246, 255], "synthet": [97, 138, 141, 144, 203, 204, 213, 231, 251], "16khz": [97, 98, 99, 138, 139, 141, 142, 143, 144, 145, 203, 251, 254], "mlcommon": [98, 138, 144, 150, 151, 153, 154, 237, 241, 242, 249, 251], "multilingu": [98, 138, 249], "polici": [98, 122], "english": [98, 99, 100, 256], "corpu": 98, "grow": [98, 249], "academ": [98, 249], "commerci": [98, 233, 245, 249], "term": [98, 99, 103, 246, 249], "licens": [98, 100, 102, 246, 249], "under": [98, 100, 102, 103, 109, 110, 114, 155, 249], "BY": [98, 100, 249, 252], "340": 98, "million": [98, 256], "hour": [98, 246, 248, 250], "autom": [98, 245], "align": [98, 100, 120, 244], "analysi": 98, "outlier": [98, 247], "download_url1": 98, "dropbox": [98, 99, 138, 255], "j4p9w4h92e8rruo": [98, 138], "mlcommons_keywords_subset_part1": [98, 138], "dl": [98, 99, 138, 255], "verify_url1_sha1": 98, "6f515d8247e2fee70cd0941420918c8fe57a31e8": [98, 138], "download_url2": 98, "zacujsccjgk92b2": [98, 138], "mlcommons_keywords_subset_part2": [98, 138], "verify_url2_sha1": 98, "7816f5ffa1deeafa9b5b3faae563f44198031796": [98, 138], "commonvoic": 99, "mozilla": [99, 138, 249], "creativecommon": 99, "publicdomain": 99, "peopl": [99, 100, 138, 247, 248, 249, 250], "volunt": 99, "contributor": 99, "around": [99, 100, 132, 134, 244], "compani": 99, "stifl": 99, "innov": 99, "underrepres": 99, "speaker": [99, 100, 256], "colour": 99, "women": 99, "lgbtqia": 99, "technologi": [99, 256], "equal": [99, 109, 110, 114, 124, 131, 134, 139, 140, 142, 146, 149, 157, 248, 255], "everyon": [99, 100], "mobilis": 99, "everywher": 99, "l9uxyr22w3jgenc": [99, 138], "common_voice_subset": [99, 138], "ce424afd5d9b754f3ea6b3a4f78304f48e865f93": [99, 138], "catalog": 100, "speech_command": [100, 124, 125, 139, 140, 141, 142, 143, 145, 149, 153, 250, 254], "varieti": [100, 123, 256], "cover": [100, 140, 250], "arxiv": [100, 123, 149, 150, 151, 153], "ab": [100, 125, 132, 134, 149, 247], "1804": [100, 149], "03209": [100, 149], "creativ": [100, 103], "Its": 100, "speech_commands_v0": [100, 153], "02": [100, 124, 129, 130, 134, 139, 140, 144, 145, 148, 149, 150, 151, 153, 154], "tar": [100, 101, 132, 153, 154, 199, 246, 256], "gz": [100, 101, 132, 153, 154, 199, 246, 256], "01": [100, 125, 136, 141, 143, 227, 247, 248], "august": 100, "727": 100, "105": [100, 144, 235, 238, 256], "829": 100, "april": 100, "11th": 100, "2018": 100, "crowdsourc": 100, "aiyproject": 100, "withgoogl": 100, "open_speech_record": 100, "contribut": [100, 124, 131, 139, 140, 142, 146, 149, 248, 256], "enlarg": [100, 124, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154], "goal": [100, 120, 246, 247], "gather": 100, "speak": [100, 138, 201, 202, 208, 249, 256], "sentenc": [100, 138], "cours": [100, 249, 252], "five": [100, 145, 250, 252], "minut": [100, 223, 246], "twenti": 100, "six": [100, 145, 250, 252], "seven": [100, 145, 250, 252], "eight": [100, 145, 250, 252], "nine": [100, 145, 250, 252], "distinguish": [100, 254], "unrecogn": 100, "ten": 100, "auxiliari": 100, "said": [100, 251], "bed": 100, "bird": [100, 101, 151, 255], "happi": [100, 256], "hous": 100, "marvin": 100, "sheila": 100, "wow": 100, "kept": [100, 123], "particip": 100, "ag": [100, 246], "gender": 100, "assign": [100, 145, 246, 248], "stabl": 100, "though": [100, 130, 246, 254], "utter": 100, "3cfc6b3a_nohash_2": 100, "3cfc6b3a": 100, "third": [100, 109, 110, 114, 125, 137, 246], "nohash": 100, "partit": 100, "repetit": 100, "unrealist": 100, "optimist": 100, "uncontrol": 100, "room": 100, "privaci": [100, 136, 247], "didn": 100, "stipul": 100, "qualiti": [100, 247, 249, 250, 254, 256], "encount": [100, 247, 248, 250, 251, 255], "robot": [100, 256], "don": [100, 150, 157, 246], "equip": 100, "ogg": 100, "vorbi": 100, "littl": [100, 120, 146, 244, 246, 248, 249, 256], "endian": 100, "wave": [100, 149], "extract_loudest_sect": 100, "screen": 100, "incorrect": 100, "arrang": 100, "cope": 100, "noisi": 100, "realist": [100, 256], "readm": [100, 149, 255], "md": [100, 123, 149, 154], "cite": 100, "articl": 100, "speechcommandsv2": 100, "author": [100, 233, 245], "warden": 100, "titl": [100, 136, 247], "vocabulari": 100, "recognit": 100, "journal": 100, "archiveprefix": 100, "eprint": 100, "primaryclass": 100, "cl": [100, 194, 222], "scienc": 100, "year": 100, "month": [100, 246, 256], "apr": 100, "massiv": 100, "thank": [100, 256], "donat": 100, "grate": 100, "couldn": 100, "put": [100, 114, 138, 141, 143, 144, 179, 187, 248, 249], "billi": 100, "rutledg": 100, "rajat": 100, "monga": 100, "raziel": 100, "alvarez": 100, "brad": 100, "krueger": 100, "barbara": 100, "petit": 100, "gursheesh": 100, "kour": 100, "aii": 100, "team": [100, 135, 147, 245], "pete": 100, "petewarden": 100, "4264eb9753e38eef2ec1d15dfac8441f09751ca9": 100, "mltk_cache_dir": [100, 200, 220], "load_clean_data": [100, 141, 143, 144], "v2_clean": 100, "clean_in_plac": 100, "invalid": [100, 123, 141, 143, 169], "That": [100, 245, 246], "invalid_sampl": 100, "_clean": 100, "accident": 100, "stabil": 100, "_nohash_": [100, 138, 144], "bobby_nohash_0": 100, "bobby_nohash_1": 100, "32x32": 101, "categori": [101, 102], "cifar": [101, 129, 151], "homepag": [101, 103], "airplan": [101, 151, 255], "automobil": [101, 151, 255], "deer": [101, 151, 255], "frog": [101, 151, 255], "hors": [101, 151, 255], "ship": [101, 151, 255], "truck": [101, 151, 252, 255], "x_train": [101, 102, 103, 114, 127, 128, 129, 134, 151, 244], "y_train": [101, 102, 103, 114, 127, 128, 129, 134, 151, 244], "x_test": [101, 102, 103, 114, 127, 128, 129, 134, 151, 244, 255], "y_test": [101, 102, 103, 114, 127, 128, 129, 134, 151, 244, 255], "assert": [101, 102, 103, 130, 138, 144, 239, 255], "50000": 101, "10000": [101, 102, 103, 130, 138, 144, 204, 255, 256], "toronto": [101, 129, 151], "edu": [101, 129, 151], "kriz": [101, 129, 151], "6d958be074577803d12ecdefd02955f39262c83c16fe9348329d7fe0b5c001c": 101, "load_data_directori": [101, 102, 103], "60": [102, 103, 124, 127, 128, 131, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 151, 153, 154, 223, 230, 235, 244, 248, 250, 251, 254, 255, 256], "28x28": [102, 103], "shirt": 102, "trouser": 102, "pullov": 102, "dress": 102, "coat": 102, "sandal": 102, "sneaker": 102, "bag": 102, "ankl": 102, "boot": 102, "60000": [102, 103, 134], "28": [102, 103, 127, 128, 132, 134, 138, 139, 140, 141, 142, 144, 145, 146, 151, 154, 244, 248, 249, 250, 251, 254], "copyright": [102, 103], "held": [102, 233], "zalando": 102, "se": 102, "mit": 102, "tshirt": 102, "flash_mnist": 102, "digit": [103, 250], "yann": 103, "lecun": 103, "corinna": 103, "cort": 103, "nist": 103, "alik": 103, "storag": [103, 126, 246], "googleapi": [103, 126, 256], "npz": 103, "731c5ac602752760c8e48fbffcf8c3b850d9dc2a2aedcf2cc48468fc17b673d1": 103, "hand": [104, 105, 131, 146, 231, 237, 242, 247, 248], "gestur": [104, 105, 131, 146, 231, 237, 242, 248], "1ce48f66f7ff999958550147d75aba8da185280c": 104, "input_height": [104, 105, 129, 150, 151], "input_width": [104, 105, 129, 151], "input_depth": [104, 105, 129, 151], "depth": [104, 105, 128, 175, 176, 177, 220, 249, 251, 255], "96x96x1": [104, 105, 131, 146, 237, 239], "77ed1793be7871dcaa79d935b39ba4d23a28e2c3": 105, "tflite_model": [107, 117, 118, 134, 136, 157, 158, 161, 183, 185, 187, 237, 239, 241, 255], "tflite_model_paramet": 107, "cli": [107, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 244], "alia": [108, 202, 211], "datset": [109, 136], "shuffle_dataset_en": [109, 114, 131, 146, 248], "audio_class": 109, "audio_input_shap": 109, "hertz": [109, 157], "class_weight": [109, 110, 114, 115, 124, 125, 127, 128, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 244, 248, 249], "balanc": [109, 110, 114, 115, 124, 125, 127, 128, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 244, 246, 247, 248], "goat": [109, 110, 114, 115, 155, 247], "Or": [109, 110, 114, 233], "pai": [109, 110, 114, 246, 256], "attent": [109, 110, 114], "n_sampl": [109, 110, 114, 125, 132, 134, 138, 141, 143, 144, 155, 255], "bincount": [109, 110, 114, 127, 128, 244], "datagen_context": [109, 114], "context": [109, 114], "audiofeaturegeneratorsettingsset": 109, "get_datagen_cr": [109, 114], "get_shuffle_index_dir": [109, 114], "parallelimagegener": [109, 114, 131, 146], "reproduc": [109, 114, 122, 125, 132, 138, 141, 143, 144, 248, 250, 251], "henc": [109, 114], "loaded_subset": [109, 110, 114], "tempor": [109, 110, 114, 123, 138, 144, 249, 251], "sequence_length": [109, 110, 114], "timestep": [109, 110, 114], "special": [109, 110, 114, 136, 142, 143, 144, 247, 251], "deal": [109, 110, 114, 246], "hdf5": [109, 110, 114, 141, 143], "chunk": [109, 110, 114], "steps_per_epoch": [109, 110, 114, 148], "declar": [109, 110, 111, 112, 113, 114], "exhaust": [109, 110, 111, 112, 113, 114], "infinit": [109, 110, 114], "summarize_dataset": [109, 110, 114, 116, 118, 126, 138, 144, 148], "unload_dataset": [109, 110, 114, 116, 118, 125, 129, 131, 132, 134, 136, 138, 141, 143, 144, 146], "unload": [109, 110, 114, 116, 125, 132, 138, 141, 143, 144, 169], "validation_batch_s": [109, 110, 114], "unspecifi": [109, 110, 114], "validation_data": [109, 110, 114, 116, 125, 126, 128, 132, 134, 136, 138, 141, 143, 144, 148], "fact": [109, 110, 114, 256], "dropout": [109, 110, 114, 125, 127, 128, 129, 130, 140, 141, 142, 143, 146, 148, 149, 241, 244, 248, 250], "x_val": [109, 110, 114, 134], "y_val": [109, 110, 114, 134], "val_sample_weight": [109, 110, 114], "validation_step": [109, 110, 114, 148], "eg": [109, 110, 114], "validation_freq": [109, 110, 114], "collections_abc": [109, 110, 114], "1st": [109, 110, 114], "2nd": [109, 110, 114], "10th": [109, 110, 114], "apart": [109, 110, 114], "draw": [109, 110, 114], "unpack": [109, 110, 114], "invers": [109, 110, 114], "obtain": [109, 110, 114, 120, 245, 246, 249, 250], "parallel_gener": [109, 114, 124, 129, 130, 131, 136, 139, 140, 142, 145, 146, 149, 150, 151, 153, 154, 248, 250], "validation_datagen": [109, 114], "load_dataset": [109, 110, 114, 116, 118, 125, 126, 129, 130, 131, 132, 134, 136, 138, 141, 143, 144, 146, 148], "mltkdataset": [110, 125, 132, 138, 141, 143, 144], "my_dataset_load": [110, 127, 128, 129, 151, 244], "definit": [110, 120, 248], "caller": 110, "scoring_funct": [111, 155], "eval_class": 111, "eval_aug": [111, 112], "datageneratordatasetmixin": [111, 112], "eval_custom_funct": [111, 112, 113, 134, 136, 247], "my_custom_eval_funct": [111, 112, 113], "built_model": [111, 112, 113, 134, 136, 159, 247], "evaluationresult": [111, 112, 113, 118, 134, 136, 155, 247], "isinst": [111, 112, 113, 134, 136, 239], "overall_accuraci": [111, 112, 113, 134, 155], "calculate_accuraci": [111, 112, 113], "eval_max_samples_per_class": [111, 112], "eval_shuffl": [111, 112], "eval_steps_per_epoch": [111, 112, 113, 148], "get_scoring_funct": 111, "image_class": 114, "image_input_shap": 114, "snippet": [115, 142, 204, 216, 223, 229, 251, 255], "basic_exampl": [115, 116, 128], "mltk_core": [115, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 244, 245, 253], "__name__": [115, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 244, 253], "__main__": [115, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 244, 253], "portion": [116, 125, 127, 128, 132, 138, 141, 143, 144, 244, 255], "purpos": [116, 125, 127, 128, 132, 136, 138, 141, 143, 144, 233, 244, 246, 247, 248, 250, 251, 254, 255, 256], "static": [116, 169, 171, 172, 174, 175, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 192, 193, 194, 196, 198, 203, 211, 224, 230, 250], "summarize_class_count": [116, 138, 144], "fore": 117, "model_script_path": 117, "get_attribut": 117, "regist": [117, 129, 131, 134, 146, 169], "model_specification_path": [117, 141, 143], "create_log_dir": [117, 125, 129, 131, 132, 136, 138, 141, 143, 144, 146, 249], "suffix": [117, 220], "delete_exist": [117, 129, 131, 136, 146], "create_logg": 117, "parent": [117, 219], "h5_log_dir_path": [117, 136, 141, 143, 247], "tflite_log_dir_path": 117, "unquantized_tflite_log_dir_path": 117, "keras_custom_object": [117, 134, 136, 138, 144], "serialization_and_sav": 117, "test_mode_en": [117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 244], "enable_test_mod": 117, "add_archive_dir": 117, "base_dir": [117, 220, 239], "create_new": 117, "add_archive_fil": 117, "add_model_parameter_populate_callback": 117, "add_tflite_metadata_entri": 117, "tflitemodelmetadataentri": 117, "archive_path": [117, 118, 199, 200, 256], "mdk": 117, "check_archive_file_is_writ": 117, "throw_except": [117, 215, 222], "writabl": 117, "deserialize_tflite_metadata": 117, "get_archive_dir": 117, "get_archive_fil": [117, 141, 143], "get_tflite_metadata_summari": 117, "include_tag": 117, "exclude_tag": 117, "h5_archive_path": [117, 124, 145, 252], "populate_model_paramet": 117, "tflitemodelparamet": [117, 239], "serialize_tflite_metadata": 117, "metedata": 117, "tag": [117, 124, 126, 129, 130, 131, 134, 136, 139, 140, 142, 145, 146, 148, 149, 150, 151, 153, 154, 185, 248, 250], "set_model_paramet": 117, "paremet": 117, "tflite_archive_path": [117, 124], "tflite_metadata_entri": 117, "add_event_handl": [117, 118], "handler": [117, 118, 219], "mltkmodelev": 117, "my_event_handl": 117, "collid": 117, "trigger_ev": 117, "stage": 118, "before_model_load": 118, "after_model_load": 118, "before_load_dataset": 118, "after_load_dataset": 118, "before_unload_dataset": 118, "after_unload_dataset": 118, "summary_dict": 118, "train_startup": 118, "post_process": [118, 155, 157, 158, 160], "before_build_train_model": 118, "after_build_train_model": 118, "populate_train_callback": 118, "keras_callback": 118, "before_train": 118, "fit_kwarg": 118, "after_train": 118, "training_histori": [118, 160], "before_save_train_model": 118, "keras_model_dict": 118, "keas_model": 118, "after_save_train_model": 118, "before_save_train_result": 118, "trainingresult": [118, 120, 124, 136], "output_dir": [118, 136, 155, 157, 247, 255], "after_save_train_result": 118, "before_save_train_arch": 118, "after_save_train_arch": 118, "train_shutdown": 118, "quantize_startup": 118, "tflite_converter_set": 118, "before_quant": 118, "after_quant": 118, "tflite_flatbuff": [118, 187], "quantize_shutdown": 118, "evaluate_startup": 118, "evaluate_shutdown": 118, "generate_evaluate_plot": 118, "fig": [118, 134, 136, 247], "matlibplot": 118, "figur": [118, 136, 150, 247], "after_profil": 118, "profilingmodelresult": [118, 163, 169], "remote_directori": 119, "softmax": [120, 123, 124, 125, 127, 128, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 153, 154, 235, 237, 238, 239, 241, 244, 248, 250, 251, 254, 255], "build_model": 120, "on_training_complet": [120, 124], "successfulli": [120, 124, 136, 160, 246, 247], "_on_training_complet": [120, 124], "on_save_keras_model": [120, 136, 141, 143, 247], "_on_save_keras_model": 120, "understood": 120, "final": [120, 129, 138, 141, 143, 144, 246, 251, 252, 255], "mere": 120, "reach": [120, 215, 256], "arbitrarili": 120, "calback": 120, "gradient": [120, 138, 139, 140, 141, 142, 143, 144, 145, 146, 248, 250], "categorical_crossentropi": [120, 124, 125, 127, 128, 130, 131, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 151, 153, 154, 244, 248, 250, 251], "checkpoints_en": 120, "logdir": 120, "learningrateschedul": [120, 139, 140, 145, 250, 254], "schedul": [120, 138, 139, 140, 144, 145, 153, 154, 250, 252], "quiet": 120, "favor": 120, "val_loss": [120, 126, 132, 150, 250], "quantiti": 120, "new_lr": 120, "lr": [120, 250], "min_delta": [120, 125, 131, 132, 136, 139, 141, 142, 143, 146, 248], "0001": [120, 131, 141, 143, 153], "optimum": 120, "focu": [120, 145, 245], "cooldown": 120, "min_lr": [120, 139], "bound": [120, 154], "benefit": [120, 233, 245, 248, 250], "stagnat": 120, "seen": [120, 141, 143, 232, 248, 250, 252], "reducelronplateau": [120, 139, 140, 250], "val_accuraci": [120, 124, 125, 126, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 237, 242, 248, 250], "val_": 120, "save_best_onli": 120, "overwritten": 120, "save_weights_onli": 120, "save_weight": 120, "decis": 120, "maxim": [120, 134, 136, 247], "minim": [120, 134, 136, 244, 247], "val_acc": 120, "save_freq": 120, "steps_per_execut": 120, "criteria": [120, 246], "nth": 120, "reliabl": [120, 250, 256], "checkpointopt": 120, "saved_model": 120, "saveopt": 120, "modelcheckpoint": [120, 125, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 248, 250], "conjunct": [120, 245], "state": [120, 246, 250], "qualifi": 120, "restore_best_weight": [120, 136], "restor": 120, "stop_train": 120, "mark": [120, 233], "earli": 120, "earlystop": [120, 124, 139, 140, 149], "subject": [120, 233], "awar": 120, "builtin": 120, "allow_custom_op": 120, "experimental_new_convert": [120, 136], "mlir": 120, "toco": 120, "experimental_new_quant": [120, 136], "experimental_enable_resource_vari": 120, "resourc": [120, 231, 238, 239, 246, 254], "from_saved_model": [120, 255], "generate_unquant": 120, "tflite_builtin": 120, "checkpoints_dir": 120, "get_checkpoint_path": 120, "weights_dir": 120, "contian": 120, "weights_file_format": 120, "get_weights_path": 120, "train_kwarg": 120, "print_not_found_err": 121, "specificaton": 121, "for_utest": 121, "model_typ": [121, 134, 136, 155], "IF": [121, 220, 247, 253], "return_tflite_path": 121, "backend": [122, 134, 169, 202, 203, 204, 206, 249, 255, 256], "wandb_is_initi": 122, "wandb": [122, 144, 245], "wandb_is_dis": 122, "wandb_init_kwarg": 122, "init": 122, "job_typ": 122, "wandb_session_id": 122, "never": [122, 215, 248, 250], "wandb_config": 122, "hyperparamet": 122, "analyz": [122, 232, 254], "wandb_callback": 122, "wandbcallback": 122, "wandb_model_checkpoint_callback": 122, "period": [122, 217, 230, 246], "wandbmodelcheckpoint": 122, "wandb_sav": [122, 245], "glob_str": 122, "base_path": 122, "unix": 122, "noop": 122, "wandb_log": [122, 245], "commit": 122, "serializ": 122, "data_typ": [122, 255], "increment": [122, 125, 132, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 248, 250, 256], "global": [122, 123, 125, 132, 138, 141, 143, 144, 221, 251], "persist": [122, 185, 239], "earlier": 122, "problem": [123, 139, 140, 142, 145, 146, 248, 250, 256], "depthwiseseparableconv2d_arm": [123, 153], "num_class": [123, 127, 128, 134, 151, 244], "l2": [123, 130, 140, 142, 250], "1711": [123, 153], "07128": [123, 153], "mcu": [123, 153, 251], "platform_ml_model": [123, 149, 150, 151, 153, 154], "eembc": [123, 149, 150, 151, 153, 154], "kws10_arm_dsconv": [123, 153], "dsconv_arm_eembc": 123, "fullyconnectedautoencod": [123, 150], "dense_unit": 123, "latent_unit": 123, "dcase": [123, 150], "commun": [123, 150, 233, 246, 249, 251], "challenge2020": [123, 150], "task": [123, 139, 150, 203, 244, 246, 248, 250, 252, 254], "unsupervis": [123, 150], "anomal": [123, 150], "kawagu": [123, 150], "dcase2020_task2_baselin": [123, 150], "toyadmos_fc_a": [123, 150], "toyadmos_autoencoder_eembc": 123, "mobilenetv1": [123, 152, 154, 250], "num_filt": 123, "slim": [123, 154], "net": [123, 154], "mobilenet_v1": [123, 154], "person_detect": [123, 154], "mobilenet_v1_eembc": 123, "mobilenetv2": [123, 132, 137, 139, 145, 250, 252, 254], "alpha": [123, 132, 139, 141, 143, 145, 252, 254], "include_top": [123, 132, 145, 252], "classifier_activ": 123, "last_block_filt": [123, 139, 145, 252, 254], "invert": 123, "residu": 123, "linear": [123, 170], "imagenet": 123, "kind": 123, "mobilenet_v2": 123, "preprocess_input": 123, "resolut": [123, 251, 254], "224": [123, 136, 140, 144, 148], "exactli": 123, "proportion": 123, "4d": 123, "convolut": [123, 138, 140, 142, 144, 146, 173, 174, 176, 177, 197, 198, 232, 247, 249, 250, 251, 252, 254], "avg": 123, "unless": 123, "logit": 123, "1280": [123, 254], "1024": 123, "hardar": 123, "backward": [123, 255], "pretrain": 123, "resnet10v1": [123, 151], "1512": [123, 151], "03385": [123, 151], "resnet": [123, 151], "cifar10_resnetv1": [123, 151], "resnet_v1_eembc": 123, "block_depth": 123, "channel_increas": 123, "neural": [123, 134, 136, 138, 140, 142, 144, 146, 247, 249, 250, 251, 252, 256], "depthwis": [123, 138, 144, 176, 177, 249, 251], "treat": [123, 144, 251], "timeseri": [123, 144, 251], "concret": 123, "explicitli": 123, "2010": 123, "09960": 123, "stridedibb": [123, 251], "ibb": [123, 251], "multitempor": 123, "nonzero": 123, "physic": [124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 157, 246, 254], "depthwise_conv_2d": [124, 136, 138, 139, 144, 145, 153, 154, 175, 237, 241, 251, 254], "59x49x1": [124, 139, 145, 254], "30x25x8": [124, 139, 145, 254], "2x2": [124, 129, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 151, 153, 154, 235, 237, 238, 239, 241, 248, 250, 251, 254, 255], "7x7x8": 124, "conv_2d": [124, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 153, 154, 172, 235, 237, 238, 239, 241, 248, 250, 251, 254, 255], "14x12x24": 124, "3x3x8": [124, 136, 139, 140, 145, 154, 250], "24": [124, 130, 131, 134, 138, 139, 141, 143, 144, 145, 149, 153, 154, 235, 237, 238, 239, 241, 242, 250, 251, 254, 255], "max_pool_2d": [124, 129, 130, 140, 141, 142, 143, 146, 148, 188, 248, 250, 255], "7x6x24": 124, "5x4x20": 124, "1x1": [124, 129, 130, 131, 134, 136, 138, 139, 141, 142, 143, 144, 145, 146, 148, 151, 153, 154, 235, 237, 238, 239, 241, 248, 251, 254, 255], "3x3x24": [124, 131, 237, 239], "2x2x20": 124, "builtinoptionstyp": [124, 126, 129, 130, 131, 134, 139, 140, 145, 146, 148, 149, 150, 151, 153, 154, 248, 250, 254], "fully_connect": [124, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 180, 235, 237, 238, 239, 241, 248, 250, 251, 254], "671": 124, "184": [124, 254, 256], "357": 124, "b8d28debb3af3495c6d8d2a67eedfa22": 124, "2022": [124, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 151, 153, 154, 237, 238, 241, 242, 248, 250, 255], "03t22": 124, "08": [124, 126, 138, 237, 238, 239, 241, 242, 250, 255], "361z": 124, "12052": 124, "165": [124, 125, 138, 154, 254, 255], "49": [124, 138, 139, 141, 144, 145, 235, 248, 251, 254, 255], "3999": [124, 139, 140, 145, 250, 254], "02500000037252903": [124, 130, 138, 139, 141, 143, 144, 145, 149, 254], "05999999865889549": [124, 130, 138, 139, 141, 143, 144, 145, 149, 254], "029999999329447746": [124, 139, 141, 143, 145, 254], "949999988079071": [124, 130, 138, 139, 140, 141, 142, 143, 144, 145, 149, 250, 254], "512": [124, 126, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 153, 154, 237, 250, 254], "0kb": [124, 131, 139], "1x59x49x1": [124, 139, 145, 254], "1x6": [124, 141, 143], "0k": [124, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 235, 248, 250, 251, 254, 255, 256], "3k": [124, 126, 131, 136, 138, 139, 140, 142, 143, 144, 145, 146, 149, 150, 151, 154, 235, 238, 248, 250, 251, 252, 254, 255, 256], "4m": [124, 126, 131, 136, 138, 139, 141, 142, 143, 144, 145, 146, 149, 151, 154, 157, 227, 235, 248, 250, 251, 254, 255], "2k": [124, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 153, 154, 235, 238, 248, 250, 251, 254, 255], "738": [124, 142, 145, 250], "353": 124, "1k": [124, 126, 131, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 235, 238, 248, 250, 251, 254, 255], "37": [124, 129, 138, 139, 144, 145, 153, 251, 254, 255], "78": [124, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 235, 238, 251, 255], "0m": [124, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 235, 238, 248, 250, 251, 254, 255], "2m": [124, 126, 131, 138, 139, 140, 141, 144, 145, 146, 149, 150, 151, 153, 154, 235, 238, 248, 250, 251, 254, 255], "113": 124, "1m": [124, 136, 138, 139, 141, 142, 143, 145, 146, 148, 149, 150, 151, 154, 235, 238, 248, 249, 250, 251, 254, 255], "55": [124, 134, 136, 138, 139, 144, 145, 148, 149, 150, 248, 251, 254, 255], "82": [124, 130, 139, 145, 148, 154, 235, 248, 251], "606": 124, "294": [124, 154], "433": 124, "284": 124, "7m": [124, 131, 136, 139, 140, 141, 143, 144, 145, 146, 151, 153, 154, 235, 248, 250, 254, 255], "1x7x7x8": 124, "1x30x25x8": [124, 139, 145, 254], "592": 124, "7k": [124, 126, 131, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 153, 154, 235, 238, 248, 250, 251, 254, 255], "290": 124, "233": [124, 254], "5k": [124, 126, 131, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 153, 154, 235, 238, 248, 250, 251, 254, 255], "24x3x3x8": 124, "1x14x12x24": 124, "8k": [124, 126, 131, 138, 139, 140, 141, 142, 143, 144, 145, 146, 151, 153, 154, 235, 238, 248, 250, 251, 254, 255, 256], "270": [124, 139, 145, 149, 151, 235, 251, 254], "0u": [124, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 235, 238, 248, 250, 251, 254, 255], "1x7x6x24": 124, "174": [124, 250], "86": [124, 139, 145, 151, 248, 251, 254, 255], "67": [124, 139, 140, 145, 250, 251, 254], "930": [124, 138], "20x3x3x24": 124, "1x5x4x20": 124, "320": [124, 149, 153, 254], "380": [124, 149], "240": [124, 126, 136, 138, 139, 141, 142, 143, 145, 151, 237, 242, 251, 254], "1x2x2x20": 124, "866": 124, "1x80": [124, 141, 143], "966": 124, "480": [124, 138, 141, 143, 144, 251, 254], "772": [124, 144], "6x80": 124, "softmaxopt": [124, 131, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 153, 154, 235, 237, 238, 239, 241, 251, 255], "batchnorm": [124, 125, 130, 131, 134, 136, 140, 141, 142, 143, 146, 149, 248, 250], "maxpooling2d": [124, 125, 127, 128, 129, 140, 141, 142, 143, 146, 244, 248, 250], "discover": [124, 126, 129, 130, 131, 134, 136, 139, 140, 142, 145, 146, 148, 149, 150, 151, 153, 154, 248, 250], "practic": [124, 149, 204, 256], "45": [124, 138, 139, 140, 141, 143, 144, 145, 148, 235, 246, 247, 250, 251, 254, 255], "03": [124, 139, 141, 143, 144, 145, 251, 254], "pool_siz": [124, 127, 128, 129, 130, 131, 134, 136, 140, 141, 143, 146, 188, 244, 248, 250], "get_best_metr": [124, 160], "tflite_path": [124, 164, 183, 187, 235, 236, 238, 239], "h5_path": [124, 136, 141, 143, 247], "volume_gain": [124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 149, 241, 250], "verbose_model_output_log": [124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 149, 241, 250], "get_logg": [124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 169, 219, 244], "train_result": [124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 244], "tflite_eval_result": [124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 244], "profiling_result": [124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 164, 235, 238, 244], "audioment": [125, 138, 141, 143, 144, 249, 251], "tf_dataset": [125, 132, 138, 141, 143, 144], "tf_dataset_util": [125, 132, 138, 141, 143, 144, 249], "image_util": [125, 132, 138, 141, 143, 144], "install_pip_packag": [125, 138, 141, 143, 144, 222], "kerascallback": [125, 127, 128, 132, 141, 143, 244], "terminateonnan": [125, 127, 128, 132, 138, 141, 143, 144, 244], "post_training_integer_qu": [125, 127, 128, 132, 244], "convert_using_integ": [125, 127, 128, 132, 244], "only_quant": [125, 127, 128, 132, 244], "uncom": [125, 132, 138, 141, 143, 144, 249], "data_dump_dir": [125, 132, 138, 141, 143, 144, 249], "dataset_dump": [125, 132, 138, 141, 143, 144, 249], "audio_augmentation_pipelin": [125, 138, 141, 143, 144], "batch_length": [125, 132, 138, 141, 143, 144, 251], "y_shape": [125, 132], "y_batch": [125, 132], "audio_path": [125, 138, 141, 143, 144, 251], "enumer": [125, 127, 128, 129, 131, 132, 134, 136, 138, 139, 141, 142, 143, 144, 146, 235, 238, 244, 251, 255], "new_se": [125, 132], "stateless_split": [125, 132], "num": [125, 132, 254], "np_seed": [125, 132], "adjusted_sampl": 125, "audio_augment": [125, 138, 141, 143, 144, 251], "dataset_dir": [125, 132, 138, 141, 143, 144, 239, 248, 251], "compos": [125, 138, 141, 143, 144, 251], "90": [125, 126, 132, 138, 139, 140, 141, 143, 144, 145, 153, 234, 251, 254, 255], "pitchshift": [125, 141, 143], "min_semiton": [125, 141, 143], "max_semiton": [125, 141, 143], "timestretch": [125, 141, 143], "min_rat": [125, 141, 143], "max_rat": [125, 141, 143], "min_gain_in_db": [125, 138, 141, 143, 144, 251], "max_gain_in_db": [125, 138, 141, 143, 144, 251], "airabsorpt": 125, "min_temperatur": 125, "max_temperatur": 125, "min_humid": 125, "max_humid": 125, "min_dist": 125, "max_dist": 125, "addbackgroundnois": [125, 138, 141, 143, 144, 251], "min_snr_in_db": [125, 138, 141, 143, 144, 251], "max_snr_in_db": [125, 138, 141, 143, 144, 251], "noise_rm": [125, 138, 141, 143, 144, 251], "lru_cache_s": [125, 138, 141, 143, 144, 251], "augmented_sampl": [125, 138, 141, 143, 144, 251], "expand_dim": [125, 127, 128, 130, 134, 136, 138, 139, 141, 142, 143, 144, 244, 251, 255], "audio_dump_path": [125, 138, 141, 143, 144], "image_dump_path": [125, 138, 141, 143, 144], "organ": [125, 132, 138, 141, 143, 144, 245, 255], "mydataset": [125, 132, 138, 141, 143, 144, 246], "super": [125, 126, 132, 134, 138, 141, 143, 144, 148], "train_dataset": [125, 128, 132, 138, 141, 143, 144], "validation_dataset": [125, 128, 132, 138, 141, 143, 144], "_load_subset": [125, 132], "shut": [125, 132, 138, 141, 143, 144, 246], "features_d": [125, 128, 132, 138, 141, 143, 144, 249], "labels_d": [125, 128, 132, 138, 141, 143, 144], "entropi": [125, 128, 132, 138, 141, 143, 144], "2x": [125, 249], "seed_count": [125, 132, 138, 141, 143, 144], "spread": [125, 132, 138, 141, 143, 144, 246], "per_job_batch_s": [125, 132, 138, 141, 143, 144], "drop_remaind": [125, 132, 138, 141, 143, 144], "65": [125, 132, 136, 138, 139, 141, 143, 144, 145, 146, 248, 249, 251, 254, 255], "unbatch": [125, 128, 132, 138, 141, 143, 144], "fetch": [125, 132, 138, 141, 143, 144], "prefetch": [125, 132, 138, 141, 143, 144], "perfect": [125, 132, 138, 141, 143, 144], "reshuffle_each_iter": [125, 132, 138, 141, 143, 144], "coupl": [125, 132, 138, 141, 143, 144, 246], "ecg5000": 126, "electrocardiogram": 126, "140": [126, 148, 254], "simplifi": [126, 232, 244], "rhythm": 126, "interest": [126, 246, 250], "identifi": [126, 233, 246, 247, 248], "compars": [126, 136, 155, 222], "logist": [126, 129, 134], "564": 126, "ecg": 126, "66c8e81181a47dfcc2f0ff53a55aef49": 126, "04": [126, 131, 248, 250], "28t19": 126, "38": [126, 138, 139, 144, 145, 150, 250, 251, 254], "662z": 126, "2028": 126, "8kb": [126, 129, 130, 144], "1x140": 126, "9k": [126, 131, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 153, 154, 235, 238, 248, 250, 251, 254, 255], "131": [126, 146, 151, 248, 255], "89": [126, 250, 251, 254], "9m": [126, 136, 138, 141, 142, 143, 144, 146, 150, 151, 154, 235, 238, 248, 250, 254, 255], "5m": [126, 131, 136, 138, 139, 141, 143, 144, 145, 146, 151, 153, 154, 235, 248, 251, 254, 255], "529": 126, "560": [126, 143], "120": [126, 138, 139, 144, 145, 146, 148, 151, 153, 251, 254], "32x140": 126, "1x32": [126, 138, 144, 146, 248], "878": 126, "16x32": 126, "1x16": [126, 136, 148], "280": [126, 139, 143, 145, 150, 251], "254": [126, 248, 250], "8x16": 126, "1x8": [126, 139, 150, 254], "304": [126, 142], "302": [126, 144, 254], "16x8": 126, "974": 126, "32x16": 126, "6k": [126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 235, 238, 248, 250, 251, 254, 255, 256], "140x32": 126, "210": [126, 139, 144, 145, 148, 153, 251, 254], "sklearn": 126, "model_select": 126, "train_test_split": 126, "create_user_dir": [126, 138, 144, 220], "archive_download": [126, 130, 132, 138, 141, 142, 143, 150, 153, 154, 246, 255], "dataset_path": 126, "ecg500": 126, "genfromtxt": 126, "train_data": [126, 148], "test_data": [126, 148], "train_label": 126, "test_label": 126, "test_siz": 126, "random_st": 126, "min_val": 126, "reduce_min": 126, "max_val": 126, "reduce_max": 126, "train_labels_bool": 126, "test_labels_bool": 126, "normal_train_data": 126, "normal_test_data": 126, "anomalous_train_data": 126, "anomalous_test_data": 126, "_normal_train_count": 126, "_normal_test_count": 126, "_abnormal_train_count": 126, "_abnormal_test_count": 126, "sample_count": 126, "whole": 126, "mae": 126, "sigmoid": [126, 129, 134, 136, 170], "mnist": [127, 128, 134, 244], "convnet": [127, 244, 248], "truncat": [127, 128, 203, 204, 205, 244, 256], "matric": [127, 244], "to_categor": [127, 151, 244], "step_per_epoch": [127, 128, 244], "my_representative_dataset_gener": [127, 128, 134, 136, 244], "input_valu": [127, 244], "from_tensor_slic": [127, 128, 138, 244], "sync": [127, 128, 230, 244], "my_boolean": [127, 128, 244], "my_str": [127, 128, 239, 244], "my_byt": [127, 128, 239, 244], "my_float_list": [127, 128, 244], "fashion": 128, "fashion_mnist": 128, "n_validation_sampl": 128, "n_train_sampl": 128, "x_valid": 128, "y_valid": 128, "_create_dataset_subset": 128, "evaluation_dataset": 128, "one_hot": 128, "my_tf_training_dataset": 128, "my_tf_validation_dataset": 128, "resnetv1": [129, 151, 152, 250], "cifar10": [129, 151, 152, 255], "binary_crossentropi": 129, "bottom": [129, 246, 247, 254], "datagen_dump": [129, 131, 136], "32x32x3": [129, 151, 255], "30x30x32": 129, "3x3x3": [129, 151, 154], "15x15x32": 129, "13x13x32": 129, "3x3x32": [129, 151, 154, 254], "6x6x32": 129, "4x4x64": [129, 254, 255], "2x2x64": 129, "646": 129, "363": 129, "de33dd53e0afb91a365fd2fff0e4c461": 129, "11t17": 129, "986z": 129, "38740": 129, "53": [129, 138, 139, 144, 145, 153, 154, 237, 251, 254, 255], "functool": [129, 151], "cifar10_x_train": 129, "cifar10_y_train": 129, "cifar10_x_test": 129, "cifar10_y_test": 129, "cats_and_dogs_x_train": 129, "cats_and_dogs_y_train": 129, "cats_and_dogs_x_test": 129, "cats_and_dogs_y_test": 129, "n_cat": 129, "n_dog": 129, "elif": [129, 136, 138, 139, 141, 143, 144, 239], "asarrai": [129, 136], "partial": [129, 138, 139, 141, 143, 151, 249], "typer": [129, 131, 134, 136, 146], "datagen_dump_custom_command": [129, 131, 136], "break": [129, 131, 134, 136, 138, 141, 143, 146, 247, 248, 255], "conv1d": [130, 133], "3600x1": 130, "1x3600x1": 130, "52": [130, 138, 139, 144, 145, 149, 154, 235, 251, 254, 255], "1x900x16": 130, "4x1": 130, "1x7x1": 130, "900x16": 130, "900x1x16": 130, "450x1x16": 130, "1x2": [130, 138, 154], "450x16": 130, "1x450x16": 130, "1x450x32": 130, "1x5x16": 130, "450x32": 130, "450x1x32": 130, "225x1x32": 130, "225x32": 130, "1x225x32": 130, "13": [130, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 235, 237, 238, 242, 248, 250, 251, 254, 255, 256], "1x225x64": 130, "1x3x32": 130, "225x64": 130, "225x1x64": 130, "112x1x64": 130, "17": [130, 134, 138, 139, 144, 145, 146, 150, 153, 154, 235, 248, 251, 254, 255], "112x64": 130, "1x112x64": 130, "1x112x128": 130, "1x3x64": 130, "112x128": 130, "112x1x128": 130, "56x1x128": 130, "7168": 130, "416": [130, 144], "034": 130, "nsr": 130, "apb": 130, "afib": 130, "pvc": 130, "ba4d5f7fb808e7566d44a63b4335516": 130, "04t22": 130, "345z": 130, "33920": 130, "05000000074505806": [130, 140, 142, 149, 250], "maxpooling1d": 130, "download_verify_extract": [130, 132, 138, 141, 142, 143, 150, 153, 154, 200, 246, 255], "initial_learning_r": [130, 139, 140, 145, 250, 252], "001": [130, 132, 138, 139, 140, 141, 142, 143, 144, 146, 153, 154, 248, 250, 251, 254], "decay_per_epoch": [130, 139, 140, 145, 250, 252], "99": [130, 141, 143, 144, 151, 234, 248, 250, 251, 255], "lrate": [130, 139, 140, 145, 153, 154, 250, 252], "ekg_waveform": 130, "8221333c8ecef29843d05b6385a4f47074820480": 130, "v1": [130, 132, 150, 153, 154, 246, 255, 256], "file_hash": [130, 132, 138, 141, 142, 143, 150, 153, 154, 200, 255], "show_progress": [130, 132, 138, 141, 142, 143, 150, 153, 154, 200, 246, 255], "remove_root_dir": [130, 132, 138, 141, 142, 143, 150, 153, 154, 199, 200, 246], "post_processing_callback": 130, "weight_decai": [130, 140, 142, 250], "kernel_regular": [130, 140, 250], "48x48x24": [131, 237, 239], "3x3x1": [131, 139, 140, 141, 142, 143, 145, 146, 237, 239, 248, 250, 254], "average_pool_2d": [131, 134, 136, 138, 144, 151, 153, 154, 188, 235, 237, 238, 239, 241, 251], "24x24x24": [131, 237, 239], "11x11x16": [131, 237, 239], "9x9x24": [131, 237, 239], "3x3x16": [131, 140, 146, 151, 154, 237, 239, 248, 250, 254], "4x4x24": [131, 237, 239], "384": [131, 139, 145, 237, 239, 241, 242, 252, 254], "197": [131, 237, 242, 254], "561": [131, 237, 254], "31bdc72ea90bfbcfcbe0fccaed749686": 131, "28t17": 131, "33": [131, 136, 138, 139, 142, 144, 145, 150, 154, 248, 251, 254], "474z": 131, "71408": 131, "1x96x96x1": [131, 235, 238, 239], "1x3": [131, 141, 148, 235, 238, 239], "85": [131, 139, 140, 144, 145, 149, 154, 235, 251, 255], "970": 131, "87": [131, 143, 248, 250, 251, 255], "3m": [131, 136, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 154, 235, 238, 248, 250, 251, 254, 255], "39": [131, 138, 139, 142, 144, 145, 248, 251, 254, 255], "36": [131, 138, 139, 141, 143, 144, 145, 148, 153, 235, 241, 249, 251, 254, 255], "314": 131, "497": [131, 154, 235, 238], "902": 131, "24x3x3x1": [131, 235, 238, 239], "1x48x48x24": [131, 235, 238, 239], "69": [131, 139, 145, 235, 238, 251, 254], "48": [131, 136, 138, 139, 141, 144, 145, 150, 154, 235, 237, 242, 249, 250, 251, 254], "569": 131, "6m": [131, 136, 138, 139, 141, 144, 145, 150, 151, 154, 235, 238, 248, 251, 254, 255], "1x24x24x24": [131, 235, 238, 239], "842": [131, 235, 238], "418": [131, 235, 238], "326": [131, 255], "16x3x3x24": [131, 235, 238, 239], "1x11x11x16": [131, 235, 238, 239], "565": [131, 235, 238], "279": [131, 235, 238], "217": [131, 248], "8m": [131, 136, 138, 139, 141, 142, 143, 144, 145, 146, 148, 151, 154, 251, 254, 255], "24x3x3x16": [131, 235, 238, 239], "1x9x9x24": [131, 235, 238, 239], "540": [131, 138], "1x4x4x24": [131, 235, 238, 239], "1x384": [131, 139, 145, 235, 238, 239, 254], "3x384": [131, 235, 238, 239], "averagepooling2d": [131, 134, 136], "non_person": [132, 154], "image_augment": 132, "image_std": 132, "enabled_numpy_behavior": 132, "image_path": [132, 157, 239], "smart_res": 132, "stateless_random_bright": 132, "max_delta": 132, "stateless_random_contrast": 132, "stateless_random_hu": 132, "stateless_random_satur": 132, "stateless_random_flip_up_down": 132, "stateless_random_flip_left_right": 132, "random_channel_shift": 132, "channel_axi": 132, "random_shear": 132, "row_axi": 132, "col_axi": 132, "random_zoom": 132, "random_shift": 132, "random_rot": 132, "per_image_standard": 132, "machine_learn": [132, 154], "benchmark": [132, 135, 150, 151, 152, 153, 154, 232, 237, 241, 242], "vw_coco2014_96": [132, 154], "mscoco14": [132, 154], "a5a465082d3f396407f8b5abaf824dd5b28439c4": [132, 154], "siames": [133, 134, 136], "vision": [134, 141, 143], "sister": [134, 136, 247], "supervis": [134, 136, 247], "distanc": [134, 136, 247, 248, 250], "segment": [134, 136, 247], "28x28x1": 134, "24x24x4": 134, "5x5x1": 134, "tanh": [134, 170], "12x12x4": 134, "8x8x16": 134, "5x5x4": 134, "4x4x16": [134, 139, 145], "concaten": 134, "26": [134, 138, 139, 141, 142, 143, 144, 145, 154, 241, 251, 254, 255], "27": [134, 138, 139, 142, 144, 145, 150, 153, 154, 235, 248, 250, 251, 254], "327": [134, 139, 145], "440": [134, 138, 141], "676": 134, "823": [134, 255], "400f59a4a68872982f23f08a9de3fe92": 134, "04t18": [134, 139], "645z": 134, "11368": 134, "4kb": [134, 141, 237, 250], "load_tflite_or_keras_model": [134, 136], "x_train_val": 134, "y_train_val": 134, "train_val": 134, "30000": [134, 138], "del": 134, "pairs_train": 134, "labels_train": 134, "make_pair": 134, "x_train_1": 134, "x_train_2": 134, "pairs_val": 134, "labels_v": 134, "x_val_1": 134, "x_val_2": 134, "pairs_test": 134, "labels_test": 134, "x_test_1": 134, "20000": [134, 138, 204, 256], "x_test_2": 134, "pairs_of_sampl": 134, "2len": 134, "n_features_dim": 134, "digit_indic": 134, "idx1": 134, "x1": [134, 136], "label1": 134, "idx2": 134, "choic": [134, 138, 139, 141, 143, 246, 250], "x2": 134, "label2": 134, "randint": [134, 139], "contrastiveloss": [134, 136], "margin": [134, 136, 247], "true_valu": [134, 247], "squar": [134, 136, 247], "dissimilar": [134, 247], "y_true": 134, "y_pred": [134, 136, 155, 247, 255], "square_pr": 134, "math": [134, 138, 144], "margin_squar": 134, "reduce_mean": 134, "get_config": [134, 254], "t1": 134, "t2": 134, "euclidean": [134, 136, 247], "sqrt": [134, 136], "sum": [134, 136, 157, 204, 247, 256], "euclidean_dist": [134, 136], "vect": 134, "sum_squar": 134, "reduce_sum": 134, "embedding_network": [134, 136, 247], "input_1": [134, 136], "input_2": [134, 136], "mention": [134, 136], "tower": [134, 136, 247], "tower_1": [134, 136], "tower_2": [134, 136], "technic": 134, "squared_differ": 134, "emul": 134, "merge_lay": [134, 136], "normal_lay": [134, 136], "conc": 134, "dense_1": [134, 248], "output_lay": [134, 136], "my_model_evalu": [134, 136, 247], "eval_dir": [134, 136, 247], "eval_loss": 134, "eval_accuraci": 134, "tflite_interpret": 134, "input_tensor": [134, 172, 175, 178, 180, 188, 192, 193, 196, 255], "get_input_detail": 134, "output_tensor": [134, 171, 172, 175, 178, 180, 188, 192, 193, 196], "get_output_detail": 134, "new_input_shap": 134, "new_output_shap": 134, "resize_tensor_input": 134, "allocate_tensor": 134, "n_correct": 134, "x1_batch": 134, "x2_batch": 134, "set_tensor": 134, "get_tensor": [134, 185], "pred": [134, 136, 255], "rmsprop": 134, "save_and_seri": [134, 136], "registering_the_custom_object": [134, 136], "x_1": 134, "x_2": 134, "retval": [134, 141, 143, 148], "to_show": 134, "num_col": 134, "exce": [134, 157, 248], "matplotlib": [134, 136, 248], "pyplot": [134, 136, 248], "plt": [134, 136, 247, 248], "num_row": 134, "decrement": [134, 215], "ax": [134, 136, 248], "subplot": [134, 248], "figsiz": [134, 136, 248], "imshow": [134, 136, 248], "cmap": [134, 136, 248], "set_axis_off": 134, "set_titl": 134, "5f": 134, "tight_layout": [134, 136], "rect": 134, "w_pad": 134, "visualize_custom_command": 134, "col": 134, "180x180x1": 136, "88x88x8": 136, "5x5x8": 136, "44x44x8": 136, "42x42x16": 136, "reduceropt": [136, 139, 145], "581": [136, 255], "330": [136, 139, 142, 144, 145, 150, 248, 254], "c5b17e1deffd907e823bfadf519b2d5d": 136, "24t22": 136, "34": [136, 138, 139, 140, 144, 145, 146, 237, 238, 239, 251, 254, 255], "383z": 136, "95964": 136, "18000000715255737": 136, "sharpen_filt": [136, 247], "\u00fe\u00fd\u00fd\u00fd\u00fe\u00fd\u00fd\u00fd\u00fd\u00fd\u00fd\u00fdd\u00fd\u00fd\u00fd\u00fd\u00fd\u00fd\u00fd\u00fe\u00fd\u00fd\u00fd\u00fe": 136, "sharpen_filter_width": [136, 247], "sharpen_filter_height": [136, 247], "sharpen_gain": [136, 247], "balance_threshold_max": [136, 247], "balance_threshold_min": [136, 247], "border": [136, 186, 247], "verify_imin": [136, 247], "verify_imax": [136, 247], "verify_full_threshold": [136, 247], "verify_center_threshold": [136, 247], "5kb": 136, "1x180x180x1": 136, "143": 136, "57": [136, 138, 139, 145, 151, 153, 235, 250, 251, 254], "119": [136, 140, 235, 250, 254], "62": [136, 139, 142, 145, 148, 154, 234, 251, 254], "29": [136, 138, 139, 141, 142, 143, 144, 145, 153, 154, 251, 254, 255], "31": [136, 138, 139, 144, 145, 148, 154, 227, 251, 254], "1x5x5x8": 136, "1x88x88x8": 136, "77": [136, 144, 146, 150, 234, 251, 255], "54": [136, 138, 139, 144, 145, 241, 250, 251, 254], "1x44x44x8": 136, "16x3x3x8": [136, 140, 250], "1x42x42x16": 136, "528": [136, 237, 242, 250], "496": 136, "16x16": 136, "tqdm": [136, 204, 256], "img_to_arrai": [136, 239], "load_img": [136, 239], "fingerprint_signature_generator_dataset": [136, 247], "fingerprintsignaturegeneratordataset": 136, "build_model_tow": 136, "globalaveragepooling2d": 136, "nomatch_multipli": 136, "180": [136, 139, 145, 148, 153, 251, 254], "crop_and_convert_from_uint8_to_int8": 136, "th": [136, 248, 250], "h_offset": 136, "w_offset": 136, "nan_to_num": 136, "0xff": 136, "dataset_archive_url": [136, 247], "dataset_hash": 136, "dataset_path_or_url": 136, "g_filter_s": 136, "approxim": [136, 144, 248, 249, 252], "radiu": 136, "g_filter_sigma": 136, "threshold_vs_accuraci": [136, 247], "preprocess_param": [136, 247], "tobyt": [136, 247], "my_keras_model_sav": [136, 247], "unpack_x_y_sample_weight": 136, "batch_x0": 136, "batch_x1": 136, "x0": 136, "saver": 136, "siamese_network_h5_path": [136, 247], "runtimeerror": [136, 138, 141, 143, 144, 223, 247, 251], "generate_predict": [136, 247], "_compare_signatur": 136, "s2": 136, "di": [136, 247], "y_di": [136, 247], "y_label": [136, 247], "desc": [136, 204, 256], "zeropoint": [136, 185, 191, 239], "look": [136, 141, 143, 246, 247, 248, 251], "tfliitemodel": 136, "y_dtype": [136, 185, 255], "progbar": 136, "s0": 136, "batch_s0": 136, "batch_s1": 136, "collect_sampl": 136, "1e12": 136, "match_sampl": 136, "nomatch_sampl": 136, "all_x": 136, "all_i": 136, "generate_plot": [136, 155, 247, 255], "match_di": [136, 247], "nomatch_di": [136, 247], "match_dis_x": [136, 247], "nomatch_dis_x": [136, 247], "arang": [136, 247], "match_acc": [136, 247], "nomatch_acc": [136, 247], "thre": [136, 247], "valid_count": [136, 247], "ylim": [136, 247], "legend": [136, 247], "loc": [136, 247], "xlabel": [136, 247], "ylabel": [136, 247], "grid": [136, 247], "major": [136, 138, 144, 222, 247, 248, 250, 251, 256], "output_path": [136, 185, 209, 247], "savefig": [136, 247], "eclidean_dist": [136, 247], "dump_dir": 136, "x_sampl": 136, "y_sampl": 136, "tflite_y_pr": 136, "h5_y_pr": 136, "nomatch": 136, "3f": 136, "add_subplot": 136, "preprocess_custom_command": 136, "compare_preprocess": 136, "preprocess_samples_en": 136, "unprocessed_dir": 136, "all_sampl": 136, "list_all_sampl": 136, "fn": [136, 138, 141, 143, 144], "unprocessed_img": 136, "processed_img": 136, "preprocess_sampl": 136, "img_valid": 136, "verify_sampl": 136, "basenam": [136, 138, 141, 143, 144, 200, 255], "previous_verify_msg": 136, "dropp": 136, "v2": [137, 246, 248, 250, 254, 255], "pac": [137, 142, 143, 144, 231], "man": [137, 142, 143, 144, 231], "tenet": [138, 144, 249, 251], "avoid": [138, 246, 251], "30m": [138, 139, 140, 144, 145, 153, 251], "10m": [138, 141, 142, 143, 144, 251], "118x1x108": 138, "118x1x32": 138, "3x1x108": [138, 144], "118x1x96": 138, "1x1x32": [138, 144, 151, 154, 254], "59x1x96": 138, "9x1x96": [138, 144], "59x1x32": 138, "1x1x96": [138, 139, 144, 145, 254], "30x1x96": 138, "30x1x32": 138, "15x1x96": 138, "15x1x32": 138, "41": [138, 139, 144, 145, 154, 248, 251, 254], "44": [138, 139, 141, 142, 143, 144, 145, 248, 249, 251, 254], "46": [138, 139, 140, 144, 145, 148, 251, 254], "47": [138, 139, 144, 145, 248, 250, 251, 254], "1x15": 138, "562": 138, "247": 138, "keyword_spotting_alexa_v2": 138, "344": 138, "026c2f86bf499c3a1386c348888021e5": 138, "10t00": 138, "325z": 138, "4000000059604645": [138, 144], "800000011920929": [138, 141, 142, 143, 144], "216": [138, 248], "900": [138, 141, 142, 144, 148], "208": [138, 248], "1kb": [138, 241], "1x118x1x108": 138, "207": [138, 144, 154], "825": 138, "32x3x1x108": [138, 144], "1x118x1x32": 138, "759": [138, 235], "362": 138, "307": [138, 254], "96x1x1x32": [138, 144], "1x118x1x96": 138, "118": [138, 151], "91": [138, 141, 143, 150, 247, 250, 255], "88": [138, 250, 251, 255], "1x9x1x96": [138, 144], "1x59x1x96": 138, "181": [138, 153], "32x1x1x96": [138, 144, 254], "1x59x1x32": 138, "126": [138, 139, 145, 150, 254, 255], "690": [138, 144, 251], "32x1x1x32": [138, 144, 154], "379": 138, "154": [138, 142, 144, 251], "840": [138, 151], "1x30x1x96": 138, "92": [138, 144, 150, 247, 248, 250, 254], "74": [138, 139, 142, 145, 154, 251, 254], "960": [138, 254], "1x30x1x32": 138, "390": [138, 139, 140, 144, 145, 146, 251], "193": [138, 154], "810": [138, 139, 144, 145, 251], "990": [138, 254], "420": [138, 141, 143, 154, 251, 254], "1x15x1x96": 138, "510": [138, 139, 145, 254], "1x15x1x32": 138, "570": [138, 254], "309": 138, "1x1x1x32": [138, 144], "595": 138, "130": [138, 252], "123": [138, 150, 154, 251], "2x32": 138, "steppedlearnrateschedul": [138, 144], "trivial": [138, 139, 140, 141, 142, 143, 144, 145, 146, 244, 248, 250, 255, 256], "9999": [138, 144], "teacher": [138, 141, 143], "swap": [138, 144, 251], "time_s": [138, 144, 251], "feature_s": [138, 144, 251], "tenet12": [138, 144, 251], "learning_r": [138, 141, 143, 144, 251], "multiscaletemporalconvolut": [138, 144], "kws_stream": [138, 144], "002": [138, 144], "003": [138, 144], "005": [138, 144], "0005": [138, 144, 145, 153, 154, 252], "5000": [138, 144], "mic": [138, 141, 142, 143, 144, 249, 251], "seem": [138, 141, 142, 143, 144, 249, 251], "fairli": [138, 144, 145, 249, 251, 252, 256], "mostli": [138, 144, 248, 249, 251], "meta": [138, 141, 142, 143, 144], "unknown_class_id": [138, 139, 141, 144, 251], "towardsdatasci": [138, 141, 143, 144], "f1e54688e7df": [138, 141, 143, 144], "unknown_class_multipli": [138, 141, 143], "forget": [138, 144, 249], "audio_pipeline_with_augment": [138, 144, 249, 251], "path_batch": [138, 141, 143, 144, 251], "label_batch": [138, 141, 143, 144, 251], "unknown_samples_batch": 138, "x_shape": [138, 141, 143, 144, 251], "x_batch": [138, 141, 143, 144, 251], "warm": [138, 141, 143, 144, 249, 251], "padding_length_m": [138, 141, 143, 144, 251], "padded_frontend_set": [138, 141, 143, 144, 251], "unknown_sampl": [138, 141], "argmax": [138, 141, 143, 144, 251], "rn": [138, 141, 143, 144, 251], "use_cropped_sample_as_unknown": [138, 139, 141, 143], "using_silence_as_unknown": [138, 141, 143], "choice_index": [138, 141, 143], "err": [138, 144, 223, 235, 251], "padding_length": [138, 141, 143, 144, 251], "padded_sample_length": [138, 141, 143, 144, 251], "padded_sampl": [138, 141, 143, 144, 251], "trimmed_sampl": [138, 141, 143], "top_db": [138, 139, 141, 143], "eventu": [138, 141, 143, 248, 250], "trimmed_sample_length": [138, 141, 143], "cropped_sample_perc": [138, 139, 141, 143], "cropped_sample_length": [138, 139, 141, 143], "min_absolute_rms_in_db": [138, 141, 143, 144, 251], "max_absolute_rms_in_db": [138, 141, 143, 144, 251], "ambient": [138, 141, 143, 144, 251], "snr": [138, 144, 251], "louder": [138, 144, 251], "addgaussiansnr": [138, 141, 143, 144, 251], "cv2": [138, 141, 143, 144], "utf": [138, 141, 143, 144, 185, 251], "spectrogram_dump": [138, 141, 143, 144], "transpos": [138, 141, 143, 144, 197, 198, 255], "valid_sample_length": [138, 141, 144], "valid_augmented_sampl": [138, 141, 144], "jpg_data": [138, 141, 143, 144], "applycolormap": [138, 141, 143, 144], "colormap_hot": [138, 141, 143, 144], "imwrit": [138, 141, 143, 144], "all_unknown_sampl": 138, "load_subset": [138, 141, 143, 144], "b6nd8xr7zzwmd6d": 138, "sl_synthetic_alexa": 138, "e657e91d6ea55639ce2e9a4dd8994c112fda2de0": 138, "_unknown": [138, 144], "86wh4defrqj0n9r": 138, "sl_synthetic_alexa_unknown": 138, "2693e5fc72c52f199de2a69ed720644c2c363591": 138, "zwvztg39a340b5q": 138, "sl_synthetic_generic_unknown": 138, "6729b4763a506e427beb0909069219767f3d0d6f": 138, "mlcommons_keyword": [138, 144], "mlcommons_voic": 138, "dst_path": [138, 141, 143, 199, 200], "makedir": [138, 141, 143, 144, 255], "dirnam": [138, 141, 143, 144, 255], "exist_ok": [138, 141, 143, 144, 255], "add_unknown_sampl": [138, 144], "unknown_samples_d": 138, "per_job_batch_multipli": [138, 141, 144], "84": [138, 139, 141, 144, 145, 146, 248, 249, 251, 254], "72": [138, 139, 141, 143, 144, 145, 148, 153, 246, 248, 249, 251], "file_list": [138, 144], "index_path": [138, 144], "strip": [138, 144, 256], "class_base_dir": [138, 144], "walk": [138, 144, 220], "followlink": [138, 144, 220], "startswith": [138, 144], "fname": [138, 144], "endswith": [138, 144, 248], "abs_path": [138, 144], "join": [138, 139, 142, 144, 203, 204, 239, 255, 256], "getsiz": [138, 144], "rel_path": [138, 144], "relpath": [138, 144], "get_sample_group_id_from_path": [138, 144], "get_mltk_logg": [138, 144], "n_file": [138, 144], "ceil": [138, 144, 186], "other_subset_hash": [138, 144], "othersid": [138, 144], "this_subset_hash": [138, 144], "side": [138, 144, 155, 230, 248], "unknown_dir": 138, "mlcommons_keywords_dir": [138, 144], "mlcommons_voice_dir": 138, "listdir": [138, 141, 144, 239, 248], "isdir": [138, 144, 248], "mp3": [138, 144, 249], "c53b335a_nohash_1": [138, 144], "c53b335a": [138, 144], "tok": [138, 144], "common_voice_en_20127845": [138, 144], "20127845": [138, 144], "common_voice_": [138, 144], "azure_af": [138, 144], "za": [138, 144], "adrineur": [138, 144], "aww": [138, 144, 204, 256], "medium": [138, 144, 204, 255, 256], "588b6ace": [138, 144], "gcp_": [138, 144], "azure_": [138, 144], "aws_": [138, 144], "baud_rat": [138, 249], "460800": [138, 249], "industri": [139, 252, 254], "20m": [139, 140, 141, 142, 143, 145, 153], "relu6": [139, 145, 170, 254], "1x1x8": [139, 145, 154, 254], "30x25x48": [139, 145, 254], "31x27x48": [139, 145, 254], "15x13x48": [139, 145, 254], "3x3x48": [139, 145, 254], "15x13x8": [139, 145], "1x1x48": [139, 145, 254], "17x15x48": [139, 145], "8x7x48": [139, 145], "8x7x8": [139, 145], "9x9x48": [139, 145], "4x4x48": [139, 145, 254], "4x4x96": [139, 145, 254], "1x1x16": [139, 145, 151, 154, 254], "3x3x96": [139, 145, 254], "5x5x96": [139, 145], "2x2x96": [139, 145], "2x2x24": [139, 145], "2x2x144": [139, 145], "1x1x24": [139, 145, 254], "144": [139, 140, 145, 150, 250, 254], "3x3x144": [139, 145, 254], "58": [139, 144, 145, 250, 251, 254], "1x1x144": [139, 145, 254], "59": [139, 145, 150, 251, 254], "61": [139, 144, 145, 251, 254, 255], "63": [139, 145, 251, 254], "66": [139, 141, 143, 145, 235, 248, 251, 254], "2x2x48": [139, 145], "2x2x384": [139, 145], "68": [139, 141, 143, 145, 251, 254], "737": 139, "977": 139, "e7018a67a673713fe4935f20ca88b492": 139, "420z": 139, "105016": 139, "259": 139, "258": [139, 255], "104": [139, 144, 145, 151, 251, 254], "71": [139, 145, 235, 237, 238, 250, 251, 254, 255], "8x3x3x1": [139, 140, 145, 250, 254], "189": [139, 145, 254], "214": [139, 145], "1x3x3x8": [139, 145, 154, 254], "102": [139, 145, 254], "780": [139, 145], "8x1x1x8": [139, 145, 254], "300": [139, 144, 145, 146, 150, 154, 248, 254, 255, 256], "684": [139, 145, 149, 241, 254], "288": [139, 145, 254, 255], "48x1x1x8": [139, 145, 254], "1x30x25x48": [139, 145, 254], "241": [139, 145, 146, 251, 254], "967": [139, 145, 254], "4x2": [139, 145, 254, 255], "1x31x27x48": [139, 145, 254], "padopt": [139, 145, 255], "196": [139, 145, 254], "157": [139, 140, 145], "282": [139, 145], "1x3x3x48": [139, 145, 254], "1x15x13x48": [139, 145, 254], "151": [139, 145, 234, 254], "870": [139, 144, 145, 146, 248, 251], "8x1x1x48": [139, 145, 254], "1x15x13x8": [139, 145, 254], "177": [139, 145, 254], "73": [139, 145, 251, 254], "277": [139, 144, 145, 247, 254], "1x17x15x48": [139, 145, 254], "1x8x7x48": [139, 145, 254], "1x8x7x8": [139, 145, 254], "81": [139, 145, 150, 235, 251, 254, 255], "448": [139, 142, 144, 145, 254], "1x9x9x48": [139, 145, 254], "1x4x4x48": [139, 145, 254], "16x1x1x48": [139, 145, 254], "1x4x4x16": [139, 145, 254], "96x1x1x16": [139, 145, 254], "1x4x4x96": [139, 145, 254], "1x3x3x96": [139, 145, 254], "16x1x1x96": [139, 145, 254], "908": [139, 142, 145], "1x5x5x96": [139, 145, 254], "1x2x2x96": [139, 145, 254], "24x1x1x96": [139, 145, 254], "1x2x2x24": [139, 145, 254], "144x1x1x24": [139, 145, 254], "1x2x2x144": [139, 145, 254], "1x3x3x144": [139, 145, 254], "24x1x1x144": [139, 145, 254], "348": [139, 145], "48x1x1x144": [139, 145, 254], "1x2x2x48": [139, 145, 254], "152": [139, 145, 254], "384x1x1x48": [139, 145, 254], "1x2x2x384": [139, 145, 254], "246": [139, 145], "8x384": [139, 254], "python_api": [139, 140, 142, 145, 250], "audio_dataset_mixin": [139, 140, 142, 145, 250], "pseudo": [139, 140, 145, 250], "get_batches_sampl": [139, 142], "l241": [139, 142], "keyword_spotting_overview": 139, "non_unknown_class_indic": 139, "class_index": 139, "sr": [139, 141, 142, 143], "transform_param": [139, 142], "x_len": 139, "bg_noise_offset": 139, "bg_noise_factor": 139, "loudness_factor": 139, "sample_index": 139, "sample_data": 139, "sample_trim": 139, "cnn": [140, 141, 142, 143, 144, 146, 248, 250, 252, 255], "8khz": [140, 142], "49x32x1": [140, 250], "25x16x8": [140, 250], "13x8x16": [140, 250], "7x4x32": [140, 250], "1x4x32": [140, 250], "1x7": [140, 142, 143, 144, 250, 251], "278": [140, 141, 250], "563": [140, 250], "084": [140, 250], "782baa4c65acec0db85a71d2be78eb29": 140, "04t19": [140, 145, 148, 149, 150, 151, 153, 154], "747z": 140, "6712": 140, "160": [140, 144, 248, 250, 251, 254], "004000000189989805": [140, 142, 250], "3kb": [140, 150, 151, 237], "1x49x32x1": [140, 250], "1x4": [140, 146, 148, 149, 248, 250, 251], "574": [140, 250], "98": [140, 144, 146, 247, 248, 250, 254, 255], "76": [140, 144, 250, 251, 254, 255], "273": 140, "720": [140, 141, 142, 143, 144, 251], "1x25x16x8": [140, 250], "244": [140, 144, 250], "1x13x8x16": [140, 250], "260": [140, 145, 146, 248, 250], "129": [140, 250, 251], "32x3x3x16": [140, 146, 151, 248, 250], "1x7x4x32": [140, 250], "896": [140, 250, 254], "1x1x4x32": [140, 250], "1x128": [140, 150, 250], "809": [140, 250], "4x128": [140, 250], "msla": [140, 250], "knowledg": [141, 143, 145, 232, 252], "distal": [141, 143], "behind": [141, 143, 230, 248, 250, 252], "student": [141, 143], "guidanc": [141, 143], "train_teach": [141, 143], "distil": [141, 143], "90m": [141, 143], "respons": [141, 143, 214, 231, 246, 249], "ah": [141, 204, 256], "onning": 141, "hum": [141, 143], "extra": [141, 143], "1000m": [141, 143, 251], "99x68x1": [141, 143], "99x68x10": [141, 143], "49x34x10": [141, 143], "49x34x20": [141, 143], "3x3x10": [141, 143], "24x17x20": [141, 143], "24x17x40": [141, 143], "3x3x20": [141, 143], "12x8x40": [141, 143], "3x3x40": [141, 143], "6x4x40": [141, 143], "6x4x20": [141, 143], "1x4x20": [141, 143], "098": [141, 143], "436": [141, 143, 255], "272": 141, "d701916160b1c6e41f145a166428b7c3": 141, "04t23": 141, "214z": 141, "178": 141, "1x99x68x1": [141, 143], "83": [141, 143, 144, 234, 251, 255], "199": [141, 254], "605": [141, 143], "959": 141, "10x3x3x1": [141, 143], "1x99x68x10": [141, 143], "1x49x34x10": [141, 143], "20x3x3x10": [141, 143], "1x49x34x20": [141, 143], "1x24x17x20": [141, 143], "40x3x3x20": [141, 143], "1x24x17x40": [141, 143], "450": [141, 143, 144, 151, 254], "1x12x8x40": [141, 143], "912": 141, "40x3x3x40": [141, 143], "1x6x4x40": [141, 143], "347": [141, 143], "172": [141, 143, 254, 255], "20x3x3x40": [141, 143], "1x6x4x20": [141, 143], "460": [141, 143], "1x1x4x20": [141, 143], "860": [141, 143], "483": 141, "396": [141, 153], "3x80": 141, "warn": [141, 143, 144, 219, 235, 236, 237, 240, 242, 247, 248, 250, 255], "shutil": [141, 143, 235, 237, 238, 239, 241, 242], "knowledgedistillationmodel": [141, 143], "my_teacher_model_build": [141, 143], "knowledge_distil": [141, 143], "output_shap": [141, 143, 148, 157], "my_teacher_model_sav": [141, 143], "teacher_h5_path": [141, 143], "get_teacher_h5_path": [141, 143], "check_exist": [141, 143], "my_student_model_build": [141, 143], "try_arch": [141, 143], "teacher_model": [141, 143], "load_model": [141, 143], "student_loss_fn": [141, 143], "categoricalcrossentropi": [141, 143], "distillation_loss_fn": [141, 143], "kldiverg": [141, 143], "temperatur": [141, 143], "my_student_model_sav": [141, 143], "student_model": [141, 143], "val_student_loss": [141, 143], "noisereduc": [141, 143], "pyloudnorm": [141, 143], "catch_warn": [141, 143], "simplefilt": [141, 143], "peak": [141, 143], "reduce_nois": [141, 143], "stationari": [141, 143], "700m": [141, 142], "dataset_background_dir": [141, 143], "synthetic_on_off_v1": 141, "0e691aaa4e61c82720b397fb82f5702d8355df11": 141, "_on_off_unknown": 141, "additional_unknown_dataset_dir": 141, "synthetic_on_off_unknown_v1": 141, "075c9e513c7830dfd531cef0306d100f4a3fb94b": 141, "_add_additional_unknown_sampl": 141, "rng": [141, 144], "randomst": [141, 144], "ext": [141, 143], "nexport": [141, 143], "prepare_teacher_or_student_model": [141, 143], "enviro": [141, 143], "game": [142, 143, 144, 231, 251], "69x70x1": 142, "69x70x7": 142, "34x35x7": 142, "34x35x14": 142, "3x3x7": 142, "17x17x14": 142, "17x17x28": 142, "3x3x14": 142, "8x8x28": 142, "3x3x28": 142, "4x4x28": 142, "2x2x28": 142, "112": [142, 149, 250, 254, 256], "939": 142, "997": [142, 153], "ba1f45639f61f277834e4c8ee71ae040": 142, "24t15": 142, "413z": 142, "45475": 142, "205": [142, 254], "detection_threshold_list": [142, 143, 144], "215": 142, "230": 142, "700": [142, 144, 154], "9kb": [142, 143, 237], "1x69x70x1": 142, "265": 142, "710": 142, "486": 142, "7x3x3x1": 142, "1x69x70x7": 142, "1x34x35x7": 142, "14x3x3x7": 142, "1x34x35x14": 142, "1x17x17x14": 142, "28x3x3x14": 142, "1x17x17x28": 142, "1x8x8x28": 142, "451": [142, 154], "293": [142, 255], "28x3x3x28": 142, "1x4x4x28": 142, "227": 142, "532": 142, "1x2x2x28": 142, "1x112": 142, "784": [142, 250], "7x112": 142, "mltk_dir": 142, "pacman_background_noise_dir": [142, 143], "recorded_pacman_game_plai": [142, 143, 144], "749f552bc2aba11e618969d8b0f6e5bdd62ac7a2": [142, 143, 144], "pacman_background_noise_path": 142, "pacman_background_nois": 142, "add_game_background_nois": 142, "40m": 143, "c536b6f6dd07177d0ea769829f66623d": 143, "21t16": 143, "603z": 143, "242": [143, 144], "239": [143, 250, 254], "252": [143, 144, 254], "198": [143, 254], "965": 143, "916": [143, 150], "899": 143, "7x80": 143, "50m": 143, "mous": 143, "050": [143, 146, 248], "cropped_sample_offset": 143, "pacman_background_noise_dst_path": 143, "pacman_background_noise_src_path": 143, "brd2601_background_noise_dst_path": 143, "background_noise_dir": 143, "background_noise_src_path": 143, "soundjai": 143, "235": [143, 144, 251], "94": [143, 148, 150, 153, 251, 255], "direction_command": [144, 251], "ml_commons_keyword": [144, 251], "background_nois": [144, 251], "esc50": [144, 251], "came": [144, 251], "62865": 144, "8382": 144, "12573": 144, "6435": 144, "858": 144, "1287": 144, "upper_band_limit": 144, "lower_band_limit": 144, "98x1x108": 144, "98x1x32": 144, "98x1x96": 144, "49x1x96": 144, "49x1x32": 144, "25x1x96": 144, "25x1x32": 144, "13x1x96": 144, "13x1x32": 144, "1x13": 144, "805": 144, "714": 144, "888": 144, "378a82f4c741744aeba4b89bf6cbbfa2": 144, "2023": [144, 256], "09t02": 144, "108z": 144, "10000000149011612": 144, "1x98x1x108": 144, "758": 144, "163": [144, 250], "79": [144, 251, 255], "1x98x1x32": 144, "630": [144, 254], "301": 144, "1x98x1x96": 144, "1x49x1x96": 144, "1x49x1x32": 144, "600": [144, 248, 254], "315": 144, "1x25x1x96": 144, "1x25x1x32": 144, "1x13x1x96": 144, "1x13x1x32": 144, "455": 144, "393": [144, 254], "7x32": 144, "audio_dataset": 144, "weightsandbiasesmixin": [144, 245], "esc": 144, "download_and_extract": 144, "esc50_dir": 144, "all_keyword": 144, "11k": 144, "extend": [144, 245], "11000": 144, "learnt": [145, 252], "979": 145, "536b7f0ff2de1d1db7c6b35d1e8cb721": 145, "07": [145, 256], "433z": 145, "105032": 145, "2kb": [145, 146, 148, 154, 248, 254], "1x11": 145, "11x384": 145, "cna": 145, "base_mltk_model": [145, 252], "base_model_h5_path": [145, 252], "load_weight": [145, 252], "by_nam": [145, 252], "skip_mismatch": [145, 252], "mismatch": [145, 252], "transfer_learn": [145, 252], "freez": [145, 252], "gave": [145, 252], "84x84x1": [146, 248], "82x82x16": [146, 248], "41x41x16": [146, 248], "39x39x16": [146, 248], "19x19x16": [146, 248], "17x17x32": [146, 248], "8x8x32": [146, 248], "2048": [146, 149, 248, 255], "9b557f35e32df7614723ddaafd77d75f": 146, "02t23": 146, "997z": 146, "137176": [146, 248], "suppression_count": [146, 248], "1x84x84x1": [146, 248], "137": [146, 248, 250, 255], "354": 146, "159": [146, 235, 248, 255], "968": [146, 248], "16x3x3x1": [146, 248, 254], "1x82x82x16": [146, 248], "107": [146, 248], "1x41x41x16": [146, 248], "16x3x3x16": [146, 151, 248], "1x39x39x16": [146, 248], "1x19x19x16": [146, 248], "1x17x17x32": [146, 248], "1x8x8x32": [146, 248], "1x2048": [146, 248], "32x2048": [146, 248], "231": [146, 248, 250], "4x32": [146, 248], "bring": [146, 248], "rock_paper_scissors_v2": [146, 239, 248], "blog": [146, 248], "filter_count": [146, 248], "dump_custom_command": 146, "wand": [147, 148], "128x3x1": 148, "128x3x8": 148, "4x3x1": 148, "42x1x8": 148, "3x3": [148, 154, 255], "42x1x16": 148, "4x1x8": 148, "14x1x16": 148, "016": 148, "133": 148, "268": 148, "wing": 148, "ring": 148, "slope": 148, "c044953d468755c572f05f4f2750d1ef": 148, "646z": 148, "5444": 148, "1x128x3x1": 148, "8x4x3x1": 148, "1x128x3x8": 148, "1x42x1x8": 148, "16x4x1x8": 148, "1x42x1x16": 148, "672": [148, 255], "1x14x1x16": 148, "1x224": 148, "16x224": 148, "132": [148, 248, 254], "135": 148, "4x16": 148, "acceleromet": [148, 247], "tflm_magic_wand": 148, "tflm_magic_wand_dataset": 148, "_data_load": 148, "valid_data": 148, "reshape_funct": 148, "reshaped_data": 148, "_unbatched_validation_data": 148, "sparse_categorical_crossentropi": 148, "_generate_representative_dataset": 148, "pylint": 148, "protect": 148, "3gb": 149, "93": [149, 234, 250, 255], "auc": [149, 150, 151, 153, 154, 155, 234, 247, 248, 250, 255], "993": 149, "somewhat": 149, "992": [149, 251], "49x40x1": 149, "25x20x8": 149, "10x8x1": 149, "336": [149, 241, 254], "680": 149, "012": 149, "36dd6db8f633c9fca61b418402ea698f": 149, "143z": 149, "9028": 149, "6kb": 149, "1x49x40x1": 149, "404": 149, "115": [149, 151, 251], "164": [149, 150, 250], "652": 149, "8x10x8x1": 149, "1x25x20x8": 149, "1x4000": 149, "4x4000": 149, "weights_shap": 149, "mlperf": [150, 152], "tini": [150, 151, 152, 153, 154, 237, 241, 242], "zenodo": 150, "3351307": 150, "1908": 150, "03299": 150, "pattern": [150, 199, 220, 224, 250], "toi": 150, "car": [150, 252], "toyadmo": 150, "front": [150, 153, 248], "64m": 150, "32m": 150, "24khz": 150, "923": 150, "5x128x1": 150, "640": [150, 151, 251, 255], "strided_slic": 150, "264": [150, 250, 255], "535": 150, "176": [150, 255], "anonomli": 150, "5cf2dc0ea093044c7a31a226d44b8084": 150, "676z": 150, "9396": 150, "1x5x128x1": 150, "406": 150, "147": [150, 254, 255], "1x640": 150, "128x640": 150, "128x128": 150, "8x128": 150, "128x8": 150, "640x128": 150, "369": [150, 256], "shapeopt": 150, "stridedsliceopt": 150, "packopt": 150, "rnd": 150, "mean_squared_error": 150, "download_dataset": [150, 153], "features_toy_car_al": 150, "8fc5779a38694eb17e75ad21ef457bd39e6ef937": 150, "reshape_input_callback": 150, "x_length": 150, "subsect": 150, "left_offset": 150, "right_offset": 150, "randrang": 150, "middl": [150, 249, 251], "subsection_data": 150, "cifar10_main": 151, "989": 151, "988": [151, 255], "32x32x16": 151, "16x16x32": 151, "8x8x64": [151, 255], "3x3x64": [151, 153, 154, 237, 241], "1x1x64": [151, 153, 154, 237, 241, 254, 255], "8x8": 151, "502": 151, "122": [151, 239, 248], "d170adc21388920caa3f64ba22cd5b5d": 151, "062z": 151, "53972": 151, "1x32x32x3": [151, 255], "1x10": [151, 255], "225": [151, 254], "211": 151, "933": 151, "442": 151, "583": [151, 154], "16x3x3x3": 151, "1x32x32x16": 151, "883": 151, "1x16x16x32": 151, "32x3x3x32": 151, "32x1x1x16": [151, 154], "830": 151, "64x3x3x32": 151, "1x8x8x64": [151, 255], "64x3x3x64": 151, "266": [151, 234], "64x1x1x32": [151, 154], "1x1x1x64": [151, 153, 255], "769": 151, "1x64": [151, 153], "10x64": 151, "wake": [152, 154], "wakeword": [152, 154], "coco14": [152, 154], "4khz": 153, "998": 153, "50x10x1": 153, "25x5x64": [153, 237, 241], "10x4x1": [153, 237, 241], "5x25": [153, 237, 241], "657": [153, 237, 241], "dsconv_arm": 153, "eb6e9d70cacfd495cdf36577882b83fc": 153, "066z": 153, "21424": 153, "7kb": 153, "1x50x10x1": 153, "1x12": 153, "831": 153, "664": [153, 248], "382": 153, "64x10x4x1": 153, "1x25x5x64": 153, "116": [153, 250], "1x3x3x64": [153, 154], "412": 153, "64x1x1x64": [153, 154], "779": 153, "768": [153, 254], "12x64": 153, "speech_dataset_spec": 153, "20e36646073492fdb4fb8285ec49042e70f9e60": 153, "00025": [153, 154], "cocodataset": 154, "coco": 154, "cocoapi": 154, "mimim": 154, "96x96": [154, 248], "antialia": 154, "buildpersondetectiondatabas": 154, "mobilenet_v1_0": 154, "25_96": 154, "931": 154, "928": [154, 251], "vww_model": 154, "96x96x3": 154, "48x48x8": 154, "48x48x16": 154, "24x24x16": 154, "24x24x32": 154, "12x12x32": 154, "12x12x64": [154, 255], "6x6x64": 154, "6x6x128": 154, "3x3x128": 154, "1x1x128": 154, "3x3x256": 154, "1x1x256": 154, "490": 154, "324": 154, "0fdc40de5812cfa530f6ec120c55171a": 154, "736z": 154, "156424": 154, "334": 154, "1x96x96x3": 154, "156": [154, 254], "110": 154, "941": 154, "695": 154, "8x3x3x3": 154, "1x48x48x8": 154, "387": [154, 248], "249": [154, 251], "341": [154, 248, 250], "16x1x1x8": 154, "1x48x48x16": 154, "297": 154, "257": 154, "1x3x3x16": [154, 254], "1x24x24x16": 154, "645": 154, "281": [154, 250], "1x24x24x32": 154, "299": [154, 254], "806": 154, "1x3x3x32": 154, "589": 154, "507": [154, 255], "202": 154, "1x12x12x32": 154, "617": 154, "251": 154, "1x12x12x64": [154, 255], "139": 154, "474": 154, "1x6x6x64": 154, "603": 154, "236": 154, "128x1x1x64": 154, "1x6x6x128": 154, "1x3x3x128": 154, "458": 154, "128x1x1x128": 154, "596": 154, "229": [154, 256], "256x1x1x128": 154, "1x3x3x256": 154, "256x1x1x256": 154, "1x1x1x256": 154, "1x256": 154, "797": 154, "2x256": 154, "938": 154, "download_data": 154, "update_arch": [155, 158], "generate_summari": [155, 255], "include_al": 155, "evalut": 155, "progress": [155, 200, 204, 256], "bar": [155, 200, 204, 222, 256], "overal": [155, 204, 234, 247, 248, 250, 255, 256], "class_accuraci": 155, "false_positive_r": 155, "roc_auc": 155, "roc_threshold": 155, "roc_auc_avg": 155, "confusion_matrix": 155, "confus": 155, "matrix": [155, 255], "overall_precis": 155, "overall_recal": 155, "overall_pr_accuraci": 155, "overall_tpr": 155, "overall_fpr": 155, "overall_roc_auc": 155, "overall_threshold": 155, "calcuat": 155, "class_stat": 155, "all_scor": 155, "use_devic": [157, 235], "runtime_buffer_s": [157, 166, 169], "return_estim": [157, 169, 235], "discov": 157, "cpu_clock_r": 157, "runtime_memory_byt": 157, "is_simul": 157, "sram": 157, "dsp": 157, "flatbuffer_s": [157, 185], "n_layer": 157, "input_shape_str": [157, 255], "input_dtype_str": 157, "output_shape_str": 157, "output_dtype_str": 157, "accelerator_cycl": [157, 168], "cpu_cycl": [157, 168], "cpu_util": 157, "n_unsupported_lay": 157, "unsupported_lay": 157, "stat_tot": 157, "get_summari": [157, 203, 204, 256], "include_label": 157, "format_unit": [157, 227], "exclude_nul": 157, "full_summari": 157, "generate_report": 157, "to_dict": 157, "0234": 157, "to_json": 157, "indent": 157, "summary_label": 157, "printabl": [157, 179], "layers_label": 157, "member": 157, "input_dtyp": 157, "output_dtyp": 157, "tflite_s": 157, "joul": [157, 168], "j_per_op": 157, "j_per_mac": 157, "op_per_": 157, "mac_per_": 157, "inf_per_": 157, "err_msg": 157, "to_csv": 157, "include_head": 157, "dialect": 157, "excel": 157, "to_str": [157, 170, 186], "tflite_lay": 157, "error_msg": 157, "tflitelay": [157, 169, 171, 172, 175, 178, 180, 185, 188, 192, 193, 196], "is_acceler": 157, "is_unsupport": 157, "opcodestr": [157, 171, 172, 175, 178, 180, 184, 188, 192, 193, 196], "opcode_str": [157, 171, 172, 175, 178, 180, 184, 188, 192, 193, 196], "builtinoper": [157, 171, 172, 175, 178, 180, 184, 188, 192, 193, 196], "options_str": 157, "excluded_column": 157, "tflite_converter_overrid": 158, "resume_epoch": 160, "create_arch": 160, "__note": 160, "__": 160, "model_archive_path": 160, "asdict": 160, "timeout": [162, 203, 214, 215, 217, 223, 224, 230], "termina": 162, "accelerator_wrapp": 163, "api_vers": [163, 169], "git_hash": [163, 169], "tflitemicroacceleratorwrapp": 163, "supports_model_compil": 163, "estimate_profiling_result": 163, "enable_program_record": 163, "enable_data_record": 163, "compile_model": 163, "report_path": 163, "tflm_wrapper": 166, "tflm_acceler": 166, "flatbuffer_data": [166, 185], "enable_profil": [166, 169], "enable_tensor_record": [166, 169], "force_buffer_overlap": [166, 169], "tflitemicroacceler": [166, 169], "layer_error": 166, "tflitemicrolayererror": 166, "fallback": 166, "tflitemicromodeldetail": [166, 169], "input_s": 166, "output_s": 166, "is_profiler_en": 166, "get_profiling_result": 166, "tflitemicroprofiledlayerresult": 166, "is_tensor_recorder_en": 166, "get_recorded_data": 166, "get_layer_error": 166, "wrapper_detail": 167, "accelerat": 167, "specifc": 168, "shallow": [168, 187], "default_factori": 168, "factori": [168, 174, 177, 190, 198], "__missing__": 168, "set_log_level": 169, "get_log_level": 169, "set_logg": 169, "normalize_accelerator_nam": 169, "insensit": [169, 222], "get_supported_acceler": 169, "accelerator_is_support": 169, "load_tflite_model": [169, 238], "unload_model": [169, 238], "disable_simulator_backend": 169, "record_model": [169, 238], "input_data": [169, 172, 175, 178, 180, 188, 192, 193, 196], "enable_accelerator_record": 169, "return_model_detail": 169, "input0": 169, "accelerator_data": 169, "add_accelerator_path": 169, "register_acceler": 169, "get_acceler": 169, "rectifi": 170, "relu_n1_to_1": 170, "hyperbol": 170, "tangent": 170, "sign_bit": 170, "fb_oper": [171, 172, 175, 178, 180, 184, 188, 192, 193, 196], "operatort": [171, 172, 175, 178, 180, 184, 188, 192, 193, 196], "tfliteaddlayeropt": 171, "fuse": [171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 188, 189, 190, 198, 248, 250, 255], "input1_tensor": 171, "tflitetensor": [171, 172, 175, 178, 180, 184, 185, 188, 192, 193, 196], "input1_data": 171, "input2_tensor": 171, "input2_data": 171, "output_data": [171, 172, 175, 178, 180, 188, 192, 193, 196, 239], "from_flatbuff": [171, 172, 175, 178, 180, 184, 188, 192, 193, 196], "get_input_data": [171, 172, 175, 178, 180, 184, 185, 188, 192, 193, 196], "get_input_tensor": [171, 172, 175, 178, 180, 184, 185, 188, 192, 193, 196], "get_output_data": [171, 172, 175, 178, 180, 184, 185, 188, 192, 193, 196], "get_output_tensor": [171, 172, 175, 178, 180, 184, 185, 188, 192, 193, 196], "framework": [171, 172, 175, 178, 180, 184, 188, 192, 193, 196, 244, 255], "typevar": [171, 172, 175, 178, 180, 184, 188, 192, 193, 195, 196], "n_input": [171, 172, 175, 178, 180, 184, 185, 188, 192, 193, 196], "n_output": [171, 172, 175, 178, 180, 184, 185, 188, 192, 193, 196], "numer": [171, 172, 175, 178, 180, 184, 188, 192, 193, 196, 227, 232, 248, 249, 250, 256], "tfliteconv2dlayeropt": 172, "bia": [172, 175, 180, 196], "filters_tensor": [172, 175, 196, 239], "filters_data": [172, 175, 196], "bias_tensor": [172, 175, 180, 196], "bias_data": [172, 175, 180, 196], "tfliteconvparam": [172, 239], "opt": [173, 176, 181, 189, 197], "activation_str": [173, 176, 181, 189], "tfliteactiv": [173, 176, 181, 189], "padding_str": [173, 176, 189, 197], "tflitepad": [173, 174, 176, 177, 189, 190, 197, 198], "stride_width": [173, 174, 176, 177, 186, 189, 190, 197, 198], "stride_height": [173, 174, 176, 177, 186, 189, 190, 197, 198], "options_typ": [173, 176, 181, 189, 197], "builtinopt": [173, 176, 181, 189, 197], "options_type_str": [173, 176, 181, 189, 197], "convparamsquant": 174, "dilation_width_factor": [174, 177], "dilat": [174, 177], "dilation_height_factor": [174, 177], "input_offset": [174, 177, 182, 198], "weights_offset": [174, 177, 182, 198], "output_offset": [174, 177, 182, 198, 239], "per_channel_output_multipli": [174, 177, 198, 239], "per_channel_output_shift": [174, 177, 198, 239], "quantized_activation_min": [174, 177, 182, 190, 198, 239], "quantized_activation_max": [174, 177, 182, 190, 198, 239], "tflitedepthwiseconv2dlayeropt": 175, "tflitedepthwiseconvparam": [175, 239], "depthwiseconvparamsquant": 177, "opcode_vers": [178, 184, 192], "tflitelayeropt": [178, 184, 192, 193], "scalar": [179, 187], "syntax": [179, 187], "foo": [179, 187, 222], "int64": [179, 187], "uint32": [179, 187], "uint64": [179, 187], "doubl": [179, 187, 251, 254], "str_list": [179, 187], "deseri": [179, 187], "serialized_data": [179, 187], "boolvalu": 179, "sign": 179, "int8valu": 179, "unsign": [179, 209, 230], "uint8valu": 179, "int16valu": 179, "uint16valu": 179, "int32valu": 179, "uint32valu": 179, "int64valu": 179, "uint64valu": 179, "floatvalu": 179, "doublevalu": 179, "binaryvalu": 179, "stringvalu": 179, "stringlist": 179, "int32list": 179, "floatlist": 179, "i8": 179, "u8": 179, "i16": 179, "u16": 179, "i32": 179, "u32": 179, "i64": 179, "u64": 179, "f32": 179, "f64": 179, "int32_list": 179, "float_list": 179, "schema_vers": 179, "root_typ": 179, "tflitefullyconnectedlayeropt": 180, "accumulator_depth": 180, "neuron": [180, 247], "weights_tensor": 180, "weights_data": 180, "tflitefullyconnectedparam": [180, 239], "fullyconnectedparamsquant": 182, "output_multipli": 182, "output_shift": 182, "load_flatbuffer_fil": [183, 185, 239, 255], "schema_v3": 185, "awesom": 185, "my_new_model": 185, "add_metadata": [185, 239], "my_metadata": [185, 239], "all_metadata": 185, "get_all_metadata": 185, "input_buff": 185, "inference_result": 185, "cwd": [185, 220, 225], "backslash": 185, "slash": [185, 199, 220], "flatbuffer_model": 185, "modelt": 185, "flatbuffer_subgraph": 185, "subgrapht": 185, "subgraph": [185, 195], "selected_model_subgraph": 185, "n_subgraph": 185, "get_flatbuffer_subgraph": 185, "get_tensor_data": 185, "get_metadata": [185, 239], "lookup": 185, "remove_metadata": 185, "regenerate_flatbuff": [185, 239], "underli": [185, 203, 239, 256], "quantize_to_input_dtyp": 185, "dequantize_output_to_float32": 185, "out_height": 186, "in_height": 186, "out_width": 186, "in_width": 186, "region": 186, "filter_height": [186, 189], "filter_width": [186, 189], "l1235": 187, "add_to_tflite_fil": 187, "load_from_tflite_fil": 187, "flatbufferdictionari": 187, "load_from_tflite_flatbuff": 187, "load_from_tflite_model": [187, 239], "add_to_tflite_flatbuff": 187, "add_to_tflite_model": [187, 239], "tflitepool2dlayeropt": 188, "tflitepoolparam": [188, 239], "averagepoolingevalquant": 190, "fb_quantiz": 191, "quantizationparameterst": 191, "quantization_dimens": 191, "requires_copi": 193, "memcpi": 193, "n_input_el": 193, "flat_siz": 194, "occurr": [194, 201, 205], "sy": [194, 201, 205, 224, 235, 255], "maxsiz": [194, 201, 205], "fb_tensor": 195, "tensort": 195, "dtype_str": 195, "tfliteshap": 195, "tflitequant": 195, "shape_dtype_str": 195, "include_batch": 195, "dim0": 195, "dim1": 195, "transpose_conv": 196, "tflitetransposeconvlayeropt": 196, "tflitetransposeconvparam": 196, "calculateopdata": 198, "extract_arch": 199, "extract_nest": [199, 200], "destin": [199, 200, 222], "gzip_fil": 199, "src_path": 199, "gzip": 199, "gzip_directory_fil": [199, 256], "src_dir": 199, "dst_archiv": 199, "regex": [199, 220, 224, 230], "download_dir": 200, "archive_fnam": 200, "file_hash_algorithm": 200, "update_onchange_onli": 200, "download_details_fnam": 200, "return_uptod": 200, "progressbar": 200, "sha256": 200, "hasn": [200, 254], "verify_extract": 200, "extract_details_fnam": 200, "tarbal": 200, "verify_file_hash": 200, "file_path": [200, 220], "expected_sha1": 200, "verify_sha256": 200, "expected_sha256": 200, "voicepitch": [201, 202, 204, 256], "voicer": [201, 202, 204, 256], "keyword_group": 202, "out_dir": [203, 204, 256], "list_supported_backend": 203, "is_run": [203, 221], "is_backend_load": 203, "raise_except": 203, "load_backend": [203, 204, 256], "install_python_packag": [203, 204, 256], "boto3": 203, "cognitiveservic": 203, "speechconfig": 203, "texttospeech": 203, "texttospeechcli": 203, "auto_install_python_packag": 203, "comment": [203, 222, 244, 248, 250], "list_languag": 203, "list_voic": [203, 204, 256], "language_cod": [203, 206], "list_configur": [203, 204, 205, 256], "max_count": [203, 204, 205, 256], "generationconfig": 203, "count_charact": [203, 256], "charg": [203, 246, 256], "char": [203, 209, 224], "as_dict": 203, "on_finish": [203, 204, 256], "forev": [203, 230], "alexa_dataset_gener": [204, 256], "audio_dataset_gener": [204, 213, 256], "alexa_dataset": [204, 256], "alias": [204, 205, 254, 256], "ehlexa": [204, 256], "eelexa": [204, 256], "aalexa": [204, 256], "aah": [204, 256], "uh": [204, 256], "ala": [204, 256], "alex": [204, 256], "lex": [204, 256], "lexa": [204, 256], "lexu": [204, 256], "alexu": [204, 256], "exu": [204, 256], "exa": [204, 256], "alert": [204, 245, 256], "alec": [204, 256], "alef": [204, 256], "ale": [204, 256], "al": [204, 256], "aleph": [204, 256], "alevin": [204, 256], "alegar": [204, 256], "alexia": [204, 249, 256], "alexin": [204, 256], "alencon": [204, 256], "aleuron": [204, 256], "alemb": [204, 256], "alic": [204, 249, 256], "aleeyah": [204, 256], "xslow": [204, 256], "xfast": [204, 256], "all_configur": [204, 256], "n_config": [204, 256], "pretti": [204, 256], "rjust": [204, 227, 256], "pb_outer": [204, 256], "config_list": [204, 256], "pb_inner": [204, 256], "as_list": [205, 222], "hashable_valu": 206, "hex_hash": 206, "var_nam": 209, "length_var_nam": 209, "data_length": 209, "const": [209, 238, 239], "prepend_lin": 209, "fmt_str": 209, "prepend": [209, 222], "stdint": 209, "0x": 209, "02x": 209, "build_mltk_target": 210, "additional_vari": 210, "source_dir": 210, "build_dir": 210, "build_subdir": 210, "use_user_opt": 210, "config_onli": 210, "build_onli": 210, "previosli": 210, "invoke_mltk_target": 210, "build_target": 210, "get_build_directori": 210, "parse_vari": 210, "cmake_vari": 210, "tensorflowcudavers": 211, "__getnewargs__": 211, "plain": 211, "pickl": 211, "__match_args__": 211, "cudnn": 211, "python_min": 211, "python_max": 211, "__module__": [211, 219, 222, 227], "_cl": 211, "__repr__": 211, "nice": 211, "__slots__": 211, "deiniti": 211, "get_tensorflow_version_with_cudnn_vers": 211, "cudnn_ver": 211, "check_tensorflow_cuda_compatibility_error": 211, "log_file_path": 211, "generate_hash": 212, "hash_fil": 212, "include_filenam": 212, "hash_object": 212, "hashlib": 212, "jlink_stream": [213, 216, 217], "serial_read": [213, 223, 224], "command_stream": 214, "cmd": [214, 225, 229, 237, 242, 255], "response_stream": 214, "jlinkstreamopt": [214, 217], "reset_devic": [214, 217], "no_respons": 214, "ifc": 215, "stream_context": 215, "deviceinterfac": 215, "is_open": [215, 224, 230], "max_read_s": 215, "end_tim": 215, "buffer_us": 215, "pend": 215, "buffer_unus": 215, "read_data_avail": [215, 216], "readi": [215, 230, 246, 247, 251, 255], "write_data_avail": 215, "buffer_hexdump": 215, "hexdump": 215, "max_siz": [215, 217, 230], "read_al": [215, 216, 230], "initial_timeout": 215, "flush": [215, 219, 224], "classify_audio_mltk_cli": 216, "jlinkstream": [216, 218], "jlinkdatastream": [216, 217], "audio_stream": 216, "chunk_data": 216, "default_opt": 217, "is_connect": 217, "log_fil": 219, "log_file_mod": 219, "base_level": 219, "file_level": 219, "add_console_logg": 219, "make_filelik": 219, "redirect_stream": 219, "stderr": 219, "close_atexit": 219, "redirect": 219, "textio": [219, 224], "timing_decor": 219, "decor": [219, 222], "set_console_level": 219, "get_level": 219, "consoleloggerlevelcontext": 219, "__enter__": 219, "__exit__": 219, "traceback": 219, "__dict__": [219, 222, 227], "mappingproxi": [219, 222, 227], "__weakref__": [219, 222, 227], "__doc__": [219, 222, 227], "__annotations__": [219, 222, 227], "weak": [219, 222, 227], "dummylogg": 219, "fullpath": [220, 247], "get_actual_path": 220, "has_filenam": 220, "create_dir": 220, "create_tempdir": [220, 255], "subdir": 220, "get_user_set": 220, "settings_fil": 220, "add_user_set": 220, "remove_directori": 220, "retri": 220, "clean_directori": 220, "copy_directori": 220, "src": [220, 235, 237, 238, 239, 241, 242], "dst": [220, 235, 237, 238, 239, 241, 242], "exclude_dir": 220, "set_file_last_modifi": 220, "dt": 220, "datetim": 220, "file_is_new": 220, "source_path": 220, "other_path": 220, "file_is_in_us": 220, "recursive_listdir": 220, "return_relative_path": 220, "walk_with_depth": 220, "gil": 221, "driven": 221, "_processing_callback": 221, "pool_callback": 221, "sleep": 221, "create_batch": 221, "pool_batch": 221, "process_pool": 221, "entry_point": 221, "expend": 221, "complex": [221, 246, 251, 252, 254, 255], "processpoolbatch": 221, "short_vers": 222, "minor": 222, "defaultdict": 222, "dictobject": 222, "my_dict_obj": 222, "__getattr__": 222, "__setattr__": 222, "setattr": 222, "merge_dict": 222, "copy_destin": 222, "obj": 222, "flatten_list": 222, "list_rindex": 222, "lst": 222, "revers": [222, 255], "contains_class_typ": 222, "get_case_insensit": 222, "is_tru": 222, "is_fals": 222, "forward_method_kwarg": 222, "prepend_exception_msg": 222, "append_exception_msg": 222, "debugger_is_act": 222, "debugg": [222, 253], "notebook_is_act": 222, "ipython": [222, 247], "module_nam": 222, "install_dir": 222, "no_dep": 222, "import_module_at_path": 222, "load_json_saf": 222, "trail": 222, "find_object_key_with_valu": 222, "needl": 222, "constructor": 222, "lowercas": 222, "find_object_value_with_kei": 222, "ignore_cas": 222, "enum": 222, "find_object_value_with_key_or_valu": 222, "timeit": 222, "profile_model_on_devic": 223, "serialread": 223, "start_regex": [223, 224], "ignorecas": [223, 224], "stop_regex": [223, 224], "fail_regex": [223, 224], "hardfault": 223, "timeouterror": 223, "error_messag": [223, 224], "device_log": 223, "captured_data": [223, 224], "multilin": 224, "dotal": 224, "outfil": [224, 225, 255], "stdout": [224, 255], "ascii": 224, "rb": 224, "callback_regex": 224, "ignore_char": 224, "list_port": [224, 230], "resolve_port": [224, 230], "activity_timeout": 224, "check_fail_condit": 224, "check_start_condit": 224, "check_stop_condit": 224, "delay_per_char": 224, "run_shell_cmd": [225, 255], "line_processor": 225, "retcod": [225, 255], "retmsg": [225, 255], "signal_handl": 226, "sig": [226, 228], "sigint": [226, 228], "resignal_on_exit": 226, "raise_exception_if_not_main_thread": 226, "formattedint": 227, "__str__": 227, "formattedfloat": 227, "add_spac": 227, "ljust": 227, "0314": 227, "pretty_time_str": 227, "iso_time_str": 227, "iso": 227, "8601": 227, "19t23": 227, "459z": 227, "iso_time_filename_str": 227, "459": 227, "get_current_o": 228, "osx": 228, "is_window": 228, "is_linux": 228, "is_osx": 228, "has_admin": 228, "admin": [228, 249], "permiss": [228, 233], "get_usernam": 228, "raise_sign": 228, "kill": 228, "make_path_execut": 228, "send_sign": 228, "pid": 228, "children": 228, "recept": [229, 230], "alexa_demo": [229, 249], "data_buff": 229, "bytesio": 229, "read_command": [229, 230], "flush_input": [229, 230], "seek": 229, "getbuff": 229, "nbyte": 229, "rx_buffer_length": 230, "rx": 230, "open_synchronize_timeout": 230, "4096": 230, "rx_bytes_avail": 230, "tx_bytes_avail": 230, "is_synchron": 230, "ack_read_data": 230, "synchronize_block": 230, "statu": [230, 245, 246], "exceed": [230, 254, 255, 256], "write_al": 230, "write_command": 230, "payload": 230, "guarante": 230, "unread": 230, "silent": 230, "vastli": [231, 248, 250, 251, 252, 254], "amp": 231, "onnx": 231, "micro_speech": [232, 250], "inter": 232, "trainer": 232, "evaluat": 232, "stock": 232, "warranti": 233, "disclaim": 233, "impli": [233, 250], "concern": [233, 247, 256], "ask": [233, 246], "question": [233, 246, 248], "quick": 233, "spdx": 233, "zlib": 233, "licensor": 233, "laboratori": 233, "inc": 233, "express": [233, 256], "liabl": 233, "damag": 233, "aris": 233, "grant": 233, "anyon": [233, 246, 249], "alter": 233, "freeli": 233, "restrict": 233, "misrepres": 233, "claim": 233, "wrote": 233, "acknowledg": 233, "appreci": 233, "plainli": 233, "notic": [233, 246], "evaluation_result": [234, 248, 250], "97": [234, 247, 248, 250, 255], "674": 234, "roc": [234, 245, 247, 248, 250, 255], "919": 234, "987": 234, "891": 234, "880": 234, "484": 234, "411": 234, "893": 234, "981": [234, 248, 250], "865": [234, 255], "832": 234, "auto_encod": 234, "636": 234, "308": [234, 247], "726": 234, "urllib": [235, 237, 238, 239, 241, 242], "tempfil": [235, 237, 238, 239, 241, 242, 256], "query_platform": 235, "tflite_model_url": [235, 237, 238, 239, 241, 242], "necesari": 235, "test_help": [235, 238, 239], "normpath": [235, 237, 238, 239, 241, 242], "gettempdir": [235, 237, 238, 239, 241, 242, 256], "wb": [235, 237, 238, 239, 241, 242, 255], "urlopen": [235, 237, 238, 239, 241, 242], "copyfileobj": [235, 237, 238, 239, 241, 242], "884": [235, 238], "5p": [235, 238, 255], "0n": [235, 238], "985": [235, 238], "148": [235, 238, 254], "187": [235, 238], "5u": [235, 238, 248, 255], "718": [235, 238], "7u": [235, 238, 248, 250, 255], "3u": [235, 238, 248, 250, 255], "0p": [235, 238, 248, 250, 255], "5n": [235, 238, 248, 250, 255], "153": [235, 254, 255], "9p": 235, "8p": [235, 248, 250], "719": 235, "4u": [235, 255], "223": 235, "2n": [235, 255], "platform_nam": 235, "conenct": 235, "brd2601a": 235, "brd4186b": 235, "956": 235, "absl": [235, 236, 237, 240, 242], "untrac": [235, 236, 237, 240, 242], "_jit_compiled_convolution_op": [235, 236, 237, 240, 242], "tmpc8yu6n46": 235, "reed": [235, 236, 237, 240, 241, 242, 248, 250, 254, 255], "lib": [235, 236, 237, 240, 242, 248, 250, 254, 255], "site": [235, 236, 237, 240, 242, 248, 250, 254, 255], "766": [235, 236, 237, 240, 242], "userwarn": [235, 236, 237, 240, 242, 248, 250, 255], "anywai": [235, 236, 237, 240, 242, 248, 250], "415": 235, "219": 235, "6u": [235, 248, 250, 255], "183": 235, "332": 235, "1n": [235, 248], "tmpvpnr_8op": 236, "tmp6fs6_29o": 236, "_________________________________________________________________": [237, 241, 242, 248, 250], "average_pooling2d": [237, 238, 239, 242], "averagep": [237, 242], "ooling2d": [237, 242], "conv2d_1": [237, 238, 239, 242, 248, 250], "3472": [237, 242], "conv2d_2": [237, 238, 239, 242, 248, 250], "3480": [237, 242], "batch_norm": [237, 238, 239, 241, 242, 250], "batchn": [237, 241, 242, 250], "ormal": [237, 241, 242, 250], "average_pooling2d_1": [237, 238, 239, 242], "epooling2d": [237, 242], "1155": [237, 242], "activation_1": [237, 242, 248, 250], "443": [237, 242, 254], "395": [237, 242], "0242764704ebb6643ae7df4a6536bb83": 237, "06t16": [237, 241], "472z": 237, "trained_model": [237, 241, 242], "kws_ref_model": [237, 241, 242], "external_tflite_path": [237, 241, 242], "49x10x1": [237, 241], "394": [237, 241, 248, 256], "addon": [237, 242, 255], "patient": [237, 242, 246, 248, 250, 254, 255], "satisfi": [237, 242], "typeguard": [237, 242], "pypars": [237, 242], "00": [237, 242, 246, 248, 250, 256], "333": [237, 242, 250, 255], "tmpv8h9r1ze": 237, "b13b48c": [237, 238, 241, 242, 255], "72320": [237, 242], "f84b0517005c8392d9746f6c6dae1f50": 237, "327z": 237, "tflite_micro_model": 238, "72192": 238, "2021": [238, 239, 254], "18t16": [238, 239], "028z": [238, 239], "e8463b1e31855c5e6319493226b8b582": [238, 239], "472": [238, 251], "kbyte": 238, "recorded_lay": 238, "inp": 238, "tinput": [238, 239], "outp": 238, "toutput": [238, 239], "op0": [238, 239], "conv2d_input_int8": [238, 239], "biasadd": [238, 239], "readvariableop": [238, 239], "op1": [238, 239], "avgpool": [238, 239], "op2": [238, 239, 255], "op3": [238, 239, 255], "fusedbatchnormv3": [238, 239], "conv2d1": [238, 239], "op4": [238, 239], "op5": [238, 239], "op6": [238, 239], "matmul": [238, 239], "op7": [238, 239], "identity_int8": [238, 239], "arbitrari": 239, "tflite_model_param": 239, "my_bool": 239, "my_int": 239, "my_float": 239, "my_list_int": 239, "my_list_float": 239, "my_list_str": 239, "bytearrai": 239, "140000104904175": 239, "100000023841858": 239, "200000047683716": 239, "299999952316284": 239, "x01": 239, "x02": 239, "x03": 239, "x04": 239, "_load_sampl": 239, "class_nam": [239, 248], "img_arrai": 239, "rock_sampl": 239, "paper_sampl": 239, "scissors_sampl": 239, "prep": 239, "tfliteconv2dlay": 239, "tflitefullyconnectedlay": 239, "tflitepooling2dlay": 239, "conv2d_param": 239, "fully_connected_param": 239, "pool_param": 239, "padding_width": 239, "padding_height": 239, "conv2d_lay": 239, "updated_tflite_path": 239, "modified_image_example1": 239, "updated_tflite_model": 239, "updated_conv2d_lay": 239, "updated_filt": 239, "updated_quant": 239, "allclos": 239, "training_result": 240, "tmp6ab8ka6k": 240, "tmpgclx2y4d": 240, "tmppbx5mcil": 240, "tmpeoo7jyna": 240, "9600": 241, "648": [241, 254, 255], "16004": 241, "668": 241, "25472": 241, "a4fadcb07cc13bf4ce4249e7349cadf3": 241, "836z": 241, "831z": 241, "extracted_arch": 242, "geforc": 242, "rtx": 242, "2060": 242, "tmp_model": [242, 250], "tmpsa1z1ouz": 242, "dive": 243, "hard": [244, 248, 250, 256], "defici": 244, "ideal": [244, 249, 256], "similarli": [244, 246], "refactor": 244, "easi": [245, 250, 256], "collabor": 245, "paid": [245, 246], "subscript": 245, "price": [245, 256], "relav": 245, "informa": 245, "disk": 245, "plotli": 245, "especi": [245, 248, 250, 251], "slack": 245, "artifact": 245, "audit": 245, "computation": 246, "dai": 246, "laptop": 246, "rent": 246, "matchmak": 246, "aggreg": 246, "10x": [246, 249], "caution": 246, "affili": 246, "incur": 246, "hr": 246, "12hr": 246, "flexibl": 246, "isol": 246, "unprivileg": 246, "docker": 246, "tier": 246, "datacent": 246, "hobbyist": 246, "vet": 246, "partner": 246, "lose": 246, "steal": 246, "incentiv": 246, "reput": 246, "exploit": 246, "roughli": 246, "payment": 246, "whenver": 246, "hit": 246, "destroi": 246, "outstand": 246, "rental": 246, "bandwidth": 246, "inact": 246, "offlin": 246, "broken": 246, "consider": 246, "stripe": 246, "confirm": 246, "dialog": 246, "chose": 246, "verif": 246, "moment": 246, "contact": 246, "fraudul": 246, "editor": [246, 247, 248, 250, 251, 254], "aaaac3nzac1lzdi1nte5aaaaibqhisau": 246, "bhj7z6hpoqe0gx": 246, "efjau27aim738c4byojw": 246, "popup": 246, "10gb": 246, "hourli": 246, "slider": 246, "narrow": 246, "visibl": 246, "35023": 246, "trashcan": [246, 256], "icon": 246, "lost": 246, "wide": 246, "cheaper": 246, "dlperf": 246, "mid": 246, "Not": [246, 255], "i7": 246, "wheel": 246, "wast": 246, "libsndfil": 246, "machinc": 246, "advantag": [246, 255], "spun": 246, "my_dataset_download": 246, "spend": [246, 248, 249, 250, 254, 256], "monei": [246, 249, 256], "untrain": 246, "3hr": 246, "amd": 246, "threadripp": 246, "epyc": 246, "xeon": 246, "39975": 246, "ve": 246, "understand": [247, 248, 250, 251, 252], "favorit": [247, 248, 250, 251, 254], "exclam": [247, 248, 250, 251], "zsh": 247, "fish": [247, 252], "powershel": 247, "pwsh": 247, "run_model_profiler_benchmark": 247, "tse_compress": 247, "utest": [247, 248, 250, 251], "review": [247, 248, 249, 250, 251, 252, 254], "someon": [247, 248], "nearli": 247, "certain": [247, 248, 256], "theoret": 247, "signet": 247, "friendli": 247, "introduct": 247, "abc": 247, "thumb": 247, "critic": [247, 249, 250, 256], "backup": 247, "192x192": 247, "sharpen": 247, "harpen": 247, "blur": 247, "heurist": 247, "blurri": 247, "data_preprocessor": 247, "formula": 247, "signature1": 247, "signature2": 247, "THEN": 247, "intent": 247, "hacker": 247, "spoof": 247, "469": 247, "465": 247, "982": 247, "245": 247, "intellig": 248, "differenti": 248, "learnabl": 248, "effort": 248, "10k": [248, 249], "100k": [248, 256], "orient": 248, "stuff": 248, "redund": 248, "duplic": [248, 250], "mislabl": 248, "degrad": 248, "sensor": 248, "patool": 248, "oe": 248, "tmp_archiv": 248, "sub_dir": 248, "mpimg": 248, "class_sampl": 248, "class_dir": 248, "sample_filenam": 248, "imread": 248, "fortun": 248, "purchas": 248, "image_classifier_imag": 248, "delet": 248, "clearli": 248, "retrain": 248, "scratch": [248, 250, 252], "my_rock_paper_scissor": 248, "newli": [248, 249, 250], "throughout": [248, 250, 255], "internet": [248, 250], "variat": 248, "converg": 248, "extrem": [248, 250], "yet": [248, 249, 250, 254], "29t23": 248, "550": 248, "02t17": 248, "359": [248, 254], "204": 248, "max_pooling2d": [248, 250], "2320": 248, "max_pooling2d_1": 248, "maxpool": 248, "4640": [248, 250], "activation_2": [248, 250], "max_pooling2d_2": 248, "65568": 248, "activation_3": 248, "820": 248, "303": 248, "29t22": 248, "350": 248, "746": [248, 250], "2482ff1c6e512f70479605f20e18e5fc": 248, "03t23": 248, "754z": 248, "possibli": [248, 250], "345": 248, "141": 248, "3p": 248, "478": 248, "2u": [248, 250, 255], "745": 248, "226": 248, "1u": [248, 255], "7n": 248, "8u": [248, 250], "559938": 248, "358": 248, "142": 248, "481894": 248, "offload": [248, 250], "revert": 248, "feasibl": [248, 250], "night": [248, 250], "wrong": [248, 250], "037": 248, "476": 248, "083": 248, "461": 248, "042": 248, "554": 248, "chanc": [248, 250], "wider": [248, 250], "filer": [248, 250], "safe": [248, 250], "sink": 249, "attach": 249, "ground": [249, 251], "segger": 249, "program_app": 249, "audio_io": 249, "keyword_spotting_alexa": 249, "me": 249, "joke": 249, "opu": 249, "codec": 249, "vad": 249, "decompress": 249, "vdac": 249, "3v3": 249, "acquir": [249, 251], "besid": 249, "divers": [249, 250], "substanti": 249, "adequ": 249, "intricaci": 249, "imbalanc": 249, "choos": [249, 251, 256], "shown": [249, 255], "importantli": 249, "plug": 249, "dummi": 249, "2hr": 249, "keyword_spottong_alexa": 249, "mltk_stack_siz": 249, "audio_classifier_enable_audio_io": 249, "mltk_audio_classifier_download": 249, "music": 249, "stori": 249, "wstk": 249, "baudrat": 249, "rebuild": 249, "discuss": [250, 254], "accent": [250, 256], "thousand": 250, "meet": [250, 254], "suffer": 250, "dirti": 250, "corrupt": 250, "mislabel": 250, "insight": 250, "amplifi": 250, "techniqu": [250, 256], "diverg": [250, 255], "my_keyword_spotting_on_off": 250, "tend": 250, "visualize_audio": 250, "playback": 250, "care": 250, "ultim": [250, 252], "00095": [250, 254], "0009025": [250, 254], "1168": 250, "batch_normalization_1": 250, "batc": 250, "hnormal": 250, "batch_normalization_2": 250, "dropout_1": 250, "516": 250, "628": 250, "468": [250, 254], "a5c31da1954ca849eed61dd1007ddf58": 250, "25t18": 250, "543z": 250, "7052": 250, "00001": [250, 254], "00002": [250, 254], "00003": [250, 254], "fully_quant": [250, 254], "inference_typ": [250, 254], "input_inference_typ": [250, 254], "output_inference_typ": [250, 254], "427": 250, "6p": 250, "494": 250, "173": 250, "170": 250, "576": [250, 254], "446": [250, 251, 254], "4n": 250, "664001": 250, "616ee87": 250, "439": 250, "166": 250, "943971": 250, "processpoolmanag": 250, "experienc": 250, "eta": 250, "0739": 250, "0000e": 250, "9445": 250, "1667": 250, "2955": 250, "3000": 250, "507m": 250, "6482": 250, "3846": 250, "3505": 250, "2308": 250, "0010": 250, "1078": 250, "3484": 250, "1538": 250, "120m": [250, 254], "6892": 250, "5000e": 250, "8508": 250, "6667": 250, "6849": 250, "3333": 250, "5885": 250, "5144": 250, "258m": 250, "4552": 250, "0250e": 250, "077": 250, "667": 250, "619": 250, "292": 250, "167": 250, "vm": 250, "intend": [250, 256], "certainli": 250, "benefici": 250, "fed": 250, "simultan": 250, "475": 250, "constantli": [250, 256], "scenario": 250, "mouth": [250, 252, 254], "inch": [250, 252, 254], "beamform": 250, "javascript": 251, "youtub": 251, "keyword_spotting_pacman_v3": 251, "likewis": 251, "min_signal_remain": 251, "arrow": 251, "ghost": 251, "1x98x1x104": 251, "954": 251, "169": 251, "40x3x1x104": 251, "1x98x1x40": 251, "976": 251, "470": 251, "120x1x1x40": 251, "1x98x1x120": 251, "1x9x1x120": 251, "1x49x1x120": 251, "40x1x1x120": 251, "1x49x1x40": 251, "162": 251, "40x1x1x40": 251, "488": 251, "195": 251, "1x25x1x120": 251, "1x25x1x40": 251, "1x13x1x120": 251, "660": 251, "1x13x1x40": 251, "520": 251, "1x7x1x120": 251, "1x7x1x40": 251, "1x4x1x120": 251, "1x4x1x40": 251, "572": 251, "1x1x1x40": 251, "1x40": 251, "567": [251, 255], "477": 251, "7x40": 251, "656699": 251, "engin": [251, 254, 255], "notif": 251, "lucio": 251, "panpinto": 251, "p5": 251, "vanilla": 251, "css": 251, "s37": 251, "keyword_spotting_with_transfer_learn": 252, "aphex34": 252, "sa": [252, 256], "meaning": 252, "textur": 252, "abstract": 252, "Of": 252, "relearn": 252, "bike": 252, "whose": [252, 256], "130m": 252, "tune": [252, 254], "shorter": 252, "mtlkobject": 252, "callstack": 253, "statement": 253, "audiodatageneratorset": 254, "my_keyword_spotting_mobilenetv2": 254, "Near": 254, "saniti": 254, "spec": 254, "1410": 254, "custommaskwarn": 254, "mask": 254, "custom_object": 254, "layer_config": 254, "serialize_layer_fn": 254, "30x25x32": 254, "30x25x16": 254, "30x25x96": 254, "31x27x96": 254, "15x13x96": 254, "15x13x24": 254, "15x13x144": 254, "17x15x144": 254, "8x7x144": 254, "8x7x32": 254, "8x7x192": 254, "3x3x192": 254, "1x1x192": 254, "9x9x192": 254, "4x4x192": 254, "4x4x384": 254, "3x3x384": 254, "1x1x384": 254, "4x4x576": 254, "3x3x576": 254, "1x1x576": 254, "5x5x576": 254, "2x2x576": 254, "2x2x160": 254, "2x2x960": 254, "1x1x160": 254, "3x3x960": 254, "1x1x960": 254, "2x2x320": 254, "2x2x1280": 254, "1x1x320": 254, "925": 254, "120e1504bcad5f01e644acf9d21b66ff": 254, "14t21": 254, "975z": 254, "7mb": 254, "5mb": 254, "15x13x16": 254, "17x15x96": 254, "8x7x96": 254, "8x7x16": 254, "9x9x96": 254, "4x4x32": 254, "4x4x288": 254, "3x3x288": 254, "1x1x288": 254, "5x5x288": 254, "2x2x288": 254, "2x2x80": 254, "2x2x480": 254, "1x1x80": 254, "3x3x480": 254, "1x1x480": 254, "819": 254, "371": 254, "d226b3204bbaf021713d425e9bdf623c": 254, "895z": 254, "983": 254, "983kb": 254, "368": 254, "1x30x25x16": 254, "378": 254, "318": 254, "8x1x1x16": 254, "149": 254, "1x15x13x16": 254, "655": 254, "1x15x13x96": 254, "286": 254, "602": 254, "146": 254, "544": 254, "1x17x15x96": 254, "1x8x7x96": 254, "134": 254, "1x8x7x16": 254, "188": 254, "161": [254, 255], "158": 254, "1x9x9x96": 254, "1x4x4x32": 254, "192x1x1x32": 254, "1x4x4x192": 254, "1x3x3x192": 254, "32x1x1x192": 254, "295": 254, "48x1x1x192": 254, "221": 254, "288x1x1x48": 254, "1x4x4x288": 254, "1x3x3x288": 254, "48x1x1x288": 254, "1x5x5x288": 254, "1x2x2x288": 254, "80x1x1x288": 254, "1x2x2x80": 254, "313": 254, "480x1x1x80": 254, "1x2x2x480": 254, "1x3x3x480": 254, "232": 254, "80x1x1x480": 254, "615": 254, "464": 254, "160x1x1x480": 254, "1x2x2x160": 254, "1280x1x1x160": 254, "1x2x2x1280": 254, "2560": 254, "2047": [254, 255], "1x1280": 254, "8x1280": 254, "375422": 254, "unfortun": [254, 255], "realli": 254, "overkil": 254, "228": 254, "201": 254, "121": 254, "312": 254, "606283": 254, "matlab": 255, "cifar10_matlab_model": 255, "exportonnxnetwork": 255, "trainednet": 255, "straight": 255, "largest": 255, "assumpt": 255, "necessarili": 255, "mini": 255, "nchw": 255, "nhwc": 255, "onnx_tf": 255, "onnsim": 255, "daquexian": 255, "openvino_dev": 255, "openvino2tensorflow": 255, "primarili": [255, 256], "pinto0309": 255, "tensorflow_dataset": 255, "onnx_model_archive_url": 255, "8m72rmxtznvaki6": 255, "onnx_model_archive_sha1": 255, "c53827fc8b765183381cdc338afb88f735479d97": 255, "cifar10_matlab_model_example_dir": 255, "webapg": 255, "onnx_model_path": 255, "working_dir": 255, "cifar10_matlab_model_onnx_to_tflit": 255, "model_nam": 255, "class_label": 255, "particularli": 255, "mapped_class_label": 255, "class_id_map": 255, "veru": 255, "onnx_model": 255, "tf_rep": 255, "x_test_channels_first": 255, "chw": 255, "github_siliconlab": 255, "tensorflow_addon": 255, "ensure_tf_instal": 255, "nightli": 255, "bug": 255, "578": 255, "964": 255, "679": 255, "553": [255, 256], "556": 255, "287": 255, "085": 255, "073": 255, "770": 255, "673": 255, "overhead": 255, "onnxsim": 255, "simplified_onnx_model": 255, "success": 255, "simplified_onnx_model_path": 255, "doabl": 255, "mo": 255, "mo_main": 255, "shell_cmd": 255, "openvino_out_dir": 255, "__file__": 255, "input_model": 255, "fp32": 255, "ir": 255, "legaci": 255, "7019": 255, "cdb9bec7210": 255, "xml": [255, 256], "intel": 255, "tm": 255, "cid": 255, "prod": 255, "campid": 255, "ww_2022_bu_iotg_openvino": 255, "upg_al": 255, "v11": 255, "openvino2tensorflow_out_dir": 255, "openvino_xml_nam": 255, "nt": 255, "openvino2tensorflow_exe_cmd": 255, "model_output_path": 255, "output_saved_model": 255, "output_no_quant_float32_tflit": 255, "tflite_int8_model_path": 255, "tflite_quant_model": 255, "87295": 255, "mvp_estimators_v0": 255, "962": 255, "111": 255, "1x36x36x3": 255, "310": 255, "64x5x5x3": 255, "1x32x32x64": 255, "1x16x16x64": 255, "1x20x20x64": 255, "505": 255, "64x5x5x64": 255, "248": 255, "9u": 255, "1x4x4x64": 255, "64x4x4x64": 255, "10x1x1x64": 255, "1x1x1x10": 255, "36x36x3": 255, "32x32x64": 255, "5x5x3": 255, "16x16x64": 255, "20x20x64": 255, "5x5x64": 255, "1x1x10": 255, "909": 255, "429": 255, "949": 255, "889": 255, "796": 255, "778": 255, "389": 255, "848": 255, "pronunci": 256, "sad": 256, "excit": 256, "commonli": 256, "heard": 256, "characterisit": 256, "50k": 256, "20k": 256, "con": 256, "harder": 256, "sparingli": 256, "russian": 256, "smart": 256, "lid": 256, "react": 256, "closet": 256, "solv": 256, "cheap": 256, "januari": 256, "websit": 256, "wavenet": 256, "neural2": 256, "000004": 256, "usd": 256, "000016": 256, "markup": 256, "xmln": 256, "w3": 256, "2001": 256, "synthesi": 256, "lang": 256, "jennyneur": 256, "mstt": 256, "style": 256, "cheer": 256, "prosodi": 256, "whitespac": 256, "natur": 256, "220": 256, "variant": 256, "credit": 256, "quota": 256, "humanlik": 256, "synthes": 256, "prebuilt": 256, "brand": 256, "polli": 256, "lifelik": 256, "engag": 256, "cognit": 256, "pivot": 256, "speech_kei": 256, "e8699507e7c04a4cb8afdba62986987c": 256, "speech_region": 256, "westus2": 256, "codelab": 256, "serivc": 256, "google_application_credenti": 256, "private_kei": 256, "private_key_id": 256, "client_email": 256, "neb6y5zodg2dyjmm": 256, "jdahcnaprd9": 256, "hamrg3jl2jisvzo": 256, "03aexjyoewtblwfpyxpnqyz4wkbgqdd": 256, "yvywcrbxeecn": 256, "client_id": 256, "gcp_service_account_json_path": 256, "gcp_kei": 256, "gcp_service_account_json": 256, "service_account": 256, "project_id": 256, "strang": 256, "firefli": 256, "374023": 256, "8e074b2dc4da026810d6b728e1588e79a745a08c": 256, "nmiievqibadanbgkqhkig9w0baqefaascbkcwggsjageaaoibaqcuq4fpo6ilib78": 256, "nmhyrhb1ei2pcegtthrlxbqwe6rswppttopqvplsbxs30frarpd6d4hgqel46gc2d": 256, "ncrhh8omrgkmb4pagzhcefjd": 256, "xjkcknsyipltqgbjau3pt": 256, "wmukihdyiyzdd6qjr3": 256, "nugghp8hkt1gxgcgdfkplwvoj9b3m6b5": 256, "3cvgbthciycccykhqnfon6mtee6ofmpz": 256, "nwxy3frewywjiwiiivpbqanoijs92gb": 256, "ffgsg2ta63tgszmbvvhjtd3a98ewmvwsz": 256, "nbipxjqh5qlh3ychdgt42mqbxrinn11kmyoc56a2ic4mvrq3i8oapos2l6uglwx9j": 256, "ns6sq5jw1agmbaaecggeat7ps2vknnk61fpvcanjszangwkonmfru48rgvn7rpetq": 256, "n9": 256, "gkgfzium3hlit5ek7jkzlmg4higcfkvrqjlpglsagi8rpvcubxs8xncljujvm3": 256, "nvhf9arln": 256, "s3nkedic8tpnv": 256, "ouji": 256, "yivhpqmewbsxmdtd2jd3vbsf34": 256, "7rou5dz": 256, "n56bgmbbneb6y5zodg2dyjmm": 256, "hamrg3jl2jisvzogrlenelkznrp": 256, "n9t0uwqiv5ejitovbzd": 256, "ezadffjftdrkfwv1qixemiak1atbs5bhknk5ecyffmpm": 256, "ncivgp3wrxq7nfrjktnwdjzeafjqw4ckwlmn4xc2fgqkbgqdjobnxjgo7gq1pfeiq": 256, "nvssuwjixy63tru6jwrrhr1b9xuph6vivh2dz4lpfpywer9lx6omtn6aizihtpq1i": 256, "n19eskh0h6hwbw2ydzwghzrmhb9xs5i": 256, "hibkwrz9nw77uwh1d9g": 256, "ejcn6a2zl2ig": 256, "nk03aexjyoewtblwfpyxpnqyz4wkbgqdd": 256, "yvywcrbxeecna0fohw8wiro6ds6g84m": 256, "nmczkr0yooxpb8zriim": 256, "mv7paccelasz4lzbc2hcb1mvv9p6o2ieuhqngabwlfwid": 256, "ng7cc7rm4qee87p5u4obuhpciuzpa3ueaqbhxmwd1oxw5rjvxenn": 256, "7g4jzkxeru": 256, "nqif7cw6zhwkbgby5dctjwdpssol8yfnc36jyitjufn43nms30xlifiidwmmtnpui": 256, "nrmom42sshi1sgtegslyboiij6zbf": 256, "vrmm4x1y9ahzsjyngnxw9bc": 256, "s5nlmrjcck": 256, "n6iw30jtumlivjgtumocqwsuaewbrmrszgjl4zin3xl": 256, "aifkcptgxfg7daogavz6b": 256, "njmuzkjpoirjfsvrkhuus7p2dhojr5n0hbyct9a09dwkfnyiu": 256, "awhqnib": 256, "pymv2m8": 256, "njttmms9orc6gzpus4r8m7ipa": 256, "myn": 256, "twhvrh3pbwxzqw3eiroqrepxhepuuyiwz6r": 256, "nuvpkw3rrl": 256, "wjihdqavo89wrk": 256, "gzldgynqyqixescgyeaj": 256, "8nsq1ugod7sqfpia": 256, "n3wur4a": 256, "uyt8": 256, "nuatk2ww": 256, "gtbc": 256, "eddjre1lz3f": 256, "uqgtsxlsv7t1mw4a7ekrkfl36p": 256, "nlnvefbtb3ucd8jj0lpbtoqru9i8n": 256, "a4fqopmljoyelgtyt1oi": 256, "vxfwya7cmrz": 256, "n49be21meuv3prv1qwrrteem": 256, "iam": 256, "gserviceaccount": 256, "109154742213348109867": 256, "auth_uri": 256, "oauth2": 256, "auth": 256, "token_uri": 256, "auth_provider_x509_cert_url": 256, "cert": 256, "client_x509_cert_url": 256, "x509": 256, "40strang": 256, "dg": 256, "aws_access_key_id": 256, "akiatzwwzr5twbunf6ix": 256, "aws_secret_access_kei": 256, "v0irhpugenwj1ca7savduf1uxw84bgkzqpowlfdr": 256, "aws_default_region": 256, "west": 256, "aag": 256, "nwarn": 256, "npress": 256, "623": 256, "52word": 256, "17word": 256}, "objects": {"mltk.core": [[109, 0, 1, "", "AudioDatasetMixin"], [155, 0, 1, "", "AutoEncoderEvaluationResults"], [155, 0, 1, "", "ClassifierEvaluationResults"], [110, 0, 1, "", "DatasetMixin"], [111, 0, 1, "", "EvaluateAutoEncoderMixin"], [112, 0, 1, "", "EvaluateClassifierMixin"], [113, 0, 1, "", "EvaluateMixin"], [155, 0, 1, "", "EvaluationResults"], [114, 0, 1, "", "ImageDatasetMixin"], [108, 3, 1, "", "KerasModel"], [116, 0, 1, "", "MltkDataset"], [117, 0, 1, "", "MltkModel"], [118, 0, 1, "", "MltkModelEvent"], [119, 0, 1, "", "SshMixin"], [170, 0, 1, "", "TfliteActivation"], [171, 0, 1, "", "TfliteAddLayer"], [173, 0, 1, "", "TfliteConv2DLayerOptions"], [172, 0, 1, "", "TfliteConv2dLayer"], [174, 0, 1, "", "TfliteConvParams"], [176, 0, 1, "", "TfliteDepthwiseConv2DLayerOptions"], [175, 0, 1, "", "TfliteDepthwiseConv2dLayer"], [177, 0, 1, "", "TfliteDepthwiseConvParams"], [178, 0, 1, "", "TfliteDequantizeLayer"], [180, 0, 1, "", "TfliteFullyConnectedLayer"], [181, 0, 1, "", "TfliteFullyConnectedLayerOptions"], [182, 0, 1, "", "TfliteFullyConnectedParams"], [184, 0, 1, "", "TfliteLayer"], [185, 0, 1, "", "TfliteModel"], [187, 0, 1, "", "TfliteModelParameters"], [186, 0, 1, "", "TflitePadding"], [189, 0, 1, "", "TflitePool2DLayerOptions"], [190, 0, 1, "", "TflitePoolParams"], [188, 0, 1, "", "TflitePooling2dLayer"], [191, 0, 1, "", "TfliteQuantization"], [192, 0, 1, "", "TfliteQuantizeLayer"], [193, 0, 1, "", "TfliteReshapeLayer"], [194, 0, 1, "", "TfliteShape"], [195, 0, 1, "", "TfliteTensor"], [196, 0, 1, "", "TfliteTransposeConvLayer"], [197, 0, 1, "", "TfliteTransposeConvLayerOptions"], [198, 0, 1, "", "TfliteTransposeConvParams"], [120, 0, 1, "", "TrainMixin"], [122, 0, 1, "", "WeightsAndBiasesMixin"], [155, 4, 1, "", "evaluate_autoencoder"], [155, 4, 1, "", "evaluate_classifier"], [155, 4, 1, "", "evaluate_model"], [121, 4, 1, "", "list_mltk_models"], [121, 4, 1, "", "load_mltk_model"], [121, 4, 1, "", "load_mltk_model_with_path"], [121, 4, 1, "", "load_tflite_model"], [121, 4, 1, "", "load_tflite_or_keras_model"], [157, 4, 1, "", "profile_model"], [158, 4, 1, "", "quantize_model"], [159, 4, 1, "", "summarize_model"], [160, 4, 1, "", "train_model"], [161, 4, 1, "", "update_model_parameters"], [162, 4, 1, "", "view_model"]], "mltk.core.AudioDatasetMixin": [[109, 1, 1, "", "audio_classes"], [109, 1, 1, "", "audio_input_shape"], [109, 1, 1, "", "class_counts"], [109, 1, 1, "", "class_mode"], [109, 1, 1, "", "class_weights"], [109, 1, 1, "", "datagen"], [109, 1, 1, "", "datagen_context"], [109, 1, 1, "", "dataset"], [109, 1, 1, "", "follow_links"], [109, 1, 1, "", "frontend_settings"], [109, 2, 1, "", "get_datagen_creator"], [109, 2, 1, "", "get_shuffle_index_dir"], [109, 2, 1, "", "load_dataset"], [109, 1, 1, "", "loaded_subset"], [109, 1, 1, "", "sample_length_ms"], [109, 1, 1, "", "sample_rate_hz"], [109, 1, 1, "", "sample_weight"], [109, 1, 1, "", "shuffle"], [109, 1, 1, "", "shuffle_dataset_enabled"], [109, 1, 1, "", "steps_per_epoch"], [109, 2, 1, "", "summarize_dataset"], [109, 2, 1, "", "unload_dataset"], [109, 1, 1, "", "validation_batch_size"], [109, 1, 1, "", "validation_data"], [109, 1, 1, "", "validation_datagen"], [109, 1, 1, "", "validation_freq"], [109, 1, 1, "", "validation_split"], [109, 1, 1, "", "validation_steps"], [109, 1, 1, "", "x"], [109, 1, 1, "", "y"]], "mltk.core.AutoEncoderEvaluationResults": [[155, 2, 1, "", "__init__"], [155, 2, 1, "", "calculate"], [155, 1, 1, "", "class_stats"], [155, 1, 1, "", "classes"], [155, 2, 1, "", "generate_plots"], [155, 2, 1, "", "generate_summary"], [155, 1, 1, "", "overall_accuracy"], [155, 1, 1, "", "overall_fpr"], [155, 1, 1, "", "overall_pr_accuracy"], [155, 1, 1, "", "overall_precision"], [155, 1, 1, "", "overall_recall"], [155, 1, 1, "", "overall_roc_auc"], [155, 1, 1, "", "overall_thresholds"], [155, 1, 1, "", "overall_tpr"]], "mltk.core.ClassifierEvaluationResults": [[155, 2, 1, "", "__init__"], [155, 2, 1, "", "calculate"], [155, 1, 1, "", "class_accuracies"], [155, 1, 1, "", "classes"], [155, 1, 1, "", "confusion_matrix"], [155, 1, 1, "", "false_positive_rate"], [155, 1, 1, "", "fpr"], [155, 2, 1, "", "generate_plots"], [155, 2, 1, "", "generate_summary"], [155, 1, 1, "", "overall_accuracy"], [155, 1, 1, "", "precision"], [155, 1, 1, "", "recall"], [155, 1, 1, "", "roc_auc"], [155, 1, 1, "", "roc_auc_avg"], [155, 1, 1, "", "roc_thresholds"], [155, 1, 1, "", "tpr"]], "mltk.core.DatasetMixin": [[110, 1, 1, "", "class_counts"], [110, 1, 1, "", "class_weights"], [110, 1, 1, "", "dataset"], [110, 2, 1, "", "load_dataset"], [110, 1, 1, "", "loaded_subset"], [110, 1, 1, "", "sample_weight"], [110, 1, 1, "", "shuffle"], [110, 1, 1, "", "steps_per_epoch"], [110, 2, 1, "", "summarize_dataset"], [110, 2, 1, "", "unload_dataset"], [110, 1, 1, "", "validation_batch_size"], [110, 1, 1, "", "validation_data"], [110, 1, 1, "", "validation_freq"], [110, 1, 1, "", "validation_split"], [110, 1, 1, "", "validation_steps"], [110, 1, 1, "", "x"], [110, 1, 1, "", "y"]], "mltk.core.EvaluateAutoEncoderMixin": [[111, 1, 1, "", "eval_augment"], [111, 1, 1, "", "eval_classes"], [111, 1, 1, "", "eval_custom_function"], [111, 1, 1, "", "eval_max_samples_per_class"], [111, 1, 1, "", "eval_shuffle"], [111, 1, 1, "", "eval_steps_per_epoch"], [111, 2, 1, "", "get_scoring_function"], [111, 1, 1, "", "scoring_function"]], "mltk.core.EvaluateClassifierMixin": [[112, 1, 1, "", "eval_augment"], [112, 1, 1, "", "eval_custom_function"], [112, 1, 1, "", "eval_max_samples_per_class"], [112, 1, 1, "", "eval_shuffle"], [112, 1, 1, "", "eval_steps_per_epoch"]], "mltk.core.EvaluateMixin": [[113, 1, 1, "", "eval_custom_function"], [113, 1, 1, "", "eval_steps_per_epoch"]], "mltk.core.EvaluationResults": [[155, 2, 1, "", "__init__"], [155, 2, 1, "", "generate_plots"], [155, 2, 1, "", "generate_summary"], [155, 1, 1, "", "model_type"], [155, 1, 1, "", "name"]], "mltk.core.ImageDatasetMixin": [[114, 1, 1, "", "class_counts"], [114, 1, 1, "", "class_mode"], [114, 1, 1, "", "class_weights"], [114, 1, 1, "", "color_mode"], [114, 1, 1, "", "datagen"], [114, 1, 1, "", "datagen_context"], [114, 1, 1, "", "dataset"], [114, 1, 1, "", "follow_links"], [114, 2, 1, "", "get_datagen_creator"], [114, 2, 1, "", "get_shuffle_index_dir"], [114, 1, 1, "", "image_classes"], [114, 1, 1, "", "image_input_shape"], [114, 1, 1, "", "interpolation"], [114, 2, 1, "", "load_dataset"], [114, 1, 1, "", "loaded_subset"], [114, 1, 1, "", "sample_weight"], [114, 1, 1, "", "shuffle"], [114, 1, 1, "", "shuffle_dataset_enabled"], [114, 1, 1, "", "steps_per_epoch"], [114, 2, 1, "", "summarize_dataset"], [114, 1, 1, "", "target_size"], [114, 2, 1, "", "unload_dataset"], [114, 1, 1, "", "validation_batch_size"], [114, 1, 1, "", "validation_data"], [114, 1, 1, "", "validation_datagen"], [114, 1, 1, "", "validation_freq"], [114, 1, 1, "", "validation_split"], [114, 1, 1, "", "validation_steps"], [114, 1, 1, "", "x"], [114, 1, 1, "", "y"]], "mltk.core.MltkDataset": [[116, 2, 1, "", "load_dataset"], [116, 2, 1, "", "summarize_class_counts"], [116, 2, 1, "", "summarize_dataset"], [116, 2, 1, "", "unload_dataset"]], "mltk.core.MltkModel": [[117, 2, 1, "", "__init__"], [117, 2, 1, "", "add_archive_dir"], [117, 2, 1, "", "add_archive_file"], [117, 2, 1, "", "add_event_handler"], [117, 2, 1, "", "add_model_parameter_populate_callback"], [117, 2, 1, "", "add_tflite_metadata_entry"], [117, 1, 1, "", "archive_path"], [117, 1, 1, "", "attributes"], [117, 2, 1, "", "check_archive_file_is_writable"], [117, 1, 1, "", "classes"], [117, 1, 1, "", "cli"], [117, 2, 1, "", "create_log_dir"], [117, 2, 1, "", "create_logger"], [117, 1, 1, "", "description"], [117, 2, 1, "", "deserialize_tflite_metadata"], [117, 2, 1, "", "enable_test_mode"], [117, 2, 1, "", "get_archive_dir"], [117, 2, 1, "", "get_archive_file"], [117, 2, 1, "", "get_attribute"], [117, 2, 1, "", "get_tflite_metadata_summary"], [117, 1, 1, "", "h5_archive_path"], [117, 1, 1, "", "h5_log_dir_path"], [117, 1, 1, "", "input_shape"], [117, 1, 1, "", "keras_custom_objects"], [117, 1, 1, "", "log_dir"], [117, 1, 1, "", "model_parameters"], [117, 1, 1, "", "model_specification_path"], [117, 1, 1, "", "n_classes"], [117, 1, 1, "", "name"], [117, 2, 1, "", "populate_model_parameters"], [117, 2, 1, "", "serialize_tflite_metadata"], [117, 2, 1, "", "set_model_parameter"], [117, 2, 1, "", "summary"], [117, 1, 1, "", "test_mode_enabled"], [117, 1, 1, "", "tflite_archive_path"], [117, 1, 1, "", "tflite_log_dir_path"], [117, 1, 1, "", "tflite_metadata_entries"], [117, 2, 1, "", "trigger_event"], [117, 1, 1, "", "unquantized_tflite_log_dir_path"], [117, 1, 1, "", "version"]], "mltk.core.MltkModelEvent": [[118, 3, 1, "", "AFTER_BUILD_TRAIN_MODEL"], [118, 3, 1, "", "AFTER_LOAD_DATASET"], [118, 3, 1, "", "AFTER_MODEL_LOAD"], [118, 3, 1, "", "AFTER_PROFILE"], [118, 3, 1, "", "AFTER_QUANTIZE"], [118, 3, 1, "", "AFTER_SAVE_TRAIN_ARCHIVE"], [118, 3, 1, "", "AFTER_SAVE_TRAIN_MODEL"], [118, 3, 1, "", "AFTER_SAVE_TRAIN_RESULTS"], [118, 3, 1, "", "AFTER_TRAIN"], [118, 3, 1, "", "AFTER_UNLOAD_DATASET"], [118, 3, 1, "", "BEFORE_BUILD_TRAIN_MODEL"], [118, 3, 1, "", "BEFORE_LOAD_DATASET"], [118, 3, 1, "", "BEFORE_MODEL_LOAD"], [118, 3, 1, "", "BEFORE_QUANTIZE"], [118, 3, 1, "", "BEFORE_SAVE_TRAIN_ARCHIVE"], [118, 3, 1, "", "BEFORE_SAVE_TRAIN_MODEL"], [118, 3, 1, "", "BEFORE_SAVE_TRAIN_RESULTS"], [118, 3, 1, "", "BEFORE_TRAIN"], [118, 3, 1, "", "BEFORE_UNLOAD_DATASET"], [118, 3, 1, "", "EVALUATE_SHUTDOWN"], [118, 3, 1, "", "EVALUATE_STARTUP"], [118, 3, 1, "", "GENERATE_EVALUATE_PLOT"], [118, 3, 1, "", "POPULATE_TRAIN_CALLBACKS"], [118, 3, 1, "", "QUANTIZE_SHUTDOWN"], [118, 3, 1, "", "QUANTIZE_STARTUP"], [118, 3, 1, "", "SUMMARIZE_DATASET"], [118, 3, 1, "", "SUMMARIZE_MODEL"], [118, 3, 1, "", "TRAIN_SHUTDOWN"], [118, 3, 1, "", "TRAIN_STARTUP"]], "mltk.core.SshMixin": [[119, 1, 1, "", "ssh_create_venv"], [119, 1, 1, "", "ssh_download_files"], [119, 1, 1, "", "ssh_environment"], [119, 1, 1, "", "ssh_remote_dir"], [119, 1, 1, "", "ssh_shutdown_cmds"], [119, 1, 1, "", "ssh_startup_cmds"], [119, 1, 1, "", "ssh_upload_files"]], "mltk.core.TfliteActivation": [[170, 3, 1, "", "NONE"], [170, 3, 1, "", "RELU"], [170, 3, 1, "", "RELU6"], [170, 3, 1, "", "RELU_N1_TO_1"], [170, 3, 1, "", "SIGN_BIT"], [170, 3, 1, "", "TANH"], [170, 2, 1, "", "to_string"]], "mltk.core.TfliteAddLayer": [[171, 2, 1, "", "__init__"], [171, 1, 1, "", "activation"], [171, 2, 1, "", "from_flatbuffer"], [171, 2, 1, "", "get_input_data"], [171, 2, 1, "", "get_input_tensor"], [171, 2, 1, "", "get_output_data"], [171, 2, 1, "", "get_output_tensor"], [171, 1, 1, "", "index"], [171, 1, 1, "", "input1_data"], [171, 1, 1, "", "input1_tensor"], [171, 1, 1, "", "input2_data"], [171, 1, 1, "", "input2_tensor"], [171, 1, 1, "", "inputs"], [171, 1, 1, "", "metadata"], [171, 1, 1, "", "model"], [171, 1, 1, "", "n_inputs"], [171, 1, 1, "", "n_outputs"], [171, 1, 1, "", "name"], [171, 1, 1, "", "opcode"], [171, 1, 1, "", "opcode_str"], [171, 1, 1, "", "options"], [171, 1, 1, "", "output_data"], [171, 1, 1, "", "output_tensor"], [171, 1, 1, "", "outputs"]], "mltk.core.TfliteConv2DLayerOptions": [[173, 2, 1, "", "__init__"], [173, 1, 1, "", "activation"], [173, 1, 1, "", "activation_str"], [173, 1, 1, "", "options_type"], [173, 1, 1, "", "options_type_str"], [173, 1, 1, "", "padding"], [173, 1, 1, "", "padding_str"], [173, 1, 1, "", "stride_height"], [173, 1, 1, "", "stride_width"]], "mltk.core.TfliteConv2dLayer": [[172, 2, 1, "", "__init__"], [172, 1, 1, "", "activation"], [172, 1, 1, "", "bias_data"], [172, 1, 1, "", "bias_tensor"], [172, 1, 1, "", "filters"], [172, 1, 1, "", "filters_data"], [172, 1, 1, "", "filters_tensor"], [172, 2, 1, "", "from_flatbuffer"], [172, 2, 1, "", "get_input_data"], [172, 2, 1, "", "get_input_tensor"], [172, 2, 1, "", "get_output_data"], [172, 2, 1, "", "get_output_tensor"], [172, 1, 1, "", "index"], [172, 1, 1, "", "input_data"], [172, 1, 1, "", "input_tensor"], [172, 1, 1, "", "inputs"], [172, 1, 1, "", "kernel_size"], [172, 1, 1, "", "metadata"], [172, 1, 1, "", "model"], [172, 1, 1, "", "n_inputs"], [172, 1, 1, "", "n_outputs"], [172, 1, 1, "", "name"], [172, 1, 1, "", "opcode"], [172, 1, 1, "", "opcode_str"], [172, 1, 1, "", "options"], [172, 1, 1, "", "output_data"], [172, 1, 1, "", "output_tensor"], [172, 1, 1, "", "outputs"], [172, 1, 1, "", "padding"], [172, 1, 1, "", "params"], [172, 1, 1, "", "strides"], [172, 1, 1, "", "use_bias"]], "mltk.core.TfliteConvParams": [[174, 2, 1, "", "__init__"], [174, 2, 1, "", "calculate"], [174, 3, 1, "", "dilation_height_factor"], [174, 3, 1, "", "dilation_width_factor"], [174, 3, 1, "", "input_offset"], [174, 3, 1, "", "output_offset"], [174, 3, 1, "", "padding"], [174, 3, 1, "", "per_channel_output_multiplier"], [174, 3, 1, "", "per_channel_output_shift"], [174, 3, 1, "", "quantized_activation_max"], [174, 3, 1, "", "quantized_activation_min"], [174, 3, 1, "", "stride_height"], [174, 3, 1, "", "stride_width"], [174, 3, 1, "", "weights_offset"]], "mltk.core.TfliteDepthwiseConv2DLayerOptions": [[176, 2, 1, "", "__init__"], [176, 1, 1, "", "activation"], [176, 1, 1, "", "activation_str"], [176, 1, 1, "", "multiplier"], [176, 1, 1, "", "options_type"], [176, 1, 1, "", "options_type_str"], [176, 1, 1, "", "padding"], [176, 1, 1, "", "padding_str"], [176, 1, 1, "", "stride_height"], [176, 1, 1, "", "stride_width"]], "mltk.core.TfliteDepthwiseConv2dLayer": [[175, 2, 1, "", "__init__"], [175, 1, 1, "", "activation"], [175, 1, 1, "", "bias_data"], [175, 1, 1, "", "bias_tensor"], [175, 1, 1, "", "filters_data"], [175, 1, 1, "", "filters_tensor"], [175, 2, 1, "", "from_flatbuffer"], [175, 2, 1, "", "get_input_data"], [175, 2, 1, "", "get_input_tensor"], [175, 2, 1, "", "get_output_data"], [175, 2, 1, "", "get_output_tensor"], [175, 1, 1, "", "index"], [175, 1, 1, "", "input_data"], [175, 1, 1, "", "input_tensor"], [175, 1, 1, "", "inputs"], [175, 1, 1, "", "kernel_size"], [175, 1, 1, "", "metadata"], [175, 1, 1, "", "model"], [175, 1, 1, "", "multiplier"], [175, 1, 1, "", "n_inputs"], [175, 1, 1, "", "n_outputs"], [175, 1, 1, "", "name"], [175, 1, 1, "", "opcode"], [175, 1, 1, "", "opcode_str"], [175, 1, 1, "", "options"], [175, 1, 1, "", "output_data"], [175, 1, 1, "", "output_tensor"], [175, 1, 1, "", "outputs"], [175, 1, 1, "", "padding"], [175, 1, 1, "", "params"], [175, 1, 1, "", "strides"], [175, 1, 1, "", "use_bias"]], "mltk.core.TfliteDepthwiseConvParams": [[177, 2, 1, "", "__init__"], [177, 2, 1, "", "calculate"], [177, 3, 1, "", "depth_multiplier"], [177, 3, 1, "", "dilation_height_factor"], [177, 3, 1, "", "dilation_width_factor"], [177, 3, 1, "", "input_offset"], [177, 3, 1, "", "output_offset"], [177, 3, 1, "", "padding"], [177, 3, 1, "", "per_channel_output_multiplier"], [177, 3, 1, "", "per_channel_output_shift"], [177, 3, 1, "", "quantized_activation_max"], [177, 3, 1, "", "quantized_activation_min"], [177, 3, 1, "", "stride_height"], [177, 3, 1, "", "stride_width"], [177, 3, 1, "", "weights_offset"]], "mltk.core.TfliteDequantizeLayer": [[178, 2, 1, "", "__init__"], [178, 2, 1, "", "from_flatbuffer"], [178, 2, 1, "", "get_input_data"], [178, 2, 1, "", "get_input_tensor"], [178, 2, 1, "", "get_output_data"], [178, 2, 1, "", "get_output_tensor"], [178, 1, 1, "", "index"], [178, 1, 1, "", "input_data"], [178, 1, 1, "", "input_tensor"], [178, 1, 1, "", "inputs"], [178, 1, 1, "", "metadata"], [178, 1, 1, "", "model"], [178, 1, 1, "", "n_inputs"], [178, 1, 1, "", "n_outputs"], [178, 1, 1, "", "name"], [178, 1, 1, "", "opcode"], [178, 1, 1, "", "opcode_str"], [178, 1, 1, "", "options"], [178, 1, 1, "", "output_data"], [178, 1, 1, "", "output_tensor"], [178, 1, 1, "", "outputs"]], "mltk.core.TfliteFullyConnectedLayer": [[180, 2, 1, "", "__init__"], [180, 1, 1, "", "accumulator_depth"], [180, 1, 1, "", "activation"], [180, 1, 1, "", "bias_data"], [180, 1, 1, "", "bias_tensor"], [180, 2, 1, "", "from_flatbuffer"], [180, 2, 1, "", "get_input_data"], [180, 2, 1, "", "get_input_tensor"], [180, 2, 1, "", "get_output_data"], [180, 2, 1, "", "get_output_tensor"], [180, 1, 1, "", "index"], [180, 1, 1, "", "input_data"], [180, 1, 1, "", "input_tensor"], [180, 1, 1, "", "inputs"], [180, 1, 1, "", "metadata"], [180, 1, 1, "", "model"], [180, 1, 1, "", "n_inputs"], [180, 1, 1, "", "n_outputs"], [180, 1, 1, "", "name"], [180, 1, 1, "", "opcode"], [180, 1, 1, "", "opcode_str"], [180, 1, 1, "", "options"], [180, 1, 1, "", "output_data"], [180, 1, 1, "", "output_tensor"], [180, 1, 1, "", "outputs"], [180, 1, 1, "", "params"], [180, 1, 1, "", "units"], [180, 1, 1, "", "use_bias"], [180, 1, 1, "", "weights_data"], [180, 1, 1, "", "weights_tensor"]], "mltk.core.TfliteFullyConnectedLayerOptions": [[181, 2, 1, "", "__init__"], [181, 1, 1, "", "activation"], [181, 1, 1, "", "activation_str"], [181, 1, 1, "", "options_type"], [181, 1, 1, "", "options_type_str"]], "mltk.core.TfliteFullyConnectedParams": [[182, 2, 1, "", "__init__"], [182, 2, 1, "", "calculate"], [182, 3, 1, "", "input_offset"], [182, 3, 1, "", "output_multiplier"], [182, 3, 1, "", "output_offset"], [182, 3, 1, "", "output_shift"], [182, 3, 1, "", "quantized_activation_max"], [182, 3, 1, "", "quantized_activation_min"], [182, 3, 1, "", "weights_offset"]], "mltk.core.TfliteLayer": [[184, 2, 1, "", "__init__"], [184, 2, 1, "", "from_flatbuffer"], [184, 2, 1, "", "get_input_data"], [184, 2, 1, "", "get_input_tensor"], [184, 2, 1, "", "get_output_data"], [184, 2, 1, "", "get_output_tensor"], [184, 1, 1, "", "index"], [184, 1, 1, "", "inputs"], [184, 1, 1, "", "metadata"], [184, 1, 1, "", "model"], [184, 1, 1, "", "n_inputs"], [184, 1, 1, "", "n_outputs"], [184, 1, 1, "", "name"], [184, 1, 1, "", "opcode"], [184, 1, 1, "", "opcode_str"], [184, 1, 1, "", "options"], [184, 1, 1, "", "outputs"]], "mltk.core.TfliteModel": [[185, 2, 1, "", "__init__"], [185, 2, 1, "", "add_metadata"], [185, 2, 1, "", "dequantize_output_to_float32"], [185, 1, 1, "", "description"], [185, 1, 1, "", "filename"], [185, 1, 1, "", "flatbuffer_data"], [185, 1, 1, "", "flatbuffer_model"], [185, 1, 1, "", "flatbuffer_size"], [185, 1, 1, "", "flatbuffer_subgraph"], [185, 2, 1, "", "get_all_metadata"], [185, 2, 1, "", "get_flatbuffer_subgraph"], [185, 2, 1, "", "get_input_data"], [185, 2, 1, "", "get_input_tensor"], [185, 2, 1, "", "get_metadata"], [185, 2, 1, "", "get_output_data"], [185, 2, 1, "", "get_output_tensor"], [185, 2, 1, "", "get_tensor"], [185, 2, 1, "", "get_tensor_data"], [185, 1, 1, "", "inputs"], [185, 1, 1, "", "layers"], [185, 2, 1, "", "load_flatbuffer_file"], [185, 1, 1, "", "n_inputs"], [185, 1, 1, "", "n_outputs"], [185, 1, 1, "", "n_subgraphs"], [185, 1, 1, "", "name"], [185, 1, 1, "", "outputs"], [185, 1, 1, "", "path"], [185, 2, 1, "", "predict"], [185, 2, 1, "", "quantize_to_input_dtype"], [185, 2, 1, "", "regenerate_flatbuffer"], [185, 2, 1, "", "remove_metadata"], [185, 2, 1, "", "save"], [185, 1, 1, "", "selected_model_subgraph"], [185, 2, 1, "", "summary"], [185, 1, 1, "", "tensors"]], "mltk.core.TfliteModelParameters": [[187, 2, 1, "", "__init__"], [187, 2, 1, "", "__new__"], [187, 2, 1, "", "add_to_tflite_file"], [187, 2, 1, "", "add_to_tflite_flatbuffer"], [187, 2, 1, "", "add_to_tflite_model"], [187, 2, 1, "", "clear"], [187, 2, 1, "", "copy"], [187, 2, 1, "", "deserialize"], [187, 2, 1, "", "fromkeys"], [187, 2, 1, "", "get"], [187, 2, 1, "", "items"], [187, 2, 1, "", "keys"], [187, 2, 1, "", "load_from_tflite_file"], [187, 2, 1, "", "load_from_tflite_flatbuffer"], [187, 2, 1, "", "load_from_tflite_model"], [187, 2, 1, "", "pop"], [187, 2, 1, "", "popitem"], [187, 2, 1, "", "put"], [187, 2, 1, "", "serialize"], [187, 2, 1, "", "setdefault"], [187, 2, 1, "", "summary"], [187, 2, 1, "", "update"], [187, 2, 1, "", "values"]], "mltk.core.TflitePadding": [[186, 3, 1, "", "SAME"], [186, 3, 1, "", "VALID"], [186, 1, 1, "", "height"], [186, 2, 1, "", "to_string"], [186, 1, 1, "", "width"]], "mltk.core.TflitePool2DLayerOptions": [[189, 2, 1, "", "__init__"], [189, 1, 1, "", "activation"], [189, 1, 1, "", "activation_str"], [189, 1, 1, "", "filter_height"], [189, 1, 1, "", "filter_width"], [189, 1, 1, "", "options_type"], [189, 1, 1, "", "options_type_str"], [189, 1, 1, "", "padding"], [189, 1, 1, "", "padding_str"], [189, 1, 1, "", "stride_height"], [189, 1, 1, "", "stride_width"]], "mltk.core.TflitePoolParams": [[190, 2, 1, "", "__init__"], [190, 2, 1, "", "calculate"], [190, 3, 1, "", "padding"], [190, 3, 1, "", "quantized_activation_max"], [190, 3, 1, "", "quantized_activation_min"], [190, 3, 1, "", "stride_height"], [190, 3, 1, "", "stride_width"]], "mltk.core.TflitePooling2dLayer": [[188, 2, 1, "", "__init__"], [188, 1, 1, "", "activation"], [188, 2, 1, "", "from_flatbuffer"], [188, 2, 1, "", "get_input_data"], [188, 2, 1, "", "get_input_tensor"], [188, 2, 1, "", "get_output_data"], [188, 2, 1, "", "get_output_tensor"], [188, 1, 1, "", "index"], [188, 1, 1, "", "input_data"], [188, 1, 1, "", "input_tensor"], [188, 1, 1, "", "inputs"], [188, 1, 1, "", "metadata"], [188, 1, 1, "", "model"], [188, 1, 1, "", "n_inputs"], [188, 1, 1, "", "n_outputs"], [188, 1, 1, "", "name"], [188, 1, 1, "", "opcode"], [188, 1, 1, "", "opcode_str"], [188, 1, 1, "", "options"], [188, 1, 1, "", "output_data"], [188, 1, 1, "", "output_tensor"], [188, 1, 1, "", "outputs"], [188, 1, 1, "", "padding"], [188, 1, 1, "", "params"], [188, 1, 1, "", "pool_size"], [188, 1, 1, "", "strides"]], "mltk.core.TfliteQuantization": [[191, 2, 1, "", "__init__"], [191, 1, 1, "", "n_channels"], [191, 1, 1, "", "quantization_dimension"], [191, 1, 1, "", "scale"], [191, 1, 1, "", "zeropoint"]], "mltk.core.TfliteQuantizeLayer": [[192, 2, 1, "", "__init__"], [192, 2, 1, "", "from_flatbuffer"], [192, 2, 1, "", "get_input_data"], [192, 2, 1, "", "get_input_tensor"], [192, 2, 1, "", "get_output_data"], [192, 2, 1, "", "get_output_tensor"], [192, 1, 1, "", "index"], [192, 1, 1, "", "input_data"], [192, 1, 1, "", "input_tensor"], [192, 1, 1, "", "inputs"], [192, 1, 1, "", "metadata"], [192, 1, 1, "", "model"], [192, 1, 1, "", "n_inputs"], [192, 1, 1, "", "n_outputs"], [192, 1, 1, "", "name"], [192, 1, 1, "", "opcode"], [192, 1, 1, "", "opcode_str"], [192, 1, 1, "", "options"], [192, 1, 1, "", "output_data"], [192, 1, 1, "", "output_tensor"], [192, 1, 1, "", "outputs"]], "mltk.core.TfliteReshapeLayer": [[193, 2, 1, "", "__init__"], [193, 2, 1, "", "from_flatbuffer"], [193, 2, 1, "", "get_input_data"], [193, 2, 1, "", "get_input_tensor"], [193, 2, 1, "", "get_output_data"], [193, 2, 1, "", "get_output_tensor"], [193, 1, 1, "", "index"], [193, 1, 1, "", "input_data"], [193, 1, 1, "", "input_tensor"], [193, 1, 1, "", "inputs"], [193, 1, 1, "", "metadata"], [193, 1, 1, "", "model"], [193, 1, 1, "", "n_input_elements"], [193, 1, 1, "", "n_inputs"], [193, 1, 1, "", "n_outputs"], [193, 1, 1, "", "name"], [193, 1, 1, "", "opcode"], [193, 1, 1, "", "opcode_str"], [193, 1, 1, "", "options"], [193, 1, 1, "", "output_data"], [193, 1, 1, "", "output_tensor"], [193, 1, 1, "", "outputs"], [193, 1, 1, "", "requires_copy"]], "mltk.core.TfliteShape": [[194, 2, 1, "", "__new__"], [194, 2, 1, "", "count"], [194, 1, 1, "", "flat_size"], [194, 2, 1, "", "index"]], "mltk.core.TfliteTensor": [[195, 2, 1, "", "__init__"], [195, 1, 1, "", "data"], [195, 1, 1, "", "dtype"], [195, 1, 1, "", "dtype_str"], [195, 1, 1, "", "index"], [195, 1, 1, "", "model"], [195, 1, 1, "", "quantization"], [195, 1, 1, "", "shape"], [195, 2, 1, "", "shape_dtype_str"]], "mltk.core.TfliteTransposeConvLayer": [[196, 2, 1, "", "__init__"], [196, 1, 1, "", "bias_data"], [196, 1, 1, "", "bias_tensor"], [196, 1, 1, "", "filters"], [196, 1, 1, "", "filters_data"], [196, 1, 1, "", "filters_tensor"], [196, 2, 1, "", "from_flatbuffer"], [196, 2, 1, "", "get_input_data"], [196, 2, 1, "", "get_input_tensor"], [196, 2, 1, "", "get_output_data"], [196, 2, 1, "", "get_output_tensor"], [196, 1, 1, "", "index"], [196, 1, 1, "", "input_data"], [196, 1, 1, "", "input_tensor"], [196, 1, 1, "", "inputs"], [196, 1, 1, "", "kernel_size"], [196, 1, 1, "", "metadata"], [196, 1, 1, "", "model"], [196, 1, 1, "", "n_inputs"], [196, 1, 1, "", "n_outputs"], [196, 1, 1, "", "name"], [196, 1, 1, "", "opcode"], [196, 1, 1, "", "opcode_str"], [196, 1, 1, "", "options"], [196, 1, 1, "", "output_data"], [196, 1, 1, "", "output_tensor"], [196, 1, 1, "", "outputs"], [196, 1, 1, "", "padding"], [196, 1, 1, "", "params"], [196, 1, 1, "", "strides"], [196, 1, 1, "", "use_bias"]], "mltk.core.TfliteTransposeConvLayerOptions": [[197, 2, 1, "", "__init__"], [197, 1, 1, "", "options_type"], [197, 1, 1, "", "options_type_str"], [197, 1, 1, "", "padding"], [197, 1, 1, "", "padding_str"], [197, 1, 1, "", "stride_height"], [197, 1, 1, "", "stride_width"]], "mltk.core.TfliteTransposeConvParams": [[198, 2, 1, "", "__init__"], [198, 2, 1, "", "calculate"], [198, 3, 1, "", "input_offset"], [198, 3, 1, "", "output_offset"], [198, 3, 1, "", "padding"], [198, 3, 1, "", "per_channel_output_multiplier"], [198, 3, 1, "", "per_channel_output_shift"], [198, 3, 1, "", "quantized_activation_max"], [198, 3, 1, "", "quantized_activation_min"], [198, 3, 1, "", "stride_height"], [198, 3, 1, "", "stride_width"], [198, 3, 1, "", "weights_offset"]], "mltk.core.TrainMixin": [[120, 1, 1, "", "batch_size"], [120, 1, 1, "", "build_model_function"], [120, 1, 1, "", "checkpoint"], [120, 1, 1, "", "checkpoints_dir"], [120, 1, 1, "", "checkpoints_enabled"], [120, 1, 1, "", "early_stopping"], [120, 1, 1, "", "epochs"], [120, 2, 1, "", "get_checkpoint_path"], [120, 2, 1, "", "get_weights_path"], [120, 1, 1, "", "loss"], [120, 1, 1, "", "lr_schedule"], [120, 1, 1, "", "metrics"], [120, 1, 1, "", "on_save_keras_model"], [120, 1, 1, "", "on_training_complete"], [120, 1, 1, "", "optimizer"], [120, 1, 1, "", "reduce_lr_on_plateau"], [120, 1, 1, "", "tensorboard"], [120, 1, 1, "", "tflite_converter"], [120, 1, 1, "", "train_callbacks"], [120, 1, 1, "", "train_kwargs"], [120, 1, 1, "", "weights_dir"], [120, 1, 1, "", "weights_file_format"]], "mltk.core.WeightsAndBiasesMixin": [[122, 1, 1, "", "wandb_callback"], [122, 1, 1, "", "wandb_config"], [122, 1, 1, "", "wandb_init_kwargs"], [122, 1, 1, "", "wandb_is_disabled"], [122, 1, 1, "", "wandb_is_initialized"], [122, 2, 1, "", "wandb_log"], [122, 1, 1, "", "wandb_model_checkpoint_callback"], [122, 2, 1, "", "wandb_save"], [122, 1, 1, "", "wandb_session_id"]], "mltk.core.preprocess.audio.audio_feature_generator": [[83, 0, 1, "", "AudioFeatureGenerator"], [84, 0, 1, "", "AudioFeatureGeneratorSettings"]], "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator": [[83, 2, 1, "", "__init__"], [83, 2, 1, "", "activity_was_detected"], [83, 2, 1, "", "process_sample"]], "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings": [[84, 2, 1, "", "__init__"], [84, 2, 1, "", "__new__"], [84, 1, 1, "", "activity_detection_alpha_a"], [84, 1, 1, "", "activity_detection_alpha_b"], [84, 1, 1, "", "activity_detection_arm_threshold"], [84, 1, 1, "", "activity_detection_enable"], [84, 1, 1, "", "activity_detection_trip_threshold"], [84, 2, 1, "", "clear"], [84, 2, 1, "", "copy"], [84, 1, 1, "", "dc_notch_filter_coefficient"], [84, 1, 1, "", "dc_notch_filter_enable"], [84, 1, 1, "", "fft_length"], [84, 1, 1, "", "filterbank_lower_band_limit"], [84, 1, 1, "", "filterbank_n_channels"], [84, 1, 1, "", "filterbank_upper_band_limit"], [84, 2, 1, "", "fromkeys"], [84, 2, 1, "", "get"], [84, 2, 1, "", "items"], [84, 2, 1, "", "keys"], [84, 1, 1, "", "log_scale_enable"], [84, 1, 1, "", "log_scale_shift"], [84, 1, 1, "", "noise_reduction_enable"], [84, 1, 1, "", "noise_reduction_even_smoothing"], [84, 1, 1, "", "noise_reduction_min_signal_remaining"], [84, 1, 1, "", "noise_reduction_odd_smoothing"], [84, 1, 1, "", "noise_reduction_smoothing_bits"], [84, 1, 1, "", "pcan_enable"], [84, 1, 1, "", "pcan_gain_bits"], [84, 1, 1, "", "pcan_offset"], [84, 1, 1, "", "pcan_strength"], [84, 2, 1, "", "pop"], [84, 2, 1, "", "popitem"], [84, 1, 1, "", "quantize_dynamic_scale_enable"], [84, 1, 1, "", "quantize_dynamic_scale_range_db"], [84, 1, 1, "", "sample_length"], [84, 1, 1, "", "sample_length_ms"], [84, 1, 1, "", "sample_rate_hz"], [84, 2, 1, "", "setdefault"], [84, 1, 1, "", "spectrogram_shape"], [84, 2, 1, "", "update"], [84, 2, 1, "", "values"], [84, 1, 1, "", "window_size_ms"], [84, 1, 1, "", "window_step_ms"]], "mltk.core.preprocess.audio.parallel_generator": [[81, 0, 1, "", "ParallelAudioDataGenerator"], [82, 0, 1, "", "ParallelProcessParams"]], "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator": [[81, 2, 1, "", "__init__"], [81, 2, 1, "", "adjust_length"], [81, 2, 1, "", "apply_frontend"], [81, 2, 1, "", "apply_transform"], [81, 1, 1, "", "default_transform"], [81, 2, 1, "", "flow_from_directory"], [81, 2, 1, "", "get_random_transform"], [81, 1, 1, "", "sample_length"], [81, 1, 1, "", "sample_length_ms"], [81, 1, 1, "", "sample_rate_hz"], [81, 1, 1, "", "sample_shape"], [81, 2, 1, "", "standardize"]], "mltk.core.preprocess.audio.parallel_generator.ParallelProcessParams": [[82, 2, 1, "", "__init__"]], "mltk.core.preprocess.image.parallel_generator": [[86, 0, 1, "", "ParallelImageDataGenerator"], [87, 0, 1, "", "ParallelProcessParams"]], "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator": [[86, 2, 1, "", "__init__"], [86, 2, 1, "", "apply_transform"], [86, 1, 1, "", "default_transform"], [86, 2, 1, "", "fit"], [86, 2, 1, "", "flow"], [86, 2, 1, "", "flow_from_directory"], [86, 2, 1, "", "get_random_transform"], [86, 2, 1, "", "random_transform"], [86, 2, 1, "", "standardize"]], "mltk.core.preprocess.image.parallel_generator.ParallelProcessParams": [[87, 2, 1, "", "__init__"]], "mltk.core.preprocess.utils": [[80, 5, 0, "-", "audio"], [85, 5, 0, "-", "image"], [89, 5, 0, "-", "list_directory"], [90, 5, 0, "-", "normalize"], [91, 5, 0, "-", "tf_dataset"]], "mltk.core.preprocess.utils.audio": [[80, 4, 1, "", "adjust_length"], [80, 4, 1, "", "apply_frontend"], [80, 4, 1, "", "read_audio_file"], [80, 4, 1, "", "write_audio_file"]], "mltk.core.preprocess.utils.image": [[85, 4, 1, "", "read_image_file"], [85, 4, 1, "", "write_image_file"]], "mltk.core.preprocess.utils.list_directory": [[89, 4, 1, "", "list_dataset_directory"], [89, 4, 1, "", "list_valid_filenames_in_directory"], [89, 4, 1, "", "shuffle_file_list_by_group"], [89, 4, 1, "", "split_file_list"]], "mltk.core.preprocess.utils.normalize": [[90, 4, 1, "", "normalize"]], "mltk.core.preprocess.utils.tf_dataset": [[91, 4, 1, "", "enable_numpy_behavior"], [91, 4, 1, "", "load_audio_directory"], [91, 4, 1, "", "load_image_directory"], [91, 4, 1, "", "parallel_process"]], "mltk.core.profiling_results": [[157, 0, 1, "", "ProfilingLayerResult"], [157, 0, 1, "", "ProfilingModelResults"]], "mltk.core.profiling_results.ProfilingLayerResult": [[157, 2, 1, "", "__init__"], [157, 1, 1, "", "accelerator_cycles"], [157, 1, 1, "", "cpu_cycles"], [157, 1, 1, "", "energy"], [157, 1, 1, "", "error_msg"], [157, 2, 1, "", "get_summary"], [157, 1, 1, "", "index"], [157, 1, 1, "", "input_dtype_str"], [157, 1, 1, "", "input_shape_str"], [157, 1, 1, "", "is_accelerated"], [157, 1, 1, "", "is_unsupported"], [157, 1, 1, "", "macs"], [157, 1, 1, "", "name"], [157, 1, 1, "", "opcode"], [157, 1, 1, "", "opcode_str"], [157, 1, 1, "", "ops"], [157, 1, 1, "", "options_str"], [157, 1, 1, "", "output_dtype_str"], [157, 1, 1, "", "output_shape_str"], [157, 1, 1, "", "tflite_layer"], [157, 1, 1, "", "time"]], "mltk.core.profiling_results.ProfilingModelResults": [[157, 2, 1, "", "__init__"], [157, 1, 1, "", "accelerator"], [157, 1, 1, "", "accelerator_cycles"], [157, 1, 1, "", "cpu_clock_rate"], [157, 1, 1, "", "cpu_cycles"], [157, 1, 1, "", "cpu_utilization"], [157, 1, 1, "", "energy"], [157, 1, 1, "", "flatbuffer_size"], [157, 2, 1, "", "generate_report"], [157, 2, 1, "", "get_summary"], [157, 1, 1, "", "input_dtype_str"], [157, 1, 1, "", "input_shape_str"], [157, 1, 1, "", "is_simulated"], [157, 1, 1, "", "layers"], [157, 1, 1, "", "macs"], [157, 1, 1, "", "n_layers"], [157, 1, 1, "", "n_unsupported_layers"], [157, 1, 1, "", "name"], [157, 1, 1, "", "ops"], [157, 1, 1, "", "output_dtype_str"], [157, 1, 1, "", "output_shape_str"], [157, 1, 1, "", "platform"], [157, 1, 1, "", "runtime_memory_bytes"], [157, 2, 1, "", "stat_total"], [157, 1, 1, "", "tflite_model"], [157, 1, 1, "", "time"], [157, 2, 1, "", "to_csv"], [157, 2, 1, "", "to_dict"], [157, 2, 1, "", "to_json"], [157, 2, 1, "", "to_string"], [157, 1, 1, "", "unsupported_layers"]], "mltk.core.tflite_micro": [[169, 0, 1, "", "TfliteMicro"], [165, 0, 1, "", "TfliteMicroLayerError"], [166, 0, 1, "", "TfliteMicroModel"], [167, 0, 1, "", "TfliteMicroModelDetails"], [168, 0, 1, "", "TfliteMicroProfiledLayerResult"]], "mltk.core.tflite_micro.TfliteMicro": [[169, 2, 1, "", "accelerator_is_supported"], [169, 2, 1, "", "add_accelerator_path"], [169, 2, 1, "", "api_version"], [169, 2, 1, "", "get_accelerator"], [169, 2, 1, "", "get_log_level"], [169, 2, 1, "", "get_logger"], [169, 2, 1, "", "get_supported_accelerators"], [169, 2, 1, "", "git_hash"], [169, 2, 1, "", "load_tflite_model"], [169, 2, 1, "", "normalize_accelerator_name"], [169, 2, 1, "", "profile_model"], [169, 2, 1, "", "record_model"], [169, 2, 1, "", "register_accelerator"], [169, 2, 1, "", "set_log_level"], [169, 2, 1, "", "set_logger"], [169, 2, 1, "", "unload_model"]], "mltk.core.tflite_micro.TfliteMicroLayerError": [[165, 2, 1, "", "__init__"], [165, 1, 1, "", "index"], [165, 1, 1, "", "msg"], [165, 1, 1, "", "name"]], "mltk.core.tflite_micro.TfliteMicroModel": [[166, 2, 1, "", "__init__"], [166, 1, 1, "", "accelerator"], [166, 1, 1, "", "details"], [166, 2, 1, "", "get_layer_error"], [166, 2, 1, "", "get_profiling_results"], [166, 2, 1, "", "get_recorded_data"], [166, 2, 1, "", "input"], [166, 1, 1, "", "input_size"], [166, 2, 1, "", "invoke"], [166, 1, 1, "", "is_profiler_enabled"], [166, 1, 1, "", "is_tensor_recorder_enabled"], [166, 1, 1, "", "layer_errors"], [166, 2, 1, "", "output"], [166, 1, 1, "", "output_size"]], "mltk.core.tflite_micro.TfliteMicroModelDetails": [[167, 2, 1, "", "__init__"], [167, 1, 1, "", "accelerator"], [167, 1, 1, "", "classes"], [167, 1, 1, "", "date"], [167, 1, 1, "", "description"], [167, 1, 1, "", "hash"], [167, 1, 1, "", "name"], [167, 1, 1, "", "runtime_memory_size"], [167, 1, 1, "", "version"]], "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult": [[168, 2, 1, "", "__init__"], [168, 2, 1, "", "__new__"], [168, 1, 1, "", "accelerator_cycles"], [168, 2, 1, "", "clear"], [168, 2, 1, "", "copy"], [168, 1, 1, "", "cpu_cycles"], [168, 3, 1, "", "default_factory"], [168, 1, 1, "", "energy"], [168, 2, 1, "", "fromkeys"], [168, 2, 1, "", "get"], [168, 2, 1, "", "items"], [168, 2, 1, "", "keys"], [168, 1, 1, "", "macs"], [168, 1, 1, "", "name"], [168, 1, 1, "", "ops"], [168, 2, 1, "", "pop"], [168, 2, 1, "", "popitem"], [168, 2, 1, "", "setdefault"], [168, 1, 1, "", "time"], [168, 2, 1, "", "update"], [168, 2, 1, "", "values"]], "mltk.core.tflite_micro.tflite_micro_accelerator": [[163, 0, 1, "", "TfliteMicroAccelerator"]], "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator": [[163, 2, 1, "", "__init__"], [163, 1, 1, "", "accelerator_wrapper"], [163, 1, 1, "", "api_version"], [163, 2, 1, "", "compile_model"], [163, 2, 1, "", "enable_data_recorder"], [163, 2, 1, "", "enable_program_recorder"], [163, 2, 1, "", "estimate_profiling_results"], [163, 1, 1, "", "git_hash"], [163, 1, 1, "", "name"], [163, 1, 1, "", "supports_model_compilation"]], "mltk.core.tflite_model_parameters.flatbuffer_dictionary": [[179, 0, 1, "", "FlatbufferDictionary"]], "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary": [[179, 2, 1, "", "__init__"], [179, 2, 1, "", "deserialize"], [179, 2, 1, "", "put"], [179, 2, 1, "", "serialize"], [179, 2, 1, "", "summary"]], "mltk.core.train_model": [[160, 0, 1, "", "TrainingResults"]], "mltk.core.train_model.TrainingResults": [[160, 2, 1, "", "__init__"], [160, 2, 1, "", "asdict"], [160, 3, 1, "", "epochs"], [160, 2, 1, "", "get_best_metric"], [160, 3, 1, "", "history"], [160, 3, 1, "", "keras_model"], [160, 3, 1, "", "mltk_model"], [160, 1, 1, "", "model_archive_path"], [160, 3, 1, "", "params"]], "mltk.datasets.accelerometer": [[93, 5, 0, "-", "tflm_magic_wand"]], "mltk.datasets.accelerometer.tflm_magic_wand": [[93, 4, 1, "", "load_data"], [93, 4, 1, "", "prepare_data"]], "mltk.datasets.audio.background_noise": [[94, 5, 0, "-", "ambient"], [95, 5, 0, "-", "brd2601"], [96, 5, 0, "-", "esc50"]], "mltk.datasets.audio.background_noise.ambient": [[94, 6, 1, "", "DOWNLOAD_URLS"], [94, 4, 1, "", "download"]], "mltk.datasets.audio.background_noise.brd2601": [[95, 6, 1, "", "DOWNLOAD_URL"], [95, 6, 1, "", "VERIFY_SHA1"], [95, 4, 1, "", "download"]], "mltk.datasets.audio.background_noise.esc50": [[96, 6, 1, "", "DOWNLOAD_URL"], [96, 6, 1, "", "VERIFY_SHA1"], [96, 4, 1, "", "download"]], "mltk.datasets.audio": [[97, 5, 0, "-", "direction_commands"]], "mltk.datasets.audio.mlcommons": [[98, 5, 0, "-", "ml_commons_keywords"], [99, 5, 0, "-", "ml_commons_voice"]], "mltk.datasets.audio.mlcommons.ml_commons_keywords": [[98, 6, 1, "", "DOWNLOAD_URL1"], [98, 6, 1, "", "DOWNLOAD_URL2"], [98, 6, 1, "", "VERIFY_URL1_SHA1"], [98, 6, 1, "", "VERIFY_URL2_SHA1"], [98, 4, 1, "", "download"]], "mltk.datasets.audio.mlcommons.ml_commons_voice": [[99, 6, 1, "", "DOWNLOAD_URL"], [99, 6, 1, "", "VERIFY_SHA1"], [99, 4, 1, "", "download"]], "mltk.datasets.audio.speech_commands": [[100, 5, 0, "-", "speech_commands_v2"]], "mltk.datasets.audio.speech_commands.speech_commands_v2": [[100, 6, 1, "", "CLASSES"], [100, 6, 1, "", "DOWNLOAD_URL"], [100, 6, 1, "", "VERIFY_SHA1"], [100, 4, 1, "", "list_valid_filenames_in_directory"], [100, 4, 1, "", "load_clean_data"], [100, 4, 1, "", "load_data"]], "mltk.datasets.image": [[101, 5, 0, "-", "cifar10"], [102, 5, 0, "-", "fashion_mnist"], [103, 5, 0, "-", "mnist"], [104, 5, 0, "-", "rock_paper_scissors_v1"], [105, 5, 0, "-", "rock_paper_scissors_v2"]], "mltk.datasets.image.cifar10": [[101, 6, 1, "", "DOWNLOAD_URL"], [101, 6, 1, "", "VERIFY_SHA1"], [101, 4, 1, "", "load_data"], [101, 4, 1, "", "load_data_directory"]], "mltk.datasets.image.fashion_mnist": [[102, 6, 1, "", "CLASSES"], [102, 6, 1, "", "INPUT_SHAPE"], [102, 4, 1, "", "load_data"], [102, 4, 1, "", "load_data_directory"]], "mltk.datasets.image.mnist": [[103, 6, 1, "", "CLASSES"], [103, 6, 1, "", "DOWNLOAD_URL"], [103, 6, 1, "", "INPUT_SHAPE"], [103, 6, 1, "", "VERIFY_SHA1"], [103, 4, 1, "", "load_data"], [103, 4, 1, "", "load_data_directory"]], "mltk.datasets.image.rock_paper_scissors_v1": [[104, 6, 1, "", "CLASSES"], [104, 6, 1, "", "DOWNLOAD_URL"], [104, 6, 1, "", "INPUT_DEPTH"], [104, 6, 1, "", "INPUT_HEIGHT"], [104, 6, 1, "", "INPUT_SHAPE"], [104, 6, 1, "", "INPUT_WIDTH"], [104, 6, 1, "", "VERIFY_SHA1"], [104, 4, 1, "", "load_data"]], "mltk.datasets.image.rock_paper_scissors_v2": [[105, 6, 1, "", "CLASSES"], [105, 6, 1, "", "DOWNLOAD_URL"], [105, 6, 1, "", "INPUT_DEPTH"], [105, 6, 1, "", "INPUT_HEIGHT"], [105, 6, 1, "", "INPUT_SHAPE"], [105, 6, 1, "", "INPUT_WIDTH"], [105, 6, 1, "", "VERIFY_SHA1"], [105, 4, 1, "", "load_data"]], "mltk.models.examples": [[124, 5, 0, "-", "audio_example1"], [125, 5, 0, "-", "audio_tf_dataset"], [126, 5, 0, "-", "autoencoder_example"], [127, 5, 0, "-", "basic_example"], [128, 5, 0, "-", "basic_tf_dataset_example"], [129, 5, 0, "-", "binary_classification"], [130, 5, 0, "-", "conv1d_example"], [131, 5, 0, "-", "image_example1"], [132, 5, 0, "-", "image_tf_dataset"], [134, 5, 0, "-", "siamese_contrastive"]], "mltk.models.shared.dsconv_arm": [[123, 4, 1, "", "DepthwiseSeparableConv2D_ARM"]], "mltk.models.shared.fully_connected_autoencoder": [[123, 4, 1, "", "FullyConnectedAutoEncoder"]], "mltk.models.shared.mobilenet_v1": [[123, 4, 1, "", "MobileNetV1"]], "mltk.models.shared.mobilenet_v2": [[123, 4, 1, "", "MobileNetV2"]], "mltk.models.shared.resnet_v1": [[123, 4, 1, "", "ResNet10V1"]], "mltk.models.shared.tenet": [[123, 4, 1, "", "TENet"]], "mltk.models.siliconlabs": [[136, 5, 0, "-", "fingerprint_signature_generator"], [138, 5, 0, "-", "keyword_spotting_alexa"], [139, 5, 0, "-", "keyword_spotting_mobilenetv2"], [140, 5, 0, "-", "keyword_spotting_on_off"], [141, 5, 0, "-", "keyword_spotting_on_off_v2"], [142, 5, 0, "-", "keyword_spotting_pacman"], [143, 5, 0, "-", "keyword_spotting_pacman_v2"], [144, 5, 0, "-", "keyword_spotting_pacman_v3"], [145, 5, 0, "-", "keyword_spotting_with_transfer_learning"], [146, 5, 0, "-", "rock_paper_scissors"]], "mltk.models.tflite_micro": [[148, 5, 0, "-", "tflite_micro_magic_wand"], [149, 5, 0, "-", "tflite_micro_speech"]], "mltk.models.tinyml": [[150, 5, 0, "-", "anomaly_detection"], [151, 5, 0, "-", "image_classification"], [153, 5, 0, "-", "keyword_spotting"], [154, 5, 0, "-", "visual_wake_words"]], "mltk.utils": [[199, 5, 0, "-", "archive"], [200, 5, 0, "-", "archive_downloader"], [209, 5, 0, "-", "bin2header"], [210, 5, 0, "-", "cmake"], [211, 5, 0, "-", "gpu"], [212, 5, 0, "-", "hasher"], [219, 5, 0, "-", "logger"], [220, 5, 0, "-", "path"], [222, 5, 0, "-", "python"], [225, 5, 0, "-", "shell_cmd"], [227, 5, 0, "-", "string_formatting"], [228, 5, 0, "-", "system"]], "mltk.utils.archive": [[199, 4, 1, "", "extract_archive"], [199, 4, 1, "", "gzip_directory_files"], [199, 4, 1, "", "gzip_file"]], "mltk.utils.archive_downloader": [[200, 4, 1, "", "download_url"], [200, 4, 1, "", "download_verify_extract"], [200, 4, 1, "", "verify_extract"], [200, 4, 1, "", "verify_file_hash"], [200, 4, 1, "", "verify_sha1"], [200, 4, 1, "", "verify_sha256"]], "mltk.utils.audio_dataset_generator": [[203, 0, 1, "", "AudioDatasetGenerator"], [201, 0, 1, "", "Augmentation"], [202, 0, 1, "", "GenerationConfig"], [205, 0, 1, "", "Keyword"], [206, 0, 1, "", "Voice"], [207, 0, 1, "", "VoicePitch"], [208, 0, 1, "", "VoiceRate"]], "mltk.utils.audio_dataset_generator.AudioDatasetGenerator": [[203, 2, 1, "", "__init__"], [203, 2, 1, "", "count_characters"], [203, 2, 1, "", "generate"], [203, 2, 1, "", "get_summary"], [203, 2, 1, "", "is_backend_loaded"], [203, 1, 1, "", "is_running"], [203, 2, 1, "", "join"], [203, 2, 1, "", "list_configurations"], [203, 2, 1, "", "list_languages"], [203, 2, 1, "", "list_supported_backends"], [203, 2, 1, "", "list_voices"], [203, 2, 1, "", "load_backend"], [203, 1, 1, "", "out_dir"], [203, 2, 1, "", "shutdown"]], "mltk.utils.audio_dataset_generator.Augmentation": [[201, 2, 1, "", "count"], [201, 2, 1, "", "index"], [201, 3, 1, "", "pitch"], [201, 3, 1, "", "rate"]], "mltk.utils.audio_dataset_generator.GenerationConfig": [[202, 2, 1, "", "__init__"], [202, 2, 1, "", "copy"], [202, 3, 1, "", "keyword"], [202, 3, 1, "", "keyword_group"], [202, 3, 1, "", "pitch"], [202, 3, 1, "", "rate"], [202, 3, 1, "", "voice"]], "mltk.utils.audio_dataset_generator.Keyword": [[205, 3, 1, "", "aliases"], [205, 2, 1, "", "as_list"], [205, 2, 1, "", "count"], [205, 2, 1, "", "index"], [205, 3, 1, "", "max_count"], [205, 3, 1, "", "value"]], "mltk.utils.audio_dataset_generator.Voice": [[206, 2, 1, "", "__init__"], [206, 3, 1, "", "backend"], [206, 2, 1, "", "hashable_value"], [206, 1, 1, "", "hex_hash"], [206, 3, 1, "", "language_code"], [206, 3, 1, "", "name"]], "mltk.utils.bin2header": [[209, 4, 1, "", "bin2header"], [209, 4, 1, "", "main"]], "mltk.utils.cmake": [[210, 4, 1, "", "build_mltk_target"], [210, 4, 1, "", "get_build_directory"], [210, 4, 1, "", "invoke_mltk_target"], [210, 4, 1, "", "parse_variables"]], "mltk.utils.gpu": [[211, 0, 1, "", "TensorflowCudaVersions"], [211, 4, 1, "", "check_tensorflow_cuda_compatibility_error"], [211, 4, 1, "", "deinitialize"], [211, 4, 1, "", "disable"], [211, 4, 1, "", "get_tensorflow_version_with_cudnn_version"], [211, 4, 1, "", "initialize"]], "mltk.utils.gpu.TensorflowCudaVersions": [[211, 2, 1, "", "__getnewargs__"], [211, 3, 1, "", "__match_args__"], [211, 3, 1, "", "__module__"], [211, 2, 1, "", "__new__"], [211, 2, 1, "", "__repr__"], [211, 3, 1, "", "__slots__"], [211, 3, 1, "", "cuda"], [211, 3, 1, "", "cudnn"], [211, 3, 1, "", "python_max"], [211, 3, 1, "", "python_min"], [211, 3, 1, "", "tensorflow"]], "mltk.utils.hasher": [[212, 4, 1, "", "generate_hash"], [212, 4, 1, "", "hash_file"], [212, 4, 1, "", "hash_object"]], "mltk.utils.jlink_stream": [[215, 0, 1, "", "JLinkDataStream"], [214, 0, 1, "", "JlinkCommandStream"], [217, 0, 1, "", "JlinkStream"], [218, 0, 1, "", "JlinkStreamOptions"]], "mltk.utils.jlink_stream.JLinkDataStream": [[215, 2, 1, "", "__init__"], [215, 1, 1, "", "buffer_hexdump"], [215, 1, 1, "", "buffer_unused"], [215, 1, 1, "", "buffer_used"], [215, 2, 1, "", "close"], [215, 1, 1, "", "end_time"], [215, 2, 1, "", "flush"], [215, 1, 1, "", "is_opened"], [215, 1, 1, "", "max_read_size"], [215, 1, 1, "", "mode"], [215, 1, 1, "", "name"], [215, 2, 1, "", "read"], [215, 2, 1, "", "read_all"], [215, 1, 1, "", "read_data_available"], [215, 1, 1, "", "timeout"], [215, 2, 1, "", "write"], [215, 1, 1, "", "write_data_available"]], "mltk.utils.jlink_stream.JlinkCommandStream": [[214, 2, 1, "", "__init__"], [214, 2, 1, "", "close"], [214, 2, 1, "", "issue"], [214, 2, 1, "", "open"]], "mltk.utils.jlink_stream.JlinkStream": [[217, 2, 1, "", "__init__"], [217, 2, 1, "", "close"], [217, 2, 1, "", "connect"], [217, 1, 1, "", "default_options"], [217, 2, 1, "", "disconnect"], [217, 1, 1, "", "is_connected"], [217, 2, 1, "", "open"], [217, 2, 1, "", "process"], [217, 2, 1, "", "read"], [217, 2, 1, "", "write"]], "mltk.utils.logger": [[219, 0, 1, "", "ConsoleLoggerLevelContext"], [219, 0, 1, "", "DummyLogger"], [219, 4, 1, "", "add_console_logger"], [219, 4, 1, "", "get_level"], [219, 4, 1, "", "get_logger"], [219, 4, 1, "", "make_filelike"], [219, 4, 1, "", "redirect_stream"], [219, 4, 1, "", "set_console_level"], [219, 4, 1, "", "timing_decorator"]], "mltk.utils.logger.ConsoleLoggerLevelContext": [[219, 3, 1, "", "__dict__"], [219, 2, 1, "", "__enter__"], [219, 2, 1, "", "__exit__"], [219, 2, 1, "", "__init__"], [219, 3, 1, "", "__module__"], [219, 3, 1, "", "__weakref__"]], "mltk.utils.logger.DummyLogger": [[219, 3, 1, "", "__dict__"], [219, 2, 1, "", "__init__"], [219, 3, 1, "", "__module__"], [219, 3, 1, "", "__weakref__"], [219, 2, 1, "", "debug"], [219, 2, 1, "", "error"], [219, 2, 1, "", "exception"], [219, 2, 1, "", "flush"], [219, 2, 1, "", "info"], [219, 2, 1, "", "warning"], [219, 2, 1, "", "write"]], "mltk.utils.path": [[220, 4, 1, "", "add_user_setting"], [220, 4, 1, "", "clean_directory"], [220, 4, 1, "", "copy_directory"], [220, 4, 1, "", "create_dir"], [220, 4, 1, "", "create_tempdir"], [220, 4, 1, "", "create_user_dir"], [220, 4, 1, "", "extension"], [220, 4, 1, "", "file_is_in_use"], [220, 4, 1, "", "file_is_newer"], [220, 4, 1, "", "fullpath"], [220, 4, 1, "", "get_actual_path"], [220, 4, 1, "", "get_user_setting"], [220, 4, 1, "", "has_filename"], [220, 4, 1, "", "recursive_listdir"], [220, 4, 1, "", "remove_directory"], [220, 4, 1, "", "set_file_last_modified"], [220, 4, 1, "", "walk_with_depth"]], "mltk.utils.process_pool": [[221, 0, 1, "", "ProcessPool"]], "mltk.utils.process_pool.ProcessPool": [[221, 2, 1, "", "__init__"], [221, 2, 1, "", "create_batch"], [221, 1, 1, "", "is_running"], [221, 1, 1, "", "n_jobs"], [221, 1, 1, "", "name"], [221, 2, 1, "", "process"], [221, 2, 1, "", "shutdown"], [221, 2, 1, "", "start"]], "mltk.utils.python": [[222, 4, 1, "", "DefaultDict"], [222, 0, 1, "", "DictObject"], [222, 6, 1, "", "SHORT_VERSION"], [222, 4, 1, "", "append_exception_msg"], [222, 4, 1, "", "as_list"], [222, 4, 1, "", "contains_class_type"], [222, 4, 1, "", "debugger_is_active"], [222, 4, 1, "", "find_object_key_with_value"], [222, 4, 1, "", "find_object_value_with_key"], [222, 4, 1, "", "find_object_value_with_key_or_value"], [222, 4, 1, "", "flatten_list"], [222, 4, 1, "", "forward_method_kwargs"], [222, 4, 1, "", "get_case_insensitive"], [222, 4, 1, "", "import_module_at_path"], [222, 4, 1, "", "install_pip_package"], [222, 4, 1, "", "is_false"], [222, 4, 1, "", "is_true"], [222, 4, 1, "", "list_rindex"], [222, 4, 1, "", "load_json_safe"], [222, 4, 1, "", "merge_dict"], [222, 4, 1, "", "notebook_is_active"], [222, 4, 1, "", "prepend_exception_msg"], [222, 4, 1, "", "timeit"]], "mltk.utils.python.DictObject": [[222, 3, 1, "", "__dict__"], [222, 2, 1, "", "__getattr__"], [222, 3, 1, "", "__module__"], [222, 2, 1, "", "__setattr__"], [222, 3, 1, "", "__weakref__"]], "mltk.utils.serial_reader": [[224, 0, 1, "", "SerialReader"]], "mltk.utils.serial_reader.SerialReader": [[224, 2, 1, "", "__init__"], [224, 1, 1, "", "captured_data"], [224, 2, 1, "", "close"], [224, 1, 1, "", "error_message"], [224, 1, 1, "", "failed"], [224, 2, 1, "", "flush"], [224, 1, 1, "", "is_open"], [224, 2, 1, "", "list_ports"], [224, 2, 1, "", "open"], [224, 2, 1, "", "read"], [224, 2, 1, "", "resolve_port"], [224, 1, 1, "", "started"], [224, 1, 1, "", "stopped"], [224, 2, 1, "", "write"]], "mltk.utils.shell_cmd": [[225, 4, 1, "", "run_shell_cmd"]], "mltk.utils.signal_handler": [[226, 0, 1, "", "SignalHandler"]], "mltk.utils.signal_handler.SignalHandler": [[226, 2, 1, "", "__init__"]], "mltk.utils.string_formatting": [[227, 0, 1, "", "FormattedFloat"], [227, 0, 1, "", "FormattedInt"], [227, 4, 1, "", "format_units"], [227, 4, 1, "", "iso_time_filename_str"], [227, 4, 1, "", "iso_time_str"], [227, 4, 1, "", "pretty_time_str"]], "mltk.utils.string_formatting.FormattedFloat": [[227, 3, 1, "", "__dict__"], [227, 3, 1, "", "__module__"], [227, 2, 1, "", "__str__"], [227, 3, 1, "", "__weakref__"]], "mltk.utils.string_formatting.FormattedInt": [[227, 3, 1, "", "__dict__"], [227, 3, 1, "", "__module__"], [227, 2, 1, "", "__str__"]], "mltk.utils.system": [[228, 4, 1, "", "get_current_os"], [228, 4, 1, "", "get_username"], [228, 4, 1, "", "has_admin"], [228, 4, 1, "", "is_linux"], [228, 4, 1, "", "is_osx"], [228, 4, 1, "", "is_windows"], [228, 4, 1, "", "make_path_executable"], [228, 4, 1, "", "raise_signal"], [228, 4, 1, "", "send_signal"]], "mltk.utils.uart_stream": [[230, 0, 1, "", "UartStream"]], "mltk.utils.uart_stream.UartStream": [[230, 2, 1, "", "__init__"], [230, 1, 1, "", "baud"], [230, 2, 1, "", "close"], [230, 2, 1, "", "flush_input"], [230, 1, 1, "", "is_open"], [230, 1, 1, "", "is_synchronized"], [230, 2, 1, "", "list_ports"], [230, 2, 1, "", "open"], [230, 1, 1, "", "port"], [230, 2, 1, "", "read"], [230, 2, 1, "", "read_all"], [230, 2, 1, "", "read_command"], [230, 2, 1, "", "resolve_port"], [230, 1, 1, "", "rx_bytes_available"], [230, 2, 1, "", "synchronize"], [230, 2, 1, "", "synchronize_blocking"], [230, 1, 1, "", "tx_bytes_available"], [230, 2, 1, "", "wait"], [230, 2, 1, "", "write"], [230, 2, 1, "", "write_all"], [230, 2, 1, "", "write_command"]]}, "objtypes": {"0": "py:class", "1": "py:property", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:module", "6": "py:data"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "property", "Python property"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "module", "Python module"], "6": ["py", "data", "Python data"]}, "titleterms": {"uart": [0, 229], "stream": [0, 216, 229], "data": [0, 51, 57, 88, 239, 245, 246, 247, 248, 249, 250, 251, 255], "test": [0, 246, 248, 250, 252, 254], "setup": [0, 34, 37, 39, 43, 44, 58, 244, 253, 255, 256], "step": [0, 244, 246, 255, 256], "audio": [1, 2, 35, 36, 80, 106, 204, 249, 250, 251, 254, 256], "featur": [1, 245, 250, 251, 256], "gener": [1, 2, 37, 62, 67, 71, 94, 204, 247, 248, 249, 250, 251, 256], "overview": [1, 3, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 79, 98, 99, 233, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "benefit": 1, "gecko": [1, 43, 232], "sdk": [1, 43, 232], "compon": 1, "sourc": [1, 42, 45, 47, 48, 249, 251], "code": [1, 35, 36, 37, 38, 39, 41, 42, 44, 45, 47, 48, 253], "mltk": [1, 34, 43, 44, 45, 47, 48, 71, 76, 115, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 248, 250, 251, 253], "c": [1, 33, 40, 42, 44, 46, 232, 247, 249], "python": [1, 14, 34, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 65, 68, 69, 72, 74, 222, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 247, 248, 250, 251, 253, 255], "wrapper": [1, 34, 42, 44, 45, 46, 47, 48, 232], "usag": [1, 4, 6, 8, 10, 12, 15, 17, 19, 21, 23, 25, 27, 29, 30, 64, 115, 164, 183, 204, 216, 223, 229, 245], "visual": [1, 2, 35, 36, 37, 38, 39, 41, 44, 72, 242, 248, 249, 250], "util": [1, 2, 64, 92, 121, 213, 248, 250], "classif": [2, 39, 61, 96, 234, 248], "classifi": [2, 35, 36, 39, 249, 250], "us": [2, 51, 57, 63, 247, 248, 250, 252], "pc": [2, 35, 37, 39, 250, 252], "microphon": [2, 252], "simul": [2, 63, 235, 248, 250], "latenc": 2, "record": [2, 238, 250, 256], "dump": [2, 35, 37, 39, 249], "spectrogram": [2, 35, 150, 153, 250], "develop": [2, 34, 42, 43, 44, 74, 232, 246, 249, 252], "board": [2, 252], "": [2, 51, 137], "from": [2, 70, 71, 141, 143, 244, 246, 247, 248, 249, 250, 251, 252, 255], "updat": [2, 35, 36, 37, 39, 41, 62, 65, 74, 236, 239, 241, 248, 252, 254], "audiofeaturegener": [2, 45, 83, 249, 250, 254], "paramet": [2, 35, 36, 62, 67, 69, 232, 239, 241, 247, 248, 249, 250, 251], "synthet": [2, 249, 256], "dataset": [2, 67, 96, 106, 138, 139, 140, 141, 142, 143, 144, 145, 149, 150, 151, 153, 154, 204, 246, 247, 248, 249, 250, 251, 255, 256], "keyword": [3, 98, 205, 249, 250, 251, 252, 254], "spot": [3, 249, 250, 251, 252], "classify_audio": [4, 35], "addit": [4, 6, 8, 10, 12, 15, 17, 19, 21, 23, 25, 27, 29, 30, 35, 36, 45, 47, 48, 67, 71], "document": [4, 6, 8, 10, 12, 15, 17, 19, 21, 23, 25, 27, 29, 30], "classify_imag": [6, 39], "command": [8, 14, 34, 35, 36, 37, 38, 39, 41, 45, 47, 48, 52, 61, 62, 63, 65, 68, 69, 71, 72, 77, 97, 100, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 232, 244, 247, 248, 249, 250, 251], "evalu": [10, 56, 61, 67, 234, 247, 248, 250, 255], "fingerprint_read": 12, "line": [14, 34, 35, 36, 37, 38, 39, 41, 52, 62, 71, 232, 244, 247, 248, 250, 251], "basic": [14, 62, 63, 67, 235, 245, 248, 250, 252], "enabl": 14, "virtual": [14, 43, 44], "environ": [14, 43, 44, 71, 75, 253, 255], "format": [14, 255], "help": 14, "support": [14, 78, 232, 255], "oper": [14, 63, 156, 255], "profil": [15, 41, 61, 63, 64, 70, 124, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 235, 238, 246, 248, 249, 250, 251, 254, 255], "quantiz": [17, 61, 65, 149, 150, 151, 153, 154, 236, 255], "ssh": [19, 70, 71, 77, 232, 246], "summar": [21, 68, 237, 254], "tensorboard": [23, 70], "train": [25, 50, 55, 63, 67, 68, 69, 70, 71, 72, 141, 143, 149, 232, 235, 237, 240, 242, 245, 246, 247, 248, 249, 250, 251, 252, 254], "update_param": [27, 39, 41], "view": [29, 62, 72, 242], "view_audio": 30, "build": [33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 47, 48, 247, 249, 251], "option": [33, 44, 64, 71, 232, 246], "mltk_cmake_log_level": 33, "mltk_platform_nam": 33, "tflite_micro_acceler": [33, 37, 39, 41], "mltk_target": 33, "mltk_enable_debug_info_in_release_build": 33, "mltk_enable_output_disassembli": 33, "model_profiler_model": [33, 41], "audio_classifier_model": 33, "mltk_run_model_from_ram": [33, 41], "instal": [34, 43, 44, 71, 74, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 248, 250, 251, 253, 255], "tool": [34, 43, 44, 232], "0": [34, 43, 44], "o": [34, 43, 44], "1": [34, 43, 44, 61, 62, 63, 65, 68, 69, 70, 71, 72, 234, 235, 236, 237, 238, 239, 240, 241, 242, 253], "cmake": [34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 52, 210], "2": [34, 43, 44, 61, 62, 63, 68, 69, 70, 71, 72, 234, 235, 237, 238, 239, 240, 241, 242, 253], "7": [34, 43, 44, 239], "zip": [34, 43, 44, 76], "3": [34, 43, 44, 61, 62, 63, 68, 69, 70, 71, 72, 234, 235, 237, 238, 239, 241, 242], "4": [34, 43, 44, 63, 68, 70, 71, 72, 235, 237, 239, 242], "git": [34, 43, 44], "5": [34, 43, 44, 70, 71, 239], "clone": [34, 43, 44], "repositori": [34, 43, 44], "sequenc": [34, 71, 248], "configur": [34, 44, 70, 71, 246, 248, 250, 252, 255], "set": [34, 37, 39, 41, 65, 67, 71, 77, 246, 248, 249, 250, 251, 252, 254], "project": [34, 44], "specif": [34, 61, 62, 67, 69, 76, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 241, 246, 248, 250, 252, 254], "target": [34, 44], "run": [34, 35, 36, 37, 38, 39, 41, 43, 44, 52, 69, 70, 239, 240, 244, 247, 248, 249, 250, 251, 252, 254, 255], "output": [34, 39, 69, 238, 255], "execut": 34, "exampl": [34, 40, 42, 43, 44, 49, 61, 62, 63, 65, 67, 68, 69, 71, 72, 73, 77, 115, 133, 164, 183, 204, 216, 223, 229, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 256], "applic": [34, 43, 44, 247, 249, 251], "quick": [35, 36, 37, 38, 39, 41, 61, 62, 63, 65, 68, 69, 70, 71, 72, 76, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "link": [35, 36, 37, 38, 39, 41, 45, 47, 48, 216, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256], "behavior": [35, 36, 37, 39], "model": [35, 36, 37, 39, 41, 50, 51, 52, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 108, 115, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 164, 183, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "via": [35, 36, 37, 39, 41, 45, 47, 48, 62, 71, 232], "simplic": [35, 36, 37, 38, 39, 41, 43, 52, 250], "studio": [35, 36, 37, 38, 39, 41, 43, 44, 52, 250], "debug": [35, 36, 37, 38, 39, 41, 44, 50, 253], "modif": [35, 244], "variabl": [35, 75], "verbos": 35, "window_m": 35, "threshold": [35, 247], "suppression_m": 35, "count": [35, 51, 246], "volume_gain": 35, "latency_m": 35, "audio_classifier_enable_audio_io": 35, "read": [35, 36, 246, 249, 251, 252, 254], "ble": 36, "pac": [36, 251], "man": [36, 251], "demo": [36, 247, 248, 249, 251], "fingerprint": [37, 247], "authent": [37, 247], "video": [37, 39, 247, 248, 249], "state": 37, "diagram": [37, 124, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154], "signatur": [37, 247], "fingeprint_read": 37, "hardwar": [37, 39, 63, 78, 235, 247, 248, 249, 251, 254], "imag": [37, 39, 85, 106, 246, 248], "fingerprint_authenticator_model": 37, "hello": 38, "world": 38, "input": [39, 51, 57, 238, 255], "normal": [39, 90], "image_classifier_model": 39, "model_profiler_generate_op_resolver_head": 41, "model_profiler_model_memory_sect": 41, "model_profiler_runtime_memory_s": 41, "model_profiler_runtime_memory_sect": 41, "tflite_micro_accelerator_profiler_en": 41, "mltk_runtime_memory_s": 41, "tflite_micro_recorder_en": 41, "mode": [42, 63], "script": [43, 44, 62, 232, 244, 248, 250], "activ": [43, 44], "add": [43, 62, 239, 244, 246, 248, 250], "segger": 44, "gdb": 44, "server": [44, 64], "serial": [44, 223], "termin": 44, "6": [44, 239], "window": [44, 58, 71], "redistribut": 44, "packag": [44, 74, 234, 235, 236, 237, 238, 239, 240, 241, 242, 247, 248, 250, 251, 253], "vscode": [44, 73], "open": [44, 70], "workspac": 44, "recommend": [44, 244, 252, 254], "extens": [44, 253], "select": [44, 246, 249, 250, 251, 254], "interpret": [44, 238], "linux": [44, 54, 71], "creat": [44, 246, 247, 248, 249, 250, 251, 254], "file": [44, 60, 62, 71, 76, 77, 235, 238, 239, 254, 255], "user_opt": 44, "kit": [44, 249], "type": [44, 51, 57, 76], "Or": 44, "embed": [44, 52, 57, 232], "arm": [44, 123], "gcc": 44, "download": [44, 64, 71, 235, 238, 239, 255], "pre": [45, 47, 48], "built": [45, 47, 48], "automat": [45, 47, 48], "manual": [45, 47, 48], "mvp": [47, 63, 235, 254], "tensorflow": [48, 58, 65, 67, 68, 72, 76, 93, 147, 164, 183, 232, 237, 242], "lite": [48, 56, 65, 67, 68, 72, 76, 93, 147, 164, 183, 232, 237, 238, 239, 242, 248, 250, 255], "micro": [48, 93, 147, 164, 232, 238], "api": [49, 61, 62, 63, 65, 67, 68, 69, 72, 107, 115, 164, 183, 204, 216, 223, 229, 234, 235, 236, 237, 238, 239, 240, 241, 242], "how": [50, 51, 52, 246, 253], "can": [50, 51], "i": [50, 51, 52, 55, 57, 58, 232, 246], "my": [50, 51, 52, 55, 246], "dure": [50, 56], "reduc": [51, 252], "size": [51, 248], "what": [51, 246], "ar": 51, "resourc": [51, 71], "requir": [51, 58, 247, 248, 249, 251, 255], "int8": 51, "filter": 51, "increas": [51, 249], "stride": 51, "decreas": 51, "kernel": [51, 255], "fullyconnect": 51, "unit": 51, "pool": 51, "layer": [51, 63, 67, 69, 238, 239], "do": [52, 246], "an": [52, 71, 244, 246, 254], "devic": [52, 57, 63, 235, 248, 250], "frequent": 53, "ask": 53, "question": 53, "why": [54, 56, 57, 232, 246], "isn": 54, "t": 54, "gpu": [54, 211, 246], "work": [54, 56, 71, 246, 253], "where": 55, "doe": [56, 70, 246, 253], "kera": [56, 67, 68, 72, 76, 108, 237, 242, 248, 250], "h5": [56, 61, 76, 234], "tf": [56, 238, 239, 248, 250, 255], "tflite": [56, 61, 65, 76, 149, 150, 151, 153, 154, 234, 235, 236, 238, 239], "return": [57, 241], "correct": 57, "result": [57, 61, 64, 71, 246], "preprocess": [57, 88, 138, 139, 140, 141, 142, 143, 144, 145, 247, 248, 250], "hint": 57, "just": 57, "float32": [57, 255], "am": 58, "see": 58, "dll": 58, "error": 58, "when": 58, "import": [58, 234, 235, 236, 237, 238, 239, 240, 241, 242, 248, 250], "your": [58, 70], "miss": 58, "nvidia": 58, "cuda": 58, "driver": 58, "guid": [59, 73], "archiv": [60, 65, 76, 199, 236], "content": [60, 245, 246, 247, 248, 249, 250, 251, 256], "directori": [60, 71], "structur": 60, "refer": [61, 62, 63, 65, 68, 69, 70, 71, 72, 76, 106, 107, 115, 135, 164, 183, 204, 216, 223, 229], "non": 61, "v": [61, 68, 253, 255], "evaluateclassifiermixin": [61, 112], "confus": 61, "matrix": 61, "roc": 61, "precis": 61, "recal": 61, "true": 61, "posit": 61, "rate": [61, 249], "fals": 61, "evaluateautoencodermixin": [61, 111], "auto": [61, 123, 234], "encod": [61, 123, 234], "mixin": 62, "audiodatasetmixin": [62, 109], "imagedatasetmixin": [62, 114], "custom": [62, 245, 246], "json": 62, "metric": 63, "entir": 63, "per": 63, "physic": [63, 235, 248, 250], "acceler": [63, 254], "befor": [63, 68, 72, 235, 237, 242], "save": [64, 247], "local": [64, 70, 71, 74, 246, 248, 249, 250, 251], "http": [64, 70], "convert": [65, 67, 248, 250, 255], "optim": [65, 254], "supported_op": 65, "inference_input_typ": 65, "inference_output_typ": 65, "representative_dataset": 65, "search": 66, "path": [66, 220, 255], "name": 67, "discover": 67, "mltkmodel": [67, 69, 76, 117], "class": [67, 248, 249, 255, 256], "instanc": [67, 69, 241, 246], "section": 67, "layout": [67, 69, 248, 250, 254], "note": [67, 69, 246, 248, 250, 256], "about": [67, 69, 246, 248, 250, 255, 256], "hardcod": [67, 69], "callback": [67, 70, 248, 250], "augment": [67, 201, 248, 249, 250, 256], "summari": [68, 124, 126, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 237, 238, 239, 248, 250], "extern": [68, 72, 237, 242], "dry": [69, 240, 248, 250], "100": 69, "epoch": [69, 240, 252], "resum": 69, "monitor": 70, "start": [70, 246, 249], "troubleshoot": 70, "tab": 70, "appear": 70, "remot": [70, 71, 246, 249], "session": [70, 71], "machin": [70, 233, 246, 247, 248, 250, 251], "revers": 70, "tunnel": 70, "localhost": 70, "6002": 70, "web": [70, 256], "browser": 70, "connect": [71, 123], "client": [71, 246], "keypair": [71, 246], "hostnam": 71, "port": 71, "usernam": 71, "kei": [71, 246], "filenam": 71, "upload": 71, "startup": 71, "shutdown": [71, 246], "sync": 71, "locat": 71, "host": 71, "identity_fil": 71, "sshmixin": [71, 119], "user_set": 71, "yaml": 71, "config": 71, "without": 71, "wait": 71, "retriev": 71, "previou": 71, "new": [71, 246], "forcefulli": 71, "discard": 71, "notebook": [73, 247, 248, 250, 251, 255], "googl": [73, 74, 100, 256], "colab": [73, 74], "standard": 74, "mltk_model_path": 75, "mltk_cache_dir": 75, "mltk_user_settings_path": 75, "mltk_readonli": 75, "mltk_setup_py_dep": 75, "mltk_temp_dir": 75, "py": [76, 244], "object": [76, 247, 248, 250, 251], "tflitemodel": [76, 185, 241], "kerasmodel": 76, "model_path": 77, "brd2601": [78, 95], "brd2204": 78, "brd4166": 78, "brd4186": 78, "parallelaudiodatagener": 81, "parallelprocessparam": [82, 87], "audiofeaturegeneratorset": 84, "parallelimagedatagener": 86, "list_directori": 89, "tf_dataset": 91, "common": [92, 98, 99, 123], "tflm_magic_wand": 93, "magic": 93, "wand": 93, "ambient": 94, "background": [94, 95, 100], "nois": [94, 95, 100], "licens": [94, 103, 140, 233], "esc50": 96, "esc": 96, "environment": 96, "sound": 96, "abstract": [96, 98, 99], "cite": 96, "direction_command": 97, "direct": 97, "ml_commons_keyword": 98, "ml": [98, 99, 249, 255], "ml_commons_voic": 99, "voic": [99, 206], "subset": 99, "speech_commands_v2": 100, "speech": 100, "v2": [100, 105, 123], "histori": 100, "collect": 100, "organ": 100, "process": 100, "citat": 100, "credit": [100, 246], "cifar10": 101, "fashion_mnist": 102, "fashion": 102, "mnist": [102, 103], "rock_paper_scissors_v1": 104, "rock": [104, 105, 248], "paper": [104, 105, 248], "scissor": [104, 105, 248], "v1": [104, 123, 141, 143], "rock_paper_scissors_v2": 105, "acceleromet": 106, "datasetmixin": 110, "evaluatemixin": 113, "mltkdataset": 116, "mltkmodelev": 118, "trainmixin": 120, "load_mltk_model": 121, "load_mltk_model_with_path": 121, "list_mltk_model": 121, "load_tflite_or_keras_model": 121, "load_tflite_model": 121, "weightsandbiasesmixin": 122, "architectur": [123, 144, 249, 251], "depthwiseconv2d": 123, "fulli": 123, "mobilenet": 123, "resnetv1": 123, "10": [123, 240], "tenet": 123, "audio_example1": 124, "report": [124, 126, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154], "audio_tf_dataset": 125, "autoencoder_exampl": 126, "basic_exampl": [127, 244, 253], "basic_tf_dataset_exampl": 128, "binary_classif": 129, "conv1d_exampl": 130, "image_example1": 131, "image_tf_dataset": 132, "siamese_contrast": 134, "fingerprint_signature_gener": 136, "silicon": [137, 233], "lab": [137, 233], "keyword_spotting_alexa": 138, "keyword_spotting_mobilenetv2": 139, "keyword_spotting_on_off": 140, "keyword_spotting_on_off_v2": 141, "chang": [141, 143], "keyword_spotting_pacman": 142, "keyword_spotting_pacman_v2": 143, "keyword_spotting_pacman_v3": 144, "keyword_spotting_with_transfer_learn": 145, "rock_paper_scissor": 146, "tflite_micro_magic_wand": 148, "tflite_micro_speech": 149, "topologi": [149, 150, 151, 153, 154], "perform": [149, 150, 151, 153, 154], "float": [149, 150, 151, 153, 154], "point": [149, 150, 151, 153, 154], "anomaly_detect": 150, "characterist": [150, 153], "image_classif": 151, "tinyml": 152, "keyword_spot": 153, "visual_wake_word": 154, "evaluate_model": 155, "evaluate_classifi": 155, "classifierevaluationresult": 155, "evaluate_autoencod": 155, "autoencoderevaluationresult": 155, "profile_model": 157, "profilingmodelresult": 157, "profilinglayerresult": 157, "quantize_model": 158, "summarize_model": 159, "train_model": 160, "trainingresult": 160, "update_model_paramet": 161, "view_model": 162, "tflitemicroacceler": 163, "tflitemicrolayererror": 165, "tflitemicromodel": 166, "tflitemicromodeldetail": 167, "tflitemicroprofiledlayerresult": 168, "tflitemicro": 169, "tfliteactiv": 170, "tfliteaddlay": 171, "tfliteconv2dlay": 172, "tfliteconv2dlayeropt": 173, "tfliteconvparam": 174, "tflitedepthwiseconv2dlay": 175, "tflitedepthwiseconv2dlayeropt": 176, "tflitedepthwiseconvparam": 177, "tflitedequantizelay": 178, "flatbufferdictionari": 179, "tflitemodelparamet": [179, 187], "flatbuff": 179, "schema": 179, "tflitefullyconnectedlay": 180, "tflitefullyconnectedlayeropt": 181, "tflitefullyconnectedparam": 182, "tflitelay": 184, "tflitepad": 186, "tflitepooling2dlay": 188, "tflitepool2dlayeropt": 189, "tflitepoolparam": 190, "tflitequant": 191, "tflitequantizelay": 192, "tflitereshapelay": 193, "tfliteshap": 194, "tflitetensor": 195, "tflitetransposeconvlay": 196, "tflitetransposeconvlayeropt": 197, "tflitetransposeconvparam": 198, "archive_download": 200, "generationconfig": 202, "audiodatasetgener": 203, "voicepitch": 207, "voicer": 208, "bin2head": 209, "hasher": 212, "jlinkcommandstream": 214, "jlinkdatastream": 215, "j": 216, "jlinkstream": 217, "jlinkstreamopt": 218, "logger": 219, "processpool": 221, "reader": 223, "serialread": 224, "shell_cmd": 225, "signalhandl": 226, "string_format": 227, "system": [228, 249], "uartstream": 230, "tutori": [231, 243, 247, 248, 250, 251, 252, 254, 255], "onli": 232, "singl": 232, "need": 232, "comparison": 232, "other": [232, 233, 245, 246], "solut": 232, "lot": 232, "all": 232, "integr": 232, "cloud": [232, 245, 246, 248, 250, 251, 252, 254, 256], "log": [232, 245], "learn": [233, 247, 248, 250, 251, 252], "toolkit": 233, "inform": [233, 245], "load": [238, 239, 252, 255], "print": [238, 239], "tflm": 238, "each": 238, "tensor": 238, "iter": 239, "meta": 239, "infer": 239, "access": 239, "calcul": 239, "weight": [239, 245, 252], "argument": 241, "exist": 244, "origin": 244, "mnist_convnet": 244, "modifi": [244, 246], "next": [244, 246, 255, 256], "bias": 245, "disclaim": [245, 246], "default": 245, "vast": 246, "ai": 246, "nutshel": 246, "you": 246, "protect": 246, "provid": 246, "bill": 246, "price": 246, "should": 246, "trust": 246, "card": 246, "info": 246, "account": 246, "public": 246, "disk": 246, "space": 246, "login": 246, "cpu": [246, 248, 250], "suggest": 246, "flow": 246, "everyth": 246, "cli": 246, "thi": [247, 248, 250, 251, 252, 254, 255], "siames": 247, "network": [247, 248], "pair": 247, "loss": 247, "function": 247, "determin": [247, 249], "id": [248, 255], "convolut": 248, "neural": 248, "label": 248, "necessari": [248, 250], "defin": [248, 250], "constraint": 248, "accuraci": [248, 250], "deploi": [248, 250], "alexa": [249, 256], "prerequisit": [249, 251], "efr32xg24": 249, "analog": 249, "speaker": 249, "amplifi": 249, "pinout": 249, "neg": [249, 256], "balanc": 249, "frontend": 249, "baud": 249, "On": 250, "off": 250, "tl": 250, "dr": 250, "acquir": 250, "repres": 250, "engin": 250, "edg": 250, "detect": [250, 252], "time": 250, "dsp": 250, "live": 251, "tradeoff": 251, "modul": 251, "firmwar": 251, "webpag": 251, "transfer": 252, "concept": 252, "base": 252, "descript": [252, 254], "small": 252, "valu": 252, "learningrateschedul": 252, "initi": 252, "unknown_class_percentag": 252, "adjust": 254, "onnx": 255, "convers": 255, "consider": 255, "map": 255, "channel": 255, "first": 255, "last": 255, "depend": 255, "saniti": 255, "check": 255, "simplifi": 255, "openvino": 255, "intermedi": 255, "real": 256, "peopl": 256, "languag": 256, "cost": 256, "platform": 256, "gcp": 256, "microsoft": 256, "azur": 256, "amazon": 256, "servic": 256, "aw": 256}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"UART Stream Data Test": [[0, "uart-stream-data-test"]], "Setup Steps": [[0, "setup-steps"]], "Audio Feature Generator": [[1, "audio-feature-generator"]], "Overview": [[1, "overview"], [60, "overview"], [61, "overview"], [62, "overview"], [63, "overview"], [65, "overview"], [67, "overview"], [68, "overview"], [69, "overview"], [70, "overview"], [71, "overview"], [72, "overview"], [79, "overview"], [98, "overview"], [99, "overview"], [233, "overview"], [246, "overview"], [247, "overview"], [248, "overview"], [250, "overview"], [251, "overview"], [253, "overview"], [254, "overview"], [255, "overview"], [256, "overview"]], "Benefits": [[1, "benefits"]], "Gecko SDK Component": [[1, "gecko-sdk-component"]], "Source Code": [[1, "source-code"], [1, "id1"], [42, "source-code"], [45, "source-code"], [47, "source-code"], [48, "source-code"]], "MLTK C++ Python Wrapper": [[1, "mltk-c-python-wrapper"]], "Usage": [[1, "usage"], [4, "usage"], [6, "usage"], [8, "usage"], [10, "usage"], [12, "usage"], [15, "usage"], [17, "usage"], [19, "usage"], [21, "usage"], [23, "usage"], [25, "usage"], [27, "usage"], [29, "usage"], [30, "usage"], [64, "usage"]], "Audio Visualizer Utility": [[1, "audio-visualizer-utility"]], "Audio Utilities": [[2, "audio-utilities"]], "Audio Classification Utility": [[2, "audio-classification-utility"]], "Classify using PC Microphone": [[2, "classify-using-pc-microphone"]], "Classify using PC Microphone with simulated latency": [[2, "classify-using-pc-microphone-with-simulated-latency"]], "Classify using PC Microphone and record audio": [[2, "classify-using-pc-microphone-and-record-audio"]], "Classify using PC Microphone and dump spectrograms": [[2, "classify-using-pc-microphone-and-dump-spectrograms"]], "Classify using development board\u2019s microphone": [[2, "classify-using-development-board-s-microphone"]], "Record audio from development board\u2019s microphone": [[2, "record-audio-from-development-board-s-microphone"]], "Dump spectrograms generated by development board": [[2, "dump-spectrograms-generated-by-development-board"]], "Update AudioFeatureGenerator parameters": [[2, "update-audiofeaturegenerator-parameters"]], "Audio Visualization Utility": [[2, "audio-visualization-utility"]], "Synthetic Audio Dataset Generator": [[2, "synthetic-audio-dataset-generator"]], "Keyword Spotting Overview": [[3, "keyword-spotting-overview"]], "classify_audio": [[4, "classify-audio"]], "Additional Documentation": [[4, "additional-documentation"], [6, "additional-documentation"], [8, "additional-documentation"], [10, "additional-documentation"], [12, "additional-documentation"], [15, "additional-documentation"], [17, "additional-documentation"], [19, "additional-documentation"], [21, "additional-documentation"], [23, "additional-documentation"], [25, "additional-documentation"], [27, "additional-documentation"], [29, "additional-documentation"], [30, "additional-documentation"]], "classify_image": [[6, "classify-image"]], "commander": [[8, "commander"], [77, "commander"]], "evaluate": [[10, "evaluate"]], "fingerprint_reader": [[12, "fingerprint-reader"]], "Command-Line": [[14, "command-line"]], "Command Basics": [[14, "command-basics"]], "Enable Python Virtual Environment": [[14, "enable-python-virtual-environment"]], "Command Format": [[14, "command-format"]], "Help": [[14, "help"]], "Supported Operations": [[14, "supported-operations"]], "profile": [[15, "profile"]], "quantize": [[17, "quantize"]], "ssh": [[19, "ssh"], [77, "ssh"]], "summarize": [[21, "summarize"]], "tensorboard": [[23, "tensorboard"]], "train": [[25, "train"]], "update_params": [[27, "update-params"]], "view": [[29, "view"]], "view_audio": [[30, "view-audio"]], "C++ Build Options": [[33, "c-build-options"]], "MLTK_CMAKE_LOG_LEVEL": [[33, "mltk-cmake-log-level"]], "MLTK_PLATFORM_NAME": [[33, "mltk-platform-name"]], "TFLITE_MICRO_ACCELERATOR": [[33, "tflite-micro-accelerator"], [37, "tflite-micro-accelerator"], [39, "tflite-micro-accelerator"], [41, "tflite-micro-accelerator"]], "MLTK_TARGET": [[33, "mltk-target"]], "MLTK_ENABLE_DEBUG_INFO_IN_RELEASE_BUILDS": [[33, "mltk-enable-debug-info-in-release-builds"]], "MLTK_ENABLE_OUTPUT_DISASSEMBLY": [[33, "mltk-enable-output-disassembly"]], "MODEL_PROFILER_MODEL": [[33, "model-profiler-model"], [41, "model-profiler-model"]], "AUDIO_CLASSIFIER_MODEL": [[33, "audio-classifier-model"]], "MLTK_RUN_MODEL_FROM_RAM": [[33, "mltk-run-model-from-ram"], [41, "mltk-run-model-from-ram"]], "Command-Line Development": [[34, "command-line-development"]], "Install Tools": [[34, "install-tools"], [43, "install-tools"], [44, "install-tools"]], "0) Setup OS": [[34, "setup-os"], [43, "setup-os"], [44, "setup-os"]], "1) Install CMake": [[34, "install-cmake"], [43, "install-cmake"], [44, "install-cmake"]], "2) Install 7-Zip": [[34, "install-7-zip"], [43, "install-7-zip"], [44, "install-7-zip"]], "3) Install Python": [[34, "install-python"], [43, "install-python"], [44, "install-python"]], "4) Install GIT": [[34, "install-git"], [43, "install-git"]], "5) Clone the MLTK repository": [[34, "clone-the-mltk-repository"]], "Build Sequence": [[34, "build-sequence"]], "1) Configure Build Settings": [[34, "configure-build-settings"]], "2) Configure CMake Project": [[34, "configure-cmake-project"]], "3) Build CMake Project for a specific target": [[34, "build-cmake-project-for-a-specific-target"]], "4) Run the output executable": [[34, "run-the-output-executable"]], "Example Applications": [[34, "example-applications"], [43, "example-applications"], [44, "example-applications"]], "Python Wrappers": [[34, "python-wrappers"], [42, "python-wrappers"], [44, "python-wrappers"]], "Audio Classifier": [[35, "audio-classifier"]], "Quick Links": [[35, "quick-links"], [36, "quick-links"], [37, "quick-links"], [38, "quick-links"], [39, "quick-links"], [41, "quick-links"], [245, "quick-links"], [246, "quick-links"], [247, "quick-links"], [248, "quick-links"], [249, "quick-links"], [250, "quick-links"], [251, "quick-links"], [252, "quick-links"], [254, "quick-links"], [255, "quick-links"], [256, "quick-links"], [256, "id1"], [256, "id3"], [256, "id4"]], "Behavior": [[35, "behavior"], [36, "behavior"], [37, "behavior"], [39, "behavior"]], "Updating the model": [[35, "updating-the-model"], [36, "updating-the-model"], [37, "updating-the-model"], [39, "updating-the-model"], [41, "updating-the-model"]], "via Simplicity Studio": [[35, "via-simplicity-studio"], [36, "via-simplicity-studio"], [37, "via-simplicity-studio"], [39, "via-simplicity-studio"], [41, "via-simplicity-studio"]], "via classify_audio Command": [[35, "via-classify-audio-command"]], "via CMake": [[35, "via-cmake"], [36, "via-cmake"], [37, "via-cmake"], [39, "via-cmake"], [41, "via-cmake"]], "Build, Run, Debug": [[35, "build-run-debug"], [36, "build-run-debug"], [37, "build-run-debug"], [38, "build-run-debug"], [39, "build-run-debug"], [41, "build-run-debug"]], "Simplicity Studio": [[35, "simplicity-studio"], [36, "simplicity-studio"], [37, "simplicity-studio"], [38, "simplicity-studio"], [39, "simplicity-studio"], [41, "simplicity-studio"], [52, "simplicity-studio"]], "Visual Studio Code": [[35, "visual-studio-code"], [36, "visual-studio-code"], [37, "visual-studio-code"], [38, "visual-studio-code"], [39, "visual-studio-code"], [41, "visual-studio-code"]], "Command-line": [[35, "command-line"], [36, "command-line"], [37, "command-line"], [38, "command-line"], [39, "command-line"], [41, "command-line"]], "Dumping audio & spectrograms to PC": [[35, "dumping-audio-spectrograms-to-pc"]], "Model Parameters": [[35, "model-parameters"], [36, "model-parameters"], [62, "model-parameters"], [247, "model-parameters"], [248, "model-parameters"], [250, "model-parameters"]], "Modifications": [[35, "modifications"]], "CMake Variables": [[35, "cmake-variables"]], "VERBOSE": [[35, "verbose"]], "WINDOW_MS": [[35, "window-ms"]], "THRESHOLD": [[35, "threshold"]], "SUPPRESSION_MS": [[35, "suppression-ms"]], "COUNT": [[35, "count"]], "VOLUME_GAIN": [[35, "volume-gain"]], "LATENCY_MS": [[35, "latency-ms"]], "AUDIO_CLASSIFIER_ENABLE_AUDIO_IO": [[35, "audio-classifier-enable-audio-io"]], "Additional Reading": [[35, "additional-reading"], [36, "additional-reading"]], "BLE Audio Classifier": [[36, "ble-audio-classifier"]], "Pac-Man Demo": [[36, "pac-man-demo"]], "Fingerprint Authenticator": [[37, "fingerprint-authenticator"]], "Video": [[37, "video"], [39, "video"]], "State Diagram": [[37, "state-diagram"]], "Signature Generation Model": [[37, "signature-generation-model"]], "via fingeprint_reader Command": [[37, "via-fingeprint-reader-command"]], "Hardware Setup": [[37, "hardware-setup"], [39, "hardware-setup"]], "Dumping images to PC": [[37, "dumping-images-to-pc"], [39, "dumping-images-to-pc"]], "Build Settings": [[37, "build-settings"], [39, "build-settings"], [41, "build-settings"]], "FINGERPRINT_AUTHENTICATOR_MODEL": [[37, "fingerprint-authenticator-model"]], "Hello World": [[38, "hello-world"]], "Image Classifier": [[39, "image-classifier"]], "Classification Model": [[39, "classification-model"]], "Model Input": [[39, "model-input"]], "Model Input Normalization": [[39, "model-input-normalization"]], "Model Output": [[39, "model-output"]], "via classify_image Command": [[39, "via-classify-image-command"]], "via update_params command": [[39, "via-update-params-command"], [41, "via-update-params-command"]], "IMAGE_CLASSIFIER_MODEL": [[39, "image-classifier-model"]], "C++ Examples": [[40, "c-examples"]], "Model Profiler": [[41, "model-profiler"], [63, "model-profiler"], [248, "model-profiler"], [250, "model-profiler"]], "MODEL_PROFILER_GENERATE_OP_RESOLVER_HEADER": [[41, "model-profiler-generate-op-resolver-header"]], "MODEL_PROFILER_MODEL_MEMORY_SECTION": [[41, "model-profiler-model-memory-section"]], "MODEL_PROFILER_RUNTIME_MEMORY_SIZE": [[41, "model-profiler-runtime-memory-size"]], "MODEL_PROFILER_RUNTIME_MEMORY_SECTION": [[41, "model-profiler-runtime-memory-section"]], "TFLITE_MICRO_ACCELERATOR_PROFILER_ENABLED": [[41, "tflite-micro-accelerator-profiler-enabled"]], "MLTK_RUNTIME_MEMORY_SIZE": [[41, "mltk-runtime-memory-size"]], "TFLITE_MICRO_RECORDER_ENABLED": [[41, "tflite-micro-recorder-enabled"]], "C++ Development": [[42, "c-development"]], "Development Modes": [[42, "development-modes"]], "Examples": [[42, "examples"], [67, "examples"]], "Simplicity Studio Development": [[43, "simplicity-studio-development"]], "5) Install Simplicity Studio 5": [[43, "install-simplicity-studio-5"]], "Install MLTK": [[43, "install-mltk"], [44, "install-mltk"]], "1) Clone the MLTK repository": [[43, "clone-the-mltk-repository"], [44, "clone-the-mltk-repository"]], "2) Run the install script": [[43, "run-the-install-script"], [44, "run-the-install-script"]], "3) Activate the MLTK Python virtual environment": [[43, "activate-the-mltk-python-virtual-environment"], [44, "activate-the-mltk-python-virtual-environment"]], "Install the MLTK into the Gecko SDK": [[43, "install-the-mltk-into-the-gecko-sdk"]], "Add the MLTK Gecko SDK to Simplicity Studio": [[43, "add-the-mltk-gecko-sdk-to-simplicity-studio"]], "Visual Studio Code Development": [[44, "visual-studio-code-development"]], "4) Install Segger GDB Debug Server": [[44, "install-segger-gdb-debug-server"]], "5) Install a Serial Terminal": [[44, "install-a-serial-terminal"]], "6) Install GIT": [[44, "install-git"]], "7) Windows: Install the C++ Redistributable Package": [[44, "windows-install-the-c-redistributable-package"]], "VSCode Setup": [[44, "vscode-setup"]], "1) Install VSCode": [[44, "install-vscode"]], "2) Open the MLTK VSCode workspace": [[44, "open-the-mltk-vscode-workspace"]], "3) Install the recommended extensions": [[44, "install-the-recommended-extensions"]], "4) Select the Python Interpreter": [[44, "select-the-python-interpreter"]], "Build for Windows or Linux": [[44, "build-for-windows-or-linux"]], "1) Optionally create file: user_options.cmake": [[44, "optionally-create-file-user-options-cmake"]], "2) Select the CMake Kit": [[44, "select-the-cmake-kit"]], "3) Configure the CMake Project": [[44, "configure-the-cmake-project"], [44, "id1"]], "4) Select the build type and build target": [[44, "select-the-build-type-and-build-target"], [44, "id2"]], "5) Build and run application": [[44, "build-and-run-application"]], "6) Or debug application": [[44, "or-debug-application"]], "Build for embedded": [[44, "build-for-embedded"]], "0) Configure Serial Terminal": [[44, "configure-serial-terminal"]], "1) Create file: user_options.cmake": [[44, "create-file-user-options-cmake"]], "2) Select the MLTK-ARM-GCC CMake Kit": [[44, "select-the-mltk-arm-gcc-cmake-kit"]], "5) Build, download, and run application": [[44, "build-download-and-run-application"]], "6) Build, download, and debug application": [[44, "build-download-and-debug-application"]], "AudioFeatureGenerator Python Wrapper": [[45, "audiofeaturegenerator-python-wrapper"]], "Additional Links": [[45, "additional-links"], [47, "additional-links"], [48, "additional-links"]], "Building the Wrapper": [[45, "building-the-wrapper"], [47, "building-the-wrapper"], [48, "building-the-wrapper"]], "Pre-built": [[45, "pre-built"], [47, "pre-built"], [48, "pre-built"]], "Automatic Build": [[45, "automatic-build"], [47, "automatic-build"], [48, "automatic-build"]], "Manual build via MLTK command": [[45, "manual-build-via-mltk-command"], [47, "manual-build-via-mltk-command"], [48, "manual-build-via-mltk-command"]], "Manual build via CMake": [[45, "manual-build-via-cmake"], [47, "manual-build-via-cmake"], [48, "manual-build-via-cmake"]], "C++ Python Wrappers": [[46, "c-python-wrappers"]], "MVP Python Wrapper": [[47, "mvp-python-wrapper"]], "Tensorflow-Lite Micro Python Wrapper": [[48, "tensorflow-lite-micro-python-wrapper"]], "API Examples": [[49, "api-examples"]], "How can I debug my model during training?": [[50, "how-can-i-debug-my-model-during-training"]], "How can I reduce my model\u2019s size?": [[51, "how-can-i-reduce-my-model-s-size"]], "What are the model resource requirements?": [[51, "what-are-the-model-resource-requirements"]], "Reduce model input size": [[51, "reduce-model-input-size"]], "Use int8 model input data type": [[51, "use-int8-model-input-data-type"]], "Reduce Filter Count": [[51, "reduce-filter-count"]], "Increase Strides": [[51, "increase-strides"]], "Decrease kernel sizes": [[51, "decrease-kernel-sizes"]], "Reduce FullyConnected units": [[51, "reduce-fullyconnected-units"]], "Use pooling layers": [[51, "use-pooling-layers"]], "How do I run my model on an embedded device?": [[52, "how-do-i-run-my-model-on-an-embedded-device"]], "CMake": [[52, "cmake"]], "Command line": [[52, "command-line"]], "Frequently Asked Questions": [[53, "frequently-asked-questions"]], "Linux: Why isn\u2019t the GPU working?": [[54, "linux-why-isn-t-the-gpu-working"]], "Where is my trained model?": [[55, "where-is-my-trained-model"]], "Why does the Keras (.h5) model work during evaluation but the TF-Lite (.tflite) does not?": [[56, "why-does-the-keras-h5-model-work-during-evaluation-but-the-tf-lite-tflite-does-not"]], "Why is the model not returning correct results on the embedded device?": [[57, "why-is-the-model-not-returning-correct-results-on-the-embedded-device"]], "Input Data Preprocessing": [[57, "input-data-preprocessing"]], "Input Data Type": [[57, "input-data-type"]], "Hint: Just use float32": [[57, "hint-just-use-float32"]], "Windows: I am seeing a DLL error when importing Tensorflow": [[58, "windows-i-am-seeing-a-dll-error-when-importing-tensorflow"]], "Your setup is missing a required DLL": [[58, "your-setup-is-missing-a-required-dll"]], "Your setup requires the NVIDIA CUDA driver": [[58, "your-setup-requires-the-nvidia-cuda-driver"]], "Modeling Guides": [[59, "modeling-guides"]], "Model Archive File": [[60, "model-archive-file"]], "Contents": [[60, "contents"], [245, "contents"], [246, "contents"]], "Directory Structure": [[60, "directory-structure"]], "Model Evaluation": [[61, "model-evaluation"], [248, "model-evaluation"], [250, "model-evaluation"]], "Quick Reference": [[61, "quick-reference"], [62, "quick-reference"], [63, "quick-reference"], [65, "quick-reference"], [68, "quick-reference"], [69, "quick-reference"], [70, "quick-reference"], [71, "quick-reference"], [72, "quick-reference"], [76, "quick-reference"]], "Non-Quantized vs Quantized Model Evaluation": [[61, "non-quantized-vs-quantized-model-evaluation"]], "Model Profiling vs Model Evaluation": [[61, "model-profiling-vs-model-evaluation"]], "Model Specification": [[61, "model-specification"], [67, "model-specification"], [69, "model-specification"], [124, "model-specification"], [125, "model-specification"], [126, "model-specification"], [127, "id1"], [128, "id1"], [129, "model-specification"], [130, "model-specification"], [131, "model-specification"], [132, "model-specification"], [134, "model-specification"], [136, "model-specification"], [138, "model-specification"], [139, "model-specification"], [140, "model-specification"], [141, "model-specification"], [142, "model-specification"], [143, "model-specification"], [144, "model-specification"], [145, "model-specification"], [146, "model-specification"], [148, "model-specification"], [149, "model-specification"], [150, "model-specification"], [151, "model-specification"], [153, "model-specification"], [154, "model-specification"], [250, "model-specification"], [254, "model-specification"]], "Evaluation Results": [[61, "evaluation-results"]], "EvaluateClassifierMixin": [[61, "evaluateclassifiermixin"], [112, "evaluateclassifiermixin"]], "Confusion Matrix": [[61, "confusion-matrix"]], "ROC": [[61, "roc"]], "Precision vs Recall": [[61, "precision-vs-recall"]], "True Positive Rate": [[61, "true-positive-rate"]], "False Positive Rate": [[61, "false-positive-rate"]], "EvaluateAutoEncoderMixin": [[61, "evaluateautoencodermixin"], [111, "evaluateautoencodermixin"]], "Command": [[61, "command"], [62, "command"], [63, "command"], [65, "command"], [68, "command"], [69, "command"], [71, "command"], [72, "command"], [248, "command"], [250, "command"]], "Example 1: Evaluate Classification .h5 Model": [[61, "example-1-evaluate-classification-h5-model"], [234, "example-1-evaluate-classification-h5-model"]], "Example 2: Evaluate Classification .tflite Model": [[61, "example-2-evaluate-classification-tflite-model"], [234, "example-2-evaluate-classification-tflite-model"]], "Example 3: Evaluate Auto-Encoder .h5 Model": [[61, "example-3-evaluate-auto-encoder-h5-model"], [234, "example-3-evaluate-auto-encoder-h5-model"]], "Python API": [[61, "python-api"], [62, "python-api"], [63, "python-api"], [65, "python-api"], [68, "python-api"], [69, "python-api"], [72, "python-api"]], "Parameter Basics": [[62, "parameter-basics"]], "Viewing Parameters": [[62, "viewing-parameters"]], "General Parameters": [[62, "general-parameters"]], "Model Mixins": [[62, "model-mixins"]], "AudioDatasetMixin": [[62, "audiodatasetmixin"], [109, "audiodatasetmixin"]], "ImageDatasetMixin": [[62, "imagedatasetmixin"], [114, "imagedatasetmixin"]], "Custom Parameters": [[62, "custom-parameters"]], "Add Via Model Script": [[62, "add-via-model-script"]], "Add Via Command/API": [[62, "add-via-command-api"]], "Example 1: Update model specification": [[62, "example-1-update-model-specification"], [241, "example-1-update-model-specification"]], "Example 2: Update with command-line": [[62, "example-2-update-with-command-line"]], "Example 3: Update with .json file": [[62, "example-3-update-with-json-file"]], "Profiling Metrics": [[63, "profiling-metrics"]], "Entire Model Metrics": [[63, "entire-model-metrics"]], "Per Layer Metrics": [[63, "per-layer-metrics"]], "Modes of Operation": [[63, "modes-of-operation"]], "Basic Simulator Mode": [[63, "basic-simulator-mode"]], "Hardware Simulator Mode": [[63, "hardware-simulator-mode"]], "Physical Device Mode": [[63, "physical-device-mode"]], "Example 1: Profile in basic simulator": [[63, "example-1-profile-in-basic-simulator"]], "Example 2: Profile in MVP hardware simulator": [[63, "example-2-profile-in-mvp-hardware-simulator"]], "Example 3: Profile on physical device using MVP hardware accelerator": [[63, "example-3-profile-on-physical-device-using-mvp-hardware-accelerator"]], "Example 4: Profile model before training": [[63, "example-4-profile-model-before-training"], [235, "example-4-profile-model-before-training"]], "Model Profiler Utility": [[64, "model-profiler-utility"]], "Download": [[64, "download"]], "Saving the results": [[64, "saving-the-results"]], "Local HTTP server options": [[64, "local-http-server-options"]], "Model Quantization": [[65, "model-quantization"]], "Tensorflow-Lite Converter Settings": [[65, "tensorflow-lite-converter-settings"], [67, "tensorflow-lite-converter-settings"]], "optimizations": [[65, "optimizations"]], "supported_ops": [[65, "supported-ops"]], "inference_input_type": [[65, "inference-input-type"]], "inference_output_type": [[65, "inference-output-type"]], "representative_dataset": [[65, "representative-dataset"]], "Example 1: Update .tflite in model archive": [[65, "example-1-update-tflite-in-model-archive"], [236, "example-1-update-tflite-in-model-archive"]], "Model Search Path": [[66, "model-search-path"]], "Model Name": [[67, "model-name"]], "Discoverable Models": [[67, "discoverable-models"]], "MltkModel Class Instance": [[67, "mltkmodel-class-instance"]], "Specification Sections": [[67, "specification-sections"]], "Model Layout": [[67, "model-layout"], [69, "model-layout"]], "Note about hardcoding model layer parameters": [[67, "note-about-hardcoding-model-layer-parameters"], [69, "note-about-hardcoding-model-layer-parameters"]], "General Settings": [[67, "general-settings"]], "Basic Training Settings": [[67, "basic-training-settings"]], "Training Keras Callback Settings": [[67, "training-keras-callback-settings"]], "Basic Dataset Settings": [[67, "basic-dataset-settings"]], "Dataset Augmentation Settings": [[67, "dataset-augmentation-settings"]], "Tensorflow Dataset API": [[67, "tensorflow-dataset-api"]], "Evaluation Settings": [[67, "evaluation-settings"]], "Additional Parameters": [[67, "additional-parameters"]], "Model Summary": [[68, "model-summary"], [124, "model-summary"], [126, "model-summary"], [129, "model-summary"], [130, "model-summary"], [131, "model-summary"], [134, "model-summary"], [136, "model-summary"], [138, "model-summary"], [139, "model-summary"], [140, "model-summary"], [141, "model-summary"], [142, "model-summary"], [143, "model-summary"], [144, "model-summary"], [145, "model-summary"], [146, "model-summary"], [148, "model-summary"], [149, "model-summary"], [150, "model-summary"], [151, "model-summary"], [153, "model-summary"], [154, "model-summary"], [248, "model-summary"], [250, "model-summary"]], "Keras Model vs Tensorflow-Lite Model Summary": [[68, "keras-model-vs-tensorflow-lite-model-summary"]], "Example 1: Summarize Keras model": [[68, "example-1-summarize-keras-model"], [237, "example-1-summarize-keras-model"]], "Example 2: Summarize Tensorflow-Lite model": [[68, "example-2-summarize-tensorflow-lite-model"], [237, "example-2-summarize-tensorflow-lite-model"]], "Example 3: Summarize external Tensorflow-Lite model": [[68, "example-3-summarize-external-tensorflow-lite-model"], [237, "example-3-summarize-external-tensorflow-lite-model"]], "Example 4: Summarize model before training": [[68, "example-4-summarize-model-before-training"], [237, "example-4-summarize-model-before-training"]], "Model Training": [[69, "model-training"], [248, "model-training"], [250, "model-training"]], "MltkModel Instance": [[69, "mltkmodel-instance"]], "Training Output": [[69, "training-output"]], "Example 1: Train as a \u201cdry run\u201d": [[69, "example-1-train-as-a-dry-run"], [240, "example-1-train-as-a-dry-run"]], "Example 2: Train for 100 epochs": [[69, "example-2-train-for-100-epochs"]], "Example 3: Resume Training": [[69, "example-3-resume-training"]], "Model Training Monitor": [[70, "model-training-monitor"]], "1) Configure the Tensorboard callback": [[70, "configure-the-tensorboard-callback"], [70, "id1"]], "2) Train the model": [[70, "train-the-model"]], "3) Start Tensorboard": [[70, "start-tensorboard"]], "Model Training Profiler": [[70, "model-training-profiler"]], "Troubleshoot: Profile tab does not appear": [[70, "troubleshoot-profile-tab-does-not-appear"]], "Run Tensorboard from remote SSH session": [[70, "run-tensorboard-from-remote-ssh-session"]], "2) Train the model on the remote machine": [[70, "train-the-model-on-the-remote-machine"]], "3) Start Tensorboard on the remote machine": [[70, "start-tensorboard-on-the-remote-machine"]], "4) Open a reverse SSH tunnel on the local machine": [[70, "open-a-reverse-ssh-tunnel-on-the-local-machine"]], "5) Open http://localhost:6002 in your web-browser": [[70, "open-http-localhost-6002-in-your-web-browser"]], "Model Training via SSH": [[71, "model-training-via-ssh"]], "SSH Connection": [[71, "ssh-connection"]], "Installing an SSH client": [[71, "installing-an-ssh-client"]], "Windows": [[71, "windows"]], "Linux": [[71, "linux"]], "Generating a Keypair": [[71, "generating-a-keypair"]], "Additional Resources": [[71, "additional-resources"]], "Command sequence": [[71, "command-sequence"]], "Settings": [[71, "settings"], [77, "settings"]], "Remote Working Directory": [[71, "remote-working-directory"]], "Hostname": [[71, "hostname"]], "Port": [[71, "port"]], "Username": [[71, "username"]], "Key Filename": [[71, "key-filename"]], "Environment": [[71, "environment"]], "Upload Files": [[71, "upload-files"]], "Startup Commands": [[71, "startup-commands"]], "Download Files": [[71, "download-files"]], "Shutdown Commands": [[71, "shutdown-commands"]], "Sync Local MLTK": [[71, "sync-local-mltk"]], "Settings Locations": [[71, "settings-locations"]], "Command-line options": [[71, "command-line-options"]], "\u2013host": [[71, "host"]], "\u2013port": [[71, "id1"]], "\u2013identity_file": [[71, "identity-file"]], "SshMixin": [[71, "sshmixin"], [119, "sshmixin"]], "Example": [[71, "example"], [71, "id2"], [71, "id3"], [77, "example"]], "~/.mltk/user_settings.yaml": [[71, "mltk-user-settings-yaml"]], "~/.ssh/config": [[71, "ssh-config"]], "Command Examples": [[71, "command-examples"]], "Example 1: Train with settings configured in user_settings.yaml": [[71, "example-1-train-with-settings-configured-in-user-settings-yaml"]], "Example 2: Train with settings on command-line": [[71, "example-2-train-with-settings-on-command-line"]], "Example 3: Train without wait for results": [[71, "example-3-train-without-wait-for-results"]], "Example 4: Retrieve results from previous training session": [[71, "example-4-retrieve-results-from-previous-training-session"]], "Example 5: Train new model, and forcefully discard previous": [[71, "example-5-train-new-model-and-forcefully-discard-previous"]], "Model Visualizer": [[72, "model-visualizer"]], "Example 1: View Keras model": [[72, "example-1-view-keras-model"], [242, "example-1-view-keras-model"]], "Example 2: View Tensorflow-Lite model": [[72, "example-2-view-tensorflow-lite-model"], [242, "example-2-view-tensorflow-lite-model"]], "Example 3: View external Tensorflow-Lite model": [[72, "example-3-view-external-tensorflow-lite-model"], [242, "example-3-view-external-tensorflow-lite-model"]], "Example 4: View model before training": [[72, "example-4-view-model-before-training"], [242, "example-4-view-model-before-training"]], "Notebook Examples Guide": [[73, "notebook-examples-guide"]], "VSCode Notebooks": [[73, "vscode-notebooks"]], "Google Colab": [[73, "google-colab"], [74, "google-colab"]], "Installation": [[74, "installation"], [233, "installation"]], "Standard Python Package": [[74, "standard-python-package"]], "Update Python Package": [[74, "update-python-package"]], "Local Development": [[74, "local-development"]], "Environment Variables": [[75, "environment-variables"]], "MLTK_MODEL_PATHS": [[75, "mltk-model-paths"]], "MLTK_CACHE_DIR": [[75, "mltk-cache-dir"]], "MLTK_USER_SETTINGS_PATH": [[75, "mltk-user-settings-path"]], "MLTK_READONLY": [[75, "mltk-readonly"]], "MLTK_SETUP_PY_DEPS": [[75, "mltk-setup-py-deps"]], "MLTK_TEMP_DIR": [[75, "mltk-temp-dir"]], "File Types": [[76, "file-types"]], ".tflite: Tensorflow-Lite Model": [[76, "tflite-tensorflow-lite-model"]], ".h5: Keras Model": [[76, "h5-keras-model"]], ".mltk.zip: MLTK Model Archive": [[76, "mltk-zip-mltk-model-archive"]], ".py: Model Specification": [[76, "py-model-specification"]], "Model Object Types": [[76, "model-object-types"]], "MltkModel": [[76, "mltkmodel"], [117, "mltkmodel"]], "TfliteModel": [[76, "tflitemodel"], [185, "tflitemodel"]], "KerasModel": [[76, "kerasmodel"]], "Settings File": [[77, "settings-file"]], "model_paths": [[77, "model-paths"]], "Supported Hardware": [[78, "supported-hardware"]], "BRD2601": [[78, "brd2601"]], "BRD2204": [[78, "brd2204"]], "BRD4166": [[78, "brd4166"]], "BRD4186": [[78, "brd4186"]], "audio": [[80, "module-mltk.core.preprocess.utils.audio"]], "ParallelAudioDataGenerator": [[81, "parallelaudiodatagenerator"]], "ParallelProcessParams": [[82, "parallelprocessparams"], [87, "parallelprocessparams"]], "AudioFeatureGenerator": [[83, "audiofeaturegenerator"]], "AudioFeatureGeneratorSettings": [[84, "audiofeaturegeneratorsettings"]], "image": [[85, "module-mltk.core.preprocess.utils.image"]], "ParallelImageDataGenerator": [[86, "parallelimagedatagenerator"]], "Data Preprocessing": [[88, "data-preprocessing"]], "list_directory": [[89, "module-mltk.core.preprocess.utils.list_directory"]], "normalize": [[90, "module-mltk.core.preprocess.utils.normalize"]], "tf_dataset": [[91, "module-mltk.core.preprocess.utils.tf_dataset"]], "Common Utilities": [[92, "common-utilities"]], "tflm_magic_wand": [[93, "module-mltk.datasets.accelerometer.tflm_magic_wand"]], "Tensorflow-Lite Micro Magic Wand": [[93, "tensorflow-lite-micro-magic-wand"]], "ambient": [[94, "module-mltk.datasets.audio.background_noise.ambient"]], "Generic Background Noise": [[94, "generic-background-noise"]], "License": [[94, "license"], [103, "license"], [140, "license"], [233, "license"]], "brd2601": [[95, "module-mltk.datasets.audio.background_noise.brd2601"]], "BRD2601 Background Noise": [[95, "brd2601-background-noise"]], "esc50": [[96, "module-mltk.datasets.audio.background_noise.esc50"]], "ESC: Dataset for Environmental Sound Classification": [[96, "esc-dataset-for-environmental-sound-classification"]], "Abstract": [[96, "abstract"], [98, "abstract"], [99, "abstract"]], "Citing": [[96, "citing"]], "direction_commands": [[97, "module-mltk.datasets.audio.direction_commands"]], "Direction Commands": [[97, "id1"]], "ml_commons_keywords": [[98, "module-mltk.datasets.audio.mlcommons.ml_commons_keywords"]], "ML Commons Keywords": [[98, "id1"]], "ml_commons_voice": [[99, "module-mltk.datasets.audio.mlcommons.ml_commons_voice"]], "ML Commons Voice Subset": [[99, "ml-commons-voice-subset"]], "speech_commands_v2": [[100, "module-mltk.datasets.audio.speech_commands.speech_commands_v2"]], "Google Speech Commands v2": [[100, "google-speech-commands-v2"]], "History": [[100, "history"]], "Collection": [[100, "collection"]], "Organization": [[100, "organization"]], "Processing": [[100, "processing"]], "Background Noise": [[100, "background-noise"]], "Citations": [[100, "citations"]], "Credits": [[100, "credits"]], "cifar10": [[101, "module-mltk.datasets.image.cifar10"]], "CIFAR10": [[101, "id1"]], "fashion_mnist": [[102, "module-mltk.datasets.image.fashion_mnist"]], "Fashion-MNIST": [[102, "id1"]], "mnist": [[103, "module-mltk.datasets.image.mnist"]], "MNIST": [[103, "id1"]], "rock_paper_scissors_v1": [[104, "module-mltk.datasets.image.rock_paper_scissors_v1"]], "Rock, Paper, Scissors v1": [[104, "id1"]], "rock_paper_scissors_v2": [[105, "module-mltk.datasets.image.rock_paper_scissors_v2"]], "Rock, Paper, Scissors v2": [[105, "id1"]], "Reference Datasets": [[106, "reference-datasets"]], "Audio Datasets": [[106, "audio-datasets"]], "Image Datasets": [[106, "image-datasets"]], "Accelerometer Datasets": [[106, "accelerometer-datasets"]], "API Reference": [[107, "api-reference"], [115, "api-reference"], [164, "api-reference"], [183, "api-reference"], [204, "api-reference"], [216, "api-reference"], [223, "api-reference"], [229, "api-reference"]], "Keras Model": [[108, "keras-model"]], "DatasetMixin": [[110, "datasetmixin"]], "EvaluateMixin": [[113, "evaluatemixin"]], "MLTK Model": [[115, "mltk-model"]], "Example Usage": [[115, "example-usage"], [164, "example-usage"], [183, "example-usage"], [204, "example-usage"], [216, "example-usage"], [223, "example-usage"], [229, "example-usage"]], "MltkDataset": [[116, "mltkdataset"]], "MltkModelEvent": [[118, "mltkmodelevent"]], "TrainMixin": [[120, "trainmixin"]], "Model Utilities": [[121, "model-utilities"]], "load_mltk_model": [[121, "load-mltk-model"]], "load_mltk_model_with_path": [[121, "load-mltk-model-with-path"]], "list_mltk_models": [[121, "list-mltk-models"]], "load_tflite_or_keras_model": [[121, "load-tflite-or-keras-model"]], "load_tflite_model": [[121, "load-tflite-model"]], "WeightsAndBiasesMixin": [[122, "weightsandbiasesmixin"]], "Common Model Architectures": [[123, "common-model-architectures"]], "ARM DepthwiseConv2D": [[123, "arm-depthwiseconv2d"]], "Fully Connected Auto-encoder": [[123, "fully-connected-auto-encoder"]], "MobileNet v1": [[123, "mobilenet-v1"]], "MobileNet v2": [[123, "mobilenet-v2"]], "ResNetv1-10": [[123, "resnetv1-10"]], "TENet": [[123, "tenet"]], "audio_example1": [[124, "audio-example1"]], "Commands": [[124, "commands"], [125, "commands"], [126, "commands"], [127, "commands"], [128, "commands"], [129, "commands"], [130, "commands"], [131, "commands"], [132, "commands"], [134, "commands"], [136, "commands"], [138, "commands"], [139, "commands"], [140, "commands"], [141, "commands"], [142, "commands"], [143, "commands"], [144, "commands"], [145, "commands"], [146, "commands"], [148, "commands"], [149, "commands"], [150, "commands"], [151, "commands"], [153, "commands"], [154, "commands"]], "Model Profiling Report": [[124, "model-profiling-report"], [126, "model-profiling-report"], [131, "model-profiling-report"], [136, "model-profiling-report"], [138, "model-profiling-report"], [139, "model-profiling-report"], [140, "model-profiling-report"], [141, "model-profiling-report"], [142, "model-profiling-report"], [143, "model-profiling-report"], [144, "model-profiling-report"], [145, "model-profiling-report"], [146, "model-profiling-report"], [148, "model-profiling-report"], [149, "model-profiling-report"], [150, "model-profiling-report"], [151, "model-profiling-report"], [153, "model-profiling-report"], [154, "model-profiling-report"]], "Model Diagram": [[124, "model-diagram"], [126, "model-diagram"], [129, "model-diagram"], [130, "model-diagram"], [131, "model-diagram"], [134, "model-diagram"], [136, "model-diagram"], [138, "model-diagram"], [139, "model-diagram"], [140, "model-diagram"], [141, "model-diagram"], [142, "model-diagram"], [143, "model-diagram"], [144, "model-diagram"], [145, "model-diagram"], [146, "model-diagram"], [148, "model-diagram"], [149, "model-diagram"], [150, "model-diagram"], [151, "model-diagram"], [153, "model-diagram"], [154, "model-diagram"]], "audio_tf_dataset": [[125, "audio-tf-dataset"]], "autoencoder_example": [[126, "autoencoder-example"]], "basic_example": [[127, "basic-example"]], "basic_tf_dataset_example": [[128, "basic-tf-dataset-example"]], "binary_classification": [[129, "binary-classification"]], "conv1d_example": [[130, "conv1d-example"]], "image_example1": [[131, "image-example1"]], "image_tf_dataset": [[132, "image-tf-dataset"]], "Example Models": [[133, "example-models"]], "siamese_contrastive": [[134, "siamese-contrastive"]], "Reference Models": [[135, "reference-models"]], "fingerprint_signature_generator": [[136, "fingerprint-signature-generator"]], "Silicon Lab\u2019s Models": [[137, "silicon-lab-s-models"]], "keyword_spotting_alexa": [[138, "keyword-spotting-alexa"]], "Dataset": [[138, "dataset"], [139, "dataset"], [140, "dataset"], [141, "dataset"], [142, "dataset"], [143, "dataset"], [144, "dataset"], [145, "dataset"], [149, "dataset"], [150, "dataset"], [151, "dataset"], [153, "dataset"], [154, "dataset"], [247, "dataset"]], "Preprocessing": [[138, "preprocessing"], [139, "preprocessing"], [140, "preprocessing"], [141, "preprocessing"], [142, "preprocessing"], [143, "preprocessing"], [144, "preprocessing"], [145, "preprocessing"]], "keyword_spotting_mobilenetv2": [[139, "keyword-spotting-mobilenetv2"]], "keyword_spotting_on_off": [[140, "keyword-spotting-on-off"]], "keyword_spotting_on_off_v2": [[141, "keyword-spotting-on-off-v2"]], "Training the Model": [[141, "training-the-model"], [143, "training-the-model"]], "Changes from v1": [[141, "changes-from-v1"], [143, "changes-from-v1"]], "keyword_spotting_pacman": [[142, "keyword-spotting-pacman"]], "keyword_spotting_pacman_v2": [[143, "keyword-spotting-pacman-v2"]], "keyword_spotting_pacman_v3": [[144, "keyword-spotting-pacman-v3"]], "Dataset Summary": [[144, "dataset-summary"]], "Model Architecture": [[144, "model-architecture"]], "keyword_spotting_with_transfer_learning": [[145, "keyword-spotting-with-transfer-learning"]], "rock_paper_scissors": [[146, "rock-paper-scissors"]], "Tensorflow-Lite Micro Models": [[147, "tensorflow-lite-micro-models"]], "tflite_micro_magic_wand": [[148, "tflite-micro-magic-wand"]], "tflite_micro_speech": [[149, "tflite-micro-speech"]], "Model Topology & Training": [[149, "model-topology-training"]], "Performance (floating point model)": [[149, "performance-floating-point-model"], [150, "performance-floating-point-model"], [151, "performance-floating-point-model"], [153, "performance-floating-point-model"], [154, "performance-floating-point-model"]], "Performance (quantized tflite model)": [[149, "performance-quantized-tflite-model"], [150, "performance-quantized-tflite-model"], [151, "performance-quantized-tflite-model"], [153, "performance-quantized-tflite-model"], [154, "performance-quantized-tflite-model"]], "anomaly_detection": [[150, "anomaly-detection"]], "Model Topology": [[150, "model-topology"], [151, "model-topology"], [153, "model-topology"], [154, "model-topology"]], "Spectrogram Characteristics": [[150, "spectrogram-characteristics"], [153, "spectrogram-characteristics"]], "image_classification": [[151, "image-classification"]], "TinyML Models": [[152, "tinyml-models"]], "keyword_spotting": [[153, "keyword-spotting"]], "visual_wake_words": [[154, "visual-wake-words"]], "evaluate_model": [[155, "evaluate-model"]], "evaluate_classifier": [[155, "evaluate-classifier"], [155, "id1"]], "ClassifierEvaluationResults": [[155, "classifierevaluationresults"]], "evaluate_autoencoder": [[155, "evaluate-autoencoder"]], "AutoEncoderEvaluationResults": [[155, "autoencoderevaluationresults"]], "Model Operations": [[156, "model-operations"]], "profile_model": [[157, "profile-model"]], "ProfilingModelResults": [[157, "profilingmodelresults"]], "ProfilingLayerResult": [[157, "profilinglayerresult"]], "quantize_model": [[158, "quantize-model"]], "summarize_model": [[159, "summarize-model"]], "train_model": [[160, "train-model"]], "TrainingResults": [[160, "trainingresults"]], "update_model_parameters": [[161, "update-model-parameters"]], "view_model": [[162, "view-model"]], "TfliteMicroAccelerator": [[163, "tflitemicroaccelerator"]], "Tensorflow-Lite Micro Model": [[164, "tensorflow-lite-micro-model"]], "TfliteMicroLayerError": [[165, "tflitemicrolayererror"]], "TfliteMicroModel": [[166, "tflitemicromodel"]], "TfliteMicroModelDetails": [[167, "tflitemicromodeldetails"]], "TfliteMicroProfiledLayerResult": [[168, "tflitemicroprofiledlayerresult"]], "TfliteMicro": [[169, "tflitemicro"]], "TfliteActivation": [[170, "tfliteactivation"]], "TfliteAddLayer": [[171, "tfliteaddlayer"]], "TfliteConv2dLayer": [[172, "tfliteconv2dlayer"]], "TfliteConv2DLayerOptions": [[173, "tfliteconv2dlayeroptions"]], "TfliteConvParams": [[174, "tfliteconvparams"]], "TfliteDepthwiseConv2dLayer": [[175, "tflitedepthwiseconv2dlayer"]], "TfliteDepthwiseConv2DLayerOptions": [[176, "tflitedepthwiseconv2dlayeroptions"]], "TfliteDepthwiseConvParams": [[177, "tflitedepthwiseconvparams"]], "TfliteDequantizeLayer": [[178, "tflitedequantizelayer"]], "FlatbufferDictionary": [[179, "flatbufferdictionary"]], "TfliteModelParameters Flatbuffer Schema": [[179, "tflitemodelparameters-flatbuffer-schema"]], "TfliteFullyConnectedLayer": [[180, "tflitefullyconnectedlayer"]], "TfliteFullyConnectedLayerOptions": [[181, "tflitefullyconnectedlayeroptions"]], "TfliteFullyConnectedParams": [[182, "tflitefullyconnectedparams"]], "Tensorflow-Lite Model": [[183, "tensorflow-lite-model"]], "TfliteLayer": [[184, "tflitelayer"]], "TflitePadding": [[186, "tflitepadding"]], "TfliteModelParameters": [[187, "tflitemodelparameters"]], "TflitePooling2dLayer": [[188, "tflitepooling2dlayer"]], "TflitePool2DLayerOptions": [[189, "tflitepool2dlayeroptions"]], "TflitePoolParams": [[190, "tflitepoolparams"]], "TfliteQuantization": [[191, "tflitequantization"]], "TfliteQuantizeLayer": [[192, "tflitequantizelayer"]], "TfliteReshapeLayer": [[193, "tflitereshapelayer"]], "TfliteShape": [[194, "tfliteshape"]], "TfliteTensor": [[195, "tflitetensor"]], "TfliteTransposeConvLayer": [[196, "tflitetransposeconvlayer"]], "TfliteTransposeConvLayerOptions": [[197, "tflitetransposeconvlayeroptions"]], "TfliteTransposeConvParams": [[198, "tflitetransposeconvparams"]], "archive": [[199, "module-mltk.utils.archive"]], "archive_downloader": [[200, "module-mltk.utils.archive_downloader"]], "Augmentation": [[201, "augmentation"]], "GenerationConfig": [[202, "generationconfig"]], "AudioDatasetGenerator": [[203, "audiodatasetgenerator"]], "Audio Dataset Generator": [[204, "audio-dataset-generator"]], "Keyword": [[205, "keyword"]], "Voice": [[206, "voice"]], "VoicePitch": [[207, "voicepitch"]], "VoiceRate": [[208, "voicerate"]], "bin2header": [[209, "module-mltk.utils.bin2header"]], "cmake": [[210, "module-mltk.utils.cmake"]], "gpu": [[211, "module-mltk.utils.gpu"]], "hasher": [[212, "module-mltk.utils.hasher"]], "Utilities": [[213, "utilities"]], "JlinkCommandStream": [[214, "jlinkcommandstream"]], "JLinkDataStream": [[215, "jlinkdatastream"]], "J-Link Stream": [[216, "j-link-stream"]], "JlinkStream": [[217, "jlinkstream"]], "JlinkStreamOptions": [[218, "jlinkstreamoptions"]], "logger": [[219, "module-mltk.utils.logger"]], "path": [[220, "module-mltk.utils.path"]], "ProcessPool": [[221, "processpool"]], "python": [[222, "module-mltk.utils.python"]], "Serial Reader": [[223, "serial-reader"]], "SerialReader": [[224, "serialreader"]], "shell_cmd": [[225, "module-mltk.utils.shell_cmd"]], "SignalHandler": [[226, "signalhandler"]], "string_formatting": [[227, "module-mltk.utils.string_formatting"]], "system": [[228, "module-mltk.utils.system"]], "UART Stream": [[229, "uart-stream"]], "UartStream": [[230, "uartstream"]], "Tutorials": [[231, "tutorials"], [243, "tutorials"]], "Why MLTK?": [[232, "why-mltk"]], "Only a single python script and command-line is needed": [[232, "only-a-single-python-script-and-command-line-is-needed"]], "Comparison with other solutions": [[232, "comparison-with-other-solutions"]], "Lots of tools, all optional": [[232, "lots-of-tools-all-optional"]], "C++ Python wrappers": [[232, "c-python-wrappers"]], "Embedded model parameters": [[232, "embedded-model-parameters"]], "Integration with Tensorflow": [[232, "integration-with-tensorflow"]], "Integration with Tensorflow-Lite": [[232, "integration-with-tensorflow-lite"]], "Integration with Tensorflow-Lite Micro": [[232, "integration-with-tensorflow-lite-micro"]], "Integration with the Gecko SDK": [[232, "integration-with-the-gecko-sdk"]], "Support for cloud development": [[232, "support-for-cloud-development"]], "Training via SSH": [[232, "training-via-ssh"]], "Logging to the cloud": [[232, "logging-to-the-cloud"]], "Silicon Labs Machine Learning Toolkit (MLTK)": [[233, "silicon-labs-machine-learning-toolkit-mltk"]], "Other Information": [[233, "other-information"]], "Model Evaluation API Examples": [[234, "model-evaluation-api-examples"]], "Install MLTK Python Package": [[234, "install-mltk-python-package"], [235, "install-mltk-python-package"], [236, "install-mltk-python-package"], [237, "install-mltk-python-package"], [238, "install-mltk-python-package"], [239, "install-mltk-python-package"], [240, "install-mltk-python-package"], [241, "install-mltk-python-package"], [242, "install-mltk-python-package"], [247, "install-mltk-python-package"], [248, "install-mltk-python-package"], [250, "install-mltk-python-package"], [251, "install-mltk-python-package"]], "Import Python Packages": [[234, "import-python-packages"], [235, "import-python-packages"], [236, "import-python-packages"], [237, "import-python-packages"], [238, "import-python-packages"], [239, "import-python-packages"], [240, "import-python-packages"], [241, "import-python-packages"], [242, "import-python-packages"]], "Model Profiler API Examples": [[235, "model-profiler-api-examples"]], "Download .tflite model file": [[235, "download-tflite-model-file"], [238, "download-tflite-model-file"], [239, "download-tflite-model-file"]], "Example 1: Profile .tflite file in basic simulator": [[235, "example-1-profile-tflite-file-in-basic-simulator"]], "Example 2: Profile .tflite file in MVP hardware simulator": [[235, "example-2-profile-tflite-file-in-mvp-hardware-simulator"]], "Example 3: Profile .tflite file on physical device": [[235, "example-3-profile-tflite-file-on-physical-device"]], "Model Quantization API Examples": [[236, "model-quantization-api-examples"]], "Model Summary API Examples": [[237, "model-summary-api-examples"]], "TF-Lite Micro Model API Examples": [[238, "tf-lite-micro-model-api-examples"]], "Example 1: Load model and print summary": [[238, "example-1-load-model-and-print-summary"]], "Example 2: Profile .tflite in TFLM interpreter": [[238, "example-2-profile-tflite-in-tflm-interpreter"]], "Example 3: Record each layers\u2019 input/output tensor": [[238, "example-3-record-each-layers-input-output-tensor"]], "TF-Lite Model API Examples": [[239, "tf-lite-model-api-examples"]], "Example 1: Load .tflite and print summary": [[239, "example-1-load-tflite-and-print-summary"]], "Example 2: Iterate the model layers": [[239, "example-2-iterate-the-model-layers"]], "Example 3: Add meta data to .tflite": [[239, "example-3-add-meta-data-to-tflite"]], "Example 4: Add model parameters to the .tflite": [[239, "example-4-add-model-parameters-to-the-tflite"]], "Example 5: Run inference": [[239, "example-5-run-inference"]], "Example 6: Access calculated layer parameters": [[239, "example-6-access-calculated-layer-parameters"]], "Example 7: Update model weights": [[239, "example-7-update-model-weights"]], "Model Training API Examples": [[240, "model-training-api-examples"]], "Example 2: Train for 10 epochs": [[240, "example-2-train-for-10-epochs"]], "Update Model Parameters API Examples": [[241, "update-model-parameters-api-examples"]], "Example 2: Update with argument": [[241, "example-2-update-with-argument"]], "Example 3: Return TfliteModel instance": [[241, "example-3-return-tflitemodel-instance"]], "Model Visualizer API Examples": [[242, "model-visualizer-api-examples"]], "Add an Existing Script to the MLTK": [[244, "add-an-existing-script-to-the-mltk"]], "Setup": [[244, "setup"]], "Existing Script": [[244, "existing-script"]], "Original mnist_convnet.py": [[244, "original-mnist-convnet-py"]], "MLTK Modifications": [[244, "mltk-modifications"]], "Modified mnist_convnet.py": [[244, "modified-mnist-convnet-py"]], "Run the modified script": [[244, "run-the-modified-script"]], "Run from command-line": [[244, "run-from-command-line"]], "Recommended Modifications": [[244, "recommended-modifications"]], "basic_example.py": [[244, "basic-example-py"]], "Next Steps": [[244, "next-steps"], [246, "next-steps"], [255, "next-steps"], [256, "next-steps"]], "Cloud Logging with Weights & Biases": [[245, "cloud-logging-with-weights-biases"]], "Disclaimer": [[245, "disclaimer"], [246, "disclaimer"]], "Basic Usage": [[245, "basic-usage"]], "Logging Information": [[245, "logging-information"]], "Default Data": [[245, "default-data"]], "Custom Data": [[245, "custom-data"]], "Training and logging in the cloud": [[245, "training-and-logging-in-the-cloud"]], "Other Features": [[245, "other-features"]], "Cloud Training with vast.ai": [[246, "cloud-training-with-vast-ai"]], "About vast.ai": [[246, "about-vast-ai"]], "What is Vast.ai?": [[246, "what-is-vast-ai"]], "How does it work in a nutshell?": [[246, "how-does-it-work-in-a-nutshell"]], "How do you protect my data from other clients?": [[246, "how-do-you-protect-my-data-from-other-clients"]], "How do you protect my data from providers?": [[246, "how-do-you-protect-my-data-from-providers"]], "How does billing work?": [[246, "how-does-billing-work"], [246, "id1"]], "How does pricing work?": [[246, "how-does-pricing-work"]], "Why should I trust vast.ai with my credit card info?": [[246, "why-should-i-trust-vast-ai-with-my-credit-card-info"]], "MLTK Installation": [[246, "mltk-installation"]], "Create an SSH Keypair": [[246, "create-an-ssh-keypair"]], "Create a vast.ai Account": [[246, "create-a-vast-ai-account"]], "Create new account": [[246, "create-new-account"]], "Add public SSH key to account": [[246, "add-public-ssh-key-to-account"]], "Add credit to account": [[246, "add-credit-to-account"]], "Configure instance image": [[246, "configure-instance-image"]], "Configure disk space": [[246, "configure-disk-space"]], "Select a Cloud Machine": [[246, "select-a-cloud-machine"]], "SSH Client Login": [[246, "ssh-client-login"]], "Notes about selecting a machine": [[246, "notes-about-selecting-a-machine"]], "Note about GPU Count": [[246, "note-about-gpu-count"]], "Note about CPU Count": [[246, "note-about-cpu-count"]], "Configure Settings": [[246, "configure-settings"]], "Develop a Model": [[246, "develop-a-model"]], "Suggested Reading": [[246, "suggested-reading"]], "Example Development Flow": [[246, "example-development-flow"]], "Modify the model specification": [[246, "modify-the-model-specification"]], "Note about custom datasets": [[246, "note-about-custom-datasets"]], "Test everything works locally": [[246, "test-everything-works-locally"]], "Profile model locally": [[246, "profile-model-locally"]], "Train Model in Cloud": [[246, "train-model-in-cloud"]], "Start cloud instance": [[246, "start-cloud-instance"]], "Start remote training": [[246, "start-remote-training"]], "Other CLI options": [[246, "other-cli-options"]], "Training Results": [[246, "training-results"]], "Shutdown Cloud Instance": [[246, "shutdown-cloud-instance"]], "Fingerprint Authentication": [[247, "fingerprint-authentication"]], "Demo Video": [[247, "demo-video"], [248, "demo-video"], [249, "demo-video"]], "Objectives": [[247, "objectives"], [248, "objectives"], [250, "objectives"], [251, "objectives"]], "Content": [[247, "content"], [248, "content"], [249, "content"], [250, "content"], [251, "content"], [256, "content"]], "Running this tutorial from a notebook": [[247, "running-this-tutorial-from-a-notebook"], [248, "running-this-tutorial-from-a-notebook"], [250, "running-this-tutorial-from-a-notebook"], [251, "running-this-tutorial-from-a-notebook"], [255, "running-this-tutorial-from-a-notebook"]], "Running this tutorial from the command-line": [[247, "running-this-tutorial-from-the-command-line"], [248, "running-this-tutorial-from-the-command-line"], [250, "running-this-tutorial-from-the-command-line"], [251, "running-this-tutorial-from-the-command-line"]], "Required Hardware": [[247, "required-hardware"], [248, "required-hardware"], [249, "required-hardware"], [251, "required-hardware"]], "Signature Generation Machine Learning Model Overview": [[247, "signature-generation-machine-learning-model-overview"]], "Siamese Networks": [[247, "siamese-networks"]], "Creating the dataset": [[247, "creating-the-dataset"]], "Generating the dataset": [[247, "generating-the-dataset"]], "Data preprocessing": [[247, "data-preprocessing"], [248, "data-preprocessing"]], "Generating fingerprint pairs": [[247, "generating-fingerprint-pairs"]], "Creating the Model": [[247, "creating-the-model"]], "Loss Function": [[247, "loss-function"]], "Saving the model": [[247, "saving-the-model"]], "Train the model": [[247, "train-the-model"], [249, "train-the-model"]], "Evaluating the model": [[247, "evaluating-the-model"]], "Determining the threshold": [[247, "determining-the-threshold"]], "Running the model": [[247, "running-the-model"]], "Using the command-line": [[247, "using-the-command-line"]], "Building the C++ example application": [[247, "building-the-c-example-application"]], "Image Classification - Rock, Paper, Scissors": [[248, "image-classification-rock-paper-scissors"]], "Classification Machine Learning Models Overview": [[248, "classification-machine-learning-models-overview"]], "Class IDs": [[248, "class-ids"]], "Convolution Neural Networks": [[248, "convolution-neural-networks"]], "Creating a Labeled Dataset": [[248, "creating-a-labeled-dataset"]], "Rock, Paper, Scissors Dataset Overview": [[248, "rock-paper-scissors-dataset-overview"]], "Update the Dataset": [[248, "update-the-dataset"]], "Update Sequence": [[248, "update-sequence"]], "Creating the Model Specification": [[248, "creating-the-model-specification"]], "Create the specification script": [[248, "create-the-specification-script"], [250, "create-the-specification-script"]], "Add necessary imports": [[248, "add-necessary-imports"], [250, "add-necessary-imports"]], "Define Model Object": [[248, "define-model-object"], [250, "define-model-object"]], "Configure the general model settings": [[248, "configure-the-general-model-settings"], [250, "configure-the-general-model-settings"]], "Configure the basic training settings": [[248, "configure-the-basic-training-settings"], [250, "configure-the-basic-training-settings"]], "Configure the training callbacks": [[248, "configure-the-training-callbacks"], [250, "configure-the-training-callbacks"]], "Configure the TF-Lite Converter settings": [[248, "configure-the-tf-lite-converter-settings"], [250, "configure-the-tf-lite-converter-settings"]], "Configure the dataset settings": [[248, "configure-the-dataset-settings"], [250, "configure-the-dataset-settings"]], "Configure the data augmentation settings": [[248, "configure-the-data-augmentation-settings"], [250, "configure-the-data-augmentation-settings"]], "Define the model layout": [[248, "define-the-model-layout"], [250, "define-the-model-layout"]], "Model Visualization": [[248, "model-visualization"], [250, "model-visualization"]], "Visualize Keras model": [[248, "visualize-keras-model"], [250, "visualize-keras-model"]], "Visualize TF-Lite model": [[248, "visualize-tf-lite-model"], [250, "visualize-tf-lite-model"]], "Profile in simulator": [[248, "profile-in-simulator"], [250, "profile-in-simulator"]], "Profile on physical device": [[248, "profile-on-physical-device"], [250, "profile-on-physical-device"]], "Note about CPU utilization": [[248, "note-about-cpu-utilization"], [250, "note-about-cpu-utilization"]], "Note about model size and hardware constraints": [[248, "note-about-model-size-and-hardware-constraints"]], "Train as a \u201cdry run\u201d": [[248, "train-as-a-dry-run"], [250, "train-as-a-dry-run"]], "Training locally": [[248, "training-locally"], [250, "training-locally"]], "Train in cloud": [[248, "train-in-cloud"], [250, "train-in-cloud"], [251, "train-in-cloud"], [252, "train-in-cloud"], [254, "train-in-cloud"]], "Note about model accuracy": [[248, "note-about-model-accuracy"], [250, "note-about-model-accuracy"]], "Model Testing": [[248, "model-testing"], [250, "model-testing"]], "Deploying the Model": [[248, "deploying-the-model"], [250, "deploying-the-model"]], "Using the MLTK": [[248, "using-the-mltk"], [250, "using-the-mltk"]], "Keyword Spotting - Alexa": [[249, "keyword-spotting-alexa"]], "Quick start": [[249, "quick-start"]], "System Overview": [[249, "system-overview"]], "Prerequisite Reading": [[249, "prerequisite-reading"], [251, "prerequisite-reading"]], "EFR32xG24 development kit": [[249, "efr32xg24-development-kit"]], "Analog speaker with amplifier": [[249, "analog-speaker-with-amplifier"]], "Pinout": [[249, "pinout"]], "Develop the ML Model": [[249, "develop-the-ml-model"]], "Create the dataset": [[249, "create-the-dataset"]], "Synthetic dataset generation": [[249, "synthetic-dataset-generation"]], "\u201cNegative\u201d class": [[249, "negative-class"]], "Class balance": [[249, "class-balance"]], "Select the model architecture": [[249, "select-the-model-architecture"]], "Determine the audio frontend parameters": [[249, "determine-the-audio-frontend-parameters"]], "Audio visualizer command": [[249, "audio-visualizer-command"]], "AudioFeatureGenerator settings": [[249, "audiofeaturegenerator-settings"]], "Profile the model": [[249, "profile-the-model"]], "Model profiler command": [[249, "model-profiler-command"]], "Data augmentations": [[249, "data-augmentations"]], "Dump augmentations": [[249, "dump-augmentations"]], "Local Training": [[249, "local-training"]], "Remote Training": [[249, "remote-training"]], "Run the trained model": [[249, "run-the-trained-model"]], "Classify audio command": [[249, "classify-audio-command"]], "Run the demo": [[249, "run-the-demo"]], "Build C++ application from source": [[249, "build-c-application-from-source"]], "Increase the BAUD rate": [[249, "increase-the-baud-rate"]], "Keyword Spotting - On/Off": [[250, "keyword-spotting-on-off"]], "Machine Learning and Keyword-Spotting Overview": [[250, "machine-learning-and-keyword-spotting-overview"]], "Dataset Selection and Preprocessing Parameters": [[250, "dataset-selection-and-preprocessing-parameters"]], "TL;DR": [[250, "tl-dr"]], "Acquire a Representative Dataset": [[250, "acquire-a-representative-dataset"]], "Feature Engineering": [[250, "feature-engineering"]], "Featuring Engineering on the Edge": [[250, "featuring-engineering-on-the-edge"]], "Data Augmentation": [[250, "data-augmentation"]], "Configure the keywords to detect": [[250, "configure-the-keywords-to-detect"]], "Configure the AudioFeatureGenerator settings": [[250, "configure-the-audiofeaturegenerator-settings"]], "Audio Visualization": [[250, "audio-visualization"]], "Note about training time": [[250, "note-about-training-time"]], "Classify audio on PC": [[250, "classify-audio-on-pc"]], "Classify audio on device": [[250, "classify-audio-on-device"]], "Note about DSP": [[250, "note-about-dsp"]], "Record audio and spectrograms from device": [[250, "record-audio-and-spectrograms-from-device"]], "Using Simplicity Studio": [[250, "using-simplicity-studio"]], "Keyword Spotting - Pac-Man": [[251, "keyword-spotting-pac-man"]], "Live Demo": [[251, "live-demo"]], "Creating the Machine Learning Model": [[251, "creating-the-machine-learning-model"]], "Select the dataset": [[251, "select-the-dataset"]], "Model Parameter Tradeoffs": [[251, "model-parameter-tradeoffs"]], "Audio Feature Generator Settings": [[251, "audio-feature-generator-settings"]], "Module Architecture": [[251, "module-architecture"]], "Audio Data Generator": [[251, "audio-data-generator"]], "Profiling the model": [[251, "profiling-the-model"]], "Training the model": [[251, "training-the-model"]], "Creating the Firmware Application": [[251, "creating-the-firmware-application"]], "Creating the Pac-Man Webpage": [[251, "creating-the-pac-man-webpage"]], "Running the Demo": [[251, "running-the-demo"]], "Build firmware application from source": [[251, "build-firmware-application-from-source"]], "Run webpage locally": [[251, "run-webpage-locally"]], "Keyword Spotting with Transfer Learning": [[252, "keyword-spotting-with-transfer-learning"]], "Running this Tutorial": [[252, "running-this-tutorial"], [254, "running-this-tutorial"]], "Recommended Reading": [[252, "recommended-reading"], [254, "recommended-reading"]], "Basic Concept": [[252, "basic-concept"]], "Base Model Overview": [[252, "base-model-overview"]], "Test model using PC microphone": [[252, "test-model-using-pc-microphone"]], "Test model using development board": [[252, "test-model-using-development-board"]], "Configure Model Specification with Transfer Learning": [[252, "configure-model-specification-with-transfer-learning"]], "Update description": [[252, "update-description"]], "Set epochs to small value": [[252, "set-epochs-to-small-value"]], "Use LearningRateScheduler with small initial value": [[252, "use-learningratescheduler-with-small-initial-value"]], "Update the keywords to detect": [[252, "update-the-keywords-to-detect"]], "Reduce the \u201cunknown_class_percentage\u201d": [[252, "reduce-the-unknown-class-percentage"]], "Load the weights from the base model": [[252, "load-the-weights-from-the-base-model"]], "Train the Model": [[252, "train-the-model"], [254, "train-the-model"]], "Test the model": [[252, "test-the-model"]], "Model Debugging": [[253, "model-debugging"]], "Setup Environment": [[253, "setup-environment"]], "1) Install the MLTK Python Package": [[253, "install-the-mltk-python-package"]], "2) Install VS Code and the Python Extension": [[253, "install-vs-code-and-the-python-extension"]], "Debug model: basic_example": [[253, "debug-model-basic-example"]], "How does debugging work?": [[253, "how-does-debugging-work"]], "Model Optimization for MVP Hardware Accelerator": [[254, "model-optimization-for-mvp-hardware-accelerator"]], "Create the model specification file": [[254, "create-the-model-specification-file"]], "Update the model description": [[254, "update-the-model-description"]], "Update the Keywords": [[254, "update-the-keywords"]], "Update the AudioFeatureGenerator Settings": [[254, "update-the-audiofeaturegenerator-settings"]], "Select an audio file": [[254, "select-an-audio-file"]], "Adjust the AudioFeatureGenerator settings": [[254, "adjust-the-audiofeaturegenerator-settings"]], "Update Model Layout": [[254, "update-model-layout"]], "Summarize the model": [[254, "summarize-the-model"]], "Profile Model": [[254, "profile-model"]], "Test the Model": [[254, "test-the-model"]], "ONNX to TF-Lite Model Conversion": [[255, "onnx-to-tf-lite-model-conversion"]], "About this Tutorial": [[255, "about-this-tutorial"]], "Considerations": [[255, "considerations"]], "Input Data Format": [[255, "input-data-format"]], "Output Class ID Mapping": [[255, "output-class-id-mapping"]], "Supported ML Kernel Operations": [[255, "supported-ml-kernel-operations"]], "\u201cChannels-First\u201d vs \u201cChannels-Last\u201d": [[255, "channels-first-vs-channels-last"]], "Dataset Required for Quantization": [[255, "dataset-required-for-quantization"]], "Environment Setup": [[255, "environment-setup"]], "Install Python Dependencies": [[255, "install-python-dependencies"]], "Download ONNX Model": [[255, "download-onnx-model"]], "Configure Paths": [[255, "configure-paths"]], "Load the dataset": [[255, "load-the-dataset"]], "Sanity check: Evaluate the ONNX model": [[255, "sanity-check-evaluate-the-onnx-model"]], "Convert ONNX to Quantized TF-Lite Model File": [[255, "convert-onnx-to-quantized-tf-lite-model-file"]], "Simplify the ONNX model": [[255, "simplify-the-onnx-model"]], "Convert to OpenVino Intermediate Format": [[255, "convert-to-openvino-intermediate-format"]], "Convert from OpenVino to TF-Lite-Float32": [[255, "convert-from-openvino-to-tf-lite-float32"]], "Quantize the TF-Lite Model": [[255, "quantize-the-tf-lite-model"]], "Profile the Quantized Model": [[255, "profile-the-quantized-model"]], "Evaluate the Quantized Model": [[255, "evaluate-the-quantized-model"]], "Synthetic Audio Dataset Generation": [[256, "synthetic-audio-dataset-generation"]], "Recording real people": [[256, "recording-real-people"]], "Synthetic generation": [[256, "synthetic-generation"]], "Note about synthetic augmentations": [[256, "note-about-synthetic-augmentations"]], "Note about languages": [[256, "note-about-languages"]], "Note about the \u201cnegative\u201d class": [[256, "note-about-the-negative-class"]], "Note about cost": [[256, "note-about-cost"]], "Google Cloud Platform (GCP) Setup": [[256, "google-cloud-platform-gcp-setup"]], "Features": [[256, "features"], [256, "id2"]], "Microsoft Azure Setup": [[256, "microsoft-azure-setup"]], "Amazon Web Services (AWS) Setup": [[256, "amazon-web-services-aws-setup"]], "Alexa Example": [[256, "alexa-example"]]}, "indexentries": {"adjust_length() (in module mltk.core.preprocess.utils.audio)": [[80, "mltk.core.preprocess.utils.audio.adjust_length"]], "apply_frontend() (in module mltk.core.preprocess.utils.audio)": [[80, "mltk.core.preprocess.utils.audio.apply_frontend"]], "mltk.core.preprocess.utils.audio": [[80, "module-mltk.core.preprocess.utils.audio"]], "module": [[80, "module-mltk.core.preprocess.utils.audio"], [85, "module-mltk.core.preprocess.utils.image"], [89, "module-mltk.core.preprocess.utils.list_directory"], [90, "module-mltk.core.preprocess.utils.normalize"], [91, "module-mltk.core.preprocess.utils.tf_dataset"], [93, "module-mltk.datasets.accelerometer.tflm_magic_wand"], [94, "module-mltk.datasets.audio.background_noise.ambient"], [95, "module-mltk.datasets.audio.background_noise.brd2601"], [96, "module-mltk.datasets.audio.background_noise.esc50"], [97, "module-mltk.datasets.audio.direction_commands"], [98, "module-mltk.datasets.audio.mlcommons.ml_commons_keywords"], [99, "module-mltk.datasets.audio.mlcommons.ml_commons_voice"], [100, "module-mltk.datasets.audio.speech_commands.speech_commands_v2"], [101, "module-mltk.datasets.image.cifar10"], [102, "module-mltk.datasets.image.fashion_mnist"], [103, "module-mltk.datasets.image.mnist"], [104, "module-mltk.datasets.image.rock_paper_scissors_v1"], [105, "module-mltk.datasets.image.rock_paper_scissors_v2"], [124, "module-mltk.models.examples.audio_example1"], [125, "module-mltk.models.examples.audio_tf_dataset"], [126, "module-mltk.models.examples.autoencoder_example"], [127, "module-mltk.models.examples.basic_example"], [128, "module-mltk.models.examples.basic_tf_dataset_example"], [129, "module-mltk.models.examples.binary_classification"], [130, "module-mltk.models.examples.conv1d_example"], [131, "module-mltk.models.examples.image_example1"], [132, "module-mltk.models.examples.image_tf_dataset"], [134, "module-mltk.models.examples.siamese_contrastive"], [136, "module-mltk.models.siliconlabs.fingerprint_signature_generator"], [138, "module-mltk.models.siliconlabs.keyword_spotting_alexa"], [139, "module-mltk.models.siliconlabs.keyword_spotting_mobilenetv2"], [140, "module-mltk.models.siliconlabs.keyword_spotting_on_off"], [141, "module-mltk.models.siliconlabs.keyword_spotting_on_off_v2"], [142, "module-mltk.models.siliconlabs.keyword_spotting_pacman"], [143, "module-mltk.models.siliconlabs.keyword_spotting_pacman_v2"], [144, "module-mltk.models.siliconlabs.keyword_spotting_pacman_v3"], [145, "module-mltk.models.siliconlabs.keyword_spotting_with_transfer_learning"], [146, "module-mltk.models.siliconlabs.rock_paper_scissors"], [148, "module-mltk.models.tflite_micro.tflite_micro_magic_wand"], [149, "module-mltk.models.tflite_micro.tflite_micro_speech"], [150, "module-mltk.models.tinyml.anomaly_detection"], [151, "module-mltk.models.tinyml.image_classification"], [153, "module-mltk.models.tinyml.keyword_spotting"], [154, "module-mltk.models.tinyml.visual_wake_words"], [199, "module-mltk.utils.archive"], [200, "module-mltk.utils.archive_downloader"], [209, "module-mltk.utils.bin2header"], [210, "module-mltk.utils.cmake"], [211, "module-mltk.utils.gpu"], [212, "module-mltk.utils.hasher"], [219, "module-mltk.utils.logger"], [220, "module-mltk.utils.path"], [222, "module-mltk.utils.python"], [225, "module-mltk.utils.shell_cmd"], [227, "module-mltk.utils.string_formatting"], [228, "module-mltk.utils.system"]], "read_audio_file() (in module mltk.core.preprocess.utils.audio)": [[80, "mltk.core.preprocess.utils.audio.read_audio_file"]], "write_audio_file() (in module mltk.core.preprocess.utils.audio)": [[80, "mltk.core.preprocess.utils.audio.write_audio_file"]], "parallelaudiodatagenerator (class in mltk.core.preprocess.audio.parallel_generator)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator"]], "__init__() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.__init__"]], "adjust_length() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.adjust_length"]], "apply_frontend() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.apply_frontend"]], "apply_transform() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.apply_transform"]], "default_transform (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.default_transform"]], "flow_from_directory() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.flow_from_directory"]], "get_random_transform() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.get_random_transform"]], "sample_length (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.sample_length"]], "sample_length_ms (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.sample_length_ms"]], "sample_rate_hz (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.sample_rate_hz"]], "sample_shape (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.sample_shape"]], "standardize() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.standardize"]], "parallelprocessparams (class in mltk.core.preprocess.audio.parallel_generator)": [[82, "mltk.core.preprocess.audio.parallel_generator.ParallelProcessParams"]], "__init__() (parallelprocessparams method)": [[82, "mltk.core.preprocess.audio.parallel_generator.ParallelProcessParams.__init__"], [87, "mltk.core.preprocess.image.parallel_generator.ParallelProcessParams.__init__"]], "audiofeaturegenerator (class in mltk.core.preprocess.audio.audio_feature_generator)": [[83, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator"]], "__init__() (audiofeaturegenerator method)": [[83, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator.__init__"]], "activity_was_detected() (audiofeaturegenerator method)": [[83, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator.activity_was_detected"]], "process_sample() (audiofeaturegenerator method)": [[83, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator.process_sample"]], "audiofeaturegeneratorsettings (class in mltk.core.preprocess.audio.audio_feature_generator)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings"]], "__init__() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.__init__"]], "__new__() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.__new__"]], "activity_detection_alpha_a (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_alpha_a"]], "activity_detection_alpha_b (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_alpha_b"]], "activity_detection_arm_threshold (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_arm_threshold"]], "activity_detection_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_enable"]], "activity_detection_trip_threshold (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_trip_threshold"]], "clear() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.clear"]], "copy() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.copy"]], "dc_notch_filter_coefficient (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.dc_notch_filter_coefficient"]], "dc_notch_filter_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.dc_notch_filter_enable"]], "fft_length (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.fft_length"]], "filterbank_lower_band_limit (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.filterbank_lower_band_limit"]], "filterbank_n_channels (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.filterbank_n_channels"]], "filterbank_upper_band_limit (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.filterbank_upper_band_limit"]], "fromkeys() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.fromkeys"]], "get() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.get"]], "items() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.items"]], "keys() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.keys"]], "log_scale_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.log_scale_enable"]], "log_scale_shift (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.log_scale_shift"]], "noise_reduction_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_enable"]], "noise_reduction_even_smoothing (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_even_smoothing"]], "noise_reduction_min_signal_remaining (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_min_signal_remaining"]], "noise_reduction_odd_smoothing (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_odd_smoothing"]], "noise_reduction_smoothing_bits (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_smoothing_bits"]], "pcan_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pcan_enable"]], "pcan_gain_bits (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pcan_gain_bits"]], "pcan_offset (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pcan_offset"]], "pcan_strength (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pcan_strength"]], "pop() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pop"]], "popitem() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.popitem"]], "quantize_dynamic_scale_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.quantize_dynamic_scale_enable"]], "quantize_dynamic_scale_range_db (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.quantize_dynamic_scale_range_db"]], "sample_length (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.sample_length"]], "sample_length_ms (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.sample_length_ms"]], "sample_rate_hz (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.sample_rate_hz"]], "setdefault() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.setdefault"]], "spectrogram_shape (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.spectrogram_shape"]], "update() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.update"]], "values() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.values"]], "window_size_ms (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.window_size_ms"]], "window_step_ms (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.window_step_ms"]], "mltk.core.preprocess.utils.image": [[85, "module-mltk.core.preprocess.utils.image"]], "read_image_file() (in module mltk.core.preprocess.utils.image)": [[85, "mltk.core.preprocess.utils.image.read_image_file"]], "write_image_file() (in module mltk.core.preprocess.utils.image)": [[85, "mltk.core.preprocess.utils.image.write_image_file"]], "parallelimagedatagenerator (class in mltk.core.preprocess.image.parallel_generator)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator"]], "__init__() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.__init__"]], "apply_transform() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.apply_transform"]], "default_transform (parallelimagedatagenerator property)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.default_transform"]], "fit() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.fit"]], "flow() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.flow"]], "flow_from_directory() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.flow_from_directory"]], "get_random_transform() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.get_random_transform"]], "random_transform() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.random_transform"]], "standardize() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.standardize"]], "parallelprocessparams (class in mltk.core.preprocess.image.parallel_generator)": [[87, "mltk.core.preprocess.image.parallel_generator.ParallelProcessParams"]], "list_dataset_directory() (in module mltk.core.preprocess.utils.list_directory)": [[89, "mltk.core.preprocess.utils.list_directory.list_dataset_directory"]], "list_valid_filenames_in_directory() (in module mltk.core.preprocess.utils.list_directory)": [[89, "mltk.core.preprocess.utils.list_directory.list_valid_filenames_in_directory"]], "mltk.core.preprocess.utils.list_directory": [[89, "module-mltk.core.preprocess.utils.list_directory"]], "shuffle_file_list_by_group() (in module mltk.core.preprocess.utils.list_directory)": [[89, "mltk.core.preprocess.utils.list_directory.shuffle_file_list_by_group"]], "split_file_list() (in module mltk.core.preprocess.utils.list_directory)": [[89, "mltk.core.preprocess.utils.list_directory.split_file_list"]], "mltk.core.preprocess.utils.normalize": [[90, "module-mltk.core.preprocess.utils.normalize"]], "normalize() (in module mltk.core.preprocess.utils.normalize)": [[90, "mltk.core.preprocess.utils.normalize.normalize"]], "enable_numpy_behavior() (in module mltk.core.preprocess.utils.tf_dataset)": [[91, "mltk.core.preprocess.utils.tf_dataset.enable_numpy_behavior"]], "load_audio_directory() (in module mltk.core.preprocess.utils.tf_dataset)": [[91, "mltk.core.preprocess.utils.tf_dataset.load_audio_directory"]], "load_image_directory() (in module mltk.core.preprocess.utils.tf_dataset)": [[91, "mltk.core.preprocess.utils.tf_dataset.load_image_directory"]], "mltk.core.preprocess.utils.tf_dataset": [[91, "module-mltk.core.preprocess.utils.tf_dataset"]], "parallel_process() (in module mltk.core.preprocess.utils.tf_dataset)": [[91, "mltk.core.preprocess.utils.tf_dataset.parallel_process"]], "load_data() (in module mltk.datasets.accelerometer.tflm_magic_wand)": [[93, "mltk.datasets.accelerometer.tflm_magic_wand.load_data"]], "mltk.datasets.accelerometer.tflm_magic_wand": [[93, "module-mltk.datasets.accelerometer.tflm_magic_wand"]], "prepare_data() (in module mltk.datasets.accelerometer.tflm_magic_wand)": [[93, "mltk.datasets.accelerometer.tflm_magic_wand.prepare_data"]], "download_urls (in module mltk.datasets.audio.background_noise.ambient)": [[94, "mltk.datasets.audio.background_noise.ambient.DOWNLOAD_URLS"]], "download() (in module mltk.datasets.audio.background_noise.ambient)": [[94, "mltk.datasets.audio.background_noise.ambient.download"]], "mltk.datasets.audio.background_noise.ambient": [[94, "module-mltk.datasets.audio.background_noise.ambient"]], "download_url (in module mltk.datasets.audio.background_noise.brd2601)": [[95, "mltk.datasets.audio.background_noise.brd2601.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.background_noise.brd2601)": [[95, "mltk.datasets.audio.background_noise.brd2601.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.background_noise.brd2601)": [[95, "mltk.datasets.audio.background_noise.brd2601.download"]], "mltk.datasets.audio.background_noise.brd2601": [[95, "module-mltk.datasets.audio.background_noise.brd2601"]], "download_url (in module mltk.datasets.audio.background_noise.esc50)": [[96, "mltk.datasets.audio.background_noise.esc50.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.background_noise.esc50)": [[96, "mltk.datasets.audio.background_noise.esc50.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.background_noise.esc50)": [[96, "mltk.datasets.audio.background_noise.esc50.download"]], "mltk.datasets.audio.background_noise.esc50": [[96, "module-mltk.datasets.audio.background_noise.esc50"]], "mltk.datasets.audio.direction_commands": [[97, "module-mltk.datasets.audio.direction_commands"]], "download_url1 (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[98, "mltk.datasets.audio.mlcommons.ml_commons_keywords.DOWNLOAD_URL1"]], "download_url2 (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[98, "mltk.datasets.audio.mlcommons.ml_commons_keywords.DOWNLOAD_URL2"]], "verify_url1_sha1 (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[98, "mltk.datasets.audio.mlcommons.ml_commons_keywords.VERIFY_URL1_SHA1"]], "verify_url2_sha1 (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[98, "mltk.datasets.audio.mlcommons.ml_commons_keywords.VERIFY_URL2_SHA1"]], "download() (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[98, "mltk.datasets.audio.mlcommons.ml_commons_keywords.download"]], "mltk.datasets.audio.mlcommons.ml_commons_keywords": [[98, "module-mltk.datasets.audio.mlcommons.ml_commons_keywords"]], "download_url (in module mltk.datasets.audio.mlcommons.ml_commons_voice)": [[99, "mltk.datasets.audio.mlcommons.ml_commons_voice.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.mlcommons.ml_commons_voice)": [[99, "mltk.datasets.audio.mlcommons.ml_commons_voice.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.mlcommons.ml_commons_voice)": [[99, "mltk.datasets.audio.mlcommons.ml_commons_voice.download"]], "mltk.datasets.audio.mlcommons.ml_commons_voice": [[99, "module-mltk.datasets.audio.mlcommons.ml_commons_voice"]], "classes (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[100, "mltk.datasets.audio.speech_commands.speech_commands_v2.CLASSES"]], "download_url (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[100, "mltk.datasets.audio.speech_commands.speech_commands_v2.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[100, "mltk.datasets.audio.speech_commands.speech_commands_v2.VERIFY_SHA1"]], "list_valid_filenames_in_directory() (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[100, "mltk.datasets.audio.speech_commands.speech_commands_v2.list_valid_filenames_in_directory"]], "load_clean_data() (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[100, "mltk.datasets.audio.speech_commands.speech_commands_v2.load_clean_data"]], "load_data() (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[100, "mltk.datasets.audio.speech_commands.speech_commands_v2.load_data"]], "mltk.datasets.audio.speech_commands.speech_commands_v2": [[100, "module-mltk.datasets.audio.speech_commands.speech_commands_v2"]], "download_url (in module mltk.datasets.image.cifar10)": [[101, "mltk.datasets.image.cifar10.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.image.cifar10)": [[101, "mltk.datasets.image.cifar10.VERIFY_SHA1"]], "load_data() (in module mltk.datasets.image.cifar10)": [[101, "mltk.datasets.image.cifar10.load_data"]], "load_data_directory() (in module mltk.datasets.image.cifar10)": [[101, "mltk.datasets.image.cifar10.load_data_directory"]], "mltk.datasets.image.cifar10": [[101, "module-mltk.datasets.image.cifar10"]], "classes (in module mltk.datasets.image.fashion_mnist)": [[102, "mltk.datasets.image.fashion_mnist.CLASSES"]], "input_shape (in module mltk.datasets.image.fashion_mnist)": [[102, "mltk.datasets.image.fashion_mnist.INPUT_SHAPE"]], "load_data() (in module mltk.datasets.image.fashion_mnist)": [[102, "mltk.datasets.image.fashion_mnist.load_data"]], "load_data_directory() (in module mltk.datasets.image.fashion_mnist)": [[102, "mltk.datasets.image.fashion_mnist.load_data_directory"]], "mltk.datasets.image.fashion_mnist": [[102, "module-mltk.datasets.image.fashion_mnist"]], "classes (in module mltk.datasets.image.mnist)": [[103, "mltk.datasets.image.mnist.CLASSES"]], "download_url (in module mltk.datasets.image.mnist)": [[103, "mltk.datasets.image.mnist.DOWNLOAD_URL"]], "input_shape (in module mltk.datasets.image.mnist)": [[103, "mltk.datasets.image.mnist.INPUT_SHAPE"]], "verify_sha1 (in module mltk.datasets.image.mnist)": [[103, "mltk.datasets.image.mnist.VERIFY_SHA1"]], "load_data() (in module mltk.datasets.image.mnist)": [[103, "mltk.datasets.image.mnist.load_data"]], "load_data_directory() (in module mltk.datasets.image.mnist)": [[103, "mltk.datasets.image.mnist.load_data_directory"]], "mltk.datasets.image.mnist": [[103, "module-mltk.datasets.image.mnist"]], "classes (in module mltk.datasets.image.rock_paper_scissors_v1)": [[104, "mltk.datasets.image.rock_paper_scissors_v1.CLASSES"]], "download_url (in module mltk.datasets.image.rock_paper_scissors_v1)": [[104, "mltk.datasets.image.rock_paper_scissors_v1.DOWNLOAD_URL"]], "input_depth (in module mltk.datasets.image.rock_paper_scissors_v1)": [[104, "mltk.datasets.image.rock_paper_scissors_v1.INPUT_DEPTH"]], "input_height (in module mltk.datasets.image.rock_paper_scissors_v1)": [[104, "mltk.datasets.image.rock_paper_scissors_v1.INPUT_HEIGHT"]], "input_shape (in module mltk.datasets.image.rock_paper_scissors_v1)": [[104, "mltk.datasets.image.rock_paper_scissors_v1.INPUT_SHAPE"]], "input_width (in module mltk.datasets.image.rock_paper_scissors_v1)": [[104, "mltk.datasets.image.rock_paper_scissors_v1.INPUT_WIDTH"]], "verify_sha1 (in module mltk.datasets.image.rock_paper_scissors_v1)": [[104, "mltk.datasets.image.rock_paper_scissors_v1.VERIFY_SHA1"]], "load_data() (in module mltk.datasets.image.rock_paper_scissors_v1)": [[104, "mltk.datasets.image.rock_paper_scissors_v1.load_data"]], "mltk.datasets.image.rock_paper_scissors_v1": [[104, "module-mltk.datasets.image.rock_paper_scissors_v1"]], "classes (in module mltk.datasets.image.rock_paper_scissors_v2)": [[105, "mltk.datasets.image.rock_paper_scissors_v2.CLASSES"]], "download_url (in module mltk.datasets.image.rock_paper_scissors_v2)": [[105, "mltk.datasets.image.rock_paper_scissors_v2.DOWNLOAD_URL"]], "input_depth (in module mltk.datasets.image.rock_paper_scissors_v2)": [[105, "mltk.datasets.image.rock_paper_scissors_v2.INPUT_DEPTH"]], "input_height (in module mltk.datasets.image.rock_paper_scissors_v2)": [[105, "mltk.datasets.image.rock_paper_scissors_v2.INPUT_HEIGHT"]], "input_shape (in module mltk.datasets.image.rock_paper_scissors_v2)": [[105, "mltk.datasets.image.rock_paper_scissors_v2.INPUT_SHAPE"]], "input_width (in module mltk.datasets.image.rock_paper_scissors_v2)": [[105, "mltk.datasets.image.rock_paper_scissors_v2.INPUT_WIDTH"]], "verify_sha1 (in module mltk.datasets.image.rock_paper_scissors_v2)": [[105, "mltk.datasets.image.rock_paper_scissors_v2.VERIFY_SHA1"]], "load_data() (in module mltk.datasets.image.rock_paper_scissors_v2)": [[105, "mltk.datasets.image.rock_paper_scissors_v2.load_data"]], "mltk.datasets.image.rock_paper_scissors_v2": [[105, "module-mltk.datasets.image.rock_paper_scissors_v2"]], "kerasmodel (in module mltk.core)": [[108, "mltk.core.KerasModel"]], "audiodatasetmixin (class in mltk.core)": [[109, "mltk.core.AudioDatasetMixin"]], "audio_classes (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.audio_classes"]], "audio_input_shape (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.audio_input_shape"]], "class_counts (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.class_counts"]], "class_mode (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.class_mode"]], "class_weights (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.class_weights"]], "datagen (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.datagen"]], "datagen_context (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.datagen_context"]], "dataset (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.dataset"]], "follow_links (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.follow_links"]], "frontend_settings (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.frontend_settings"]], "get_datagen_creator() (audiodatasetmixin method)": [[109, "mltk.core.AudioDatasetMixin.get_datagen_creator"]], "get_shuffle_index_dir() (audiodatasetmixin method)": [[109, "mltk.core.AudioDatasetMixin.get_shuffle_index_dir"]], "load_dataset() (audiodatasetmixin method)": [[109, "mltk.core.AudioDatasetMixin.load_dataset"]], "loaded_subset (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.loaded_subset"]], "sample_length_ms (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.sample_length_ms"]], "sample_rate_hz (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.sample_rate_hz"]], "sample_weight (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.sample_weight"]], "shuffle (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.shuffle"]], "shuffle_dataset_enabled (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.shuffle_dataset_enabled"]], "steps_per_epoch (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.steps_per_epoch"]], "summarize_dataset() (audiodatasetmixin method)": [[109, "mltk.core.AudioDatasetMixin.summarize_dataset"]], "unload_dataset() (audiodatasetmixin method)": [[109, "mltk.core.AudioDatasetMixin.unload_dataset"]], "validation_batch_size (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.validation_batch_size"]], "validation_data (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.validation_data"]], "validation_datagen (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.validation_datagen"]], "validation_freq (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.validation_freq"]], "validation_split (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.validation_split"]], "validation_steps (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.validation_steps"]], "x (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.x"]], "y (audiodatasetmixin property)": [[109, "mltk.core.AudioDatasetMixin.y"]], "datasetmixin (class in mltk.core)": [[110, "mltk.core.DatasetMixin"]], "class_counts (datasetmixin property)": [[110, "mltk.core.DatasetMixin.class_counts"]], "class_weights (datasetmixin property)": [[110, "mltk.core.DatasetMixin.class_weights"]], "dataset (datasetmixin property)": [[110, "mltk.core.DatasetMixin.dataset"]], "load_dataset() (datasetmixin method)": [[110, "mltk.core.DatasetMixin.load_dataset"]], "loaded_subset (datasetmixin property)": [[110, "mltk.core.DatasetMixin.loaded_subset"]], "sample_weight (datasetmixin property)": [[110, "mltk.core.DatasetMixin.sample_weight"]], "shuffle (datasetmixin property)": [[110, "mltk.core.DatasetMixin.shuffle"]], "steps_per_epoch (datasetmixin property)": [[110, "mltk.core.DatasetMixin.steps_per_epoch"]], "summarize_dataset() (datasetmixin method)": [[110, "mltk.core.DatasetMixin.summarize_dataset"]], "unload_dataset() (datasetmixin method)": [[110, "mltk.core.DatasetMixin.unload_dataset"]], "validation_batch_size (datasetmixin property)": [[110, "mltk.core.DatasetMixin.validation_batch_size"]], "validation_data (datasetmixin property)": [[110, "mltk.core.DatasetMixin.validation_data"]], "validation_freq (datasetmixin property)": [[110, "mltk.core.DatasetMixin.validation_freq"]], "validation_split (datasetmixin property)": [[110, "mltk.core.DatasetMixin.validation_split"]], "validation_steps (datasetmixin property)": [[110, "mltk.core.DatasetMixin.validation_steps"]], "x (datasetmixin property)": [[110, "mltk.core.DatasetMixin.x"]], "y (datasetmixin property)": [[110, "mltk.core.DatasetMixin.y"]], "evaluateautoencodermixin (class in mltk.core)": [[111, "mltk.core.EvaluateAutoEncoderMixin"]], "eval_augment (evaluateautoencodermixin property)": [[111, "mltk.core.EvaluateAutoEncoderMixin.eval_augment"]], "eval_classes (evaluateautoencodermixin property)": [[111, "mltk.core.EvaluateAutoEncoderMixin.eval_classes"]], "eval_custom_function (evaluateautoencodermixin property)": [[111, "mltk.core.EvaluateAutoEncoderMixin.eval_custom_function"]], "eval_max_samples_per_class (evaluateautoencodermixin property)": [[111, "mltk.core.EvaluateAutoEncoderMixin.eval_max_samples_per_class"]], "eval_shuffle (evaluateautoencodermixin property)": [[111, "mltk.core.EvaluateAutoEncoderMixin.eval_shuffle"]], "eval_steps_per_epoch (evaluateautoencodermixin property)": [[111, "mltk.core.EvaluateAutoEncoderMixin.eval_steps_per_epoch"]], "get_scoring_function() (evaluateautoencodermixin method)": [[111, "mltk.core.EvaluateAutoEncoderMixin.get_scoring_function"]], "scoring_function (evaluateautoencodermixin property)": [[111, "mltk.core.EvaluateAutoEncoderMixin.scoring_function"]], "evaluateclassifiermixin (class in mltk.core)": [[112, "mltk.core.EvaluateClassifierMixin"]], "eval_augment (evaluateclassifiermixin property)": [[112, "mltk.core.EvaluateClassifierMixin.eval_augment"]], "eval_custom_function (evaluateclassifiermixin property)": [[112, "mltk.core.EvaluateClassifierMixin.eval_custom_function"]], "eval_max_samples_per_class (evaluateclassifiermixin property)": [[112, "mltk.core.EvaluateClassifierMixin.eval_max_samples_per_class"]], "eval_shuffle (evaluateclassifiermixin property)": [[112, "mltk.core.EvaluateClassifierMixin.eval_shuffle"]], "eval_steps_per_epoch (evaluateclassifiermixin property)": [[112, "mltk.core.EvaluateClassifierMixin.eval_steps_per_epoch"]], "evaluatemixin (class in mltk.core)": [[113, "mltk.core.EvaluateMixin"]], "eval_custom_function (evaluatemixin property)": [[113, "mltk.core.EvaluateMixin.eval_custom_function"]], "eval_steps_per_epoch (evaluatemixin property)": [[113, "mltk.core.EvaluateMixin.eval_steps_per_epoch"]], "imagedatasetmixin (class in mltk.core)": [[114, "mltk.core.ImageDatasetMixin"]], "class_counts (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.class_counts"]], "class_mode (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.class_mode"]], "class_weights (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.class_weights"]], "color_mode (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.color_mode"]], "datagen (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.datagen"]], "datagen_context (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.datagen_context"]], "dataset (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.dataset"]], "follow_links (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.follow_links"]], "get_datagen_creator() (imagedatasetmixin method)": [[114, "mltk.core.ImageDatasetMixin.get_datagen_creator"]], "get_shuffle_index_dir() (imagedatasetmixin method)": [[114, "mltk.core.ImageDatasetMixin.get_shuffle_index_dir"]], "image_classes (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.image_classes"]], "image_input_shape (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.image_input_shape"]], "interpolation (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.interpolation"]], "load_dataset() (imagedatasetmixin method)": [[114, "mltk.core.ImageDatasetMixin.load_dataset"]], "loaded_subset (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.loaded_subset"]], "sample_weight (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.sample_weight"]], "shuffle (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.shuffle"]], "shuffle_dataset_enabled (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.shuffle_dataset_enabled"]], "steps_per_epoch (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.steps_per_epoch"]], "summarize_dataset() (imagedatasetmixin method)": [[114, "mltk.core.ImageDatasetMixin.summarize_dataset"]], "target_size (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.target_size"]], "unload_dataset() (imagedatasetmixin method)": [[114, "mltk.core.ImageDatasetMixin.unload_dataset"]], "validation_batch_size (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.validation_batch_size"]], "validation_data (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.validation_data"]], "validation_datagen (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.validation_datagen"]], "validation_freq (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.validation_freq"]], "validation_split (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.validation_split"]], "validation_steps (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.validation_steps"]], "x (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.x"]], "y (imagedatasetmixin property)": [[114, "mltk.core.ImageDatasetMixin.y"]], "mltkdataset (class in mltk.core)": [[116, "mltk.core.MltkDataset"]], "load_dataset() (mltkdataset method)": [[116, "mltk.core.MltkDataset.load_dataset"]], "summarize_class_counts() (mltkdataset static method)": [[116, "mltk.core.MltkDataset.summarize_class_counts"]], "summarize_dataset() (mltkdataset method)": [[116, "mltk.core.MltkDataset.summarize_dataset"]], "unload_dataset() (mltkdataset method)": [[116, "mltk.core.MltkDataset.unload_dataset"]], "mltkmodel (class in mltk.core)": [[117, "mltk.core.MltkModel"]], "__init__() (mltkmodel method)": [[117, "mltk.core.MltkModel.__init__"]], "add_archive_dir() (mltkmodel method)": [[117, "mltk.core.MltkModel.add_archive_dir"]], "add_archive_file() (mltkmodel method)": [[117, "mltk.core.MltkModel.add_archive_file"]], "add_event_handler() (mltkmodel method)": [[117, "mltk.core.MltkModel.add_event_handler"]], "add_model_parameter_populate_callback() (mltkmodel method)": [[117, "mltk.core.MltkModel.add_model_parameter_populate_callback"]], "add_tflite_metadata_entry() (mltkmodel method)": [[117, "mltk.core.MltkModel.add_tflite_metadata_entry"]], "archive_path (mltkmodel property)": [[117, "mltk.core.MltkModel.archive_path"]], "attributes (mltkmodel property)": [[117, "mltk.core.MltkModel.attributes"]], "check_archive_file_is_writable() (mltkmodel method)": [[117, "mltk.core.MltkModel.check_archive_file_is_writable"]], "classes (mltkmodel property)": [[117, "mltk.core.MltkModel.classes"]], "cli (mltkmodel property)": [[117, "mltk.core.MltkModel.cli"]], "create_log_dir() (mltkmodel method)": [[117, "mltk.core.MltkModel.create_log_dir"]], "create_logger() (mltkmodel method)": [[117, "mltk.core.MltkModel.create_logger"]], "description (mltkmodel property)": [[117, "mltk.core.MltkModel.description"]], "deserialize_tflite_metadata() (mltkmodel method)": [[117, "mltk.core.MltkModel.deserialize_tflite_metadata"]], "enable_test_mode() (mltkmodel method)": [[117, "mltk.core.MltkModel.enable_test_mode"]], "get_archive_dir() (mltkmodel method)": [[117, "mltk.core.MltkModel.get_archive_dir"]], "get_archive_file() (mltkmodel method)": [[117, "mltk.core.MltkModel.get_archive_file"]], "get_attribute() (mltkmodel method)": [[117, "mltk.core.MltkModel.get_attribute"]], "get_tflite_metadata_summary() (mltkmodel method)": [[117, "mltk.core.MltkModel.get_tflite_metadata_summary"]], "h5_archive_path (mltkmodel property)": [[117, "mltk.core.MltkModel.h5_archive_path"]], "h5_log_dir_path (mltkmodel property)": [[117, "mltk.core.MltkModel.h5_log_dir_path"]], "input_shape (mltkmodel property)": [[117, "mltk.core.MltkModel.input_shape"]], "keras_custom_objects (mltkmodel property)": [[117, "mltk.core.MltkModel.keras_custom_objects"]], "log_dir (mltkmodel property)": [[117, "mltk.core.MltkModel.log_dir"]], "model_parameters (mltkmodel property)": [[117, "mltk.core.MltkModel.model_parameters"]], "model_specification_path (mltkmodel property)": [[117, "mltk.core.MltkModel.model_specification_path"]], "n_classes (mltkmodel property)": [[117, "mltk.core.MltkModel.n_classes"]], "name (mltkmodel property)": [[117, "mltk.core.MltkModel.name"]], "populate_model_parameters() (mltkmodel method)": [[117, "mltk.core.MltkModel.populate_model_parameters"]], "serialize_tflite_metadata() (mltkmodel method)": [[117, "mltk.core.MltkModel.serialize_tflite_metadata"]], "set_model_parameter() (mltkmodel method)": [[117, "mltk.core.MltkModel.set_model_parameter"]], "summary() (mltkmodel method)": [[117, "mltk.core.MltkModel.summary"]], "test_mode_enabled (mltkmodel property)": [[117, "mltk.core.MltkModel.test_mode_enabled"]], "tflite_archive_path (mltkmodel property)": [[117, "mltk.core.MltkModel.tflite_archive_path"]], "tflite_log_dir_path (mltkmodel property)": [[117, "mltk.core.MltkModel.tflite_log_dir_path"]], "tflite_metadata_entries (mltkmodel property)": [[117, "mltk.core.MltkModel.tflite_metadata_entries"]], "trigger_event() (mltkmodel method)": [[117, "mltk.core.MltkModel.trigger_event"]], "unquantized_tflite_log_dir_path (mltkmodel property)": [[117, "mltk.core.MltkModel.unquantized_tflite_log_dir_path"]], "version (mltkmodel property)": [[117, "mltk.core.MltkModel.version"]], "after_build_train_model (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.AFTER_BUILD_TRAIN_MODEL"]], "after_load_dataset (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.AFTER_LOAD_DATASET"]], "after_model_load (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.AFTER_MODEL_LOAD"]], "after_profile (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.AFTER_PROFILE"]], "after_quantize (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.AFTER_QUANTIZE"]], "after_save_train_archive (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.AFTER_SAVE_TRAIN_ARCHIVE"]], "after_save_train_model (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.AFTER_SAVE_TRAIN_MODEL"]], "after_save_train_results (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.AFTER_SAVE_TRAIN_RESULTS"]], "after_train (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.AFTER_TRAIN"]], "after_unload_dataset (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.AFTER_UNLOAD_DATASET"]], "before_build_train_model (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.BEFORE_BUILD_TRAIN_MODEL"]], "before_load_dataset (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.BEFORE_LOAD_DATASET"]], "before_model_load (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.BEFORE_MODEL_LOAD"]], "before_quantize (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.BEFORE_QUANTIZE"]], "before_save_train_archive (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.BEFORE_SAVE_TRAIN_ARCHIVE"]], "before_save_train_model (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.BEFORE_SAVE_TRAIN_MODEL"]], "before_save_train_results (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.BEFORE_SAVE_TRAIN_RESULTS"]], "before_train (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.BEFORE_TRAIN"]], "before_unload_dataset (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.BEFORE_UNLOAD_DATASET"]], "evaluate_shutdown (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.EVALUATE_SHUTDOWN"]], "evaluate_startup (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.EVALUATE_STARTUP"]], "generate_evaluate_plot (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.GENERATE_EVALUATE_PLOT"]], "mltkmodelevent (class in mltk.core)": [[118, "mltk.core.MltkModelEvent"]], "populate_train_callbacks (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.POPULATE_TRAIN_CALLBACKS"]], "quantize_shutdown (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.QUANTIZE_SHUTDOWN"]], "quantize_startup (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.QUANTIZE_STARTUP"]], "summarize_dataset (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.SUMMARIZE_DATASET"]], "summarize_model (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.SUMMARIZE_MODEL"]], "train_shutdown (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.TRAIN_SHUTDOWN"]], "train_startup (mltkmodelevent attribute)": [[118, "mltk.core.MltkModelEvent.TRAIN_STARTUP"]], "sshmixin (class in mltk.core)": [[119, "mltk.core.SshMixin"]], "ssh_create_venv (sshmixin property)": [[119, "mltk.core.SshMixin.ssh_create_venv"]], "ssh_download_files (sshmixin property)": [[119, "mltk.core.SshMixin.ssh_download_files"]], "ssh_environment (sshmixin property)": [[119, "mltk.core.SshMixin.ssh_environment"]], "ssh_remote_dir (sshmixin property)": [[119, "mltk.core.SshMixin.ssh_remote_dir"]], "ssh_shutdown_cmds (sshmixin property)": [[119, "mltk.core.SshMixin.ssh_shutdown_cmds"]], "ssh_startup_cmds (sshmixin property)": [[119, "mltk.core.SshMixin.ssh_startup_cmds"]], "ssh_upload_files (sshmixin property)": [[119, "mltk.core.SshMixin.ssh_upload_files"]], "trainmixin (class in mltk.core)": [[120, "mltk.core.TrainMixin"]], "batch_size (trainmixin property)": [[120, "mltk.core.TrainMixin.batch_size"]], "build_model_function (trainmixin property)": [[120, "mltk.core.TrainMixin.build_model_function"]], "checkpoint (trainmixin property)": [[120, "mltk.core.TrainMixin.checkpoint"]], "checkpoints_dir (trainmixin property)": [[120, "mltk.core.TrainMixin.checkpoints_dir"]], "checkpoints_enabled (trainmixin property)": [[120, "mltk.core.TrainMixin.checkpoints_enabled"]], "early_stopping (trainmixin property)": [[120, "mltk.core.TrainMixin.early_stopping"]], "epochs (trainmixin property)": [[120, "mltk.core.TrainMixin.epochs"]], "get_checkpoint_path() (trainmixin method)": [[120, "mltk.core.TrainMixin.get_checkpoint_path"]], "get_weights_path() (trainmixin method)": [[120, "mltk.core.TrainMixin.get_weights_path"]], "loss (trainmixin property)": [[120, "mltk.core.TrainMixin.loss"]], "lr_schedule (trainmixin property)": [[120, "mltk.core.TrainMixin.lr_schedule"]], "metrics (trainmixin property)": [[120, "mltk.core.TrainMixin.metrics"]], "on_save_keras_model (trainmixin property)": [[120, "mltk.core.TrainMixin.on_save_keras_model"]], "on_training_complete (trainmixin property)": [[120, "mltk.core.TrainMixin.on_training_complete"]], "optimizer (trainmixin property)": [[120, "mltk.core.TrainMixin.optimizer"]], "reduce_lr_on_plateau (trainmixin property)": [[120, "mltk.core.TrainMixin.reduce_lr_on_plateau"]], "tensorboard (trainmixin property)": [[120, "mltk.core.TrainMixin.tensorboard"]], "tflite_converter (trainmixin property)": [[120, "mltk.core.TrainMixin.tflite_converter"]], "train_callbacks (trainmixin property)": [[120, "mltk.core.TrainMixin.train_callbacks"]], "train_kwargs (trainmixin property)": [[120, "mltk.core.TrainMixin.train_kwargs"]], "weights_dir (trainmixin property)": [[120, "mltk.core.TrainMixin.weights_dir"]], "weights_file_format (trainmixin property)": [[120, "mltk.core.TrainMixin.weights_file_format"]], "list_mltk_models() (in module mltk.core)": [[121, "mltk.core.list_mltk_models"]], "load_mltk_model() (in module mltk.core)": [[121, "mltk.core.load_mltk_model"]], "load_mltk_model_with_path() (in module mltk.core)": [[121, "mltk.core.load_mltk_model_with_path"]], "load_tflite_model() (in module mltk.core)": [[121, "mltk.core.load_tflite_model"]], "load_tflite_or_keras_model() (in module mltk.core)": [[121, "mltk.core.load_tflite_or_keras_model"]], "weightsandbiasesmixin (class in mltk.core)": [[122, "mltk.core.WeightsAndBiasesMixin"]], "wandb_callback (weightsandbiasesmixin property)": [[122, "mltk.core.WeightsAndBiasesMixin.wandb_callback"]], "wandb_config (weightsandbiasesmixin property)": [[122, "mltk.core.WeightsAndBiasesMixin.wandb_config"]], "wandb_init_kwargs (weightsandbiasesmixin property)": [[122, "mltk.core.WeightsAndBiasesMixin.wandb_init_kwargs"]], "wandb_is_disabled (weightsandbiasesmixin property)": [[122, "mltk.core.WeightsAndBiasesMixin.wandb_is_disabled"]], "wandb_is_initialized (weightsandbiasesmixin property)": [[122, "mltk.core.WeightsAndBiasesMixin.wandb_is_initialized"]], "wandb_log() (weightsandbiasesmixin method)": [[122, "mltk.core.WeightsAndBiasesMixin.wandb_log"]], "wandb_model_checkpoint_callback (weightsandbiasesmixin property)": [[122, "mltk.core.WeightsAndBiasesMixin.wandb_model_checkpoint_callback"]], "wandb_save() (weightsandbiasesmixin method)": [[122, "mltk.core.WeightsAndBiasesMixin.wandb_save"]], "wandb_session_id (weightsandbiasesmixin property)": [[122, "mltk.core.WeightsAndBiasesMixin.wandb_session_id"]], "depthwiseseparableconv2d_arm() (in module mltk.models.shared.dsconv_arm)": [[123, "mltk.models.shared.dsconv_arm.DepthwiseSeparableConv2D_ARM"]], "fullyconnectedautoencoder() (in module mltk.models.shared.fully_connected_autoencoder)": [[123, "mltk.models.shared.fully_connected_autoencoder.FullyConnectedAutoEncoder"]], "mobilenetv1() (in module mltk.models.shared.mobilenet_v1)": [[123, "mltk.models.shared.mobilenet_v1.MobileNetV1"]], "mobilenetv2() (in module mltk.models.shared.mobilenet_v2)": [[123, "mltk.models.shared.mobilenet_v2.MobileNetV2"]], "resnet10v1() (in module mltk.models.shared.resnet_v1)": [[123, "mltk.models.shared.resnet_v1.ResNet10V1"]], "tenet() (in module mltk.models.shared.tenet)": [[123, "mltk.models.shared.tenet.TENet"]], "mltk.models.examples.audio_example1": [[124, "module-mltk.models.examples.audio_example1"]], "mltk.models.examples.audio_tf_dataset": [[125, "module-mltk.models.examples.audio_tf_dataset"]], "mltk.models.examples.autoencoder_example": [[126, "module-mltk.models.examples.autoencoder_example"]], "mltk.models.examples.basic_example": [[127, "module-mltk.models.examples.basic_example"]], "mltk.models.examples.basic_tf_dataset_example": [[128, "module-mltk.models.examples.basic_tf_dataset_example"]], "mltk.models.examples.binary_classification": [[129, "module-mltk.models.examples.binary_classification"]], "mltk.models.examples.conv1d_example": [[130, "module-mltk.models.examples.conv1d_example"]], "mltk.models.examples.image_example1": [[131, "module-mltk.models.examples.image_example1"]], "mltk.models.examples.image_tf_dataset": [[132, "module-mltk.models.examples.image_tf_dataset"]], "mltk.models.examples.siamese_contrastive": [[134, "module-mltk.models.examples.siamese_contrastive"]], "mltk.models.siliconlabs.fingerprint_signature_generator": [[136, "module-mltk.models.siliconlabs.fingerprint_signature_generator"]], "mltk.models.siliconlabs.keyword_spotting_alexa": [[138, "module-mltk.models.siliconlabs.keyword_spotting_alexa"]], "mltk.models.siliconlabs.keyword_spotting_mobilenetv2": [[139, "module-mltk.models.siliconlabs.keyword_spotting_mobilenetv2"]], "mltk.models.siliconlabs.keyword_spotting_on_off": [[140, "module-mltk.models.siliconlabs.keyword_spotting_on_off"]], "mltk.models.siliconlabs.keyword_spotting_on_off_v2": [[141, "module-mltk.models.siliconlabs.keyword_spotting_on_off_v2"]], "mltk.models.siliconlabs.keyword_spotting_pacman": [[142, "module-mltk.models.siliconlabs.keyword_spotting_pacman"]], "mltk.models.siliconlabs.keyword_spotting_pacman_v2": [[143, "module-mltk.models.siliconlabs.keyword_spotting_pacman_v2"]], "mltk.models.siliconlabs.keyword_spotting_pacman_v3": [[144, "module-mltk.models.siliconlabs.keyword_spotting_pacman_v3"]], "mltk.models.siliconlabs.keyword_spotting_with_transfer_learning": [[145, "module-mltk.models.siliconlabs.keyword_spotting_with_transfer_learning"]], "mltk.models.siliconlabs.rock_paper_scissors": [[146, "module-mltk.models.siliconlabs.rock_paper_scissors"]], "mltk.models.tflite_micro.tflite_micro_magic_wand": [[148, "module-mltk.models.tflite_micro.tflite_micro_magic_wand"]], "mltk.models.tflite_micro.tflite_micro_speech": [[149, "module-mltk.models.tflite_micro.tflite_micro_speech"]], "mltk.models.tinyml.anomaly_detection": [[150, "module-mltk.models.tinyml.anomaly_detection"]], "mltk.models.tinyml.image_classification": [[151, "module-mltk.models.tinyml.image_classification"]], "mltk.models.tinyml.keyword_spotting": [[153, "module-mltk.models.tinyml.keyword_spotting"]], "mltk.models.tinyml.visual_wake_words": [[154, "module-mltk.models.tinyml.visual_wake_words"]], "autoencoderevaluationresults (class in mltk.core)": [[155, "mltk.core.AutoEncoderEvaluationResults"]], "classifierevaluationresults (class in mltk.core)": [[155, "mltk.core.ClassifierEvaluationResults"]], "evaluationresults (class in mltk.core)": [[155, "mltk.core.EvaluationResults"]], "__init__() (autoencoderevaluationresults method)": [[155, "mltk.core.AutoEncoderEvaluationResults.__init__"]], "__init__() (classifierevaluationresults method)": [[155, "mltk.core.ClassifierEvaluationResults.__init__"]], "__init__() (evaluationresults method)": [[155, "mltk.core.EvaluationResults.__init__"]], "calculate() (autoencoderevaluationresults method)": [[155, "mltk.core.AutoEncoderEvaluationResults.calculate"]], "calculate() (classifierevaluationresults method)": [[155, "mltk.core.ClassifierEvaluationResults.calculate"]], "class_accuracies (classifierevaluationresults property)": [[155, "mltk.core.ClassifierEvaluationResults.class_accuracies"]], "class_stats (autoencoderevaluationresults property)": [[155, "mltk.core.AutoEncoderEvaluationResults.class_stats"]], "classes (autoencoderevaluationresults property)": [[155, "mltk.core.AutoEncoderEvaluationResults.classes"]], "classes (classifierevaluationresults property)": [[155, "mltk.core.ClassifierEvaluationResults.classes"]], "confusion_matrix (classifierevaluationresults property)": [[155, "mltk.core.ClassifierEvaluationResults.confusion_matrix"]], "evaluate_autoencoder() (in module mltk.core)": [[155, "mltk.core.evaluate_autoencoder"]], "evaluate_classifier() (in module mltk.core)": [[155, "mltk.core.evaluate_classifier"]], "evaluate_model() (in module mltk.core)": [[155, "mltk.core.evaluate_model"]], "false_positive_rate (classifierevaluationresults property)": [[155, "mltk.core.ClassifierEvaluationResults.false_positive_rate"]], "fpr (classifierevaluationresults property)": [[155, "mltk.core.ClassifierEvaluationResults.fpr"]], "generate_plots() (autoencoderevaluationresults method)": [[155, "mltk.core.AutoEncoderEvaluationResults.generate_plots"]], "generate_plots() (classifierevaluationresults method)": [[155, "mltk.core.ClassifierEvaluationResults.generate_plots"]], "generate_plots() (evaluationresults method)": [[155, "mltk.core.EvaluationResults.generate_plots"]], "generate_summary() (autoencoderevaluationresults method)": [[155, "mltk.core.AutoEncoderEvaluationResults.generate_summary"]], "generate_summary() (classifierevaluationresults method)": [[155, "mltk.core.ClassifierEvaluationResults.generate_summary"]], "generate_summary() (evaluationresults method)": [[155, "mltk.core.EvaluationResults.generate_summary"]], "model_type (evaluationresults property)": [[155, "mltk.core.EvaluationResults.model_type"]], "name (evaluationresults property)": [[155, "mltk.core.EvaluationResults.name"]], "overall_accuracy (autoencoderevaluationresults property)": [[155, "mltk.core.AutoEncoderEvaluationResults.overall_accuracy"]], "overall_accuracy (classifierevaluationresults property)": [[155, "mltk.core.ClassifierEvaluationResults.overall_accuracy"]], "overall_fpr (autoencoderevaluationresults property)": [[155, "mltk.core.AutoEncoderEvaluationResults.overall_fpr"]], "overall_pr_accuracy (autoencoderevaluationresults property)": [[155, "mltk.core.AutoEncoderEvaluationResults.overall_pr_accuracy"]], "overall_precision (autoencoderevaluationresults property)": [[155, "mltk.core.AutoEncoderEvaluationResults.overall_precision"]], "overall_recall (autoencoderevaluationresults property)": [[155, "mltk.core.AutoEncoderEvaluationResults.overall_recall"]], "overall_roc_auc (autoencoderevaluationresults property)": [[155, "mltk.core.AutoEncoderEvaluationResults.overall_roc_auc"]], "overall_thresholds (autoencoderevaluationresults property)": [[155, "mltk.core.AutoEncoderEvaluationResults.overall_thresholds"]], "overall_tpr (autoencoderevaluationresults property)": [[155, "mltk.core.AutoEncoderEvaluationResults.overall_tpr"]], "precision (classifierevaluationresults property)": [[155, "mltk.core.ClassifierEvaluationResults.precision"]], "recall (classifierevaluationresults property)": [[155, "mltk.core.ClassifierEvaluationResults.recall"]], "roc_auc (classifierevaluationresults property)": [[155, "mltk.core.ClassifierEvaluationResults.roc_auc"]], "roc_auc_avg (classifierevaluationresults property)": [[155, "mltk.core.ClassifierEvaluationResults.roc_auc_avg"]], "roc_thresholds (classifierevaluationresults property)": [[155, "mltk.core.ClassifierEvaluationResults.roc_thresholds"]], "tpr (classifierevaluationresults property)": [[155, "mltk.core.ClassifierEvaluationResults.tpr"]], "profilinglayerresult (class in mltk.core.profiling_results)": [[157, "mltk.core.profiling_results.ProfilingLayerResult"]], "profilingmodelresults (class in mltk.core.profiling_results)": [[157, "mltk.core.profiling_results.ProfilingModelResults"]], "__init__() (profilinglayerresult method)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.__init__"]], "__init__() (profilingmodelresults method)": [[157, "mltk.core.profiling_results.ProfilingModelResults.__init__"]], "accelerator (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.accelerator"]], "accelerator_cycles (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.accelerator_cycles"]], "accelerator_cycles (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.accelerator_cycles"]], "cpu_clock_rate (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.cpu_clock_rate"]], "cpu_cycles (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.cpu_cycles"]], "cpu_cycles (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.cpu_cycles"]], "cpu_utilization (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.cpu_utilization"]], "energy (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.energy"]], "energy (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.energy"]], "error_msg (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.error_msg"]], "flatbuffer_size (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.flatbuffer_size"]], "generate_report() (profilingmodelresults method)": [[157, "mltk.core.profiling_results.ProfilingModelResults.generate_report"]], "get_summary() (profilinglayerresult method)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.get_summary"]], "get_summary() (profilingmodelresults method)": [[157, "mltk.core.profiling_results.ProfilingModelResults.get_summary"]], "index (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.index"]], "input_dtype_str (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.input_dtype_str"]], "input_dtype_str (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.input_dtype_str"]], "input_shape_str (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.input_shape_str"]], "input_shape_str (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.input_shape_str"]], "is_accelerated (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.is_accelerated"]], "is_simulated (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.is_simulated"]], "is_unsupported (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.is_unsupported"]], "layers (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.layers"]], "macs (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.macs"]], "macs (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.macs"]], "n_layers (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.n_layers"]], "n_unsupported_layers (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.n_unsupported_layers"]], "name (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.name"]], "name (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.name"]], "opcode (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.opcode"]], "opcode_str (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.opcode_str"]], "ops (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.ops"]], "ops (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.ops"]], "options_str (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.options_str"]], "output_dtype_str (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.output_dtype_str"]], "output_dtype_str (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.output_dtype_str"]], "output_shape_str (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.output_shape_str"]], "output_shape_str (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.output_shape_str"]], "platform (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.platform"]], "profile_model() (in module mltk.core)": [[157, "mltk.core.profile_model"]], "runtime_memory_bytes (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.runtime_memory_bytes"]], "stat_total() (profilingmodelresults method)": [[157, "mltk.core.profiling_results.ProfilingModelResults.stat_total"]], "tflite_layer (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.tflite_layer"]], "tflite_model (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.tflite_model"]], "time (profilinglayerresult property)": [[157, "mltk.core.profiling_results.ProfilingLayerResult.time"]], "time (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.time"]], "to_csv() (profilingmodelresults method)": [[157, "mltk.core.profiling_results.ProfilingModelResults.to_csv"]], "to_dict() (profilingmodelresults method)": [[157, "mltk.core.profiling_results.ProfilingModelResults.to_dict"]], "to_json() (profilingmodelresults method)": [[157, "mltk.core.profiling_results.ProfilingModelResults.to_json"]], "to_string() (profilingmodelresults method)": [[157, "mltk.core.profiling_results.ProfilingModelResults.to_string"]], "unsupported_layers (profilingmodelresults property)": [[157, "mltk.core.profiling_results.ProfilingModelResults.unsupported_layers"]], "quantize_model() (in module mltk.core)": [[158, "mltk.core.quantize_model"]], "summarize_model() (in module mltk.core)": [[159, "mltk.core.summarize_model"]], "trainingresults (class in mltk.core.train_model)": [[160, "mltk.core.train_model.TrainingResults"]], "__init__() (trainingresults method)": [[160, "mltk.core.train_model.TrainingResults.__init__"]], "asdict() (trainingresults method)": [[160, "mltk.core.train_model.TrainingResults.asdict"]], "epochs (trainingresults attribute)": [[160, "mltk.core.train_model.TrainingResults.epochs"]], "get_best_metric() (trainingresults method)": [[160, "mltk.core.train_model.TrainingResults.get_best_metric"]], "history (trainingresults attribute)": [[160, "mltk.core.train_model.TrainingResults.history"]], "keras_model (trainingresults attribute)": [[160, "mltk.core.train_model.TrainingResults.keras_model"]], "mltk_model (trainingresults attribute)": [[160, "mltk.core.train_model.TrainingResults.mltk_model"]], "model_archive_path (trainingresults property)": [[160, "mltk.core.train_model.TrainingResults.model_archive_path"]], "params (trainingresults attribute)": [[160, "mltk.core.train_model.TrainingResults.params"]], "train_model() (in module mltk.core)": [[160, "mltk.core.train_model"]], "update_model_parameters() (in module mltk.core)": [[161, "mltk.core.update_model_parameters"]], "view_model() (in module mltk.core)": [[162, "mltk.core.view_model"]], "tflitemicroaccelerator (class in mltk.core.tflite_micro.tflite_micro_accelerator)": [[163, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator"]], "__init__() (tflitemicroaccelerator method)": [[163, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.__init__"]], "accelerator_wrapper (tflitemicroaccelerator property)": [[163, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.accelerator_wrapper"]], "api_version (tflitemicroaccelerator property)": [[163, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.api_version"]], "compile_model() (tflitemicroaccelerator method)": [[163, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.compile_model"]], "enable_data_recorder() (tflitemicroaccelerator method)": [[163, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.enable_data_recorder"]], "enable_program_recorder() (tflitemicroaccelerator method)": [[163, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.enable_program_recorder"]], "estimate_profiling_results() (tflitemicroaccelerator method)": [[163, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.estimate_profiling_results"]], "git_hash (tflitemicroaccelerator property)": [[163, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.git_hash"]], "name (tflitemicroaccelerator property)": [[163, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.name"]], "supports_model_compilation (tflitemicroaccelerator property)": [[163, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.supports_model_compilation"]], "tflitemicrolayererror (class in mltk.core.tflite_micro)": [[165, "mltk.core.tflite_micro.TfliteMicroLayerError"]], "__init__() (tflitemicrolayererror method)": [[165, "mltk.core.tflite_micro.TfliteMicroLayerError.__init__"]], "index (tflitemicrolayererror property)": [[165, "mltk.core.tflite_micro.TfliteMicroLayerError.index"]], "msg (tflitemicrolayererror property)": [[165, "mltk.core.tflite_micro.TfliteMicroLayerError.msg"]], "name (tflitemicrolayererror property)": [[165, "mltk.core.tflite_micro.TfliteMicroLayerError.name"]], "tflitemicromodel (class in mltk.core.tflite_micro)": [[166, "mltk.core.tflite_micro.TfliteMicroModel"]], "__init__() (tflitemicromodel method)": [[166, "mltk.core.tflite_micro.TfliteMicroModel.__init__"]], "accelerator (tflitemicromodel property)": [[166, "mltk.core.tflite_micro.TfliteMicroModel.accelerator"]], "details (tflitemicromodel property)": [[166, "mltk.core.tflite_micro.TfliteMicroModel.details"]], "get_layer_error() (tflitemicromodel method)": [[166, "mltk.core.tflite_micro.TfliteMicroModel.get_layer_error"]], "get_profiling_results() (tflitemicromodel method)": [[166, "mltk.core.tflite_micro.TfliteMicroModel.get_profiling_results"]], "get_recorded_data() (tflitemicromodel method)": [[166, "mltk.core.tflite_micro.TfliteMicroModel.get_recorded_data"]], "input() (tflitemicromodel method)": [[166, "mltk.core.tflite_micro.TfliteMicroModel.input"]], "input_size (tflitemicromodel property)": [[166, "mltk.core.tflite_micro.TfliteMicroModel.input_size"]], "invoke() (tflitemicromodel method)": [[166, "mltk.core.tflite_micro.TfliteMicroModel.invoke"]], "is_profiler_enabled (tflitemicromodel property)": [[166, "mltk.core.tflite_micro.TfliteMicroModel.is_profiler_enabled"]], "is_tensor_recorder_enabled (tflitemicromodel property)": [[166, "mltk.core.tflite_micro.TfliteMicroModel.is_tensor_recorder_enabled"]], "layer_errors (tflitemicromodel property)": [[166, "mltk.core.tflite_micro.TfliteMicroModel.layer_errors"]], "output() (tflitemicromodel method)": [[166, "mltk.core.tflite_micro.TfliteMicroModel.output"]], "output_size (tflitemicromodel property)": [[166, "mltk.core.tflite_micro.TfliteMicroModel.output_size"]], "tflitemicromodeldetails (class in mltk.core.tflite_micro)": [[167, "mltk.core.tflite_micro.TfliteMicroModelDetails"]], "__init__() (tflitemicromodeldetails method)": [[167, "mltk.core.tflite_micro.TfliteMicroModelDetails.__init__"]], "accelerator (tflitemicromodeldetails property)": [[167, "mltk.core.tflite_micro.TfliteMicroModelDetails.accelerator"]], "classes (tflitemicromodeldetails property)": [[167, "mltk.core.tflite_micro.TfliteMicroModelDetails.classes"]], "date (tflitemicromodeldetails property)": [[167, "mltk.core.tflite_micro.TfliteMicroModelDetails.date"]], "description (tflitemicromodeldetails property)": [[167, "mltk.core.tflite_micro.TfliteMicroModelDetails.description"]], "hash (tflitemicromodeldetails property)": [[167, "mltk.core.tflite_micro.TfliteMicroModelDetails.hash"]], "name (tflitemicromodeldetails property)": [[167, "mltk.core.tflite_micro.TfliteMicroModelDetails.name"]], "runtime_memory_size (tflitemicromodeldetails property)": [[167, "mltk.core.tflite_micro.TfliteMicroModelDetails.runtime_memory_size"]], "version (tflitemicromodeldetails property)": [[167, "mltk.core.tflite_micro.TfliteMicroModelDetails.version"]], "tflitemicroprofiledlayerresult (class in mltk.core.tflite_micro)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult"]], "__init__() (tflitemicroprofiledlayerresult method)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.__init__"]], "__new__() (tflitemicroprofiledlayerresult method)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.__new__"]], "accelerator_cycles (tflitemicroprofiledlayerresult property)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.accelerator_cycles"]], "clear() (tflitemicroprofiledlayerresult method)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.clear"]], "copy() (tflitemicroprofiledlayerresult method)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.copy"]], "cpu_cycles (tflitemicroprofiledlayerresult property)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.cpu_cycles"]], "default_factory (tflitemicroprofiledlayerresult attribute)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.default_factory"]], "energy (tflitemicroprofiledlayerresult property)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.energy"]], "fromkeys() (tflitemicroprofiledlayerresult method)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.fromkeys"]], "get() (tflitemicroprofiledlayerresult method)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.get"]], "items() (tflitemicroprofiledlayerresult method)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.items"]], "keys() (tflitemicroprofiledlayerresult method)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.keys"]], "macs (tflitemicroprofiledlayerresult property)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.macs"]], "name (tflitemicroprofiledlayerresult property)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.name"]], "ops (tflitemicroprofiledlayerresult property)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.ops"]], "pop() (tflitemicroprofiledlayerresult method)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.pop"]], "popitem() (tflitemicroprofiledlayerresult method)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.popitem"]], "setdefault() (tflitemicroprofiledlayerresult method)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.setdefault"]], "time (tflitemicroprofiledlayerresult property)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.time"]], "update() (tflitemicroprofiledlayerresult method)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.update"]], "values() (tflitemicroprofiledlayerresult method)": [[168, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.values"]], "tflitemicro (class in mltk.core.tflite_micro)": [[169, "mltk.core.tflite_micro.TfliteMicro"]], "accelerator_is_supported() (tflitemicro static method)": [[169, "mltk.core.tflite_micro.TfliteMicro.accelerator_is_supported"]], "add_accelerator_path() (tflitemicro static method)": [[169, "mltk.core.tflite_micro.TfliteMicro.add_accelerator_path"]], "api_version() (tflitemicro static method)": [[169, "mltk.core.tflite_micro.TfliteMicro.api_version"]], "get_accelerator() (tflitemicro static method)": [[169, "mltk.core.tflite_micro.TfliteMicro.get_accelerator"]], "get_log_level() (tflitemicro static method)": [[169, "mltk.core.tflite_micro.TfliteMicro.get_log_level"]], "get_logger() (tflitemicro static method)": [[169, "mltk.core.tflite_micro.TfliteMicro.get_logger"]], "get_supported_accelerators() (tflitemicro static method)": [[169, "mltk.core.tflite_micro.TfliteMicro.get_supported_accelerators"]], "git_hash() (tflitemicro static method)": [[169, "mltk.core.tflite_micro.TfliteMicro.git_hash"]], "load_tflite_model() (tflitemicro static method)": [[169, "mltk.core.tflite_micro.TfliteMicro.load_tflite_model"]], "normalize_accelerator_name() (tflitemicro static method)": [[169, "mltk.core.tflite_micro.TfliteMicro.normalize_accelerator_name"]], "profile_model() (tflitemicro static method)": [[169, "mltk.core.tflite_micro.TfliteMicro.profile_model"]], "record_model() (tflitemicro static method)": [[169, "mltk.core.tflite_micro.TfliteMicro.record_model"]], "register_accelerator() (tflitemicro static method)": [[169, "mltk.core.tflite_micro.TfliteMicro.register_accelerator"]], "set_log_level() (tflitemicro static method)": [[169, "mltk.core.tflite_micro.TfliteMicro.set_log_level"]], "set_logger() (tflitemicro static method)": [[169, "mltk.core.tflite_micro.TfliteMicro.set_logger"]], "unload_model() (tflitemicro static method)": [[169, "mltk.core.tflite_micro.TfliteMicro.unload_model"]], "none (tfliteactivation attribute)": [[170, "mltk.core.TfliteActivation.NONE"]], "relu (tfliteactivation attribute)": [[170, "mltk.core.TfliteActivation.RELU"]], "relu6 (tfliteactivation attribute)": [[170, "mltk.core.TfliteActivation.RELU6"]], "relu_n1_to_1 (tfliteactivation attribute)": [[170, "mltk.core.TfliteActivation.RELU_N1_TO_1"]], "sign_bit (tfliteactivation attribute)": [[170, "mltk.core.TfliteActivation.SIGN_BIT"]], "tanh (tfliteactivation attribute)": [[170, "mltk.core.TfliteActivation.TANH"]], "tfliteactivation (class in mltk.core)": [[170, "mltk.core.TfliteActivation"]], "to_string() (tfliteactivation method)": [[170, "mltk.core.TfliteActivation.to_string"]], "tfliteaddlayer (class in mltk.core)": [[171, "mltk.core.TfliteAddLayer"]], "__init__() (tfliteaddlayer method)": [[171, "mltk.core.TfliteAddLayer.__init__"]], "activation (tfliteaddlayer property)": [[171, "mltk.core.TfliteAddLayer.activation"]], "from_flatbuffer() (tfliteaddlayer static method)": [[171, "mltk.core.TfliteAddLayer.from_flatbuffer"]], "get_input_data() (tfliteaddlayer method)": [[171, "mltk.core.TfliteAddLayer.get_input_data"]], "get_input_tensor() (tfliteaddlayer method)": [[171, "mltk.core.TfliteAddLayer.get_input_tensor"]], "get_output_data() (tfliteaddlayer method)": [[171, "mltk.core.TfliteAddLayer.get_output_data"]], "get_output_tensor() (tfliteaddlayer method)": [[171, "mltk.core.TfliteAddLayer.get_output_tensor"]], "index (tfliteaddlayer property)": [[171, "mltk.core.TfliteAddLayer.index"]], "input1_data (tfliteaddlayer property)": [[171, "mltk.core.TfliteAddLayer.input1_data"]], "input1_tensor (tfliteaddlayer property)": [[171, "mltk.core.TfliteAddLayer.input1_tensor"]], "input2_data (tfliteaddlayer property)": [[171, "mltk.core.TfliteAddLayer.input2_data"]], "input2_tensor (tfliteaddlayer property)": [[171, "mltk.core.TfliteAddLayer.input2_tensor"]], "inputs (tfliteaddlayer property)": [[171, "mltk.core.TfliteAddLayer.inputs"]], "metadata (tfliteaddlayer property)": [[171, "mltk.core.TfliteAddLayer.metadata"]], "model (tfliteaddlayer property)": [[171, "mltk.core.TfliteAddLayer.model"]], "n_inputs (tfliteaddlayer property)": [[171, "mltk.core.TfliteAddLayer.n_inputs"]], "n_outputs (tfliteaddlayer property)": [[171, "mltk.core.TfliteAddLayer.n_outputs"]], "name (tfliteaddlayer property)": [[171, "mltk.core.TfliteAddLayer.name"]], "opcode (tfliteaddlayer property)": [[171, "mltk.core.TfliteAddLayer.opcode"]], "opcode_str (tfliteaddlayer property)": [[171, "mltk.core.TfliteAddLayer.opcode_str"]], "options (tfliteaddlayer property)": [[171, "mltk.core.TfliteAddLayer.options"]], "output_data (tfliteaddlayer property)": [[171, "mltk.core.TfliteAddLayer.output_data"]], "output_tensor (tfliteaddlayer property)": [[171, "mltk.core.TfliteAddLayer.output_tensor"]], "outputs (tfliteaddlayer property)": [[171, "mltk.core.TfliteAddLayer.outputs"]], "tfliteconv2dlayer (class in mltk.core)": [[172, "mltk.core.TfliteConv2dLayer"]], "__init__() (tfliteconv2dlayer method)": [[172, "mltk.core.TfliteConv2dLayer.__init__"]], "activation (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.activation"]], "bias_data (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.bias_data"]], "bias_tensor (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.bias_tensor"]], "filters (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.filters"]], "filters_data (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.filters_data"]], "filters_tensor (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.filters_tensor"]], "from_flatbuffer() (tfliteconv2dlayer static method)": [[172, "mltk.core.TfliteConv2dLayer.from_flatbuffer"]], "get_input_data() (tfliteconv2dlayer method)": [[172, "mltk.core.TfliteConv2dLayer.get_input_data"]], "get_input_tensor() (tfliteconv2dlayer method)": [[172, "mltk.core.TfliteConv2dLayer.get_input_tensor"]], "get_output_data() (tfliteconv2dlayer method)": [[172, "mltk.core.TfliteConv2dLayer.get_output_data"]], "get_output_tensor() (tfliteconv2dlayer method)": [[172, "mltk.core.TfliteConv2dLayer.get_output_tensor"]], "index (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.index"]], "input_data (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.input_data"]], "input_tensor (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.input_tensor"]], "inputs (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.inputs"]], "kernel_size (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.kernel_size"]], "metadata (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.metadata"]], "model (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.model"]], "n_inputs (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.n_inputs"]], "n_outputs (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.n_outputs"]], "name (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.name"]], "opcode (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.opcode"]], "opcode_str (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.opcode_str"]], "options (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.options"]], "output_data (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.output_data"]], "output_tensor (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.output_tensor"]], "outputs (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.outputs"]], "padding (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.padding"]], "params (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.params"]], "strides (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.strides"]], "use_bias (tfliteconv2dlayer property)": [[172, "mltk.core.TfliteConv2dLayer.use_bias"]], "tfliteconv2dlayeroptions (class in mltk.core)": [[173, "mltk.core.TfliteConv2DLayerOptions"]], "__init__() (tfliteconv2dlayeroptions method)": [[173, "mltk.core.TfliteConv2DLayerOptions.__init__"]], "activation (tfliteconv2dlayeroptions property)": [[173, "mltk.core.TfliteConv2DLayerOptions.activation"]], "activation_str (tfliteconv2dlayeroptions property)": [[173, "mltk.core.TfliteConv2DLayerOptions.activation_str"]], "options_type (tfliteconv2dlayeroptions property)": [[173, "mltk.core.TfliteConv2DLayerOptions.options_type"]], "options_type_str (tfliteconv2dlayeroptions property)": [[173, "mltk.core.TfliteConv2DLayerOptions.options_type_str"]], "padding (tfliteconv2dlayeroptions property)": [[173, "mltk.core.TfliteConv2DLayerOptions.padding"]], "padding_str (tfliteconv2dlayeroptions property)": [[173, "mltk.core.TfliteConv2DLayerOptions.padding_str"]], "stride_height (tfliteconv2dlayeroptions property)": [[173, "mltk.core.TfliteConv2DLayerOptions.stride_height"]], "stride_width (tfliteconv2dlayeroptions property)": [[173, "mltk.core.TfliteConv2DLayerOptions.stride_width"]], "tfliteconvparams (class in mltk.core)": [[174, "mltk.core.TfliteConvParams"]], "__init__() (tfliteconvparams method)": [[174, "mltk.core.TfliteConvParams.__init__"]], "calculate() (tfliteconvparams static method)": [[174, "mltk.core.TfliteConvParams.calculate"]], "dilation_height_factor (tfliteconvparams attribute)": [[174, "mltk.core.TfliteConvParams.dilation_height_factor"]], "dilation_width_factor (tfliteconvparams attribute)": [[174, "mltk.core.TfliteConvParams.dilation_width_factor"]], "input_offset (tfliteconvparams attribute)": [[174, "mltk.core.TfliteConvParams.input_offset"]], "output_offset (tfliteconvparams attribute)": [[174, "mltk.core.TfliteConvParams.output_offset"]], "padding (tfliteconvparams attribute)": [[174, "mltk.core.TfliteConvParams.padding"]], "per_channel_output_multiplier (tfliteconvparams attribute)": [[174, "mltk.core.TfliteConvParams.per_channel_output_multiplier"]], "per_channel_output_shift (tfliteconvparams attribute)": [[174, "mltk.core.TfliteConvParams.per_channel_output_shift"]], "quantized_activation_max (tfliteconvparams attribute)": [[174, "mltk.core.TfliteConvParams.quantized_activation_max"]], "quantized_activation_min (tfliteconvparams attribute)": [[174, "mltk.core.TfliteConvParams.quantized_activation_min"]], "stride_height (tfliteconvparams attribute)": [[174, "mltk.core.TfliteConvParams.stride_height"]], "stride_width (tfliteconvparams attribute)": [[174, "mltk.core.TfliteConvParams.stride_width"]], "weights_offset (tfliteconvparams attribute)": [[174, "mltk.core.TfliteConvParams.weights_offset"]], "tflitedepthwiseconv2dlayer (class in mltk.core)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer"]], "__init__() (tflitedepthwiseconv2dlayer method)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.__init__"]], "activation (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.activation"]], "bias_data (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.bias_data"]], "bias_tensor (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.bias_tensor"]], "filters_data (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.filters_data"]], "filters_tensor (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.filters_tensor"]], "from_flatbuffer() (tflitedepthwiseconv2dlayer static method)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.from_flatbuffer"]], "get_input_data() (tflitedepthwiseconv2dlayer method)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.get_input_data"]], "get_input_tensor() (tflitedepthwiseconv2dlayer method)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.get_input_tensor"]], "get_output_data() (tflitedepthwiseconv2dlayer method)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.get_output_data"]], "get_output_tensor() (tflitedepthwiseconv2dlayer method)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.get_output_tensor"]], "index (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.index"]], "input_data (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.input_data"]], "input_tensor (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.input_tensor"]], "inputs (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.inputs"]], "kernel_size (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.kernel_size"]], "metadata (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.metadata"]], "model (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.model"]], "multiplier (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.multiplier"]], "n_inputs (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.n_inputs"]], "n_outputs (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.n_outputs"]], "name (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.name"]], "opcode (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.opcode"]], "opcode_str (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.opcode_str"]], "options (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.options"]], "output_data (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.output_data"]], "output_tensor (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.output_tensor"]], "outputs (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.outputs"]], "padding (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.padding"]], "params (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.params"]], "strides (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.strides"]], "use_bias (tflitedepthwiseconv2dlayer property)": [[175, "mltk.core.TfliteDepthwiseConv2dLayer.use_bias"]], "tflitedepthwiseconv2dlayeroptions (class in mltk.core)": [[176, "mltk.core.TfliteDepthwiseConv2DLayerOptions"]], "__init__() (tflitedepthwiseconv2dlayeroptions method)": [[176, "mltk.core.TfliteDepthwiseConv2DLayerOptions.__init__"]], "activation (tflitedepthwiseconv2dlayeroptions property)": [[176, "mltk.core.TfliteDepthwiseConv2DLayerOptions.activation"]], "activation_str (tflitedepthwiseconv2dlayeroptions property)": [[176, "mltk.core.TfliteDepthwiseConv2DLayerOptions.activation_str"]], "multiplier (tflitedepthwiseconv2dlayeroptions property)": [[176, "mltk.core.TfliteDepthwiseConv2DLayerOptions.multiplier"]], "options_type (tflitedepthwiseconv2dlayeroptions property)": [[176, "mltk.core.TfliteDepthwiseConv2DLayerOptions.options_type"]], "options_type_str (tflitedepthwiseconv2dlayeroptions property)": [[176, "mltk.core.TfliteDepthwiseConv2DLayerOptions.options_type_str"]], "padding (tflitedepthwiseconv2dlayeroptions property)": [[176, "mltk.core.TfliteDepthwiseConv2DLayerOptions.padding"]], "padding_str (tflitedepthwiseconv2dlayeroptions property)": [[176, "mltk.core.TfliteDepthwiseConv2DLayerOptions.padding_str"]], "stride_height (tflitedepthwiseconv2dlayeroptions property)": [[176, "mltk.core.TfliteDepthwiseConv2DLayerOptions.stride_height"]], "stride_width (tflitedepthwiseconv2dlayeroptions property)": [[176, "mltk.core.TfliteDepthwiseConv2DLayerOptions.stride_width"]], "tflitedepthwiseconvparams (class in mltk.core)": [[177, "mltk.core.TfliteDepthwiseConvParams"]], "__init__() (tflitedepthwiseconvparams method)": [[177, "mltk.core.TfliteDepthwiseConvParams.__init__"]], "calculate() (tflitedepthwiseconvparams static method)": [[177, "mltk.core.TfliteDepthwiseConvParams.calculate"]], "depth_multiplier (tflitedepthwiseconvparams attribute)": [[177, "mltk.core.TfliteDepthwiseConvParams.depth_multiplier"]], "dilation_height_factor (tflitedepthwiseconvparams attribute)": [[177, "mltk.core.TfliteDepthwiseConvParams.dilation_height_factor"]], "dilation_width_factor (tflitedepthwiseconvparams attribute)": [[177, "mltk.core.TfliteDepthwiseConvParams.dilation_width_factor"]], "input_offset (tflitedepthwiseconvparams attribute)": [[177, "mltk.core.TfliteDepthwiseConvParams.input_offset"]], "output_offset (tflitedepthwiseconvparams attribute)": [[177, "mltk.core.TfliteDepthwiseConvParams.output_offset"]], "padding (tflitedepthwiseconvparams attribute)": [[177, "mltk.core.TfliteDepthwiseConvParams.padding"]], "per_channel_output_multiplier (tflitedepthwiseconvparams attribute)": [[177, "mltk.core.TfliteDepthwiseConvParams.per_channel_output_multiplier"]], "per_channel_output_shift (tflitedepthwiseconvparams attribute)": [[177, "mltk.core.TfliteDepthwiseConvParams.per_channel_output_shift"]], "quantized_activation_max (tflitedepthwiseconvparams attribute)": [[177, "mltk.core.TfliteDepthwiseConvParams.quantized_activation_max"]], "quantized_activation_min (tflitedepthwiseconvparams attribute)": [[177, "mltk.core.TfliteDepthwiseConvParams.quantized_activation_min"]], "stride_height (tflitedepthwiseconvparams attribute)": [[177, "mltk.core.TfliteDepthwiseConvParams.stride_height"]], "stride_width (tflitedepthwiseconvparams attribute)": [[177, "mltk.core.TfliteDepthwiseConvParams.stride_width"]], "weights_offset (tflitedepthwiseconvparams attribute)": [[177, "mltk.core.TfliteDepthwiseConvParams.weights_offset"]], "tflitedequantizelayer (class in mltk.core)": [[178, "mltk.core.TfliteDequantizeLayer"]], "__init__() (tflitedequantizelayer method)": [[178, "mltk.core.TfliteDequantizeLayer.__init__"]], "from_flatbuffer() (tflitedequantizelayer static method)": [[178, "mltk.core.TfliteDequantizeLayer.from_flatbuffer"]], "get_input_data() (tflitedequantizelayer method)": [[178, "mltk.core.TfliteDequantizeLayer.get_input_data"]], "get_input_tensor() (tflitedequantizelayer method)": [[178, "mltk.core.TfliteDequantizeLayer.get_input_tensor"]], "get_output_data() (tflitedequantizelayer method)": [[178, "mltk.core.TfliteDequantizeLayer.get_output_data"]], "get_output_tensor() (tflitedequantizelayer method)": [[178, "mltk.core.TfliteDequantizeLayer.get_output_tensor"]], "index (tflitedequantizelayer property)": [[178, "mltk.core.TfliteDequantizeLayer.index"]], "input_data (tflitedequantizelayer property)": [[178, "mltk.core.TfliteDequantizeLayer.input_data"]], "input_tensor (tflitedequantizelayer property)": [[178, "mltk.core.TfliteDequantizeLayer.input_tensor"]], "inputs (tflitedequantizelayer property)": [[178, "mltk.core.TfliteDequantizeLayer.inputs"]], "metadata (tflitedequantizelayer property)": [[178, "mltk.core.TfliteDequantizeLayer.metadata"]], "model (tflitedequantizelayer property)": [[178, "mltk.core.TfliteDequantizeLayer.model"]], "n_inputs (tflitedequantizelayer property)": [[178, "mltk.core.TfliteDequantizeLayer.n_inputs"]], "n_outputs (tflitedequantizelayer property)": [[178, "mltk.core.TfliteDequantizeLayer.n_outputs"]], "name (tflitedequantizelayer property)": [[178, "mltk.core.TfliteDequantizeLayer.name"]], "opcode (tflitedequantizelayer property)": [[178, "mltk.core.TfliteDequantizeLayer.opcode"]], "opcode_str (tflitedequantizelayer property)": [[178, "mltk.core.TfliteDequantizeLayer.opcode_str"]], "options (tflitedequantizelayer property)": [[178, "mltk.core.TfliteDequantizeLayer.options"]], "output_data (tflitedequantizelayer property)": [[178, "mltk.core.TfliteDequantizeLayer.output_data"]], "output_tensor (tflitedequantizelayer property)": [[178, "mltk.core.TfliteDequantizeLayer.output_tensor"]], "outputs (tflitedequantizelayer property)": [[178, "mltk.core.TfliteDequantizeLayer.outputs"]], "flatbufferdictionary (class in mltk.core.tflite_model_parameters.flatbuffer_dictionary)": [[179, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary"]], "__init__() (flatbufferdictionary method)": [[179, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.__init__"]], "deserialize() (flatbufferdictionary static method)": [[179, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.deserialize"]], "put() (flatbufferdictionary method)": [[179, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.put"]], "serialize() (flatbufferdictionary method)": [[179, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.serialize"]], "summary() (flatbufferdictionary method)": [[179, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.summary"]], "tflitefullyconnectedlayer (class in mltk.core)": [[180, "mltk.core.TfliteFullyConnectedLayer"]], "__init__() (tflitefullyconnectedlayer method)": [[180, "mltk.core.TfliteFullyConnectedLayer.__init__"]], "accumulator_depth (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.accumulator_depth"]], "activation (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.activation"]], "bias_data (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.bias_data"]], "bias_tensor (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.bias_tensor"]], "from_flatbuffer() (tflitefullyconnectedlayer static method)": [[180, "mltk.core.TfliteFullyConnectedLayer.from_flatbuffer"]], "get_input_data() (tflitefullyconnectedlayer method)": [[180, "mltk.core.TfliteFullyConnectedLayer.get_input_data"]], "get_input_tensor() (tflitefullyconnectedlayer method)": [[180, "mltk.core.TfliteFullyConnectedLayer.get_input_tensor"]], "get_output_data() (tflitefullyconnectedlayer method)": [[180, "mltk.core.TfliteFullyConnectedLayer.get_output_data"]], "get_output_tensor() (tflitefullyconnectedlayer method)": [[180, "mltk.core.TfliteFullyConnectedLayer.get_output_tensor"]], "index (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.index"]], "input_data (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.input_data"]], "input_tensor (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.input_tensor"]], "inputs (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.inputs"]], "metadata (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.metadata"]], "model (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.model"]], "n_inputs (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.n_inputs"]], "n_outputs (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.n_outputs"]], "name (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.name"]], "opcode (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.opcode"]], "opcode_str (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.opcode_str"]], "options (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.options"]], "output_data (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.output_data"]], "output_tensor (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.output_tensor"]], "outputs (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.outputs"]], "params (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.params"]], "units (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.units"]], "use_bias (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.use_bias"]], "weights_data (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.weights_data"]], "weights_tensor (tflitefullyconnectedlayer property)": [[180, "mltk.core.TfliteFullyConnectedLayer.weights_tensor"]], "tflitefullyconnectedlayeroptions (class in mltk.core)": [[181, "mltk.core.TfliteFullyConnectedLayerOptions"]], "__init__() (tflitefullyconnectedlayeroptions method)": [[181, "mltk.core.TfliteFullyConnectedLayerOptions.__init__"]], "activation (tflitefullyconnectedlayeroptions property)": [[181, "mltk.core.TfliteFullyConnectedLayerOptions.activation"]], "activation_str (tflitefullyconnectedlayeroptions property)": [[181, "mltk.core.TfliteFullyConnectedLayerOptions.activation_str"]], "options_type (tflitefullyconnectedlayeroptions property)": [[181, "mltk.core.TfliteFullyConnectedLayerOptions.options_type"]], "options_type_str (tflitefullyconnectedlayeroptions property)": [[181, "mltk.core.TfliteFullyConnectedLayerOptions.options_type_str"]], "tflitefullyconnectedparams (class in mltk.core)": [[182, "mltk.core.TfliteFullyConnectedParams"]], "__init__() (tflitefullyconnectedparams method)": [[182, "mltk.core.TfliteFullyConnectedParams.__init__"]], "calculate() (tflitefullyconnectedparams static method)": [[182, "mltk.core.TfliteFullyConnectedParams.calculate"]], "input_offset (tflitefullyconnectedparams attribute)": [[182, "mltk.core.TfliteFullyConnectedParams.input_offset"]], "output_multiplier (tflitefullyconnectedparams attribute)": [[182, "mltk.core.TfliteFullyConnectedParams.output_multiplier"]], "output_offset (tflitefullyconnectedparams attribute)": [[182, "mltk.core.TfliteFullyConnectedParams.output_offset"]], "output_shift (tflitefullyconnectedparams attribute)": [[182, "mltk.core.TfliteFullyConnectedParams.output_shift"]], "quantized_activation_max (tflitefullyconnectedparams attribute)": [[182, "mltk.core.TfliteFullyConnectedParams.quantized_activation_max"]], "quantized_activation_min (tflitefullyconnectedparams attribute)": [[182, "mltk.core.TfliteFullyConnectedParams.quantized_activation_min"]], "weights_offset (tflitefullyconnectedparams attribute)": [[182, "mltk.core.TfliteFullyConnectedParams.weights_offset"]], "tflitelayer (class in mltk.core)": [[184, "mltk.core.TfliteLayer"]], "__init__() (tflitelayer method)": [[184, "mltk.core.TfliteLayer.__init__"]], "from_flatbuffer() (tflitelayer static method)": [[184, "mltk.core.TfliteLayer.from_flatbuffer"]], "get_input_data() (tflitelayer method)": [[184, "mltk.core.TfliteLayer.get_input_data"]], "get_input_tensor() (tflitelayer method)": [[184, "mltk.core.TfliteLayer.get_input_tensor"]], "get_output_data() (tflitelayer method)": [[184, "mltk.core.TfliteLayer.get_output_data"]], "get_output_tensor() (tflitelayer method)": [[184, "mltk.core.TfliteLayer.get_output_tensor"]], "index (tflitelayer property)": [[184, "mltk.core.TfliteLayer.index"]], "inputs (tflitelayer property)": [[184, "mltk.core.TfliteLayer.inputs"]], "metadata (tflitelayer property)": [[184, "mltk.core.TfliteLayer.metadata"]], "model (tflitelayer property)": [[184, "mltk.core.TfliteLayer.model"]], "n_inputs (tflitelayer property)": [[184, "mltk.core.TfliteLayer.n_inputs"]], "n_outputs (tflitelayer property)": [[184, "mltk.core.TfliteLayer.n_outputs"]], "name (tflitelayer property)": [[184, "mltk.core.TfliteLayer.name"]], "opcode (tflitelayer property)": [[184, "mltk.core.TfliteLayer.opcode"]], "opcode_str (tflitelayer property)": [[184, "mltk.core.TfliteLayer.opcode_str"]], "options (tflitelayer property)": [[184, "mltk.core.TfliteLayer.options"]], "outputs (tflitelayer property)": [[184, "mltk.core.TfliteLayer.outputs"]], "tflitemodel (class in mltk.core)": [[185, "mltk.core.TfliteModel"]], "__init__() (tflitemodel method)": [[185, "mltk.core.TfliteModel.__init__"]], "add_metadata() (tflitemodel method)": [[185, "mltk.core.TfliteModel.add_metadata"]], "dequantize_output_to_float32() (tflitemodel method)": [[185, "mltk.core.TfliteModel.dequantize_output_to_float32"]], "description (tflitemodel property)": [[185, "mltk.core.TfliteModel.description"]], "filename (tflitemodel property)": [[185, "mltk.core.TfliteModel.filename"]], "flatbuffer_data (tflitemodel property)": [[185, "mltk.core.TfliteModel.flatbuffer_data"]], "flatbuffer_model (tflitemodel property)": [[185, "mltk.core.TfliteModel.flatbuffer_model"]], "flatbuffer_size (tflitemodel property)": [[185, "mltk.core.TfliteModel.flatbuffer_size"]], "flatbuffer_subgraph (tflitemodel property)": [[185, "mltk.core.TfliteModel.flatbuffer_subgraph"]], "get_all_metadata() (tflitemodel method)": [[185, "mltk.core.TfliteModel.get_all_metadata"]], "get_flatbuffer_subgraph() (tflitemodel method)": [[185, "mltk.core.TfliteModel.get_flatbuffer_subgraph"]], "get_input_data() (tflitemodel method)": [[185, "mltk.core.TfliteModel.get_input_data"]], "get_input_tensor() (tflitemodel method)": [[185, "mltk.core.TfliteModel.get_input_tensor"]], "get_metadata() (tflitemodel method)": [[185, "mltk.core.TfliteModel.get_metadata"]], "get_output_data() (tflitemodel method)": [[185, "mltk.core.TfliteModel.get_output_data"]], "get_output_tensor() (tflitemodel method)": [[185, "mltk.core.TfliteModel.get_output_tensor"]], "get_tensor() (tflitemodel method)": [[185, "mltk.core.TfliteModel.get_tensor"]], "get_tensor_data() (tflitemodel method)": [[185, "mltk.core.TfliteModel.get_tensor_data"]], "inputs (tflitemodel property)": [[185, "mltk.core.TfliteModel.inputs"]], "layers (tflitemodel property)": [[185, "mltk.core.TfliteModel.layers"]], "load_flatbuffer_file() (tflitemodel static method)": [[185, "mltk.core.TfliteModel.load_flatbuffer_file"]], "n_inputs (tflitemodel property)": [[185, "mltk.core.TfliteModel.n_inputs"]], "n_outputs (tflitemodel property)": [[185, "mltk.core.TfliteModel.n_outputs"]], "n_subgraphs (tflitemodel property)": [[185, "mltk.core.TfliteModel.n_subgraphs"]], "name (tflitemodel property)": [[185, "mltk.core.TfliteModel.name"]], "outputs (tflitemodel property)": [[185, "mltk.core.TfliteModel.outputs"]], "path (tflitemodel property)": [[185, "mltk.core.TfliteModel.path"]], "predict() (tflitemodel method)": [[185, "mltk.core.TfliteModel.predict"]], "quantize_to_input_dtype() (tflitemodel method)": [[185, "mltk.core.TfliteModel.quantize_to_input_dtype"]], "regenerate_flatbuffer() (tflitemodel method)": [[185, "mltk.core.TfliteModel.regenerate_flatbuffer"]], "remove_metadata() (tflitemodel method)": [[185, "mltk.core.TfliteModel.remove_metadata"]], "save() (tflitemodel method)": [[185, "mltk.core.TfliteModel.save"]], "selected_model_subgraph (tflitemodel property)": [[185, "mltk.core.TfliteModel.selected_model_subgraph"]], "summary() (tflitemodel method)": [[185, "mltk.core.TfliteModel.summary"]], "tensors (tflitemodel property)": [[185, "mltk.core.TfliteModel.tensors"]], "same (tflitepadding attribute)": [[186, "mltk.core.TflitePadding.SAME"]], "tflitepadding (class in mltk.core)": [[186, "mltk.core.TflitePadding"]], "valid (tflitepadding attribute)": [[186, "mltk.core.TflitePadding.VALID"]], "height (tflitepadding property)": [[186, "mltk.core.TflitePadding.height"]], "to_string() (tflitepadding method)": [[186, "mltk.core.TflitePadding.to_string"]], "width (tflitepadding property)": [[186, "mltk.core.TflitePadding.width"]], "tflitemodelparameters (class in mltk.core)": [[187, "mltk.core.TfliteModelParameters"]], "__init__() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.__init__"]], "__new__() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.__new__"]], "add_to_tflite_file() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.add_to_tflite_file"]], "add_to_tflite_flatbuffer() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.add_to_tflite_flatbuffer"]], "add_to_tflite_model() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.add_to_tflite_model"]], "clear() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.clear"]], "copy() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.copy"]], "deserialize() (tflitemodelparameters static method)": [[187, "mltk.core.TfliteModelParameters.deserialize"]], "fromkeys() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.fromkeys"]], "get() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.get"]], "items() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.items"]], "keys() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.keys"]], "load_from_tflite_file() (tflitemodelparameters static method)": [[187, "mltk.core.TfliteModelParameters.load_from_tflite_file"]], "load_from_tflite_flatbuffer() (tflitemodelparameters static method)": [[187, "mltk.core.TfliteModelParameters.load_from_tflite_flatbuffer"]], "load_from_tflite_model() (tflitemodelparameters static method)": [[187, "mltk.core.TfliteModelParameters.load_from_tflite_model"]], "pop() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.pop"]], "popitem() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.popitem"]], "put() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.put"]], "serialize() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.serialize"]], "setdefault() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.setdefault"]], "summary() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.summary"]], "update() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.update"]], "values() (tflitemodelparameters method)": [[187, "mltk.core.TfliteModelParameters.values"]], "tflitepooling2dlayer (class in mltk.core)": [[188, "mltk.core.TflitePooling2dLayer"]], "__init__() (tflitepooling2dlayer method)": [[188, "mltk.core.TflitePooling2dLayer.__init__"]], "activation (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.activation"]], "from_flatbuffer() (tflitepooling2dlayer static method)": [[188, "mltk.core.TflitePooling2dLayer.from_flatbuffer"]], "get_input_data() (tflitepooling2dlayer method)": [[188, "mltk.core.TflitePooling2dLayer.get_input_data"]], "get_input_tensor() (tflitepooling2dlayer method)": [[188, "mltk.core.TflitePooling2dLayer.get_input_tensor"]], "get_output_data() (tflitepooling2dlayer method)": [[188, "mltk.core.TflitePooling2dLayer.get_output_data"]], "get_output_tensor() (tflitepooling2dlayer method)": [[188, "mltk.core.TflitePooling2dLayer.get_output_tensor"]], "index (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.index"]], "input_data (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.input_data"]], "input_tensor (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.input_tensor"]], "inputs (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.inputs"]], "metadata (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.metadata"]], "model (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.model"]], "n_inputs (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.n_inputs"]], "n_outputs (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.n_outputs"]], "name (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.name"]], "opcode (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.opcode"]], "opcode_str (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.opcode_str"]], "options (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.options"]], "output_data (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.output_data"]], "output_tensor (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.output_tensor"]], "outputs (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.outputs"]], "padding (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.padding"]], "params (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.params"]], "pool_size (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.pool_size"]], "strides (tflitepooling2dlayer property)": [[188, "mltk.core.TflitePooling2dLayer.strides"]], "tflitepool2dlayeroptions (class in mltk.core)": [[189, "mltk.core.TflitePool2DLayerOptions"]], "__init__() (tflitepool2dlayeroptions method)": [[189, "mltk.core.TflitePool2DLayerOptions.__init__"]], "activation (tflitepool2dlayeroptions property)": [[189, "mltk.core.TflitePool2DLayerOptions.activation"]], "activation_str (tflitepool2dlayeroptions property)": [[189, "mltk.core.TflitePool2DLayerOptions.activation_str"]], "filter_height (tflitepool2dlayeroptions property)": [[189, "mltk.core.TflitePool2DLayerOptions.filter_height"]], "filter_width (tflitepool2dlayeroptions property)": [[189, "mltk.core.TflitePool2DLayerOptions.filter_width"]], "options_type (tflitepool2dlayeroptions property)": [[189, "mltk.core.TflitePool2DLayerOptions.options_type"]], "options_type_str (tflitepool2dlayeroptions property)": [[189, "mltk.core.TflitePool2DLayerOptions.options_type_str"]], "padding (tflitepool2dlayeroptions property)": [[189, "mltk.core.TflitePool2DLayerOptions.padding"]], "padding_str (tflitepool2dlayeroptions property)": [[189, "mltk.core.TflitePool2DLayerOptions.padding_str"]], "stride_height (tflitepool2dlayeroptions property)": [[189, "mltk.core.TflitePool2DLayerOptions.stride_height"]], "stride_width (tflitepool2dlayeroptions property)": [[189, "mltk.core.TflitePool2DLayerOptions.stride_width"]], "tflitepoolparams (class in mltk.core)": [[190, "mltk.core.TflitePoolParams"]], "__init__() (tflitepoolparams method)": [[190, "mltk.core.TflitePoolParams.__init__"]], "calculate() (tflitepoolparams static method)": [[190, "mltk.core.TflitePoolParams.calculate"]], "padding (tflitepoolparams attribute)": [[190, "mltk.core.TflitePoolParams.padding"]], "quantized_activation_max (tflitepoolparams attribute)": [[190, "mltk.core.TflitePoolParams.quantized_activation_max"]], "quantized_activation_min (tflitepoolparams attribute)": [[190, "mltk.core.TflitePoolParams.quantized_activation_min"]], "stride_height (tflitepoolparams attribute)": [[190, "mltk.core.TflitePoolParams.stride_height"]], "stride_width (tflitepoolparams attribute)": [[190, "mltk.core.TflitePoolParams.stride_width"]], "tflitequantization (class in mltk.core)": [[191, "mltk.core.TfliteQuantization"]], "__init__() (tflitequantization method)": [[191, "mltk.core.TfliteQuantization.__init__"]], "n_channels (tflitequantization property)": [[191, "mltk.core.TfliteQuantization.n_channels"]], "quantization_dimension (tflitequantization property)": [[191, "mltk.core.TfliteQuantization.quantization_dimension"]], "scale (tflitequantization property)": [[191, "mltk.core.TfliteQuantization.scale"]], "zeropoint (tflitequantization property)": [[191, "mltk.core.TfliteQuantization.zeropoint"]], "tflitequantizelayer (class in mltk.core)": [[192, "mltk.core.TfliteQuantizeLayer"]], "__init__() (tflitequantizelayer method)": [[192, "mltk.core.TfliteQuantizeLayer.__init__"]], "from_flatbuffer() (tflitequantizelayer static method)": [[192, "mltk.core.TfliteQuantizeLayer.from_flatbuffer"]], "get_input_data() (tflitequantizelayer method)": [[192, "mltk.core.TfliteQuantizeLayer.get_input_data"]], "get_input_tensor() (tflitequantizelayer method)": [[192, "mltk.core.TfliteQuantizeLayer.get_input_tensor"]], "get_output_data() (tflitequantizelayer method)": [[192, "mltk.core.TfliteQuantizeLayer.get_output_data"]], "get_output_tensor() (tflitequantizelayer method)": [[192, "mltk.core.TfliteQuantizeLayer.get_output_tensor"]], "index (tflitequantizelayer property)": [[192, "mltk.core.TfliteQuantizeLayer.index"]], "input_data (tflitequantizelayer property)": [[192, "mltk.core.TfliteQuantizeLayer.input_data"]], "input_tensor (tflitequantizelayer property)": [[192, "mltk.core.TfliteQuantizeLayer.input_tensor"]], "inputs (tflitequantizelayer property)": [[192, "mltk.core.TfliteQuantizeLayer.inputs"]], "metadata (tflitequantizelayer property)": [[192, "mltk.core.TfliteQuantizeLayer.metadata"]], "model (tflitequantizelayer property)": [[192, "mltk.core.TfliteQuantizeLayer.model"]], "n_inputs (tflitequantizelayer property)": [[192, "mltk.core.TfliteQuantizeLayer.n_inputs"]], "n_outputs (tflitequantizelayer property)": [[192, "mltk.core.TfliteQuantizeLayer.n_outputs"]], "name (tflitequantizelayer property)": [[192, "mltk.core.TfliteQuantizeLayer.name"]], "opcode (tflitequantizelayer property)": [[192, "mltk.core.TfliteQuantizeLayer.opcode"]], "opcode_str (tflitequantizelayer property)": [[192, "mltk.core.TfliteQuantizeLayer.opcode_str"]], "options (tflitequantizelayer property)": [[192, "mltk.core.TfliteQuantizeLayer.options"]], "output_data (tflitequantizelayer property)": [[192, "mltk.core.TfliteQuantizeLayer.output_data"]], "output_tensor (tflitequantizelayer property)": [[192, "mltk.core.TfliteQuantizeLayer.output_tensor"]], "outputs (tflitequantizelayer property)": [[192, "mltk.core.TfliteQuantizeLayer.outputs"]], "tflitereshapelayer (class in mltk.core)": [[193, "mltk.core.TfliteReshapeLayer"]], "__init__() (tflitereshapelayer method)": [[193, "mltk.core.TfliteReshapeLayer.__init__"]], "from_flatbuffer() (tflitereshapelayer static method)": [[193, "mltk.core.TfliteReshapeLayer.from_flatbuffer"]], "get_input_data() (tflitereshapelayer method)": [[193, "mltk.core.TfliteReshapeLayer.get_input_data"]], "get_input_tensor() (tflitereshapelayer method)": [[193, "mltk.core.TfliteReshapeLayer.get_input_tensor"]], "get_output_data() (tflitereshapelayer method)": [[193, "mltk.core.TfliteReshapeLayer.get_output_data"]], "get_output_tensor() (tflitereshapelayer method)": [[193, "mltk.core.TfliteReshapeLayer.get_output_tensor"]], "index (tflitereshapelayer property)": [[193, "mltk.core.TfliteReshapeLayer.index"]], "input_data (tflitereshapelayer property)": [[193, "mltk.core.TfliteReshapeLayer.input_data"]], "input_tensor (tflitereshapelayer property)": [[193, "mltk.core.TfliteReshapeLayer.input_tensor"]], "inputs (tflitereshapelayer property)": [[193, "mltk.core.TfliteReshapeLayer.inputs"]], "metadata (tflitereshapelayer property)": [[193, "mltk.core.TfliteReshapeLayer.metadata"]], "model (tflitereshapelayer property)": [[193, "mltk.core.TfliteReshapeLayer.model"]], "n_input_elements (tflitereshapelayer property)": [[193, "mltk.core.TfliteReshapeLayer.n_input_elements"]], "n_inputs (tflitereshapelayer property)": [[193, "mltk.core.TfliteReshapeLayer.n_inputs"]], "n_outputs (tflitereshapelayer property)": [[193, "mltk.core.TfliteReshapeLayer.n_outputs"]], "name (tflitereshapelayer property)": [[193, "mltk.core.TfliteReshapeLayer.name"]], "opcode (tflitereshapelayer property)": [[193, "mltk.core.TfliteReshapeLayer.opcode"]], "opcode_str (tflitereshapelayer property)": [[193, "mltk.core.TfliteReshapeLayer.opcode_str"]], "options (tflitereshapelayer property)": [[193, "mltk.core.TfliteReshapeLayer.options"]], "output_data (tflitereshapelayer property)": [[193, "mltk.core.TfliteReshapeLayer.output_data"]], "output_tensor (tflitereshapelayer property)": [[193, "mltk.core.TfliteReshapeLayer.output_tensor"]], "outputs (tflitereshapelayer property)": [[193, "mltk.core.TfliteReshapeLayer.outputs"]], "requires_copy (tflitereshapelayer property)": [[193, "mltk.core.TfliteReshapeLayer.requires_copy"]], "tfliteshape (class in mltk.core)": [[194, "mltk.core.TfliteShape"]], "__new__() (tfliteshape static method)": [[194, "mltk.core.TfliteShape.__new__"]], "count() (tfliteshape method)": [[194, "mltk.core.TfliteShape.count"]], "flat_size (tfliteshape property)": [[194, "mltk.core.TfliteShape.flat_size"]], "index() (tfliteshape method)": [[194, "mltk.core.TfliteShape.index"]], "tflitetensor (class in mltk.core)": [[195, "mltk.core.TfliteTensor"]], "__init__() (tflitetensor method)": [[195, "mltk.core.TfliteTensor.__init__"]], "data (tflitetensor property)": [[195, "mltk.core.TfliteTensor.data"]], "dtype (tflitetensor property)": [[195, "mltk.core.TfliteTensor.dtype"]], "dtype_str (tflitetensor property)": [[195, "mltk.core.TfliteTensor.dtype_str"]], "index (tflitetensor property)": [[195, "mltk.core.TfliteTensor.index"]], "model (tflitetensor property)": [[195, "mltk.core.TfliteTensor.model"]], "quantization (tflitetensor property)": [[195, "mltk.core.TfliteTensor.quantization"]], "shape (tflitetensor property)": [[195, "mltk.core.TfliteTensor.shape"]], "shape_dtype_str() (tflitetensor method)": [[195, "mltk.core.TfliteTensor.shape_dtype_str"]], "tflitetransposeconvlayer (class in mltk.core)": [[196, "mltk.core.TfliteTransposeConvLayer"]], "__init__() (tflitetransposeconvlayer method)": [[196, "mltk.core.TfliteTransposeConvLayer.__init__"]], "bias_data (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.bias_data"]], "bias_tensor (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.bias_tensor"]], "filters (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.filters"]], "filters_data (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.filters_data"]], "filters_tensor (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.filters_tensor"]], "from_flatbuffer() (tflitetransposeconvlayer static method)": [[196, "mltk.core.TfliteTransposeConvLayer.from_flatbuffer"]], "get_input_data() (tflitetransposeconvlayer method)": [[196, "mltk.core.TfliteTransposeConvLayer.get_input_data"]], "get_input_tensor() (tflitetransposeconvlayer method)": [[196, "mltk.core.TfliteTransposeConvLayer.get_input_tensor"]], "get_output_data() (tflitetransposeconvlayer method)": [[196, "mltk.core.TfliteTransposeConvLayer.get_output_data"]], "get_output_tensor() (tflitetransposeconvlayer method)": [[196, "mltk.core.TfliteTransposeConvLayer.get_output_tensor"]], "index (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.index"]], "input_data (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.input_data"]], "input_tensor (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.input_tensor"]], "inputs (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.inputs"]], "kernel_size (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.kernel_size"]], "metadata (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.metadata"]], "model (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.model"]], "n_inputs (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.n_inputs"]], "n_outputs (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.n_outputs"]], "name (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.name"]], "opcode (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.opcode"]], "opcode_str (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.opcode_str"]], "options (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.options"]], "output_data (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.output_data"]], "output_tensor (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.output_tensor"]], "outputs (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.outputs"]], "padding (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.padding"]], "params (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.params"]], "strides (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.strides"]], "use_bias (tflitetransposeconvlayer property)": [[196, "mltk.core.TfliteTransposeConvLayer.use_bias"]], "tflitetransposeconvlayeroptions (class in mltk.core)": [[197, "mltk.core.TfliteTransposeConvLayerOptions"]], "__init__() (tflitetransposeconvlayeroptions method)": [[197, "mltk.core.TfliteTransposeConvLayerOptions.__init__"]], "options_type (tflitetransposeconvlayeroptions property)": [[197, "mltk.core.TfliteTransposeConvLayerOptions.options_type"]], "options_type_str (tflitetransposeconvlayeroptions property)": [[197, "mltk.core.TfliteTransposeConvLayerOptions.options_type_str"]], "padding (tflitetransposeconvlayeroptions property)": [[197, "mltk.core.TfliteTransposeConvLayerOptions.padding"]], "padding_str (tflitetransposeconvlayeroptions property)": [[197, "mltk.core.TfliteTransposeConvLayerOptions.padding_str"]], "stride_height (tflitetransposeconvlayeroptions property)": [[197, "mltk.core.TfliteTransposeConvLayerOptions.stride_height"]], "stride_width (tflitetransposeconvlayeroptions property)": [[197, "mltk.core.TfliteTransposeConvLayerOptions.stride_width"]], "tflitetransposeconvparams (class in mltk.core)": [[198, "mltk.core.TfliteTransposeConvParams"]], "__init__() (tflitetransposeconvparams method)": [[198, "mltk.core.TfliteTransposeConvParams.__init__"]], "calculate() (tflitetransposeconvparams static method)": [[198, "mltk.core.TfliteTransposeConvParams.calculate"]], "input_offset (tflitetransposeconvparams attribute)": [[198, "mltk.core.TfliteTransposeConvParams.input_offset"]], "output_offset (tflitetransposeconvparams attribute)": [[198, "mltk.core.TfliteTransposeConvParams.output_offset"]], "padding (tflitetransposeconvparams attribute)": [[198, "mltk.core.TfliteTransposeConvParams.padding"]], "per_channel_output_multiplier (tflitetransposeconvparams attribute)": [[198, "mltk.core.TfliteTransposeConvParams.per_channel_output_multiplier"]], "per_channel_output_shift (tflitetransposeconvparams attribute)": [[198, "mltk.core.TfliteTransposeConvParams.per_channel_output_shift"]], "quantized_activation_max (tflitetransposeconvparams attribute)": [[198, "mltk.core.TfliteTransposeConvParams.quantized_activation_max"]], "quantized_activation_min (tflitetransposeconvparams attribute)": [[198, "mltk.core.TfliteTransposeConvParams.quantized_activation_min"]], "stride_height (tflitetransposeconvparams attribute)": [[198, "mltk.core.TfliteTransposeConvParams.stride_height"]], "stride_width (tflitetransposeconvparams attribute)": [[198, "mltk.core.TfliteTransposeConvParams.stride_width"]], "weights_offset (tflitetransposeconvparams attribute)": [[198, "mltk.core.TfliteTransposeConvParams.weights_offset"]], "extract_archive() (in module mltk.utils.archive)": [[199, "mltk.utils.archive.extract_archive"]], "gzip_directory_files() (in module mltk.utils.archive)": [[199, "mltk.utils.archive.gzip_directory_files"]], "gzip_file() (in module mltk.utils.archive)": [[199, "mltk.utils.archive.gzip_file"]], "mltk.utils.archive": [[199, "module-mltk.utils.archive"]], "download_url() (in module mltk.utils.archive_downloader)": [[200, "mltk.utils.archive_downloader.download_url"]], "download_verify_extract() (in module mltk.utils.archive_downloader)": [[200, "mltk.utils.archive_downloader.download_verify_extract"]], "mltk.utils.archive_downloader": [[200, "module-mltk.utils.archive_downloader"]], "verify_extract() (in module mltk.utils.archive_downloader)": [[200, "mltk.utils.archive_downloader.verify_extract"]], "verify_file_hash() (in module mltk.utils.archive_downloader)": [[200, "mltk.utils.archive_downloader.verify_file_hash"]], "verify_sha1() (in module mltk.utils.archive_downloader)": [[200, "mltk.utils.archive_downloader.verify_sha1"]], "verify_sha256() (in module mltk.utils.archive_downloader)": [[200, "mltk.utils.archive_downloader.verify_sha256"]], "augmentation (class in mltk.utils.audio_dataset_generator)": [[201, "mltk.utils.audio_dataset_generator.Augmentation"]], "count() (augmentation method)": [[201, "mltk.utils.audio_dataset_generator.Augmentation.count"]], "index() (augmentation method)": [[201, "mltk.utils.audio_dataset_generator.Augmentation.index"]], "pitch (augmentation attribute)": [[201, "mltk.utils.audio_dataset_generator.Augmentation.pitch"]], "rate (augmentation attribute)": [[201, "mltk.utils.audio_dataset_generator.Augmentation.rate"]], "generationconfig (class in mltk.utils.audio_dataset_generator)": [[202, "mltk.utils.audio_dataset_generator.GenerationConfig"]], "__init__() (generationconfig method)": [[202, "mltk.utils.audio_dataset_generator.GenerationConfig.__init__"]], "copy() (generationconfig method)": [[202, "mltk.utils.audio_dataset_generator.GenerationConfig.copy"]], "keyword (generationconfig attribute)": [[202, "mltk.utils.audio_dataset_generator.GenerationConfig.keyword"]], "keyword_group (generationconfig attribute)": [[202, "mltk.utils.audio_dataset_generator.GenerationConfig.keyword_group"]], "pitch (generationconfig attribute)": [[202, "mltk.utils.audio_dataset_generator.GenerationConfig.pitch"]], "rate (generationconfig attribute)": [[202, "mltk.utils.audio_dataset_generator.GenerationConfig.rate"]], "voice (generationconfig attribute)": [[202, "mltk.utils.audio_dataset_generator.GenerationConfig.voice"]], "audiodatasetgenerator (class in mltk.utils.audio_dataset_generator)": [[203, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator"]], "__init__() (audiodatasetgenerator method)": [[203, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.__init__"]], "count_characters() (audiodatasetgenerator method)": [[203, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.count_characters"]], "generate() (audiodatasetgenerator method)": [[203, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.generate"]], "get_summary() (audiodatasetgenerator method)": [[203, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.get_summary"]], "is_backend_loaded() (audiodatasetgenerator method)": [[203, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.is_backend_loaded"]], "is_running (audiodatasetgenerator property)": [[203, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.is_running"]], "join() (audiodatasetgenerator method)": [[203, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.join"]], "list_configurations() (audiodatasetgenerator method)": [[203, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.list_configurations"]], "list_languages() (audiodatasetgenerator method)": [[203, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.list_languages"]], "list_supported_backends() (audiodatasetgenerator static method)": [[203, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.list_supported_backends"]], "list_voices() (audiodatasetgenerator method)": [[203, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.list_voices"]], "load_backend() (audiodatasetgenerator method)": [[203, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.load_backend"]], "out_dir (audiodatasetgenerator property)": [[203, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.out_dir"]], "shutdown() (audiodatasetgenerator method)": [[203, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.shutdown"]], "keyword (class in mltk.utils.audio_dataset_generator)": [[205, "mltk.utils.audio_dataset_generator.Keyword"]], "aliases (keyword attribute)": [[205, "mltk.utils.audio_dataset_generator.Keyword.aliases"]], "as_list() (keyword method)": [[205, "mltk.utils.audio_dataset_generator.Keyword.as_list"]], "count() (keyword method)": [[205, "mltk.utils.audio_dataset_generator.Keyword.count"]], "index() (keyword method)": [[205, "mltk.utils.audio_dataset_generator.Keyword.index"]], "max_count (keyword attribute)": [[205, "mltk.utils.audio_dataset_generator.Keyword.max_count"]], "value (keyword attribute)": [[205, "mltk.utils.audio_dataset_generator.Keyword.value"]], "voice (class in mltk.utils.audio_dataset_generator)": [[206, "mltk.utils.audio_dataset_generator.Voice"]], "__init__() (voice method)": [[206, "mltk.utils.audio_dataset_generator.Voice.__init__"]], "backend (voice attribute)": [[206, "mltk.utils.audio_dataset_generator.Voice.backend"]], "hashable_value() (voice method)": [[206, "mltk.utils.audio_dataset_generator.Voice.hashable_value"]], "hex_hash (voice property)": [[206, "mltk.utils.audio_dataset_generator.Voice.hex_hash"]], "language_code (voice attribute)": [[206, "mltk.utils.audio_dataset_generator.Voice.language_code"]], "name (voice attribute)": [[206, "mltk.utils.audio_dataset_generator.Voice.name"]], "voicepitch (class in mltk.utils.audio_dataset_generator)": [[207, "mltk.utils.audio_dataset_generator.VoicePitch"]], "voicerate (class in mltk.utils.audio_dataset_generator)": [[208, "mltk.utils.audio_dataset_generator.VoiceRate"]], "bin2header() (in module mltk.utils.bin2header)": [[209, "mltk.utils.bin2header.bin2header"]], "main() (in module mltk.utils.bin2header)": [[209, "mltk.utils.bin2header.main"]], "mltk.utils.bin2header": [[209, "module-mltk.utils.bin2header"]], "build_mltk_target() (in module mltk.utils.cmake)": [[210, "mltk.utils.cmake.build_mltk_target"]], "get_build_directory() (in module mltk.utils.cmake)": [[210, "mltk.utils.cmake.get_build_directory"]], "invoke_mltk_target() (in module mltk.utils.cmake)": [[210, "mltk.utils.cmake.invoke_mltk_target"]], "mltk.utils.cmake": [[210, "module-mltk.utils.cmake"]], "parse_variables() (in module mltk.utils.cmake)": [[210, "mltk.utils.cmake.parse_variables"]], "tensorflowcudaversions (class in mltk.utils.gpu)": [[211, "mltk.utils.gpu.TensorflowCudaVersions"]], "__getnewargs__() (tensorflowcudaversions method)": [[211, "mltk.utils.gpu.TensorflowCudaVersions.__getnewargs__"]], "__match_args__ (tensorflowcudaversions attribute)": [[211, "mltk.utils.gpu.TensorflowCudaVersions.__match_args__"]], "__module__ (tensorflowcudaversions attribute)": [[211, "mltk.utils.gpu.TensorflowCudaVersions.__module__"]], "__new__() (tensorflowcudaversions static method)": [[211, "mltk.utils.gpu.TensorflowCudaVersions.__new__"]], "__repr__() (tensorflowcudaversions method)": [[211, "mltk.utils.gpu.TensorflowCudaVersions.__repr__"]], "__slots__ (tensorflowcudaversions attribute)": [[211, "mltk.utils.gpu.TensorflowCudaVersions.__slots__"]], "check_tensorflow_cuda_compatibility_error() (in module mltk.utils.gpu)": [[211, "mltk.utils.gpu.check_tensorflow_cuda_compatibility_error"]], "cuda (tensorflowcudaversions attribute)": [[211, "mltk.utils.gpu.TensorflowCudaVersions.cuda"]], "cudnn (tensorflowcudaversions attribute)": [[211, "mltk.utils.gpu.TensorflowCudaVersions.cudnn"]], "deinitialize() (in module mltk.utils.gpu)": [[211, "mltk.utils.gpu.deinitialize"]], "disable() (in module mltk.utils.gpu)": [[211, "mltk.utils.gpu.disable"]], "get_tensorflow_version_with_cudnn_version() (in module mltk.utils.gpu)": [[211, "mltk.utils.gpu.get_tensorflow_version_with_cudnn_version"]], "initialize() (in module mltk.utils.gpu)": [[211, "mltk.utils.gpu.initialize"]], "mltk.utils.gpu": [[211, "module-mltk.utils.gpu"]], "python_max (tensorflowcudaversions attribute)": [[211, "mltk.utils.gpu.TensorflowCudaVersions.python_max"]], "python_min (tensorflowcudaversions attribute)": [[211, "mltk.utils.gpu.TensorflowCudaVersions.python_min"]], "tensorflow (tensorflowcudaversions attribute)": [[211, "mltk.utils.gpu.TensorflowCudaVersions.tensorflow"]], "generate_hash() (in module mltk.utils.hasher)": [[212, "mltk.utils.hasher.generate_hash"]], "hash_file() (in module mltk.utils.hasher)": [[212, "mltk.utils.hasher.hash_file"]], "hash_object() (in module mltk.utils.hasher)": [[212, "mltk.utils.hasher.hash_object"]], "mltk.utils.hasher": [[212, "module-mltk.utils.hasher"]], "jlinkcommandstream (class in mltk.utils.jlink_stream)": [[214, "mltk.utils.jlink_stream.JlinkCommandStream"]], "__init__() (jlinkcommandstream method)": [[214, "mltk.utils.jlink_stream.JlinkCommandStream.__init__"]], "close() (jlinkcommandstream method)": [[214, "mltk.utils.jlink_stream.JlinkCommandStream.close"]], "issue() (jlinkcommandstream method)": [[214, "mltk.utils.jlink_stream.JlinkCommandStream.issue"]], "open() (jlinkcommandstream method)": [[214, "mltk.utils.jlink_stream.JlinkCommandStream.open"]], "jlinkdatastream (class in mltk.utils.jlink_stream)": [[215, "mltk.utils.jlink_stream.JLinkDataStream"]], "__init__() (jlinkdatastream method)": [[215, "mltk.utils.jlink_stream.JLinkDataStream.__init__"]], "buffer_hexdump (jlinkdatastream property)": [[215, "mltk.utils.jlink_stream.JLinkDataStream.buffer_hexdump"]], "buffer_unused (jlinkdatastream property)": [[215, "mltk.utils.jlink_stream.JLinkDataStream.buffer_unused"]], "buffer_used (jlinkdatastream property)": [[215, "mltk.utils.jlink_stream.JLinkDataStream.buffer_used"]], "close() (jlinkdatastream method)": [[215, "mltk.utils.jlink_stream.JLinkDataStream.close"]], "end_time (jlinkdatastream property)": [[215, "mltk.utils.jlink_stream.JLinkDataStream.end_time"]], "flush() (jlinkdatastream method)": [[215, "mltk.utils.jlink_stream.JLinkDataStream.flush"]], "is_opened (jlinkdatastream property)": [[215, "mltk.utils.jlink_stream.JLinkDataStream.is_opened"]], "max_read_size (jlinkdatastream property)": [[215, "mltk.utils.jlink_stream.JLinkDataStream.max_read_size"]], "mode (jlinkdatastream property)": [[215, "mltk.utils.jlink_stream.JLinkDataStream.mode"]], "name (jlinkdatastream property)": [[215, "mltk.utils.jlink_stream.JLinkDataStream.name"]], "read() (jlinkdatastream method)": [[215, "mltk.utils.jlink_stream.JLinkDataStream.read"]], "read_all() (jlinkdatastream method)": [[215, "mltk.utils.jlink_stream.JLinkDataStream.read_all"]], "read_data_available (jlinkdatastream property)": [[215, "mltk.utils.jlink_stream.JLinkDataStream.read_data_available"]], "timeout (jlinkdatastream property)": [[215, "mltk.utils.jlink_stream.JLinkDataStream.timeout"]], "write() (jlinkdatastream method)": [[215, "mltk.utils.jlink_stream.JLinkDataStream.write"]], "write_data_available (jlinkdatastream property)": [[215, "mltk.utils.jlink_stream.JLinkDataStream.write_data_available"]], "jlinkstream (class in mltk.utils.jlink_stream)": [[217, "mltk.utils.jlink_stream.JlinkStream"]], "__init__() (jlinkstream method)": [[217, "mltk.utils.jlink_stream.JlinkStream.__init__"]], "close() (jlinkstream method)": [[217, "mltk.utils.jlink_stream.JlinkStream.close"]], "connect() (jlinkstream method)": [[217, "mltk.utils.jlink_stream.JlinkStream.connect"]], "default_options (jlinkstream property)": [[217, "mltk.utils.jlink_stream.JlinkStream.default_options"]], "disconnect() (jlinkstream method)": [[217, "mltk.utils.jlink_stream.JlinkStream.disconnect"]], "is_connected (jlinkstream property)": [[217, "mltk.utils.jlink_stream.JlinkStream.is_connected"]], "open() (jlinkstream method)": [[217, "mltk.utils.jlink_stream.JlinkStream.open"]], "process() (jlinkstream method)": [[217, "mltk.utils.jlink_stream.JlinkStream.process"]], "read() (jlinkstream method)": [[217, "mltk.utils.jlink_stream.JlinkStream.read"]], "write() (jlinkstream method)": [[217, "mltk.utils.jlink_stream.JlinkStream.write"]], "jlinkstreamoptions (class in mltk.utils.jlink_stream)": [[218, "mltk.utils.jlink_stream.JlinkStreamOptions"]], "consoleloggerlevelcontext (class in mltk.utils.logger)": [[219, "mltk.utils.logger.ConsoleLoggerLevelContext"]], "dummylogger (class in mltk.utils.logger)": [[219, "mltk.utils.logger.DummyLogger"]], "__dict__ (consoleloggerlevelcontext attribute)": [[219, "mltk.utils.logger.ConsoleLoggerLevelContext.__dict__"]], "__dict__ (dummylogger attribute)": [[219, "mltk.utils.logger.DummyLogger.__dict__"]], "__enter__() (consoleloggerlevelcontext method)": [[219, "mltk.utils.logger.ConsoleLoggerLevelContext.__enter__"]], "__exit__() (consoleloggerlevelcontext method)": [[219, "mltk.utils.logger.ConsoleLoggerLevelContext.__exit__"]], "__init__() (consoleloggerlevelcontext method)": [[219, "mltk.utils.logger.ConsoleLoggerLevelContext.__init__"]], "__init__() (dummylogger method)": [[219, "mltk.utils.logger.DummyLogger.__init__"]], "__module__ (consoleloggerlevelcontext attribute)": [[219, "mltk.utils.logger.ConsoleLoggerLevelContext.__module__"]], "__module__ (dummylogger attribute)": [[219, "mltk.utils.logger.DummyLogger.__module__"]], "__weakref__ (consoleloggerlevelcontext attribute)": [[219, "mltk.utils.logger.ConsoleLoggerLevelContext.__weakref__"]], "__weakref__ (dummylogger attribute)": [[219, "mltk.utils.logger.DummyLogger.__weakref__"]], "add_console_logger() (in module mltk.utils.logger)": [[219, "mltk.utils.logger.add_console_logger"]], "debug() (dummylogger method)": [[219, "mltk.utils.logger.DummyLogger.debug"]], "error() (dummylogger method)": [[219, "mltk.utils.logger.DummyLogger.error"]], "exception() (dummylogger method)": [[219, "mltk.utils.logger.DummyLogger.exception"]], "flush() (dummylogger method)": [[219, "mltk.utils.logger.DummyLogger.flush"]], "get_level() (in module mltk.utils.logger)": [[219, "mltk.utils.logger.get_level"]], "get_logger() (in module mltk.utils.logger)": [[219, "mltk.utils.logger.get_logger"]], "info() (dummylogger method)": [[219, "mltk.utils.logger.DummyLogger.info"]], "make_filelike() (in module mltk.utils.logger)": [[219, "mltk.utils.logger.make_filelike"]], "mltk.utils.logger": [[219, "module-mltk.utils.logger"]], "redirect_stream() (in module mltk.utils.logger)": [[219, "mltk.utils.logger.redirect_stream"]], "set_console_level() (in module mltk.utils.logger)": [[219, "mltk.utils.logger.set_console_level"]], "timing_decorator() (in module mltk.utils.logger)": [[219, "mltk.utils.logger.timing_decorator"]], "warning() (dummylogger method)": [[219, "mltk.utils.logger.DummyLogger.warning"]], "write() (dummylogger method)": [[219, "mltk.utils.logger.DummyLogger.write"]], "add_user_setting() (in module mltk.utils.path)": [[220, "mltk.utils.path.add_user_setting"]], "clean_directory() (in module mltk.utils.path)": [[220, "mltk.utils.path.clean_directory"]], "copy_directory() (in module mltk.utils.path)": [[220, "mltk.utils.path.copy_directory"]], "create_dir() (in module mltk.utils.path)": [[220, "mltk.utils.path.create_dir"]], "create_tempdir() (in module mltk.utils.path)": [[220, "mltk.utils.path.create_tempdir"]], "create_user_dir() (in module mltk.utils.path)": [[220, "mltk.utils.path.create_user_dir"]], "extension() (in module mltk.utils.path)": [[220, "mltk.utils.path.extension"]], "file_is_in_use() (in module mltk.utils.path)": [[220, "mltk.utils.path.file_is_in_use"]], "file_is_newer() (in module mltk.utils.path)": [[220, "mltk.utils.path.file_is_newer"]], "fullpath() (in module mltk.utils.path)": [[220, "mltk.utils.path.fullpath"]], "get_actual_path() (in module mltk.utils.path)": [[220, "mltk.utils.path.get_actual_path"]], "get_user_setting() (in module mltk.utils.path)": [[220, "mltk.utils.path.get_user_setting"]], "has_filename() (in module mltk.utils.path)": [[220, "mltk.utils.path.has_filename"]], "mltk.utils.path": [[220, "module-mltk.utils.path"]], "recursive_listdir() (in module mltk.utils.path)": [[220, "mltk.utils.path.recursive_listdir"]], "remove_directory() (in module mltk.utils.path)": [[220, "mltk.utils.path.remove_directory"]], "set_file_last_modified() (in module mltk.utils.path)": [[220, "mltk.utils.path.set_file_last_modified"]], "walk_with_depth() (in module mltk.utils.path)": [[220, "mltk.utils.path.walk_with_depth"]], "processpool (class in mltk.utils.process_pool)": [[221, "mltk.utils.process_pool.ProcessPool"]], "__init__() (processpool method)": [[221, "mltk.utils.process_pool.ProcessPool.__init__"]], "create_batch() (processpool method)": [[221, "mltk.utils.process_pool.ProcessPool.create_batch"]], "is_running (processpool property)": [[221, "mltk.utils.process_pool.ProcessPool.is_running"]], "n_jobs (processpool property)": [[221, "mltk.utils.process_pool.ProcessPool.n_jobs"]], "name (processpool property)": [[221, "mltk.utils.process_pool.ProcessPool.name"]], "process() (processpool method)": [[221, "mltk.utils.process_pool.ProcessPool.process"]], "shutdown() (processpool method)": [[221, "mltk.utils.process_pool.ProcessPool.shutdown"]], "start() (processpool method)": [[221, "mltk.utils.process_pool.ProcessPool.start"]], "defaultdict() (in module mltk.utils.python)": [[222, "mltk.utils.python.DefaultDict"]], "dictobject (class in mltk.utils.python)": [[222, "mltk.utils.python.DictObject"]], "short_version (in module mltk.utils.python)": [[222, "mltk.utils.python.SHORT_VERSION"]], "__dict__ (dictobject attribute)": [[222, "mltk.utils.python.DictObject.__dict__"]], "__getattr__() (dictobject method)": [[222, "mltk.utils.python.DictObject.__getattr__"]], "__module__ (dictobject attribute)": [[222, "mltk.utils.python.DictObject.__module__"]], "__setattr__() (dictobject method)": [[222, "mltk.utils.python.DictObject.__setattr__"]], "__weakref__ (dictobject attribute)": [[222, "mltk.utils.python.DictObject.__weakref__"]], "append_exception_msg() (in module mltk.utils.python)": [[222, "mltk.utils.python.append_exception_msg"]], "as_list() (in module mltk.utils.python)": [[222, "mltk.utils.python.as_list"]], "contains_class_type() (in module mltk.utils.python)": [[222, "mltk.utils.python.contains_class_type"]], "debugger_is_active() (in module mltk.utils.python)": [[222, "mltk.utils.python.debugger_is_active"]], "find_object_key_with_value() (in module mltk.utils.python)": [[222, "mltk.utils.python.find_object_key_with_value"]], "find_object_value_with_key() (in module mltk.utils.python)": [[222, "mltk.utils.python.find_object_value_with_key"]], "find_object_value_with_key_or_value() (in module mltk.utils.python)": [[222, "mltk.utils.python.find_object_value_with_key_or_value"]], "flatten_list() (in module mltk.utils.python)": [[222, "mltk.utils.python.flatten_list"]], "forward_method_kwargs() (in module mltk.utils.python)": [[222, "mltk.utils.python.forward_method_kwargs"]], "get_case_insensitive() (in module mltk.utils.python)": [[222, "mltk.utils.python.get_case_insensitive"]], "import_module_at_path() (in module mltk.utils.python)": [[222, "mltk.utils.python.import_module_at_path"]], "install_pip_package() (in module mltk.utils.python)": [[222, "mltk.utils.python.install_pip_package"]], "is_false() (in module mltk.utils.python)": [[222, "mltk.utils.python.is_false"]], "is_true() (in module mltk.utils.python)": [[222, "mltk.utils.python.is_true"]], "list_rindex() (in module mltk.utils.python)": [[222, "mltk.utils.python.list_rindex"]], "load_json_safe() (in module mltk.utils.python)": [[222, "mltk.utils.python.load_json_safe"]], "merge_dict() (in module mltk.utils.python)": [[222, "mltk.utils.python.merge_dict"]], "mltk.utils.python": [[222, "module-mltk.utils.python"]], "notebook_is_active() (in module mltk.utils.python)": [[222, "mltk.utils.python.notebook_is_active"]], "prepend_exception_msg() (in module mltk.utils.python)": [[222, "mltk.utils.python.prepend_exception_msg"]], "timeit() (in module mltk.utils.python)": [[222, "mltk.utils.python.timeit"]], "serialreader (class in mltk.utils.serial_reader)": [[224, "mltk.utils.serial_reader.SerialReader"]], "__init__() (serialreader method)": [[224, "mltk.utils.serial_reader.SerialReader.__init__"]], "captured_data (serialreader property)": [[224, "mltk.utils.serial_reader.SerialReader.captured_data"]], "close() (serialreader method)": [[224, "mltk.utils.serial_reader.SerialReader.close"]], "error_message (serialreader property)": [[224, "mltk.utils.serial_reader.SerialReader.error_message"]], "failed (serialreader property)": [[224, "mltk.utils.serial_reader.SerialReader.failed"]], "flush() (serialreader method)": [[224, "mltk.utils.serial_reader.SerialReader.flush"]], "is_open (serialreader property)": [[224, "mltk.utils.serial_reader.SerialReader.is_open"]], "list_ports() (serialreader static method)": [[224, "mltk.utils.serial_reader.SerialReader.list_ports"]], "open() (serialreader method)": [[224, "mltk.utils.serial_reader.SerialReader.open"]], "read() (serialreader method)": [[224, "mltk.utils.serial_reader.SerialReader.read"]], "resolve_port() (serialreader static method)": [[224, "mltk.utils.serial_reader.SerialReader.resolve_port"]], "started (serialreader property)": [[224, "mltk.utils.serial_reader.SerialReader.started"]], "stopped (serialreader property)": [[224, "mltk.utils.serial_reader.SerialReader.stopped"]], "write() (serialreader method)": [[224, "mltk.utils.serial_reader.SerialReader.write"]], "mltk.utils.shell_cmd": [[225, "module-mltk.utils.shell_cmd"]], "run_shell_cmd() (in module mltk.utils.shell_cmd)": [[225, "mltk.utils.shell_cmd.run_shell_cmd"]], "signalhandler (class in mltk.utils.signal_handler)": [[226, "mltk.utils.signal_handler.SignalHandler"]], "__init__() (signalhandler method)": [[226, "mltk.utils.signal_handler.SignalHandler.__init__"]], "formattedfloat (class in mltk.utils.string_formatting)": [[227, "mltk.utils.string_formatting.FormattedFloat"]], "formattedint (class in mltk.utils.string_formatting)": [[227, "mltk.utils.string_formatting.FormattedInt"]], "__dict__ (formattedfloat attribute)": [[227, "mltk.utils.string_formatting.FormattedFloat.__dict__"]], "__dict__ (formattedint attribute)": [[227, "mltk.utils.string_formatting.FormattedInt.__dict__"]], "__module__ (formattedfloat attribute)": [[227, "mltk.utils.string_formatting.FormattedFloat.__module__"]], "__module__ (formattedint attribute)": [[227, "mltk.utils.string_formatting.FormattedInt.__module__"]], "__str__() (formattedfloat method)": [[227, "mltk.utils.string_formatting.FormattedFloat.__str__"]], "__str__() (formattedint method)": [[227, "mltk.utils.string_formatting.FormattedInt.__str__"]], "__weakref__ (formattedfloat attribute)": [[227, "mltk.utils.string_formatting.FormattedFloat.__weakref__"]], "format_units() (in module mltk.utils.string_formatting)": [[227, "mltk.utils.string_formatting.format_units"]], "iso_time_filename_str() (in module mltk.utils.string_formatting)": [[227, "mltk.utils.string_formatting.iso_time_filename_str"]], "iso_time_str() (in module mltk.utils.string_formatting)": [[227, "mltk.utils.string_formatting.iso_time_str"]], "mltk.utils.string_formatting": [[227, "module-mltk.utils.string_formatting"]], "pretty_time_str() (in module mltk.utils.string_formatting)": [[227, "mltk.utils.string_formatting.pretty_time_str"]], "get_current_os() (in module mltk.utils.system)": [[228, "mltk.utils.system.get_current_os"]], "get_username() (in module mltk.utils.system)": [[228, "mltk.utils.system.get_username"]], "has_admin() (in module mltk.utils.system)": [[228, "mltk.utils.system.has_admin"]], "is_linux() (in module mltk.utils.system)": [[228, "mltk.utils.system.is_linux"]], "is_osx() (in module mltk.utils.system)": [[228, "mltk.utils.system.is_osx"]], "is_windows() (in module mltk.utils.system)": [[228, "mltk.utils.system.is_windows"]], "make_path_executable() (in module mltk.utils.system)": [[228, "mltk.utils.system.make_path_executable"]], "mltk.utils.system": [[228, "module-mltk.utils.system"]], "raise_signal() (in module mltk.utils.system)": [[228, "mltk.utils.system.raise_signal"]], "send_signal() (in module mltk.utils.system)": [[228, "mltk.utils.system.send_signal"]], "uartstream (class in mltk.utils.uart_stream)": [[230, "mltk.utils.uart_stream.UartStream"]], "__init__() (uartstream method)": [[230, "mltk.utils.uart_stream.UartStream.__init__"]], "baud (uartstream property)": [[230, "mltk.utils.uart_stream.UartStream.baud"]], "close() (uartstream method)": [[230, "mltk.utils.uart_stream.UartStream.close"]], "flush_input() (uartstream method)": [[230, "mltk.utils.uart_stream.UartStream.flush_input"]], "is_open (uartstream property)": [[230, "mltk.utils.uart_stream.UartStream.is_open"]], "is_synchronized (uartstream property)": [[230, "mltk.utils.uart_stream.UartStream.is_synchronized"]], "list_ports() (uartstream static method)": [[230, "mltk.utils.uart_stream.UartStream.list_ports"]], "open() (uartstream method)": [[230, "mltk.utils.uart_stream.UartStream.open"]], "port (uartstream property)": [[230, "mltk.utils.uart_stream.UartStream.port"]], "read() (uartstream method)": [[230, "mltk.utils.uart_stream.UartStream.read"]], "read_all() (uartstream method)": [[230, "mltk.utils.uart_stream.UartStream.read_all"]], "read_command() (uartstream method)": [[230, "mltk.utils.uart_stream.UartStream.read_command"]], "resolve_port() (uartstream static method)": [[230, "mltk.utils.uart_stream.UartStream.resolve_port"]], "rx_bytes_available (uartstream property)": [[230, "mltk.utils.uart_stream.UartStream.rx_bytes_available"]], "synchronize() (uartstream method)": [[230, "mltk.utils.uart_stream.UartStream.synchronize"]], "synchronize_blocking() (uartstream method)": [[230, "mltk.utils.uart_stream.UartStream.synchronize_blocking"]], "tx_bytes_available (uartstream property)": [[230, "mltk.utils.uart_stream.UartStream.tx_bytes_available"]], "wait() (uartstream method)": [[230, "mltk.utils.uart_stream.UartStream.wait"]], "write() (uartstream method)": [[230, "mltk.utils.uart_stream.UartStream.write"]], "write_all() (uartstream method)": [[230, "mltk.utils.uart_stream.UartStream.write_all"]], "write_command() (uartstream method)": [[230, "mltk.utils.uart_stream.UartStream.write_command"]]}})