Search.setIndex({"docnames": ["cpp/shared/uart_stream/examples/data_test/README", "docs/audio/audio_feature_generator", "docs/audio/audio_utilities", "docs/audio/keyword_spotting_overview", "docs/command_line/classify_audio", "docs/command_line/classify_audio_cli_help", "docs/command_line/classify_image", "docs/command_line/classify_image_cli_help", "docs/command_line/commander", "docs/command_line/commander_cli_help", "docs/command_line/evaluate", "docs/command_line/evaluate_cli_help", "docs/command_line/fingerprint_reader", "docs/command_line/fingerprint_reader_cli_help", "docs/command_line/index", "docs/command_line/profile", "docs/command_line/profile_cli_help", "docs/command_line/quantize", "docs/command_line/quantize_cli_help", "docs/command_line/ssh", "docs/command_line/ssh_cli_help", "docs/command_line/summarize", "docs/command_line/summarize_cli_help", "docs/command_line/tensorboard", "docs/command_line/tensorboard_cli_help", "docs/command_line/train", "docs/command_line/train_cli_help", "docs/command_line/update_params", "docs/command_line/update_params_cli_help", "docs/command_line/view", "docs/command_line/view_audio", "docs/command_line/view_audio_cli_help", "docs/command_line/view_cli_help", "docs/cpp_development/build_options", "docs/cpp_development/command_line", "docs/cpp_development/examples/audio_classifier", "docs/cpp_development/examples/ble_audio_classifier", "docs/cpp_development/examples/fingerprint_authenticator", "docs/cpp_development/examples/hello_world", "docs/cpp_development/examples/image_classifier", "docs/cpp_development/examples/index", "docs/cpp_development/examples/model_profiler", "docs/cpp_development/index", "docs/cpp_development/simplicity_studio", "docs/cpp_development/vscode", "docs/cpp_development/wrappers/audio_feature_generator_wrapper", "docs/cpp_development/wrappers/index", "docs/cpp_development/wrappers/mvp_wrapper", "docs/cpp_development/wrappers/tflite_micro_wrapper", "docs/examples", "docs/faq/how_to_debug_model_during_training", "docs/faq/how_to_reduce_model_size", "docs/faq/how_to_run_model_on_embedded", "docs/faq/index", "docs/faq/linux_why_is_gpu_not_working", "docs/faq/where_is_my_trained_model", "docs/faq/why_does_eval_not_work_with_tflite", "docs/faq/why_is_model_not_working_on_embedded", "docs/faq/windows_tensorflow_dll_error", "docs/guides/index", "docs/guides/model_archive", "docs/guides/model_evaluation", "docs/guides/model_parameters", "docs/guides/model_profiler", "docs/guides/model_profiler_utility", "docs/guides/model_quantization", "docs/guides/model_search_path", "docs/guides/model_specification", "docs/guides/model_summary", "docs/guides/model_training", "docs/guides/model_training_monitor", "docs/guides/model_training_via_ssh", "docs/guides/model_visualizer", "docs/guides/notebook_examples_guide", "docs/installation", "docs/other/environment_variables", "docs/other/quick_reference", "docs/other/settings_file", "docs/other/supported_hardware", "docs/overview", "docs/python_api/data_preprocessing/audio", "docs/python_api/data_preprocessing/audio_data_generator", "docs/python_api/data_preprocessing/audio_data_generator_params", "docs/python_api/data_preprocessing/audio_feature_generator", "docs/python_api/data_preprocessing/audio_feature_generator_settings", "docs/python_api/data_preprocessing/image", "docs/python_api/data_preprocessing/image_data_generator", "docs/python_api/data_preprocessing/image_data_generator_params", "docs/python_api/data_preprocessing/index", "docs/python_api/data_preprocessing/list_directory", "docs/python_api/data_preprocessing/normalize", "docs/python_api/data_preprocessing/tf_dataset", "docs/python_api/data_preprocessing/utilities", "docs/python_api/datasets/accelerometer/tflm_magic_wand", "docs/python_api/datasets/audio/background_noise/ambient", "docs/python_api/datasets/audio/background_noise/brd2601", "docs/python_api/datasets/audio/background_noise/esc50", "docs/python_api/datasets/audio/direction_commands", "docs/python_api/datasets/audio/hey_gecko", "docs/python_api/datasets/audio/mit_ir_survey", "docs/python_api/datasets/audio/ml_commons/keywords", "docs/python_api/datasets/audio/ml_commons/voice", "docs/python_api/datasets/audio/on_off", "docs/python_api/datasets/audio/speech_commands_v2", "docs/python_api/datasets/audio/ten_digits", "docs/python_api/datasets/audio/yes_no", "docs/python_api/datasets/image/cifar10", "docs/python_api/datasets/image/fashion_mnist", "docs/python_api/datasets/image/mnist", "docs/python_api/datasets/image/rock_paper_scissors_v1", "docs/python_api/datasets/image/rock_paper_scissors_v2", "docs/python_api/datasets/index", "docs/python_api/index", "docs/python_api/keras_model", "docs/python_api/mltk_model/audio_dataset_mixin", "docs/python_api/mltk_model/dataset_mixin", "docs/python_api/mltk_model/evaluate_autoencoder_mixin", "docs/python_api/mltk_model/evaluate_classifier_mixin", "docs/python_api/mltk_model/evaluate_mixin", "docs/python_api/mltk_model/image_dataset_mixin", "docs/python_api/mltk_model/index", "docs/python_api/mltk_model/mltk_dataset", "docs/python_api/mltk_model/model", "docs/python_api/mltk_model/model_event", "docs/python_api/mltk_model/ssh_mixin", "docs/python_api/mltk_model/train_mixin", "docs/python_api/mltk_model/utilities", "docs/python_api/mltk_model/weights_and_biases_mixin", "docs/python_api/models/common_models", "docs/python_api/models/examples/audio_example1", "docs/python_api/models/examples/audio_tf_dataset", "docs/python_api/models/examples/autoencoder_example", "docs/python_api/models/examples/basic_example", "docs/python_api/models/examples/basic_tf_dataset_example", "docs/python_api/models/examples/binary_classification", "docs/python_api/models/examples/conv1d_example", "docs/python_api/models/examples/image_example1", "docs/python_api/models/examples/image_tf_dataset", "docs/python_api/models/examples/index", "docs/python_api/models/examples/siamese_contrastive", "docs/python_api/models/index", "docs/python_api/models/siliconlabs/fingerprint_signature_generator", "docs/python_api/models/siliconlabs/index", "docs/python_api/models/siliconlabs/keyword_spotting_alexa", "docs/python_api/models/siliconlabs/keyword_spotting_mobilenetv2", "docs/python_api/models/siliconlabs/keyword_spotting_numbers", "docs/python_api/models/siliconlabs/keyword_spotting_on_off", "docs/python_api/models/siliconlabs/keyword_spotting_on_off_v2", "docs/python_api/models/siliconlabs/keyword_spotting_on_off_v3", "docs/python_api/models/siliconlabs/keyword_spotting_pacman", "docs/python_api/models/siliconlabs/keyword_spotting_pacman_v2", "docs/python_api/models/siliconlabs/keyword_spotting_pacman_v3", "docs/python_api/models/siliconlabs/keyword_spotting_with_transfer_learning", "docs/python_api/models/siliconlabs/rock_paper_scissors", "docs/python_api/models/tflite_micro/index", "docs/python_api/models/tflite_micro/tflite_micro_magic_wand", "docs/python_api/models/tflite_micro/tflite_micro_speech", "docs/python_api/models/tinyml/anomaly_detection", "docs/python_api/models/tinyml/image_classification", "docs/python_api/models/tinyml/index", "docs/python_api/models/tinyml/keyword_spotting", "docs/python_api/models/tinyml/visual_wake_words", "docs/python_api/operations/evaluate", "docs/python_api/operations/index", "docs/python_api/operations/profile", "docs/python_api/operations/quantize", "docs/python_api/operations/summarize", "docs/python_api/operations/train", "docs/python_api/operations/update_model_parameters", "docs/python_api/operations/view", "docs/python_api/tflite_micro_model/accelerator", "docs/python_api/tflite_micro_model/index", "docs/python_api/tflite_micro_model/layer_error", "docs/python_api/tflite_micro_model/model", "docs/python_api/tflite_micro_model/model_details", "docs/python_api/tflite_micro_model/profiled_layer_result", "docs/python_api/tflite_micro_model/wrapper", "docs/python_api/tflite_model/activation", "docs/python_api/tflite_model/add_layer", "docs/python_api/tflite_model/conv2d_layer", "docs/python_api/tflite_model/conv2d_layer_options", "docs/python_api/tflite_model/conv_params", "docs/python_api/tflite_model/depthwise_conv2d_layer", "docs/python_api/tflite_model/depthwise_conv2d_layer_options", "docs/python_api/tflite_model/depthwise_conv_params", "docs/python_api/tflite_model/dequantize_layer", "docs/python_api/tflite_model/dictionary.fbs", "docs/python_api/tflite_model/fully_connected_layer", "docs/python_api/tflite_model/fully_connected_layer_options", "docs/python_api/tflite_model/fully_connected_params", "docs/python_api/tflite_model/index", "docs/python_api/tflite_model/layer", "docs/python_api/tflite_model/model", "docs/python_api/tflite_model/padding", "docs/python_api/tflite_model/parameters", "docs/python_api/tflite_model/pooling2d_layer", "docs/python_api/tflite_model/pooling2d_layer_options", "docs/python_api/tflite_model/pooling_params", "docs/python_api/tflite_model/quantization", "docs/python_api/tflite_model/quantize_layer", "docs/python_api/tflite_model/reshape_layer", "docs/python_api/tflite_model/shape", "docs/python_api/tflite_model/tensor", "docs/python_api/tflite_model/transpose_conv_layer", "docs/python_api/tflite_model/transpose_conv_layer_options", "docs/python_api/tflite_model/transpose_conv_params", "docs/python_api/tflite_model/unidirectional_sequence_lstm_layer", "docs/python_api/tflite_model/unidirectional_sequence_lstm_layer_options", "docs/python_api/utils/archive", "docs/python_api/utils/archive_downloader", "docs/python_api/utils/audio_dataset_generator/augmentation", "docs/python_api/utils/audio_dataset_generator/generation_config", "docs/python_api/utils/audio_dataset_generator/generator", "docs/python_api/utils/audio_dataset_generator/index", "docs/python_api/utils/audio_dataset_generator/keyword", "docs/python_api/utils/audio_dataset_generator/voice", "docs/python_api/utils/audio_dataset_generator/voice_pitch", "docs/python_api/utils/audio_dataset_generator/voice_rate", "docs/python_api/utils/bin2header", "docs/python_api/utils/cmake", "docs/python_api/utils/gpu", "docs/python_api/utils/hasher", "docs/python_api/utils/index", "docs/python_api/utils/jlink_stream/command_stream", "docs/python_api/utils/jlink_stream/data_stream", "docs/python_api/utils/jlink_stream/index", "docs/python_api/utils/jlink_stream/jlink_stream", "docs/python_api/utils/jlink_stream/stream_options", "docs/python_api/utils/logger", "docs/python_api/utils/path", "docs/python_api/utils/process_pool", "docs/python_api/utils/python", "docs/python_api/utils/serial_reader/index", "docs/python_api/utils/serial_reader/serial_reader", "docs/python_api/utils/shell_cmd", "docs/python_api/utils/signal_handler", "docs/python_api/utils/string_formatting", "docs/python_api/utils/system", "docs/python_api/utils/uart_stream/index", "docs/python_api/utils/uart_stream/uart_stream", "docs/tutorials", "docs/why_mltk", "index", "mltk/examples/audio_feature_generator", "mltk/examples/evaluate_model", "mltk/examples/profile_model", "mltk/examples/quantize_model", "mltk/examples/summarize_model", "mltk/examples/tflite_micro_model", "mltk/examples/tflite_model", "mltk/examples/train_model", "mltk/examples/update_params", "mltk/examples/view_model", "mltk/tutorials/README", "mltk/tutorials/add_existing_script_to_mltk", "mltk/tutorials/cloud_logging_with_wandb", "mltk/tutorials/cloud_training_with_vast_ai", "mltk/tutorials/fingerprint_authentication", "mltk/tutorials/image_classification", "mltk/tutorials/keyword_spotting_alexa", "mltk/tutorials/keyword_spotting_on_off", "mltk/tutorials/keyword_spotting_pacman", "mltk/tutorials/keyword_spotting_with_transfer_learning", "mltk/tutorials/model_debugging", "mltk/tutorials/model_optimization", "mltk/tutorials/model_quantization_tips", "mltk/tutorials/onnx_to_tflite", "mltk/tutorials/quantized_lstm", "mltk/tutorials/synthetic_audio_dataset_generation"], "filenames": ["cpp\\shared\\uart_stream\\examples\\data_test\\README.md", "docs\\audio\\audio_feature_generator.md", "docs\\audio\\audio_utilities.md", "docs\\audio\\keyword_spotting_overview.rst", "docs\\command_line\\classify_audio.md", "docs\\command_line\\classify_audio_cli_help.md", "docs\\command_line\\classify_image.md", "docs\\command_line\\classify_image_cli_help.md", "docs\\command_line\\commander.md", "docs\\command_line\\commander_cli_help.md", "docs\\command_line\\evaluate.md", "docs\\command_line\\evaluate_cli_help.md", "docs\\command_line\\fingerprint_reader.md", "docs\\command_line\\fingerprint_reader_cli_help.md", "docs\\command_line\\index.md", "docs\\command_line\\profile.md", "docs\\command_line\\profile_cli_help.md", "docs\\command_line\\quantize.md", "docs\\command_line\\quantize_cli_help.md", "docs\\command_line\\ssh.md", "docs\\command_line\\ssh_cli_help.md", "docs\\command_line\\summarize.md", "docs\\command_line\\summarize_cli_help.md", "docs\\command_line\\tensorboard.md", "docs\\command_line\\tensorboard_cli_help.md", "docs\\command_line\\train.md", "docs\\command_line\\train_cli_help.md", "docs\\command_line\\update_params.md", "docs\\command_line\\update_params_cli_help.md", "docs\\command_line\\view.md", "docs\\command_line\\view_audio.md", "docs\\command_line\\view_audio_cli_help.md", "docs\\command_line\\view_cli_help.md", "docs\\cpp_development\\build_options.md", "docs\\cpp_development\\command_line.md", "docs\\cpp_development\\examples\\audio_classifier.md", "docs\\cpp_development\\examples\\ble_audio_classifier.md", "docs\\cpp_development\\examples\\fingerprint_authenticator.md", "docs\\cpp_development\\examples\\hello_world.md", "docs\\cpp_development\\examples\\image_classifier.md", "docs\\cpp_development\\examples\\index.md", "docs\\cpp_development\\examples\\model_profiler.md", "docs\\cpp_development\\index.md", "docs\\cpp_development\\simplicity_studio.md", "docs\\cpp_development\\vscode.md", "docs\\cpp_development\\wrappers\\audio_feature_generator_wrapper.md", "docs\\cpp_development\\wrappers\\index.md", "docs\\cpp_development\\wrappers\\mvp_wrapper.md", "docs\\cpp_development\\wrappers\\tflite_micro_wrapper.md", "docs\\examples.md", "docs\\faq\\how_to_debug_model_during_training.md", "docs\\faq\\how_to_reduce_model_size.md", "docs\\faq\\how_to_run_model_on_embedded.md", "docs\\faq\\index.md", "docs\\faq\\linux_why_is_gpu_not_working.md", "docs\\faq\\where_is_my_trained_model.md", "docs\\faq\\why_does_eval_not_work_with_tflite.md", "docs\\faq\\why_is_model_not_working_on_embedded.md", "docs\\faq\\windows_tensorflow_dll_error.md", "docs\\guides\\index.md", "docs\\guides\\model_archive.md", "docs\\guides\\model_evaluation.md", "docs\\guides\\model_parameters.md", "docs\\guides\\model_profiler.md", "docs\\guides\\model_profiler_utility.md", "docs\\guides\\model_quantization.md", "docs\\guides\\model_search_path.md", "docs\\guides\\model_specification.md", "docs\\guides\\model_summary.md", "docs\\guides\\model_training.md", "docs\\guides\\model_training_monitor.md", "docs\\guides\\model_training_via_ssh.md", "docs\\guides\\model_visualizer.md", "docs\\guides\\notebook_examples_guide.md", "docs\\installation.md", "docs\\other\\environment_variables.md", "docs\\other\\quick_reference.md", "docs\\other\\settings_file.md", "docs\\other\\supported_hardware.md", "docs\\overview.rst", "docs\\python_api\\data_preprocessing\\audio.rst", "docs\\python_api\\data_preprocessing\\audio_data_generator.rst", "docs\\python_api\\data_preprocessing\\audio_data_generator_params.rst", "docs\\python_api\\data_preprocessing\\audio_feature_generator.rst", "docs\\python_api\\data_preprocessing\\audio_feature_generator_settings.rst", "docs\\python_api\\data_preprocessing\\image.rst", "docs\\python_api\\data_preprocessing\\image_data_generator.rst", "docs\\python_api\\data_preprocessing\\image_data_generator_params.rst", "docs\\python_api\\data_preprocessing\\index.md", "docs\\python_api\\data_preprocessing\\list_directory.rst", "docs\\python_api\\data_preprocessing\\normalize.rst", "docs\\python_api\\data_preprocessing\\tf_dataset.rst", "docs\\python_api\\data_preprocessing\\utilities.md", "docs\\python_api\\datasets\\accelerometer\\tflm_magic_wand.rst", "docs\\python_api\\datasets\\audio\\background_noise\\ambient.rst", "docs\\python_api\\datasets\\audio\\background_noise\\brd2601.rst", "docs\\python_api\\datasets\\audio\\background_noise\\esc50.rst", "docs\\python_api\\datasets\\audio\\direction_commands.rst", "docs\\python_api\\datasets\\audio\\hey_gecko.rst", "docs\\python_api\\datasets\\audio\\mit_ir_survey.rst", "docs\\python_api\\datasets\\audio\\ml_commons\\keywords.rst", "docs\\python_api\\datasets\\audio\\ml_commons\\voice.rst", "docs\\python_api\\datasets\\audio\\on_off.rst", "docs\\python_api\\datasets\\audio\\speech_commands_v2.rst", "docs\\python_api\\datasets\\audio\\ten_digits.rst", "docs\\python_api\\datasets\\audio\\yes_no.rst", "docs\\python_api\\datasets\\image\\cifar10.rst", "docs\\python_api\\datasets\\image\\fashion_mnist.rst", "docs\\python_api\\datasets\\image\\mnist.rst", "docs\\python_api\\datasets\\image\\rock_paper_scissors_v1.rst", "docs\\python_api\\datasets\\image\\rock_paper_scissors_v2.rst", "docs\\python_api\\datasets\\index.md", "docs\\python_api\\index.md", "docs\\python_api\\keras_model.md", "docs\\python_api\\mltk_model\\audio_dataset_mixin.rst", "docs\\python_api\\mltk_model\\dataset_mixin.rst", "docs\\python_api\\mltk_model\\evaluate_autoencoder_mixin.rst", "docs\\python_api\\mltk_model\\evaluate_classifier_mixin.rst", "docs\\python_api\\mltk_model\\evaluate_mixin.rst", "docs\\python_api\\mltk_model\\image_dataset_mixin.rst", "docs\\python_api\\mltk_model\\index.md", "docs\\python_api\\mltk_model\\mltk_dataset.rst", "docs\\python_api\\mltk_model\\model.rst", "docs\\python_api\\mltk_model\\model_event.rst", "docs\\python_api\\mltk_model\\ssh_mixin.rst", "docs\\python_api\\mltk_model\\train_mixin.rst", "docs\\python_api\\mltk_model\\utilities.md", "docs\\python_api\\mltk_model\\weights_and_biases_mixin.rst", "docs\\python_api\\models\\common_models.md", "docs\\python_api\\models\\examples\\audio_example1.md", "docs\\python_api\\models\\examples\\audio_tf_dataset.md", "docs\\python_api\\models\\examples\\autoencoder_example.md", "docs\\python_api\\models\\examples\\basic_example.md", "docs\\python_api\\models\\examples\\basic_tf_dataset_example.md", "docs\\python_api\\models\\examples\\binary_classification.md", "docs\\python_api\\models\\examples\\conv1d_example.md", "docs\\python_api\\models\\examples\\image_example1.md", "docs\\python_api\\models\\examples\\image_tf_dataset.md", "docs\\python_api\\models\\examples\\index.md", "docs\\python_api\\models\\examples\\siamese_contrastive.md", "docs\\python_api\\models\\index.md", "docs\\python_api\\models\\siliconlabs\\fingerprint_signature_generator.md", "docs\\python_api\\models\\siliconlabs\\index.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_alexa.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_mobilenetv2.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_numbers.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_on_off.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_on_off_v2.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_on_off_v3.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_pacman.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_pacman_v2.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_pacman_v3.md", "docs\\python_api\\models\\siliconlabs\\keyword_spotting_with_transfer_learning.md", "docs\\python_api\\models\\siliconlabs\\rock_paper_scissors.md", "docs\\python_api\\models\\tflite_micro\\index.md", "docs\\python_api\\models\\tflite_micro\\tflite_micro_magic_wand.md", "docs\\python_api\\models\\tflite_micro\\tflite_micro_speech.md", "docs\\python_api\\models\\tinyml\\anomaly_detection.md", "docs\\python_api\\models\\tinyml\\image_classification.md", "docs\\python_api\\models\\tinyml\\index.md", "docs\\python_api\\models\\tinyml\\keyword_spotting.md", "docs\\python_api\\models\\tinyml\\visual_wake_words.md", "docs\\python_api\\operations\\evaluate.md", "docs\\python_api\\operations\\index.md", "docs\\python_api\\operations\\profile.md", "docs\\python_api\\operations\\quantize.md", "docs\\python_api\\operations\\summarize.md", "docs\\python_api\\operations\\train.md", "docs\\python_api\\operations\\update_model_parameters.md", "docs\\python_api\\operations\\view.md", "docs\\python_api\\tflite_micro_model\\accelerator.rst", "docs\\python_api\\tflite_micro_model\\index.md", "docs\\python_api\\tflite_micro_model\\layer_error.rst", "docs\\python_api\\tflite_micro_model\\model.rst", "docs\\python_api\\tflite_micro_model\\model_details.rst", "docs\\python_api\\tflite_micro_model\\profiled_layer_result.rst", "docs\\python_api\\tflite_micro_model\\wrapper.rst", "docs\\python_api\\tflite_model\\activation.rst", "docs\\python_api\\tflite_model\\add_layer.rst", "docs\\python_api\\tflite_model\\conv2d_layer.rst", "docs\\python_api\\tflite_model\\conv2d_layer_options.rst", "docs\\python_api\\tflite_model\\conv_params.rst", "docs\\python_api\\tflite_model\\depthwise_conv2d_layer.rst", "docs\\python_api\\tflite_model\\depthwise_conv2d_layer_options.rst", "docs\\python_api\\tflite_model\\depthwise_conv_params.rst", "docs\\python_api\\tflite_model\\dequantize_layer.rst", "docs\\python_api\\tflite_model\\dictionary.fbs.md", "docs\\python_api\\tflite_model\\fully_connected_layer.rst", "docs\\python_api\\tflite_model\\fully_connected_layer_options.rst", "docs\\python_api\\tflite_model\\fully_connected_params.rst", "docs\\python_api\\tflite_model\\index.md", "docs\\python_api\\tflite_model\\layer.rst", "docs\\python_api\\tflite_model\\model.rst", "docs\\python_api\\tflite_model\\padding.rst", "docs\\python_api\\tflite_model\\parameters.rst", "docs\\python_api\\tflite_model\\pooling2d_layer.rst", "docs\\python_api\\tflite_model\\pooling2d_layer_options.rst", "docs\\python_api\\tflite_model\\pooling_params.rst", "docs\\python_api\\tflite_model\\quantization.rst", "docs\\python_api\\tflite_model\\quantize_layer.rst", "docs\\python_api\\tflite_model\\reshape_layer.rst", "docs\\python_api\\tflite_model\\shape.rst", "docs\\python_api\\tflite_model\\tensor.rst", "docs\\python_api\\tflite_model\\transpose_conv_layer.rst", "docs\\python_api\\tflite_model\\transpose_conv_layer_options.rst", "docs\\python_api\\tflite_model\\transpose_conv_params.rst", "docs\\python_api\\tflite_model\\unidirectional_sequence_lstm_layer.rst", "docs\\python_api\\tflite_model\\unidirectional_sequence_lstm_layer_options.rst", "docs\\python_api\\utils\\archive.rst", "docs\\python_api\\utils\\archive_downloader.rst", "docs\\python_api\\utils\\audio_dataset_generator\\augmentation.rst", "docs\\python_api\\utils\\audio_dataset_generator\\generation_config.rst", "docs\\python_api\\utils\\audio_dataset_generator\\generator.rst", "docs\\python_api\\utils\\audio_dataset_generator\\index.md", "docs\\python_api\\utils\\audio_dataset_generator\\keyword.rst", "docs\\python_api\\utils\\audio_dataset_generator\\voice.rst", "docs\\python_api\\utils\\audio_dataset_generator\\voice_pitch.rst", "docs\\python_api\\utils\\audio_dataset_generator\\voice_rate.rst", "docs\\python_api\\utils\\bin2header.rst", "docs\\python_api\\utils\\cmake.rst", "docs\\python_api\\utils\\gpu.rst", "docs\\python_api\\utils\\hasher.rst", "docs\\python_api\\utils\\index.md", "docs\\python_api\\utils\\jlink_stream\\command_stream.rst", "docs\\python_api\\utils\\jlink_stream\\data_stream.rst", "docs\\python_api\\utils\\jlink_stream\\index.md", "docs\\python_api\\utils\\jlink_stream\\jlink_stream.rst", "docs\\python_api\\utils\\jlink_stream\\stream_options.rst", "docs\\python_api\\utils\\logger.rst", "docs\\python_api\\utils\\path.rst", "docs\\python_api\\utils\\process_pool.rst", "docs\\python_api\\utils\\python.rst", "docs\\python_api\\utils\\serial_reader\\index.md", "docs\\python_api\\utils\\serial_reader\\serial_reader.rst", "docs\\python_api\\utils\\shell_cmd.rst", "docs\\python_api\\utils\\signal_handler.rst", "docs\\python_api\\utils\\string_formatting.rst", "docs\\python_api\\utils\\system.rst", "docs\\python_api\\utils\\uart_stream\\index.md", "docs\\python_api\\utils\\uart_stream\\uart_stream.rst", "docs\\tutorials.md", "docs\\why_mltk.md", "index.md", "mltk\\examples\\audio_feature_generator.ipynb", "mltk\\examples\\evaluate_model.ipynb", "mltk\\examples\\profile_model.ipynb", "mltk\\examples\\quantize_model.ipynb", "mltk\\examples\\summarize_model.ipynb", "mltk\\examples\\tflite_micro_model.ipynb", "mltk\\examples\\tflite_model.ipynb", "mltk\\examples\\train_model.ipynb", "mltk\\examples\\update_params.ipynb", "mltk\\examples\\view_model.ipynb", "mltk\\tutorials\\README.md", "mltk\\tutorials\\add_existing_script_to_mltk.ipynb", "mltk\\tutorials\\cloud_logging_with_wandb.ipynb", "mltk\\tutorials\\cloud_training_with_vast_ai.ipynb", "mltk\\tutorials\\fingerprint_authentication.ipynb", "mltk\\tutorials\\image_classification.ipynb", "mltk\\tutorials\\keyword_spotting_alexa.ipynb", "mltk\\tutorials\\keyword_spotting_on_off.ipynb", "mltk\\tutorials\\keyword_spotting_pacman.ipynb", "mltk\\tutorials\\keyword_spotting_with_transfer_learning.ipynb", "mltk\\tutorials\\model_debugging.ipynb", "mltk\\tutorials\\model_optimization.ipynb", "mltk\\tutorials\\model_quantization_tips.ipynb", "mltk\\tutorials\\onnx_to_tflite.ipynb", "mltk\\tutorials\\quantized_lstm.ipynb", "mltk\\tutorials\\synthetic_audio_dataset_generation.ipynb"], "titles": ["UART Stream Data Test", "Audio Feature Generator", "Audio Utilities", "Keyword Spotting Overview", "classify_audio", "&lt;no title&gt;", "classify_image", "&lt;no title&gt;", "commander", "&lt;no title&gt;", "evaluate", "&lt;no title&gt;", "fingerprint_reader", "&lt;no title&gt;", "Command-Line", "profile", "&lt;no title&gt;", "quantize", "&lt;no title&gt;", "ssh", "&lt;no title&gt;", "summarize", "&lt;no title&gt;", "tensorboard", "&lt;no title&gt;", "train", "&lt;no title&gt;", "update_params", "&lt;no title&gt;", "view", "view_audio", "&lt;no title&gt;", "&lt;no title&gt;", "C++ Build Options", "Command-Line Development", "Audio Classifier", "BLE Audio Classifier", "Fingerprint Authenticator", "Hello World", "Image Classifier", "C++ Examples", "Model Profiler", "C++ Development", "Simplicity Studio Development", "Visual Studio Code Development", "AudioFeatureGenerator Python Wrapper", "C++ Python Wrappers", "MVP Python Wrapper", "Tensorflow-Lite Micro Python Wrapper", "API Examples", "How can I debug my model during training?", "How can I reduce my model\u2019s size?", "How do I run my model on an embedded device?", "Frequently Asked Questions", "Linux: Why isn\u2019t the GPU working?", "Where is my trained model?", "Why does the Keras (.h5) model work during evaluation but the TF-Lite (.tflite) does not?", "Why is the model not returning correct results on the embedded device?", "Windows: I am seeing a DLL error when importing Tensorflow", "Modeling Guides", "Model Archive File", "Model Evaluation", "Model Parameters", "Model Profiler", "Model Profiler Utility", "Model Quantization", "Model Search Path", "Model Specification", "Model Summary", "Model Training", "Model Training Monitor", "Model Training via SSH", "Model Visualizer", "Notebook Examples Guide", "Installation", "Environment Variables", "Quick Reference", "Settings File", "Supported Hardware", "Overview", "mltk.core.preprocess.utils.audio", "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator", "mltk.core.preprocess.audio.parallel_generator.ParallelProcessParams", "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator", "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings", "mltk.core.preprocess.utils.image", "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator", "mltk.core.preprocess.image.parallel_generator.ParallelProcessParams", "Data Preprocessing", "mltk.core.preprocess.utils.list_directory", "mltk.core.preprocess.utils.normalize", "mltk.core.preprocess.utils.tf_dataset", "Common Utilities", "mltk.datasets.accelerometer.tflm_magic_wand", "mltk.datasets.audio.background_noise.ambient", "mltk.datasets.audio.background_noise.brd2601", "mltk.datasets.audio.background_noise.esc50", "mltk.datasets.audio.direction_commands", "mltk.datasets.audio.hey_gecko", "mltk.datasets.audio.mit_ir_survey", "mltk.datasets.audio.mlcommons.ml_commons_keywords", "mltk.datasets.audio.mlcommons.ml_commons_voice", "mltk.datasets.audio.on_off", "mltk.datasets.audio.speech_commands.speech_commands_v2", "mltk.datasets.audio.ten_digits", "mltk.datasets.audio.yes_no", "mltk.datasets.image.cifar10", "mltk.datasets.image.fashion_mnist", "mltk.datasets.image.mnist", "mltk.datasets.image.rock_paper_scissors_v1", "mltk.datasets.image.rock_paper_scissors_v2", "Reference Datasets", "API Reference", "Keras Model", "mltk.core.AudioDatasetMixin", "mltk.core.DatasetMixin", "mltk.core.EvaluateAutoEncoderMixin", "mltk.core.EvaluateClassifierMixin", "mltk.core.EvaluateMixin", "mltk.core.ImageDatasetMixin", "MLTK Model", "mltk.core.MltkDataset", "mltk.core.MltkModel", "mltk.core.MltkModelEvent", "mltk.core.SshMixin", "mltk.core.TrainMixin", "Model Utilities", "mltk.core.WeightsAndBiasesMixin", "Common Model Architectures", "audio_example1", "audio_tf_dataset", "autoencoder_example", "basic_example", "basic_tf_dataset_example", "binary_classification", "conv1d_example", "image_example1", "image_tf_dataset", "Example Models", "siamese_contrastive", "Reference Models", "fingerprint_signature_generator", "Silicon Lab\u2019s Models", "keyword_spotting_alexa", "keyword_spotting_mobilenetv2", "keyword_spotting_numbers", "keyword_spotting_on_off", "keyword_spotting_on_off_v2", "keyword_spotting_on_off_v3", "keyword_spotting_pacman", "keyword_spotting_pacman_v2", "keyword_spotting_pacman_v3", "keyword_spotting_with_transfer_learning", "rock_paper_scissors", "Tensorflow-Lite Micro Models", "tflite_micro_magic_wand", "tflite_micro_speech", "anomaly_detection", "image_classification", "TinyML Models", "keyword_spotting", "visual_wake_words", "evaluate_model", "Model Operations", "profile_model", "quantize_model", "summarize_model", "train_model", "update_model_parameters", "view_model", "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator", "Tensorflow-Lite Micro Model", "mltk.core.tflite_micro.TfliteMicroLayerError", "mltk.core.tflite_micro.TfliteMicroModel", "mltk.core.tflite_micro.TfliteMicroModelDetails", "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult", "mltk.core.tflite_micro.TfliteMicro", "mltk.core.TfliteActivation", "mltk.core.TfliteAddLayer", "mltk.core.TfliteConv2dLayer", "mltk.core.TfliteConv2DLayerOptions", "mltk.core.TfliteConvParams", "mltk.core.TfliteDepthwiseConv2dLayer", "mltk.core.TfliteDepthwiseConv2DLayerOptions", "mltk.core.TfliteDepthwiseConvParams", "mltk.core.TfliteDequantizeLayer", "FlatbufferDictionary", "mltk.core.TfliteFullyConnectedLayer", "mltk.core.TfliteFullyConnectedLayerOptions", "mltk.core.TfliteFullyConnectedParams", "Tensorflow-Lite Model", "mltk.core.TfliteLayer", "mltk.core.TfliteModel", "mltk.core.TflitePadding", "mltk.core.TfliteModelParameters", "mltk.core.TflitePooling2dLayer", "mltk.core.TflitePool2DLayerOptions", "mltk.core.TflitePoolParams", "mltk.core.TfliteQuantization", "mltk.core.TfliteQuantizeLayer", "mltk.core.TfliteReshapeLayer", "mltk.core.TfliteShape", "mltk.core.TfliteTensor", "mltk.core.TfliteTransposeConvLayer", "mltk.core.TfliteTransposeConvLayerOptions", "mltk.core.TfliteTransposeConvParams", "mltk.core.TfliteUnidirectionalLstmLayer", "mltk.core.TfliteUnidirectionalLstmLayerOptions", "mltk.utils.archive", "mltk.utils.archive_downloader", "mltk.utils.audio_dataset_generator.Augmentation", "mltk.utils.audio_dataset_generator.GenerationConfig", "mltk.utils.audio_dataset_generator.AudioDatasetGenerator", "Audio Dataset Generator", "mltk.utils.audio_dataset_generator.Keyword", "mltk.utils.audio_dataset_generator.Voice", "mltk.utils.audio_dataset_generator.VoicePitch", "mltk.utils.audio_dataset_generator.VoiceRate", "mltk.utils.bin2header", "mltk.utils.cmake", "mltk.utils.gpu", "mltk.utils.hasher", "Utilities", "mltk.utils.jlink_stream.JlinkCommandStream", "mltk.utils.jlink_stream.JLinkDataStream", "J-Link Stream", "mltk.utils.jlink_stream.JlinkStream", "mltk.utils.jlink_stream.JlinkStreamOptions", "mltk.utils.logger", "mltk.utils.path", "mltk.utils.process_pool.ProcessPool", "mltk.utils.python", "Serial Reader", "mltk.utils.serial_reader.SerialReader", "mltk.utils.shell_cmd", "mltk.utils.signal_handler.SignalHandler", "mltk.utils.string_formatting", "mltk.utils.system", "UART Stream", "mltk.utils.uart_stream.UartStream", "Tutorials", "Why MLTK?", "Silicon Labs Machine Learning Toolkit (MLTK)", "Audio Feature Generator Example", "Model Evaluation API Examples", "Model Profiler API Examples", "Model Quantization API Examples", "Model Summary API Examples", "TF-Lite Micro Model API Examples", "TF-Lite Model API Examples", "Model Training API Examples", "Update Model Parameters API Examples", "Model Visualizer API Examples", "Tutorials", "Add an Existing Script to the MLTK", "Cloud Logging with Weights &amp; Biases", "Cloud Training with vast.ai", "Fingerprint Authentication", "Image Classification - Rock, Paper, Scissors", "Keyword Spotting - Alexa", "Keyword Spotting - On/Off", "Keyword Spotting - Pac-Man", "Keyword Spotting with Transfer Learning", "Model Debugging", "Model Optimization for MVP Hardware Accelerator", "Model Quantization Tips", "ONNX to TF-Lite Model Conversion", "Quantized LSTM", "Synthetic Audio Dataset Generation"], "terms": {"thi": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 89, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 182, 185, 186, 187, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 206, 208, 209, 211, 212, 213, 214, 215, 216, 217, 219, 220, 224, 225, 226, 228, 229, 230, 231, 232, 234, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 259, 263, 265, 267, 268], "variou": [0, 1, 2, 19, 20, 34, 42, 49, 59, 60, 61, 62, 67, 69, 70, 71, 72, 78, 79, 92, 96, 99, 112, 120, 123, 124, 127, 132, 133, 137, 140, 142, 144, 145, 146, 148, 149, 151, 152, 153, 162, 222, 240, 241, 249, 253, 254, 257, 258, 259, 260, 261, 263, 264, 266], "input": [0, 1, 8, 9, 10, 11, 35, 36, 41, 56, 61, 62, 63, 65, 67, 80, 81, 86, 90, 114, 115, 116, 117, 118, 119, 122, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 173, 176, 178, 179, 181, 182, 184, 185, 187, 189, 191, 192, 193, 195, 199, 200, 203, 205, 206, 218, 243, 244, 245, 246, 247, 249, 250, 251, 252, 254, 257, 258, 259, 260, 261, 262, 264, 268], "output": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 27, 28, 33, 35, 36, 41, 44, 51, 57, 61, 62, 63, 65, 68, 71, 80, 81, 83, 86, 90, 125, 127, 128, 129, 130, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 167, 168, 173, 176, 178, 179, 181, 182, 184, 185, 187, 189, 191, 192, 193, 194, 195, 199, 200, 203, 205, 206, 212, 218, 234, 243, 245, 247, 249, 251, 252, 256, 257, 258, 260, 261, 264, 265, 267], "featur": [0, 2, 14, 30, 35, 36, 46, 49, 52, 59, 61, 62, 63, 67, 68, 70, 71, 72, 74, 78, 79, 80, 81, 83, 84, 86, 89, 91, 96, 128, 130, 134, 143, 145, 147, 148, 150, 151, 153, 238, 239, 241, 242, 245, 247, 252, 253, 254, 256, 257, 258, 259, 262, 264, 267], "uartstream": [0, 49, 238, 259], "librari": [0, 1, 34, 42, 45, 46, 48, 49, 71, 80, 81, 83, 130, 164, 170, 176, 225, 226, 231, 238, 239, 242, 259, 260, 261], "contain": [0, 1, 14, 25, 26, 27, 28, 42, 50, 55, 57, 66, 67, 68, 69, 71, 75, 76, 81, 86, 99, 100, 101, 103, 106, 107, 108, 109, 110, 114, 115, 119, 122, 123, 125, 131, 136, 139, 141, 143, 152, 153, 162, 164, 167, 173, 186, 192, 208, 212, 216, 217, 231, 233, 241, 250, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267], "both": [0, 39, 42, 57, 61, 68, 71, 89, 139, 141, 143, 145, 148, 151, 231, 239, 256], "firmwar": [0, 1, 27, 28, 35, 37, 39, 57, 257, 258, 259, 260], "applic": [0, 1, 2, 4, 5, 27, 28, 33, 35, 36, 37, 38, 39, 40, 41, 42, 45, 47, 48, 51, 52, 57, 74, 78, 100, 101, 103, 125, 128, 129, 130, 137, 140, 141, 144, 146, 149, 152, 153, 156, 158, 164, 239, 241, 242, 254, 258, 260, 262, 264, 267, 268], "plu": [0, 48, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 260], "python": [0, 2, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 35, 49, 50, 57, 60, 66, 67, 70, 71, 73, 75, 76, 80, 81, 83, 85, 86, 91, 92, 97, 98, 102, 104, 105, 106, 112, 114, 115, 119, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 168, 176, 178, 179, 182, 185, 186, 187, 191, 192, 194, 195, 199, 200, 203, 206, 212, 216, 217, 219, 221, 222, 224, 225, 226, 230, 238, 239, 242, 254, 255, 256, 259, 264, 265, 268], "script": [0, 1, 14, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 35, 42, 45, 46, 47, 48, 50, 57, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 112, 122, 124, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 167, 168, 178, 179, 182, 185, 187, 191, 194, 195, 199, 200, 203, 206, 220, 222, 224, 225, 226, 231, 237, 238, 239, 240, 242, 245, 246, 247, 251, 252, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 267, 268], "work": [0, 1, 2, 4, 5, 15, 16, 19, 20, 25, 26, 35, 36, 37, 39, 44, 48, 51, 53, 57, 62, 63, 66, 68, 69, 72, 74, 81, 86, 101, 103, 108, 114, 119, 123, 127, 132, 137, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 216, 217, 225, 234, 238, 241, 245, 250, 251, 252, 254, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268], "togeth": [0, 1, 103, 259], "across": [0, 91, 130, 137, 143, 145, 147, 148, 150, 151, 230, 256, 261, 265, 267, 268], "see": [0, 1, 2, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 44, 49, 52, 53, 57, 59, 61, 62, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 81, 84, 89, 91, 99, 100, 103, 106, 112, 120, 122, 123, 125, 127, 129, 130, 132, 133, 134, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 164, 171, 190, 192, 208, 209, 212, 213, 214, 218, 219, 220, 221, 226, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268], "sourc": [0, 14, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 57, 71, 74, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 241, 242, 254, 256, 257, 258, 260, 262, 264, 265, 266, 268], "code": [0, 33, 40, 43, 46, 50, 52, 57, 73, 74, 77, 88, 103, 111, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 180, 183, 188, 196, 204, 207, 208, 209, 212, 215, 216, 217, 218, 219, 220, 221, 222, 226, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 245, 248, 249, 254, 255, 256, 257, 258, 259, 260, 261, 266, 267, 268], "exampl": [0, 1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 35, 36, 37, 38, 39, 41, 45, 47, 48, 52, 55, 57, 74, 81, 83, 84, 91, 93, 100, 103, 106, 107, 108, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 142, 144, 146, 147, 149, 150, 152, 153, 155, 156, 162, 164, 166, 167, 168, 169, 177, 192, 193, 216, 217, 229, 236, 239, 241, 253, 254, 258, 259, 260, 261, 262, 264, 265, 266, 267], "github": [0, 1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 74, 84, 88, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 109, 110, 111, 125, 128, 129, 130, 132, 133, 135, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 194, 208, 209, 218, 219, 220, 221, 222, 226, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 242, 243, 245, 247, 248, 249, 251, 252, 254, 257, 258, 259, 260, 261, 262, 264, 266, 268], "cpp": [0, 1, 34, 36, 40, 42, 43, 44, 46, 238, 239], "share": [0, 1, 36, 40, 42, 43, 45, 46, 48, 57, 71, 101, 108, 139, 141, 143, 144, 145, 148, 151, 152, 157, 158, 160, 161, 238, 239, 241, 242, 255, 256, 257, 260, 261, 264], "uart_stream": [0, 222, 238], "data_test": [0, 239], "0": [0, 1, 2, 4, 5, 6, 7, 23, 24, 25, 26, 35, 37, 39, 50, 57, 62, 67, 70, 74, 75, 80, 81, 83, 84, 85, 86, 89, 91, 99, 100, 101, 103, 106, 107, 108, 114, 115, 119, 120, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 167, 169, 173, 177, 178, 179, 181, 182, 184, 185, 187, 189, 191, 192, 193, 195, 197, 199, 200, 201, 203, 205, 206, 210, 213, 214, 220, 223, 230, 236, 237, 238, 239, 243, 245, 247, 248, 249, 251, 252, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268], "mltk": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 46, 49, 50, 52, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 88, 92, 111, 112, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 171, 190, 213, 222, 225, 232, 238, 240, 253, 255, 259, 262, 264, 265, 266, 267, 268], "c": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 34, 35, 36, 37, 39, 41, 43, 45, 47, 48, 52, 57, 58, 71, 74, 77, 78, 81, 103, 106, 134, 158, 176, 218, 225, 235, 238, 239, 242, 243, 245, 246, 247, 250, 251, 252, 256, 258, 260, 261, 262, 264, 265, 266], "develop": [0, 1, 4, 6, 7, 12, 13, 14, 15, 16, 36, 40, 45, 46, 47, 48, 57, 61, 62, 69, 71, 77, 78, 95, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 240, 242, 245, 254, 255, 257, 258, 260, 261, 264, 266, 267, 268], "doc": [0, 1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 81, 83, 84, 91, 112, 114, 129, 130, 132, 133, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 164, 212, 230, 249, 254, 258, 259, 260, 266, 268], "set": [0, 1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 19, 20, 23, 24, 30, 31, 33, 35, 36, 44, 50, 61, 62, 66, 69, 70, 75, 80, 81, 83, 84, 86, 87, 89, 91, 103, 107, 108, 114, 115, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 175, 176, 186, 192, 194, 216, 217, 224, 228, 229, 231, 237, 241, 242, 243, 246, 249, 251, 254, 257, 265, 268], "up": [0, 2, 35, 36, 43, 62, 67, 69, 74, 81, 84, 86, 97, 103, 129, 130, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 160, 209, 232, 239, 240, 256, 259, 260, 261, 262, 264, 266], "your": [0, 1, 2, 4, 5, 23, 24, 30, 31, 34, 35, 36, 37, 39, 41, 43, 44, 49, 50, 52, 56, 64, 67, 69, 72, 73, 74, 77, 86, 103, 114, 115, 119, 125, 127, 128, 129, 130, 134, 136, 137, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 158, 160, 161, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "environ": [0, 1, 19, 20, 50, 66, 73, 74, 77, 91, 99, 103, 112, 124, 145, 147, 148, 150, 229, 230, 234, 242, 254, 256, 258, 259, 260, 261, 268], "note": [0, 1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 19, 20, 23, 24, 27, 28, 30, 31, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 48, 61, 62, 63, 65, 68, 70, 71, 72, 73, 74, 77, 81, 83, 84, 86, 91, 114, 115, 116, 117, 119, 122, 123, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 170, 176, 178, 179, 182, 185, 187, 191, 195, 199, 200, 203, 206, 212, 216, 217, 220, 224, 225, 226, 228, 230, 231, 233, 238, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 257, 259, 261, 262, 263, 264, 265, 266, 267], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 170, 172, 174, 175, 176, 177, 178, 179, 182, 185, 186, 187, 190, 191, 192, 193, 194, 195, 199, 200, 202, 203, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268], "need": [0, 1, 15, 16, 17, 18, 21, 22, 23, 24, 29, 32, 34, 35, 36, 43, 44, 45, 47, 48, 51, 52, 57, 59, 62, 63, 67, 68, 70, 71, 72, 81, 86, 120, 125, 130, 132, 133, 134, 135, 136, 137, 139, 141, 143, 145, 146, 147, 148, 150, 151, 152, 155, 156, 176, 192, 239, 243, 245, 247, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268], "built": [0, 1, 2, 4, 5, 6, 7, 12, 13, 15, 16, 34, 35, 36, 37, 38, 39, 41, 43, 44, 52, 57, 63, 67, 68, 69, 72, 74, 123, 126, 128, 130, 137, 147, 150, 164, 166, 170, 177, 193, 242, 245, 247, 252, 254, 257, 258, 259, 260, 261, 262, 266], "embed": [0, 1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 23, 24, 27, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 53, 56, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 76, 78, 79, 132, 133, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 163, 164, 222, 223, 225, 226, 232, 238, 239, 240, 242, 243, 245, 249, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266], "1": [0, 1, 4, 5, 6, 7, 10, 11, 19, 20, 23, 24, 37, 39, 64, 67, 74, 75, 77, 81, 83, 84, 86, 89, 91, 100, 101, 106, 108, 109, 110, 114, 115, 116, 117, 119, 120, 123, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 176, 177, 181, 184, 186, 192, 193, 202, 213, 216, 217, 220, 224, 229, 230, 231, 237, 238, 239, 243, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 268], "connect": [0, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 19, 20, 27, 28, 36, 37, 39, 43, 44, 63, 64, 72, 77, 145, 157, 164, 188, 189, 207, 223, 226, 233, 239, 245, 256, 257, 258, 259, 260, 261, 262, 264], "support": [0, 2, 6, 7, 10, 11, 12, 13, 15, 16, 19, 20, 25, 26, 27, 28, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 48, 52, 57, 58, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 77, 80, 86, 103, 114, 115, 119, 125, 139, 143, 145, 148, 151, 156, 162, 164, 167, 170, 173, 176, 177, 193, 212, 240, 242, 243, 245, 247, 249, 252, 254, 255, 256, 257, 258, 260, 261, 262, 264, 267, 268], "board": [0, 1, 4, 6, 7, 12, 13, 14, 15, 16, 35, 36, 37, 39, 44, 77, 78, 95, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 245, 256, 257, 258, 259, 260, 261, 264, 267], "e": [0, 1, 2, 4, 5, 10, 11, 14, 15, 16, 23, 24, 25, 26, 27, 28, 33, 34, 36, 37, 39, 41, 43, 44, 45, 47, 48, 50, 51, 52, 56, 57, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 78, 81, 83, 84, 86, 89, 91, 99, 103, 106, 107, 108, 114, 115, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 175, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 199, 200, 203, 205, 206, 213, 214, 218, 219, 222, 230, 231, 232, 235, 236, 241, 243, 244, 245, 246, 247, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "g": [0, 1, 2, 4, 5, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25, 26, 27, 28, 33, 34, 37, 39, 41, 43, 44, 45, 47, 48, 50, 52, 56, 57, 60, 62, 64, 66, 67, 69, 70, 71, 74, 75, 78, 81, 83, 86, 89, 91, 99, 106, 107, 108, 114, 115, 119, 121, 122, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 167, 176, 177, 186, 193, 194, 213, 214, 218, 222, 231, 232, 235, 236, 251, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268], "brd2601b": 0, "pc": [0, 1, 4, 5, 6, 7, 12, 13, 14, 34, 42, 73, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 254, 257, 258, 259, 261, 263, 266], "2": [0, 1, 19, 20, 23, 24, 35, 37, 50, 64, 67, 73, 74, 75, 78, 84, 86, 91, 96, 108, 114, 115, 119, 120, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 175, 177, 194, 213, 220, 236, 243, 254, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268], "creat": [0, 1, 2, 10, 11, 19, 20, 33, 35, 36, 37, 39, 41, 43, 45, 47, 48, 49, 50, 55, 57, 59, 60, 61, 65, 67, 69, 71, 73, 74, 78, 79, 81, 84, 86, 91, 114, 119, 120, 122, 124, 125, 128, 129, 130, 132, 133, 135, 137, 138, 139, 143, 145, 147, 148, 150, 151, 152, 167, 175, 194, 220, 221, 228, 229, 230, 231, 240, 241, 254, 255, 262, 263, 267, 268], "modifi": [0, 17, 18, 27, 28, 35, 36, 37, 39, 41, 45, 47, 48, 62, 65, 68, 78, 123, 125, 144, 146, 149, 153, 157, 168, 206, 241, 246, 249, 251, 255, 257, 258, 259, 260, 261, 264], "file": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 45, 47, 48, 50, 52, 55, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 114, 119, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 168, 169, 171, 176, 186, 190, 192, 194, 208, 209, 212, 218, 221, 228, 229, 231, 233, 234, 240, 241, 242, 243, 244, 246, 247, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267, 268], "repo": [0, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 52, 78, 161, 170, 176, 238, 239, 259], "root": [0, 19, 20, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 52, 66, 71, 74, 78, 91, 112, 120, 122, 143, 145, 148, 151, 208, 209, 219, 230, 256, 259, 265], "user_opt": [0, 33, 34, 35, 36, 37, 39, 41, 45, 47, 48, 52, 78, 219, 259], "cmake": [0, 33, 38, 42, 78, 259], "add": [0, 1, 2, 27, 28, 33, 34, 35, 36, 37, 39, 41, 44, 45, 47, 48, 50, 52, 57, 61, 65, 67, 69, 70, 81, 82, 84, 87, 89, 91, 122, 125, 128, 129, 130, 132, 133, 134, 136, 137, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 156, 158, 168, 176, 178, 192, 193, 194, 219, 228, 229, 230, 240, 243, 255, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267], "follow": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 39, 40, 41, 42, 43, 44, 46, 51, 53, 54, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 88, 89, 91, 92, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 171, 175, 190, 194, 213, 216, 217, 222, 225, 229, 232, 238, 240, 241, 242, 243, 244, 245, 248, 249, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "mltk_set": [0, 33, 35, 36, 37, 39, 41, 44, 45, 47, 48, 52, 78, 259], "mltk_target": [0, 45, 47, 48, 219], "mltk_uart_stream_data_test": 0, "mltk_platform_nam": [0, 44, 78, 259], "brd2601": [0, 33, 36, 37, 39, 44, 143, 145, 147, 148, 150, 151, 245, 258, 259, 260, 261, 262, 267], "chang": [0, 27, 28, 35, 36, 56, 64, 67, 69, 70, 71, 86, 91, 101, 103, 125, 127, 139, 143, 144, 145, 146, 148, 149, 151, 152, 153, 192, 229, 234, 249, 254, 255, 256, 258, 259, 260, 262, 264, 266, 268], "platform": [0, 2, 33, 36, 41, 42, 43, 44, 78, 164, 213, 219, 242, 245, 257, 258, 259, 260, 261], "": [0, 1, 4, 5, 6, 7, 8, 10, 11, 14, 15, 16, 17, 18, 21, 22, 23, 24, 27, 28, 29, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 50, 52, 53, 56, 57, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 81, 83, 84, 86, 91, 95, 103, 112, 114, 115, 119, 122, 123, 124, 125, 126, 127, 129, 130, 131, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 164, 168, 170, 172, 173, 175, 176, 177, 178, 179, 182, 185, 186, 187, 191, 192, 193, 194, 195, 199, 200, 203, 206, 209, 212, 215, 216, 217, 221, 228, 229, 230, 231, 234, 236, 239, 240, 242, 243, 245, 246, 247, 249, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268], "name": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 49, 50, 52, 55, 59, 60, 62, 63, 66, 68, 69, 70, 71, 75, 77, 78, 81, 86, 89, 91, 103, 112, 114, 115, 116, 117, 118, 119, 122, 123, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 167, 168, 169, 170, 172, 174, 175, 176, 178, 179, 182, 185, 186, 187, 191, 192, 194, 195, 199, 200, 203, 206, 209, 212, 215, 216, 217, 218, 219, 224, 226, 228, 229, 230, 231, 233, 237, 239, 240, 241, 243, 244, 245, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268], "necessari": [0, 1, 34, 41, 43, 44, 50, 70, 71, 73, 74, 80, 81, 83, 119, 125, 126, 130, 131, 134, 136, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 158, 160, 161, 177, 192, 193, 212, 229, 230, 231, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 259, 260, 261, 264, 266, 267, 268], "3": [0, 1, 4, 5, 19, 20, 35, 37, 67, 73, 74, 75, 86, 100, 106, 108, 119, 122, 123, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 177, 193, 216, 217, 220, 231, 236, 243, 246, 250, 254, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267], "invok": [0, 1, 19, 20, 45, 46, 61, 62, 63, 65, 67, 69, 70, 71, 91, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 145, 147, 148, 150, 151, 153, 162, 173, 176, 192, 212, 219, 230, 233, 234, 241, 243, 254, 256, 257, 258, 259, 260, 262, 263, 265, 267], "target": [0, 1, 4, 5, 8, 9, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 59, 62, 63, 64, 80, 81, 86, 114, 115, 119, 125, 219, 240, 242, 256, 258, 259, 260, 261, 264, 266], "mltk_uart_stream_data_test_download": 0, "which": [0, 1, 6, 7, 12, 13, 15, 16, 23, 24, 25, 26, 30, 31, 35, 36, 37, 39, 41, 42, 44, 46, 47, 50, 51, 52, 55, 57, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 74, 81, 86, 89, 91, 99, 101, 103, 108, 114, 115, 119, 122, 123, 125, 128, 129, 130, 134, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 167, 186, 192, 194, 216, 217, 224, 230, 233, 237, 239, 241, 243, 244, 249, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "build": [0, 8, 9, 15, 16, 17, 18, 21, 22, 27, 28, 29, 32, 42, 43, 52, 63, 67, 68, 69, 72, 74, 78, 101, 123, 125, 126, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 164, 166, 169, 219, 241, 242, 245, 247, 252, 254, 255, 256, 258, 260, 264, 265, 268], "program": [0, 4, 5, 6, 7, 12, 13, 15, 16, 27, 28, 35, 37, 39, 44, 52, 60, 65, 67, 69, 70, 76, 147, 150, 257, 258, 259, 260, 261, 262, 268], "4": [0, 19, 20, 37, 39, 64, 74, 75, 78, 81, 86, 91, 99, 100, 103, 108, 119, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 177, 212, 220, 243, 248, 250, 251, 254, 256, 258, 259, 260, 261, 262, 264, 266, 267, 268], "run": [0, 1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 25, 26, 46, 47, 48, 49, 50, 53, 55, 58, 59, 60, 61, 62, 63, 65, 71, 73, 74, 75, 81, 86, 103, 112, 114, 115, 116, 117, 118, 119, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 174, 176, 192, 225, 226, 228, 230, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 255, 256, 265, 267, 268], "from": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 57, 58, 60, 61, 62, 63, 64, 65, 68, 69, 72, 73, 74, 80, 81, 82, 83, 84, 86, 87, 94, 96, 99, 100, 103, 106, 108, 114, 115, 119, 120, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 148, 149, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 167, 168, 171, 175, 176, 178, 179, 182, 185, 187, 190, 191, 192, 194, 195, 199, 200, 203, 206, 208, 209, 213, 214, 216, 217, 218, 220, 222, 224, 225, 226, 228, 230, 231, 232, 233, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 263, 264, 265, 268], "virtual": [0, 19, 20, 50, 71, 73, 74, 124, 254, 256, 258, 259, 263], "py": [0, 1, 2, 8, 9, 17, 18, 27, 28, 30, 31, 35, 36, 43, 44, 50, 55, 60, 61, 66, 67, 69, 74, 75, 103, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 166, 167, 169, 208, 209, 213, 218, 219, 220, 221, 225, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 245, 246, 247, 250, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 268], "verifi": [0, 8, 9, 74, 209, 249, 256, 258, 259, 260, 268], "transfer": [0, 142, 152, 222, 224, 225, 226, 239, 240, 260], "between": [0, 4, 5, 6, 7, 42, 45, 46, 57, 61, 81, 86, 91, 114, 115, 119, 123, 128, 132, 133, 134, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 162, 202, 216, 217, 222, 225, 226, 230, 233, 238, 239, 241, 242, 244, 254, 257, 258, 260, 261, 264, 267], "dev": [0, 1, 2, 34, 43, 44, 71, 78, 143, 145, 147, 148, 149, 150, 151, 259, 260, 261], "us": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 167, 168, 170, 173, 174, 175, 176, 177, 179, 182, 186, 187, 190, 192, 193, 194, 203, 206, 208, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 228, 230, 231, 233, 234, 237, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 259, 261, 263, 264, 265, 266, 268], "audiofeaturegener": [1, 4, 5, 30, 31, 42, 57, 62, 80, 81, 84, 88, 114, 122, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 260, 267], "i": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 53, 54, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 83, 84, 85, 86, 89, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 164, 166, 167, 168, 171, 173, 175, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 224, 225, 226, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "softwar": [1, 43, 44, 51, 62, 128, 160, 242, 256, 266], "convert": [1, 2, 8, 9, 35, 36, 37, 39, 41, 46, 52, 56, 57, 61, 68, 69, 76, 80, 81, 83, 84, 85, 86, 88, 90, 91, 96, 100, 101, 103, 119, 123, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 161, 177, 192, 193, 216, 217, 219, 231, 233, 236, 240, 241, 242, 243, 245, 246, 247, 249, 250, 252, 254, 259, 261, 262, 265, 268], "stream": [1, 2, 4, 5, 35, 49, 62, 84, 99, 126, 143, 144, 145, 147, 148, 150, 218, 222, 223, 224, 226, 228, 239, 241, 242, 259, 260, 261, 264], "spectrogram": [1, 4, 5, 14, 30, 31, 42, 45, 46, 57, 62, 80, 81, 83, 84, 88, 114, 128, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 241, 242, 243, 257, 258, 259, 261, 264], "ar": [1, 2, 4, 5, 6, 7, 10, 11, 14, 17, 18, 19, 20, 25, 26, 27, 28, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 48, 49, 52, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 86, 88, 89, 91, 92, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 111, 114, 115, 119, 120, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 159, 162, 163, 164, 168, 175, 176, 177, 186, 192, 193, 194, 212, 213, 216, 217, 222, 229, 230, 231, 241, 242, 243, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268], "classif": [1, 4, 5, 6, 7, 12, 13, 35, 36, 57, 67, 117, 120, 129, 130, 132, 133, 134, 136, 137, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 240, 242, 243, 254, 257, 259, 260, 261, 262, 264, 266, 267], "machin": [1, 3, 19, 20, 23, 24, 35, 36, 37, 51, 59, 62, 67, 69, 71, 72, 78, 79, 101, 103, 124, 130, 137, 143, 145, 147, 148, 150, 151, 240, 241, 254, 255, 259, 262, 263, 264, 266, 268], "learn": [1, 3, 23, 24, 34, 35, 36, 37, 43, 44, 51, 59, 62, 67, 69, 70, 71, 72, 78, 79, 101, 103, 125, 129, 130, 135, 136, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 160, 161, 240, 241, 254, 255, 256, 259, 263, 264, 266, 267, 268], "model": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 40, 42, 45, 46, 47, 48, 49, 53, 73, 74, 75, 77, 79, 81, 84, 86, 88, 91, 100, 101, 103, 111, 112, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 127, 162, 164, 166, 167, 168, 169, 170, 173, 174, 175, 176, 178, 179, 182, 185, 186, 187, 191, 192, 194, 195, 199, 200, 202, 203, 206, 229, 232, 240, 242, 254, 255, 268], "make": [1, 14, 27, 28, 45, 47, 48, 51, 61, 67, 103, 123, 128, 130, 132, 133, 134, 139, 143, 145, 147, 148, 150, 151, 152, 216, 217, 228, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268], "predict": [1, 61, 81, 86, 116, 117, 118, 139, 141, 162, 192, 241, 243, 244, 249, 257, 258, 260, 261, 262, 264, 266], "content": [1, 8, 9, 36, 71, 76, 100, 125, 173, 218, 241, 242, 263, 266], "A": [1, 2, 6, 7, 12, 13, 23, 24, 36, 37, 39, 41, 44, 51, 60, 61, 65, 70, 71, 73, 81, 84, 86, 89, 91, 103, 114, 115, 119, 122, 123, 125, 127, 128, 129, 130, 132, 133, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 166, 173, 186, 190, 192, 215, 216, 217, 230, 234, 239, 241, 245, 248, 249, 254, 256, 257, 258, 259, 260, 261, 265, 266, 267, 268], "common": [1, 2, 33, 35, 36, 51, 57, 62, 65, 67, 76, 88, 91, 96, 99, 103, 108, 112, 140, 143, 144, 146, 149, 152, 153, 231, 246, 251, 257, 258, 259, 260, 264, 266, 267], "case": [1, 4, 5, 6, 7, 12, 13, 15, 16, 21, 22, 39, 51, 57, 62, 65, 67, 69, 80, 81, 84, 85, 86, 100, 114, 115, 119, 121, 123, 125, 128, 131, 143, 145, 147, 148, 152, 157, 162, 175, 176, 192, 194, 209, 214, 216, 217, 219, 229, 231, 246, 251, 256, 258, 259, 260, 262, 263, 265, 268], "keyword": [1, 2, 4, 5, 10, 11, 17, 18, 25, 26, 35, 36, 40, 65, 97, 98, 99, 102, 103, 104, 105, 122, 123, 125, 128, 129, 130, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 159, 160, 162, 211, 212, 213, 215, 216, 217, 222, 231, 240, 243, 256, 257, 258, 267, 268], "spot": [1, 2, 4, 5, 35, 36, 99, 100, 128, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 159, 160, 240, 243, 256, 264, 265, 268], "refer": [1, 2, 4, 5, 6, 7, 12, 13, 15, 16, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 49, 52, 56, 58, 64, 67, 73, 74, 80, 81, 83, 91, 99, 113, 114, 115, 116, 117, 118, 119, 121, 122, 125, 139, 141, 156, 157, 159, 161, 164, 173, 176, 178, 179, 182, 185, 187, 191, 192, 195, 198, 199, 200, 202, 203, 206, 212, 228, 231, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267, 268], "more": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 49, 51, 52, 56, 57, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 84, 86, 89, 91, 100, 103, 106, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 132, 133, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 164, 171, 190, 192, 198, 212, 213, 216, 217, 230, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "detail": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 49, 52, 56, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 84, 89, 91, 99, 100, 103, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 125, 132, 133, 141, 145, 147, 148, 150, 151, 152, 157, 162, 164, 173, 174, 192, 198, 209, 212, 213, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268], "how": [1, 2, 3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 34, 35, 36, 37, 38, 39, 41, 43, 44, 49, 53, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 71, 72, 73, 74, 79, 86, 91, 99, 114, 115, 119, 122, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268], "detect": [1, 2, 3, 4, 5, 6, 7, 35, 36, 37, 39, 40, 61, 62, 83, 84, 100, 128, 129, 130, 131, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 159, 161, 235, 240, 244, 247, 252, 257, 258, 259, 261, 264, 268], "tutori": [1, 2, 6, 7, 12, 13, 35, 36, 37, 39, 59, 61, 69, 71, 73, 86, 97, 98, 102, 104, 105, 125, 127, 132, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 212, 213, 241, 254, 255, 256, 259, 263, 265, 267, 268], "complet": [1, 2, 17, 18, 19, 20, 25, 26, 55, 59, 61, 62, 64, 65, 67, 69, 71, 74, 76, 129, 141, 143, 145, 147, 148, 150, 151, 167, 212, 230, 232, 246, 247, 251, 252, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265], "guid": [1, 2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 36, 37, 39, 41, 43, 44, 49, 54, 61, 62, 63, 64, 69, 74, 77, 84, 115, 116, 117, 118, 122, 125, 130, 132, 133, 137, 139, 141, 143, 145, 147, 148, 150, 151, 152, 162, 164, 166, 167, 168, 169, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266], "an": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 23, 24, 25, 26, 29, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 48, 49, 53, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 73, 74, 76, 77, 79, 80, 81, 84, 85, 86, 89, 91, 95, 96, 99, 114, 115, 119, 120, 122, 123, 125, 126, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 162, 163, 164, 167, 169, 175, 176, 177, 186, 192, 193, 194, 209, 214, 216, 217, 219, 221, 222, 226, 229, 231, 232, 233, 234, 239, 240, 241, 242, 243, 244, 245, 257, 258, 259, 261, 262, 263, 265, 266, 268], "ml": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 25, 26, 59, 61, 65, 68, 69, 72, 128, 131, 136, 141, 143, 145, 148, 151, 153, 160, 164, 240, 241, 242, 243, 254, 257, 258, 260, 261, 264, 265, 267, 268], "There": [1, 52, 57, 71, 143, 145, 148, 151, 230, 242, 256, 257, 258, 259, 260, 261, 262, 267], "three": [1, 39, 42, 63, 71, 74, 91, 103, 104, 123, 145, 152, 216, 217, 230, 240, 243, 262, 267], "main": [1, 43, 81, 93, 144, 146, 149, 152, 155, 218, 230, 261, 265, 266], "part": [1, 47, 74, 81, 100, 103, 114, 115, 119, 123, 143, 144, 145, 147, 148, 150, 177, 193, 216, 217, 254, 257, 258, 259, 260, 262, 266, 268], "provid": [1, 2, 3, 4, 5, 10, 11, 14, 15, 16, 19, 20, 21, 22, 23, 24, 27, 28, 29, 32, 45, 48, 49, 59, 63, 66, 67, 68, 70, 71, 73, 76, 79, 80, 83, 84, 86, 89, 91, 94, 96, 97, 98, 102, 104, 105, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 170, 173, 175, 186, 194, 212, 213, 214, 221, 233, 240, 242, 253, 254, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268], "packag": [1, 2, 8, 9, 33, 34, 43, 45, 47, 48, 66, 71, 73, 75, 81, 97, 98, 102, 104, 105, 112, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 171, 190, 212, 213, 222, 225, 230, 231, 238, 242, 254, 255, 256, 259, 264, 266, 268], "wrap": [1, 64, 86, 176, 231], "host": [1, 19, 20, 23, 24, 29, 32, 33, 42, 44, 46, 64, 169, 177, 193, 241, 256], "graphic": [1, 2, 61, 255], "view": [1, 12, 13, 14, 17, 18, 23, 24, 30, 31, 32, 35, 36, 37, 38, 39, 41, 44, 49, 59, 70, 74, 76, 84, 129, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 163, 169, 175, 194, 241, 242, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268], "real": [1, 2, 4, 5, 14, 30, 31, 40, 61, 62, 84, 86, 99, 177, 193, 241, 258, 259, 260, 261, 264], "time": [1, 2, 4, 5, 6, 7, 14, 15, 16, 30, 31, 35, 37, 40, 51, 61, 62, 63, 67, 68, 69, 70, 72, 73, 81, 84, 86, 103, 114, 115, 119, 128, 129, 130, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 163, 164, 169, 175, 176, 194, 206, 212, 224, 228, 229, 230, 231, 232, 233, 236, 239, 240, 241, 242, 243, 245, 247, 249, 252, 254, 255, 256, 257, 258, 259, 261, 262, 264, 266, 267, 268], "document": [1, 2, 7, 13, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 52, 59, 61, 69, 70, 71, 73, 83, 113, 114, 115, 127, 152, 242, 253, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267], "about": [1, 14, 34, 35, 36, 39, 42, 43, 44, 48, 59, 63, 65, 68, 70, 71, 81, 125, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 173, 224, 247, 255, 257, 259, 262], "tool": [1, 8, 9, 23, 24, 35, 36, 37, 39, 41, 42, 52, 70, 71, 72, 103, 240, 242, 254, 257, 258, 259, 260, 261, 263, 264, 266, 268], "offer": [1, 2, 74, 92, 241, 242, 253, 254, 256, 258, 260, 261, 264, 265, 268], "These": [1, 35, 36, 47, 49, 51, 52, 62, 67, 69, 77, 92, 103, 122, 125, 129, 130, 132, 133, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 241, 243, 245, 246, 247, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 267, 268], "select": [1, 15, 16, 33, 35, 36, 37, 38, 39, 41, 43, 50, 64, 73, 81, 86, 89, 91, 96, 114, 115, 119, 143, 145, 148, 151, 192, 252, 258, 263, 265], "view_audio": [1, 2, 14, 31, 144, 146, 149, 152, 257, 258, 259, 260, 261, 264], "command": [1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 16, 19, 20, 23, 24, 27, 28, 30, 31, 42, 43, 44, 50, 54, 55, 59, 60, 64, 66, 70, 73, 74, 78, 84, 112, 116, 120, 122, 124, 125, 127, 219, 223, 229, 234, 238, 239, 240, 242, 245, 247, 252, 255, 256, 262, 263, 264, 267], "save": [1, 12, 13, 25, 26, 37, 39, 69, 80, 81, 85, 86, 89, 114, 119, 123, 125, 127, 129, 139, 141, 145, 147, 150, 192, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 258, 261, 262, 265, 266, 267], "specif": [1, 8, 9, 14, 19, 20, 25, 26, 30, 31, 33, 37, 39, 41, 44, 49, 50, 55, 57, 59, 60, 63, 65, 66, 68, 70, 71, 72, 74, 77, 84, 112, 115, 116, 117, 120, 122, 123, 124, 126, 128, 138, 140, 162, 164, 167, 176, 178, 179, 181, 182, 184, 185, 186, 187, 189, 191, 192, 194, 195, 197, 198, 199, 200, 203, 205, 206, 216, 217, 241, 242, 245, 246, 247, 249, 250, 252, 253, 254, 255, 257, 259, 261, 263, 266], "train": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 35, 36, 42, 45, 46, 49, 51, 52, 53, 54, 57, 59, 60, 61, 62, 65, 66, 73, 74, 76, 77, 81, 86, 88, 89, 93, 99, 100, 101, 103, 106, 107, 108, 112, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 148, 149, 151, 152, 153, 155, 157, 158, 160, 161, 162, 163, 166, 167, 168, 169, 215, 240, 242, 243, 244, 246, 249, 251, 254, 263, 265, 266, 267, 268], "intern": [1, 2, 43, 44, 57, 69, 70, 71, 80, 81, 83, 86, 96, 122, 127, 144, 145, 146, 148, 149, 152, 162, 230, 250, 255, 259, 260, 267], "dynam": [1, 35, 41, 62, 67, 69, 83, 84, 130, 143, 145, 147, 148, 149, 150, 151, 256, 258, 259, 260, 261, 262], "dataset": [1, 6, 7, 10, 11, 12, 13, 25, 26, 57, 65, 69, 71, 76, 77, 81, 86, 89, 91, 112, 114, 115, 116, 117, 118, 119, 120, 121, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 153, 155, 162, 212, 222, 240, 243, 247, 249, 252, 254, 255, 262, 264, 265, 267], "At": [1, 35, 36, 43, 62, 67, 69, 73, 101, 125, 130, 132, 133, 137, 143, 144, 145, 147, 148, 150, 151, 194, 249, 254, 256, 258, 259, 260, 262, 265, 268], "end": [1, 27, 28, 35, 37, 39, 41, 52, 61, 65, 67, 69, 80, 85, 99, 103, 114, 115, 119, 122, 123, 125, 127, 132, 133, 137, 143, 144, 145, 147, 148, 157, 160, 177, 193, 216, 217, 240, 241, 254, 256, 258, 260, 262, 263, 264, 268], "emb": [1, 59, 62, 241, 242, 255, 258, 260], "tflite": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 29, 32, 33, 35, 36, 37, 39, 40, 41, 47, 48, 52, 53, 55, 57, 60, 62, 63, 64, 67, 68, 69, 72, 74, 75, 84, 93, 112, 120, 122, 123, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 162, 164, 166, 168, 169, 170, 171, 173, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 199, 200, 202, 203, 204, 206, 207, 240, 241, 247, 251, 252, 254, 257, 258, 259, 260, 261, 264, 265, 266, 267], "copi": [1, 19, 20, 35, 36, 37, 39, 41, 43, 52, 71, 74, 84, 86, 103, 123, 143, 144, 145, 147, 148, 150, 151, 173, 175, 194, 211, 216, 217, 220, 229, 254, 256, 257, 258, 260, 261, 264, 268], "project": [1, 23, 24, 35, 36, 37, 38, 39, 41, 43, 45, 47, 48, 52, 70, 96, 127, 206, 219, 241, 258, 260, 264], "pars": [1, 67, 241], "correspond": [1, 2, 4, 5, 33, 37, 62, 71, 81, 86, 89, 91, 106, 107, 108, 114, 115, 119, 122, 125, 126, 129, 130, 131, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 162, 166, 167, 192, 212, 213, 231, 236, 239, 241, 243, 257, 258, 259, 260, 261, 266, 268], "header": [1, 8, 9, 37, 39, 41, 164, 218, 259, 260], "imag": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 24, 40, 57, 61, 67, 70, 81, 82, 83, 88, 91, 114, 119, 122, 125, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 145, 147, 148, 150, 151, 153, 157, 158, 159, 160, 161, 162, 177, 193, 240, 243, 244, 247, 249, 252, 254, 257, 259, 260, 261, 262, 266], "load": [1, 2, 4, 5, 10, 11, 15, 16, 17, 18, 21, 22, 25, 26, 29, 32, 35, 41, 45, 47, 48, 50, 52, 58, 60, 67, 69, 76, 81, 86, 89, 91, 99, 103, 106, 107, 108, 109, 110, 114, 115, 119, 121, 122, 123, 125, 126, 128, 130, 131, 132, 133, 137, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 160, 162, 164, 166, 167, 169, 173, 174, 176, 190, 192, 194, 212, 213, 218, 231, 232, 241, 245, 246, 247, 250, 252, 254, 256, 257, 260, 264, 265, 268], "onto": [1, 60, 64, 256, 257, 266], "tensorflow": [1, 8, 9, 15, 16, 23, 24, 33, 35, 36, 39, 41, 42, 44, 46, 47, 52, 53, 54, 59, 61, 62, 63, 69, 70, 74, 75, 80, 85, 91, 103, 108, 112, 113, 114, 115, 119, 123, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 167, 192, 194, 220, 230, 240, 242, 243, 245, 246, 248, 249, 250, 251, 254, 256, 258, 259, 260, 261, 265, 266], "lite": [1, 15, 16, 21, 22, 33, 35, 36, 39, 41, 42, 46, 47, 49, 52, 53, 57, 61, 62, 63, 69, 112, 123, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 164, 170, 173, 174, 176, 194, 240, 242, 245, 246, 250, 251, 254, 261, 265], "micro": [1, 15, 16, 33, 35, 36, 39, 41, 42, 46, 47, 49, 52, 62, 63, 65, 67, 69, 76, 80, 81, 83, 112, 137, 140, 155, 156, 164, 170, 173, 174, 176, 247, 249, 251, 252, 254, 260, 261, 266, 267], "interpret": [1, 39, 41, 42, 46, 48, 50, 52, 65, 73, 76, 112, 123, 137, 139, 170, 171, 173, 174, 176, 192, 216, 217, 230, 241, 260, 263], "On": [1, 4, 5, 6, 7, 12, 13, 35, 37, 39, 43, 71, 77, 103, 142, 146, 147, 148, 240, 256, 258], "runtim": [1, 2, 35, 36, 41, 45, 47, 48, 57, 62, 63, 77, 125, 129, 131, 132, 133, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 174, 202, 206, 243, 245, 247, 248, 251, 252, 254, 257, 258, 260, 261, 264, 265, 266], "read": [1, 8, 9, 15, 16, 37, 39, 75, 80, 81, 83, 85, 86, 100, 101, 112, 130, 132, 133, 137, 143, 145, 147, 148, 150, 151, 222, 224, 226, 232, 233, 238, 239, 254, 257, 258, 260, 266], "microphon": [1, 4, 5, 14, 35, 36, 40, 62, 67, 95, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 241, 258, 259, 260, 261, 264], "b": [1, 17, 18, 21, 22, 29, 32, 34, 71, 81, 84, 132, 133, 134, 136, 139, 141, 153, 249, 254, 255, 256, 260], "sent": [1, 36, 212, 224, 239, 256, 259, 260, 261, 268], "where": [1, 12, 13, 14, 17, 18, 19, 20, 27, 28, 35, 36, 37, 39, 41, 52, 53, 60, 64, 65, 70, 71, 77, 81, 86, 89, 91, 99, 101, 103, 122, 123, 129, 131, 136, 139, 141, 143, 145, 148, 151, 153, 162, 164, 173, 186, 194, 208, 209, 212, 213, 216, 217, 255, 256, 257, 260, 265, 266, 268], "exact": [1, 45, 57, 68, 81, 86, 156, 230, 241, 256, 257, 260, 266], "same": [1, 10, 11, 17, 18, 23, 24, 25, 26, 35, 36, 37, 39, 45, 55, 57, 61, 65, 67, 69, 70, 86, 89, 103, 114, 115, 119, 120, 123, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 192, 193, 208, 215, 216, 217, 231, 241, 243, 244, 245, 247, 248, 249, 251, 254, 256, 257, 258, 259, 260, 261, 264, 265, 266, 268], "algorithm": [1, 42, 45, 46, 57, 61, 144, 146, 149, 152, 153, 209, 221, 241, 257, 258, 260, 261], "were": [1, 47, 57, 61, 103, 122, 125, 145, 147, 148, 150, 154, 157, 164, 233, 241, 243, 245, 246, 247, 249, 250, 252, 258, 259, 260, 261, 264, 266, 267], "dure": [1, 10, 11, 17, 18, 23, 24, 25, 26, 33, 42, 53, 54, 57, 60, 62, 67, 70, 81, 88, 112, 113, 114, 115, 116, 117, 118, 119, 123, 125, 130, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 162, 233, 240, 241, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266], "classifi": [1, 4, 5, 6, 7, 14, 40, 52, 61, 62, 67, 96, 114, 119, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 241, 247, 252, 257, 258, 261, 262, 264, 266, 267], "d": [1, 4, 5, 12, 13, 15, 16, 27, 28, 81, 84, 86, 130, 137, 143, 145, 147, 148, 150, 151, 175, 194, 231, 236, 239, 260, 268], "notifi": [1, 36, 40, 255], "also": [1, 2, 4, 5, 19, 20, 27, 28, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 49, 51, 55, 57, 60, 61, 62, 63, 65, 67, 68, 70, 71, 72, 74, 78, 80, 81, 86, 91, 96, 101, 103, 120, 123, 125, 130, 131, 132, 133, 134, 135, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 176, 177, 192, 193, 216, 217, 231, 238, 241, 243, 247, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268], "ensur": [1, 14, 25, 26, 34, 43, 44, 54, 56, 58, 69, 70, 71, 74, 89, 103, 114, 115, 119, 129, 130, 136, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 156, 176, 239, 241, 249, 250, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268], "type": [1, 39, 50, 56, 62, 63, 65, 67, 68, 75, 80, 81, 83, 84, 85, 86, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 114, 115, 116, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 233, 234, 236, 237, 239, 243, 244, 245, 247, 248, 249, 251, 252, 254, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268], "wa": [1, 4, 5, 19, 20, 35, 36, 37, 61, 62, 63, 71, 83, 91, 99, 103, 123, 127, 139, 141, 143, 145, 146, 147, 148, 150, 151, 152, 153, 158, 160, 164, 170, 175, 192, 200, 224, 233, 241, 243, 244, 249, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268], "should": [1, 2, 6, 7, 10, 11, 12, 13, 37, 39, 43, 44, 50, 57, 61, 62, 65, 66, 67, 69, 70, 71, 73, 74, 75, 81, 84, 86, 89, 91, 103, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 128, 129, 132, 133, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 162, 164, 192, 213, 226, 230, 239, 241, 247, 252, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "allow": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 19, 20, 25, 26, 27, 28, 30, 31, 33, 39, 41, 42, 45, 46, 47, 48, 52, 57, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 81, 85, 86, 88, 89, 91, 122, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 167, 170, 171, 176, 186, 190, 194, 213, 222, 225, 226, 230, 231, 232, 238, 239, 240, 241, 249, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268], "better": [1, 67, 70, 125, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 240, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 267, 268], "perform": [1, 10, 11, 14, 35, 36, 40, 41, 61, 65, 86, 96, 101, 114, 115, 119, 125, 130, 132, 133, 137, 144, 146, 149, 152, 162, 192, 254, 257, 258, 259, 260, 261, 262, 264, 267, 268], "automat": [1, 4, 5, 6, 7, 12, 13, 15, 16, 17, 18, 23, 24, 33, 35, 36, 37, 39, 41, 44, 51, 52, 57, 60, 65, 67, 70, 71, 81, 85, 86, 89, 91, 114, 115, 119, 121, 122, 125, 127, 130, 132, 133, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 164, 192, 209, 212, 218, 220, 221, 230, 233, 241, 254, 255, 256, 257, 258, 259, 260, 265, 267], "lock": [1, 230, 241], "step": [1, 33, 44, 50, 62, 71, 73, 74, 81, 84, 86, 114, 115, 116, 117, 118, 119, 125, 127, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 192, 241, 255, 257, 258, 259, 260, 261, 262, 263, 264], "design": [1, 35, 36, 37, 103, 132, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 241, 257, 258, 261, 262, 264, 266], "onli": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 19, 20, 27, 28, 33, 35, 36, 37, 39, 41, 44, 57, 62, 63, 65, 67, 68, 71, 72, 75, 80, 81, 86, 89, 91, 103, 114, 115, 116, 117, 119, 121, 122, 123, 125, 126, 127, 128, 130, 132, 133, 134, 137, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 157, 162, 164, 168, 176, 192, 193, 209, 212, 214, 216, 217, 219, 224, 229, 237, 239, 242, 245, 247, 249, 251, 252, 254, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268], "distribut": [1, 59, 60, 62, 71, 86, 241, 242, 256, 262, 265, 266, 267], "singl": [1, 33, 44, 50, 60, 81, 86, 103, 192, 230, 231, 256, 263, 268], "come": [1, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 64, 67, 70, 111, 140, 144, 149, 178, 179, 182, 185, 187, 191, 195, 199, 200, 203, 206, 222, 243, 254, 256, 258, 260, 263, 264, 265, 266, 267], "full": [1, 15, 16, 34, 43, 44, 71, 74, 77, 100, 103, 125, 141, 143, 144, 172, 189, 219, 229, 256, 257, 259, 260, 265, 268], "larg": [1, 23, 24, 51, 70, 71, 81, 86, 100, 125, 129, 130, 137, 143, 145, 147, 148, 150, 151, 162, 256, 259, 260, 261, 264, 265, 267, 268], "base": [1, 12, 13, 29, 32, 35, 36, 39, 44, 63, 64, 67, 69, 76, 81, 86, 103, 114, 115, 116, 117, 118, 119, 124, 125, 127, 128, 131, 132, 143, 144, 145, 146, 147, 148, 150, 151, 152, 161, 162, 192, 211, 212, 213, 214, 218, 229, 254, 256, 258, 259, 260, 261, 267, 268], "googl": [1, 2, 45, 49, 59, 62, 69, 129, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 186, 212, 213, 231, 241, 242, 253, 256, 257, 258, 259, 260, 262, 264, 266], "microfrontend": [1, 45, 83, 147, 150, 157, 160], "call": [1, 19, 20, 35, 36, 57, 61, 70, 81, 83, 86, 100, 114, 115, 119, 121, 122, 123, 127, 128, 130, 132, 133, 137, 139, 141, 143, 145, 147, 148, 150, 151, 162, 175, 176, 190, 192, 212, 216, 217, 220, 226, 230, 239, 241, 249, 254, 255, 257, 258, 260, 263, 266, 267], "frontend": [1, 81, 83, 135, 144, 145, 149, 243, 266], "receiv": [1, 37, 61, 162, 223, 224, 233, 238, 239, 256, 259], "raw": [1, 4, 5, 6, 7, 12, 13, 35, 51, 57, 80, 81, 83, 86, 88, 95, 109, 110, 135, 141, 143, 145, 147, 149, 150, 151, 157, 160, 243, 245, 247, 248, 249, 251, 252, 257, 258, 259, 260, 262, 267], "produc": [1, 61, 134, 139, 141, 177, 193, 257, 258], "filter": [1, 35, 36, 62, 65, 67, 69, 84, 128, 129, 130, 134, 135, 136, 139, 141, 143, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 160, 161, 179, 181, 182, 184, 189, 196, 203, 205, 245, 247, 248, 249, 251, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267], "bank": 1, "vector": [1, 132, 134, 136, 139, 141, 153, 192, 254, 257, 258, 264, 266], "valu": [1, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 27, 28, 35, 41, 47, 51, 61, 62, 67, 69, 71, 80, 81, 83, 84, 86, 90, 106, 108, 114, 115, 116, 117, 118, 119, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 162, 164, 167, 173, 175, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 205, 206, 210, 213, 214, 215, 216, 217, 224, 228, 229, 230, 231, 236, 243, 249, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268], "expect": [1, 14, 39, 56, 61, 80, 115, 119, 121, 122, 128, 135, 141, 143, 144, 145, 148, 149, 151, 157, 162, 243, 245, 246, 247, 250, 252, 258, 260, 261, 265, 266], "16": [1, 39, 62, 84, 97, 98, 102, 103, 104, 105, 125, 128, 129, 130, 131, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 161, 212, 243, 245, 247, 248, 249, 251, 252, 258, 259, 260, 261, 264, 266, 267, 268], "bit": [1, 34, 39, 43, 44, 62, 84, 86, 97, 98, 102, 103, 104, 105, 177, 193, 212, 239, 258, 260, 265, 267], "pcm": [1, 97, 98, 100, 101, 102, 103, 104, 105, 212], "configur": [1, 19, 20, 23, 24, 25, 26, 33, 35, 36, 37, 39, 41, 45, 47, 48, 50, 59, 62, 63, 65, 67, 69, 77, 81, 83, 86, 90, 115, 121, 125, 127, 132, 133, 135, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 157, 160, 161, 164, 211, 212, 213, 219, 226, 227, 254, 255, 259, 268], "sampl": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 23, 24, 35, 49, 51, 57, 61, 62, 65, 67, 70, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 121, 123, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 192, 210, 211, 214, 215, 216, 217, 241, 247, 249, 252, 254, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268], "rate": [1, 44, 62, 63, 80, 83, 84, 91, 96, 103, 114, 125, 129, 130, 131, 135, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 210, 211, 213, 217, 233, 239, 243, 245, 248, 255, 258, 260, 261, 262, 264, 266, 268], "signal": [1, 2, 62, 84, 141, 143, 145, 148, 151, 235, 237, 259, 260, 261], "goe": [1, 35, 36, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 258, 260, 264], "through": [1, 10, 11, 12, 13, 37, 50, 61, 62, 80, 81, 96, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 177, 192, 249, 255, 257, 258, 259, 260, 262, 264, 266, 267], "pre": [1, 2, 15, 16, 17, 18, 21, 22, 29, 32, 37, 74, 88, 112, 114, 119, 128, 129, 130, 131, 136, 137, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 240, 241, 242, 257, 258, 259, 261, 262, 266, 267], "emphasi": 1, "option": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 39, 41, 43, 45, 47, 48, 50, 52, 61, 62, 63, 65, 67, 68, 69, 70, 72, 74, 75, 77, 78, 81, 86, 89, 91, 114, 115, 119, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 168, 169, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 191, 194, 195, 196, 199, 200, 203, 204, 206, 207, 208, 212, 216, 217, 219, 223, 226, 227, 228, 229, 230, 239, 244, 245, 248, 250, 254, 255, 257, 258, 259, 260, 261, 262, 264, 266], "get": [1, 8, 9, 14, 34, 43, 44, 56, 70, 71, 73, 74, 82, 84, 86, 87, 114, 122, 125, 130, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 157, 175, 178, 179, 182, 185, 187, 191, 192, 194, 195, 199, 200, 203, 206, 228, 231, 243, 249, 255, 256, 257, 259, 260, 261, 262, 265, 266, 267, 268], "slice": [1, 123, 216, 217], "potenti": [1, 100, 125], "overlap": [1, 123, 216, 217], "frame": [1, 62, 84], "window": [1, 2, 4, 5, 14, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 47, 48, 53, 62, 64, 74, 75, 77, 78, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 157, 160, 237, 242, 256, 260, 261, 264], "function": [1, 65, 67, 69, 75, 80, 81, 83, 85, 86, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 121, 122, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 208, 209, 218, 219, 220, 221, 228, 229, 230, 231, 234, 236, 237, 245, 246, 247, 250, 252, 254, 256, 258, 259, 260, 261, 264, 265], "appli": [1, 4, 5, 23, 24, 35, 43, 62, 65, 67, 70, 81, 86, 90, 99, 114, 115, 119, 125, 128, 129, 130, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 193, 210, 212, 213, 257, 259, 260, 261, 262, 264, 265, 267, 268], "each": [1, 8, 9, 10, 11, 23, 24, 35, 36, 39, 41, 49, 57, 61, 62, 65, 67, 68, 70, 75, 81, 85, 86, 89, 91, 96, 99, 100, 103, 106, 107, 108, 114, 115, 119, 122, 123, 125, 128, 129, 130, 131, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 162, 164, 167, 173, 176, 192, 212, 213, 216, 217, 218, 224, 230, 233, 234, 241, 249, 253, 254, 255, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268], "afterward": 1, "we": [1, 2, 19, 20, 34, 35, 36, 43, 44, 50, 55, 57, 60, 61, 67, 68, 69, 72, 86, 99, 101, 103, 114, 119, 120, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 230, 243, 247, 249, 252, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "do": [1, 19, 20, 25, 26, 43, 53, 69, 71, 84, 86, 89, 103, 114, 115, 119, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 192, 209, 219, 231, 243, 250, 254, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268], "fourier": 1, "transform": [1, 81, 82, 86, 87, 130, 143, 145, 147, 148, 150, 151, 258, 260, 261, 265, 266], "short": [1, 96, 101, 143, 145, 147, 148, 149, 150, 151, 260, 267], "calcul": [1, 4, 5, 6, 7, 27, 28, 35, 61, 62, 63, 83, 84, 91, 114, 115, 119, 129, 130, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 162, 168, 179, 181, 182, 184, 187, 189, 193, 195, 197, 203, 205, 209, 241, 257, 258, 260, 265, 266], "power": [1, 37, 62, 101, 152, 153, 258, 259, 260, 268], "spectrum": 1, "subsequ": [1, 81, 86, 114, 119, 224, 258], "comput": [1, 19, 20, 23, 24, 51, 62, 70, 74, 77, 84, 86, 103, 125, 129, 130, 137, 143, 147, 150, 256, 260, 261, 262, 264, 265, 267], "slight": 1, "modif": [1, 27, 28, 86], "so": [1, 43, 51, 57, 67, 69, 70, 71, 81, 83, 103, 114, 119, 125, 130, 133, 134, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 193, 215, 241, 243, 249, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "can": [1, 2, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 23, 24, 27, 28, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 49, 52, 53, 55, 57, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 81, 86, 89, 91, 99, 101, 103, 107, 108, 114, 115, 119, 122, 123, 125, 126, 129, 130, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 164, 176, 186, 192, 194, 208, 216, 217, 224, 229, 230, 231, 241, 242, 243, 245, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "linux": [1, 2, 14, 33, 34, 35, 37, 38, 39, 41, 42, 43, 45, 47, 48, 53, 64, 74, 75, 78, 237, 242, 256], "sl_ml_audio_feature_gener": 1, "gecko_sdk": [1, 43], "audio_feature_gener": [1, 81, 114, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 260, 261], "execut": [1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 19, 20, 25, 26, 35, 39, 40, 42, 45, 47, 48, 51, 52, 57, 59, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 78, 80, 85, 86, 122, 123, 124, 130, 137, 143, 145, 147, 148, 150, 151, 153, 164, 171, 173, 176, 229, 230, 231, 234, 237, 241, 242, 245, 247, 252, 254, 256, 257, 258, 259, 260, 261, 263, 264, 266, 268], "becaus": [1, 57, 67, 144, 241, 256, 258, 260, 262, 264, 265, 267], "devic": [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 27, 28, 35, 36, 37, 39, 41, 43, 45, 47, 48, 53, 56, 60, 61, 62, 64, 65, 67, 68, 69, 76, 77, 78, 79, 100, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 175, 222, 223, 224, 225, 226, 229, 232, 238, 239, 240, 241, 243, 254, 255, 256, 257, 259, 261, 262, 264, 265, 266, 268], "mai": [1, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 25, 26, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 53, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 88, 95, 101, 111, 112, 114, 115, 119, 120, 122, 123, 125, 128, 129, 130, 132, 133, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 159, 162, 163, 176, 177, 193, 212, 215, 216, 217, 222, 224, 234, 239, 242, 243, 244, 247, 249, 252, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "hopefulli": [1, 141, 241, 258, 260, 264], "lead": [1, 67, 86, 123, 144, 146, 147, 149, 150, 152, 153, 216, 217, 241, 258], "accur": [1, 10, 14, 145, 241, 258, 260, 261, 262, 265, 266, 267], "pybind11": [1, 46], "binari": [1, 33, 52, 58, 61, 62, 76, 81, 86, 114, 119, 123, 132, 134, 138, 139, 141, 144, 162, 177, 186, 190, 192, 193, 194, 218, 222, 225, 226, 233, 238, 239, 254, 260], "api": [1, 10, 15, 17, 21, 25, 27, 29, 45, 47, 48, 59, 60, 66, 73, 74, 83, 88, 89, 91, 92, 114, 115, 116, 117, 118, 122, 125, 128, 129, 130, 132, 133, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 161, 162, 163, 164, 166, 167, 168, 169, 170, 176, 186, 192, 194, 212, 220, 222, 224, 226, 239, 241, 242, 243, 254, 255, 256, 258, 260, 262, 263, 266, 267, 268], "found": [1, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 52, 55, 58, 59, 61, 62, 63, 65, 67, 68, 69, 72, 84, 86, 88, 89, 91, 108, 111, 123, 125, 126, 131, 134, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 163, 173, 175, 192, 194, 209, 216, 217, 222, 228, 229, 231, 233, 245, 246, 247, 248, 249, 250, 251, 252, 254, 257, 258, 259, 260, 261, 262, 264, 265, 266, 268], "here": [1, 34, 35, 36, 37, 39, 43, 44, 53, 58, 61, 64, 67, 69, 80, 83, 86, 100, 129, 130, 132, 133, 135, 137, 141, 146, 147, 150, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 262, 266, 268], "core": [1, 62, 65, 67, 71, 74, 88, 103, 112, 120, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 164, 166, 167, 168, 169, 171, 190, 230, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266], "preprocess": [1, 67, 112, 114, 119, 128, 129, 130, 132, 133, 134, 135, 136, 137, 141, 153, 156, 157, 158, 160, 161, 243, 249, 254, 256, 261, 266, 267], "audio_feature_generator_wrapp": [1, 42, 45], "when": [1, 4, 5, 6, 7, 12, 13, 23, 24, 27, 28, 35, 36, 37, 39, 40, 41, 43, 45, 47, 48, 51, 52, 53, 57, 61, 62, 65, 69, 70, 71, 73, 75, 78, 84, 86, 89, 91, 103, 114, 115, 119, 121, 122, 123, 125, 127, 128, 129, 130, 132, 133, 137, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 164, 168, 176, 193, 212, 216, 217, 220, 230, 235, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268], "instal": [1, 2, 14, 45, 47, 48, 50, 58, 64, 70, 73, 75, 77, 86, 112, 130, 143, 145, 147, 148, 150, 151, 212, 231, 254, 255, 259, 262, 264, 268], "local": [1, 2, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 23, 24, 27, 28, 29, 32, 34, 35, 37, 39, 43, 49, 63, 72, 73, 77, 124, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 164, 169, 192, 208, 209, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 262, 263, 264, 266, 268], "dll": [1, 53], "directori": [1, 2, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 25, 26, 27, 28, 33, 34, 42, 43, 44, 45, 47, 48, 55, 66, 67, 69, 70, 75, 77, 80, 81, 82, 85, 86, 87, 89, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 114, 119, 122, 123, 124, 125, 130, 134, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 158, 160, 161, 162, 164, 167, 168, 208, 209, 212, 213, 219, 229, 231, 234, 237, 243, 256, 257, 258, 259, 260, 264, 265, 266, 268], "recommend": [1, 2, 4, 5, 33, 62, 65, 73, 74, 81, 152, 256, 257, 258, 259, 260, 261, 263, 268], "wai": [1, 19, 20, 51, 52, 57, 62, 70, 71, 84, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 230, 256, 257, 258, 259, 260, 261, 262, 264, 265, 267, 268], "apply_frontend": [1, 80, 81, 83, 130, 143, 144, 145, 147, 148, 149, 150, 151, 243, 261, 267], "keyword_spotting_on_off_v3": [1, 2, 19, 20, 35, 67, 71, 256, 260], "basic": [1, 2, 19, 20, 34, 61, 68, 69, 70, 71, 74, 120, 129, 130, 132, 133, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 164, 194, 247, 254, 256, 257, 259, 261, 264, 266, 268], "In": [1, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 35, 36, 37, 39, 44, 51, 57, 61, 62, 63, 65, 67, 68, 71, 72, 74, 80, 81, 84, 85, 86, 96, 114, 115, 119, 121, 123, 125, 129, 131, 132, 133, 139, 141, 143, 144, 145, 146, 147, 148, 150, 152, 156, 175, 192, 194, 209, 213, 214, 216, 217, 219, 230, 242, 243, 245, 246, 247, 251, 252, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "defin": [1, 19, 20, 25, 26, 33, 35, 41, 44, 50, 52, 57, 61, 62, 67, 69, 71, 75, 76, 83, 84, 120, 122, 125, 129, 130, 132, 133, 134, 136, 137, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 162, 186, 190, 206, 213, 229, 241, 254, 255, 256, 257, 259, 261, 263, 265, 266, 267, 268], "object": [1, 61, 67, 69, 71, 84, 112, 113, 114, 119, 120, 122, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 168, 170, 175, 177, 178, 179, 182, 185, 186, 187, 191, 192, 193, 194, 195, 199, 200, 203, 206, 221, 228, 229, 230, 231, 233, 234, 236, 254, 262], "inherit": [1, 61, 67, 69, 120, 130, 132, 133, 137, 143, 145, 147, 148, 150, 151, 186, 194, 254, 258, 260, 266], "datasetmixin": [1, 67, 69, 120, 121, 130, 131, 132, 133, 137, 139, 143, 145, 147, 148, 150, 151, 155, 254, 255, 260], "class": [1, 4, 5, 6, 7, 10, 11, 35, 36, 39, 61, 62, 69, 71, 80, 81, 82, 83, 84, 86, 87, 89, 91, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 167, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 214, 215, 216, 217, 220, 223, 224, 226, 227, 228, 230, 231, 233, 235, 236, 239, 243, 244, 247, 248, 249, 251, 252, 254, 255, 256, 257, 261, 262, 264, 267], "mymodel": [1, 61, 67, 69, 71, 116, 117, 118, 120, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 254, 255, 257, 258, 260, 261, 262, 264, 267], "mltkmodel": [1, 10, 11, 15, 16, 25, 26, 27, 28, 49, 61, 62, 71, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 168, 169, 251, 254, 255, 258, 260, 267], "trainmixin": [1, 61, 65, 67, 69, 71, 120, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 241, 246, 254, 255, 257, 258, 260], "evaluateclassifiermixin": [1, 67, 69, 71, 120, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 160, 161, 254, 255, 258, 260], "pass": [1, 10, 11, 71, 81, 86, 114, 115, 119, 120, 122, 123, 125, 128, 129, 130, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 160, 161, 177, 212, 231, 254, 255, 256, 258, 260, 261, 264, 268], "frontend_set": [1, 81, 83, 84, 114, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 259, 260, 261, 264], "audiofeaturegeneratorset": [1, 62, 80, 81, 83, 114, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 259, 260, 261, 264], "sample_rate_hz": [1, 62, 81, 83, 84, 91, 99, 114, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 259, 260, 261, 264], "16000": [1, 83, 84, 94, 95, 96, 99, 103, 129, 130, 143, 144, 145, 147, 148, 149, 150, 151, 152, 156, 243, 259, 260, 261, 264], "sample_length_m": [1, 62, 81, 82, 83, 84, 114, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 259, 260, 261, 264], "1000": [1, 23, 24, 62, 70, 81, 83, 84, 89, 91, 125, 128, 129, 130, 135, 137, 143, 144, 145, 146, 147, 148, 150, 151, 152, 155, 156, 230, 243, 251, 260, 261, 264, 266, 267], "buffer": [1, 41, 57, 143, 144, 145, 147, 148, 150, 151, 173, 174, 177, 192, 193, 224, 233, 239, 259, 260, 261, 264, 265], "enough": [1, 39, 144, 145, 148, 151, 256, 258, 259, 260, 261, 262, 264], "captur": [1, 2, 4, 5, 12, 13, 35, 37, 40, 95, 103, 143, 145, 148, 151, 232, 257, 258, 259, 260, 261], "window_size_m": [1, 62, 83, 84, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 259, 260, 261, 264], "30": [1, 80, 83, 84, 129, 130, 131, 135, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 243, 245, 248, 258, 259, 260, 261, 264, 268], "window_step_m": [1, 62, 83, 84, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 259, 260, 261, 264], "10": [1, 19, 20, 34, 37, 39, 43, 44, 62, 67, 69, 73, 74, 78, 83, 84, 106, 107, 108, 114, 115, 119, 125, 129, 130, 131, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 177, 193, 213, 243, 245, 247, 248, 251, 254, 256, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268], "filterbank_n_channel": [1, 62, 83, 84, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 259, 260, 261, 264], "104": [1, 144, 145, 148, 151, 152, 158, 243, 260, 261, 264], "want": [1, 35, 36, 57, 64, 73, 86, 101, 103, 114, 119, 120, 125, 130, 132, 133, 134, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 242, 243, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268], "possibl": [1, 54, 62, 81, 84, 86, 123, 125, 126, 143, 145, 146, 147, 148, 149, 150, 151, 152, 212, 213, 216, 217, 257, 258, 259, 260, 261, 262, 265, 268], "while": [1, 2, 4, 5, 6, 7, 12, 13, 19, 20, 35, 37, 41, 44, 51, 58, 61, 67, 68, 69, 71, 81, 86, 89, 120, 130, 132, 133, 137, 139, 141, 143, 145, 147, 148, 150, 151, 152, 162, 164, 167, 173, 175, 176, 209, 219, 224, 230, 231, 238, 239, 245, 246, 247, 250, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268], "still": [1, 33, 81, 86, 143, 144, 145, 148, 151, 256, 259, 260, 261, 262, 264, 268], "effici": [1, 14, 15, 16, 59, 61, 63, 67, 81, 88, 128, 143, 144, 145, 147, 148, 150, 151, 242, 245, 256, 258, 259, 260, 261, 262, 264, 265, 266], "hardwar": [1, 6, 7, 12, 13, 14, 15, 16, 33, 41, 42, 44, 46, 51, 64, 73, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 168, 170, 173, 176, 240, 256, 260, 265, 266], "filterbank_upper_band_limit": [1, 62, 83, 84, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 259, 260, 261, 264], "7500": [1, 83, 84, 135, 143, 145, 148, 151, 156, 243, 259, 260, 261], "filterbank_lower_band_limit": [1, 62, 83, 84, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 259, 260, 261, 264], "125": [1, 83, 84, 129, 135, 143, 144, 145, 147, 148, 150, 151, 152, 153, 156, 243, 258, 259, 260, 261, 264], "mic": [1, 143, 145, 147, 148, 149, 150, 151, 259, 260, 261], "seem": [1, 143, 145, 147, 148, 149, 150, 151, 259, 260, 261, 267], "have": [1, 2, 4, 5, 6, 7, 12, 13, 23, 24, 35, 36, 37, 39, 44, 46, 51, 54, 55, 60, 61, 62, 65, 67, 68, 69, 71, 73, 74, 81, 86, 89, 91, 101, 103, 114, 115, 116, 117, 118, 119, 122, 123, 125, 128, 130, 132, 133, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 164, 186, 192, 194, 216, 217, 219, 230, 233, 246, 251, 254, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268], "lot": [1, 41, 143, 145, 147, 148, 149, 150, 151, 256, 259, 260, 261, 268], "nois": [1, 2, 62, 67, 81, 84, 86, 114, 115, 119, 130, 136, 141, 143, 144, 145, 147, 148, 149, 150, 151, 153, 258, 259, 260, 261, 264], "lower": [1, 2, 23, 24, 39, 70, 71, 81, 86, 90, 123, 125, 141, 143, 145, 147, 148, 149, 150, 151, 216, 217, 229, 256, 257, 259, 260, 261, 265], "frequenc": [1, 23, 24, 62, 70, 84, 96, 125, 129, 130, 137, 143, 145, 147, 148, 149, 150, 151, 157, 160, 259, 260, 261, 264, 267], "noise_reduction_en": [1, 2, 62, 83, 84, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 259, 260, 261, 264], "true": [1, 23, 24, 50, 63, 67, 69, 70, 71, 80, 81, 83, 84, 85, 86, 89, 90, 91, 93, 103, 114, 115, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 169, 176, 177, 192, 193, 200, 202, 208, 209, 212, 213, 214, 216, 217, 218, 219, 224, 226, 228, 229, 230, 231, 233, 235, 236, 238, 239, 243, 244, 245, 247, 249, 250, 252, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "enabl": [1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 41, 43, 44, 46, 50, 61, 62, 67, 70, 72, 81, 83, 84, 86, 91, 99, 100, 101, 112, 116, 117, 122, 123, 125, 129, 130, 135, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 157, 162, 170, 173, 176, 219, 222, 225, 226, 241, 242, 247, 252, 255, 257, 258, 259, 260, 261, 262, 264, 266, 268], "reduct": [1, 2, 62, 84, 130, 139, 143, 145, 147, 148, 149, 150, 151, 259, 260, 261, 264], "block": [1, 62, 84, 128, 130, 141, 143, 145, 147, 148, 149, 150, 151, 239, 256, 257, 259, 260, 261, 263, 264], "help": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 39, 41, 43, 44, 51, 52, 58, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 84, 95, 103, 120, 125, 130, 132, 133, 134, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 176, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268], "ignor": [1, 35, 36, 39, 86, 103, 114, 115, 116, 117, 118, 119, 123, 125, 128, 143, 145, 147, 148, 150, 151, 164, 192, 216, 217, 219, 231, 233, 257, 259, 260, 261, 268], "background": [1, 71, 81, 86, 143, 144, 145, 147, 148, 149, 150, 151, 258, 259, 260, 261], "field": [1, 65, 66, 70, 122, 123, 125, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 164, 192, 212, 216, 217, 220, 256, 258, 259, 260, 261, 262, 268], "noise_reduction_smoothing_bit": [1, 62, 83, 84, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 259, 260, 261, 264], "noise_reduction_even_smooth": [1, 62, 83, 84, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 259, 260, 261, 264], "025": [1, 83, 84, 129, 143, 144, 145, 147, 148, 150, 151, 152, 156, 259, 260, 261, 264], "noise_reduction_odd_smooth": [1, 62, 83, 84, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 259, 260, 261, 264], "06": [1, 83, 84, 129, 143, 144, 145, 147, 148, 149, 150, 151, 152, 156, 247, 248, 251, 252, 258, 259, 260, 261, 264, 266], "noise_reduction_min_signal_remain": [1, 62, 83, 84, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 259, 260, 261, 264], "40": [1, 83, 84, 130, 134, 135, 136, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 160, 243, 258, 259, 260, 261, 264, 268], "fairli": [1, 143, 145, 148, 151, 152, 259, 260, 261, 262, 268], "small": [1, 65, 103, 121, 130, 132, 133, 137, 139, 143, 145, 147, 148, 150, 151, 152, 164, 254, 256, 258, 259, 260, 261, 264, 266, 268], "But": [1, 57, 143, 145, 148, 151, 259, 260, 261], "ha": [1, 4, 5, 6, 7, 8, 9, 14, 21, 22, 35, 36, 37, 39, 42, 44, 51, 57, 58, 60, 62, 63, 65, 70, 71, 74, 81, 84, 86, 89, 91, 100, 112, 114, 115, 119, 122, 123, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 175, 177, 179, 182, 186, 192, 193, 194, 203, 208, 209, 212, 216, 217, 229, 233, 237, 243, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268], "been": [1, 4, 5, 6, 7, 12, 13, 14, 21, 22, 35, 36, 57, 62, 65, 71, 74, 101, 122, 123, 125, 131, 141, 143, 145, 147, 148, 150, 151, 164, 209, 212, 216, 217, 219, 233, 246, 251, 254, 256, 258, 259, 260, 261, 262, 264, 266, 268], "give": [1, 4, 5, 6, 7, 14, 39, 86, 103, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 208, 243, 249, 258, 259, 260, 261], "good": [1, 67, 69, 143, 145, 147, 148, 150, 151, 256, 258, 259, 260, 261, 265, 267], "result": [1, 2, 4, 5, 6, 7, 10, 11, 15, 16, 19, 20, 25, 26, 35, 36, 39, 53, 56, 60, 62, 63, 114, 116, 117, 118, 119, 123, 125, 129, 130, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 162, 164, 167, 170, 173, 175, 192, 216, 217, 230, 243, 244, 245, 250, 255, 257, 258, 259, 260, 261, 265, 266], "some": [1, 4, 5, 6, 7, 21, 22, 27, 28, 33, 34, 35, 36, 43, 44, 48, 57, 67, 68, 73, 74, 76, 86, 91, 103, 125, 129, 130, 134, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 192, 229, 248, 249, 254, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266], "actual": [1, 48, 61, 63, 67, 69, 76, 134, 139, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 229, 249, 254, 256, 257, 258, 259, 260, 261, 262, 264], "mostli": [1, 143, 145, 148, 151, 258, 259, 260, 261], "untouch": [1, 62, 123, 143, 145, 148, 151, 216, 217, 251, 259, 260, 261], "dc_notch_filter_en": [1, 62, 84, 130, 143, 145, 147, 148, 149, 150, 151, 243, 259, 260, 261], "dc": [1, 62, 84, 130, 143, 145, 147, 148, 149, 150, 151, 259, 260, 261], "notch": [1, 62, 84, 130, 143, 145, 147, 148, 149, 150, 151, 259, 260, 261], "remov": [1, 45, 47, 48, 84, 89, 91, 103, 123, 125, 143, 145, 147, 148, 150, 151, 175, 192, 194, 208, 209, 216, 217, 229, 242, 256, 257, 258, 259, 260, 261, 262, 264, 268], "dc_notch_filter_coeffici": [1, 62, 84, 130, 143, 145, 147, 148, 149, 150, 151, 243, 259, 260, 261], "95": [1, 84, 129, 130, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 160, 243, 257, 258, 259, 260, 261, 262, 264, 266], "quantize_dynamic_scale_en": [1, 62, 83, 84, 130, 143, 145, 147, 148, 149, 150, 151, 243, 259, 260, 261], "quantiz": [1, 4, 5, 10, 11, 14, 15, 16, 18, 25, 26, 37, 39, 41, 49, 51, 57, 59, 60, 62, 67, 68, 69, 76, 83, 84, 115, 120, 122, 123, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 162, 163, 166, 167, 171, 181, 184, 189, 192, 197, 198, 199, 202, 205, 240, 241, 242, 243, 244, 245, 247, 249, 250, 252, 254, 257, 258, 259, 260, 261, 264], "uint16": [1, 80, 81, 83, 143, 145, 148, 149, 151, 186, 194, 243, 259, 260, 261, 265], "int8": [1, 39, 56, 57, 61, 65, 67, 69, 80, 81, 83, 85, 120, 125, 129, 130, 131, 132, 133, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 186, 194, 243, 244, 245, 247, 248, 249, 251, 254, 258, 259, 260, 261, 264, 265, 266], "quantize_dynamic_scale_range_db": [1, 62, 83, 84, 130, 143, 145, 147, 148, 149, 150, 151, 243, 259, 260, 261], "paramet": [1, 14, 17, 18, 27, 28, 30, 31, 39, 49, 51, 59, 61, 65, 68, 76, 80, 81, 83, 84, 85, 86, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 115, 119, 121, 122, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 178, 179, 181, 182, 184, 185, 186, 187, 189, 191, 192, 194, 195, 197, 198, 199, 200, 202, 203, 205, 206, 208, 209, 211, 212, 215, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 233, 234, 236, 237, 239, 242, 243, 254, 256, 262, 264, 265, 266, 267], "thei": [1, 6, 7, 49, 62, 67, 70, 84, 89, 91, 103, 114, 115, 119, 122, 123, 128, 129, 130, 141, 143, 144, 145, 146, 147, 148, 150, 151, 153, 156, 216, 217, 253, 256, 257, 258, 259, 260, 261, 266, 268], "includ": [1, 15, 16, 33, 52, 57, 62, 66, 67, 68, 69, 76, 81, 82, 84, 86, 87, 89, 91, 100, 103, 122, 123, 125, 128, 129, 130, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 161, 164, 167, 208, 214, 216, 217, 218, 229, 242, 254, 255, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268], "http": [1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 58, 67, 72, 74, 76, 81, 84, 86, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 122, 123, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 169, 192, 194, 222, 242, 243, 245, 247, 248, 249, 251, 252, 254, 256, 258, 259, 260, 261, 262, 266, 268], "siliconlab": [1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 67, 74, 84, 88, 95, 109, 110, 111, 125, 128, 129, 130, 132, 133, 135, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 222, 242, 243, 245, 248, 249, 254, 259, 260], "io": [1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 67, 84, 122, 125, 128, 129, 130, 132, 133, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 218, 234, 238, 249, 254, 258, 259, 260, 262], "model_paramet": [1, 27, 28, 62, 67, 84, 122, 129, 130, 132, 133, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 249, 251, 254, 257, 259, 260, 265, 267], "html": [1, 6, 7, 12, 13, 33, 34, 37, 39, 41, 43, 44, 81, 84, 125, 129, 130, 132, 133, 134, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 164, 249, 254, 258, 259, 260, 261, 266, 268], "my_model": [1, 4, 5, 10, 11, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 37, 39, 41, 50, 52, 55, 56, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 84, 114, 115, 116, 117, 118, 119, 120, 121, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 192, 245, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267], "updat": [1, 10, 11, 14, 17, 18, 27, 28, 34, 43, 44, 49, 50, 60, 61, 71, 84, 91, 123, 125, 127, 130, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 162, 163, 168, 170, 175, 176, 192, 194, 213, 231, 244, 245, 247, 248, 250, 252, 255, 256, 257, 259, 260, 261, 266, 268], "data": [1, 2, 4, 5, 8, 9, 23, 24, 30, 31, 35, 36, 39, 41, 46, 50, 56, 61, 62, 63, 64, 65, 67, 69, 70, 71, 77, 80, 81, 83, 85, 86, 89, 90, 91, 92, 96, 99, 100, 103, 106, 107, 108, 112, 114, 115, 116, 117, 118, 119, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 170, 173, 174, 176, 178, 179, 182, 185, 186, 187, 191, 192, 194, 195, 199, 200, 202, 203, 206, 216, 217, 218, 221, 222, 223, 224, 225, 226, 228, 230, 232, 233, 238, 239, 240, 241, 245, 248, 250, 254, 262, 264, 268], "pipelin": [1, 70, 128, 130, 137, 143, 145, 147, 148, 150, 151, 255, 261, 265], "import": [1, 53, 61, 67, 69, 71, 74, 83, 84, 112, 120, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 171, 190, 192, 213, 225, 230, 231, 232, 238, 254, 255, 256, 257, 259, 260, 261, 262, 264, 266, 268], "audio_util": [1, 4, 5, 30, 31, 83, 130, 143, 145, 147, 148, 150, 151, 243, 260, 261, 267], "augmented_sampl": [1, 130, 143, 145, 147, 148, 150, 151, 261, 267], "dtype": [1, 57, 62, 80, 81, 82, 83, 86, 87, 90, 91, 122, 129, 130, 131, 133, 135, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 186, 192, 194, 202, 218, 243, 248, 249, 259, 261, 265, 266, 267], "np": [1, 57, 81, 83, 86, 90, 91, 114, 115, 119, 129, 130, 131, 132, 133, 134, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 178, 179, 182, 185, 187, 191, 192, 195, 199, 200, 203, 206, 243, 249, 254, 257, 259, 260, 261, 265, 266, 267], "via": [1, 14, 19, 33, 34, 44, 59, 61, 63, 65, 68, 69, 70, 72, 73, 74, 77, 86, 123, 124, 216, 217, 222, 223, 225, 226, 238, 239, 242, 247, 251, 252, 255, 256, 257, 258, 259, 260, 261], "interfac": [1, 2, 14, 23, 24, 29, 32, 41, 46, 48, 59, 63, 64, 112, 125, 127, 222, 225, 226, 242, 255, 256], "thu": [1, 51, 67, 114, 115, 119, 128, 141, 230, 254, 256, 257, 260, 261, 264, 267, 268], "It": [1, 2, 4, 5, 10, 11, 23, 24, 33, 35, 44, 52, 57, 61, 64, 65, 81, 82, 86, 87, 89, 91, 100, 103, 114, 115, 119, 128, 132, 133, 141, 142, 143, 144, 145, 146, 149, 150, 151, 153, 241, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267], "adjust": [1, 2, 80, 81, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 243, 256, 258, 259, 260, 261, 262, 266, 268], "affect": [1, 2, 114, 115, 119, 127, 144, 145, 146, 148, 149, 151, 152], "To": [1, 2, 14, 34, 35, 36, 37, 39, 41, 43, 45, 47, 48, 50, 51, 52, 61, 64, 67, 70, 71, 73, 78, 103, 139, 141, 145, 147, 148, 150, 151, 177, 193, 241, 243, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268], "issu": [1, 2, 14, 19, 20, 43, 45, 47, 48, 57, 58, 61, 62, 63, 65, 68, 69, 70, 71, 72, 74, 96, 120, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 223, 234, 235, 240, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266], "wxpython": [1, 2, 30, 31, 260], "sever": [2, 34, 37, 39, 40, 41, 43, 44, 46, 51, 52, 58, 61, 67, 69, 71, 143, 145, 147, 148, 150, 151, 241, 254, 257, 258, 260, 261, 265, 266, 267], "aid": [2, 48, 57, 67, 69, 130, 137, 143, 145, 147, 148, 150, 151, 152, 230, 242, 254, 257, 258, 259, 260, 261, 265, 268], "custom": [2, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 33, 59, 61, 67, 69, 71, 81, 86, 89, 91, 112, 116, 117, 118, 122, 125, 127, 129, 134, 136, 139, 141, 143, 144, 145, 146, 148, 149, 151, 152, 153, 240, 241, 242, 257, 258, 260, 261, 264, 267, 268], "depend": [2, 51, 67, 74, 75, 84, 86, 103, 115, 145, 255, 256, 258, 267, 268], "usecas": [2, 257], "overview": [2, 74, 99, 112, 267], "abil": [2, 61, 260], "print": [2, 6, 7, 21, 22, 35, 36, 38, 39, 40, 54, 103, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 167, 171, 190, 192, 213, 228, 229, 232, 238, 243, 244, 245, 247, 251, 254, 256, 257, 258, 260, 264, 266, 268], "termin": [2, 4, 5, 19, 20, 23, 24, 38, 39, 71, 125, 237, 257, 258, 260, 261, 262, 264], "audio_classifi": [2, 4, 5, 27, 28, 35, 129, 130, 144, 146, 149, 152, 156, 259, 260], "flow": [2, 19, 20, 62, 70, 71, 86, 136, 153, 194, 238, 239, 240, 255, 258, 260, 267], "recogn": [2, 4, 5, 260], "classify_audio": [2, 5, 14, 74, 78, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 257, 258, 259, 260, 261, 262, 264, 267], "verbos": [2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 62, 67, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 167, 219, 231, 254, 256, 258, 259, 260, 262, 267], "threshold": [2, 4, 5, 6, 7, 36, 39, 61, 62, 80, 81, 84, 125, 129, 130, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 162, 251, 258, 260], "150": [2, 144, 148, 149, 151, 152, 160, 258, 260, 261, 264], "255": [2, 4, 5, 6, 7, 35, 36, 57, 85, 106, 108, 129, 130, 132, 133, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 254, 258, 260, 265, 266], "mean": [2, 39, 56, 62, 81, 86, 90, 101, 123, 128, 137, 139, 141, 144, 145, 152, 216, 217, 230, 243, 249, 256, 257, 258, 260, 264, 266, 267], "easier": [2, 15, 16, 48, 143, 145, 147, 148, 150, 151, 268], "higher": [2, 4, 5, 6, 7, 35, 36, 71, 81, 129, 130, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 156, 257, 258, 260], "fals": [2, 23, 24, 63, 70, 71, 77, 80, 81, 84, 85, 86, 89, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 169, 173, 176, 177, 192, 193, 200, 202, 208, 209, 212, 216, 217, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 233, 235, 236, 243, 251, 254, 256, 257, 258, 260, 264, 266, 267, 268], "posit": [2, 23, 24, 62, 70, 84, 123, 125, 129, 130, 137, 143, 147, 150, 162, 177, 193, 213, 216, 217, 259, 268], "sai": [2, 23, 24, 55, 57, 70, 99, 103, 125, 129, 130, 137, 143, 145, 147, 148, 150, 151, 259, 260, 261, 268], "off": [2, 35, 36, 103, 132, 141, 142, 146, 147, 148, 160, 240, 256], "process": [2, 4, 5, 6, 7, 10, 11, 15, 16, 25, 26, 35, 36, 37, 39, 45, 49, 51, 57, 62, 67, 71, 80, 81, 83, 85, 86, 87, 88, 89, 91, 92, 99, 112, 114, 119, 123, 127, 128, 130, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 162, 164, 167, 212, 226, 230, 237, 241, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267], "occur": [2, 57, 239], "much": [2, 4, 5, 6, 7, 23, 24, 70, 71, 103, 143, 144, 147, 150, 213, 241, 256, 258, 260, 262, 266, 268], "faster": [2, 51, 230, 256, 258, 260], "compar": [2, 10, 11, 37, 51, 61, 96, 100, 116, 123, 125, 127, 141, 162, 216, 217, 255, 257, 258, 260, 266], "artifici": [2, 258], "delai": [2, 259], "would": [2, 4, 5, 60, 67, 86, 95, 99, 125, 128, 130, 137, 143, 145, 147, 148, 150, 151, 242, 254, 257, 258, 260, 262, 267, 268], "why": [2, 53, 143, 145, 147, 148, 150, 151, 242, 260], "matter": [2, 268], "keyword_spotting_mobilenetv2": [2, 152, 262, 264], "loop": [2, 4, 5, 6, 7, 35, 39, 62, 67, 86, 94, 114, 115, 119, 125, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 258, 260], "200m": [2, 4, 5, 260], "200": [2, 4, 5, 114, 115, 119, 134, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153, 158, 213, 258, 260, 261, 268], "left": [2, 36, 67, 69, 97, 103, 123, 129, 130, 144, 149, 150, 151, 160, 216, 217, 240, 256, 257, 258, 260, 261, 262, 264, 266], "right": [2, 36, 50, 64, 67, 69, 73, 97, 103, 123, 129, 130, 141, 144, 149, 150, 151, 160, 216, 217, 240, 256, 257, 258, 261, 262, 263, 264, 266], "down": [2, 23, 24, 36, 51, 67, 69, 70, 81, 97, 103, 125, 129, 130, 137, 143, 144, 145, 147, 148, 149, 150, 151, 160, 230, 240, 256, 261, 262, 264, 266], "stop": [2, 36, 54, 89, 91, 97, 103, 114, 115, 119, 122, 123, 125, 129, 130, 135, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 156, 160, 201, 210, 214, 216, 217, 233, 240, 252, 256, 258, 261, 262, 263, 264], "go": [2, 36, 73, 74, 97, 103, 144, 149, 150, 151, 160, 240, 261, 262, 264, 265], "after": [2, 4, 5, 17, 18, 19, 20, 23, 24, 25, 26, 35, 36, 37, 39, 41, 43, 44, 52, 55, 60, 62, 64, 65, 67, 69, 70, 71, 74, 76, 81, 86, 91, 103, 120, 123, 124, 125, 129, 130, 135, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 167, 216, 217, 224, 233, 243, 245, 246, 247, 250, 251, 252, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267, 268], "awhil": [2, 8, 9, 44, 243, 247, 252, 258, 260, 264, 266, 268], "ctrl": [2, 19, 20, 71, 73, 235], "wav": [2, 4, 5, 80, 83, 91, 94, 97, 98, 102, 103, 104, 105, 130, 143, 145, 147, 148, 149, 150, 151, 212, 243, 260, 261, 268], "user": [2, 8, 9, 12, 13, 19, 20, 35, 36, 37, 40, 43, 62, 67, 71, 75, 77, 132, 133, 164, 194, 229, 240, 243, 245, 246, 247, 250, 251, 252, 254, 256, 257, 258, 259, 260, 264, 266], "home": [2, 4, 5, 77, 229, 237, 256, 260, 264], "audio_classify_record": [2, 260], "dump_audio": 2, "avi": 2, "video": [2, 4, 5, 149, 150, 151, 260, 261, 267], "jpg": [2, 4, 5, 39, 81, 85, 86, 91, 130, 143, 145, 147, 148, 150, 151, 257, 258, 260], "assum": [2, 14, 60, 62, 65, 80, 85, 123, 125, 157, 216, 217, 230, 237, 246, 251, 256, 258, 260, 262, 264, 265], "you": [2, 14, 23, 24, 33, 34, 35, 37, 39, 41, 43, 44, 45, 47, 48, 50, 54, 56, 57, 58, 64, 67, 70, 71, 73, 74, 76, 81, 86, 103, 114, 115, 119, 125, 127, 128, 130, 131, 132, 133, 135, 137, 141, 143, 146, 147, 150, 152, 176, 186, 192, 194, 241, 242, 247, 249, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "entir": [2, 72, 89, 91, 125, 143, 145, 147, 148, 150, 260, 261], "If": [2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 48, 50, 52, 54, 56, 62, 65, 66, 67, 69, 70, 71, 74, 75, 80, 81, 84, 85, 86, 89, 91, 103, 114, 115, 116, 117, 118, 119, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 168, 169, 173, 175, 176, 177, 192, 193, 194, 208, 209, 212, 214, 216, 217, 218, 219, 221, 224, 228, 229, 230, 231, 233, 234, 237, 239, 242, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268], "red": [2, 35, 36, 37, 39, 262, 264], "led": [2, 4, 5, 6, 7, 35, 36, 37, 39, 258, 260, 262, 264], "turn": [2, 35, 36, 39, 260, 262, 264], "activ": [2, 4, 5, 6, 7, 14, 19, 20, 23, 24, 35, 36, 37, 39, 62, 67, 69, 70, 71, 74, 83, 84, 96, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 170, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 195, 196, 197, 205, 206, 207, 212, 226, 230, 231, 243, 245, 247, 248, 249, 251, 252, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266], "green": [2, 35, 36, 37, 39, 262, 264], "addition": [2, 6, 7, 12, 13, 23, 24, 36, 51, 55, 57, 61, 65, 69, 74, 78, 81, 145, 241, 244, 254, 258, 260, 261, 264, 265, 266, 267], "serial": [2, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 35, 36, 38, 39, 62, 77, 86, 122, 164, 186, 194, 222, 229, 233, 239, 258, 259, 260], "log": [2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 44, 55, 60, 62, 67, 69, 70, 71, 76, 77, 114, 119, 122, 125, 127, 129, 130, 137, 139, 141, 143, 145, 147, 148, 150, 151, 162, 167, 168, 176, 219, 228, 231, 240, 247, 252, 256, 257, 258, 259, 260, 266], "update_param": [2, 14, 28, 52, 60, 62, 257, 258, 259, 260, 261], "re": [2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 27, 28, 34, 43, 44, 57, 74, 80, 89, 91, 96, 103, 114, 119, 125, 127, 130, 131, 132, 133, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 192, 208, 223, 229, 232, 233, 243, 249, 254, 256, 257, 258, 259, 260, 262, 264, 266, 268], "differ": [2, 6, 7, 35, 36, 37, 39, 41, 52, 58, 61, 71, 86, 101, 103, 114, 115, 119, 125, 127, 129, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 241, 254, 255, 256, 257, 258, 260, 261, 262, 264, 266, 268], "disabl": [2, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 23, 24, 35, 36, 41, 62, 70, 71, 81, 84, 86, 89, 91, 101, 125, 127, 129, 130, 135, 137, 143, 145, 147, 148, 149, 150, 151, 155, 164, 176, 220, 224, 230, 258, 259, 260, 261], "modul": [2, 6, 7, 12, 13, 14, 37, 39, 50, 58, 62, 66, 67, 84, 86, 91, 92, 114, 115, 119, 123, 126, 216, 217, 230, 231, 257, 258], "fe": [2, 62, 129, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 260, 264], "experiment": [2, 4, 5, 30, 31, 70, 125, 130, 137, 143, 145, 147, 148, 150, 151, 157, 160, 242, 258, 260, 261, 264, 265, 267], "audiodatasetgener": [2, 97, 98, 102, 104, 105, 213, 260, 268], "text": [2, 12, 13, 14, 21, 35, 36, 59, 60, 64, 67, 68, 70, 121, 123, 141, 147, 163, 211, 216, 217, 241, 256, 257, 258, 259, 260, 264, 268], "speech": [2, 62, 84, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 212, 251, 256, 259, 260, 267, 268], "tt": [2, 259, 268], "servic": [2, 35, 36, 54, 73, 213, 242, 256, 258, 259], "cloud": [2, 10, 11, 14, 15, 16, 19, 20, 25, 26, 59, 69, 70, 71, 73, 74, 75, 124, 127, 130, 137, 143, 145, 147, 148, 150, 151, 162, 164, 167, 212, 213, 240, 242, 259], "gcp": [2, 212, 213], "microsoft": [2, 34, 42, 43, 44, 58, 74, 213, 259, 260], "azur": [2, 212, 213], "amazon": [2, 213, 259, 260], "web": [2, 36, 49, 72, 103, 127, 213, 240, 252, 253, 256, 258, 260, 261], "aw": [2, 212, 213], "inform": [2, 8, 9, 14, 48, 59, 60, 63, 67, 68, 70, 71, 76, 157, 178, 179, 182, 185, 187, 191, 192, 195, 199, 200, 202, 203, 206, 247, 257, 259, 262, 265, 266], "audio": [4, 5, 12, 13, 14, 30, 31, 40, 45, 46, 49, 52, 57, 62, 67, 70, 88, 89, 91, 114, 129, 130, 135, 137, 138, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 210, 211, 212, 216, 217, 222, 225, 240, 241, 242, 257, 258, 262], "util": [4, 8, 9, 14, 29, 30, 32, 34, 35, 36, 41, 43, 44, 59, 63, 67, 70, 83, 88, 112, 114, 115, 119, 120, 129, 130, 131, 132, 135, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 213, 225, 232, 238, 241, 242, 243, 245, 248, 249, 254, 255, 256, 257, 259, 261, 264, 266, 268], "app": [4, 5, 6, 7, 12, 13, 15, 16, 27, 28, 29, 32, 35, 36, 37, 39, 40, 41, 42, 44, 72, 76, 103, 141, 143, 147, 148, 150, 151, 192, 239, 252, 258, 259, 260, 261, 266], "event": [4, 5, 61, 96, 122, 123, 125, 233, 239, 242, 257, 258, 260, 261, 267], "own": [4, 5, 8, 9, 30, 31, 71, 74, 101, 130, 137, 140, 141, 143, 144, 145, 146, 147, 148, 150, 151, 256, 257, 258, 260, 261, 262, 268], "risk": [4, 5, 30, 31, 260], "either": [4, 5, 27, 28, 39, 49, 62, 65, 81, 84, 86, 91, 103, 114, 115, 119, 125, 131, 143, 147, 150, 164, 166, 168, 169, 175, 176, 177, 192, 193, 194, 208, 211, 218, 229, 253, 254, 257, 258, 259, 260, 266], "OR": [4, 5, 19, 20, 25, 26, 44, 81, 103, 119, 126, 168, 177, 186, 192, 193, 194, 209, 229, 260], "given": [4, 5, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 39, 41, 52, 60, 61, 62, 63, 64, 67, 68, 69, 72, 77, 80, 81, 84, 85, 86, 89, 90, 91, 99, 103, 114, 115, 116, 117, 118, 119, 121, 122, 123, 125, 126, 128, 133, 136, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 162, 164, 166, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 197, 199, 200, 203, 205, 206, 208, 209, 212, 216, 217, 218, 221, 228, 229, 230, 231, 233, 236, 237, 239, 241, 243, 244, 247, 251, 252, 254, 257, 258, 260, 261, 262, 264, 265, 267], "system": [4, 5, 33, 34, 43, 44, 61, 71, 75, 81, 86, 91, 177, 193, 230, 255, 256, 260, 261], "dataflow": [4, 5, 260], "tflite_micro": [4, 5, 27, 28, 67, 112, 154, 171, 243, 248, 251, 260], "tflite_micro_speech": [4, 5, 27, 28, 62, 67, 69, 241, 251, 260], "For": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 39, 55, 57, 59, 61, 62, 63, 65, 67, 68, 69, 71, 72, 81, 89, 91, 103, 114, 115, 119, 125, 128, 130, 131, 132, 133, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 162, 233, 245, 247, 252, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268], "simul": [4, 5, 15, 16, 41, 47, 62, 64, 67, 95, 99, 103, 120, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 176, 254, 256, 262, 264, 266], "latenc": [4, 5, 6, 7, 51, 63, 145, 153, 241, 256, 258, 260, 261, 262, 265], "take": [4, 5, 8, 9, 35, 44, 51, 62, 67, 74, 81, 86, 89, 125, 129, 130, 132, 133, 141, 144, 146, 152, 155, 156, 231, 243, 247, 252, 254, 256, 258, 260, 261, 262, 264, 266, 268], "per": [4, 5, 10, 11, 12, 13, 81, 86, 89, 91, 103, 114, 115, 119, 123, 125, 130, 139, 143, 145, 147, 148, 150, 151, 162, 164, 181, 184, 192, 205, 212, 256, 257, 258, 260, 261, 265, 268], "workspac": [4, 5, 10, 11, 15, 16, 29, 32, 52, 55, 60, 62, 63, 67, 68, 71, 72, 77, 124, 245, 246, 247, 250, 251, 252, 256, 258, 260, 264, 266], "averag": [4, 5, 6, 7, 35, 36, 39, 62, 128, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 162, 244, 247, 252, 257, 258, 260, 264, 266, 267], "1200m": [4, 5, 143, 260], "drop": [4, 5, 6, 7, 64, 72, 76, 107, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 239, 252, 257, 258, 260, 261, 266, 267], "older": [4, 5, 6, 7, 129, 130, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 156, 258, 260], "than": [4, 5, 6, 7, 15, 16, 17, 18, 21, 22, 29, 32, 35, 36, 39, 41, 61, 62, 77, 84, 86, 100, 103, 125, 129, 130, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 164, 169, 224, 239, 251, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267], "now": [4, 5, 6, 7, 43, 73, 127, 129, 130, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 156, 243, 254, 256, 257, 258, 259, 260, 261, 264, 266], "minu": [4, 5, 6, 7, 62, 84, 129, 130, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 156, 258, 260, 268], "minimum": [4, 5, 6, 7, 35, 62, 67, 69, 125, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 258, 260], "count": [4, 5, 6, 7, 10, 11, 89, 91, 114, 115, 119, 121, 123, 125, 129, 131, 132, 133, 134, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 177, 193, 201, 210, 212, 213, 214, 216, 217, 245, 248, 254, 258, 260, 261, 266, 268], "must": [4, 5, 6, 7, 12, 13, 15, 16, 23, 24, 27, 28, 33, 37, 39, 41, 44, 45, 47, 48, 56, 57, 61, 63, 65, 67, 69, 70, 71, 74, 80, 81, 83, 86, 91, 114, 115, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 162, 168, 170, 176, 177, 186, 192, 193, 194, 212, 214, 216, 217, 219, 224, 225, 226, 230, 231, 238, 242, 243, 245, 249, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268], "last": [4, 5, 6, 7, 25, 26, 69, 84, 89, 91, 114, 115, 119, 125, 127, 128, 131, 134, 145, 153, 175, 194, 257, 258, 260, 264, 267], "befor": [4, 5, 6, 7, 15, 16, 19, 20, 21, 22, 23, 24, 29, 32, 34, 37, 43, 45, 47, 48, 62, 69, 71, 74, 80, 81, 84, 86, 89, 91, 103, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 128, 129, 130, 132, 133, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 162, 164, 167, 169, 208, 209, 213, 216, 217, 218, 219, 230, 233, 234, 239, 243, 250, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268], "175": [4, 5, 153, 258, 260], "infer": [4, 5, 6, 7, 12, 13, 35, 36, 42, 49, 62, 63, 86, 125, 129, 130, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 173, 176, 192, 202, 243, 245, 248, 255, 256, 258, 259, 260, 261, 264, 265, 266], "within": [4, 5, 51, 85, 123, 130, 139, 143, 145, 147, 148, 150, 151, 216, 217, 229, 240, 241, 257, 258, 259, 260, 261, 264, 265, 266, 267], "least": [4, 5, 81, 86, 123, 216, 217, 259, 260, 268], "suppress": [4, 5, 6, 7, 258, 260], "750m": [4, 5, 260], "onc": [4, 5, 19, 20, 35, 36, 57, 70, 71, 74, 103, 112, 114, 119, 120, 125, 127, 130, 136, 143, 145, 147, 148, 150, 151, 153, 256, 257, 258, 259, 260, 261, 263, 266, 268], "wait": [4, 5, 19, 20, 35, 37, 125, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 169, 212, 213, 224, 230, 232, 233, 238, 239, 260, 268], "john": [4, 5, 260], "750": [4, 5, 35, 36, 129, 130, 144, 146, 152, 156, 161, 251, 260, 264], "dump": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 61, 71, 130, 131, 134, 136, 137, 141, 143, 145, 147, 148, 150, 151, 153, 162, 234, 244, 258, 260, 261], "argument": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 66, 67, 69, 70, 81, 83, 86, 89, 91, 114, 115, 116, 119, 122, 123, 125, 126, 127, 128, 130, 132, 133, 137, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 164, 168, 173, 177, 193, 194, 209, 212, 214, 216, 217, 221, 224, 228, 229, 230, 231, 245, 247, 250, 252, 254, 257, 258, 259, 260, 261, 264, 266], "path": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 52, 59, 67, 68, 71, 73, 75, 77, 80, 81, 85, 86, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 114, 119, 122, 123, 124, 125, 126, 127, 129, 130, 131, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 160, 162, 164, 166, 167, 168, 169, 176, 192, 194, 208, 209, 212, 218, 219, 221, 231, 234, 237, 242, 243, 245, 247, 248, 249, 250, 251, 252, 257, 258, 259, 260, 261, 262, 268], "archiv": [4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 41, 43, 44, 55, 59, 61, 62, 66, 68, 69, 71, 72, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 114, 119, 122, 123, 126, 129, 147, 150, 152, 156, 162, 167, 168, 209, 242, 243, 244, 247, 250, 251, 252, 255, 256, 258, 259, 260, 261, 262, 265, 267, 268], "zip": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 55, 60, 62, 64, 65, 66, 71, 77, 96, 99, 122, 126, 129, 130, 131, 133, 134, 135, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 168, 169, 209, 243, 246, 251, 255, 256, 257, 258, 259, 260, 261, 266, 267], "previous": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 37, 71, 83, 147, 150, 152, 166, 168, 169, 176, 209, 218, 224, 254, 257, 258, 260, 261, 262], "default": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 41, 52, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 75, 77, 81, 84, 86, 91, 103, 114, 115, 116, 117, 118, 119, 122, 123, 125, 127, 128, 129, 130, 131, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 162, 164, 168, 173, 175, 177, 192, 193, 194, 209, 216, 217, 219, 226, 229, 231, 243, 249, 256, 258, 259, 260, 263, 264, 266, 267], "none": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 39, 67, 80, 81, 84, 85, 86, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 192, 194, 196, 197, 198, 202, 203, 204, 205, 207, 208, 209, 211, 212, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 243, 245, 247, 248, 249, 251, 252, 257, 258, 260, 261, 262, 264, 266, 267], "requir": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 37, 39, 43, 44, 47, 48, 57, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 76, 81, 84, 86, 91, 103, 120, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 168, 174, 175, 200, 202, 212, 240, 241, 242, 245, 247, 248, 249, 252, 254, 255, 256, 260, 264, 265, 267, 268], "acceler": [4, 5, 6, 7, 12, 13, 15, 16, 27, 28, 33, 37, 39, 41, 42, 46, 47, 51, 64, 73, 78, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 168, 170, 173, 174, 175, 176, 219, 240, 243, 245, 248, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267], "omit": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 41, 62, 67, 74, 75, 80, 81, 86, 89, 91, 103, 114, 119, 128, 129, 130, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 162, 164, 168, 208, 209, 214, 218, 219, 229, 233, 234, 258, 260], "kernel": [4, 5, 15, 16, 27, 28, 33, 37, 39, 41, 42, 46, 47, 63, 73, 139, 145, 164, 168, 170, 173, 174, 176, 179, 180, 181, 182, 183, 184, 193, 195, 197, 203, 204, 205, 206, 243, 249, 260, 267], "NOT": [4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 25, 26, 27, 28, 80, 85, 114, 119, 141, 143, 145, 148, 151, 164, 168, 176, 178, 179, 182, 185, 187, 191, 192, 195, 199, 200, 203, 206, 209, 214, 242, 245, 251, 258, 259, 260, 268], "sinc": [4, 5, 71, 86, 103, 114, 115, 119, 120, 125, 130, 132, 133, 135, 137, 143, 145, 147, 148, 149, 150, 151, 152, 153, 245, 247, 252, 254, 256, 257, 258, 260, 261, 262, 264, 266], "hw": [4, 5, 260], "slow": [4, 5, 23, 24, 62, 70, 81, 84, 91, 125, 129, 130, 137, 143, 145, 147, 148, 150, 151, 230, 256, 259, 260, 264, 268], "otherwis": [4, 5, 43, 56, 80, 84, 85, 86, 123, 126, 127, 139, 141, 143, 144, 146, 147, 149, 150, 152, 153, 157, 162, 169, 175, 192, 194, 209, 216, 217, 224, 226, 231, 257, 258, 260, 268], "port": [4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 23, 24, 29, 32, 35, 36, 44, 64, 70, 77, 164, 169, 222, 232, 233, 239, 256, 258, 259, 260], "com": [4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 34, 35, 36, 43, 44, 45, 47, 48, 58, 71, 74, 77, 88, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 128, 131, 135, 137, 138, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 163, 194, 222, 233, 239, 242, 243, 245, 247, 248, 249, 251, 252, 258, 259, 260, 266, 268], "attempt": [4, 5, 6, 7, 12, 13, 15, 16, 61, 114, 115, 119, 164, 244, 258, 260], "determin": [4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 30, 31, 47, 51, 63, 67, 69, 81, 86, 89, 103, 114, 115, 119, 125, 141, 143, 144, 145, 146, 149, 152, 153, 157, 168, 176, 177, 193, 209, 218, 241, 242, 245, 247, 248, 251, 252, 256, 258, 260, 261, 266, 267, 268], "v": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 52, 57, 73, 84, 131, 141, 162, 175, 194, 236, 257, 258, 260], "consol": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 62, 67, 162, 190, 228, 249, 256, 257, 258, 259, 260], "window_dur": [4, 5, 6, 7, 129, 130, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 156, 258, 260], "w": [4, 5, 6, 7, 10, 11, 17, 18, 25, 26, 143, 145, 148, 151, 224, 228, 255, 258, 260, 266, 268], "durat": [4, 5, 6, 7, 129, 130, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 156, 256, 258, 260], "m": [4, 5, 6, 7, 35, 36, 62, 74, 84, 103, 129, 134, 135, 136, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 158, 160, 161, 236, 247, 251, 252, 258, 260, 264], "control": [4, 5, 6, 7, 37, 39, 41, 62, 81, 84, 86, 89, 91, 103, 128, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 238, 239, 258, 260, 261, 262, 263, 264], "smooth": [4, 5, 6, 7, 62, 84, 129, 130, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 156, 258, 260], "all": [4, 5, 6, 7, 10, 11, 14, 25, 26, 33, 35, 41, 42, 43, 44, 55, 57, 61, 63, 64, 67, 68, 69, 70, 71, 73, 76, 81, 84, 86, 89, 91, 100, 101, 103, 106, 107, 108, 114, 115, 116, 117, 119, 122, 123, 124, 126, 129, 130, 132, 133, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 161, 162, 164, 175, 192, 194, 208, 212, 213, 214, 216, 217, 228, 229, 230, 231, 233, 237, 239, 242, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268], "longer": [4, 5, 6, 7, 74, 103, 125, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 176, 256, 258, 259, 260, 264], "millisecond": [4, 5, 6, 7, 35, 62, 67, 84, 114, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 258, 260, 264], "confid": [4, 5, 6, 7, 36, 129, 130, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 156, 243, 258, 260, 264], "correct": [4, 5, 6, 7, 36, 53, 56, 129, 130, 139, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 156, 192, 243, 258, 260], "miss": [4, 5, 6, 7, 129, 130, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 156, 258, 260], "number": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 25, 26, 35, 39, 47, 51, 61, 62, 63, 64, 67, 68, 69, 77, 81, 84, 85, 86, 89, 91, 103, 114, 115, 116, 117, 118, 119, 122, 123, 125, 128, 129, 130, 134, 136, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 162, 164, 167, 170, 173, 175, 176, 177, 178, 179, 182, 185, 187, 191, 192, 193, 195, 198, 199, 200, 201, 202, 203, 206, 210, 212, 214, 216, 217, 219, 220, 229, 230, 239, 250, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268], "t": [4, 5, 6, 7, 23, 24, 33, 53, 70, 91, 99, 101, 103, 107, 123, 125, 127, 128, 129, 130, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 156, 157, 164, 209, 216, 217, 229, 256, 258, 260, 261, 264, 265], "consid": [4, 5, 6, 7, 10, 11, 37, 39, 62, 80, 81, 84, 89, 103, 116, 123, 125, 129, 130, 139, 141, 143, 144, 145, 146, 147, 148, 152, 153, 156, 162, 216, 217, 241, 242, 247, 252, 257, 258, 260, 267, 268], "increas": [4, 5, 6, 7, 57, 67, 81, 86, 125, 128, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 176, 256, 258, 260, 261, 262, 264, 268], "precis": [4, 5, 6, 7, 129, 130, 144, 146, 152, 153, 156, 162, 236, 244, 255, 258, 260, 266], "cost": [4, 5, 6, 7, 86, 129, 130, 144, 146, 149, 152, 153, 156, 256, 258, 260, 261, 264, 265], "recal": [4, 5, 6, 7, 57, 129, 130, 143, 144, 145, 146, 148, 151, 152, 153, 156, 162, 244, 255, 257, 258, 260, 263, 265, 266], "amount": [4, 5, 6, 7, 35, 62, 67, 71, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 164, 169, 174, 212, 224, 233, 239, 256, 257, 258, 260, 261, 264], "new": [4, 5, 35, 36, 37, 39, 41, 43, 50, 52, 61, 62, 65, 67, 69, 74, 84, 91, 96, 103, 114, 115, 119, 123, 125, 129, 130, 144, 146, 149, 152, 156, 170, 175, 192, 194, 216, 217, 220, 229, 231, 233, 240, 246, 249, 251, 257, 258, 259, 260, 262, 266, 267, 268], "l": [4, 5, 6, 7, 70, 139, 231, 256, 258, 260], "non": [4, 5, 23, 24, 60, 68, 70, 80, 85, 101, 123, 125, 127, 128, 129, 130, 134, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 164, 216, 217, 229, 239, 244, 247, 251, 252, 254, 257, 258, 259, 260, 266, 268], "specifi": [4, 5, 19, 20, 23, 24, 25, 26, 33, 34, 35, 36, 37, 39, 41, 47, 52, 58, 59, 61, 62, 64, 67, 68, 69, 70, 71, 75, 81, 83, 86, 89, 91, 96, 103, 114, 115, 119, 123, 124, 125, 127, 128, 129, 130, 132, 133, 135, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 162, 176, 186, 192, 194, 208, 209, 212, 213, 215, 216, 217, 224, 230, 239, 245, 246, 247, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 265, 266, 267, 268], "volum": [4, 5, 62, 67, 81, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 251, 259, 260], "u": [4, 5, 34, 43, 44, 58, 123, 216, 217, 247, 252, 260, 264, 266, 268], "gain": [4, 5, 62, 84, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 240, 254, 256, 260, 261, 267], "scaler": [4, 5, 62, 67, 129, 130, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 181, 184, 189, 192, 198, 205, 260, 265], "amplitud": [4, 5, 62, 67, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 260], "x": [4, 5, 6, 7, 36, 39, 57, 81, 86, 90, 114, 115, 116, 117, 118, 119, 121, 123, 125, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 153, 155, 157, 162, 177, 179, 182, 192, 195, 202, 203, 213, 216, 217, 230, 243, 249, 254, 257, 258, 260, 265, 266, 267, 268], "gener": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 40, 41, 42, 44, 45, 46, 49, 50, 52, 57, 59, 60, 61, 63, 65, 68, 69, 70, 72, 76, 80, 81, 83, 84, 85, 86, 88, 89, 91, 97, 98, 102, 104, 105, 112, 114, 115, 118, 119, 120, 121, 122, 123, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 164, 166, 167, 168, 169, 174, 176, 178, 179, 182, 185, 186, 187, 190, 191, 192, 194, 195, 199, 200, 203, 206, 208, 209, 211, 212, 214, 215, 218, 221, 222, 237, 240, 241, 242, 247, 249, 250, 251, 252, 254, 255, 256, 262, 264, 265, 266, 267], "unquant": [4, 5, 122, 125, 260], "mp4": [4, 5, 260], "z": [4, 5, 12, 13, 62, 84, 123, 216, 217, 260], "sensit": [4, 5, 6, 7, 35, 36, 61, 156, 258, 260], "float": [4, 5, 6, 7, 10, 11, 27, 28, 39, 56, 57, 62, 81, 84, 86, 89, 90, 91, 103, 114, 115, 119, 125, 127, 128, 139, 141, 143, 145, 147, 148, 151, 162, 164, 167, 169, 175, 177, 186, 193, 194, 198, 206, 212, 218, 223, 224, 226, 230, 233, 236, 239, 258, 260, 265, 267], "indic": [4, 5, 6, 7, 35, 36, 39, 51, 61, 62, 75, 84, 86, 89, 91, 103, 114, 119, 125, 137, 144, 173, 177, 193, 239, 243, 244, 258, 260, 265, 266, 267], "less": [4, 5, 6, 7, 61, 103, 125, 139, 141, 144, 146, 149, 152, 164, 224, 239, 256, 257, 258, 260, 264, 265, 268], "By": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 23, 24, 33, 35, 36, 61, 64, 68, 70, 71, 81, 86, 91, 99, 115, 122, 125, 129, 130, 136, 137, 147, 150, 153, 157, 162, 192, 249, 255, 256, 258, 259, 260, 262, 264], "download": [4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 19, 20, 34, 43, 48, 58, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 124, 130, 131, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 157, 160, 161, 209, 243, 247, 251, 252, 254, 256, 257, 258, 259, 260, 263, 264, 268], "overrid": [4, 5, 6, 7, 12, 13, 15, 16, 25, 26, 35, 39, 41, 52, 69, 75, 77, 86, 114, 115, 119, 124, 125, 129, 130, 137, 143, 144, 146, 147, 148, 149, 150, 151, 152, 156, 167, 250, 258, 260, 264], "altern": [4, 5, 6, 7, 12, 13, 15, 16, 35, 37, 39, 43, 44, 53, 62, 63, 67, 68, 74, 126, 144, 146, 186, 194, 212, 252, 258, 259, 260, 261, 262, 264, 268], "exist": [4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 33, 66, 73, 74, 91, 132, 143, 145, 147, 148, 150, 151, 177, 192, 193, 229, 230, 231, 240, 256, 258, 260, 265, 266, 267], "test": [4, 5, 6, 7, 10, 11, 12, 13, 25, 26, 34, 43, 44, 50, 61, 69, 93, 103, 106, 107, 108, 114, 115, 119, 121, 122, 123, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 169, 208, 216, 217, 229, 238, 247, 250, 252, 254, 257, 261, 263, 266, 267], "unit": [4, 5, 6, 7, 12, 13, 15, 16, 62, 67, 69, 134, 141, 156, 164, 177, 187, 213, 236, 257, 258, 260, 261, 267, 268], "show": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 44, 49, 61, 71, 125, 139, 141, 162, 167, 209, 244, 245, 246, 247, 250, 252, 256, 257, 258, 260, 261, 267], "messag": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 54, 63, 125, 162, 164, 173, 231, 257, 258, 260, 261], "exit": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 126, 220, 245, 257, 258, 260, 261], "usag": [5, 7, 9, 11, 13, 16, 18, 20, 22, 24, 26, 28, 31, 32, 51, 59, 65, 81, 83, 84, 86, 130, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 192, 220, 230, 241, 256, 257, 258, 260, 261, 266, 268], "rgb": [6, 14, 39, 40, 86, 119, 161], "camera": [6, 7, 14, 39, 40, 57, 257, 258, 261], "arducam": [6, 7, 39, 258], "www": [6, 7, 12, 13, 23, 24, 34, 43, 44, 70, 97, 98, 100, 101, 102, 103, 104, 105, 106, 123, 125, 130, 132, 133, 134, 137, 139, 141, 143, 144, 146, 147, 149, 150, 152, 153, 158, 161, 254, 258, 260, 266, 268], "product": [6, 7, 12, 13, 37, 39, 78, 242, 259, 268], "2mp": [6, 7], "spi": [6, 7, 8, 9, 39], "b0067": [6, 7], "arduino": [6, 7], "onlin": [6, 7, 12, 13, 35, 36, 37, 38, 39, 41, 52, 71, 256, 261], "cpp_develop": [6, 7, 12, 13], "image_classi": [6, 7], "fier": [6, 7], "setup": [6, 7, 12, 13, 54, 75, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 257, 258, 260, 261], "image_classif": [6, 7, 65, 67, 68, 72, 241], "rock_paper_scissor": [6, 7, 39, 109, 110, 258], "mvp": [6, 7, 15, 16, 33, 37, 39, 41, 42, 46, 51, 78, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 240, 255, 256, 257, 258, 259, 260, 261, 262, 266, 267], "again": [6, 7, 35, 37, 143, 144, 145, 147, 148, 150, 151, 153, 249, 256, 258, 260, 264], "uniqu": [6, 7, 37, 40, 62, 141, 174, 215, 240, 257, 258, 268], "everi": [6, 7, 10, 11, 23, 24, 70, 114, 115, 116, 119, 125, 129, 130, 137, 141, 144, 146, 147, 149, 150, 152, 153, 162, 256, 258, 260], "closer": [6, 7, 147, 150, 258, 267], "suffici": [6, 7, 39, 258], "prior": [6, 7, 258], "improv": [6, 7, 12, 13, 23, 24, 81, 86, 91, 125, 129, 130, 131, 135, 136, 137, 141, 144, 146, 147, 149, 150, 152, 153, 156, 176, 240, 256, 258, 260, 261, 262, 264, 265, 266, 267], "throughput": [6, 7, 12, 13, 91, 130, 137, 143, 145, 147, 148, 150, 151, 176, 256, 258], "image_classifi": [6, 7, 39, 153, 258], "classify_imag": [7, 14, 37, 78, 153, 257, 258, 261], "silicon": [8, 14, 35, 36, 42, 43, 44, 140, 146, 241, 247, 251, 254, 256, 257, 258, 260, 261, 264], "lab": [8, 14, 35, 36, 42, 43, 44, 140, 146, 241, 247, 251, 254, 256, 257, 258, 260, 261, 264], "simplic": [8, 9, 14, 42, 44, 77, 143, 229, 241, 257, 258, 261], "warn": [8, 9, 86, 145, 147, 148, 150, 151, 228, 231, 245, 246, 247, 250, 252, 257, 258, 260, 266], "dri": [8, 9, 243, 260], "silab": [8, 9, 43, 45, 47, 48, 71, 73, 74, 97, 98, 100, 101, 102, 104, 105, 137, 143, 145, 148, 151, 161, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 260, 261, 264, 266, 268], "github_siliconlab": [8, 9, 243, 266], "venv": [8, 9, 34, 43, 44, 71, 74, 245, 246, 247, 250, 252, 258, 260, 264, 266], "lib": [8, 9, 245, 246, 247, 250, 252, 258, 260, 264, 266], "site": [8, 9, 245, 246, 247, 250, 252, 258, 260, 264, 266], "tf_kera": [8, 9, 128], "src": [8, 9, 128, 229, 245, 247, 248, 249, 251, 252], "loss": [8, 9, 23, 24, 67, 69, 70, 114, 115, 116, 119, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 254, 255, 256, 258, 260, 261, 262, 264], "2976": [8, 9], "tf": [8, 9, 21, 22, 49, 53, 57, 65, 67, 69, 70, 76, 80, 85, 91, 108, 114, 115, 116, 117, 118, 119, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 164, 170, 173, 174, 176, 240, 254, 257, 261, 265, 267], "sparse_softmax_cross_entropi": [8, 9], "deprec": [8, 9, 86, 260], "pleas": [8, 9, 59, 81, 86, 100, 103, 243, 247, 252, 254, 256, 258, 260, 266], "compat": [8, 9, 91, 128, 176, 177, 193, 266], "v1": [8, 9, 135, 137, 157, 160, 161, 256, 266, 268], "instead": [8, 9, 15, 16, 27, 28, 35, 37, 39, 41, 47, 52, 71, 73, 74, 81, 86, 114, 115, 119, 123, 125, 145, 168, 216, 217, 230, 241, 254, 256, 258, 260, 264], "extract": [8, 9, 35, 36, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 122, 128, 130, 134, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 161, 208, 209, 243, 256, 257, 258, 260, 262, 264, 266], "commander_win32_x64_1v15p3b1357": [8, 9], "15": [8, 9, 39, 62, 84, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 243, 245, 247, 248, 254, 258, 260, 261, 262, 264, 266, 268], "patient": [8, 9, 243, 247, 252, 256, 258, 264, 266], "list": [8, 9, 10, 11, 53, 62, 66, 71, 75, 77, 81, 86, 89, 91, 94, 99, 103, 114, 115, 116, 119, 122, 123, 124, 125, 126, 128, 131, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 162, 164, 167, 170, 173, 174, 176, 178, 179, 181, 182, 184, 185, 186, 187, 191, 192, 194, 195, 198, 199, 200, 202, 203, 205, 206, 208, 212, 213, 214, 216, 217, 218, 219, 228, 229, 231, 233, 234, 236, 239, 243, 249, 256, 258, 266, 268], "below": [8, 9, 27, 28, 39, 62, 71, 80, 81, 84, 114, 115, 119, 135, 137, 144, 146, 149, 152, 153, 157, 233, 256, 257, 258, 259, 260, 262, 264, 265, 266, 268], "its": [8, 9, 14, 17, 18, 37, 39, 51, 60, 61, 67, 71, 81, 86, 89, 106, 107, 108, 123, 126, 130, 136, 137, 139, 141, 143, 145, 147, 148, 150, 151, 152, 153, 189, 202, 209, 214, 216, 217, 230, 231, 254, 256, 257, 258, 259, 260, 261, 262, 264, 266], "descript": [8, 9, 14, 27, 28, 40, 44, 49, 59, 63, 67, 69, 76, 112, 114, 115, 119, 120, 122, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 168, 174, 192, 240, 241, 243, 247, 248, 251, 252, 254, 258, 259, 260], "version": [8, 9, 50, 62, 67, 69, 74, 86, 103, 120, 122, 123, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 170, 174, 176, 186, 209, 216, 217, 231, 242, 243, 247, 248, 249, 251, 252, 254, 255, 257, 258, 260, 261, 264, 266, 268], "displai": [8, 9, 10, 11, 25, 26, 37, 39, 61, 64, 70, 139, 141, 162, 192, 244, 256, 257, 258, 260, 261], "h": [8, 9, 19, 20, 23, 24, 29, 32, 35, 36, 62, 71, 81, 84, 218, 236, 256, 266], "adapt": [8, 9, 77, 134, 139, 141, 153, 158, 160, 229, 258, 261], "aem": [8, 9], "advanc": [8, 9, 241, 266], "energi": [8, 9, 15, 16, 36, 61, 63, 68, 72, 163, 164, 175, 245, 247, 248, 252, 258, 260, 261, 264, 266], "monitor": [8, 9, 14, 23, 44, 59, 67, 125, 129, 130, 131, 135, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 230, 242, 255, 258, 260], "combin": [8, 9, 130, 137, 143, 145, 147, 148, 150, 151, 161, 212, 254, 260], "one": [8, 9, 10, 11, 17, 18, 19, 20, 25, 26, 36, 39, 44, 50, 51, 54, 67, 71, 77, 81, 83, 86, 103, 104, 114, 115, 119, 120, 123, 125, 127, 130, 133, 137, 139, 141, 143, 145, 147, 148, 150, 151, 152, 162, 164, 173, 176, 186, 192, 194, 216, 217, 229, 230, 240, 241, 243, 250, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268], "ctune": [8, 9], "ebl": [8, 9], "encrypt": [8, 9], "decrypt": [8, 9], "other": [8, 9, 10, 11, 19, 20, 44, 50, 61, 62, 67, 69, 70, 71, 74, 81, 86, 89, 91, 103, 116, 120, 122, 123, 125, 127, 130, 132, 133, 137, 143, 145, 147, 148, 150, 151, 162, 164, 192, 216, 217, 239, 254, 257, 258, 259, 260, 261, 263, 265, 266, 267, 268], "handl": [8, 9, 57, 67, 123, 149, 150, 151, 216, 217, 237], "extflash": [8, 9], "extern": [8, 9, 164, 241, 258, 265], "flash": [8, 9, 27, 28, 35, 37, 39, 41, 51, 52, 63, 65, 129, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 245, 248, 255, 256, 257, 258, 259, 260, 261, 264, 266], "write": [8, 9, 23, 24, 39, 41, 52, 70, 75, 80, 85, 112, 125, 129, 130, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 192, 224, 226, 228, 233, 234, 238, 239, 258, 266, 268], "gbl": [8, 9], "manufactur": [8, 9], "provis": [8, 9], "nvm3": [8, 9], "ota": [8, 9], "postbuild": [8, 9], "post": [8, 9, 10, 11, 15, 16, 25, 26, 65, 67, 123, 125, 144, 151, 162, 164, 167, 255, 266], "parser": [8, 9], "readmem": [8, 9], "memori": [8, 9, 14, 17, 27, 28, 37, 39, 41, 47, 48, 51, 52, 59, 63, 81, 86, 106, 107, 108, 129, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 232, 236, 242, 243, 245, 247, 248, 251, 252, 255, 257, 258, 259, 260, 261, 264, 265, 266, 267], "rp": [8, 9], "rtt": [8, 9], "secur": [8, 9, 71, 242, 256], "element": [8, 9, 10, 11, 39, 62, 86, 89, 114, 115, 116, 119, 136, 153, 162, 198, 200, 201, 231], "swo": [8, 9], "tokendump": [8, 9], "token": [8, 9, 268], "tokenhead": [8, 9], "group": [8, 9, 60, 89, 92, 127, 143, 145, 148, 151, 215, 257, 260], "current": [8, 9, 17, 18, 19, 20, 35, 36, 37, 65, 66, 73, 74, 78, 84, 89, 114, 115, 119, 125, 127, 130, 137, 143, 144, 145, 147, 148, 150, 151, 164, 178, 179, 182, 185, 186, 187, 191, 192, 193, 194, 195, 199, 200, 203, 206, 213, 219, 229, 231, 234, 236, 237, 245, 258, 261, 262, 264, 266, 267, 268], "vuart": [8, 9], "done": [8, 9, 39, 57, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 81, 86, 122, 123, 129, 132, 133, 144, 200, 212, 216, 217, 232, 241, 243, 250, 251, 254, 256, 257, 258, 259, 260, 261, 264, 266, 267], "evaluate_model": [10, 49, 61, 66, 116, 117, 118, 120, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 163, 244, 254, 258, 260], "valid": [10, 11, 23, 24, 57, 65, 70, 81, 86, 89, 91, 93, 103, 114, 115, 119, 123, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 193, 215, 216, 217, 243, 245, 247, 248, 249, 251, 252, 254, 256, 257, 258, 260, 261, 264, 266, 267, 268], "summari": [10, 11, 14, 15, 16, 21, 22, 25, 26, 59, 60, 62, 114, 115, 119, 121, 122, 123, 125, 132, 133, 162, 163, 164, 166, 186, 190, 192, 194, 212, 213, 241, 242, 243, 245, 251, 254, 255, 257, 261, 264, 266, 268], "model_evalu": [10, 11], "h5": [10, 11, 17, 18, 21, 22, 25, 26, 29, 32, 53, 55, 60, 68, 72, 122, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 166, 169, 247, 252, 254, 257, 258, 260, 262, 267], "float32": [10, 11, 39, 51, 56, 61, 62, 65, 76, 80, 81, 83, 85, 90, 91, 122, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 186, 192, 243, 244, 245, 247, 249, 254, 258, 260, 261, 265], "audio_example1": [10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 62, 67, 69], "limit": [10, 11, 25, 26, 34, 43, 44, 89, 91, 103, 114, 115, 119, 123, 139, 157, 160, 162, 164, 216, 217, 224, 230, 256, 260, 265, 266, 268], "max": [10, 11, 62, 81, 84, 125, 128, 139, 143, 145, 177, 181, 184, 189, 197, 205, 213, 229, 256, 257, 264, 266, 268], "100": [10, 11, 25, 26, 67, 81, 114, 115, 119, 120, 125, 129, 130, 132, 133, 134, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 213, 238, 243, 244, 245, 251, 254, 257, 258, 260, 266, 268], "auto": [10, 11, 62, 67, 84, 116, 119, 125, 131, 138, 147, 150, 157, 162, 209], "encod": [10, 11, 67, 81, 86, 91, 103, 114, 116, 119, 123, 130, 131, 133, 137, 138, 143, 145, 147, 148, 150, 151, 157, 162, 192, 216, 217, 259, 261], "fully_connected_autoencod": [10, 11], "dir": [10, 11, 12, 13, 17, 18, 25, 26, 44, 70, 127, 141, 162, 219, 229, 245, 247, 248, 249, 251, 252, 257], "eval": [10, 11, 60, 114, 116, 119, 141, 162, 257], "kera": [10, 11, 17, 18, 21, 22, 25, 26, 29, 32, 53, 60, 61, 69, 70, 81, 85, 86, 108, 112, 114, 115, 119, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 162, 167, 169, 241, 249, 254, 257, 261, 262, 264, 265, 266, 267], "weight": [10, 11, 17, 18, 23, 24, 25, 26, 27, 28, 51, 59, 61, 62, 65, 69, 70, 76, 86, 114, 115, 119, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 162, 167, 168, 181, 184, 187, 189, 205, 206, 240, 241, 244, 247, 251, 252, 254, 257, 258, 259, 260, 264, 266], "previou": [10, 11, 17, 18, 25, 26, 51, 70, 127, 145, 153, 162, 176, 224, 228, 229, 231, 256, 258, 261, 265], "session": [10, 11, 17, 18, 19, 20, 25, 26, 103, 124, 125, 127, 162, 212, 255, 256], "absolut": [10, 11, 17, 18, 25, 26, 71, 86, 89, 103, 122, 125, 127, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 162, 177, 193, 224, 229, 261], "best": [10, 11, 17, 18, 25, 26, 125, 129, 152, 162, 167, 247, 252, 255, 256, 258, 259, 260, 261, 262, 265, 267, 268], "find": [10, 11, 17, 18, 25, 26, 35, 36, 41, 71, 73, 123, 126, 128, 139, 141, 143, 144, 145, 147, 148, 150, 151, 162, 164, 216, 217, 231, 233, 239, 243, 255, 256, 257, 258, 260, 261, 266], "filenam": [10, 11, 17, 18, 25, 26, 67, 69, 70, 81, 82, 86, 87, 89, 91, 103, 122, 125, 143, 144, 145, 148, 149, 151, 162, 192, 209, 229, 236, 249, 257, 266], "evaluateautoencod": [10, 11], "mixin": [10, 11, 19, 20, 61, 67, 69, 71, 115, 116, 117, 120, 122, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 254, 258, 260], "comma": [10, 11, 162, 231], "seper": [10, 11, 162, 256], "first": [10, 11, 29, 32, 34, 35, 36, 37, 39, 41, 43, 44, 50, 52, 54, 63, 68, 70, 72, 73, 81, 84, 86, 100, 103, 114, 115, 116, 119, 123, 132, 133, 147, 150, 162, 164, 166, 175, 178, 194, 201, 210, 214, 216, 217, 219, 243, 245, 247, 249, 252, 254, 256, 257, 258, 260, 261, 263, 264, 265, 267], "normal": [10, 11, 37, 62, 74, 81, 84, 86, 116, 125, 131, 137, 141, 145, 147, 150, 157, 162, 176, 192, 229, 243, 249, 258], "abnorm": [10, 11, 116, 131, 162], "independ": [10, 11, 116, 125, 127, 162, 241, 265, 267], "place": [10, 11, 37, 41, 81, 86, 90, 94, 96, 103, 123, 162, 200], "upper": [10, 11, 73, 86, 123, 157, 160, 162, 216, 217, 229, 256, 260, 265], "decod": [10, 11, 80, 85, 131, 143, 145, 147, 148, 150, 151, 162], "diagram": [10, 11, 25, 26, 60, 61, 162, 163, 167, 244, 257, 258, 262, 266], "arch": [10, 11], "doe": [10, 11, 15, 16, 25, 26, 53, 57, 62, 63, 68, 69, 71, 72, 80, 81, 84, 85, 89, 101, 114, 115, 119, 120, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 175, 178, 179, 182, 185, 187, 191, 194, 195, 199, 200, 203, 206, 215, 231, 242, 245, 247, 252, 254, 257, 258, 259, 260, 261, 262, 265, 266], "thing": [10, 11, 25, 26, 51, 231, 256, 257, 258, 260, 266], "upload": [10, 11, 15, 16, 19, 20, 25, 26, 63, 64, 72, 124, 127, 147, 150, 162, 164, 167, 255, 256], "evalu": [11, 14, 25, 26, 49, 53, 59, 60, 65, 66, 76, 88, 96, 103, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 240, 241, 242, 254, 255, 261, 264], "fingerprint": [12, 13, 14, 40, 141, 142, 240, 258, 261], "authent": [12, 13, 40, 141, 142, 240], "eader": [12, 13], "r503": [12, 13, 37, 257], "adafruit": [12, 13, 259], "4651": [12, 13], "fingerprint_": [12, 13], "ee": [12, 13, 213, 268], "fingerprint_authent": [12, 13, 257], "sequenc": [12, 13, 37, 61, 69, 81, 114, 115, 119, 256, 257, 260, 266, 267], "finger": [12, 13, 37, 141, 257], "With": [12, 13, 19, 20, 35, 36, 37, 39, 41, 44, 57, 62, 63, 69, 70, 71, 84, 86, 123, 125, 153, 216, 217, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268], "integ": [12, 13, 23, 24, 35, 65, 70, 81, 86, 91, 106, 107, 108, 114, 115, 119, 122, 123, 125, 128, 129, 130, 137, 139, 147, 150, 167, 177, 192, 193, 198, 201, 216, 217, 218, 230, 236, 258, 265, 266], "collect": [12, 13, 96, 99, 141, 145, 148, 151, 186, 241, 254, 255, 257, 258, 260, 261, 265, 267], "5": [12, 13, 19, 20, 61, 62, 67, 69, 74, 75, 81, 84, 91, 108, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 177, 230, 243, 245, 247, 248, 250, 251, 252, 254, 258, 260, 261, 264, 266, 268], "reader": [12, 13, 37], "fingerprint_read": [13, 14, 37, 78, 141, 257, 258, 261], "describ": [14, 34, 43, 44, 59, 61, 62, 63, 65, 68, 69, 71, 72, 73, 74, 240, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268], "avail": [14, 19, 20, 34, 40, 41, 43, 44, 46, 61, 62, 63, 65, 68, 69, 70, 71, 72, 74, 81, 86, 88, 91, 96, 101, 108, 116, 117, 120, 127, 130, 137, 143, 145, 147, 148, 150, 151, 163, 164, 212, 222, 224, 229, 230, 239, 242, 247, 252, 255, 256, 258, 259, 261, 262, 264, 267, 268], "prompt": [14, 43, 73, 103, 256], "access": [14, 43, 45, 47, 48, 61, 62, 63, 65, 68, 69, 72, 73, 76, 112, 155, 190, 192, 194, 231, 241, 256, 257, 258, 260, 261, 265, 268], "mltk_pyvenv": [14, 50, 74], "bat": [14, 43, 44, 74], "bin": [14, 43, 44, 74, 145, 149, 157, 160, 177, 186, 193, 194, 260, 261, 264, 266, 267], "profil": [14, 16, 17, 23, 24, 33, 37, 39, 40, 49, 51, 52, 59, 60, 66, 78, 112, 120, 123, 125, 127, 130, 132, 133, 134, 135, 137, 139, 163, 164, 171, 173, 175, 176, 232, 241, 242, 254, 255, 257], "etc": [14, 27, 28, 67, 114, 115, 119, 125, 147, 150, 162, 241, 255, 257, 258, 259, 260, 268], "addit": [14, 16, 28, 46, 51, 57, 62, 65, 68, 74, 76, 77, 86, 120, 122, 123, 125, 127, 128, 129, 130, 143, 144, 146, 147, 148, 149, 150, 151, 152, 156, 157, 164, 178, 179, 182, 185, 187, 191, 192, 195, 199, 200, 203, 206, 212, 214, 219, 249, 251, 254, 257, 258, 260, 261, 264, 265, 266, 267], "flag": [14, 63, 68, 71, 72, 125, 233, 256, 258, 260], "append": [14, 25, 26, 69, 71, 126, 130, 134, 137, 139, 141, 143, 144, 145, 147, 148, 150, 151, 155, 218, 229, 230, 231, 250, 257, 258, 260], "tensorboard": [14, 24, 59, 67, 74, 125, 129, 130, 137, 147, 150, 242], "ssh": [14, 20, 59, 69, 124, 242, 255, 258, 259, 260], "remot": [14, 19, 20, 63, 64, 72, 73, 124, 242, 252, 257, 258, 260, 266], "server": [14, 19, 20, 23, 24, 29, 32, 59, 63, 70, 71, 72, 73, 74, 127, 169, 252, 256, 257, 258, 260, 266], "reduc": [14, 15, 16, 17, 41, 53, 59, 65, 125, 152, 164, 193, 230, 241, 242, 255, 256, 258, 260, 261, 264, 265, 266, 267, 268], "footprint": [14, 17, 242], "summar": [14, 22, 49, 62, 114, 115, 119, 129, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 166, 241, 257, 258, 260, 261], "graph": [14, 23, 24, 29, 32, 70, 72, 91, 125, 129, 130, 137, 147, 150, 169, 241, 252, 257, 258, 260, 261], "interact": [14, 29, 32, 59, 61, 72, 103, 163, 169, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 257, 258, 260, 261, 266, 267], "visual": [14, 23, 24, 29, 30, 34, 42, 43, 45, 47, 48, 50, 58, 59, 61, 70, 74, 86, 125, 129, 130, 137, 139, 147, 150, 159, 161, 169, 241, 242, 255, 256, 257, 261, 263], "ani": [15, 16, 19, 20, 25, 26, 27, 28, 33, 35, 36, 37, 39, 41, 44, 48, 50, 62, 63, 67, 68, 70, 71, 72, 73, 74, 76, 81, 84, 86, 103, 114, 115, 119, 120, 122, 123, 124, 125, 127, 130, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 177, 193, 216, 217, 224, 231, 233, 239, 242, 255, 256, 257, 258, 260, 261, 263, 264, 266], "profile_model": [15, 49, 63, 66, 74, 120, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 163, 171, 176, 232, 245, 248, 254, 266], "model_profil": [15, 16, 27, 28], "image_example1": [15, 16, 25, 26, 29, 32, 33, 41, 61, 63, 66, 67, 69, 71, 244, 245, 246, 247, 248, 249, 250, 252, 258, 261], "estim": [15, 16, 63, 139, 141, 145, 148, 151, 164, 170, 176, 248, 257, 258, 260, 266], "without": [15, 16, 27, 28, 48, 62, 68, 74, 86, 103, 125, 143, 144, 145, 146, 148, 149, 151, 153, 166, 192, 209, 233, 242, 256, 258, 259, 260, 261, 265, 267], "some_model": [15, 16], "One": [15, 16, 17, 18, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 57, 70, 81, 86, 96, 103, 115, 121, 123, 125, 126, 134, 192, 224, 256, 257, 258, 260], "compil": [15, 16, 34, 43, 44, 67, 69, 96, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 170, 176, 232, 254, 257, 258, 260, 261, 262, 264], "rather": [15, 16, 17, 18, 21, 22, 29, 32, 41, 86, 103, 144, 145, 146, 149, 153, 169, 251, 258, 265], "o": [15, 16, 17, 18, 21, 22, 27, 28, 71, 75, 77, 91, 135, 141, 143, 144, 145, 147, 148, 149, 150, 151, 213, 219, 229, 230, 235, 237, 243, 245, 247, 248, 249, 251, 252, 258, 259, 266, 268], "report": [15, 16, 125, 164, 255, 258, 264], "format": [15, 16, 19, 20, 25, 26, 34, 36, 43, 44, 56, 57, 60, 62, 64, 71, 77, 81, 84, 103, 123, 125, 139, 147, 150, 155, 164, 174, 176, 190, 216, 217, 218, 220, 236, 240, 254, 258, 260, 265], "return": [15, 16, 53, 56, 61, 63, 67, 69, 71, 80, 81, 83, 84, 85, 86, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 114, 115, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 243, 245, 249, 254, 256, 257, 258, 259, 260, 261, 262, 264, 266], "unformat": [15, 16], "metric": [15, 16, 23, 24, 67, 69, 70, 100, 114, 115, 119, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 167, 170, 176, 240, 242, 248, 254, 257, 258, 260, 261, 262, 264, 265, 267], "cpu": [15, 16, 41, 51, 63, 71, 81, 86, 91, 129, 130, 131, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 175, 230, 245, 248, 255, 259, 261, 264, 266], "cycl": [15, 16, 41, 47, 51, 57, 63, 129, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 175, 245, 248, 258, 260, 261, 264, 266], "extra": [15, 16, 86, 147, 150, 243], "info": [15, 16, 62, 67, 71, 106, 108, 112, 127, 129, 141, 143, 144, 145, 146, 148, 151, 152, 156, 192, 228, 230, 245, 246, 247, 250, 251, 252, 257, 260, 264, 266], "quantize_model": [17, 49, 65, 122, 123, 163, 246], "mltk_model": [17, 18, 61, 62, 66, 67, 69, 116, 122, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 167, 243, 254, 257, 258, 260, 267], "tflite_convert": [17, 18, 56, 57, 65, 67, 69, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 246, 254, 258, 260, 265, 267], "model_quant": [17, 18], "associ": [17, 18, 27, 28, 35, 36, 37, 39, 91, 103, 164, 166, 173, 178, 179, 182, 185, 187, 191, 192, 195, 199, 200, 202, 203, 206, 256, 257, 258, 259, 260, 261, 262, 264, 266], "structur": [17, 18, 27, 28, 42, 62, 76, 89, 91, 112, 135, 168, 208, 242, 257, 258, 260, 268], "back": [19, 20, 35, 36, 143, 145, 148, 151, 249, 258], "open": [19, 20, 23, 24, 50, 64, 71, 72, 73, 103, 143, 145, 148, 151, 223, 224, 225, 226, 229, 233, 234, 239, 245, 247, 248, 249, 251, 252, 256, 258, 259, 260, 261, 263, 264, 266, 268], "user_set": [19, 20, 66, 75, 77, 124, 229, 255, 256], "yaml": [19, 20, 27, 28, 66, 75, 77, 124, 229, 255, 256], "config": [19, 20, 34, 35, 36, 37, 39, 41, 52, 77, 127, 129, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 178, 179, 182, 185, 187, 191, 195, 199, 200, 203, 206, 212, 213, 243, 247, 249, 251, 256, 258, 259, 260, 264, 266, 268], "export": [19, 20, 71, 75, 91, 124, 147, 150, 230, 241, 266], "variabl": [19, 20, 33, 36, 37, 39, 41, 44, 66, 71, 77, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 124, 125, 127, 145, 147, 148, 150, 206, 218, 219, 229, 230, 231, 234, 242, 258, 260, 261, 263], "6": [19, 20, 36, 37, 39, 81, 84, 86, 90, 100, 108, 129, 130, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 177, 193, 239, 243, 245, 247, 248, 250, 251, 254, 256, 258, 260, 261, 264, 265, 266, 267], "startup": [19, 20, 35, 36, 37, 39, 256], "shell": [19, 20, 71, 124, 234, 257, 258, 260, 261], "7": [19, 20, 37, 75, 108, 129, 130, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 169, 223, 243, 245, 247, 248, 250, 251, 252, 254, 258, 260, 261, 264, 266], "detach": [19, 20, 71], "subprocess": [19, 20, 71, 81, 86, 91, 130, 137, 143, 145, 147, 148, 150, 151, 230, 247, 252, 260, 261], "continu": [19, 20, 43, 71, 125, 134, 143, 145, 147, 148, 150, 151, 213, 238, 245, 246, 247, 250, 252, 254, 257, 258, 259, 260, 261, 262, 263, 268], "even": [19, 20, 62, 71, 84, 103, 135, 256, 258, 260, 265, 268], "prematur": [19, 20, 71, 256], "close": [19, 20, 43, 103, 141, 223, 224, 226, 233, 239, 256, 257, 265, 267, 268], "8": [19, 20, 39, 67, 69, 81, 84, 89, 91, 108, 123, 125, 128, 129, 130, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 192, 216, 217, 239, 243, 245, 247, 248, 250, 251, 252, 254, 256, 258, 260, 261, 264, 265, 266, 267, 268], "poll": [19, 20, 71], "abort": [19, 20, 37, 71, 233, 256], "9": [19, 20, 34, 43, 44, 73, 74, 75, 106, 107, 108, 128, 129, 130, 131, 134, 135, 136, 137, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 231, 243, 245, 247, 248, 250, 251, 252, 254, 256, 258, 259, 260, 261, 262, 264, 266, 267], "11": [19, 20, 34, 43, 44, 73, 74, 131, 135, 136, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 243, 245, 247, 251, 252, 258, 260, 261, 264, 266, 267], "12": [19, 20, 34, 43, 44, 73, 74, 75, 81, 128, 129, 135, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 158, 160, 161, 231, 243, 245, 247, 251, 258, 259, 260, 261, 264, 265, 266, 267, 268], "shutdown": [19, 20, 130, 137, 143, 145, 147, 148, 150, 151, 212, 230], "credenti": [19, 20, 70, 71, 212, 259, 268], "line": [19, 20, 27, 28, 42, 43, 44, 45, 47, 48, 61, 63, 64, 65, 68, 69, 70, 72, 74, 77, 78, 112, 123, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 216, 217, 218, 231, 234, 242, 256, 259, 262, 264, 266, 268], "ssh4": [19, 20, 256], "vast": [19, 20, 71, 124, 240, 241, 255, 258, 259, 260, 261, 262, 264], "ai": [19, 20, 71, 124, 151, 240, 241, 255, 258, 259, 260, 261, 262, 264, 266, 268], "p": [19, 20, 23, 24, 27, 28, 29, 32, 67, 71, 73, 86, 103, 130, 136, 141, 143, 145, 147, 148, 150, 151, 153, 256, 258, 261], "18492": [19, 20], "id_vast_ai": [19, 20, 71, 256], "start": [19, 20, 23, 24, 29, 30, 31, 32, 35, 36, 39, 41, 52, 64, 71, 73, 89, 91, 114, 115, 119, 123, 130, 132, 133, 137, 140, 143, 145, 147, 148, 150, 151, 152, 157, 201, 210, 214, 216, 217, 230, 232, 233, 239, 247, 252, 254, 260, 261, 262, 264, 268], "later": [19, 20, 57, 62, 65, 71, 87, 125, 143, 144, 145, 146, 147, 148, 149, 150, 152, 186, 194, 246, 249, 251, 256, 258, 260, 265], "resum": [19, 20, 25, 26, 71, 125, 127, 167, 256], "store": [19, 20, 25, 26, 59, 60, 71, 122, 145, 148, 176, 255, 256, 257, 266], "retriev": [19, 20, 39, 61, 62, 137, 147, 150, 192, 232, 243, 249, 262, 265], "disconnect": [19, 20, 71, 226], "discard": [19, 20, 123, 147, 150, 216, 217], "forc": [19, 20, 35, 36, 37, 39, 41, 52, 71, 141, 145, 186, 194, 220, 247, 252, 256, 259, 260, 266], "sshmixin": [19, 20, 143, 147, 150], "model_training_via_ssh": [19, 20], "cancel": [19, 20], "mltk_command": [19, 20], "hostnam": [19, 20, 77, 256], "login": [19, 20, 71, 255], "22": [19, 20, 71, 129, 130, 135, 139, 141, 143, 144, 145, 148, 149, 151, 152, 157, 158, 161, 243, 245, 247, 252, 257, 260, 261, 264], "myserv": [19, 20, 71], "192": [19, 20, 64, 71, 141, 157, 243, 264], "168": [19, 20, 64, 71, 148, 151, 160, 264], "56": [19, 20, 71, 129, 143, 144, 145, 148, 151, 152, 243, 260, 261, 264], "ubuntu": [19, 20, 34, 43, 44, 71], "456": [19, 20, 71, 264], "worksp": [19, 20], "identity_fil": [19, 20], "kei": [19, 20, 62, 84, 114, 115, 119, 122, 123, 134, 143, 152, 164, 175, 178, 179, 182, 185, 186, 187, 191, 192, 194, 195, 199, 200, 203, 206, 216, 217, 231, 249, 255, 262, 265, 266, 268], "privat": [19, 20, 71, 256, 268], "pem": [19, 20], "listen": [19, 20, 23, 24, 29, 32, 35, 64, 71, 169, 259, 260], "password": [19, 20, 256], "clean": [19, 20, 25, 26, 45, 47, 48, 70, 103, 120, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 167, 208, 219, 254, 256, 258, 260, 263, 264, 268], "AND": [19, 20, 125, 126, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 242], "summarize_model": [21, 49, 68, 123, 163, 247, 251], "model_summari": [21, 22], "someth": [23, 24, 35, 36, 256, 257, 258, 263, 265], "often": [23, 24, 125], "abl": [23, 24, 35, 36, 38, 39, 41, 47, 51, 61, 63, 73, 127, 241, 256, 258, 259, 263, 266], "measur": [23, 24, 61, 63, 125, 231], "workflow": [23, 24], "track": [23, 24, 70, 132, 133, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 254, 255, 258, 260, 262], "experi": [23, 24, 127, 255, 257, 260], "like": [23, 24, 67, 69, 71, 74, 84, 86, 103, 114, 115, 119, 122, 125, 127, 128, 145, 146, 148, 151, 175, 192, 194, 228, 233, 234, 241, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268], "accuraci": [23, 24, 51, 59, 61, 67, 70, 96, 100, 125, 129, 130, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 241, 242, 244, 254, 255, 257, 261, 264, 265, 266, 267], "dimension": [23, 24, 70, 139, 258], "space": [23, 24, 41, 70, 99, 123, 139, 141, 216, 217, 257], "org": [23, 24, 34, 43, 44, 70, 81, 100, 101, 103, 123, 125, 128, 130, 131, 132, 133, 137, 139, 141, 144, 146, 147, 149, 150, 152, 153, 156, 157, 158, 160, 161, 164, 254, 258, 260, 261, 268], "get_start": [23, 24], "model_training_monitor": [23, 24], "being": [23, 24, 35, 36, 54, 56, 67, 86, 123, 139, 143, 145, 147, 148, 170, 220, 242, 254, 256, 258, 260, 263, 265, 267], "properti": [23, 24, 36, 62, 65, 67, 69, 70, 71, 81, 84, 86, 87, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 130, 132, 133, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 162, 164, 167, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 214, 215, 216, 217, 224, 226, 227, 230, 231, 233, 239, 249, 254, 257, 258, 259, 260], "dict": [23, 24, 70, 71, 81, 84, 86, 89, 91, 114, 115, 119, 121, 123, 125, 127, 129, 130, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 160, 161, 162, 164, 167, 168, 173, 174, 175, 178, 179, 182, 185, 186, 187, 191, 192, 194, 195, 199, 200, 203, 206, 212, 219, 224, 230, 231, 233, 234, 239, 258, 262, 267], "histogram_freq": [23, 24, 70, 125, 129, 130, 137, 147, 150], "epoch": [23, 24, 25, 26, 67, 70, 114, 115, 119, 120, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 166, 167, 245, 247, 252, 254, 256, 258, 259, 260, 264], "histogram": [23, 24, 70, 125, 129, 130, 137, 147, 150], "layer": [23, 24, 41, 48, 57, 62, 65, 68, 70, 72, 85, 114, 115, 119, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 172, 173, 175, 176, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 191, 192, 193, 195, 196, 197, 199, 200, 203, 204, 205, 206, 207, 240, 245, 247, 251, 252, 254, 257, 258, 260, 261, 262, 264, 266], "won": [23, 24, 70, 103, 125, 127, 129, 130, 137, 147, 150, 265], "split": [23, 24, 70, 81, 86, 89, 91, 103, 123, 125, 129, 130, 131, 132, 133, 137, 143, 145, 147, 148, 150, 151, 216, 217, 231, 254, 258], "write_graph": [23, 24, 70, 125, 129, 130, 137, 147, 150], "whether": [23, 24, 64, 70, 81, 86, 114, 115, 119, 123, 125, 128, 129, 130, 137, 139, 147, 150, 177, 193, 216, 217, 256], "becom": [23, 24, 70, 125, 129, 130, 137, 147, 150, 256, 258], "quit": [23, 24, 70, 125, 129, 130, 137, 147, 150, 258], "write_imag": [23, 24, 70, 125, 129, 130, 137, 147, 150], "update_freq": [23, 24, 70, 125, 129, 130, 137, 147, 150], "batch": [23, 24, 67, 70, 81, 82, 85, 86, 87, 89, 90, 91, 114, 115, 116, 117, 118, 119, 125, 129, 130, 132, 133, 137, 141, 143, 144, 145, 147, 148, 150, 151, 155, 192, 206, 230, 254, 261, 266], "let": [23, 24, 44, 70, 125, 129, 130, 137, 144, 146, 147, 149, 150, 152, 153, 243, 255, 256, 258, 260, 264, 266], "callback": [23, 24, 50, 57, 81, 86, 89, 91, 116, 117, 118, 122, 123, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 160, 161, 162, 176, 208, 212, 229, 230, 233, 234, 235, 254, 257], "too": [23, 24, 70, 123, 125, 129, 130, 137, 147, 150, 164, 216, 217, 257, 258, 259, 260, 261, 264, 268], "frequent": [23, 24, 70, 125, 129, 130, 137, 147, 150, 242, 256, 260], "profile_batch": [23, 24, 70, 125, 129, 130, 137, 147, 150], "characterist": [23, 24, 36, 61, 70, 125, 129, 130, 137, 147, 150, 162, 258, 259, 268], "neg": [23, 24, 61, 70, 125, 129, 130, 137, 147, 150, 155, 177, 193, 256, 260], "tupl": [23, 24, 70, 80, 81, 84, 86, 89, 91, 93, 103, 106, 107, 108, 114, 115, 119, 122, 123, 125, 128, 129, 130, 132, 133, 137, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 164, 167, 175, 176, 179, 182, 192, 194, 195, 201, 203, 209, 216, 217, 220, 229, 233, 234, 254], "pair": [23, 24, 70, 71, 84, 125, 129, 130, 137, 139, 141, 147, 150, 175, 177, 186, 193, 194], "signifi": [23, 24, 37, 70, 125, 129, 130, 137, 147, 150], "rang": [23, 24, 57, 62, 70, 81, 84, 86, 100, 106, 107, 108, 123, 125, 129, 130, 132, 133, 134, 137, 139, 141, 143, 145, 147, 148, 150, 158, 216, 217, 230, 254, 256, 257, 260, 264, 265, 267], "second": [23, 24, 63, 70, 86, 100, 103, 125, 129, 130, 137, 142, 147, 150, 164, 175, 178, 212, 224, 233, 239, 256, 258, 260, 261, 264, 266], "keyword_spotting_on_ff_v2": [23, 24], "webpag": [23, 24, 36, 41, 59, 63, 64, 70, 72, 76, 252, 255, 256, 258, 260], "gui": [23, 24, 30, 31, 34, 43, 44, 70, 192, 260, 264], "separ": [23, 24, 99, 123, 130, 137, 143, 145, 147, 148, 150, 151, 216, 217, 226, 230, 256, 261], "localhost": [23, 24, 64, 252, 256], "6002": [23, 24], "launch": [23, 24, 50, 70, 263, 264], "webbrows": [23, 24, 29, 32, 169], "train_model": [25, 49, 66, 69, 120, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 163, 250, 254, 263], "model_train": [25, 26], "dryrun": [25, 26, 121, 130, 132, 133, 137, 143, 145, 147, 148, 150, 151, 254], "checkpoint": [25, 26, 67, 69, 125, 129, 130, 131, 135, 136, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 258, 260], "43": [25, 26, 27, 28, 62, 136, 139, 141, 143, 144, 145, 148, 151, 152, 243, 251, 258, 260, 261, 264, 267], "everyth": [25, 26, 59, 67, 69, 143, 145, 147, 148, 150, 241, 250, 258, 260, 264, 268], "quickli": [25, 26, 69, 71, 147, 152, 240, 242, 256, 259, 261, 262], "dry": [25, 26, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 254, 256], "size": [25, 26, 41, 53, 62, 63, 67, 81, 84, 86, 89, 91, 114, 115, 119, 123, 128, 129, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 168, 179, 182, 192, 195, 201, 203, 206, 216, 217, 230, 236, 239, 245, 247, 248, 251, 252, 256, 259, 260, 261, 262, 264, 265, 266], "initi": [25, 26, 37, 127, 130, 143, 145, 147, 148, 150, 151, 152, 212, 220, 255, 260, 261], "histori": [25, 26, 60, 125, 127, 167, 255], "update_model_paramet": [27, 49, 62, 122, 163, 251], "metadata": [27, 28, 35, 36, 62, 65, 67, 122, 132, 133, 168, 176, 178, 179, 182, 185, 187, 191, 192, 194, 195, 199, 200, 203, 206, 249, 251, 254, 268], "taken": [27, 28, 35, 103, 156, 157, 161, 168, 213, 225, 232, 238, 258, 260], "param": [27, 28, 57, 62, 81, 86, 135, 141, 144, 145, 149, 157, 167, 168, 179, 182, 187, 195, 203, 209, 247, 249, 251, 252, 258, 260], "json": [27, 28, 50, 60, 64, 164, 209, 231, 268], "int": [27, 28, 57, 62, 80, 81, 83, 84, 85, 86, 89, 91, 94, 95, 96, 99, 114, 119, 123, 125, 127, 128, 130, 133, 134, 135, 136, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 153, 155, 157, 162, 164, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 212, 214, 216, 217, 218, 219, 224, 226, 228, 230, 231, 233, 234, 236, 237, 239, 243, 261, 265, 267], "str": [27, 28, 62, 80, 81, 85, 86, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 119, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 137, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 155, 162, 164, 166, 167, 168, 169, 170, 172, 174, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 199, 200, 202, 203, 204, 206, 207, 208, 209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 224, 226, 228, 229, 230, 231, 233, 234, 236, 237, 239, 243, 249, 254, 257, 266], "made": [27, 28, 35, 36, 45, 48, 71, 108, 125, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 242, 249, 258, 260], "my_param": [27, 28, 186, 194], "my": [27, 28, 53, 61, 67, 69, 70, 73, 74, 192, 258, 268], "great": [27, 28, 67, 69, 258, 260, 267], "my_custom_param": [27, 28, 62], "led_period_m": [27, 28], "runtime_memory_s": [27, 28, 62, 129, 131, 134, 135, 136, 139, 141, 144, 146, 149, 152, 153, 155, 156, 157, 158, 160, 161, 164, 168, 174, 243, 258], "cmsi": [27, 28, 63, 168], "view_model": [29, 49, 72, 163, 252], "netron": [29, 32, 72, 76, 141, 192, 252, 266], "model_visu": [29, 32], "8080": [29, 32, 64, 252, 256], "augment": [30, 31, 76, 81, 86, 88, 99, 116, 117, 130, 134, 135, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 212, 213, 256, 261], "parallelaudiodatagener": [30, 31, 50, 62, 67, 83, 86, 88, 114, 129, 135, 138, 144, 146, 149, 152, 156, 256, 262], "doesn": [33, 101, 125, 129, 130, 135, 136, 137, 139, 141, 144, 146, 147, 149, 150, 153, 156, 229, 256, 258], "veri": [33, 63, 68, 72, 74, 94, 103, 143, 144, 146, 147, 149, 150, 152, 153, 231, 245, 247, 252, 254, 256, 258, 259, 260, 262, 264, 268], "begin": [33, 35, 36, 69, 80, 114, 115, 119, 123, 125, 143, 144, 145, 147, 148, 150, 151, 157, 177, 193, 216, 217, 256, 259, 261, 267, 268], "debug": [33, 53, 62, 67, 81, 86, 89, 91, 129, 134, 135, 136, 141, 144, 145, 146, 147, 149, 150, 152, 153, 156, 157, 219, 222, 225, 226, 228, 230, 240, 251, 257, 258, 259, 265], "oper": [33, 37, 44, 51, 61, 62, 65, 68, 69, 71, 72, 91, 112, 115, 120, 123, 125, 129, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 175, 178, 179, 182, 185, 187, 191, 195, 199, 200, 203, 206, 216, 217, 242, 245, 248, 256, 257, 258, 260, 261, 264], "gecko": [33, 35, 36, 37, 39, 41, 45, 78, 258, 260, 266], "sdk": [33, 35, 36, 37, 39, 41, 45, 258, 260, 266], "tflm": [33, 37, 39, 41, 47, 48, 52, 80, 81, 83, 139, 164, 170, 171, 174, 176, 241, 243, 267], "phase": [33, 147, 150, 258], "find_packag": 33, "mltk_find_packag": 33, "wrapper": [33, 57, 74, 83, 112, 170, 173, 176, 191, 198, 201, 202, 242, 243, 254], "mltk_tflite_micro_wrapp": [33, 48], "symbol": [33, 89, 91, 219, 229], "releas": [33, 34, 37, 44, 103, 266], "fulli": [33, 62, 63, 65, 68, 69, 72, 73, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 166, 188, 207, 245, 246, 247, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 262, 264], "optim": [33, 41, 67, 68, 69, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 219, 240, 247, 248, 251, 252, 254, 258, 260, 261, 262, 266, 267], "ON": [33, 35, 36, 41, 259], "disassembl": 33, "assembli": 33, "instruct": [33, 58, 156, 170, 176, 257, 258, 259, 260, 261, 268], "mltk_model_profil": [33, 34, 41, 44, 64], "hint": [33, 37, 39, 41, 69, 70, 71, 141, 249, 256, 259, 260], "just": [33, 37, 39, 41, 50, 67, 114, 115, 119, 122, 127, 130, 131, 132, 133, 134, 137, 139, 141, 143, 145, 147, 148, 150, 151, 209, 231, 242, 243, 245, 249, 254, 256, 257, 260, 262, 263, 264, 267, 268], "search": [33, 37, 39, 41, 59, 67, 75, 77, 89, 91, 100, 123, 129, 143, 145, 148, 151, 176, 216, 217, 229, 231, 242, 247, 248, 250, 251, 252, 256, 258, 259, 266], "model_search_path": [33, 37, 39, 41], "mltk_audio_classifi": [33, 35, 259], "few": [34, 43, 44, 65, 115, 229, 241, 256, 258, 260, 262], "long": [34, 43, 44, 51, 70, 103, 141, 143, 146, 256, 258, 261, 262, 267, 268], "en": [34, 43, 44, 58, 100, 101, 266, 268], "win32": [34, 43, 44], "fileio": [34, 43, 44], "maximum": [34, 43, 44, 81, 86, 89, 91, 116, 117, 123, 125, 139, 141, 162, 212, 214, 216, 217, 224, 229, 230, 233, 239, 256, 257], "tab": [34, 43, 44, 50, 123, 216, 217, 258, 260], "registri": [34, 43, 44], "studio": [34, 42, 45, 47, 48, 50, 74, 143, 241, 256, 257, 258, 259, 261, 263], "3rd": [34, 43, 44, 103, 127, 143, 145, 147, 148, 150, 151, 255, 268], "parti": [34, 43, 44, 94, 127, 130, 143, 145, 147, 148, 150, 151, 255, 256, 268], "visualstudio": [34, 43, 44], "Be": [34, 43, 44, 73, 256, 257, 258, 259, 260, 263, 264, 266], "sure": [34, 43, 44, 50, 57, 73, 74, 84, 125, 128, 132, 133, 141, 145, 148, 151, 254, 256, 257, 258, 259, 260, 263, 264, 266, 268], "check": [34, 39, 41, 43, 44, 52, 125, 232, 256, 264, 268], "desktop": [34, 44, 78, 256, 259], "workload": [34, 43, 44, 256], "sudo": [34, 43, 44, 54, 71, 77, 256], "apt": [34, 43, 44, 71, 77, 256], "y": [34, 43, 44, 71, 77, 81, 86, 114, 115, 119, 121, 123, 125, 128, 130, 131, 132, 133, 134, 137, 139, 141, 143, 145, 147, 148, 150, 151, 157, 162, 192, 216, 217, 230, 236, 254, 256, 257, 258, 266], "ppa": [34, 43, 44], "toolchain": [34, 43, 44, 45, 47, 48], "r": [34, 43, 44, 123, 143, 145, 148, 151, 216, 217, 224, 225, 226, 232, 233, 266, 268], "deadsnak": [34, 43, 44], "essenti": [34, 43, 44], "ninja": [34, 43, 44], "gdb": [34, 43], "p7zip": [34, 43, 44, 71, 77, 256], "lf": [34, 43, 44], "python3": [34, 43, 44, 74, 268], "libusb": [34, 43, 44], "libgl1": [34, 43, 44], "high": [34, 39, 43, 44, 257, 261, 267, 268], "compress": [34, 43, 44, 59, 61, 163, 257, 259, 262], "ratio": [34, 43, 44, 61, 161, 164, 177, 193], "asset": [34, 43, 44, 94, 143, 147, 150, 245, 246, 247, 250, 252], "64": [34, 43, 44, 67, 69, 103, 125, 128, 129, 130, 132, 133, 134, 135, 137, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 158, 160, 161, 243, 247, 251, 254, 258, 259, 260, 261, 264, 266], "scm": [34, 43, 44], "navig": [34, 43, 44, 255, 256, 258, 260], "cd": [34, 43, 44, 45, 47, 48, 50, 55, 74, 256, 264], "desir": [34, 62, 74, 84, 256, 260, 261, 267], "dcmake_toolchain_fil": 34, "gcc": [34, 45, 47, 48], "win64_toolchain": 34, "linux_toolchain": 34, "ex": [34, 44, 50, 247, 252, 258], "microcontrol": [35, 36], "word": [35, 36, 100, 103, 123, 143, 144, 145, 147, 148, 150, 151, 159, 160, 161, 213, 216, 217, 259, 260, 264, 268], "record": [35, 36, 41, 95, 96, 99, 100, 103, 145, 147, 148, 149, 150, 151, 157, 167, 170, 173, 176, 258, 259, 261, 266], "written": [35, 36, 57, 80, 85, 224, 239, 245, 246, 247, 250, 252, 268], "vcom": [35, 36, 259], "alexa": [35, 142, 143, 213, 240], "demo": [35, 37, 39, 40, 42, 154, 240, 260, 268], "voic": [35, 100, 143, 145, 148, 151, 210, 211, 212, 213, 216, 217, 259, 260, 268], "av": [35, 240, 259], "two": [35, 36, 61, 68, 71, 81, 86, 89, 91, 103, 104, 114, 115, 119, 123, 134, 139, 141, 144, 145, 146, 148, 149, 151, 152, 153, 164, 177, 193, 216, 217, 240, 243, 256, 257, 258, 259, 260, 261, 262, 265, 267, 268], "audio_classifier_config": 35, "led1": [35, 36], "led0": [35, 36], "regular": [35, 36, 114, 115, 119, 123, 127, 128, 135, 146, 149, 216, 217], "interv": [35, 36, 86, 125], "score": [35, 36, 103, 116, 129, 162, 254, 256], "top": [35, 36, 43, 49, 50, 61, 64, 67, 69, 73, 107, 128, 253, 256, 257, 258, 260, 263, 264], "trigger": [35, 36, 122, 123, 125, 147, 150, 173, 255, 259, 268], "light": [35, 36, 254, 258, 260], "respond": [35, 36], "greater": [35, 36, 139, 164], "blink": [35, 36], "500": [35, 36, 114, 115, 119, 145, 153, 258, 260], "clear": [35, 36, 70, 84, 115, 130, 141, 143, 145, 147, 148, 150, 151, 175, 194, 257], "map": [35, 36, 37, 39, 62, 67, 71, 84, 86, 114, 115, 119, 123, 133, 134, 141, 145, 148, 150, 151, 153, 155, 162, 186, 216, 217, 243, 258, 262, 265], "silenc": [35, 36, 80, 81, 89, 91, 95, 103, 143, 144, 145, 147, 148, 150, 151, 259, 260, 261], "unknown": [35, 36, 37, 81, 89, 91, 98, 122, 125, 130, 143, 144, 145, 147, 148, 150, 151, 160, 176, 258, 259, 261, 262], "usual": [35, 36, 51, 65, 130, 144, 146, 152, 256, 258, 260, 264, 265, 268], "out": [35, 36, 61, 62, 71, 84, 86, 162, 175, 194, 229, 232, 256, 258, 261, 266, 268], "label": [35, 36, 39, 62, 67, 81, 86, 89, 91, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 119, 121, 130, 131, 133, 134, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 160, 161, 162, 164, 174, 257, 260, 261, 266], "underscor": [35, 36, 39, 67, 103, 214, 258, 268], "blob": [35, 36, 52, 128, 144, 149, 158, 161, 186, 192, 194], "master": [35, 36, 88, 95, 109, 110, 111, 128, 135, 138, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 160, 161, 163, 194, 222, 243, 245, 247, 248, 249, 251, 252, 260], "toolkit": [35, 36, 257, 258, 260, 261, 266], "replac": [35, 36, 37, 39, 41, 52, 74, 86, 107, 123, 130, 143, 144, 145, 147, 148, 150, 151, 216, 217, 257, 258, 260, 261, 262, 264, 268], "insid": [35, 36, 74, 81, 86, 114, 119, 128, 263], "renam": [35, 36, 37, 39, 41, 52, 264], "1_": [35, 36, 37, 39, 41, 52], "folder": [35, 36, 37, 39, 41, 50, 52, 103], "sort": [35, 36, 37, 39, 41, 52, 81, 86, 89, 103, 114, 119, 141, 143, 145, 147, 148, 151, 255, 257], "alphabet": [35, 36, 37, 39, 41, 52, 81, 86, 89, 114, 119, 123, 216, 217], "ascend": [35, 36, 37, 39, 41, 52], "order": [35, 36, 37, 39, 41, 52, 62, 65, 66, 71, 81, 84, 86, 114, 119, 122, 175, 177, 193, 194, 266], "ad": [35, 36, 37, 39, 41, 52, 55, 61, 62, 65, 67, 69, 71, 81, 84, 89, 91, 103, 114, 119, 122, 143, 145, 146, 147, 148, 150, 152, 168, 186, 192, 228, 249, 250, 254, 256, 257, 258, 260, 261, 263, 265, 267], "flatbuff": [35, 36, 37, 39, 41, 52, 62, 76, 112, 122, 123, 125, 164, 178, 179, 182, 185, 187, 190, 191, 192, 194, 195, 199, 200, 202, 203, 206, 249], "tell": [35, 37, 39, 44, 57, 114, 115, 119, 139, 145, 153, 238, 255, 256, 257, 258, 259, 260, 261, 265, 267], "audio_classifier_model": [35, 52, 259], "correctli": [35, 36, 54, 57, 81, 86, 257, 258], "section": [35, 36, 39, 41, 44, 62, 65, 71, 103, 144, 146, 149, 153, 194, 251, 255, 256, 257, 258, 259, 260, 261, 265, 267, 268], "origin": [35, 80, 86, 103, 108, 123, 131, 147, 150, 177, 193, 216, 217, 242, 257, 258, 261, 265, 267], "well": [35, 44, 47, 51, 61, 63, 67, 78, 101, 122, 123, 143, 144, 145, 146, 148, 149, 152, 208, 209, 216, 217, 249, 256, 257, 258, 259, 260, 262, 263, 265, 267], "relev": [35, 60, 61, 86, 114, 115, 119, 120, 130, 132, 133, 137, 143, 145, 147, 148, 150, 151, 254, 255, 260], "popul": [35, 43, 67, 69, 89, 91, 120, 122, 127, 143, 145, 148, 151, 177, 193, 194, 202, 230, 254], "driver": [35, 54, 74, 256, 259, 260], "length": [35, 62, 80, 81, 83, 84, 103, 114, 115, 119, 123, 130, 139, 143, 144, 145, 147, 148, 149, 150, 151, 177, 192, 193, 216, 217, 218, 239, 243, 260, 261, 264, 268], "average_window_duration_m": [35, 62, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 243, 251, 258, 260, 264], "highest": [35, 36, 62, 84, 123, 216, 217], "detection_threshold": [35, 62, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 243, 251, 258, 264], "185": [35, 62, 143, 151, 156, 251, 261], "minimum_count": [35, 62, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 243, 251, 258, 260, 264], "multipli": [35, 39, 63, 68, 86, 128, 129, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 181, 182, 183, 184, 189, 205, 243, 245, 247, 248, 251, 258, 260, 261, 264, 266], "uart": [35, 44, 49, 222, 232, 239, 259], "effect": [35, 50, 51, 63, 64, 67, 91, 94, 114, 115, 119, 141, 143, 144, 145, 147, 148, 150, 151, 194, 254, 257, 258, 260, 264, 265], "transmit": 36, "bluetooth": [36, 261], "low": [36, 143, 145, 147, 148, 150, 151, 256, 259, 261, 268], "client": [36, 40, 261], "live": [36, 127, 260, 268], "plai": [36, 149, 150, 151, 240, 259, 260, 261], "move": [36, 143, 145, 148, 151, 258, 261, 267], "accordingli": [36, 132, 133, 254, 258, 261, 264], "ble_audio_classifi": [36, 143, 147, 148, 150, 151, 261], "pacman": [36, 150, 151, 261], "upon": [36, 256], "advertis": 36, "kw": [36, 128, 129, 143, 145, 148, 151, 160, 260], "uuid": 36, "c20ffe90": 36, "4ed4": 36, "46b9": 36, "8f6c": 36, "ec143fce3e4": 36, "string": [36, 62, 80, 81, 85, 86, 121, 122, 123, 125, 128, 132, 133, 143, 145, 148, 151, 162, 164, 166, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 191, 193, 194, 195, 196, 199, 200, 202, 203, 204, 206, 207, 208, 212, 214, 216, 217, 218, 220, 224, 228, 229, 231, 233, 234, 236, 249, 254, 268], "id": [36, 62, 91, 103, 127, 134, 162, 237, 249, 252, 256, 261], "probabl": [36, 39, 61, 136, 153, 243, 261, 262, 266], "uint8": [36, 39, 57, 65, 85, 106, 107, 108, 125, 141, 143, 145, 147, 148, 150, 151, 186, 194, 249], "whenev": [36, 131, 136], "ble_audio_classifier_config": 36, "keyword_spotting_pacman": [36, 150], "gecko_sdk_enable_bluetooth": 36, "ble_audio_classifier_model": 36, "mltk_ble_audio_classifi": 36, "qsg169": 36, "v3": [36, 142], "ug103": 36, "14": [36, 132, 133, 135, 139, 143, 144, 145, 148, 149, 151, 152, 155, 157, 158, 160, 161, 243, 249, 254, 258, 260, 261, 264, 266], "le": 36, "fundament": [36, 268], "ug434": 36, "grayscal": [37, 39, 86, 106, 107, 108, 109, 110, 119, 136, 141, 153, 249, 257, 258], "person": [37, 93, 103, 137, 143, 145, 148, 151, 159, 161, 255, 257, 258], "against": [37, 61, 120, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 233, 244, 254, 257], "similar": [37, 44, 50, 58, 61, 68, 81, 86, 103, 115, 132, 133, 139, 141, 143, 147, 150, 152, 153, 229, 254, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268], "page": [37, 39, 70, 73, 74, 157, 255, 259], "click": [37, 43, 64, 73, 74, 129, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 243, 244, 245, 246, 247, 248, 249, 250, 251, 256, 257, 258, 260, 261, 266, 268], "button": [37, 43, 64, 73, 74, 256, 258, 260, 263], "iter": [37, 81, 84, 86, 114, 115, 119, 123, 125, 144, 149, 175, 177, 192, 193, 194, 216, 217, 229, 231, 234, 258, 266], "solid": [37, 86, 258], "blue": [37, 81, 256], "purpl": 37, "press": [37, 73, 235], "eras": 37, "puls": 37, "elaps": 37, "error": [37, 53, 54, 63, 91, 123, 125, 126, 141, 145, 156, 164, 172, 173, 216, 217, 228, 231, 232, 245, 256, 257, 264, 265, 266, 268], "try": [37, 70, 123, 143, 145, 147, 148, 150, 151, 164, 216, 217, 233, 239, 243, 245, 259, 261, 268], "repeat": [37, 114, 115, 119, 155, 257, 258], "fingerprint_signature_gener": [37, 256, 257], "howev": [37, 39, 41, 50, 51, 57, 61, 67, 68, 71, 73, 74, 139, 141, 143, 145, 147, 148, 150, 152, 176, 243, 247, 252, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268], "method": [37, 39, 41, 81, 82, 83, 84, 86, 87, 91, 100, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 214, 215, 216, 217, 223, 224, 226, 227, 230, 231, 233, 235, 239, 265], "fingeprint_authent": 37, "usart": 37, "peripher": [37, 39, 259], "pin": [37, 39, 259], "expans": [37, 39, 186], "gnd": [37, 39, 259], "black": [37, 86, 256], "suppli": [37, 62, 81, 86, 116, 251, 257, 268], "20": [37, 67, 74, 78, 81, 114, 115, 119, 129, 130, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 161, 228, 236, 243, 251, 256, 258, 259, 260, 261, 264, 266], "3vt": 37, "white": [37, 81], "txd": 37, "yellow": 37, "rxd": 37, "wakeup": 37, "mltk_fingerprint_authent": 37, "them": [37, 46, 86, 103, 128, 143, 144, 145, 148, 151, 256, 257, 258, 260, 261], "simpl": [38, 86, 103, 132, 134, 145, 158, 241, 242, 254, 257, 258, 259, 260, 266, 268], "printf": 38, "mltk_hello_world": [38, 44], "_unknown_": [39, 81, 91, 98, 110, 129, 130, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 156, 213, 243, 251, 258, 260, 262, 264, 267, 268], "shape": [39, 63, 65, 67, 68, 81, 84, 86, 106, 107, 108, 109, 110, 114, 115, 119, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 192, 201, 202, 243, 245, 247, 248, 249, 251, 252, 254, 257, 258, 260, 261, 262, 264, 265, 266, 267], "height": [39, 81, 83, 84, 86, 109, 110, 114, 130, 137, 143, 144, 145, 147, 148, 149, 150, 151, 179, 180, 181, 182, 183, 184, 193, 195, 196, 197, 203, 204, 205, 249, 261, 264, 266], "width": [39, 81, 83, 84, 86, 109, 110, 114, 123, 128, 130, 135, 137, 143, 144, 145, 147, 148, 149, 150, 151, 179, 180, 181, 182, 183, 184, 193, 195, 196, 197, 203, 204, 205, 216, 217, 249, 261, 264, 266], "channel": [39, 62, 81, 84, 85, 86, 119, 128, 130, 135, 137, 143, 145, 147, 148, 150, 151, 198, 260, 261, 264], "datatyp": [39, 139, 186, 194], "samplewise_norm": [39, 62, 129, 132, 133, 134, 135, 136, 137, 141, 144, 145, 146, 149, 152, 153, 156, 157, 158, 160, 161, 243, 247, 249, 254, 258, 264, 265, 267], "rescal": [39, 62, 81, 86, 90, 129, 132, 133, 134, 135, 136, 141, 144, 146, 149, 152, 153, 156, 157, 158, 160, 161, 247, 249, 254, 258, 264, 265], "scale": [39, 62, 80, 81, 83, 84, 85, 128, 132, 133, 134, 158, 198, 249, 254, 258, 259, 260, 266, 267], "factor": [39, 67, 86, 125, 129, 130, 135, 136, 137, 141, 144, 146, 147, 149, 150, 153, 156, 181, 184, 258, 266], "model_input_tensor": 39, "img": [39, 62, 137, 141, 249, 258], "mean_and_std": [39, 62, 129, 134, 135, 136, 137, 141, 144, 145, 146, 149, 152, 153, 156, 157, 158, 160, 161, 243, 247, 258, 264, 265, 267], "center": [39, 81, 100, 123, 157, 216, 217, 256, 257, 267], "standard": [39, 50, 60, 61, 62, 67, 69, 71, 81, 86, 128, 132, 133, 137, 144, 146, 149, 153, 186, 194, 231, 241, 245, 248, 249, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268], "deviat": [39, 62, 265], "std": [39, 62, 81, 86, 90, 137, 145, 228, 243, 249, 258, 267], "128": [39, 57, 62, 84, 93, 128, 131, 132, 133, 134, 135, 141, 143, 145, 146, 147, 148, 150, 151, 153, 155, 157, 158, 161, 249, 254, 256, 258, 259, 260, 267], "i2c": 39, "vcc": 39, "18": [39, 131, 135, 139, 143, 144, 145, 147, 148, 150, 151, 152, 153, 155, 161, 243, 247, 251, 252, 260, 261, 264, 267], "mosi": 39, "miso": 39, "sck": 39, "sda": 39, "scl": 39, "mltk_image_classifi": 39, "hello": 40, "world": [40, 99, 101, 103, 258, 260], "ble": [40, 78, 261], "signatur": [40, 81, 86, 89, 91, 115, 116, 117, 118, 122, 141, 142, 240, 266], "standalon": [41, 59, 63, 64], "mtlk": [41, 265, 267], "stand": [41, 256], "alon": [41, 256], "opresolv": 41, "greatli": [41, 86, 91, 147, 150, 152, 176, 241, 255, 256, 262, 265], "consum": [41, 63, 68, 72, 81, 86, 100, 103, 114, 115, 119, 241, 245, 247, 252, 259, 260], "linker": 41, "hardcod": [41, 144, 145, 146, 149, 153, 256, 258], "tensor": [41, 51, 57, 62, 63, 70, 80, 85, 86, 91, 114, 115, 119, 127, 128, 139, 141, 164, 168, 173, 174, 176, 178, 179, 182, 185, 187, 191, 192, 195, 198, 199, 200, 201, 202, 203, 206, 243, 249, 258, 265, 266, 267], "arena": [41, 62, 164, 168], "alloc": [41, 232, 256, 266], "heap": 41, "100000": 41, "bss": 41, "counter": [41, 86, 130, 137, 143, 145, 147, 148, 150, 151], "demonstr": [42, 49, 131, 134, 135, 138, 140, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 257, 258, 259, 263, 267, 268], "implement": [42, 51, 65, 73, 83, 114, 115, 119, 123, 144, 162, 173, 216, 217, 231, 259], "vscode": [42, 49, 50, 78, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 263], "tflite_micro_wrapp": [42, 48, 170], "mvp_wrapper": [42, 47], "what": [43, 44, 61, 76, 86, 95, 125, 134, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 241, 244, 257, 258, 259, 260, 262, 266, 268], "_desktop": 43, "_": [43, 123, 125, 134, 136, 141, 143, 144, 145, 147, 148, 150, 151, 153, 155, 256, 258, 260, 261, 266, 268], "date": [43, 62, 74, 129, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 174, 209, 229, 243, 247, 248, 249, 251, 258, 260, 264], "next": [43, 44, 62, 70, 71, 84, 114, 115, 119, 213, 230, 243, 258, 260, 263, 264, 265], "Then": [43, 44, 45, 47, 48, 55, 70, 71, 73, 129, 136, 141, 143, 144, 145, 146, 148, 149, 151, 153, 156, 254, 256, 258, 259, 264, 266], "install_mltk": [43, 44, 74], "stack": [43, 259], "extens": [43, 50, 61, 68, 70, 73, 75, 76, 89, 91, 126, 192, 229, 256, 258, 260], "gsdk_mltk_extens": 43, "gsdk": 43, "toolbar": 43, "prefer": [43, 267], "sidebar": [43, 256], "expand": [43, 123, 216, 217, 260], "entri": [43, 62, 71, 89, 91, 114, 119, 122, 143, 162, 173, 176, 186, 194, 218, 229, 230, 231, 243, 256, 266], "locat": [43, 99, 103, 157, 256, 268], "v4": 43, "ok": [43, 258], "trust": 43, "point": [43, 50, 54, 71, 73, 74, 75, 77, 86, 123, 130, 131, 134, 137, 139, 140, 143, 144, 145, 147, 148, 149, 150, 151, 152, 181, 184, 189, 198, 205, 216, 217, 233, 245, 247, 248, 249, 251, 252, 256, 257, 258, 259, 260, 261, 262, 266, 268], "suit": 43, "launcher": 43, "creation": [43, 67], "link": [43, 44, 50, 58, 64, 78, 89, 91, 223, 226, 229, 239, 241], "directli": [43, 44, 47, 51, 52, 57, 60, 62, 65, 67, 76, 80, 81, 83, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 192, 241, 245, 246, 247, 250, 252, 254, 256, 258, 260, 267], "edit": [43, 256, 264], "skip": [44, 57, 71, 81, 152, 258, 260, 262, 266], "j": [44, 63, 81, 223, 226, 245, 248, 258, 259, 261, 266], "pack": [44, 157], "jlink": [44, 222, 223, 224, 225, 226, 239], "linksoftwareanddocumentationpack": 44, "jlink_windows_x86_64": 44, "integr": [44, 139], "anoth": [44, 57, 81, 86, 89, 91, 115, 152, 186, 194, 241, 256, 257, 258, 259, 260, 262, 264, 266], "teraterm": 44, "free": [44, 71, 73, 74, 94, 255, 256, 258, 260, 268], "2015": [44, 74, 96], "2017": [44, 74, 103], "2019": [44, 74, 236], "mani": [44, 57, 60, 86, 100, 101, 114, 115, 119, 125, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 241, 255, 256, 257, 258, 260, 262, 264, 265, 266, 267, 268], "And": [44, 55, 70, 71, 144, 230, 243, 256, 257], "mode": [44, 62, 67, 74, 86, 119, 122, 125, 126, 128, 131, 134, 141, 144, 146, 147, 149, 150, 152, 157, 162, 166, 167, 224, 225, 226, 230, 233, 245, 247, 248, 249, 251, 252, 257, 258, 260], "breakpoint": [44, 50, 135, 263], "usb": 44, "cdc": [44, 239], "speed": [44, 81, 86, 130, 137, 143, 145, 147, 148, 150, 151, 256, 259, 260], "aka": [44, 147, 150, 162, 181, 184, 189, 205, 243, 257, 265, 266], "baud": [44, 143, 164, 233, 239], "115200": [44, 164, 233, 239, 259], "hello_world": 44, "mltk_hello_world_download": 44, "mltk_hello_world_download_run": 44, "mltk_hello_world_reset": 44, "reset": [44, 125, 224], "mltk_model_profiler_download": 44, "mltk_model_profiler_download_run": 44, "mltk_model_profiler_reset": 44, "compon": [45, 62, 84, 260, 261], "pip": [45, 47, 48, 71, 73, 74, 231, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 260, 261, 266, 268], "git": [45, 47, 48, 74, 170, 176, 242], "clone": [45, 47, 48, 74, 261], "build_opt": [45, 47, 48], "mltk_audio_feature_generator_wrapp": 45, "manag": [46, 67, 71, 133, 144, 146, 147, 149, 150, 152, 192, 255, 256], "ram": [47, 48, 51, 57, 62, 63, 65, 71, 99, 125, 129, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 174, 230, 241, 245, 247, 248, 249, 251, 255, 256, 258, 259, 260, 261, 264, 266], "clock": [47, 63, 129, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 175, 245, 248, 258, 260, 261, 264, 266], "tflitemicro": [47, 48, 171, 241, 243, 248], "mltk_mvp_wrapper": 47, "helper": [48, 67, 71, 83, 112, 121, 143, 145, 148, 151, 223, 256, 265], "tflitemicromodel": [48, 49, 171, 176, 243, 265], "jupyt": [49, 73, 231, 253, 257, 258, 260, 266], "notebook": [49, 74, 231, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 260, 261, 268], "browser": [49, 64, 72, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 260, 261, 266, 268], "colab": [49, 253, 257, 258, 260, 262, 264, 266, 268], "instanc": [49, 57, 61, 62, 81, 89, 91, 114, 115, 119, 123, 125, 126, 128, 130, 132, 133, 137, 139, 143, 145, 147, 148, 150, 151, 152, 162, 164, 166, 167, 168, 169, 170, 176, 192, 216, 217, 220, 221, 230, 231, 243, 254, 258, 259, 260, 261, 262, 266, 268], "tflitemodel": [49, 68, 112, 116, 117, 118, 122, 123, 126, 139, 141, 164, 166, 168, 169, 170, 176, 178, 179, 182, 185, 187, 190, 191, 194, 195, 199, 200, 202, 203, 206, 241, 243, 249, 257, 258, 260, 266], "manual": [49, 57, 67, 71, 100, 103, 114, 119, 127, 130, 132, 133, 135, 137, 141, 143, 145, 147, 148, 150, 151, 157, 243, 254, 256, 260, 267], "request": [50, 70, 103, 177, 193, 245, 247, 248, 249, 251, 252, 268], "arg": [50, 70, 80, 84, 89, 122, 123, 128, 130, 132, 133, 137, 143, 145, 147, 148, 150, 151, 162, 165, 175, 177, 186, 193, 194, 200, 212, 216, 217, 221, 228, 230, 231, 233, 254, 257, 258, 260, 261], "manner": 50, "datagen": [50, 57, 67, 114, 119, 129, 134, 135, 136, 141, 144, 146, 149, 152, 153, 156, 157, 158, 160, 161, 258], "keep": [51, 103, 130, 137, 139, 143, 144, 145, 147, 148, 150, 151, 258, 260, 262], "mind": [51, 258, 260, 266], "hold": [51, 89, 91, 108, 143, 145, 147, 148, 150, 151, 162, 177, 193, 202, 218, 256, 260, 261, 266], "happen": [51, 65, 80, 83, 132, 133, 249, 254, 265], "slower": [51, 136, 153, 258], "tip": [51, 65, 125, 240, 258, 267], "fit": [51, 67, 80, 81, 86, 123, 125, 130, 132, 133, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 167, 240, 254, 258, 259, 260, 261, 264, 265, 267, 268], "most": [51, 62, 65, 66, 71, 74, 101, 103, 132, 133, 144, 147, 150, 177, 193, 246, 251, 254, 255, 256, 258, 259, 260, 261, 262, 264, 265, 266, 268], "total": [51, 61, 86, 100, 114, 115, 116, 117, 118, 119, 125, 129, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 174, 201, 213, 243, 247, 248, 251, 252, 258, 260, 264, 266, 268], "4x": [51, 57, 65, 150, 259, 265], "conv2d": [51, 67, 69, 125, 129, 130, 132, 133, 134, 136, 139, 141, 146, 147, 149, 150, 153, 155, 156, 247, 248, 249, 251, 252, 254, 258, 260, 264], "depthwiseconv2d": [51, 129], "depth_multipli": [51, 129, 184], "expens": [51, 81, 86, 144, 146, 147, 149, 150, 152, 153, 256, 258, 259, 260, 261, 268], "smaller": [51, 144, 146, 147, 149, 150, 152, 164, 256], "larger": [51, 62, 71, 81, 86, 125, 129, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 213, 256, 257, 258, 259, 260, 261, 264, 265, 267, 268], "constraint": [51, 63, 128, 240, 259, 260, 264], "kernel_s": [51, 67, 69, 125, 129, 132, 133, 136, 156, 179, 182, 203, 254, 265], "dens": [51, 67, 69, 125, 129, 130, 131, 132, 133, 134, 135, 136, 139, 141, 145, 146, 147, 149, 150, 153, 155, 156, 247, 248, 249, 251, 252, 254, 258, 260, 265], "k": [51, 62, 74, 84, 86, 129, 131, 139, 143, 145, 146, 147, 148, 150, 151, 155, 156, 157, 175, 194, 247, 251, 258, 260], "maxpool2d": [51, 155], "averagepool2d": [51, 145], "faq": [52, 56, 256, 258], "thought": [52, 241], "simpli": [52, 69, 139, 144, 145, 146, 148, 149, 152, 254, 258, 260, 261], "uint8_t": [52, 260, 265], "arrai": [52, 80, 81, 85, 86, 89, 106, 107, 108, 114, 115, 119, 123, 131, 135, 136, 139, 153, 157, 162, 176, 177, 186, 192, 193, 218, 249, 258, 260, 265, 266], "deploi": [52, 141, 256, 257, 266], "model_profiler_model": 52, "isn": [53, 125, 127, 143, 145, 148, 151], "gpu": [53, 71, 73, 74, 81, 86, 91, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 230, 252, 255, 258, 259, 260, 261], "am": 53, "solut": [54, 255, 256], "reload": [54, 126, 231], "cuda": [54, 220, 260], "gdm3": 54, "rmmod": 54, "nvidia_uvm": 54, "nvidia_drm": 54, "nvidia_modeset": 54, "nvidia": [54, 74, 230, 252], "modprob": 54, "intermedi": [55, 267], "ll": [55, 57, 127, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 256, 258, 260, 263], "accept": [56, 230, 258, 260, 265], "could": [56, 58, 63, 71, 114, 115, 119, 125, 129, 132, 133, 136, 144, 146, 153, 256, 257, 258, 260, 265, 268], "properli": [56, 145, 147, 150, 245, 258, 259, 260, 265, 267], "easiest": [56, 74], "fix": [56, 143, 256, 265, 266], "inference_input_typ": [56, 57, 67, 69, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 254, 258, 260, 265, 266, 267], "inference_output_typ": [56, 57, 67, 69, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 254, 258, 260, 265, 266, 267], "reason": [57, 63, 68, 72, 103, 245, 247, 252, 256, 257, 258, 260], "whatev": [57, 258, 260, 267], "compris": [57, 62, 96, 258, 260], "our": [57, 61, 67, 69, 70, 100, 120, 130, 132, 133, 134, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 249, 254, 256, 258, 259, 260, 263, 264, 266, 267], "might": [57, 61, 62, 65, 67, 69, 257, 258, 260, 266], "parallelimagedatagener": [57, 62, 67, 88, 119, 134, 136, 138, 141, 153, 157, 158, 160, 161, 256, 258], "def": [57, 67, 69, 81, 86, 89, 91, 114, 115, 119, 122, 123, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 216, 217, 230, 249, 254, 256, 257, 258, 260, 261, 262, 264, 266, 267], "convert_img_from_uint8_to_int8": 57, "parallelprocessparam": [57, 81, 86, 135, 141, 144, 149, 152, 157], "ndarrai": [57, 80, 81, 83, 85, 86, 90, 91, 99, 130, 132, 133, 135, 137, 141, 143, 144, 145, 147, 148, 149, 150, 151, 157, 162, 173, 176, 178, 179, 182, 185, 187, 191, 192, 195, 199, 200, 202, 203, 206, 254, 261], "clip": [57, 83, 95, 96, 99, 101, 103, 130, 141, 143, 145, 147, 148, 150, 151, 243, 259, 260, 261], "alreadi": [57, 74, 141, 152, 209, 247, 252, 256, 258, 261, 262, 264, 266], "astyp": [57, 83, 131, 132, 133, 134, 135, 139, 141, 143, 145, 147, 148, 150, 151, 158, 243, 249, 254, 265, 266, 267], "convers": [57, 103, 125, 132, 133, 240, 254, 260, 268], "preprocessing_funct": [57, 81, 82, 86, 87, 119, 141, 144, 157], "image_length": 57, "model_input": [57, 131], "int8_t": 57, "image_data": 57, "abov": [57, 64, 69, 115, 134, 139, 141, 144, 145, 146, 149, 153, 212, 254, 256, 257, 258, 260, 261, 266, 268], "nor": 57, "tfliteconvert": [57, 65, 67, 123, 125, 141, 145, 153, 254, 258, 265, 266, 267], "dequant": [57, 131, 136, 139, 141, 145, 153, 155, 157, 160, 161, 185, 243, 245, 247, 258, 266, 267], "sizeof": 57, "importerror": 58, "fail": [58, 67, 69, 141, 143, 145, 148, 151, 164, 232, 233, 245, 257, 260, 261, 266], "_pywrap_tensorflow_intern": 58, "due": [58, 61, 63, 103, 128, 257, 267], "latest": [58, 74, 125, 256, 266, 268], "redistribut": [58, 74, 242], "2977003": 58, "x64": 58, "txt": [60, 71, 77, 89, 143, 145, 148, 151], "png": [60, 81, 86, 91, 141, 257], "focus": [61, 69, 256, 267], "aspect": [61, 67, 69, 161, 258, 260, 266], "ipynb": [61, 62, 63, 65, 68, 69, 72, 73], "involv": [61, 65, 267], "versu": [61, 257, 258, 260], "evaluatemixin": [61, 139, 141], "my_model_v1": [61, 67, 69], "audiodatasetmixin": [61, 67, 69, 71, 115, 122, 129, 135, 144, 146, 149, 152, 156], "instanti": [61, 67, 69, 71, 81, 120, 126, 128, 129, 130, 131, 134, 135, 136, 137, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 177, 178, 179, 182, 185, 186, 187, 191, 193, 194, 195, 199, 200, 203, 206, 213, 230, 231, 254, 258, 260, 262, 268], "among": 61, "classifierevaluationresult": [61, 141, 257, 266], "tabl": [61, 123, 186, 216, 217, 268], "layout": [61, 68, 76, 129, 134, 135, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 174, 241, 260, 266], "row": [61, 128, 139, 143, 145, 148, 151, 164, 260, 261, 265, 267], "repres": [61, 81, 114, 115, 119, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 177, 193, 206, 236, 254, 258, 259, 265, 266, 267, 268], "column": [61, 86, 131, 139, 164, 265, 267], "vice": 61, "versa": 61, "curv": [61, 162], "plot": [61, 123, 125, 139, 141, 162, 257, 258, 260], "illustr": [61, 145, 257, 260, 261, 262], "diagnost": 61, "discrimin": 61, "vari": [61, 256], "tpr": [61, 162], "fpr": [61, 162], "fraction": [61, 62, 84, 86, 114, 115, 119], "known": [61, 128, 143, 144, 145, 147, 148, 150, 151, 152, 177, 193, 259, 261, 262, 268], "proport": [61, 103], "those": [61, 208, 265, 268], "who": [61, 101, 103], "condit": [61, 233, 239, 258], "judg": 61, "gold": 61, "statist": [61, 99, 162, 241, 245, 246, 247, 250, 252, 256, 257, 258, 260], "multipl": [61, 86, 91, 103, 114, 115, 119, 129, 139, 144, 152, 160, 161, 164, 175, 192, 230, 257, 258, 260, 262, 264, 265, 267, 268], "comparison": [61, 123, 216, 217, 244], "fall": 61, "alarm": 61, "reject": [61, 257, 259, 260, 268], "null": 61, "hypothesi": 61, "particular": [61, 65, 103, 143, 145, 146, 148, 149, 151, 153, 256, 258, 266], "wrongli": 61, "categor": [61, 67, 69, 81, 86, 114, 119, 128, 129, 130, 133, 135, 136, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 160, 161, 162, 258, 266], "regardless": [61, 125, 233, 256], "autoencoderevaluationresult": 61, "belong": [61, 89, 103, 155, 243, 244, 247, 252, 258, 262], "anomaly_detect": [61, 67, 241, 244], "reconstruct": [61, 131, 244], "wors": [61, 244, 267], "further": [61, 122, 244, 264], "anomali": [61, 131, 157, 159, 244], "atom": 62, "easili": [62, 256, 259], "assur": 62, "synchron": [62, 239], "dictionari": [62, 71, 84, 86, 89, 91, 114, 115, 119, 121, 122, 123, 125, 127, 139, 143, 145, 148, 151, 162, 164, 167, 168, 175, 176, 186, 192, 194, 212, 216, 217, 219, 231, 234, 249, 251], "typic": [62, 67, 69, 76, 77, 122, 125, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 173, 230, 250, 256, 258, 259, 260, 262, 264, 265, 267, 268], "schema": [62, 76, 180, 183, 188, 190, 192, 194, 196, 204, 207], "fb": [62, 76, 186, 190, 192, 194], "de": [62, 65, 141, 186, 192, 220], "unchang": 62, "bool": [62, 81, 83, 84, 86, 89, 91, 103, 114, 115, 119, 121, 122, 123, 126, 127, 130, 131, 132, 133, 137, 139, 141, 143, 145, 147, 148, 150, 151, 155, 162, 164, 166, 167, 169, 170, 173, 176, 179, 182, 186, 187, 192, 194, 200, 202, 203, 206, 208, 209, 212, 216, 217, 218, 219, 221, 224, 226, 229, 230, 231, 233, 236, 237, 239, 254, 257, 265], "byte": [62, 122, 129, 131, 132, 133, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 173, 177, 186, 192, 193, 194, 202, 218, 223, 224, 226, 236, 238, 239, 245, 248, 254, 256, 258, 260, 261, 264, 266], "iso8601": [62, 174], "hash": [62, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 129, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 170, 174, 176, 209, 215, 221, 243, 247, 248, 249, 251, 258, 260, 264], "md5": [62, 209, 221], "exclud": [62, 164, 208, 229, 231, 257, 258, 260], "match": [62, 66, 71, 83, 137, 139, 141, 143, 145, 148, 151, 170, 209, 233, 239, 249, 257, 258, 260, 263, 266], "hz": [62, 84, 129, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 245, 248, 258, 260, 261, 264, 266], "filterbank": [62, 84], "lowest": [62, 84, 123, 177, 193, 216, 217], "smoothing_bit": [62, 84], "coeffici": [62, 84, 96, 206], "odd": [62, 84, 128], "preserv": [62, 84, 161], "pcan_en": [62, 84, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 260, 264], "pcan": [62, 84, 147, 149, 150], "pcan_strength": [62, 84, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 260, 264], "expon": [62, 84], "pcan_offset": [62, 84, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 260, 264], "denomin": [62, 84, 177, 193], "pcan_gain_bit": [62, 84, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 260, 264], "log_scale_en": [62, 84, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 260, 264], "logarithm": [62, 84], "log_scale_shift": [62, 84, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 260, 264], "scale_shift": [62, 84], "fft_length": [62, 84, 129, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 260, 264], "fft": [62, 84, 152], "smallest": [62, 81, 89, 91], "activity_detection_en": [62, 84, 130, 143, 145, 147, 148, 149, 150, 151, 243, 260], "activity_detection_alpha_a": [62, 84, 130, 143, 145, 147, 148, 149, 150, 151, 243, 260], "fast": [62, 84, 242, 259, 268], "pole": [62, 84], "iir": [62, 84], "activity_detection_alpha_b": [62, 84, 130, 143, 145, 147, 148, 149, 150, 151, 243, 260], "activity_detection_arm_threshold": [62, 84, 130, 143, 145, 147, 148, 149, 150, 151, 243, 260], "activity_detection_trip_threshold": [62, 84, 130, 143, 145, 147, 148, 149, 150, 151, 243, 260], "negat": [62, 84], "q": [62, 84], "127": [62, 84, 135, 161, 233, 245, 249], "anyth": [62, 67, 84, 103], "db": [62, 67, 84], "norm_sampl": 62, "norm_img": [62, 249, 258], "approach": [62, 74, 257, 258, 259, 260, 268], "volume_db": [62, 67, 129, 144, 146, 152, 156, 251, 264], "latency_m": [62, 67, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 251, 260, 264], "level": [62, 67, 176, 228, 231, 239, 256, 266], "log_level": [62, 67, 129, 144, 146, 152, 156, 251, 264], "suppression_m": [62, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 251, 260, 264], "1500": [62, 129, 156, 251], "outsid": [62, 86, 241, 251], "No": [63, 64, 71, 103, 143, 145, 148, 151, 177, 241, 261], "individu": [63, 70, 81, 103, 157, 164, 256, 260, 266], "mathemat": [63, 103, 258], "accumul": [63, 68, 129, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 175, 187, 245, 248, 256, 258, 260, 261, 264, 266], "unsupport": [63, 129, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 245, 248, 258, 260, 261, 264, 266], "percentag": [63, 80, 81, 86, 89, 91, 145, 148, 164, 230], "rel": [63, 71, 81, 86, 89, 91, 124, 127, 130, 143, 145, 146, 147, 148, 149, 151, 153, 164, 175, 208, 229, 256, 258, 260, 261, 262, 268], "idl": [63, 164, 175], "op": [63, 70, 125, 129, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 175, 178, 179, 182, 185, 187, 191, 195, 199, 200, 203, 206, 245, 247, 248, 251, 252, 258, 260, 261, 264, 265, 266, 267], "mac": [63, 68, 71, 129, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 175, 245, 247, 248, 251, 252, 258, 260, 261, 264, 266], "index": [63, 81, 86, 89, 91, 114, 119, 123, 125, 129, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 172, 173, 178, 179, 182, 185, 187, 191, 192, 195, 199, 200, 201, 202, 203, 206, 210, 214, 216, 217, 231, 243, 245, 247, 248, 249, 251, 257, 258, 260, 261, 264, 265, 266, 267], "opcod": [63, 129, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 178, 179, 182, 185, 187, 191, 195, 199, 200, 203, 206, 243, 245, 247, 248, 249, 251, 258, 260, 261, 264, 266], "acc": [63, 129, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 245, 258, 260, 261, 264, 266], "els": [63, 80, 84, 85, 89, 91, 123, 125, 126, 130, 131, 132, 133, 137, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 155, 157, 164, 173, 175, 192, 194, 208, 209, 212, 228, 229, 231, 254, 256, 257, 259, 260, 261, 266, 268], "msg": [63, 156, 164, 172, 231, 264, 266], "arm": [63, 84, 160], "cortex": 63, "m33": 63, "efr32xg24": [63, 64, 78, 129, 131, 136, 141, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 260], "78mhz": 63, "know": [63, 68, 152, 245, 247, 256, 261, 262], "invest": [63, 68, 72, 245, 247, 252, 260], "drag": [64, 72, 76, 252, 266], "box": [64, 86, 119, 161, 268], "respect": [64, 139, 141, 257], "serv": [64, 242, 252], "network": [64, 86, 103, 128, 139, 141, 143, 145, 146, 148, 149, 151, 153, 259, 260, 261, 262, 265, 267], "ip": [64, 71, 77, 229], "address": [64, 71, 73, 74, 77, 96, 229, 256], "8000": [64, 145, 146, 147, 149, 150], "represent": [65, 177, 193, 220, 262], "opsset": [65, 67, 69, 125, 129, 130, 134, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 158, 260, 266, 267], "tflite_builtins_int8": [65, 67, 69, 125, 129, 130, 131, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 258, 260, 266, 267], "alwai": [65, 103, 125, 157, 224, 254, 260, 265], "target_spec": [65, 125, 266], "targetspec": [65, 125], "subset": [65, 69, 81, 82, 86, 87, 89, 100, 114, 115, 119, 121, 123, 130, 131, 132, 133, 134, 136, 137, 139, 141, 143, 144, 145, 147, 148, 150, 151, 153, 155, 157, 215, 250, 254, 256, 258, 259, 260, 261, 266], "hundr": 65, "randomli": [65, 81, 86, 89, 91, 143, 144, 145, 147, 148, 150, 212, 213, 259, 260, 268], "chosen": [65, 143, 161, 256, 260], "oppos": [66, 67, 265], "keyword_spotting_model": 66, "load_mltk_model": [66, 152, 243, 250, 262], "model_path": [66, 126, 139, 229, 266], "recurs": [66, 71, 89, 91, 122, 208, 229, 231], "repositori": [66, 74], "mltk_model_path": 66, "architectur": [67, 130, 137, 138, 140, 141, 143, 144, 147, 150, 241, 257, 264, 265, 267], "ye": [67, 103, 156, 160, 241, 251], "alphanumer": [67, 81, 86, 258], "charact": [67, 123, 212, 216, 217, 258, 262, 264, 268], "list_mltk_model": 67, "delimit": [67, 75, 123, 131, 216, 217, 229], "imagedatasetmixin": [67, 115, 125, 134, 136, 141, 153, 157, 158, 160, 161, 258], "rest": [67, 69, 81, 123, 144, 145, 146, 148, 149, 152, 216, 217, 258, 260, 264, 266, 267], "batch_siz": [67, 69, 81, 85, 86, 114, 115, 119, 120, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 254, 258, 260, 267], "adam": [67, 69, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 254, 258, 260, 261], "speech_commands_v2": [67, 69, 129, 130, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 260, 261], "class_mod": [67, 69, 81, 82, 86, 87, 114, 119, 129, 134, 135, 136, 141, 144, 146, 149, 152, 153, 156, 157, 158, 160, 161, 258], "kerasmodel": [67, 68, 69, 113, 116, 117, 118, 123, 125, 126, 139, 141, 145, 166, 167, 169, 254, 257, 258, 260, 267], "build_model_funct": [67, 69, 123, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 254, 260, 264], "my_model_build": [67, 69, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 148, 149, 151, 152, 153, 155, 156, 157, 158, 160, 161, 254, 258, 260, 261, 262, 264, 267], "keras_model": [67, 69, 123, 125, 129, 130, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 160, 161, 167, 257, 258, 260, 261, 262, 264, 267], "sequenti": [67, 69, 125, 129, 130, 131, 132, 133, 134, 135, 136, 146, 147, 149, 150, 153, 155, 156, 254, 258, 267], "inputlay": [67, 69, 156, 260], "input_shap": [67, 69, 107, 108, 109, 110, 119, 122, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 254, 258, 260, 261, 262, 264, 266, 267], "use_bia": [67, 69, 129, 136, 156, 179, 182, 187, 203], "pad": [67, 69, 80, 81, 83, 123, 125, 129, 130, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 160, 161, 179, 180, 181, 182, 183, 184, 193, 195, 196, 197, 203, 204, 205, 216, 217, 243, 245, 247, 248, 249, 251, 258, 259, 260, 261, 264, 266], "stride": [67, 69, 128, 129, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 179, 180, 182, 183, 195, 196, 203, 204, 243, 245, 247, 248, 249, 251, 258, 260, 261, 264, 265, 266], "relu": [67, 69, 129, 130, 131, 132, 133, 134, 135, 136, 139, 141, 143, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 161, 177, 243, 245, 247, 248, 249, 251, 254, 258, 260, 261, 265, 266], "flatten": [67, 69, 125, 129, 130, 132, 133, 134, 135, 136, 139, 141, 143, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 201, 231, 247, 248, 249, 251, 252, 254, 257, 258, 260], "n_class": [67, 69, 114, 115, 119, 122, 125, 129, 130, 135, 136, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 162, 243, 258, 260, 261, 262, 264, 265, 266], "over": [67, 69, 70, 86, 100, 103, 106, 125, 249, 258, 260, 263, 267, 268], "bad": [67, 69, 260], "log_dir": [67, 122, 125, 127, 147], "reduce_lr_on_plateau": [67, 125, 129, 130, 135, 136, 137, 141, 144, 146, 147, 149, 150, 153, 156, 258], "25": [67, 81, 84, 86, 89, 91, 125, 129, 135, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 161, 236, 243, 251, 258, 259, 260, 261, 264, 266], "patienc": [67, 125, 129, 130, 135, 136, 137, 141, 144, 146, 147, 149, 150, 153, 156, 258], "train_callback": [67, 125, 130, 132, 133, 137, 143, 145, 147, 148, 150, 151, 254, 260], "lr_schedul": [67, 125, 135, 144, 146, 152, 160, 161, 262], "early_stop": [67, 125, 129, 130, 135, 136, 137, 141, 144, 146, 147, 149, 150, 152, 153, 156, 258], "supported_op": [67, 69, 125, 129, 130, 131, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 258, 260, 266, 267], "representative_dataset": [67, 69, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 254, 258, 260, 266, 267], "strongli": [67, 258], "wherea": 67, "rock_paper_scissors_v1": [67, 136], "rock": [67, 136, 142, 153, 240, 244, 247, 248, 249, 252], "paper": [67, 96, 99, 100, 128, 136, 142, 153, 240, 244, 247, 248, 249, 252], "scissor": [67, 136, 142, 153, 240, 244, 247, 248, 249, 252], "96": [67, 109, 110, 128, 130, 131, 137, 143, 144, 145, 147, 148, 150, 151, 152, 161, 243, 244, 247, 252, 257, 258, 259, 260, 261, 264, 267, 268], "robust": [67, 144, 146, 149, 152, 258, 259, 260, 261, 265], "unknown_class_percentag": [67, 81, 89, 91, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156], "silence_class_percentag": [67, 81, 91, 129, 135, 144, 146, 149, 152, 156], "offset_rang": [67, 81, 129, 135, 144, 146, 149, 152, 156], "trim_threshold_db": [67, 80, 81, 83, 129, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 261], "noise_color": [67, 81, 129, 135, 144, 146, 149, 152, 156], "bg_noise_rang": [67, 81, 129, 135, 144, 146, 149, 152, 156], "bg_noise_dir": [67, 81, 129, 135, 144, 146, 149, 152, 156], "_background_noise_": [67, 103, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 160, 261], "rotation_rang": [67, 86, 134, 136, 141, 153, 158, 160, 161, 258], "35": [67, 128, 130, 134, 136, 137, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 160, 161, 243, 258, 259, 260, 261, 264], "contrast_rang": [67, 86, 136, 141, 153, 160, 258], "50": [67, 96, 100, 106, 114, 115, 119, 128, 136, 137, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 155, 157, 158, 160, 161, 243, 258, 259, 260, 261, 264, 266], "70": [67, 136, 141, 144, 145, 148, 149, 150, 151, 152, 243, 260, 261, 264], "gauss": [67, 86, 136, 141, 153, 258], "poisson": [67, 86, 136, 141, 153, 258], "horizontal_flip": [67, 86, 134, 136, 141, 153, 158, 161, 258], "vertical_flip": [67, 86, 134, 136, 141, 153, 258], "basic_tf_dataset_exampl": 67, "image_tf_dataset": [67, 70], "audio_tf_dataset": [67, 143, 145, 147, 148, 150, 151], "evaluateautoencodermixin": [67, 131, 157, 162], "idea": [67, 70, 74, 141, 144, 145, 146, 147, 149, 150, 152, 257, 258, 260, 261, 262], "conv1d_exampl": 67, "siamese_contrast": 67, "tflite_micro_magic_wand": [67, 241], "tinyml": [67, 140, 157, 158, 160, 161, 241, 261], "keyword_spot": [67, 241, 247, 251, 252], "visual_wake_word": [67, 241, 256], "trainabl": [68, 152, 247, 251, 252, 256, 258, 260, 261, 262], "slightli": [68, 144, 146, 149, 152, 264, 265], "child": 69, "sometim": [69, 250, 258, 260], "restart": [69, 70, 103, 256], "bias": [70, 127, 240, 241, 258], "api_doc": [70, 125, 130, 132, 133, 137, 144, 146, 147, 149, 150, 152, 153, 254, 258], "51": [70, 129, 130, 137, 143, 144, 145, 147, 148, 149, 150, 151, 152, 243, 248, 249, 258, 260, 261, 264], "stat": [70, 86, 130, 137, 143, 145, 147, 148, 150, 151, 162, 164, 260], "bottleneck": [70, 128, 256, 260], "weboag": 70, "n": [70, 86, 123, 125, 129, 130, 131, 137, 141, 143, 145, 147, 148, 150, 151, 155, 213, 216, 217, 231, 241, 243, 245, 249, 266, 268], "forward": [70, 176, 192, 208, 229, 259, 266], "constrain": 71, "seamlessli": [71, 242, 256], "appear": [71, 72, 89, 143, 144, 145, 148, 151, 215, 229, 252, 256, 259], "had": [71, 173, 256], "protocol": [71, 177, 193], "scope": [71, 256, 258, 266], "openssh": 71, "upgrad": [71, 74, 231, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 257, 258, 260, 261, 266, 268], "consist": [71, 114, 115, 119, 128, 145, 239, 256, 258, 260, 267], "public": [71, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 137, 143, 161, 266], "resid": [71, 81, 86, 256], "past": [71, 74, 254, 256, 260, 268], "anywher": [71, 255, 256], "keygen": [71, 256], "ed25519": [71, 256], "id_my_kei": 71, "my_kei": 71, "prioriti": 71, "my_serv": [71, 77], "remote_dir": [71, 77], "domain": 71, "145": [71, 143, 144, 152], "243": [71, 148, 264], "23": [71, 100, 135, 139, 141, 143, 144, 145, 148, 151, 152, 153, 161, 164, 243, 258, 260, 261, 264, 266], "222": [71, 77], "four": [71, 103, 104, 145, 152, 240, 243, 258, 262, 267], "ssh3": 71, "34567": 71, "2222": 71, "filepath": [71, 86, 125, 144, 149], "id_myserv": 71, "identityfil": 71, "key_filenam": [71, 77], "merg": [71, 231, 258, 260], "overwrit": [71, 125, 127, 186, 192, 194], "prod_env": 71, "cuda_devic": 71, "pipe": [71, 75], "csv": [71, 131, 164, 265, 267], "glob": [71, 127], "patch": 71, "wildcard": 71, "upload_fil": [71, 77], "bash": [71, 257], "startup_cmd": [71, 77, 255, 256], "mylib": 71, "7zip": [71, 256], "retlavi": 71, "download_fil": [71, 77], "shutdown_cmd": [71, 77], "curl": [71, 77], "f": [71, 77, 81, 84, 123, 128, 129, 130, 131, 134, 135, 136, 137, 141, 143, 145, 147, 148, 149, 150, 151, 153, 155, 175, 177, 192, 194, 213, 216, 217, 228, 229, 232, 238, 243, 244, 245, 247, 248, 249, 251, 252, 257, 258, 260, 261, 265, 266, 268], "sync_local_mltk": 71, "ssh_remote_dir": [71, 124], "ssh_create_venv": [71, 124], "ssh_environ": [71, 124, 147, 150], "ssh_startup_cmd": [71, 124], "ssh_upload_fil": [71, 124, 147, 150], "ssh_download_fil": [71, 124, 147, 150], "ssh_shutdown_cmd": [71, 124], "echo": 71, "config_path": [71, 77], "create_venv": [71, 77, 256], "ssh_config": [71, 77], "joe": [71, 77], "id_my_serv": [71, 77], "cuda_visible_devic": [71, 77, 258, 260, 261], "dev_env": [71, 77], "libsndfile1": [71, 77, 256], "custom_log": [71, 77], "overridden": [71, 115, 153], "vast_ai": [71, 256], "ssh6": [71, 256], "31521": 71, "stricthostkeycheck": 71, "sub": [71, 77, 89, 91, 103, 114, 115, 116, 117, 119, 123, 143, 145, 147, 148, 151, 209, 216, 217, 219, 243, 258, 260], "ssh5": 71, "23452": 71, "immedi": [71, 143, 145, 147, 148, 150, 151, 209, 224, 230, 239], "until": [71, 114, 115, 116, 117, 118, 119, 125, 127, 233, 239, 258], "finish": [71, 114, 115, 116, 117, 118, 119, 120, 125, 213, 256, 259, 268], "viewer": [72, 252], "markdown": 73, "inlin": [73, 258, 260], "offici": 73, "palett": 73, "shift": [73, 86, 181, 184, 189, 205, 260], "enter": [73, 256, 268], "cell": [73, 74, 145, 206, 243, 267], "ipykernel": 73, "leverag": [73, 74, 147, 150, 152, 241, 262], "As": [73, 137, 139, 141, 143, 254, 256, 257, 258, 259, 260, 261, 263, 264, 266, 267, 268], "account": [73, 74, 254, 255, 259, 260, 264, 267, 268], "signup": [73, 74], "email": [73, 74, 255, 256], "gmail": [73, 74], "proper": 74, "highli": [74, 260], "fastest": 74, "pip3": [74, 242], "speedup": [74, 230], "caus": [74, 122, 249, 260, 265, 266, 268], "colaboratori": 74, "semicolon": 75, "colon": 75, "cach": [75, 192, 249], "te": [75, 115], "lambda": [75, 85, 133, 139, 141, 145, 148, 150, 151, 213, 260, 267, 268], "temporari": [75, 229], "numpi": [75, 80, 81, 83, 85, 86, 91, 106, 107, 108, 114, 115, 119, 129, 130, 131, 132, 133, 134, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 176, 192, 243, 249, 254, 266], "19": [75, 129, 135, 139, 143, 144, 145, 147, 148, 150, 151, 152, 158, 161, 243, 258, 260, 261, 264, 268], "tensorflow_prob": 75, "onnxruntim": [75, 266], "temp": [75, 219, 229, 245, 247, 248, 249, 251, 252, 266, 268], "brief": [76, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 258, 260], "concept": [76, 257, 258, 259, 260, 264], "programm": 76, "mltk_user_settings_path": [77, 229], "dev_model": 77, "production_model": 77, "efr32": 77, "serial_numb": [77, 229], "123432": 77, "usernam": [77, 229, 237, 256], "resolv": [77, 125], "serialno": 77, "ip_address": [77, 229], "kit": 78, "tflite_micro_acceler": [78, 219, 259], "efm32": 78, "giant": 78, "s1": [78, 141], "gg11": 78, "starter": 78, "thunderboard": 78, "sens": 78, "pro": [78, 268], "dbm": 78, "efr32xg28": 78, "ghz": 78, "radio": 78, "explor": 78, "read_audio_fil": [80, 83, 130, 143, 145, 147, 148, 150, 151, 243, 261], "return_sample_r": [80, 83, 130, 143, 145, 147, 148, 150, 151, 243, 261], "return_numpi": [80, 83, 85, 130, 143, 145, 147, 148, 150, 151, 243, 261], "kwarg": [80, 81, 84, 86, 89, 91, 114, 115, 119, 121, 122, 123, 128, 130, 131, 132, 133, 137, 139, 141, 143, 145, 147, 148, 150, 151, 155, 162, 164, 165, 170, 175, 176, 178, 179, 182, 186, 187, 192, 194, 195, 200, 203, 206, 212, 216, 217, 228, 230, 231, 254, 267], "mono": [80, 144, 149], "1d": [80, 81, 83, 86, 114, 115, 119, 134, 135, 153, 162, 258], "union": [80, 85, 91, 94, 116, 117, 118, 122, 126, 128, 139, 141, 162, 164, 166, 167, 168, 169, 176, 186, 192, 194, 208, 209, 212, 218, 219, 221, 228, 229, 230, 231, 233, 234, 236, 257], "write_audio_fil": [80, 130, 143, 145, 147, 148, 150, 151], "sample_r": [80, 81, 82, 130, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152], "timestamp": [80, 85, 127], "int16": [80, 83, 145, 186, 194, 243], "32768": [80, 83, 236, 259], "eager": [80, 85], "adjust_length": [80, 81, 83, 130, 143, 144, 145, 147, 148, 150, 151, 243, 261], "target_sr": [80, 83, 130, 143, 145, 147, 148, 150, 151, 261], "original_sr": 80, "out_length": [80, 81, 83, 130, 143, 144, 145, 147, 148, 150, 151, 243, 261], "offset": [80, 81, 83, 130, 139, 143, 144, 145, 147, 148, 150, 151, 181, 184, 189, 205, 243, 261], "zero": [80, 81, 89, 91, 96, 101, 103, 104, 123, 142, 143, 144, 145, 147, 148, 149, 150, 151, 181, 184, 189, 193, 198, 205, 216, 217, 224, 243, 249, 256, 261, 267], "crop": [80, 81, 141, 143, 144, 145, 147, 148, 149, 150, 259], "teh": [80, 254], "in_length": 80, "decibel": [80, 81], "send": [80, 81, 137, 223, 237, 238, 239, 255, 256, 258, 259, 260], "cast": [80, 81, 83], "magic": [80, 83, 154, 155], "micro_features_gener": [80, 83], "cc": [80, 83, 99, 100, 257, 259, 262], "l84": [80, 83], "parallel": [81, 91, 130, 137, 143, 145, 147, 148, 150, 151, 212, 219, 230, 256, 260, 261, 268], "imagedatagener": [81, 86, 119, 136, 153, 258], "except": [81, 86, 122, 143, 145, 147, 148, 150, 151, 228, 229, 231, 245, 261, 268], "asynchron": [81, 212, 238, 239], "multiprocess": [81, 86], "multi": [81, 86, 99, 125, 231, 258, 259], "futur": [81, 127, 186], "concurr": 81, "flow_from_directori": [81, 86], "a0": 81, "get_batch_funct": [81, 82, 86, 87, 144, 149], "noaug_preprocessing_funct": [81, 82, 86, 87, 144], "random": [81, 83, 86, 89, 99, 103, 116, 117, 130, 137, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 157, 243, 258, 261, 262], "trim": [81, 103, 139, 143, 144, 145, 147, 148, 150], "sample_length_second": [81, 135], "frontend_en": [81, 82, 114, 135, 144], "2d": [81, 83, 86, 114, 115, 119, 128, 130, 143, 147, 148, 150, 151, 162, 243, 257, 258, 259, 260, 261], "postprocessing_funct": [81, 82, 135, 144], "samplewise_cent": [81, 86, 90, 129, 135, 136, 141, 144, 146, 149, 152, 153, 156, 258], "samplewise_std_norm": [81, 86, 90, 129, 135, 136, 141, 144, 146, 149, 152, 153, 156, 258], "unus": [81, 89, 91], "_silence_": [81, 91, 129, 144, 146, 149, 152, 156, 251, 262, 264], "spawn": [81, 86, 260], "thread": [81, 212, 226, 230, 239], "max_batches_pend": [81, 86, 129, 134, 135, 136, 141, 144, 146, 149, 152, 153, 156, 157, 158, 160, 161, 258], "queue": [81, 86], "get_batches_of_transformed_sampl": [81, 86], "batch_index": [81, 86, 144, 149], "batch_x": [81, 86, 141, 144, 149, 192], "batch_i": [81, 86, 141, 144, 149, 192], "sample_length": [81, 83, 84, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152], "librosa": [81, 143, 144, 145, 147, 148, 149, 150, 151, 157], "my_processing_func": [81, 86, 230], "class_id": [81, 86, 132, 133, 143, 144, 145, 147, 148, 149, 150, 151, 254, 261], "batch_class_id": [81, 86], "batch_filenam": [81, 86], "processed_x": [81, 86], "norm": [81, 206, 265], "divid": [81, 86, 114, 115, 119, 255, 256, 257, 258, 259, 260, 261, 265, 268], "samplewise_normalize_rang": [81, 90], "validation_split": [81, 86, 114, 115, 119, 120, 129, 130, 131, 132, 133, 135, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 160, 161, 254, 258], "validation_augmentation_en": [81, 86, 129, 134, 135, 136, 141, 144, 146, 149, 152, 153, 156, 158, 258], "frontend_dtyp": [81, 82], "color": [81, 86, 106, 119, 257, 258, 262], "brown": 81, "pink": 81, "violet": 81, "noise_color_rang": 81, "min": [81, 90, 125, 131, 139, 141, 143, 145, 147, 150, 177, 181, 184, 189, 197, 205, 239, 266], "loud": 81, "speed_rang": [81, 129, 135, 144, 146, 149, 152, 156], "pitch_rang": [81, 129, 135, 144, 146, 149, 152, 156], "pitch": [81, 210, 211, 213, 216, 260, 268], "semiton": 81, "vtlp_rang": [81, 129, 144, 146, 149, 152, 156], "vocal": 81, "tract": 81, "perturb": 81, "loudness_rang": [81, 129, 135, 144, 146, 149, 152, 156], "decreas": [81, 125, 128, 129, 130, 136, 137, 144, 146, 147, 149, 150, 153, 156, 258, 259, 260, 261, 262, 264], "bg": 81, "bg_nois": [81, 144, 149], "ref": 81, "trimmed_audio": 81, "raw_audio": 81, "required_pad": 81, "len": [81, 83, 123, 131, 132, 133, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 155, 192, 213, 216, 217, 230, 239, 243, 254, 257, 258, 261, 266, 268], "pad_upto_index": 81, "uniform": [81, 83, 86, 114, 115, 119, 130, 143, 144, 145, 147, 148, 149, 150, 151, 261], "padded_audio": 81, "concat": [81, 139], "800": [81, 89, 91, 146], "disable_random_transform": 81, "audiofeaturegeneratoret": 81, "sample_shap": [81, 82, 135, 144, 149], "disable_gpu_in_subprocess": [81, 86, 91, 230], "add_channel_dimens": [81, 82], "__init__": [81, 82, 83, 84, 86, 87, 122, 123, 130, 137, 139, 143, 145, 147, 148, 150, 151, 162, 164, 167, 170, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 211, 212, 215, 216, 217, 223, 224, 226, 228, 230, 233, 235, 239], "adc": 81, "32": [81, 84, 86, 106, 120, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 243, 247, 251, 254, 256, 258, 259, 260, 261, 264, 265, 266, 267, 268], "shuffl": [81, 86, 89, 91, 114, 115, 116, 117, 119, 130, 133, 136, 137, 143, 145, 147, 148, 150, 151, 153, 212, 213, 258, 259, 268], "shuffle_index_dir": [81, 86], "seed": [81, 86, 89, 91, 99, 130, 133, 137, 143, 145, 147, 148, 150, 151, 212, 213, 261, 268], "follow_link": [81, 86, 89, 91, 103, 114, 119, 143, 145, 148, 151], "max_samples_per_class": [81, 86, 89, 91, 114, 119, 123, 130, 131, 137, 143, 145, 147, 148, 150, 151, 162], "list_valid_filenames_in_directory_funct": [81, 86, 89, 91, 143, 145, 148, 150, 151], "class_count": [81, 86, 89, 91, 114, 115, 119, 121, 130, 132, 133, 137, 143, 145, 147, 148, 150, 151, 254], "parallelaudiogener": 81, "subdirectori": [81, 86, 106, 107, 108, 114, 229, 258], "bmp": [81, 86], "ppm": [81, 86], "tif": [81, 86], "tree": [81, 86, 88, 93, 103, 111, 138, 140, 142, 143, 145, 148, 151, 154, 155, 156, 157, 158, 159, 160, 161, 163, 222, 245, 247, 248, 249, 251, 252, 260], "dog": [81, 86, 103, 106, 114, 115, 119, 120, 134, 158, 162, 257, 262, 266], "cat": [81, 86, 103, 106, 114, 115, 119, 120, 134, 158, 162, 257, 262, 266], "spars": [81, 86, 114, 119, 144], "hot": [81, 86, 114, 119, 130, 133, 137, 143, 145, 147, 148, 150, 151], "ident": [81, 86, 114, 119, 257, 260], "mainli": [81, 86, 114, 119, 123, 216, 217], "autoencod": [81, 86, 114, 119, 131, 157, 162], "yield": [81, 86, 132, 133, 141, 254, 266], "reus": [81, 86, 103, 114, 119], "maintain": [81, 86, 114, 119, 256, 265, 267], "symlink": [81, 86, 114, 119], "list_valid_filenames_in_directori": [81, 86, 89, 91, 103, 143, 145, 148, 150, 151], "base_directori": [81, 86, 89, 91, 103, 143, 145, 148, 151], "search_class": [81, 86, 89, 91, 103, 143, 145, 148, 151], "white_list_format": [81, 86, 89, 91, 103, 143, 145, 148, 151], "shuffle_index_directori": [81, 86, 89, 91, 103, 143, 145, 147, 148, 151], "directoryiter": [81, 86], "target_s": [81, 86, 87, 119, 141], "default_transform": [81, 86, 144, 149], "retrun": [81, 233], "get_random_transform": [81, 86, 144, 149], "configer": 81, "orignal_sr": [81, 144, 149], "whole_sampl": 81, "apply_transform": [81, 86, 144, 149], "keepdim": [81, 90, 139, 145, 243, 265, 267], "1e": [81, 86, 90, 135, 141, 143, 144, 145, 146, 148, 149, 151, 243, 260, 261, 265, 267], "diff": [81, 90], "ptp": [81, 90], "relat": [82, 86, 87, 103], "logic": [82, 87], "audio_data_gener": [82, 144, 149], "save_to_dir": [82, 86, 87, 134, 136, 141, 153], "save_prefix": [82, 86, 87], "save_format": [82, 86, 87, 141, 147, 150, 257], "class_indic": [82, 86, 87, 144, 149], "grai": [83, 139, 141, 258, 259, 260], "1200": [83, 84, 129, 143, 144, 152, 259, 264], "108": [83, 84, 143, 145, 243, 259, 260, 264], "original_sample_r": [83, 130, 143, 145, 147, 148, 150, 151, 261], "my_audio": 83, "resampl": [83, 86, 119, 130, 143, 145, 147, 148, 150, 151, 261], "orig_sr": [83, 130, 143, 145, 147, 148, 150, 151, 261], "squeez": [83, 141, 143, 145, 147, 148, 150, 151, 266], "axi": [83, 86, 130, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 243, 260, 261, 266, 267], "process_sampl": [83, 89, 91], "dimens": [83, 86, 130, 143, 145, 147, 148, 150, 151, 192, 193, 198, 243, 259, 260, 261, 264, 266], "window_size_length": 83, "window_step_length": 83, "n_featur": [83, 84], "n_channel": [83, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 198, 249], "activity_was_detect": 83, "spectrogram_shap": [84, 130, 143, 145, 147, 148, 150, 151, 261], "__new__": [84, 123, 175, 177, 193, 194, 201, 216, 217, 220], "item": [84, 143, 175, 192, 194, 213, 249, 258, 268], "fromkei": [84, 175, 194], "pop": [84, 175, 194], "unrepresent": [84, 123, 175, 194, 216, 217], "rais": [84, 86, 122, 123, 128, 141, 143, 145, 147, 148, 150, 151, 175, 177, 193, 194, 201, 210, 214, 216, 217, 232, 237, 257, 261], "keyerror": [84, 175, 194], "popitem": [84, 175, 194], "lifo": [84, 175, 194], "empti": [84, 89, 123, 130, 137, 143, 144, 145, 147, 148, 150, 151, 175, 194, 216, 217, 229, 231, 261, 266], "self": [84, 130, 131, 137, 139, 143, 144, 145, 147, 148, 149, 150, 151, 155, 177, 193, 220, 228, 231, 236, 242], "setdefault": [84, 175, 194], "insert": [84, 122, 123, 143, 145, 147, 148, 150, 175, 186, 194, 216, 217, 243], "present": [84, 96, 101, 123, 143, 145, 148, 151, 175, 194, 201, 210, 214, 216, 217, 258, 260, 261], "lack": [84, 175, 194], "05": [84, 130, 136, 141, 146, 147, 150, 153, 156, 160, 161, 247, 258, 260, 267], "80": [84, 129, 130, 135, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 160, 243, 245, 258, 260, 261, 264, 268], "21": [84, 129, 130, 131, 135, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 158, 160, 161, 243, 245, 247, 248, 252, 258, 260, 261, 264, 266, 268], "75": [84, 89, 91, 130, 143, 145, 147, 148, 149, 150, 151, 153, 243, 260, 261, 266], "trip": 84, "rhe": 84, "deep": [84, 99, 211, 253, 258], "read_image_fil": [85, 137], "target_channel": 85, "nativ": [85, 91, 141, 177, 193], "write_image_fil": [85, 130, 137], "auto_scal": 85, "foreground": 86, "threadpool": 86, "pool": [86, 91, 128, 130, 137, 143, 145, 147, 148, 150, 151, 196, 197, 212, 230, 256, 259], "featurewise_cent": 86, "boolean": [86, 114, 115, 119, 125, 128, 139, 186], "wise": [86, 145, 267], "featurewise_std_norm": 86, "zca_epsilon": 86, "epsilon": [86, 139, 143, 145, 148, 151, 260, 261], "zca": 86, "whiten": 86, "zca_whiten": 86, "degre": 86, "rotat": 86, "width_shift_rang": [86, 134, 136, 141, 153, 158, 160, 161, 258], "pixel": [86, 106, 108, 141, 258], "height_shift_rang": [86, 134, 136, 141, 153, 158, 160, 161, 258], "brightness_rang": [86, 136, 141, 153, 160, 258], "pick": [86, 144, 261], "bright": 86, "shear_rang": 86, "shear": 86, "intens": [86, 256, 258, 260], "angl": [86, 258], "clockwis": 86, "direct": [86, 125, 143, 147, 149, 150, 151], "zoom_rang": [86, 136, 141, 153, 160, 161, 258], "zoom": 86, "channel_shift_rang": 86, "fill_mod": [86, 141], "constant": [86, 141], "nearest": [86, 119], "reflect": [86, 99, 125, 139, 141, 257, 260], "boundari": [86, 123, 216, 217], "fill": [86, 123, 216, 217], "accord": [86, 125, 256], "thegiven": 86, "kkkkkkkk": 86, "abcd": 86, "cval": [86, 141], "aaaaaaaa": 86, "dddddddd": 86, "abcddcba": 86, "dcbaabcd": 86, "abcdabcd": 86, "flip": 86, "horizont": 86, "vertic": 86, "resiz": [86, 119, 134, 136, 137, 143, 145, 147, 148, 150, 151, 153, 157, 158, 160, 161, 258], "interpol": [86, 87, 119, 157], "reserv": [86, 123, 216, 217], "strictli": [86, 266], "enhanc": [86, 91], "contrast": [86, 138, 139, 141, 257], "tv": 86, "grei": 86, "gaussian": 86, "speckl": 86, "varianc": [86, 260], "random_transforms_en": 86, "256": [86, 134, 139, 141, 143, 144, 145, 146, 147, 148, 151, 152, 161, 258, 259, 264], "color_mod": [86, 87, 119, 141, 249], "batch_shap": [86, 87, 144, 149], "bilinear": [86, 119], "rgba": [86, 119], "bicub": [86, 119], "lanczo": [86, 119], "ham": [86, 119], "sample_weight": [86, 114, 115, 119], "rank": 86, "feed": [86, 259, 262], "miscellan": 86, "along": [86, 100, 107, 108, 145, 258, 260, 267], "pictur": 86, "prefix": [86, 91, 123, 125, 216, 217, 230, 254], "jpeg": [86, 143, 145, 147, 148, 150, 151, 258], "pdf": [86, 128, 157, 158, 160, 255, 261], "gif": 86, "form": [86, 114, 115, 119], "valueerror": [86, 123, 128, 201, 210, 214, 216, 217], "img_shap": 86, "transform_paramet": 86, "round": [86, 116, 117, 118, 260], "flow_from_datafram": 86, "datafram": 86, "x_col": 86, "y_col": 86, "weight_col": 86, "validate_filenam": 86, "ly": 86, "keras_flow_from_datafram": 86, "panda": 86, "multi_output": 86, "obtain": [86, 114, 115, 119, 125, 243, 255, 256, 259, 260, 265, 267], "attribut": [86, 87, 108, 114, 119, 122, 125, 167, 218, 228, 231, 236], "pil": 86, "newer": 86, "invalid": [86, 103, 128, 147, 150, 176], "legaci": [86, 266], "dataframeiter": 86, "random_transform": 86, "3d": [86, 130, 134, 143, 147, 148, 150, 151, 153, 258, 261], "signific": [86, 125, 177, 193, 256], "image_data_gener": 87, "data_format": 87, "list_dataset_directori": 89, "unknown_class_label": 89, "empty_class_percentag": 89, "empty_class_label": 89, "return_absolute_path": 89, "process_samples_funct": [89, 91, 143, 145, 147, 148, 151], "label_id": [89, 91], "class1": [89, 91], "sample1": [89, 91, 260, 268], "sample2": [89, 91, 260, 268], "sample9": [89, 91], "class2": [89, 91], "class3": [89, 91], "return_audio_data": [89, 91, 130, 143, 145, 147, 148, 150, 151], "sample_path": [89, 91, 143, 145, 147, 148, 151, 258], "split_file_list": [89, 143, 145, 147, 148, 151], "shuffle_file_list_by_group": [89, 143, 145, 148, 151], "group_callback": 89, "42": [89, 99, 130, 133, 137, 143, 144, 145, 147, 148, 150, 151, 152, 155, 186, 194, 213, 243, 249, 260, 261, 264, 268], "flat": [89, 114, 115, 119, 130, 137, 143, 145, 147, 148, 150, 151], "callabl": [89, 91, 116, 122, 128, 176, 208, 212, 228, 229, 230, 233, 234, 245, 246, 247, 250, 252], "load_audio_directori": [91, 130, 143, 145, 147, 148, 150, 151], "onehot_encod": [91, 130, 137, 143, 145, 147, 148, 150, 151], "return_audio_sample_r": 91, "onehot": 91, "datasetv2": 91, "load_image_directori": [91, 137], "return_image_data": [91, 137], "parallel_process": [91, 130, 137, 143, 145, 147, 148, 150, 151, 256, 259, 260], "n_job": [91, 130, 137, 143, 145, 147, 148, 150, 151, 212, 213, 230, 256, 259, 268], "job_batch_s": 91, "parallelprocess": 91, "env": [91, 230, 234], "numpy_funct": 91, "cannot": [91, 114, 115, 119, 123, 267], "nest": [91, 208, 230, 231], "job": [91, 144, 146, 149, 152, 212, 219, 230, 256, 268], "processpool": 91, "enable_numpy_behavior": [91, 137], "behavior": [91, 114, 115, 119], "reshap": [91, 119, 128, 129, 134, 135, 136, 139, 143, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 161, 200, 243, 245, 247, 248, 249, 251, 258, 260, 261, 266], "ravel": 91, "promot": 91, "ones": [91, 103, 123, 177, 193, 216, 217], "int32": [91, 129, 131, 133, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 186, 194, 243, 247, 248, 249, 251, 258, 260, 264, 266], "throw": [91, 231], "incompat": 91, "float64": [91, 186], "obei": 91, "rule": [91, 265], "capabl": [91, 268], "par": 91, "prepare_data": 93, "prepar": [93, 114, 119, 132, 133, 147, 150, 254, 266], "load_data": [93, 103, 106, 107, 108, 109, 110, 114, 119, 130, 132, 133, 134, 139, 141, 155, 158, 249, 254, 258, 266], "seq_length": [93, 155], "dataload": 93, "mixkit": [94, 143, 147, 150], "co": [94, 143, 147, 150, 260], "sound": [94, 99, 128, 143, 145, 147, 148, 150, 151, 157, 259, 260, 261, 268], "sfxfree": 94, "download_url": [94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 131, 135, 143, 147, 150, 209, 243], "sfx": [94, 143, 147, 150], "crowd": [94, 143, 147, 150], "pub": [94, 143, 147, 150, 256], "360": [94, 135, 143, 144, 145, 147, 149, 150, 152, 155, 156, 157, 260], "big": [94, 143, 147, 150, 177, 193], "talk": [94, 143, 147, 150], "364": [94, 143, 145, 147, 150], "restaur": [94, 143, 147, 150, 259], "ambienc": [94, 143, 147, 150], "444": [94, 143, 147, 150], "keyboard": [94, 143, 147, 261], "1386": [94, 143, 147], "offic": [94, 143, 147, 259], "447": [94, 143, 147], "hotel": [94, 143, 147], "lobbi": [94, 143, 147], "dine": [94, 143, 147], "area": [94, 143, 147, 162], "453": [94, 143, 147], "url": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 135, 137, 141, 143, 147, 149, 150, 151, 157, 160, 161, 209, 243, 245, 247, 248, 249, 251, 252, 256, 257, 266], "dest_dir": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 122, 143, 147, 151, 208, 209], "sample_rate_hertz": [94, 95, 96, 145, 148, 151], "logger": [94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 167, 170, 176, 209, 219, 220, 230, 231, 234, 254, 257], "mix": [95, 103, 145, 148, 151, 260, 261], "mltk_asset": [95, 109, 110, 135, 143, 147, 149, 150, 151, 157, 160], "brd2601_background_audio": [95, 143, 147, 150], "7z": [95, 97, 98, 100, 101, 102, 104, 105, 109, 110, 143, 147, 149, 150, 151, 157, 160, 258], "verify_sha1": [95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 135, 209], "3069a85002965a7830c660343c215edd4fae39c6": [95, 143, 147, 150], "sha1": [95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 209], "clean_dest_dir": [95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 143, 145, 147, 148, 151, 208, 209], "karoldvl": 96, "obstacl": 96, "research": [96, 100, 128, 143, 145, 148, 151, 161, 259, 260], "concentr": 96, "scarciti": 96, "suitabl": [96, 123, 216, 217, 236, 256, 258], "publicli": [96, 101, 259], "tri": 96, "annot": 96, "000": [96, 100, 106, 107, 108, 131, 139, 156, 244, 251, 260, 266], "abund": 96, "unifi": 96, "250": [96, 245, 248, 260], "unlabel": 96, "auditori": 96, "excerpt": 96, "freesound": 96, "human": [96, 103, 145, 148, 150, 151, 236, 260, 261, 268], "baselin": [96, 100, 125, 139, 164, 175, 257, 260], "deriv": [96, 108], "mel": 96, "cepstral": 96, "cross": [96, 130, 133, 137, 143, 145, 147, 148, 150, 151], "piczak": 96, "proceed": 96, "23rd": 96, "acm": 96, "confer": [96, 147, 150, 259], "multimedia": 96, "pp": 96, "1015": 96, "1018": 96, "karolpiczak": 96, "a5e0c7451e12a751302b32283f1f039cbd111356": 96, "160bb1269418240f9d2bb86eee598ffbd882ca89": 96, "dest_subdir": [96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 135, 137, 149, 150, 157, 160, 161, 209, 256, 266], "synthet": [97, 98, 102, 104, 105, 143, 145, 147, 148, 151, 212, 213, 222, 240, 261], "16khz": [97, 98, 100, 101, 102, 104, 105, 143, 144, 145, 147, 148, 149, 150, 151, 152, 212, 260, 261, 264], "synthetic_direction_command": 97, "9e9295b4eda3d9da9cd242063c1646b15908da55": 97, "generate_dataset": [97, 98, 102, 104, 105], "out_dir": [97, 98, 102, 104, 105, 212, 213, 268], "sl_synthetic_hey_gecko2": 98, "69064ca13f7c4c1e20b7672162e204851c64aef6": 98, "heygecko": 98, "environment": [99, 260], "ir": [99, 145, 148, 266], "traer": 99, "mcdermott": 99, "waveform": 99, "That": [99, 103, 255, 256], "instantan": 99, "pressur": 99, "damp": 99, "scatter": 99, "convolv": [99, 145, 148, 260], "emit": 99, "techniqu": [99, 260, 267, 268], "commonli": [99, 265, 268], "problem": [99, 128, 144, 146, 149, 152, 153, 258, 260, 265, 268], "style": [99, 268], "spoken": [99, 100, 103, 130, 143, 144, 146, 152, 259, 260, 264], "reverber": 99, "acoust": 99, "BY": [99, 100, 103, 259, 262], "creativ": [99, 103, 108], "2016": 99, "natur": [99, 123, 145, 216, 217, 267, 268], "perceptu": 99, "mcdermottlab": 99, "edu": [99, 106, 134, 158], "reverb": 99, "irmaudio": 99, "de04f5be419c12f4f847f65d7ef8e2356b73aa38": 99, "apply_ir": 99, "load_dataset": [99, 114, 115, 119, 121, 123, 130, 131, 134, 135, 136, 137, 139, 141, 143, 145, 147, 148, 150, 151, 153, 155], "dataset_dir": [99, 130, 137, 143, 145, 147, 148, 150, 151, 243, 249, 258, 261], "apply_random_ir": [99, 145, 148], "ir_sampl": 99, "appyli": 99, "multilingu": [100, 143, 259, 260], "polici": [100, 127], "english": [100, 101, 103, 268], "corpu": [100, 260], "grow": [100, 259, 260], "languag": [100, 101, 103, 130, 144, 146, 152, 212, 215, 259, 260, 264, 267], "academ": [100, 259], "commerci": [100, 242, 255, 259], "term": [100, 101, 108, 177, 193, 256, 259, 267], "licens": [100, 103, 107, 256, 259], "under": [100, 103, 107, 108, 114, 115, 119, 162, 259], "340": 100, "million": [100, 268], "hour": [100, 256, 258, 260], "autom": [100, 255, 265, 267], "align": [100, 103, 125, 254], "analysi": [100, 265, 267], "outlier": [100, 257], "download_url1": 100, "mlcommons_keywords_subset_part1": [100, 143], "verify_url1_sha1": 100, "6f515d8247e2fee70cd0941420918c8fe57a31e8": [100, 143], "download_url2": 100, "mlcommons_keywords_subset_part2": [100, 143], "verify_url2_sha1": 100, "7816f5ffa1deeafa9b5b3faae563f44198031796": [100, 143], "commonvoic": 101, "mozilla": [101, 143, 259], "creativecommon": 101, "publicdomain": 101, "peopl": [101, 103, 143, 257, 258, 259, 260], "volunt": 101, "contributor": 101, "around": [101, 103, 137, 139, 254, 265, 267], "compani": 101, "stifl": 101, "innov": 101, "underrepres": 101, "speaker": [101, 103, 268], "colour": 101, "women": 101, "lgbtqia": 101, "technologi": [101, 268], "equal": [101, 114, 115, 119, 123, 129, 136, 139, 144, 146, 149, 153, 156, 164, 177, 193, 216, 217, 258, 266], "everyon": [101, 103], "mobilis": 101, "everywher": 101, "common_voice_subset": [101, 143], "ce424afd5d9b754f3ea6b3a4f78304f48e865f93": [101, 143], "sl_synthetic_on_off": 102, "b20697b82f883e4dc5e0afc4b7dc950d3339e703": 102, "catalog": 103, "varieti": [103, 128, 268], "cover": [103, 146, 260], "arxiv": [103, 128, 156, 157, 158, 160], "ab": [103, 123, 130, 137, 139, 156, 216, 217, 257], "1804": [103, 156], "03209": [103, 156], "Its": 103, "speech_commands_v0": [103, 160], "02": [103, 129, 134, 135, 139, 144, 145, 146, 152, 155, 156, 157, 158, 160, 161, 260], "tar": [103, 106, 137, 160, 161, 208, 256, 268], "gz": [103, 106, 137, 160, 161, 208, 256, 268], "01": [103, 130, 141, 145, 147, 150, 236, 257, 258], "august": 103, "727": 103, "105": [103, 145, 148, 243, 245, 248, 260, 268], "829": 103, "april": 103, "11th": 103, "2018": 103, "crowdsourc": 103, "aiyproject": 103, "withgoogl": 103, "open_speech_record": 103, "contribut": [103, 129, 136, 144, 146, 149, 153, 156, 258, 267, 268], "enlarg": [103, 129, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161], "goal": [103, 125, 256, 257], "gather": 103, "speak": [103, 143, 210, 211, 217, 259, 268], "sentenc": [103, 143], "cours": [103, 259, 262], "five": [103, 104, 145, 152, 243, 262, 267], "minut": [103, 232, 256], "twenti": 103, "six": [103, 104, 145, 152, 243, 262, 267], "seven": [103, 104, 145, 152, 243, 262, 267], "eight": [103, 104, 145, 152, 243, 262, 267], "nine": [103, 104, 142, 145, 152, 243, 262, 267], "distinguish": [103, 264], "unrecogn": 103, "ten": [103, 243], "auxiliari": 103, "said": [103, 261], "bed": 103, "bird": [103, 106, 158, 266], "happi": [103, 268], "hous": 103, "marvin": 103, "sheila": 103, "wow": 103, "kept": [103, 128], "particip": 103, "ag": [103, 256], "gender": 103, "assign": [103, 152, 256, 258], "stabl": 103, "though": [103, 135, 256, 264], "utter": 103, "3cfc6b3a_nohash_2": 103, "3cfc6b3a": 103, "third": [103, 114, 115, 119, 123, 130, 142, 216, 217, 256], "nohash": 103, "partit": [103, 123, 216, 217], "repetit": 103, "unrealist": 103, "optimist": 103, "uncontrol": 103, "room": 103, "privaci": [103, 141, 257], "didn": 103, "stipul": 103, "qualiti": [103, 257, 259, 260, 264, 265, 267, 268], "encount": [103, 257, 258, 260, 266], "robot": [103, 268], "don": [103, 157, 164, 256], "equip": 103, "ogg": 103, "vorbi": 103, "littl": [103, 125, 153, 177, 193, 254, 256, 258, 259, 268], "endian": 103, "wave": [103, 156], "extract_loudest_sect": 103, "screen": 103, "incorrect": 103, "arrang": 103, "cope": 103, "noisi": 103, "realist": [103, 268], "readm": [103, 156, 266], "md": [103, 128, 156, 161], "cite": 103, "articl": 103, "speechcommandsv2": 103, "author": [103, 242, 255], "warden": 103, "titl": [103, 123, 141, 216, 217, 257], "vocabulari": 103, "recognit": [103, 267], "journal": 103, "archiveprefix": 103, "eprint": 103, "primaryclass": 103, "cl": [103, 201, 231], "scienc": 103, "year": 103, "month": [103, 256, 268], "apr": 103, "massiv": 103, "thank": [103, 268], "donat": 103, "grate": 103, "couldn": 103, "put": [103, 119, 143, 145, 147, 148, 150, 151, 186, 194, 258, 259], "billi": 103, "rutledg": 103, "rajat": 103, "monga": 103, "raziel": 103, "alvarez": 103, "brad": 103, "krueger": 103, "barbara": 103, "petit": 103, "gursheesh": 103, "kour": 103, "aii": 103, "team": [103, 140, 154, 255], "pete": 103, "petewarden": 103, "4264eb9753e38eef2ec1d15dfac8441f09751ca9": 103, "mltk_cache_dir": [103, 209, 229], "load_clean_data": [103, 145, 147, 148, 150, 151], "v2_clean": 103, "clean_in_plac": 103, "invalid_sampl": 103, "_clean": 103, "accident": 103, "stabil": 103, "_nohash_": [103, 143, 145, 148, 151], "bobby_nohash_0": 103, "bobby_nohash_1": 103, "sl_synthetic_ten_digit": 104, "a716e86a27fb5255d2a3bff4441dcd5b4044ea3a": 104, "sl_synthetic_yes_no": 105, "abf31f3444f17e94b5bded4d4e2a001b5a6cb1b7": 105, "32x32": 106, "categori": [106, 107], "cifar": [106, 134, 158], "homepag": [106, 108], "airplan": [106, 158, 266], "automobil": [106, 158, 266], "deer": [106, 158, 266], "frog": [106, 158, 266], "hors": [106, 158, 266], "ship": [106, 158, 266], "truck": [106, 158, 262, 266], "x_train": [106, 107, 108, 119, 132, 133, 134, 139, 158, 254], "y_train": [106, 107, 108, 119, 132, 133, 134, 139, 158, 254], "x_test": [106, 107, 108, 119, 132, 133, 134, 139, 158, 254, 266], "y_test": [106, 107, 108, 119, 132, 133, 134, 139, 158, 254, 266], "assert": [106, 107, 108, 135, 143, 145, 148, 151, 249, 266], "50000": 106, "10000": [106, 107, 108, 135, 143, 148, 151, 213, 260, 266, 268], "toronto": [106, 134, 158], "kriz": [106, 134, 158], "6d958be074577803d12ecdefd02955f39262c83c16fe9348329d7fe0b5c001c": 106, "load_data_directori": [106, 107, 108], "60": [107, 108, 129, 132, 133, 136, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 160, 161, 232, 239, 243, 245, 254, 258, 260, 261, 264, 266, 268], "28x28": [107, 108], "shirt": 107, "trouser": 107, "pullov": 107, "dress": 107, "coat": 107, "sandal": 107, "sneaker": 107, "bag": 107, "ankl": 107, "boot": 107, "60000": [107, 108, 139, 145], "28": [107, 108, 132, 133, 137, 139, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 158, 161, 243, 254, 258, 259, 260, 261, 264], "copyright": [107, 108], "held": [107, 242], "zalando": 107, "se": 107, "mit": [107, 145, 148, 260], "tshirt": 107, "flash_mnist": 107, "digit": [108, 123, 216, 217, 243], "yann": 108, "lecun": 108, "corinna": 108, "cort": 108, "nist": 108, "alik": 108, "storag": [108, 131, 256], "googleapi": [108, 131, 268], "npz": 108, "731c5ac602752760c8e48fbffcf8c3b850d9dc2a2aedcf2cc48468fc17b673d1": 108, "hand": [109, 110, 136, 153, 240, 247, 252, 257, 258], "gestur": [109, 110, 136, 153, 240, 247, 252, 258], "1ce48f66f7ff999958550147d75aba8da185280c": 109, "input_height": [109, 110, 134, 157, 158], "input_width": [109, 110, 134, 158], "input_depth": [109, 110, 134, 158], "depth": [109, 110, 133, 182, 183, 184, 229, 259, 261, 266], "96x96x1": [109, 110, 136, 153, 247, 249], "77ed1793be7871dcaa79d935b39ba4d23a28e2c3": 110, "tflite_model": [112, 122, 123, 139, 141, 164, 168, 190, 192, 194, 243, 247, 249, 251, 266], "tflite_model_paramet": 112, "cli": [112, 122, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 254], "alia": [113, 211, 220], "datset": [114, 141], "shuffle_dataset_en": [114, 119, 136, 153, 258], "audio_class": 114, "audio_input_shap": 114, "hertz": [114, 164], "class_weight": [114, 115, 119, 120, 129, 130, 132, 133, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 254, 258, 259], "balanc": [114, 115, 119, 120, 129, 130, 132, 133, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 254, 256, 257, 258], "goat": [114, 115, 119, 120, 162, 257], "Or": [114, 115, 119, 242], "pai": [114, 115, 119, 256, 268], "attent": [114, 115, 119], "n_sampl": [114, 115, 119, 130, 137, 139, 143, 145, 147, 148, 150, 151, 162, 266], "bincount": [114, 115, 119, 132, 133, 254], "datagen_context": [114, 119], "context": [114, 119], "audiofeaturegeneratorsettingsset": 114, "get_datagen_cr": [114, 119], "get_shuffle_index_dir": [114, 119], "parallelimagegener": [114, 119, 136, 153], "reproduc": [114, 119, 127, 130, 137, 143, 145, 147, 148, 150, 151, 258, 261], "henc": [114, 119, 243], "loaded_subset": [114, 115, 119], "tempor": [114, 115, 119, 128, 143, 145, 148, 151, 259, 260, 261], "sequence_length": [114, 115, 119], "timestep": [114, 115, 119], "special": [114, 115, 119, 141, 149, 150, 151, 257, 261], "deal": [114, 115, 119, 256], "hdf5": [114, 115, 119, 147, 150], "chunk": [114, 115, 119], "steps_per_epoch": [114, 115, 119, 155], "declar": [114, 115, 116, 117, 118, 119], "exhaust": [114, 115, 116, 117, 118, 119], "infinit": [114, 115, 119], "summarize_dataset": [114, 115, 119, 121, 123, 131, 143, 145, 148, 151, 155], "unload_dataset": [114, 115, 119, 121, 123, 130, 134, 136, 137, 139, 141, 143, 145, 147, 148, 150, 151, 153], "unload": [114, 115, 119, 121, 130, 137, 143, 145, 147, 148, 150, 151, 176, 243], "validation_batch_s": [114, 115, 119], "unspecifi": [114, 115, 119], "validation_data": [114, 115, 119, 121, 130, 131, 133, 137, 139, 141, 143, 145, 147, 148, 150, 151, 155], "fact": [114, 115, 119, 268], "dropout": [114, 115, 119, 128, 130, 132, 133, 134, 135, 145, 146, 147, 149, 150, 153, 155, 156, 251, 254, 258, 260], "x_val": [114, 115, 119, 139], "y_val": [114, 115, 119, 139], "val_sample_weight": [114, 115, 119], "validation_step": [114, 115, 119, 155], "eg": [114, 115, 119], "validation_freq": [114, 115, 119], "collections_abc": [114, 115, 119], "1st": [114, 115, 119], "2nd": [114, 115, 119], "10th": [114, 115, 119], "apart": [114, 115, 119], "draw": [114, 115, 119], "unpack": [114, 115, 119], "invers": [114, 115, 119], "parallel_gener": [114, 119, 129, 134, 135, 136, 141, 144, 146, 149, 152, 153, 156, 157, 158, 160, 161, 258], "validation_datagen": [114, 119], "mltkdataset": [115, 130, 137, 143, 145, 147, 148, 150, 151], "my_dataset_load": [115, 132, 133, 134, 158, 254], "definit": [115, 125, 258], "caller": 115, "scoring_funct": [116, 162], "eval_class": 116, "eval_aug": [116, 117], "datageneratordatasetmixin": [116, 117], "eval_custom_funct": [116, 117, 118, 139, 141, 257], "my_custom_eval_funct": [116, 117, 118], "built_model": [116, 117, 118, 139, 141, 166, 257], "evaluationresult": [116, 117, 118, 123, 139, 141, 162, 257], "isinst": [116, 117, 118, 139, 141, 249], "overall_accuraci": [116, 117, 118, 139, 162], "calculate_accuraci": [116, 117, 118], "eval_max_samples_per_class": [116, 117], "eval_shuffl": [116, 117], "eval_steps_per_epoch": [116, 117, 118, 155], "get_scoring_funct": 116, "image_class": 119, "image_input_shap": 119, "snippet": [120, 149, 213, 225, 232, 238, 260, 261, 266, 267], "basic_exampl": [120, 121, 133], "mltk_core": [120, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 254, 255, 260, 263, 267], "__name__": [120, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 254, 263], "__main__": [120, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 254, 263], "portion": [121, 130, 132, 133, 137, 143, 145, 147, 148, 150, 151, 254, 266], "purpos": [121, 130, 132, 133, 137, 141, 143, 145, 147, 148, 150, 151, 242, 254, 256, 257, 258, 260, 261, 264, 266, 268], "static": [121, 123, 176, 178, 179, 181, 182, 184, 185, 186, 187, 189, 191, 192, 194, 195, 197, 199, 200, 201, 203, 205, 206, 212, 216, 217, 220, 233, 239, 260], "summarize_class_count": [121, 143, 145, 148, 151], "fore": 122, "model_script_path": 122, "get_attribut": 122, "regist": [122, 123, 134, 136, 139, 153, 176, 216, 217], "model_specification_path": [122, 147, 150], "create_log_dir": [122, 130, 134, 136, 137, 141, 143, 145, 147, 148, 150, 151, 153, 259], "suffix": [122, 123, 216, 217, 229], "delete_exist": [122, 134, 136, 141, 153], "create_logg": 122, "parent": [122, 228], "h5_log_dir_path": [122, 141, 147, 150, 257], "tflite_log_dir_path": 122, "unquantized_tflite_log_dir_path": 122, "keras_custom_object": [122, 139, 141, 143, 145, 148, 151, 260], "serialization_and_sav": 122, "test_mode_en": [122, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 254], "enable_test_mod": 122, "add_event_handl": [122, 123, 145, 267], "handler": [122, 123, 228, 267], "_raise_except": 122, "mltkmodelev": [122, 145, 267], "my_event_handl": 122, "collid": 122, "trigger_ev": 122, "add_archive_dir": 122, "base_dir": [122, 229, 249], "create_new": 122, "add_archive_fil": 122, "add_model_parameter_populate_callback": 122, "add_tflite_metadata_entri": 122, "tflitemodelmetadataentri": 122, "archive_path": [122, 123, 208, 209, 268], "mdk": 122, "check_archive_file_is_writ": 122, "throw_except": [122, 224, 231], "writabl": 122, "deserialize_tflite_metadata": 122, "get_archive_dir": 122, "get_archive_fil": [122, 147, 150], "get_tflite_metadata_summari": 122, "include_tag": 122, "exclude_tag": 122, "h5_archive_path": [122, 129, 152, 262], "populate_model_paramet": 122, "tflitemodelparamet": [122, 243, 249], "serialize_tflite_metadata": 122, "metedata": 122, "tag": [122, 129, 131, 134, 135, 136, 139, 141, 144, 146, 149, 152, 153, 155, 156, 157, 158, 160, 161, 192, 194, 258], "set_model_paramet": 122, "paremet": 122, "tflite_archive_path": [122, 129, 243], "tflite_metadata_entri": 122, "stage": 123, "before_model_load": 123, "after_model_load": 123, "before_load_dataset": 123, "after_load_dataset": 123, "before_unload_dataset": 123, "after_unload_dataset": 123, "summary_dict": 123, "train_startup": 123, "post_process": [123, 162, 164, 167], "before_build_train_model": 123, "after_build_train_model": 123, "populate_train_callback": 123, "keras_callback": 123, "before_train": 123, "fit_kwarg": 123, "after_train": 123, "training_histori": [123, 167], "before_save_train_model": [123, 145, 267], "keras_model_dict": [123, 145, 267], "keas_model": 123, "kwd": [123, 177, 193, 216, 217], "capit": [123, 216, 217], "casefold": [123, 216, 217], "caseless": [123, 216, 217], "fillchar": [123, 216, 217], "occurr": [123, 201, 210, 214, 216, 217], "substr": [123, 216, 217], "notat": [123, 216, 217], "utf": [123, 143, 145, 147, 148, 150, 151, 192, 216, 217, 261], "strict": [123, 216, 217], "codec": [123, 216, 217, 259], "scheme": [123, 216, 217], "unicodeencodeerror": [123, 216, 217], "xmlcharrefreplac": [123, 216, 217], "register_error": [123, 216, 217], "endswith": [123, 143, 145, 148, 151, 216, 217, 258], "expandtab": [123, 216, 217], "tabsiz": [123, 216, 217], "failur": [123, 216, 217], "substitut": [123, 216, 217], "identifi": [123, 131, 216, 217, 242, 256, 257, 258, 265], "brace": [123, 216, 217], "format_map": [123, 216, 217], "isalnum": [123, 216, 217], "alpha": [123, 128, 137, 144, 147, 150, 152, 216, 217, 262, 264], "numer": [123, 177, 178, 179, 182, 185, 187, 191, 193, 195, 199, 200, 203, 206, 216, 217, 236, 241, 258, 259, 260, 268], "isalpha": [123, 216, 217], "isascii": [123, 216, 217], "ascii": [123, 216, 217, 233], "0000": [123, 216, 217], "007f": [123, 216, 217], "isdecim": [123, 216, 217], "decim": [123, 216, 217], "isdigit": [123, 216, 217], "isidentifi": [123, 216, 217], "iskeyword": [123, 216, 217], "islow": [123, 216, 217], "lowercas": [123, 216, 217, 231], "isnumer": [123, 216, 217], "isprint": [123, 216, 217], "printabl": [123, 164, 186, 216, 217], "repr": [123, 216, 217], "isspac": [123, 216, 217], "whitespac": [123, 216, 217, 268], "istitl": [123, 216, 217], "uncas": [123, 216, 217], "isupp": [123, 216, 217], "uppercas": [123, 216, 217], "join": [123, 143, 144, 145, 148, 149, 151, 212, 213, 216, 217, 243, 249, 266, 268], "concaten": [123, 139, 216, 217], "whose": [123, 177, 193, 216, 217, 262, 268], "pq": [123, 216, 217], "ljust": [123, 216, 217, 236], "justifi": [123, 216, 217], "lstrip": [123, 216, 217], "char": [123, 212, 216, 217, 218, 233], "maketran": [123, 216, 217], "translat": [123, 216, 217], "usabl": [123, 216, 217], "unicod": [123, 216, 217], "ordin": [123, 216, 217], "sep": [123, 216, 217], "itself": [123, 216, 217], "removeprefix": [123, 216, 217], "removesuffix": [123, 216, 217], "old": [123, 216, 217, 229], "rfind": [123, 216, 217], "rindex": [123, 216, 217], "rjust": [123, 213, 216, 217, 236, 268], "rpartit": [123, 216, 217], "rsplit": [123, 216, 217], "maxsplit": [123, 216, 217], "front": [123, 157, 160, 216, 217, 258], "rstrip": [123, 216, 217], "trail": [123, 216, 217, 231], "intention": [123, 216, 217], "punctuat": [123, 216, 217], "express": [123, 216, 217, 242, 268], "splitlin": [123, 216, 217], "keepend": [123, 216, 217], "break": [123, 134, 136, 139, 141, 143, 145, 147, 148, 150, 153, 216, 217, 257, 258, 266], "unless": [123, 128, 216, 217], "startswith": [123, 143, 145, 148, 151, 216, 217], "strip": [123, 143, 145, 148, 151, 216, 217, 268], "swapcas": [123, 216, 217], "titlecas": [123, 216, 217], "remain": [123, 216, 217], "lookup": [123, 192, 216, 217], "__getitem__": [123, 216, 217], "lookuperror": [123, 216, 217], "delet": [123, 216, 217, 258], "zfill": [123, 216, 217], "never": [123, 127, 216, 217, 224, 258, 260], "truncat": [123, 132, 133, 212, 213, 214, 216, 217, 254, 268], "after_save_train_model": 123, "before_save_train_result": 123, "trainingresult": [123, 125, 129, 141], "output_dir": [123, 141, 162, 164, 257, 266], "after_save_train_result": 123, "before_save_train_arch": 123, "after_save_train_arch": 123, "train_shutdown": 123, "quantize_startup": 123, "tflite_converter_set": 123, "before_quant": 123, "converter_dict": 123, "after_quant": 123, "tflite_flatbuff": [123, 194], "tflite_flatbuffer_dict": 123, "update_arch": [123, 162], "quantize_shutdown": 123, "evaluate_startup": [123, 145, 267], "evaluate_shutdown": 123, "generate_evaluate_plot": 123, "fig": [123, 139, 141, 257], "matlibplot": 123, "figur": [123, 141, 157, 257], "after_profil": 123, "profilingmodelresult": [123, 170], "remote_directori": 124, "softmax": [125, 128, 129, 130, 132, 133, 135, 136, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 160, 161, 243, 245, 247, 248, 249, 251, 254, 258, 260, 261, 264, 265, 266, 267], "build_model": 125, "on_training_complet": [125, 129], "successfulli": [125, 129, 141, 167, 256, 257], "_on_training_complet": [125, 129], "on_save_keras_model": [125, 141, 147, 150, 257], "_on_save_keras_model": 125, "understood": 125, "final": [125, 134, 143, 145, 147, 148, 150, 151, 243, 256, 261, 262, 266], "mere": 125, "reach": [125, 224, 268], "arbitrarili": 125, "calback": 125, "gradient": [125, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 258, 260, 267], "categorical_crossentropi": [125, 129, 130, 132, 133, 135, 136, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 160, 161, 254, 258, 260, 261], "checkpoints_en": 125, "logdir": 125, "learningrateschedul": [125, 144, 146, 152, 264], "schedul": [125, 143, 144, 145, 146, 148, 151, 152, 160, 161, 260, 262], "quiet": 125, "favor": 125, "val_loss": [125, 131, 137, 157, 260], "quantiti": 125, "new_lr": 125, "lr": [125, 260], "min_delta": [125, 130, 136, 137, 141, 144, 147, 149, 150, 153, 258], "0001": [125, 136, 147, 150, 160], "optimum": 125, "focu": [125, 152, 255], "cooldown": 125, "min_lr": [125, 144], "bound": [125, 161], "benefit": [125, 242, 255, 258, 260, 265], "stagnat": 125, "seen": [125, 147, 150, 241, 258, 260, 262], "reducelronplateau": [125, 144, 146], "val_accuraci": [125, 129, 130, 131, 135, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 247, 252, 258, 260], "val_": 125, "save_best_onli": 125, "overwritten": 125, "save_weights_onli": 125, "save_weight": 125, "decis": 125, "maxim": [125, 139, 141, 257], "minim": [125, 139, 141, 254, 257, 265], "val_acc": 125, "save_freq": 125, "steps_per_execut": 125, "criteria": [125, 256], "nth": 125, "reliabl": [125, 260, 268], "checkpointopt": 125, "saved_model": 125, "saveopt": 125, "modelcheckpoint": [125, 130, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 258, 260], "conjunct": [125, 255], "state": [125, 202, 206, 256, 260, 267], "qualifi": 125, "restore_best_weight": [125, 141], "restor": 125, "stop_train": 125, "mark": [125, 242], "earli": 125, "earlystop": [125, 129, 144, 146, 156], "subject": [125, 242], "awar": 125, "builtin": 125, "representative_dataset_max_sampl": [125, 145, 267], "allow_custom_op": 125, "experimental_new_convert": [125, 141], "mlir": 125, "toco": 125, "experimental_new_quant": [125, 141], "experimental_enable_resource_vari": 125, "resourc": [125, 240, 248, 249, 256, 264], "from_saved_model": [125, 266], "generate_unquant": 125, "generate_quantization_report": [125, 145, 265, 267], "quantization_debugg": 125, "model_quantization_tip": 125, "tflite_builtin": 125, "checkpoints_dir": 125, "get_checkpoint_path": 125, "weights_dir": 125, "contian": 125, "weights_file_format": 125, "get_weights_path": 125, "train_kwarg": 125, "print_not_found_err": 126, "specificaton": 126, "for_utest": 126, "model_typ": [126, 139, 141, 162], "IF": [126, 229, 257, 263], "return_tflite_path": 126, "archive_file_ext": 126, "backend": [127, 139, 176, 211, 212, 213, 215, 259, 266, 268], "wandb_is_initi": 127, "wandb": [127, 151, 255], "wandb_is_dis": 127, "wandb_init_kwarg": 127, "init": 127, "job_typ": 127, "wandb_session_id": 127, "wandb_config": 127, "hyperparamet": 127, "analyz": [127, 145, 241, 260, 264], "wandb_callback": 127, "wandbcallback": 127, "wandb_model_checkpoint_callback": 127, "period": [127, 226, 239, 256], "wandbmodelcheckpoint": 127, "wandb_sav": [127, 255], "glob_str": 127, "base_path": 127, "unix": 127, "noop": 127, "wandb_log": [127, 255], "commit": 127, "serializ": 127, "data_typ": [127, 266], "increment": [127, 130, 137, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 258, 260, 268], "global": [127, 128, 130, 137, 143, 145, 147, 148, 150, 151, 230, 261], "persist": [127, 192, 202, 249], "earlier": 127, "depthwiseseparableconv2d_arm": [128, 160], "num_class": [128, 132, 133, 139, 158, 254], "l2": [128, 135, 146, 149], "1711": [128, 160], "07128": [128, 160], "mcu": [128, 160, 260, 261], "platform_ml_model": [128, 156, 157, 158, 160, 161], "eembc": [128, 156, 157, 158, 160, 161], "kws10_arm_dsconv": [128, 160], "dsconv_arm_eembc": 128, "fullyconnectedautoencod": [128, 157], "dense_unit": 128, "latent_unit": 128, "dcase": [128, 157], "commun": [128, 157, 242, 256, 259, 261], "challenge2020": [128, 157], "task": [128, 144, 157, 164, 212, 254, 256, 258, 260, 262, 264], "unsupervis": [128, 157], "anomal": [128, 157], "kawagu": [128, 157], "dcase2020_task2_baselin": [128, 157], "toyadmos_fc_a": [128, 157], "toyadmos_autoencoder_eembc": 128, "mobilenetv1": [128, 159, 161], "num_filt": 128, "slim": [128, 161], "net": [128, 161], "mobilenet_v1": [128, 161], "person_detect": [128, 161], "mobilenet_v1_eembc": 128, "mobilenetv2": [128, 137, 142, 144, 152, 262, 264], "include_top": [128, 137, 152, 262], "classifier_activ": 128, "last_block_filt": [128, 144, 152, 262, 264], "invert": 128, "residu": 128, "linear": [128, 177], "imagenet": 128, "kind": 128, "mobilenet_v2": 128, "preprocess_input": 128, "resolut": [128, 260, 261, 264], "224": [128, 141, 146, 155], "exactli": 128, "proportion": 128, "4d": 128, "convolut": [128, 143, 145, 146, 148, 149, 151, 153, 180, 181, 183, 184, 204, 205, 241, 257, 259, 260, 261, 262, 264], "avg": 128, "logit": 128, "1280": [128, 264], "1024": 128, "hardar": 128, "backward": [128, 266], "pretrain": 128, "resnet10v1": [128, 158], "1512": [128, 158], "03385": [128, 158], "resnet": [128, 158], "cifar10_resnetv1": [128, 158], "resnet_v1_eembc": 128, "block_depth": 128, "channel_increas": 128, "include_head": [128, 145, 164], "return_model": [128, 145], "input_lay": [128, 145, 267], "neural": [128, 139, 141, 143, 145, 146, 148, 149, 151, 153, 257, 259, 260, 261, 262, 267, 268], "depthwis": [128, 143, 145, 148, 151, 183, 184, 259, 260, 261], "treat": [128, 145, 148, 151, 260, 261], "timeseri": [128, 145, 148, 151, 260, 261], "concret": 128, "explicitli": 128, "2010": 128, "09960": 128, "stridedibb": [128, 261], "ibb": [128, 261], "multitempor": 128, "nonzero": 128, "head": [128, 145], "speech_command": [129, 130, 144, 146, 147, 149, 150, 152, 156, 160, 264], "physic": [129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 256, 264], "depthwise_conv_2d": [129, 141, 143, 144, 145, 148, 151, 152, 160, 161, 182, 243, 247, 251, 260, 261, 264, 267], "59x49x1": [129, 144, 152, 264], "30x25x8": [129, 144, 152, 264], "2x2": [129, 134, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 160, 161, 243, 245, 247, 248, 249, 251, 258, 260, 261, 264, 266], "7x7x8": 129, "conv_2d": [129, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 160, 161, 179, 243, 245, 247, 248, 249, 251, 258, 260, 261, 264, 266, 267], "14x12x24": 129, "3x3x8": [129, 141, 144, 146, 152, 161], "24": [129, 135, 136, 139, 143, 144, 145, 147, 148, 150, 151, 152, 156, 160, 161, 243, 245, 247, 248, 249, 251, 252, 260, 261, 264, 266], "max_pool_2d": [129, 134, 135, 146, 147, 149, 150, 153, 155, 195, 258, 266], "7x6x24": 129, "5x4x20": 129, "1x1": [129, 134, 135, 136, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 155, 158, 160, 161, 243, 245, 247, 248, 249, 251, 258, 260, 261, 264, 266], "3x3x24": [129, 136, 247, 249], "2x2x20": 129, "builtinoptionstyp": [129, 131, 134, 135, 136, 139, 144, 146, 152, 153, 155, 156, 157, 158, 160, 161, 258, 264], "fully_connect": [129, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 187, 243, 245, 247, 248, 249, 251, 258, 260, 261, 264, 267], "671": 129, "184": [129, 264, 268], "357": [129, 260], "b8d28debb3af3495c6d8d2a67eedfa22": 129, "2022": [129, 131, 134, 135, 136, 139, 141, 143, 144, 146, 147, 149, 150, 152, 153, 155, 156, 157, 158, 160, 161, 247, 248, 251, 252, 258, 266], "03t22": 129, "08": [129, 131, 143, 145, 148, 243, 247, 248, 249, 251, 252, 266], "361z": 129, "12052": 129, "165": [129, 130, 143, 145, 161, 264, 266, 267], "49": [129, 143, 144, 145, 147, 148, 151, 152, 243, 245, 258, 260, 261, 264, 266], "3999": [129, 144, 146, 152, 264], "02500000037252903": [129, 135, 143, 144, 145, 147, 148, 150, 151, 152, 156, 243, 260, 264], "05999999865889549": [129, 135, 143, 144, 145, 147, 148, 150, 151, 152, 156, 243, 260, 264], "029999999329447746": [129, 144, 147, 150, 152, 264], "949999988079071": [129, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 260, 264], "512": [129, 131, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 160, 161, 243, 247, 260, 264], "0kb": [129, 136, 144], "1x59x49x1": [129, 144, 152, 264], "1x6": [129, 147, 150], "0k": [129, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 245, 258, 260, 261, 264, 266, 268], "3k": [129, 131, 136, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 156, 157, 158, 161, 245, 248, 258, 260, 261, 262, 264, 266, 268], "4m": [129, 131, 136, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 156, 158, 161, 164, 236, 245, 258, 260, 261, 264, 266], "2k": [129, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 160, 161, 245, 248, 258, 260, 261, 264, 266], "738": [129, 149, 152], "353": 129, "1k": [129, 131, 136, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 245, 248, 258, 260, 261, 264, 266], "37": [129, 134, 143, 144, 145, 148, 151, 152, 160, 177, 193, 243, 260, 261, 264, 266], "78": [129, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 243, 245, 248, 260, 261, 266], "0m": [129, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 245, 248, 258, 260, 261, 264, 266], "2m": [129, 131, 136, 143, 144, 145, 146, 147, 148, 151, 152, 153, 156, 157, 158, 160, 161, 245, 248, 258, 260, 261, 264, 266], "113": [129, 145, 243], "1m": [129, 141, 143, 144, 145, 147, 148, 149, 150, 152, 153, 155, 156, 157, 158, 161, 245, 248, 258, 259, 260, 261, 264, 266], "55": [129, 139, 141, 143, 144, 145, 148, 151, 152, 155, 156, 157, 243, 258, 260, 261, 264, 266], "82": [129, 135, 144, 145, 148, 151, 152, 155, 161, 243, 245, 258, 260, 261], "606": 129, "294": [129, 145, 161, 267], "433": 129, "284": 129, "7m": [129, 136, 141, 144, 145, 146, 147, 150, 152, 153, 158, 160, 161, 245, 258, 260, 264, 266], "1x7x7x8": 129, "1x30x25x8": [129, 144, 152, 264], "592": 129, "7k": [129, 131, 136, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 160, 161, 245, 248, 258, 260, 261, 264, 266], "290": 129, "233": [129, 264], "5k": [129, 131, 136, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 160, 161, 245, 248, 258, 260, 261, 264, 266], "24x3x3x8": 129, "1x14x12x24": 129, "8k": [129, 131, 136, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 160, 161, 245, 248, 258, 260, 261, 264, 266, 268], "270": [129, 144, 145, 148, 151, 152, 156, 158, 245, 260, 261, 264], "0u": [129, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 245, 248, 258, 260, 261, 264, 266], "1x7x6x24": 129, "174": 129, "86": [129, 144, 145, 148, 151, 152, 158, 243, 258, 260, 261, 264, 266, 267], "4k": [129, 130, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 160, 161, 245, 258, 260, 261, 264, 266], "67": [129, 144, 145, 146, 148, 151, 152, 243, 260, 261, 264], "930": [129, 143, 260], "20x3x3x24": 129, "1x5x4x20": 129, "320": [129, 156, 160, 264], "380": [129, 145, 148, 156, 260], "240": [129, 131, 141, 143, 144, 147, 148, 149, 150, 151, 152, 158, 247, 252, 260, 261, 264], "1x2x2x20": 129, "866": 129, "1x80": [129, 147, 150], "966": 129, "480": [129, 143, 145, 147, 148, 150, 151, 260, 261, 264], "772": 129, "6x80": 129, "softmaxopt": [129, 136, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 160, 161, 243, 245, 247, 248, 249, 251, 260, 261, 266], "batchnorm": [129, 130, 135, 136, 139, 141, 146, 147, 149, 150, 153, 156, 258, 260, 265], "maxpooling2d": [129, 130, 132, 133, 134, 146, 147, 149, 150, 153, 254, 258], "discover": [129, 131, 134, 135, 136, 139, 141, 144, 146, 149, 152, 153, 155, 156, 157, 158, 160, 161, 258], "practic": [129, 156, 213, 265, 268], "45": [129, 143, 144, 145, 146, 147, 148, 150, 151, 152, 155, 243, 245, 257, 260, 261, 264, 266, 267], "4000": [129, 130, 144, 146, 152, 156, 251, 264], "03": [129, 144, 145, 147, 148, 150, 151, 152, 261, 264], "pool_siz": [129, 132, 133, 134, 135, 136, 139, 141, 146, 147, 150, 153, 195, 254, 258], "get_best_metr": [129, 167], "tflite_path": [129, 171, 190, 194, 243, 245, 246, 248, 249], "h5_path": [129, 141, 147, 150, 257], "volume_gain": [129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 251, 260], "verbose_model_output_log": [129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 243, 251, 260], "get_logg": [129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 176, 228, 254], "train_result": [129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 254], "tflite_eval_result": [129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 254], "profiling_result": [129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 171, 245, 248, 254], "audioment": [130, 143, 145, 147, 148, 150, 151, 259, 261], "tf_dataset": [130, 137, 143, 145, 147, 148, 150, 151, 260], "tf_dataset_util": [130, 137, 143, 145, 147, 148, 150, 151, 256, 259], "image_util": [130, 137, 143, 145, 147, 148, 150, 151], "install_pip_packag": [130, 143, 145, 147, 148, 150, 151, 231], "kerascallback": [130, 132, 133, 137, 147, 150, 254], "terminateonnan": [130, 132, 133, 137, 143, 145, 147, 148, 150, 151, 254, 260], "post_training_integer_qu": [130, 132, 133, 137, 254], "convert_using_integ": [130, 132, 133, 137, 254], "only_quant": [130, 132, 133, 137, 254], "004": [130, 143, 145, 146, 148, 151, 251, 260], "uncom": [130, 137, 143, 145, 147, 148, 150, 151, 259], "data_dump_dir": [130, 137, 143, 145, 147, 148, 150, 151, 259], "dataset_dump": [130, 137, 143, 145, 147, 148, 150, 151, 259], "audio_augmentation_pipelin": [130, 143, 145, 147, 148, 150, 151], "batch_length": [130, 137, 143, 145, 147, 148, 150, 151, 261], "y_shape": [130, 137], "y_batch": [130, 137], "audio_path": [130, 143, 145, 147, 148, 150, 151, 261], "enumer": [130, 132, 133, 134, 136, 137, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 153, 243, 245, 248, 254, 261, 266], "new_se": [130, 137], "stateless_split": [130, 137], "num": [130, 137, 264], "np_seed": [130, 137], "adjusted_sampl": 130, "audio_augment": [130, 143, 145, 147, 148, 150, 151, 261], "compos": [130, 143, 145, 147, 148, 150, 151, 261], "90": [130, 131, 137, 143, 144, 145, 146, 147, 148, 150, 151, 152, 160, 243, 244, 260, 261, 264, 266, 267], "pitchshift": [130, 147, 150], "min_semiton": [130, 147, 150], "max_semiton": [130, 147, 150], "timestretch": [130, 147, 150], "min_rat": [130, 147, 150], "max_rat": [130, 147, 150], "min_gain_in_db": [130, 143, 145, 147, 148, 150, 151, 261], "max_gain_in_db": [130, 143, 145, 147, 148, 150, 151, 261], "airabsorpt": 130, "min_temperatur": 130, "max_temperatur": 130, "min_humid": 130, "max_humid": 130, "min_dist": 130, "max_dist": 130, "addbackgroundnois": [130, 143, 145, 147, 148, 150, 151, 261], "min_snr_in_db": [130, 143, 145, 147, 148, 150, 151, 261], "max_snr_in_db": [130, 143, 145, 147, 148, 150, 151, 261], "noise_rm": [130, 143, 145, 147, 148, 150, 151, 261], "lru_cache_s": [130, 143, 145, 147, 148, 150, 151, 261], "expand_dim": [130, 132, 133, 135, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 243, 254, 261, 266], "audio_dump_path": [130, 143, 145, 147, 148, 150, 151], "image_dump_path": [130, 143, 145, 147, 148, 150, 151], "organ": [130, 137, 143, 145, 147, 148, 150, 151, 255, 266], "mydataset": [130, 137, 143, 145, 147, 148, 150, 151, 256], "super": [130, 131, 137, 139, 143, 145, 147, 148, 150, 151, 155], "train_dataset": [130, 133, 137, 143, 145, 147, 148, 150, 151], "validation_dataset": [130, 133, 137, 143, 145, 147, 148, 150, 151], "_load_subset": [130, 137], "shut": [130, 137, 143, 145, 147, 148, 150, 151, 256], "features_d": [130, 133, 137, 143, 145, 147, 148, 150, 151, 256, 259], "labels_d": [130, 133, 137, 143, 145, 147, 148, 150, 151], "entropi": [130, 133, 137, 143, 145, 147, 148, 150, 151], "2x": [130, 259], "seed_count": [130, 137, 143, 145, 147, 148, 150, 151], "spread": [130, 137, 143, 145, 147, 148, 150, 151, 256], "per_job_batch_s": [130, 137, 143, 145, 147, 148, 150, 151], "drop_remaind": [130, 137, 143, 145, 147, 148, 150, 151], "65": [130, 137, 141, 143, 144, 145, 147, 148, 150, 151, 152, 153, 243, 258, 259, 260, 261, 264, 266], "unbatch": [130, 133, 137, 143, 145, 147, 148, 150, 151], "fetch": [130, 137, 143, 145, 147, 148, 150, 151], "prefetch": [130, 137, 143, 145, 147, 148, 150, 151], "perfect": [130, 137, 143, 145, 147, 148, 150, 151], "reshuffle_each_iter": [130, 137, 143, 145, 147, 148, 150, 151], "coupl": [130, 137, 143, 145, 147, 148, 150, 151, 256], "ecg5000": 131, "electrocardiogram": 131, "140": [131, 155, 264], "simplifi": [131, 241, 254], "rhythm": 131, "interest": [131, 256, 260], "compars": [131, 141, 162, 231], "logist": [131, 134, 139], "564": 131, "ecg": 131, "66c8e81181a47dfcc2f0ff53a55aef49": 131, "04": [131, 136, 258], "28t19": 131, "38": [131, 143, 144, 145, 148, 151, 152, 157, 243, 260, 261, 264], "662z": 131, "2028": 131, "8kb": [131, 134, 135, 260], "1x140": 131, "9k": [131, 136, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 160, 161, 245, 248, 258, 260, 261, 264, 266], "131": [131, 153, 158, 258, 266], "89": [131, 145, 148, 151, 243, 260, 261, 264, 267], "9m": [131, 141, 143, 147, 149, 150, 151, 153, 157, 158, 161, 245, 248, 258, 260, 264, 266], "5m": [131, 136, 141, 143, 144, 145, 147, 148, 150, 151, 152, 153, 158, 160, 161, 245, 258, 260, 261, 264, 266], "529": 131, "560": [131, 150], "120": [131, 143, 144, 145, 148, 151, 152, 153, 155, 158, 160, 243, 260, 261, 264], "32x140": 131, "1x32": [131, 143, 153, 258], "878": 131, "16x32": 131, "1x16": [131, 141, 155], "280": [131, 144, 145, 148, 150, 151, 152, 157, 261, 267], "254": [131, 258], "8x16": 131, "1x8": [131, 144, 157, 264], "304": [131, 149], "302": [131, 264], "16x8": 131, "974": 131, "32x16": 131, "6k": [131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 245, 248, 258, 260, 261, 264, 266, 268], "140x32": 131, "210": [131, 144, 145, 148, 151, 152, 155, 160, 261, 264], "sklearn": 131, "model_select": 131, "train_test_split": 131, "create_user_dir": [131, 143, 145, 148, 151, 229], "archive_download": [131, 135, 137, 143, 147, 149, 150, 157, 160, 161, 243, 256, 266], "dataset_path": 131, "ecg500": 131, "genfromtxt": 131, "train_data": [131, 155], "test_data": [131, 155], "train_label": 131, "test_label": 131, "test_siz": 131, "random_st": 131, "min_val": [131, 145], "reduce_min": 131, "max_val": [131, 145], "reduce_max": 131, "train_labels_bool": 131, "test_labels_bool": 131, "normal_train_data": 131, "normal_test_data": 131, "anomalous_train_data": 131, "anomalous_test_data": 131, "_normal_train_count": 131, "_normal_test_count": 131, "_abnormal_train_count": 131, "_abnormal_test_count": 131, "sample_count": 131, "whole": 131, "mae": 131, "sigmoid": [131, 134, 139, 141, 177], "mnist": [132, 133, 139, 254], "convnet": [132, 254, 258], "matric": [132, 254], "to_categor": [132, 158, 254], "step_per_epoch": [132, 133, 254], "my_representative_dataset_gener": [132, 133, 139, 141, 254], "input_valu": [132, 254], "from_tensor_slic": [132, 133, 143, 254], "sync": [132, 133, 239, 254], "my_boolean": [132, 133, 254], "my_str": [132, 133, 249, 254], "my_byt": [132, 133, 249, 254], "my_float_list": [132, 133, 254], "fashion": 133, "fashion_mnist": 133, "n_validation_sampl": 133, "n_train_sampl": 133, "x_valid": 133, "y_valid": 133, "_create_dataset_subset": 133, "evaluation_dataset": 133, "one_hot": 133, "my_tf_training_dataset": 133, "my_tf_validation_dataset": 133, "resnetv1": [134, 158, 159], "cifar10": [134, 158, 159, 266], "binary_crossentropi": 134, "bottom": [134, 256, 257, 264], "datagen_dump": [134, 136, 141], "32x32x3": [134, 158, 266], "30x30x32": 134, "3x3x3": [134, 158, 161], "15x15x32": 134, "13x13x32": 134, "3x3x32": [134, 158, 161, 264], "6x6x32": 134, "4x4x64": [134, 264, 266], "2x2x64": 134, "646": 134, "363": 134, "de33dd53e0afb91a365fd2fff0e4c461": 134, "11t17": 134, "986z": 134, "38740": 134, "53": [134, 143, 144, 145, 148, 151, 152, 160, 161, 243, 247, 260, 261, 264, 266], "functool": [134, 158], "cifar10_x_train": 134, "cifar10_y_train": 134, "cifar10_x_test": 134, "cifar10_y_test": 134, "cats_and_dogs_x_train": 134, "cats_and_dogs_y_train": 134, "cats_and_dogs_x_test": 134, "cats_and_dogs_y_test": 134, "n_cat": 134, "n_dog": 134, "elif": [134, 141, 143, 144, 145, 147, 148, 150, 151, 249], "asarrai": [134, 141], "partial": [134, 143, 144, 145, 147, 148, 150, 158, 259, 260], "typer": [134, 136, 139, 141, 153], "datagen_dump_custom_command": [134, 136, 141], "conv1d": [135, 138], "3600x1": 135, "1x3600x1": 135, "52": [135, 143, 144, 145, 148, 151, 152, 156, 161, 243, 245, 260, 261, 264, 266], "1x900x16": 135, "4x1": 135, "1x7x1": 135, "900x16": 135, "900x1x16": 135, "450x1x16": 135, "1x2": [135, 143, 148, 161, 260], "450x16": 135, "1x450x16": 135, "1x450x32": 135, "1x5x16": 135, "450x32": 135, "450x1x32": 135, "225x1x32": 135, "225x32": 135, "1x225x32": 135, "13": [135, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 177, 193, 243, 245, 247, 248, 252, 258, 260, 261, 264, 266, 268], "1x225x64": 135, "1x3x32": 135, "225x64": 135, "225x1x64": 135, "112x1x64": 135, "17": [135, 139, 143, 144, 145, 148, 151, 152, 153, 157, 160, 161, 243, 245, 258, 260, 261, 264, 266], "112x64": 135, "1x112x64": 135, "1x112x128": 135, "1x3x64": 135, "112x128": 135, "112x1x128": 135, "56x1x128": 135, "7168": 135, "416": 135, "034": 135, "nsr": 135, "apb": 135, "afib": 135, "pvc": 135, "ba4d5f7fb808e7566d44a63b4335516": 135, "04t22": 135, "345z": 135, "33920": 135, "05000000074505806": [135, 146, 149, 156], "maxpooling1d": 135, "download_verify_extract": [135, 137, 143, 147, 149, 150, 157, 160, 161, 209, 256, 266], "initial_learning_r": [135, 144, 146, 152, 262], "001": [135, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 160, 161, 258, 260, 261, 264], "decay_per_epoch": [135, 144, 146, 152, 262], "99": [135, 145, 147, 148, 150, 151, 158, 243, 244, 258, 260, 261, 266, 267], "lrate": [135, 144, 146, 152, 160, 161, 262], "ekg_waveform": 135, "8221333c8ecef29843d05b6385a4f47074820480": 135, "file_hash": [135, 137, 143, 147, 149, 150, 157, 160, 161, 209, 266], "show_progress": [135, 137, 143, 147, 149, 150, 157, 160, 161, 209, 243, 256, 266], "remove_root_dir": [135, 137, 143, 147, 149, 150, 157, 160, 161, 208, 209, 256], "post_processing_callback": 135, "weight_decai": [135, 146, 149], "kernel_regular": [135, 146], "48x48x24": [136, 247, 249], "3x3x1": [136, 144, 146, 147, 149, 150, 152, 153, 247, 249, 258, 264], "average_pool_2d": [136, 139, 141, 143, 148, 151, 158, 160, 161, 195, 245, 247, 248, 249, 251, 260, 261], "24x24x24": [136, 247, 249], "11x11x16": [136, 247, 249], "9x9x24": [136, 247, 249], "3x3x16": [136, 146, 153, 158, 161, 247, 249, 258, 264], "4x4x24": [136, 247, 249], "384": [136, 144, 152, 247, 249, 251, 252, 260, 262, 264], "197": [136, 247, 252, 260, 264], "561": [136, 247, 260, 264], "31bdc72ea90bfbcfcbe0fccaed749686": 136, "28t17": 136, "33": [136, 141, 143, 144, 145, 148, 149, 151, 152, 157, 161, 243, 258, 260, 261, 264], "474z": 136, "71408": 136, "1x96x96x1": [136, 245, 248, 249], "1x3": [136, 147, 148, 155, 245, 248, 249, 260], "85": [136, 144, 145, 146, 148, 151, 152, 156, 161, 243, 245, 260, 261, 266], "970": 136, "87": [136, 145, 148, 150, 151, 243, 258, 260, 261, 266], "3m": [136, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 161, 245, 248, 258, 260, 261, 264, 266], "39": [136, 143, 144, 145, 148, 149, 151, 152, 243, 258, 260, 261, 264, 266, 267], "36": [136, 143, 144, 145, 147, 148, 150, 151, 152, 155, 160, 243, 245, 251, 259, 260, 261, 264, 266], "314": 136, "497": [136, 161, 245, 248], "902": [136, 260], "24x3x3x1": [136, 245, 248, 249], "1x48x48x24": [136, 245, 248, 249], "69": [136, 144, 145, 148, 151, 152, 243, 245, 248, 260, 261, 264], "48": [136, 141, 143, 144, 145, 147, 148, 151, 152, 157, 161, 243, 245, 247, 252, 259, 260, 261, 264], "569": 136, "6m": [136, 141, 143, 144, 145, 147, 148, 151, 152, 157, 158, 161, 245, 248, 258, 260, 261, 264, 266], "1x24x24x24": [136, 245, 248, 249], "842": [136, 245, 248], "418": [136, 245, 248], "326": [136, 266], "16x3x3x24": [136, 245, 248, 249], "1x11x11x16": [136, 245, 248, 249], "565": [136, 245, 248], "279": [136, 245, 248], "217": [136, 258], "8m": [136, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 155, 158, 161, 260, 261, 264, 266], "24x3x3x16": [136, 245, 248, 249], "1x9x9x24": [136, 245, 248, 249], "540": [136, 143], "1x4x4x24": [136, 245, 248, 249], "1x384": [136, 144, 152, 245, 248, 249, 264], "3x384": [136, 245, 248, 249], "averagepooling2d": [136, 139, 141, 145], "non_person": [137, 161], "image_augment": 137, "image_std": 137, "enabled_numpy_behavior": 137, "image_path": [137, 164, 249], "smart_res": 137, "stateless_random_bright": 137, "max_delta": 137, "stateless_random_contrast": 137, "stateless_random_hu": 137, "stateless_random_satur": 137, "stateless_random_flip_up_down": 137, "stateless_random_flip_left_right": 137, "random_channel_shift": 137, "channel_axi": 137, "random_shear": 137, "row_axi": 137, "col_axi": 137, "random_zoom": 137, "random_shift": 137, "random_rot": 137, "per_image_standard": 137, "machine_learn": [137, 161], "benchmark": [137, 140, 157, 158, 159, 160, 161, 241, 247, 251, 252], "vw_coco2014_96": [137, 161], "mscoco14": [137, 161], "a5a465082d3f396407f8b5abaf824dd5b28439c4": [137, 161], "siames": [138, 139, 141], "vision": [139, 147, 150], "sister": [139, 141, 257], "supervis": [139, 141, 257], "distanc": [139, 141, 257, 258], "segment": [139, 141, 257], "28x28x1": 139, "24x24x4": 139, "5x5x1": 139, "tanh": [139, 145, 177, 243, 267], "12x12x4": 139, "8x8x16": 139, "5x5x4": 139, "4x4x16": [139, 144, 152], "26": [139, 143, 144, 145, 147, 148, 149, 150, 151, 152, 161, 243, 251, 260, 261, 264, 266], "27": [139, 143, 144, 145, 148, 149, 151, 152, 157, 160, 161, 243, 245, 258, 260, 261, 264], "327": [139, 144, 152], "440": [139, 143, 145, 147], "676": 139, "823": [139, 266], "400f59a4a68872982f23f08a9de3fe92": 139, "04t18": [139, 144], "645z": 139, "11368": 139, "4kb": [139, 147, 247, 260], "load_tflite_or_keras_model": [139, 141], "x_train_val": 139, "y_train_val": 139, "train_val": 139, "30000": [139, 143], "del": 139, "pairs_train": 139, "labels_train": 139, "make_pair": 139, "x_train_1": 139, "x_train_2": 139, "pairs_val": 139, "labels_v": 139, "x_val_1": 139, "x_val_2": 139, "pairs_test": 139, "labels_test": 139, "x_test_1": 139, "20000": [139, 143, 145, 213, 268], "x_test_2": 139, "pairs_of_sampl": 139, "2len": 139, "n_features_dim": 139, "digit_indic": 139, "idx1": 139, "x1": [139, 141], "label1": 139, "idx2": 139, "choic": [139, 143, 144, 145, 147, 148, 150, 256, 260], "x2": 139, "label2": 139, "randint": [139, 144], "contrastiveloss": [139, 141], "margin": [139, 141, 257], "true_valu": [139, 257], "squar": [139, 141, 257], "dissimilar": [139, 257], "y_true": 139, "y_pred": [139, 141, 162, 257, 266], "square_pr": 139, "math": [139, 143, 145, 148, 151], "margin_squar": 139, "reduce_mean": 139, "get_config": [139, 264], "t1": 139, "t2": 139, "euclidean": [139, 141, 257], "sqrt": [139, 141, 265, 267], "sum": [139, 141, 164, 213, 257, 268], "euclidean_dist": [139, 141], "vect": 139, "sum_squar": 139, "reduce_sum": 139, "embedding_network": [139, 141, 257], "input_1": [139, 141, 260], "input_2": [139, 141], "mention": [139, 141], "tower": [139, 141, 257], "tower_1": [139, 141], "tower_2": [139, 141], "technic": 139, "squared_differ": [139, 145, 243], "emul": 139, "merge_lay": [139, 141], "normal_lay": [139, 141], "conc": 139, "dense_1": [139, 258], "output_lay": [139, 141], "my_model_evalu": [139, 141, 257], "eval_dir": [139, 141, 257], "eval_loss": 139, "eval_accuraci": 139, "tflite_interpret": 139, "input_tensor": [139, 179, 182, 185, 187, 195, 199, 200, 203, 206, 266], "get_input_detail": 139, "output_tensor": [139, 178, 179, 182, 185, 187, 195, 199, 200, 203, 206], "get_output_detail": 139, "new_input_shap": 139, "new_output_shap": 139, "resize_tensor_input": 139, "allocate_tensor": 139, "n_correct": 139, "x1_batch": 139, "x2_batch": 139, "set_tensor": 139, "get_tensor": [139, 192], "pred": [139, 141, 266], "rmsprop": 139, "save_and_seri": [139, 141], "registering_the_custom_object": [139, 141], "x_1": 139, "x_2": 139, "retval": [139, 147, 150, 155], "to_show": 139, "num_col": 139, "exce": [139, 164, 258], "matplotlib": [139, 141, 258], "pyplot": [139, 141, 258], "plt": [139, 141, 257, 258], "num_row": 139, "decrement": [139, 224], "ax": [139, 141, 258], "subplot": [139, 258], "figsiz": [139, 141, 258], "imshow": [139, 141, 258], "cmap": [139, 141, 258], "set_axis_off": 139, "set_titl": 139, "5f": 139, "tight_layout": [139, 141], "rect": 139, "w_pad": 139, "visualize_custom_command": 139, "col": 139, "180x180x1": 141, "88x88x8": 141, "5x5x8": 141, "44x44x8": 141, "42x42x16": 141, "reduceropt": [141, 144, 145, 152, 243], "581": [141, 266], "330": [141, 144, 145, 149, 152, 157, 258, 264], "c5b17e1deffd907e823bfadf519b2d5d": 141, "24t22": 141, "34": [141, 143, 144, 145, 146, 148, 151, 152, 153, 243, 247, 248, 249, 260, 261, 264, 266], "383z": 141, "95964": 141, "18000000715255737": 141, "sharpen_filt": [141, 257], "\u00fe\u00fd\u00fd\u00fd\u00fe\u00fd\u00fd\u00fd\u00fd\u00fd\u00fd\u00fdd\u00fd\u00fd\u00fd\u00fd\u00fd\u00fd\u00fd\u00fe\u00fd\u00fd\u00fd\u00fe": 141, "sharpen_filter_width": [141, 257], "sharpen_filter_height": [141, 257], "sharpen_gain": [141, 257], "balance_threshold_max": [141, 257], "balance_threshold_min": [141, 257], "border": [141, 193, 257], "verify_imin": [141, 257], "verify_imax": [141, 257], "verify_full_threshold": [141, 257], "verify_center_threshold": [141, 257], "5kb": [141, 260], "1x180x180x1": 141, "143": 141, "57": [141, 143, 144, 145, 148, 151, 152, 158, 160, 243, 245, 260, 261, 264], "119": [141, 146, 245, 260, 264], "62": [141, 144, 145, 148, 149, 151, 152, 155, 161, 243, 244, 260, 261, 264], "29": [141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 160, 161, 243, 260, 261, 264, 266], "31": [141, 143, 144, 145, 148, 151, 152, 155, 161, 236, 243, 260, 261, 264, 267], "1x5x5x8": 141, "1x88x88x8": 141, "77": [141, 145, 148, 151, 153, 157, 243, 244, 260, 261, 266], "54": [141, 143, 144, 145, 148, 151, 152, 243, 251, 260, 261, 264], "1x44x44x8": 141, "16x3x3x8": [141, 146], "1x42x42x16": 141, "528": [141, 247, 252], "496": 141, "16x16": 141, "tqdm": [141, 213, 268], "img_to_arrai": [141, 249], "load_img": [141, 249], "fingerprint_signature_generator_dataset": [141, 257], "fingerprintsignaturegeneratordataset": 141, "build_model_tow": 141, "globalaveragepooling2d": 141, "nomatch_multipli": 141, "180": [141, 144, 145, 148, 152, 155, 160, 260, 261, 264], "crop_and_convert_from_uint8_to_int8": 141, "th": [141, 258, 260], "h_offset": 141, "w_offset": 141, "nan_to_num": 141, "0xff": 141, "dataset_archive_url": [141, 257], "dataset_hash": 141, "dataset_path_or_url": 141, "g_filter_s": 141, "approxim": [141, 145, 148, 151, 258, 259, 262], "radiu": 141, "g_filter_sigma": 141, "threshold_vs_accuraci": [141, 257], "preprocess_param": [141, 257], "tobyt": [141, 257], "my_keras_model_sav": [141, 257], "unpack_x_y_sample_weight": 141, "batch_x0": 141, "batch_x1": 141, "x0": 141, "saver": 141, "siamese_network_h5_path": [141, 257], "runtimeerror": [141, 143, 145, 147, 148, 150, 151, 232, 257, 261], "generate_predict": [141, 257], "_compare_signatur": 141, "s2": 141, "di": [141, 257], "y_di": [141, 257], "y_label": [141, 257], "desc": [141, 213, 268], "zeropoint": [141, 192, 198, 249], "look": [141, 147, 150, 256, 257, 258, 261], "tfliitemodel": 141, "y_dtype": [141, 192, 266], "progbar": 141, "s0": 141, "batch_s0": 141, "batch_s1": 141, "collect_sampl": 141, "1e12": 141, "match_sampl": 141, "nomatch_sampl": 141, "all_x": 141, "all_i": 141, "generate_plot": [141, 162, 257, 266], "match_di": [141, 257], "nomatch_di": [141, 257], "match_dis_x": [141, 257], "nomatch_dis_x": [141, 257], "arang": [141, 257], "match_acc": [141, 257], "nomatch_acc": [141, 257], "thre": [141, 257], "valid_count": [141, 257], "ylim": [141, 257], "legend": [141, 257], "loc": [141, 257], "xlabel": [141, 257], "ylabel": [141, 257], "grid": [141, 257], "major": [141, 143, 145, 148, 151, 206, 231, 243, 257, 258, 260, 261, 268], "output_path": [141, 192, 218, 257], "savefig": [141, 257], "eclidean_dist": [141, 257], "dump_dir": 141, "x_sampl": 141, "y_sampl": 141, "tflite_y_pr": 141, "h5_y_pr": 141, "nomatch": 141, "3f": 141, "add_subplot": 141, "preprocess_custom_command": 141, "compare_preprocess": 141, "preprocess_samples_en": 141, "unprocessed_dir": 141, "all_sampl": 141, "list_all_sampl": 141, "fn": [141, 143, 145, 147, 148, 150, 151], "unprocessed_img": 141, "processed_img": 141, "preprocess_sampl": 141, "img_valid": 141, "verify_sampl": 141, "basenam": [141, 143, 145, 147, 148, 150, 151, 209, 266], "previous_verify_msg": 141, "dropp": 141, "v2": [142, 256, 258, 260, 264, 266], "pac": [142, 149, 150, 151, 240], "man": [142, 149, 150, 151, 240], "cnn": [142, 145, 146, 147, 148, 149, 150, 151, 153, 258, 262, 266, 267], "lstm": [142, 145, 206, 240], "tenet": [143, 145, 148, 151, 259, 260, 261, 267], "avoid": [143, 256, 261], "mlcommon": [143, 145, 148, 151, 157, 158, 160, 161, 247, 251, 252, 259, 260, 261], "30m": [143, 144, 145, 146, 148, 151, 152, 160, 260, 261], "10m": [143, 145, 147, 148, 149, 150, 151, 260, 261], "118x1x108": 143, "118x1x32": 143, "3x1x108": 143, "118x1x96": 143, "1x1x32": [143, 158, 161, 264], "59x1x96": 143, "9x1x96": 143, "59x1x32": 143, "1x1x96": [143, 144, 152, 264], "30x1x96": 143, "30x1x32": 143, "15x1x96": 143, "15x1x32": 143, "41": [143, 144, 145, 148, 151, 152, 161, 243, 258, 260, 261, 264], "44": [143, 144, 145, 147, 148, 149, 150, 151, 152, 243, 258, 259, 260, 261, 264], "46": [143, 144, 145, 146, 148, 151, 152, 155, 243, 260, 261, 264], "47": [143, 144, 145, 148, 151, 152, 243, 258, 260, 261, 264], "1x15": 143, "562": 143, "247": 143, "keyword_spotting_alexa_v2": 143, "344": 143, "026c2f86bf499c3a1386c348888021e5": 143, "10t00": 143, "325z": 143, "4000000059604645": [143, 145, 148, 151, 243, 260], "800000011920929": [143, 145, 147, 148, 149, 150, 151, 243, 260], "216": [143, 151, 258], "900": [143, 147, 149, 155], "208": [143, 258], "1kb": [143, 251, 260], "1x118x1x108": 143, "207": [143, 161], "825": 143, "32x3x1x108": 143, "1x118x1x32": 143, "759": [143, 245], "362": 143, "307": [143, 264], "96x1x1x32": 143, "1x118x1x96": 143, "118": [143, 145, 158], "91": [143, 145, 147, 148, 150, 157, 243, 257, 260, 266, 267], "88": [143, 145, 148, 151, 243, 260, 261, 266, 267], "1x9x1x96": 143, "1x59x1x96": 143, "181": [143, 151, 160], "32x1x1x96": [143, 264], "1x59x1x32": 143, "126": [143, 144, 152, 157, 264, 266], "690": [143, 145, 148, 151, 260, 261], "32x1x1x32": [143, 161], "379": [143, 145, 267], "154": [143, 149, 151, 260, 261], "840": [143, 145, 148, 158, 267], "1x30x1x96": 143, "92": [143, 145, 148, 151, 157, 243, 257, 258, 260, 264, 267], "74": [143, 144, 145, 148, 149, 151, 152, 161, 243, 260, 261, 264], "960": [143, 260, 264], "1x30x1x32": 143, "390": [143, 144, 145, 146, 148, 151, 152, 153, 260, 261], "193": [143, 161], "810": [143, 144, 145, 148, 151, 152, 261], "990": [143, 264], "420": [143, 145, 147, 148, 150, 151, 161, 261, 264], "1x15x1x96": 143, "510": [143, 144, 152, 260, 264], "1x15x1x32": 143, "570": [143, 260, 264], "309": 143, "1x1x1x32": 143, "595": 143, "130": [143, 262], "123": [143, 145, 148, 151, 157, 161, 261], "2x32": 143, "steppedlearnrateschedul": [143, 145, 148, 151, 260], "trivial": [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 254, 258, 260, 266, 268], "9999": [143, 145, 148, 151, 260], "teacher": [143, 147, 150], "swap": [143, 145, 148, 151, 260, 261], "time_s": [143, 145, 148, 151, 260, 261], "feature_s": [143, 145, 148, 151, 260, 261], "tenet12": [143, 145, 148, 151, 260, 261], "learning_r": [143, 145, 147, 148, 150, 151, 260, 261], "multiscaletemporalconvolut": [143, 145, 148, 151, 260], "kws_stream": [143, 145, 148, 151, 260], "002": [143, 145, 148, 151, 260], "003": [143, 145, 148, 151, 260], "005": [143, 145, 148, 151, 260], "0005": [143, 145, 148, 151, 152, 160, 161, 260, 262], "5000": [143, 145, 148, 151, 260], "meta": [143, 145, 147, 148, 149, 150, 151, 260], "unknown_class_id": [143, 144, 145, 147, 148, 151, 261], "towardsdatasci": [143, 145, 147, 148, 150, 151], "f1e54688e7df": [143, 145, 147, 148, 150, 151], "unknown_class_multipli": [143, 147, 150], "forget": [143, 145, 148, 151, 206, 259, 267], "audio_pipeline_with_augment": [143, 145, 148, 151, 259, 260, 261], "path_batch": [143, 145, 147, 148, 150, 151, 261], "label_batch": [143, 145, 147, 148, 150, 151, 261], "unknown_samples_batch": 143, "x_shape": [143, 145, 147, 148, 150, 151, 261], "x_batch": [143, 145, 147, 148, 150, 151, 261], "warm": [143, 145, 147, 148, 150, 151, 259, 260, 261], "padding_length_m": [143, 145, 147, 148, 150, 151, 261], "padded_frontend_set": [143, 145, 147, 148, 150, 151, 261, 267], "unknown_sampl": [143, 147], "argmax": [143, 145, 147, 148, 150, 151, 243, 261], "rn": [143, 145, 147, 148, 150, 151, 261], "use_cropped_sample_as_unknown": [143, 144, 145, 147, 148, 150], "using_silence_as_unknown": [143, 145, 147, 148, 150], "choice_index": [143, 145, 147, 148, 150], "err": [143, 145, 148, 151, 232, 245, 261], "padding_length": [143, 145, 147, 148, 150, 151, 261], "padded_sample_length": [143, 145, 147, 148, 150, 151, 261], "padded_sampl": [143, 145, 147, 148, 150, 151, 261], "trimmed_sampl": [143, 145, 147, 148, 150], "top_db": [143, 144, 145, 147, 148, 150], "eventu": [143, 145, 147, 148, 150, 258, 260], "trimmed_sample_length": [143, 145, 147, 148, 150], "cropped_sample_perc": [143, 144, 145, 147, 148, 150], "cropped_sample_length": [143, 144, 145, 147, 148, 150], "min_absolute_rms_in_db": [143, 145, 147, 148, 150, 151, 261], "max_absolute_rms_in_db": [143, 145, 147, 148, 150, 151, 261], "ambient": [143, 145, 147, 148, 150, 151, 260, 261], "snr": [143, 145, 148, 151, 261], "louder": [143, 145, 148, 151, 261], "addgaussiansnr": [143, 145, 147, 148, 150, 151, 261], "cv2": [143, 145, 147, 148, 150, 151], "spectrogram_dump": [143, 145, 147, 148, 150, 151], "transpos": [143, 145, 147, 148, 150, 151, 204, 205, 243, 266], "valid_sample_length": [143, 145, 147, 148, 151], "valid_augmented_sampl": [143, 145, 147, 148, 151], "jpg_data": [143, 145, 147, 148, 150, 151], "applycolormap": [143, 145, 147, 148, 150, 151], "colormap_hot": [143, 145, 147, 148, 150, 151], "imwrit": [143, 145, 147, 148, 150, 151], "all_unknown_sampl": 143, "load_subset": [143, 145, 147, 148, 150, 151], "sl_synthetic_alexa": 143, "e657e91d6ea55639ce2e9a4dd8994c112fda2de0": 143, "_unknown": [143, 145, 148, 151], "sl_synthetic_alexa_unknown": 143, "2693e5fc72c52f199de2a69ed720644c2c363591": 143, "sl_synthetic_generic_unknown": 143, "6729b4763a506e427beb0909069219767f3d0d6f": 143, "mlcommons_keyword": [143, 145, 148, 151], "mlcommons_voic": 143, "dst_path": [143, 147, 150, 208, 209, 243], "makedir": [143, 145, 147, 148, 150, 151, 266], "dirnam": [143, 145, 147, 148, 150, 151, 266], "exist_ok": [143, 145, 147, 148, 150, 151, 266], "add_unknown_sampl": [143, 145, 148, 151], "unknown_samples_d": 143, "per_job_batch_multipli": [143, 145, 147, 148, 151], "84": [143, 144, 145, 147, 148, 151, 152, 153, 243, 258, 259, 260, 261, 264], "72": [143, 144, 145, 147, 148, 150, 151, 152, 155, 160, 243, 256, 258, 259, 260, 261], "file_list": [143, 145, 148, 151], "index_path": [143, 145, 148, 151], "class_base_dir": [143, 145, 148, 151], "walk": [143, 145, 148, 151, 229], "followlink": [143, 145, 148, 151, 229], "fname": [143, 145, 148, 151], "abs_path": [143, 145, 148, 151], "getsiz": [143, 145, 148, 151], "rel_path": [143, 145, 148, 151], "relpath": [143, 145, 148, 151], "get_sample_group_id_from_path": [143, 145, 148, 151], "get_mltk_logg": [143, 145, 148, 151], "n_file": [143, 145, 148, 151], "ceil": [143, 145, 148, 151, 193], "other_subset_hash": [143, 145, 148, 151], "othersid": [143, 145, 148, 151], "this_subset_hash": [143, 145, 148, 151], "side": [143, 145, 148, 151, 162, 239, 258], "unknown_dir": 143, "mlcommons_keywords_dir": [143, 145, 148, 151], "mlcommons_voice_dir": 143, "listdir": [143, 145, 147, 148, 151, 243, 249, 258], "isdir": [143, 145, 148, 151, 258], "mp3": [143, 145, 148, 151, 259], "c53b335a_nohash_1": [143, 145, 148, 151], "c53b335a": [143, 145, 148, 151], "tok": [143, 145, 148, 151], "common_voice_en_20127845": [143, 145, 148, 151], "20127845": [143, 145, 148, 151], "common_voice_": [143, 145, 148, 151], "azure_af": [143, 145, 148, 151], "za": [143, 145, 148, 151], "adrineur": [143, 145, 148, 151], "aww": [143, 145, 148, 151, 213, 268], "medium": [143, 145, 148, 151, 213, 243, 266, 268], "588b6ace": [143, 145, 148, 151], "gcp_": [143, 145, 148, 151], "azure_": [143, 145, 148, 151], "aws_": [143, 145, 148, 151], "baud_rat": [143, 259], "460800": [143, 259], "industri": [144, 262, 264], "20m": [144, 146, 147, 149, 150, 152, 160], "relu6": [144, 152, 177, 264], "1x1x8": [144, 152, 161, 264], "30x25x48": [144, 152, 264], "31x27x48": [144, 152, 264], "15x13x48": [144, 152, 264], "3x3x48": [144, 152, 264], "15x13x8": [144, 152], "1x1x48": [144, 152, 264], "17x15x48": [144, 152], "8x7x48": [144, 152], "8x7x8": [144, 152], "9x9x48": [144, 152], "4x4x48": [144, 152, 264], "4x4x96": [144, 152, 264], "1x1x16": [144, 152, 158, 161, 264], "3x3x96": [144, 152, 264], "5x5x96": [144, 152], "2x2x96": [144, 152], "2x2x24": [144, 152], "2x2x144": [144, 152], "1x1x24": [144, 152, 264], "144": [144, 146, 152, 157, 264], "3x3x144": [144, 152, 264], "58": [144, 145, 148, 151, 152, 243, 260, 261, 264], "1x1x144": [144, 152, 264], "59": [144, 145, 148, 151, 152, 157, 243, 260, 261, 264], "61": [144, 145, 148, 151, 152, 243, 260, 261, 264, 266], "63": [144, 145, 148, 151, 152, 243, 260, 261, 264], "66": [144, 145, 147, 148, 150, 151, 152, 243, 245, 258, 260, 261, 264], "2x2x48": [144, 152], "2x2x384": [144, 152], "68": [144, 145, 147, 148, 150, 151, 152, 243, 260, 261, 264, 267], "737": [144, 260], "977": 144, "e7018a67a673713fe4935f20ca88b492": 144, "420z": 144, "105016": 144, "259": [144, 260], "258": [144, 145, 266, 267], "71": [144, 145, 148, 151, 152, 243, 245, 247, 248, 260, 261, 264, 266], "8x3x3x1": [144, 146, 152, 264], "189": [144, 152, 260, 264], "214": [144, 148, 152, 260], "1x3x3x8": [144, 152, 161, 264], "102": [144, 145, 148, 152, 243, 260, 264], "780": [144, 145, 152], "8x1x1x8": [144, 152, 264], "300": [144, 145, 148, 151, 152, 153, 157, 161, 258, 260, 264, 266, 268], "684": [144, 152, 156, 251, 264], "288": [144, 152, 260, 264, 266], "48x1x1x8": [144, 152, 264], "1x30x25x48": [144, 152, 264], "241": [144, 145, 148, 151, 152, 153, 261, 264, 267], "967": [144, 152, 264], "4x2": [144, 152, 264, 266], "1x31x27x48": [144, 152, 264], "padopt": [144, 152, 266], "196": [144, 152, 264], "157": [144, 146, 152], "282": [144, 152], "1x3x3x48": [144, 152, 264], "1x15x13x48": [144, 152, 264], "151": [144, 152, 244, 264], "870": [144, 145, 148, 151, 152, 153, 258, 261], "8x1x1x48": [144, 152, 264], "1x15x13x8": [144, 152, 264], "177": [144, 152, 260, 264], "73": [144, 145, 148, 151, 152, 243, 260, 261, 264], "277": [144, 152, 257, 264], "1x17x15x48": [144, 152, 264], "1x8x7x48": [144, 152, 264], "1x8x7x8": [144, 152, 264], "81": [144, 145, 148, 151, 152, 157, 243, 245, 260, 261, 264, 266], "448": [144, 149, 152, 264], "1x9x9x48": [144, 152, 264], "1x4x4x48": [144, 152, 264], "16x1x1x48": [144, 152, 264], "1x4x4x16": [144, 152, 264], "96x1x1x16": [144, 152, 264], "1x4x4x96": [144, 152, 264], "1x3x3x96": [144, 152, 264], "16x1x1x96": [144, 152, 264], "908": [144, 149, 152], "1x5x5x96": [144, 152, 264], "1x2x2x96": [144, 152, 264], "24x1x1x96": [144, 152, 264], "1x2x2x24": [144, 152, 264], "144x1x1x24": [144, 152, 264], "1x2x2x144": [144, 152, 264], "1x3x3x144": [144, 152, 264], "24x1x1x144": [144, 152, 264], "348": [144, 152], "48x1x1x144": [144, 152, 264], "1x2x2x48": [144, 152, 264], "152": [144, 152, 264], "384x1x1x48": [144, 152, 264], "1x2x2x384": [144, 152, 264], "246": [144, 152], "8x384": [144, 264], "python_api": [144, 145, 146, 148, 149, 152], "audio_dataset_mixin": [144, 146, 149, 152], "pseudo": [144, 146, 152], "16k": [144, 146, 149, 152, 264], "get_batches_sampl": [144, 149], "l241": [144, 149], "keyword_spotting_overview": 144, "non_unknown_class_indic": 144, "class_index": [144, 243], "sr": [144, 147, 149, 150], "transform_param": [144, 149], "x_len": 144, "bg_noise_offset": 144, "bg_noise_factor": 144, "loudness_factor": 144, "sample_index": 144, "sample_data": 144, "sample_trim": 144, "ten_digit": [145, 243], "ml_commons_keyword": [145, 148, 151, 260, 261], "background_nois": [145, 148, 151, 260, 261], "esc50": [145, 148, 151, 260, 261], "came": [145, 148, 151, 261], "mit_ir_survei": [145, 148, 260], "impuls": [145, 148], "respons": [145, 147, 148, 150, 223, 240, 256, 259], "103597": 145, "9387": 145, "9250": 145, "9245": 145, "9116": 145, "9135": 145, "9388": 145, "9229": 145, "9342": 145, "9166": 145, "9289": 145, "11050": [145, 148], "18231": 145, "1657": 145, "1632": 145, "1627": 145, "1603": 145, "1585": 145, "1656": 145, "1623": 145, "1648": 145, "1613": 145, "1637": 145, "1950": [145, 148, 260], "00": [145, 247, 252, 256, 258, 260, 268], "upper_band_limit": [145, 148, 151], "lower_band_limit": [145, 148, 151], "spectrogram_float32": [145, 267], "inher": [145, 267], "layernorm": 145, "98x1x40": [145, 148, 151, 243, 260], "3x1x40": [145, 243], "98x1x120": [145, 148, 151, 243, 260], "1x1x40": [145, 148, 151, 243, 260], "49x1x120": [145, 148, 151, 243, 260], "9x1x120": [145, 148, 151, 243, 260], "49x1x40": [145, 148, 151, 243, 260], "1x1x120": [145, 148, 151, 243, 260], "25x1x120": [145, 148, 151, 243, 260], "25x1x40": [145, 148, 151, 243, 260], "13x1x120": [145, 148, 151, 243, 260], "13x1x40": [145, 148, 151, 243, 260], "7x1x120": [145, 148, 151, 243, 260], "7x1x40": [145, 148, 151, 243, 260], "7x40x1": [145, 243], "40x1x7": [145, 243], "76": [145, 146, 148, 151, 243, 260, 261, 264, 266], "rsqrt": [145, 243], "mul": [145, 243], "79": [145, 148, 151, 243, 260, 261, 266], "subopt": [145, 243], "7x40": [145, 151, 243, 261], "83": [145, 147, 148, 150, 151, 243, 244, 260, 261, 266, 267], "unidirectional_sequence_lstm": [145, 206, 243, 267], "93": [145, 148, 156, 243, 244, 260, 266, 267], "94": [145, 148, 150, 151, 155, 157, 160, 243, 260, 261, 266, 267], "97": [145, 148, 243, 244, 257, 258, 260, 266, 267], "98": [145, 146, 148, 153, 243, 257, 258, 260, 264, 266, 267], "101": [145, 148, 243, 260], "strided_slic": [145, 157, 243], "stridedsliceopt": [145, 157, 243], "103": [145, 148, 243, 260], "11x1x1": [145, 243], "106": [145, 148, 243, 260], "107": [145, 148, 153, 243, 258], "109": [145, 243, 260], "110": [145, 161, 243], "111": [145, 243, 266], "112": [145, 149, 156, 243, 264, 268], "114": [145, 148, 243], "115": [145, 156, 158, 243, 261], "116": [145, 148, 160, 243, 260, 267], "117": [145, 243, 260], "074": 145, "306": 145, "4b22adb625a3300fdcf06fa61105782f": [145, 243], "2023": [145, 148, 151, 243, 260, 268], "03t01": [145, 243], "378z": [145, 243], "450": [145, 147, 150, 158, 243, 264], "242": [145, 148, 150, 243, 260], "700": [145, 148, 149, 151, 161, 243, 260], "6kb": [145, 151, 156, 260], "1x98x1x40": [145, 148, 151, 261], "1x11": [145, 152, 243], "142": [145, 258], "944": 145, "470": [145, 148, 151, 261], "40x3x1x40": 145, "976": [145, 148, 151, 261], "120x1x1x40": [145, 148, 151, 261], "1x98x1x120": [145, 148, 151, 261], "1x9x1x120": [145, 148, 151, 261], "1x49x1x120": [145, 148, 151, 261], "472": [145, 148, 151, 248, 261], "235": [145, 148, 150, 151, 261], "186": [145, 148], "40x1x1x120": [145, 148, 151, 261], "1x49x1x40": [145, 148, 151, 261], "162": [145, 148, 151, 261], "40x1x1x40": [145, 148, 151, 261], "488": [145, 148, 151, 261], "195": [145, 148, 151, 260, 261], "1x25x1x120": [145, 148, 151, 261], "1x25x1x40": [145, 148, 151, 261], "249": [145, 148, 151, 161, 261, 267], "1x13x1x120": [145, 148, 151, 261], "660": [145, 148, 151, 261], "1x13x1x40": [145, 148, 151, 261], "520": [145, 148, 151, 261], "129": [145, 146, 148, 151, 261], "720": [145, 146, 147, 148, 149, 150, 151, 261], "1x7x1x120": [145, 148, 151, 261], "1x7x1x40": [145, 148, 151, 261], "992": [145, 148, 151, 156, 261], "1x7x40x1": 145, "1x40x1x7": 145, "1x7x40": 145, "40x40": 145, "1x40": [145, 148, 151, 261], "891": [145, 244], "749": 145, "11x40": 145, "464": [145, 260, 264], "1x11x1x1": 145, "460": [145, 147, 150], "overal": [145, 162, 213, 244, 257, 258, 260, 266, 267, 268], "723": [145, 267], "404": [145, 156, 267], "746": [145, 258, 267], "701": [145, 267], "508": [145, 267], "198": [145, 150, 264, 267], "915": [145, 267], "873": [145, 267], "882": [145, 267], "846": [145, 267], "roc": [145, 244, 255, 257, 258, 260, 266, 267], "auc": [145, 156, 157, 158, 160, 161, 162, 244, 257, 258, 260, 266, 267], "715": [145, 267], "342": [145, 267], "329": [145, 267], "289": [145, 265, 267], "260": [145, 146, 152, 153, 258, 267], "227": [145, 149, 267], "080": [145, 267], "756": [145, 267], "636": [145, 244, 267], "478": [145, 258, 267], "023": [145, 267], "764": [145, 267], "215": [145, 149, 267], "135": [145, 155, 267], "043": [145, 260, 267], "848": [145, 266, 267], "265": [145, 149, 267], "836": [145, 267], "744": [145, 267], "535": [145, 157, 267], "892": [145, 267], "784": [145, 149, 260, 267], "709": [145, 267], "615": [145, 264, 267], "611": [145, 267], "457": [145, 267], "937": [145, 267], "545": [145, 267], "audio_dataset": [145, 148, 151, 243], "7000": 145, "throughout": [145, 258, 266], "n_frequency_bin": [145, 267], "cnn_time_step": [145, 267], "critic": [145, 257, 259, 260, 267, 268], "normalized_lstm_input": 145, "cnn_featur": [145, 267], "recurr": [145, 206, 265, 267], "pattern": [145, 157, 208, 229, 233, 260, 267], "return_sequ": [145, 267], "recurrent_dropout": 145, "normalized_lstm_output": 145, "lstm_output": 145, "meaning": [145, 262, 267], "last_row_lstm_featur": [145, 267], "_before_save_train_model": [145, 267], "old_weight": [145, 267], "get_weight": [145, 267], "new_keras_model": [145, 267], "set_weight": [145, 267], "_evaluate_startup": [145, 267], "ir_dataset": [145, 148], "_ir_responses_": [145, 148], "rstate": [145, 148], "randomst": [145, 147, 148, 151], "current_sample_is_in_unknown_class": [145, 148], "hi": [145, 148], "700m": [145, 147, 148, 149], "val_rang": 145, "esc": [145, 148, 151], "esc50_dir": [145, 148, 151], "all_keyword": [145, 148, 151], "11k": [145, 148, 151], "rng": [145, 147, 148, 151], "extend": [145, 148, 151, 255], "11000": [145, 148, 151], "detection_threshold_list": [145, 148, 149, 150, 151, 260], "8khz": [146, 149], "49x32x1": 146, "25x16x8": 146, "13x8x16": 146, "7x4x32": 146, "1x4x32": 146, "1x7": [146, 149, 150, 151, 261], "278": [146, 147], "563": 146, "084": 146, "782baa4c65acec0db85a71d2be78eb29": 146, "04t19": [146, 152, 155, 156, 157, 158, 160, 161], "747z": 146, "6712": 146, "160": [146, 148, 151, 258, 261, 264], "004000000189989805": [146, 149], "3kb": [146, 148, 157, 158, 247, 260], "1x49x32x1": 146, "1x4": [146, 151, 153, 155, 156, 258, 260, 261], "574": 146, "273": 146, "1x25x16x8": 146, "244": 146, "1x13x8x16": 146, "32x3x3x16": [146, 153, 158, 258], "1x7x4x32": 146, "896": [146, 264], "1x1x4x32": 146, "1x128": [146, 157], "809": 146, "4x128": 146, "msla": 146, "knowledg": [147, 150, 152, 241, 262], "distal": [147, 150], "behind": [147, 150, 239, 258, 260, 262], "student": [147, 150], "guidanc": [147, 150], "train_teach": [147, 150], "keyword_spotting_on_off": [147, 260, 264], "distil": [147, 150], "90m": [147, 150], "ah": [147, 213, 268], "onning": 147, "hum": [147, 150], "1000m": [147, 150, 260, 261], "99x68x1": [147, 150], "99x68x10": [147, 150], "49x34x10": [147, 150], "49x34x20": [147, 150], "3x3x10": [147, 150], "24x17x20": [147, 150], "24x17x40": [147, 150], "3x3x20": [147, 150], "12x8x40": [147, 150], "3x3x40": [147, 150], "6x4x40": [147, 150], "6x4x20": [147, 150], "1x4x20": [147, 150], "098": [147, 150], "436": [147, 150, 266], "272": 147, "d701916160b1c6e41f145a166428b7c3": 147, "04t23": 147, "214z": 147, "178": 147, "1x99x68x1": [147, 150], "199": [147, 264], "605": [147, 150], "959": 147, "10x3x3x1": [147, 150], "1x99x68x10": [147, 150], "1x49x34x10": [147, 150], "20x3x3x10": [147, 150], "1x49x34x20": [147, 150], "1x24x17x20": [147, 150], "40x3x3x20": [147, 150], "1x24x17x40": [147, 150], "1x12x8x40": [147, 150], "912": 147, "40x3x3x40": [147, 150], "1x6x4x40": [147, 150], "347": [147, 150], "172": [147, 150, 264, 266], "20x3x3x40": [147, 150], "1x6x4x20": [147, 150], "1x1x4x20": [147, 150], "860": [147, 150], "483": 147, "396": [147, 160], "3x80": 147, "shutil": [147, 150, 245, 247, 248, 249, 251, 252], "knowledgedistillationmodel": [147, 150], "my_teacher_model_build": [147, 150], "knowledge_distil": [147, 150], "output_shap": [147, 150, 155, 164], "my_teacher_model_sav": [147, 150], "teacher_h5_path": [147, 150], "get_teacher_h5_path": [147, 150], "check_exist": [147, 150], "my_student_model_build": [147, 150], "try_arch": [147, 150], "teacher_model": [147, 150], "load_model": [147, 150], "student_loss_fn": [147, 150], "categoricalcrossentropi": [147, 150], "distillation_loss_fn": [147, 150], "kldiverg": [147, 150], "temperatur": [147, 150], "my_student_model_sav": [147, 150], "student_model": [147, 150], "val_student_loss": [147, 150], "noisereduc": [147, 150], "pyloudnorm": [147, 150], "catch_warn": [147, 150], "simplefilt": [147, 150], "peak": [147, 150], "reduce_nois": [147, 150], "stationari": [147, 150], "dataset_background_dir": [147, 150], "synthetic_on_off_v1": 147, "0e691aaa4e61c82720b397fb82f5702d8355df11": 147, "_on_off_unknown": 147, "additional_unknown_dataset_dir": 147, "synthetic_on_off_unknown_v1": 147, "075c9e513c7830dfd531cef0306d100f4a3fb94b": 147, "_add_additional_unknown_sampl": 147, "ext": [147, 150], "nexport": [147, 150], "prepare_teacher_or_student_model": [147, 150], "enviro": [147, 150], "on_off": [148, 260], "29155": 148, "9071": 148, "9034": 148, "5135": [148, 260], "1595": [148, 260], "1590": [148, 260], "07": [148, 152, 260, 267, 268], "98x1x104": [148, 151, 260], "3x1x104": [148, 151, 260], "4x1x120": [148, 151, 260], "4x1x40": [148, 151, 260], "2x1x120": [148, 260], "2x1x40": [148, 260], "312": [148, 260, 264], "ec453c2e09670f7971bb728f4de7d122": [148, 260], "19t21": [148, 260], "660z": [148, 260], "533": [148, 260], "1x98x1x104": [148, 151, 260, 261], "531": 148, "928": [148, 151, 161, 261], "40x3x1x104": [148, 151, 261], "1x4x1x120": [148, 151, 261], "1x4x1x40": [148, 151, 261], "572": [148, 151, 261], "1x2x1x120": 148, "1x2x1x40": 148, "292": 148, "1x1x1x40": [148, 151, 261], "640": [148, 151, 157, 158, 261, 266], "3x40": 148, "direction_command": [148, 151, 261], "game": [149, 150, 151, 240, 261], "69x70x1": 149, "69x70x7": 149, "34x35x7": 149, "34x35x14": 149, "3x3x7": 149, "17x17x14": 149, "17x17x28": 149, "3x3x14": 149, "8x8x28": 149, "3x3x28": 149, "4x4x28": 149, "2x2x28": 149, "939": 149, "997": [149, 160], "ba1f45639f61f277834e4c8ee71ae040": 149, "24t15": 149, "413z": 149, "45475": 149, "205": [149, 264], "230": 149, "9kb": [149, 150, 247], "1x69x70x1": 149, "710": 149, "486": 149, "7x3x3x1": 149, "1x69x70x7": 149, "1x34x35x7": 149, "14x3x3x7": 149, "1x34x35x14": 149, "1x17x17x14": 149, "28x3x3x14": 149, "1x17x17x28": 149, "1x8x8x28": 149, "451": [149, 161], "293": [149, 266], "28x3x3x28": 149, "1x4x4x28": 149, "532": 149, "1x2x2x28": 149, "1x112": 149, "7x112": 149, "mltk_dir": 149, "pacman_background_noise_dir": [149, 150], "recorded_pacman_game_plai": [149, 150, 151], "749f552bc2aba11e618969d8b0f6e5bdd62ac7a2": [149, 150, 151], "pacman_background_noise_path": 149, "pacman_background_nois": 149, "add_game_background_nois": 149, "40m": 150, "c536b6f6dd07177d0ea769829f66623d": 150, "21t16": 150, "603z": 150, "239": [150, 264], "252": [150, 151, 260, 264], "965": 150, "916": [150, 157], "899": 150, "7x80": 150, "50m": 150, "mous": 150, "050": [150, 153, 258], "cropped_sample_offset": 150, "pacman_background_noise_dst_path": 150, "pacman_background_noise_src_path": 150, "brd2601_background_noise_dst_path": 150, "background_noise_dir": 150, "background_noise_src_path": 150, "soundjai": 150, "62865": 151, "8382": 151, "12573": 151, "6435": 151, "858": 151, "1287": 151, "018": 151, "804": 151, "fa5f9b8ea1c47d942d537ef3702ffa76": 151, "01t20": 151, "940z": 151, "234": 151, "446": [151, 261, 264], "953": 151, "567": [151, 261, 266], "477": [151, 261], "weightsandbiasesmixin": [151, 255], "download_and_extract": 151, "learnt": [152, 262], "979": 152, "536b7f0ff2de1d1db7c6b35d1e8cb721": 152, "433z": 152, "105032": 152, "2kb": [152, 153, 155, 161, 258, 260, 264], "11x384": 152, "cna": 152, "base_mltk_model": [152, 262], "base_model_h5_path": [152, 262], "load_weight": [152, 262], "by_nam": [152, 262], "skip_mismatch": [152, 262], "mismatch": [152, 262], "transfer_learn": [152, 262], "freez": [152, 262], "gave": [152, 262], "84x84x1": [153, 258], "82x82x16": [153, 258], "41x41x16": [153, 258], "39x39x16": [153, 258], "19x19x16": [153, 258], "17x17x32": [153, 258], "8x8x32": [153, 258], "2048": [153, 156, 258, 266], "9b557f35e32df7614723ddaafd77d75f": 153, "02t23": 153, "997z": 153, "137176": [153, 258], "suppression_count": [153, 258], "1x84x84x1": [153, 258], "137": [153, 258, 266], "354": 153, "159": [153, 245, 258, 266], "968": [153, 258], "16x3x3x1": [153, 258, 264], "1x82x82x16": [153, 258], "1x41x41x16": [153, 258], "16x3x3x16": [153, 158, 258], "1x39x39x16": [153, 258], "1x19x19x16": [153, 258], "1x17x17x32": [153, 258], "1x8x8x32": [153, 258], "1x2048": [153, 258], "32x2048": [153, 258], "231": [153, 258], "4x32": [153, 258], "bring": [153, 258], "rock_paper_scissors_v2": [153, 249, 258], "blog": [153, 258], "filter_count": [153, 258], "dump_custom_command": 153, "wand": [154, 155], "magic_wand": [155, 241], "128x3x1": 155, "128x3x8": 155, "4x3x1": 155, "42x1x8": 155, "3x3": [155, 161, 266], "42x1x16": 155, "4x1x8": 155, "14x1x16": 155, "016": 155, "133": 155, "268": 155, "wing": 155, "ring": 155, "slope": 155, "c044953d468755c572f05f4f2750d1ef": 155, "646z": 155, "5444": 155, "1x128x3x1": 155, "8x4x3x1": 155, "1x128x3x8": 155, "1x42x1x8": 155, "16x4x1x8": 155, "1x42x1x16": 155, "672": [155, 266], "1x14x1x16": 155, "1x224": 155, "16x224": 155, "132": [155, 258, 264], "4x16": 155, "acceleromet": [155, 257], "tflm_magic_wand": 155, "tflm_magic_wand_dataset": 155, "_data_load": 155, "valid_data": 155, "reshape_funct": 155, "reshaped_data": 155, "_unbatched_validation_data": 155, "sparse_categorical_crossentropi": 155, "_generate_representative_dataset": 155, "pylint": 155, "protect": 155, "3gb": 156, "993": 156, "somewhat": 156, "49x40x1": 156, "25x20x8": 156, "10x8x1": 156, "336": [156, 251, 264], "680": 156, "012": 156, "36dd6db8f633c9fca61b418402ea698f": 156, "143z": 156, "9028": 156, "1x49x40x1": 156, "164": [156, 157], "652": 156, "8x10x8x1": 156, "1x25x20x8": 156, "1x4000": 156, "4x4000": 156, "weights_shap": 156, "mlperf": [157, 159], "tini": [157, 158, 159, 160, 161, 247, 251, 252], "zenodo": 157, "3351307": 157, "1908": 157, "03299": 157, "toi": 157, "car": [157, 262], "toyadmo": 157, "64m": 157, "32m": 157, "24khz": 157, "923": 157, "5x128x1": 157, "264": [157, 266], "176": [157, 266], "anonomli": 157, "5cf2dc0ea093044c7a31a226d44b8084": 157, "676z": 157, "9396": 157, "1x5x128x1": 157, "406": 157, "147": [157, 260, 264, 266], "1x640": 157, "128x640": 157, "128x128": 157, "8x128": 157, "128x8": 157, "640x128": 157, "369": [157, 260, 268], "shapeopt": 157, "packopt": 157, "rnd": 157, "mean_squared_error": [157, 265, 267], "download_dataset": [157, 160], "features_toy_car_al": 157, "8fc5779a38694eb17e75ad21ef457bd39e6ef937": 157, "reshape_input_callback": 157, "x_length": 157, "subsect": 157, "left_offset": 157, "right_offset": 157, "randrang": 157, "middl": [157, 259, 261], "subsection_data": 157, "cifar10_main": 158, "989": 158, "988": [158, 266], "32x32x16": 158, "16x16x32": 158, "8x8x64": [158, 266], "3x3x64": [158, 160, 161, 247, 251], "1x1x64": [158, 160, 161, 247, 251, 264, 266], "8x8": 158, "502": 158, "122": [158, 249, 258, 260], "d170adc21388920caa3f64ba22cd5b5d": 158, "062z": 158, "53972": 158, "1x32x32x3": [158, 266], "1x10": [158, 266], "225": [158, 264], "211": 158, "933": 158, "442": 158, "583": [158, 161], "16x3x3x3": 158, "1x32x32x16": 158, "883": 158, "1x16x16x32": 158, "32x3x3x32": 158, "32x1x1x16": [158, 161], "830": 158, "64x3x3x32": 158, "1x8x8x64": [158, 266], "64x3x3x64": 158, "266": [158, 244], "64x1x1x32": [158, 161], "1x1x1x64": [158, 160, 266], "769": 158, "1x64": [158, 160], "10x64": 158, "wake": [159, 161], "wakeword": [159, 161], "coco14": [159, 161], "4khz": 160, "998": 160, "50x10x1": 160, "25x5x64": [160, 247, 251], "10x4x1": [160, 247, 251], "5x25": [160, 247, 251], "657": [160, 247, 251], "dsconv_arm": 160, "eb6e9d70cacfd495cdf36577882b83fc": 160, "066z": 160, "21424": 160, "7kb": 160, "1x50x10x1": 160, "1x12": 160, "831": 160, "664": [160, 258], "382": 160, "64x10x4x1": 160, "1x25x5x64": 160, "1x3x3x64": [160, 161], "412": 160, "64x1x1x64": [160, 161], "779": 160, "768": [160, 264], "12x64": 160, "speech_dataset_spec": 160, "20e36646073492fdb4fb8285ec49042e70f9e60": 160, "00025": [160, 161], "cocodataset": 161, "coco": 161, "cocoapi": 161, "mimim": 161, "96x96": [161, 258], "antialia": 161, "buildpersondetectiondatabas": 161, "mobilenet_v1_0": 161, "25_96": 161, "931": 161, "vww_model": 161, "96x96x3": 161, "48x48x8": 161, "48x48x16": 161, "24x24x16": 161, "24x24x32": 161, "12x12x32": 161, "12x12x64": [161, 266], "6x6x64": 161, "6x6x128": 161, "3x3x128": 161, "1x1x128": 161, "3x3x256": 161, "1x1x256": 161, "490": 161, "324": [161, 267], "0fdc40de5812cfa530f6ec120c55171a": 161, "736z": 161, "156424": 161, "334": 161, "1x96x96x3": 161, "156": [161, 264], "941": 161, "695": 161, "8x3x3x3": 161, "1x48x48x8": 161, "387": [161, 258], "341": [161, 258], "16x1x1x8": 161, "1x48x48x16": 161, "297": 161, "257": 161, "1x3x3x16": [161, 264], "1x24x24x16": 161, "645": 161, "281": 161, "1x24x24x32": 161, "299": [161, 264], "806": 161, "1x3x3x32": 161, "589": 161, "507": [161, 266], "202": 161, "1x12x12x32": 161, "617": 161, "251": 161, "1x12x12x64": [161, 266], "139": 161, "474": 161, "1x6x6x64": 161, "603": 161, "236": 161, "128x1x1x64": 161, "1x6x6x128": 161, "1x3x3x128": 161, "458": 161, "128x1x1x128": 161, "596": 161, "229": [161, 268], "256x1x1x128": 161, "1x3x3x256": 161, "256x1x1x256": 161, "1x1x1x256": 161, "1x256": 161, "797": 161, "2x256": 161, "938": 161, "download_data": 161, "generate_summari": [162, 266], "include_al": 162, "evalut": 162, "progress": [162, 209, 213, 268], "bar": [162, 209, 213, 231, 268], "class_accuraci": 162, "false_positive_r": 162, "roc_auc": 162, "roc_threshold": 162, "roc_auc_avg": 162, "confusion_matrix": 162, "confus": 162, "matrix": [162, 206, 266], "overall_precis": 162, "overall_recal": 162, "overall_pr_accuraci": 162, "overall_tpr": 162, "overall_fpr": 162, "overall_roc_auc": 162, "overall_threshold": 162, "calcuat": 162, "class_stat": 162, "all_scor": 162, "use_devic": [164, 245], "runtime_buffer_s": [164, 173, 176], "return_estim": [164, 176, 245], "discov": 164, "cpu_clock_r": 164, "runtime_memory_byt": 164, "is_simul": 164, "model_detail": 164, "tflite_micro_model_detail": 164, "tflitemicromodeldetail": [164, 173, 176], "sram": 164, "dsp": 164, "flatbuffer_s": [164, 192], "n_layer": 164, "input_shape_str": [164, 266], "input_dtype_str": 164, "output_shape_str": 164, "output_dtype_str": 164, "accelerator_cycl": [164, 175], "cpu_cycl": [164, 175], "cpu_util": 164, "n_unsupported_lay": 164, "unsupported_lay": 164, "stat_tot": 164, "get_summari": [164, 212, 213, 268], "include_label": 164, "format_unit": [164, 236], "exclude_nul": 164, "full_summari": 164, "generate_report": 164, "to_dict": 164, "0234": 164, "to_json": 164, "indent": 164, "summary_label": 164, "layers_label": 164, "member": 164, "input_dtyp": 164, "output_dtyp": 164, "tflite_s": 164, "joul": [164, 175], "j_per_op": 164, "j_per_mac": 164, "op_per_": 164, "mac_per_": 164, "inf_per_": 164, "err_msg": 164, "to_csv": 164, "dialect": 164, "excel": 164, "to_str": [164, 177, 193], "tflite_lay": 164, "error_msg": 164, "tflitelay": [164, 176, 178, 179, 182, 185, 187, 192, 195, 199, 200, 203, 206], "is_acceler": 164, "is_unsupport": 164, "opcodestr": [164, 178, 179, 182, 185, 187, 191, 195, 199, 200, 203, 206], "opcode_str": [164, 178, 179, 182, 185, 187, 191, 195, 199, 200, 203, 206], "builtinoper": [164, 178, 179, 182, 185, 187, 191, 195, 199, 200, 203, 206], "options_str": 164, "excluded_column": 164, "resume_epoch": 167, "create_arch": 167, "__note": 167, "__": 167, "model_archive_path": 167, "asdict": 167, "timeout": [169, 212, 223, 224, 226, 232, 233, 239], "termina": 169, "accelerator_wrapp": 170, "variant": [170, 268], "active_vari": 170, "api_vers": [170, 176], "git_hash": [170, 176], "tflitemicroacceleratorwrapp": 170, "supports_model_compil": 170, "estimate_profiling_result": 170, "set_program_recorder_en": 170, "enable_data_record": 170, "compile_model": 170, "report_path": 170, "tflm_wrapper": 173, "tflm_acceler": 173, "flatbuffer_data": [173, 192], "enable_profil": [173, 176], "enable_record": [173, 176], "enable_tensor_record": [173, 176], "force_buffer_overlap": [173, 176], "tflitemicroacceler": [173, 176], "layer_error": 173, "tflitemicrolayererror": 173, "fallback": 173, "input_s": 173, "output_s": 173, "is_profiler_en": 173, "get_profiling_result": 173, "tflitemicroprofiledlayerresult": 173, "is_recorder_en": 173, "is_tensor_recorder_en": 173, "get_recorded_data": 173, "get_layer_error": 173, "wrapper_detail": 174, "accelerat": 174, "memory_plan": 174, "tflitemicromemoryplan": 174, "specifc": 175, "shallow": [175, 194], "default_factori": 175, "factori": [175, 181, 184, 197, 205], "__missing__": 175, "set_log_level": 176, "get_log_level": 176, "set_logg": 176, "normalize_accelerator_nam": 176, "insensit": [176, 231], "get_supported_acceler": 176, "accelerator_is_support": 176, "load_tflite_model": [176, 243, 248], "unload_model": [176, 243, 248], "disable_simulator_backend": 176, "input_data": [176, 179, 182, 185, 187, 195, 199, 200, 203, 206], "record_model": [176, 248], "enable_accelerator_record": 176, "return_model_detail": 176, "update_input_model": 176, "layer_callback": 176, "input0": 176, "accelerator_data": 176, "add_accelerator_path": 176, "register_acceler": 176, "get_acceler": 176, "rectifi": 177, "relu_n1_to_1": 177, "hyperbol": 177, "tangent": 177, "sign_bit": 177, "as_integer_ratio": [177, 193], "bit_count": [177, 193], "0b1101": [177, 193], "bit_length": [177, 193], "0b100101": [177, 193], "conjug": [177, 193], "complex": [177, 193, 230, 256, 260, 261, 262, 264, 266], "ration": [177, 193], "from_byt": [177, 193], "byteord": [177, 193], "sign": [177, 186, 193], "bytearrai": [177, 193, 249], "sy": [177, 193, 201, 210, 214, 233, 245, 266], "complement": [177, 193], "imaginari": [177, 193], "is_integ": [177, 193], "duck": [177, 193], "to_byt": [177, 193], "overflowerror": [177, 193], "fb_oper": [178, 179, 182, 185, 187, 191, 195, 199, 200, 203, 206], "operatort": [178, 179, 182, 185, 187, 191, 195, 199, 200, 203, 206], "tfliteaddlayeropt": 178, "fuse": [178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 195, 196, 197, 205, 206, 207, 258, 260, 265, 266, 267], "input1_tensor": 178, "tflitetensor": [178, 179, 182, 185, 187, 191, 192, 195, 199, 200, 203, 206], "input1_data": 178, "input2_tensor": 178, "input2_data": 178, "output_data": [178, 179, 182, 185, 187, 195, 199, 200, 203, 206, 249], "from_flatbuff": [178, 179, 182, 185, 187, 191, 195, 199, 200, 203, 206], "get_input_data": [178, 179, 182, 185, 187, 191, 192, 195, 199, 200, 203, 206], "get_input_tensor": [178, 179, 182, 185, 187, 191, 192, 195, 199, 200, 203, 206], "get_output_data": [178, 179, 182, 185, 187, 191, 192, 195, 199, 200, 203, 206], "get_output_tensor": [178, 179, 182, 185, 187, 191, 192, 195, 199, 200, 203, 206], "framework": [178, 179, 182, 185, 187, 191, 195, 199, 200, 203, 206, 254, 266], "typevar": [178, 179, 182, 185, 187, 191, 195, 199, 200, 202, 203, 206], "n_input": [178, 179, 182, 185, 187, 191, 192, 195, 199, 200, 203, 206], "n_output": [178, 179, 182, 185, 187, 191, 192, 195, 199, 200, 203, 206], "tfliteconv2dlayeropt": 179, "bia": [179, 182, 187, 203, 206], "filters_tensor": [179, 182, 203, 249], "filters_data": [179, 182, 203], "bias_tensor": [179, 182, 187, 203], "bias_data": [179, 182, 187, 203], "tfliteconvparam": [179, 249], "opt": [180, 183, 188, 196, 204, 207], "activation_str": [180, 183, 188, 196, 207], "tfliteactiv": [180, 183, 188, 196, 207], "padding_str": [180, 183, 196, 204], "tflitepad": [180, 181, 183, 184, 196, 197, 204, 205], "stride_width": [180, 181, 183, 184, 193, 196, 197, 204, 205], "stride_height": [180, 181, 183, 184, 193, 196, 197, 204, 205], "options_typ": [180, 183, 188, 196, 204, 207], "builtinopt": [180, 183, 188, 196, 204, 207], "options_type_str": [180, 183, 188, 196, 204, 207], "convparamsquant": 181, "dilation_width_factor": [181, 184], "dilat": [181, 184], "dilation_height_factor": [181, 184], "input_offset": [181, 184, 189, 205], "weights_offset": [181, 184, 189, 205], "output_offset": [181, 184, 189, 205, 249], "per_channel_output_multipli": [181, 184, 205, 249], "per_channel_output_shift": [181, 184, 205, 249], "quantized_activation_min": [181, 184, 189, 197, 205, 249], "quantized_activation_max": [181, 184, 189, 197, 205, 249], "tflitedepthwiseconv2dlayeropt": 182, "tflitedepthwiseconvparam": [182, 249], "depthwiseconvparamsquant": 184, "opcode_vers": [185, 191, 199], "tflitelayeropt": [185, 191, 199, 200], "scalar": [186, 194], "syntax": [186, 194], "foo": [186, 194, 231], "int64": [186, 194], "uint32": [186, 194], "uint64": [186, 194], "doubl": [186, 194, 261, 264], "str_list": [186, 194], "deseri": [186, 194], "serialized_data": [186, 194], "boolvalu": 186, "int8valu": 186, "unsign": [186, 218, 239], "uint8valu": 186, "int16valu": 186, "uint16valu": 186, "int32valu": 186, "uint32valu": 186, "int64valu": 186, "uint64valu": 186, "floatvalu": 186, "doublevalu": 186, "binaryvalu": 186, "stringvalu": 186, "stringlist": 186, "int32list": 186, "floatlist": 186, "i8": 186, "u8": 186, "i16": 186, "u16": 186, "i32": 186, "u32": 186, "i64": 186, "u64": 186, "f32": 186, "f64": 186, "int32_list": 186, "float_list": 186, "schema_vers": 186, "root_typ": 186, "tflitefullyconnectedlayeropt": 187, "accumulator_depth": 187, "neuron": [187, 257, 267], "weights_tensor": 187, "weights_data": 187, "tflitefullyconnectedparam": [187, 249], "fullyconnectedparamsquant": 189, "output_multipli": 189, "output_shift": 189, "load_flatbuffer_fil": [190, 192, 243, 249, 266], "schema_v3": 192, "awesom": 192, "my_new_model": 192, "add_metadata": [192, 249], "my_metadata": [192, 249], "all_metadata": 192, "get_all_metadata": 192, "input_buff": 192, "inference_result": 192, "cwd": [192, 229, 234], "backslash": 192, "slash": [192, 208, 229], "flatbuffer_model": 192, "modelt": 192, "flatbuffer_subgraph": 192, "subgrapht": 192, "subgraph": [192, 202], "selected_model_subgraph": 192, "n_subgraph": 192, "get_flatbuffer_subgraph": 192, "get_tensor_data": 192, "get_metadata": [192, 249], "remove_metadata": 192, "update_path": 192, "regenerate_flatbuff": [192, 249], "reload_model": 192, "underli": [192, 212, 249, 268], "quantize_to_input_dtyp": 192, "input_index": 192, "dequantize_output_to_float32": 192, "output_index": 192, "out_height": 193, "in_height": 193, "out_width": 193, "in_width": 193, "region": 193, "filter_height": [193, 196], "filter_width": [193, 196], "l1235": 194, "add_to_tflite_fil": 194, "load_from_tflite_fil": [194, 243], "flatbufferdictionari": 194, "load_from_tflite_flatbuff": 194, "load_from_tflite_model": [194, 249], "add_to_tflite_flatbuff": 194, "add_to_tflite_model": [194, 249], "tflitepool2dlayeropt": 195, "tflitepoolparam": [195, 249], "averagepoolingevalquant": 197, "fb_quantiz": 198, "quantizationparameterst": 198, "quantization_dimens": 198, "requires_copi": 200, "memcpi": 200, "n_input_el": 200, "flat_siz": [201, 265], "maxsiz": [201, 210, 214], "fb_tensor": 202, "tensort": 202, "dtype_str": 202, "tfliteshap": 202, "tflitequant": 202, "is_vari": 202, "size_byt": 202, "shape_dtype_str": 202, "include_batch": 202, "dim0": 202, "dim1": 202, "transpose_conv": 203, "tflitetransposeconvlayeropt": 203, "tflitetransposeconvparam": 203, "calculateopdata": 205, "tfliteunidirectionallstmlayeropt": 206, "is_time_major": 206, "cell_clip": 206, "proj_clip": 206, "n_cell": [206, 267], "n_batch": 206, "input_to_input_weights_tensor": 206, "input_to_forget_weights_tensor": 206, "input_to_cell_weights_tensor": 206, "input_to_output_weights_tensor": 206, "recurrent_to_input_weights_tensor": 206, "recurrent_to_forget_weights_tensor": 206, "recurrent_to_cell_weights_tensor": 206, "recurrent_to_output_weights_tensor": 206, "cell_to_input_weights_tensor": 206, "peephol": 206, "diagon": 206, "cell_to_forget_weights_tensor": 206, "cell_to_output_weights_tensor": 206, "input_gate_bias_tensor": 206, "gate": [206, 267], "forget_gate_bias_tensor": 206, "cell_gate_bias_tensor": 206, "output_gate_bias_tensor": 206, "projection_weights_tensor": 206, "projection_bias_tensor": 206, "output_state_tensor": 206, "cell_state_tensor": 206, "input_layer_norm_coeff_tensor": 206, "forget_layer_norm_coeff_tensor": 206, "cell_layer_norm_coeff_tensor": 206, "output_layer_norm_coeff_tensor": 206, "extract_arch": 208, "extract_nest": [208, 209], "destin": [208, 209, 231], "gzip_fil": 208, "src_path": 208, "gzip": 208, "gzip_directory_fil": [208, 268], "src_dir": 208, "dst_archiv": 208, "regex": [208, 229, 233, 239], "download_dir": 209, "archive_fnam": 209, "file_hash_algorithm": 209, "update_onchange_onli": 209, "download_details_fnam": 209, "return_uptod": 209, "progressbar": 209, "sha256": 209, "hasn": [209, 264], "verify_extract": 209, "extract_details_fnam": 209, "tarbal": 209, "verify_file_hash": 209, "file_path": [209, 229], "expected_sha1": 209, "verify_sha256": 209, "expected_sha256": 209, "voicepitch": [210, 211, 213, 268], "voicer": [210, 211, 213, 268], "keyword_group": 211, "list_supported_backend": 212, "is_run": [212, 230], "is_backend_load": 212, "raise_except": 212, "load_backend": [212, 213, 268], "install_python_packag": [212, 213, 268], "boto3": 212, "cognitiveservic": 212, "speechconfig": 212, "texttospeech": 212, "texttospeechcli": 212, "auto_install_python_packag": 212, "comment": [212, 231, 254, 258], "list_languag": 212, "list_voic": [212, 213, 268], "language_cod": [212, 215], "list_configur": [212, 213, 214, 268], "max_count": [212, 213, 214, 268], "generationconfig": 212, "count_charact": [212, 268], "charg": [212, 256, 268], "as_dict": 212, "on_finish": [212, 213, 268], "forev": [212, 239], "alexa_dataset_gener": [213, 268], "audio_dataset_gener": [213, 222, 268], "alexa_dataset": [213, 268], "alias": [213, 214, 264, 268], "ehlexa": [213, 268], "eelexa": [213, 268], "aalexa": [213, 268], "aah": [213, 268], "uh": [213, 268], "ala": [213, 268], "alex": [213, 268], "lex": [213, 268], "lexa": [213, 268], "lexu": [213, 268], "alexu": [213, 268], "exu": [213, 268], "exa": [213, 268], "alert": [213, 255, 268], "alec": [213, 268], "alef": [213, 268], "ale": [213, 268], "al": [213, 268], "aleph": [213, 268], "alevin": [213, 268], "alegar": [213, 268], "alexia": [213, 259, 268], "alexin": [213, 268], "alencon": [213, 268], "aleuron": [213, 268], "alemb": [213, 268], "alic": [213, 259, 268], "aleeyah": [213, 268], "xslow": [213, 268], "xfast": [213, 268], "all_configur": [213, 268], "n_config": [213, 268], "pretti": [213, 268], "pb_outer": [213, 268], "config_list": [213, 268], "pb_inner": [213, 268], "as_list": [214, 231], "hashable_valu": 215, "hex_hash": 215, "var_nam": 218, "length_var_nam": 218, "data_length": 218, "const": [218, 248, 249, 265], "prepend_lin": 218, "fmt_str": 218, "prepend_head": 218, "iobas": 218, "prepend": [218, 231], "stdint": 218, "0x": 218, "02x": 218, "build_mltk_target": 219, "additional_vari": 219, "source_dir": 219, "build_dir": 219, "build_subdir": 219, "use_user_opt": 219, "config_onli": 219, "build_onli": 219, "previosli": 219, "invoke_mltk_target": 219, "build_target": 219, "get_build_directori": 219, "parse_vari": 219, "cmake_vari": 219, "tensorflowcudavers": 220, "__getnewargs__": 220, "plain": 220, "pickl": 220, "__match_args__": 220, "cudnn": 220, "python_min": 220, "python_max": 220, "__module__": [220, 228, 231, 236], "_cl": 220, "__repr__": 220, "nice": 220, "__slots__": 220, "deiniti": 220, "get_tensorflow_version_with_cudnn_vers": 220, "cudnn_ver": 220, "check_tensorflow_cuda_compatibility_error": 220, "log_file_path": 220, "generate_hash": 221, "hash_fil": 221, "include_filenam": 221, "hashlib": 221, "_hash": 221, "hash_object": 221, "jlink_stream": [222, 225], "serial_read": [222, 232], "command_stream": 223, "cmd": [223, 234, 238, 247, 252, 266], "response_stream": 223, "jlinkstreamopt": [223, 226], "reset_devic": [223, 226], "no_respons": 223, "ifc": 224, "stream_context": 224, "deviceinterfac": 224, "is_open": [224, 233, 239], "max_read_s": 224, "end_tim": 224, "buffer_us": 224, "pend": 224, "buffer_unus": 224, "read_data_avail": [224, 225], "readi": [224, 239, 256, 257, 261, 266], "write_data_avail": 224, "buffer_hexdump": 224, "hexdump": 224, "max_siz": [224, 226, 239], "read_al": [224, 225, 239], "initial_timeout": 224, "flush": [224, 228, 233], "classify_audio_mltk_cli": 225, "jlinkstream": [225, 227], "jlinkdatastream": [225, 226], "audio_stream": 225, "chunk_data": 225, "default_opt": 226, "is_connect": 226, "log_fil": 228, "log_file_mod": 228, "base_level": 228, "file_level": 228, "add_console_logg": 228, "make_filelik": 228, "redirect_stream": 228, "stderr": 228, "close_atexit": 228, "redirect": 228, "textio": [228, 233], "timing_decor": 228, "decor": [228, 231], "set_console_level": 228, "get_level": 228, "consoleloggerlevelcontext": 228, "__enter__": 228, "__exit__": 228, "traceback": 228, "__dict__": [228, 231, 236], "mappingproxi": [228, 231, 236], "__weakref__": [228, 231, 236], "__doc__": [228, 231, 236], "__annotations__": [228, 231, 236], "weak": [228, 231, 236], "dummylogg": 228, "fullpath": [229, 257], "get_actual_path": 229, "has_filenam": 229, "create_dir": 229, "create_tempdir": [229, 266], "subdir": 229, "get_user_set": 229, "settings_fil": 229, "add_user_set": 229, "remove_directori": 229, "retri": 229, "clean_directori": 229, "copy_directori": 229, "dst": [229, 245, 247, 248, 249, 251, 252], "exclude_dir": 229, "set_file_last_modifi": 229, "dt": 229, "datetim": 229, "file_is_new": 229, "source_path": 229, "other_path": 229, "file_is_in_us": 229, "recursive_listdir": 229, "return_relative_path": 229, "walk_with_depth": 229, "pushd": 229, "new_dir": 229, "getcwd": 229, "gil": 230, "driven": 230, "_processing_callback": 230, "pool_callback": 230, "sleep": 230, "create_batch": 230, "pool_batch": 230, "entry_point": 230, "expend": 230, "clamp": 230, "processpoolbatch": 230, "short_vers": 231, "minor": 231, "defaultdict": 231, "dictobject": 231, "my_dict_obj": 231, "__getattr__": 231, "__setattr__": 231, "setattr": 231, "merge_dict": 231, "copy_destin": 231, "obj": 231, "flatten_list": 231, "list_rindex": 231, "lst": 231, "revers": [231, 266], "contains_class_typ": 231, "get_case_insensit": 231, "is_tru": 231, "is_fals": 231, "forward_method_kwarg": 231, "prepend_exception_msg": 231, "append_exception_msg": 231, "debugger_is_act": 231, "debugg": [231, 263, 265, 267], "notebook_is_act": 231, "ipython": [231, 257], "module_nam": 231, "install_dir": 231, "no_dep": 231, "import_module_at_path": 231, "load_json_saf": 231, "find_object_key_with_valu": 231, "needl": 231, "constructor": 231, "find_object_value_with_kei": 231, "ignore_cas": 231, "enum": 231, "find_object_value_with_key_or_valu": 231, "timeit": 231, "set_absl_log_level": 231, "absl": [231, 245, 246, 247, 250, 252], "disable_warn": 231, "func": 231, "hide": 231, "profile_model_on_devic": 232, "serialread": 232, "start_regex": [232, 233], "ignorecas": [232, 233], "stop_regex": [232, 233], "fail_regex": [232, 233], "hardfault": 232, "timeouterror": 232, "error_messag": [232, 233], "device_log": 232, "captured_data": [232, 233], "multilin": 233, "dotal": 233, "outfil": [233, 234, 266], "stdout": [233, 266], "rb": 233, "callback_regex": 233, "ignore_char": 233, "list_port": [233, 239], "resolve_port": [233, 239], "activity_timeout": 233, "abort_ev": 233, "check_fail_condit": 233, "check_start_condit": 233, "check_stop_condit": 233, "delay_per_char": 233, "run_shell_cmd": [234, 266], "line_processor": 234, "retcod": [234, 266], "retmsg": [234, 266], "sig": [235, 237], "sigint": [235, 237], "resignal_on_exit": 235, "raise_exception_if_not_main_thread": 235, "formattedint": 236, "__str__": 236, "formattedfloat": 236, "add_spac": 236, "memory_unit": 236, "0314": 236, "convert_unit": 236, "readabl": 236, "32kb": 236, "128m": 236, "268435456": 236, "pretty_time_str": 236, "iso_time_str": 236, "iso": 236, "8601": 236, "19t23": 236, "459z": 236, "iso_time_filename_str": 236, "459": 236, "get_current_o": 237, "osx": 237, "is_window": 237, "is_linux": 237, "is_osx": 237, "has_admin": 237, "admin": [237, 259], "permiss": [237, 242], "get_usernam": 237, "raise_sign": 237, "kill": 237, "make_path_execut": 237, "send_sign": 237, "pid": 237, "children": 237, "recept": [238, 239], "alexa_demo": [238, 259], "data_buff": 238, "bytesio": 238, "read_command": [238, 239], "flush_input": [238, 239], "seek": 238, "getbuff": 238, "nbyte": 238, "rx_buffer_length": 239, "rx": 239, "open_synchronize_timeout": 239, "4096": 239, "rx_bytes_avail": 239, "tx_bytes_avail": 239, "is_synchron": 239, "ack_read_data": 239, "synchronize_block": 239, "statu": [239, 255, 256], "exceed": [239, 264, 266, 268], "write_al": 239, "write_command": 239, "payload": 239, "guarante": 239, "unread": 239, "silent": 239, "vastli": [240, 258, 260, 261, 262, 264], "amp": 240, "onnx": 240, "micro_speech": 241, "inter": 241, "trainer": 241, "evaluat": 241, "stock": 241, "warranti": 242, "disclaim": 242, "impli": [242, 260], "concern": [242, 257, 268], "ask": [242, 256], "question": [242, 256, 258], "quick": 242, "spdx": 242, "zlib": 242, "licensor": 242, "laboratori": 242, "inc": 242, "liabl": 242, "damag": 242, "aris": 242, "grant": 242, "anyon": [242, 256, 259], "alter": 242, "freeli": 242, "restrict": 242, "misrepres": 242, "claim": 242, "wrote": 242, "acknowledg": 242, "appreci": 242, "plainli": 242, "notic": [242, 256], "keyword_spotting_numb": [243, 267], "pprint": 243, "grab": 243, "audio_sample_dir": 243, "audio_sample_fn": 243, "audio_sample_path": 243, "audio_sample_data": 243, "audio_sample_rate_hz": 243, "audio_sample_length": 243, "audio_sample_length_second": 243, "1f": 243, "khz": 243, "aws_ar": 243, "ae": 243, "hala": 243, "1209d48a": 243, "0khz": 243, "mltk_model_archive_path": 243, "class_label": [243, 266], "extracted_arch": [243, 252], "tflite_param": 243, "tflite_frontend_set": 243, "pformat": 243, "frontend_sample_length": 243, "adjusted_audio_sample_data": 243, "norm_spectrogram": 243, "tflite_input_spectrogram": 243, "80500": 243, "98x40": 243, "largest": [243, 266], "think": 243, "classification_result": 243, "predicted_class_index": 243, "prediction_confid": 243, "nbelong": 243, "99609375": [243, 267], "tflm_model": 243, "sw": 243, "kbyte": [243, 248], "evaluation_result": [244, 258, 260], "674": 244, "919": 244, "987": 244, "880": 244, "484": 244, "411": 244, "893": 244, "981": [244, 258], "865": [244, 266], "832": 244, "auto_encod": 244, "308": [244, 257], "726": 244, "urllib": [245, 247, 248, 249, 251, 252], "tempfil": [245, 247, 248, 249, 251, 252, 268], "query_platform": 245, "tflite_model_url": [245, 247, 248, 249, 251, 252], "necesari": 245, "test_help": [245, 248, 249], "normpath": [245, 247, 248, 249, 251, 252], "gettempdir": [245, 247, 248, 249, 251, 252, 268], "wb": [245, 247, 248, 249, 251, 252, 266], "urlopen": [245, 247, 248, 249, 251, 252], "copyfileobj": [245, 247, 248, 249, 251, 252], "884": [245, 248], "5p": [245, 248, 266], "0n": [245, 248], "985": [245, 248], "148": [245, 248, 264], "187": [245, 248, 260], "5u": [245, 248, 258, 266], "718": [245, 248], "7u": [245, 248, 258, 266], "3u": [245, 248, 258, 266], "0p": [245, 248, 258, 266], "5n": [245, 248, 258, 266], "153": [245, 260, 264, 266], "9p": 245, "8p": [245, 258], "719": 245, "4u": [245, 266], "223": 245, "2n": [245, 266], "platform_nam": 245, "conenct": 245, "brd2601a": 245, "brd4186b": 245, "956": 245, "untrac": [245, 246, 247, 250, 252], "_jit_compiled_convolution_op": [245, 246, 247, 250, 252], "tmpc8yu6n46": 245, "reed": [245, 246, 247, 250, 251, 252, 258, 264, 266], "766": [245, 246, 247, 250, 252], "userwarn": [245, 246, 247, 250, 252, 258, 266], "anywai": [245, 246, 247, 250, 252, 258], "415": 245, "219": 245, "6u": [245, 258, 266], "183": 245, "332": 245, "1n": [245, 258], "tmpvpnr_8op": 246, "tmp6fs6_29o": 246, "_________________________________________________________________": [247, 251, 252, 258], "average_pooling2d": [247, 248, 249, 252, 260], "averagep": [247, 252], "ooling2d": [247, 252], "conv2d_1": [247, 248, 249, 252, 258], "3472": [247, 252], "conv2d_2": [247, 248, 249, 252, 258], "3480": [247, 252], "batch_norm": [247, 248, 249, 251, 252, 260], "batchn": [247, 251, 252, 260], "ormal": [247, 251, 252, 260], "average_pooling2d_1": [247, 248, 249, 252], "epooling2d": [247, 252], "1155": [247, 252], "activation_1": [247, 252, 258], "443": [247, 252, 264], "395": [247, 252], "0242764704ebb6643ae7df4a6536bb83": 247, "06t16": [247, 251], "472z": 247, "trained_model": [247, 251, 252], "kws_ref_model": [247, 251, 252], "external_tflite_path": [247, 251, 252], "49x10x1": [247, 251], "394": [247, 251, 258, 268], "addon": [247, 252, 266], "satisfi": [247, 252], "typeguard": [247, 252], "pypars": [247, 252], "333": [247, 252, 260, 266], "tmpv8h9r1ze": 247, "b13b48c": [247, 248, 251, 252, 266], "72320": [247, 252], "f84b0517005c8392d9746f6c6dae1f50": 247, "327z": 247, "tflite_micro_model": [248, 265], "72192": 248, "2021": [248, 249, 264], "18t16": [248, 249], "028z": [248, 249], "e8463b1e31855c5e6319493226b8b582": [248, 249], "recorded_lay": 248, "inp": 248, "tinput": [248, 249], "outp": 248, "toutput": [248, 249], "op0": [248, 249], "conv2d_input_int8": [248, 249], "biasadd": [248, 249], "readvariableop": [248, 249], "op1": [248, 249], "avgpool": [248, 249], "op2": [248, 249, 266], "op3": [248, 249, 266], "fusedbatchnormv3": [248, 249], "conv2d1": [248, 249], "op4": [248, 249], "op5": [248, 249], "op6": [248, 249], "matmul": [248, 249], "op7": [248, 249], "identity_int8": [248, 249], "arbitrari": 249, "tflite_model_param": 249, "my_bool": 249, "my_int": 249, "my_float": 249, "my_list_int": 249, "my_list_float": 249, "my_list_str": 249, "140000104904175": 249, "100000023841858": 249, "200000047683716": 249, "299999952316284": 249, "x01": 249, "x02": 249, "x03": 249, "x04": 249, "_load_sampl": 249, "class_nam": [249, 258], "img_arrai": 249, "rock_sampl": 249, "paper_sampl": 249, "scissors_sampl": 249, "prep": 249, "tfliteconv2dlay": 249, "tflitefullyconnectedlay": 249, "tflitepooling2dlay": 249, "conv2d_param": 249, "fully_connected_param": 249, "pool_param": 249, "padding_width": 249, "padding_height": 249, "conv2d_lay": 249, "updated_tflite_path": 249, "modified_image_example1": 249, "updated_tflite_model": 249, "updated_conv2d_lay": 249, "updated_filt": 249, "updated_quant": 249, "allclos": 249, "training_result": 250, "tmp6ab8ka6k": 250, "tmpgclx2y4d": 250, "tmppbx5mcil": 250, "tmpeoo7jyna": 250, "9600": 251, "648": [251, 264, 266], "16004": 251, "668": 251, "25472": 251, "a4fadcb07cc13bf4ce4249e7349cadf3": 251, "836z": 251, "831z": 251, "geforc": 252, "rtx": 252, "2060": 252, "tmp_model": 252, "tmpsa1z1ouz": 252, "dive": 253, "hard": [254, 258, 260, 265, 268], "defici": 254, "ideal": [254, 259, 265, 267, 268], "similarli": [254, 256], "refactor": 254, "easi": [255, 260, 268], "collabor": 255, "paid": [255, 256], "subscript": 255, "price": [255, 268], "relav": 255, "informa": 255, "disk": 255, "plotli": 255, "especi": [255, 258, 260, 261], "slack": 255, "artifact": 255, "audit": 255, "computation": [256, 265], "dai": 256, "laptop": 256, "rent": 256, "matchmak": 256, "aggreg": 256, "10x": [256, 259], "caution": 256, "affili": 256, "incur": 256, "hr": 256, "12hr": 256, "flexibl": 256, "isol": 256, "unprivileg": 256, "docker": 256, "tier": 256, "datacent": 256, "hobbyist": 256, "vet": 256, "partner": 256, "lose": 256, "steal": 256, "incentiv": 256, "reput": 256, "exploit": 256, "roughli": 256, "payment": 256, "whenver": 256, "hit": 256, "destroi": 256, "outstand": 256, "rental": 256, "bandwidth": 256, "inact": 256, "offlin": 256, "broken": 256, "consider": 256, "stripe": 256, "confirm": 256, "dialog": 256, "chose": 256, "verif": 256, "moment": 256, "contact": 256, "fraudul": 256, "editor": [256, 257, 258, 260, 264], "aaaac3nzac1lzdi1nte5aaaaibqhisau": 256, "bhj7z6hpoqe0gx": 256, "efjau27aim738c4byojw": 256, "popup": 256, "10gb": 256, "hourli": 256, "slider": 256, "narrow": 256, "visibl": 256, "35023": 256, "trashcan": [256, 268], "icon": 256, "lost": [256, 267], "wide": 256, "cheaper": 256, "dlperf": 256, "mid": 256, "Not": [256, 266], "i7": 256, "wheel": 256, "wast": 256, "libsndfil": 256, "machinc": 256, "advantag": [256, 266], "spun": 256, "my_dataset_download": 256, "spend": [256, 258, 259, 260, 264, 268], "monei": [256, 259, 268], "untrain": 256, "3hr": 256, "amd": 256, "threadripp": 256, "epyc": 256, "xeon": 256, "39975": 256, "ve": 256, "understand": [257, 258, 260, 261, 262, 267], "favorit": [257, 258, 260, 264], "exclam": [257, 258, 260, 261], "zsh": 257, "fish": [257, 262], "powershel": 257, "pwsh": 257, "run_model_profiler_benchmark": 257, "tse_compress": 257, "utest": [257, 258, 260, 261], "review": [257, 258, 259, 260, 261, 262, 264], "someon": [257, 258], "nearli": 257, "certain": [257, 258, 268], "theoret": 257, "signet": 257, "friendli": 257, "introduct": 257, "abc": 257, "thumb": 257, "backup": 257, "192x192": 257, "sharpen": 257, "harpen": 257, "blur": 257, "heurist": 257, "blurri": 257, "data_preprocessor": 257, "formula": 257, "signature1": 257, "signature2": 257, "THEN": 257, "intent": 257, "hacker": 257, "spoof": 257, "469": 257, "465": 257, "982": 257, "245": 257, "intellig": 258, "differenti": 258, "learnabl": 258, "effort": 258, "10k": [258, 259, 260], "100k": [258, 260, 268], "orient": 258, "stuff": 258, "redund": 258, "duplic": [258, 260], "mislabl": 258, "degrad": 258, "sensor": 258, "patool": 258, "oe": 258, "tmp_archiv": 258, "sub_dir": 258, "mpimg": 258, "class_sampl": 258, "class_dir": 258, "sample_filenam": 258, "imread": 258, "fortun": 258, "purchas": 258, "image_classifier_imag": 258, "clearli": 258, "retrain": 258, "scratch": [258, 260, 262], "my_rock_paper_scissor": 258, "newli": [258, 259, 260], "internet": 258, "variat": 258, "converg": 258, "extrem": [258, 260], "yet": [258, 259, 260, 264], "29t23": 258, "550": 258, "02t17": 258, "359": [258, 260, 264], "204": 258, "max_pooling2d": 258, "2320": 258, "max_pooling2d_1": 258, "maxpool": 258, "4640": 258, "activation_2": 258, "max_pooling2d_2": 258, "65568": 258, "activation_3": 258, "820": 258, "303": [258, 260], "29t22": 258, "350": [258, 260], "2482ff1c6e512f70479605f20e18e5fc": 258, "03t23": 258, "754z": 258, "possibli": [258, 260], "345": 258, "141": 258, "3p": 258, "2u": [258, 266], "745": 258, "226": 258, "1u": [258, 266], "7n": 258, "8u": 258, "559938": 258, "358": [258, 260], "481894": 258, "offload": [258, 260], "revert": 258, "feasibl": [258, 260], "night": [258, 260], "wrong": [258, 260, 265], "037": 258, "476": 258, "083": 258, "461": 258, "042": 258, "554": 258, "600": [258, 260, 264], "chanc": [258, 260], "wider": [258, 260], "filer": [258, 260], "safe": [258, 260], "sink": 259, "attach": 259, "ground": [259, 261], "segger": 259, "program_app": 259, "audio_io": 259, "keyword_spotting_alexa": 259, "me": 259, "joke": 259, "opu": 259, "vad": 259, "decompress": 259, "vdac": 259, "3v3": 259, "acquir": [259, 261], "besid": 259, "divers": [259, 260], "substanti": [259, 267], "adequ": 259, "intricaci": 259, "imbalanc": 259, "choos": [259, 261, 268], "shown": [259, 266], "importantli": 259, "plug": 259, "dummi": 259, "2hr": 259, "keyword_spottong_alexa": 259, "mltk_stack_siz": 259, "audio_classifier_enable_audio_io": 259, "mltk_audio_classifier_download": 259, "music": 259, "stori": 259, "wstk": 259, "baudrat": 259, "rebuild": 259, "discuss": [260, 264], "accent": [260, 268], "thousand": 260, "overcom": 260, "15k": 260, "harder": [260, 268], "switch": 260, "poor": [260, 267], "heard": [260, 268], "household": 260, "meet": [260, 264], "suffer": 260, "dirti": 260, "corrupt": 260, "mislabel": 260, "insight": 260, "amplifi": 260, "diverg": [260, 266], "church": 260, "survei": 260, "constantli": [260, 268], "Near": [260, 264], "min_signal_remain": [260, 261], "playback": 260, "my_keyword_spotting_on_off": 260, "care": 260, "ultim": [260, 262], "my_keyword_spotting_on_off_v3": 260, "__________________________________________________________________________________________________": 260, "15650": 260, "pointwise_expand_conv": 260, "conv2": 260, "aliz": 260, "re_lu": 260, "mtconv": 260, "multiscaletemporalco": 260, "1350": 260, "nvolut": 260, "batch_normalization_1": 260, "batchno": 260, "rmaliz": 260, "re_lu_1": 260, "strided_residu": 260, "2500": 260, "pointwise_contract_conv": 260, "con": [260, 268], "v2d": 260, "batch_normalization_3": 260, "batch_normalization_2": 260, "re_lu_2": 260, "re_lu_3": 260, "batch_normalization_4": 260, "re_lu_4": 260, "batch_normalization_5": 260, "re_lu_5": 260, "batch_normalization_6": 260, "add_1": 260, "re_lu_6": 260, "batch_normalization_7": 260, "re_lu_7": 260, "batch_normalization_8": 260, "re_lu_8": 260, "batch_normalization_9": 260, "add_2": 260, "re_lu_9": 260, "batch_normalization_10": 260, "re_lu_10": 260, "batch_normalization_11": 260, "re_lu_11": 260, "batch_normalization_12": 260, "add_3": 260, "re_lu_12": 260, "batch_normalization_13": 260, "re_lu_13": 260, "batch_normalization_14": 260, "re_lu_14": 260, "batch_normalization_16": 260, "batch_normalization_15": 260, "re_lu_15": 260, "add_4": 260, "re_lu_16": 260, "batch_normalization_17": 260, "re_lu_17": 260, "batch_normalization_18": 260, "re_lu_18": 260, "batch_normalization_19": 260, "add_5": 260, "re_lu_19": 260, "batch_normalization_20": 260, "re_lu_20": 260, "batch_normalization_21": 260, "re_lu_21": 260, "batch_normalization_22": 260, "add_6": 260, "re_lu_22": 260, "batch_normalization_23": 260, "re_lu_23": 260, "batch_normalization_24": 260, "re_lu_24": 260, "batch_normalization_25": 260, "add_7": 260, "re_lu_25": 260, "batch_normalization_26": 260, "re_lu_26": 260, "batch_normalization_27": 260, "re_lu_27": 260, "batch_normalization_29": 260, "batch_normalization_28": 260, "re_lu_28": 260, "add_8": 260, "re_lu_29": 260, "batch_normalization_30": 260, "re_lu_30": 260, "batch_normalization_31": 260, "re_lu_31": 260, "batch_normalization_32": 260, "add_9": 260, "re_lu_32": 260, "conv": 260, "batch_normalization_33": 260, "re_lu_33": 260, "multiscaletemporalc": 260, "onvolut": 260, "batch_normalization_34": 260, "re_lu_34": 260, "nv2d": 260, "batch_normalization_35": 260, "add_10": 260, "re_lu_35": 260, "batch_normalization_36": 260, "re_lu_36": 260, "batch_normalization_37": 260, "re_lu_37": 260, "batch_normalization_38": 260, "add_11": 260, "re_lu_38": 260, "batch_normalization_39": 260, "re_lu_39": 260, "batch_normalization_40": 260, "re_lu_40": 260, "batch_normalization_42": 260, "batch_normalization_41": 260, "re_lu_41": 260, "add_12": 260, "re_lu_42": 260, "batch_normalization_43": 260, "re_lu_43": 260, "batch_normalization_44": 260, "re_lu_44": 260, "batch_normalization_45": 260, "add_13": 260, "re_lu_45": 260, "batch_normalization_46": 260, "re_lu_46": 260, "batch_normalization_47": 260, "re_lu_47": 260, "batch_normalization_48": 260, "add_14": 260, "re_lu_48": 260, "batch_normalization_49": 260, "re_lu_49": 260, "batch_normalization_50": 260, "re_lu_50": 260, "batch_normalization_51": 260, "add_15": 260, "re_lu_51": 260, "batch_normalization_52": 260, "re_lu_52": 260, "batch_normalization_53": 260, "re_lu_53": 260, "batch_normalization_55": 260, "batch_normalization_54": 260, "re_lu_54": 260, "add_16": 260, "re_lu_55": 260, "batch_normalization_56": 260, "re_lu_56": 260, "batch_normalization_57": 260, "re_lu_57": 260, "batch_normalization_58": 260, "add_17": 260, "re_lu_58": 260, "batch_normalization_59": 260, "re_lu_59": 260, "batch_normalization_60": 260, "re_lu_60": 260, "batch_normalization_61": 260, "add_18": 260, "re_lu_61": 260, "batch_normalization_62": 260, "re_lu_62": 260, "batch_normalization_63": 260, "re_lu_63": 260, "batch_normalization_64": 260, "add_19": 260, "re_lu_64": 260, "averagepool": 260, "ing2d": 260, "803": 260, "055": 260, "98x1x50": 260, "98x1x150": 260, "1x1x50": 260, "49x1x150": 260, "9x1x150": 260, "49x1x50": 260, "1x1x150": 260, "25x1x150": 260, "25x1x50": 260, "13x1x150": 260, "13x1x50": 260, "7x1x150": 260, "7x1x50": 260, "4x1x150": 260, "4x1x50": 260, "888": 260, "957": 260, "ff35e03b5bd73d1e70c4fb37444e1eb2": 260, "15t22": 260, "758z": 260, "608": 260, "50x3x1x104": 260, "1x98x1x50": 260, "735": 260, "428": 260, "150x1x1x50": 260, "1x98x1x150": 260, "1x9x1x150": 260, "1x49x1x150": 260, "367": 260, "50x1x1x150": 260, "1x49x1x50": 260, "50x1x1x50": 260, "757": 260, "1x25x1x150": 260, "376": 260, "1x25x1x50": 260, "386": 260, "1x13x1x150": 260, "1x13x1x50": 260, "650": 260, "1x7x1x150": 260, "1x7x1x50": 260, "875": 260, "1x4x1x150": 260, "1x4x1x50": 260, "1x1x1x50": 260, "1x50": 260, "237": 260, "3x50": 260, "583819": 260, "128kb": 260, "115kb": 260, "112kb": 260, "110kb": 260, "136kb": 260, "117kb": 260, "113kb": 260, "111kb": 260, "955": 260, "602": [260, 264], "301": 260, "630": [260, 264], "712": 260, "643935": 260, "autograph": 260, "pyct": 260, "static_analysi": 260, "lamba_check": 260, "09": 260, "fuction": 260, "statement": [260, 263], "56089": 260, "400": 260, "10400": 260, "20400": 260, "25400": 260, "30400": 260, "35400": 260, "40400": 260, "5629": 260, "3200": 260, "0010": 260, "183m": 260, "5616": 260, "3350": 260, "184m": 260, "5739": 260, "3433": 260, "7347": 260, "3333": 260, "eta": 260, "6279": 260, "2800": 260, "5664": 260, "2900": 260, "5099": 260, "3300": 260, "582m": 260, "3087": 260, "3067": 260, "5246": 260, "3000": 260, "4343": 260, "4006": 260, "3533": 260, "648m": 260, "2055": 260, "3567": 260, "63predict": 260, "21predict": 260, "37predict": 260, "88predict": 260, "007": 260, "163": 260, "45predict": 260, "95predict": 260, "770": [260, 266], "505": [260, 266], "vm": 260, "intend": [260, 268], "certainli": 260, "benefici": 260, "fed": 260, "simultan": 260, "627": 260, "010": 260, "553": [260, 266, 268], "024": 260, "468": [260, 264], "scenario": 260, "mouth": [260, 262, 264], "inch": [260, 262, 264], "javascript": 261, "youtub": 261, "ran": 261, "keyword_spotting_pacman_v3": 261, "likewis": 261, "arrow": 261, "ghost": 261, "954": 261, "169": 261, "656699": 261, "engin": [261, 264, 266], "notif": 261, "lucio": 261, "panpinto": 261, "p5": 261, "vanilla": 261, "css": 261, "s37": 261, "keyword_spotting_with_transfer_learn": 262, "aphex34": 262, "sa": [262, 268], "textur": 262, "abstract": 262, "Of": 262, "relearn": 262, "bike": 262, "130m": 262, "tune": [262, 264], "shorter": 262, "mtlkobject": 262, "callstack": 263, "audiodatageneratorset": 264, "my_keyword_spotting_mobilenetv2": 264, "saniti": 264, "spec": 264, "1410": 264, "custommaskwarn": 264, "mask": 264, "custom_object": 264, "layer_config": 264, "serialize_layer_fn": 264, "fully_quant": 264, "inference_typ": 264, "input_inference_typ": 264, "output_inference_typ": 264, "00001": 264, "00002": 264, "00095": 264, "00003": 264, "0009025": 264, "30x25x32": 264, "30x25x16": 264, "30x25x96": 264, "31x27x96": 264, "15x13x96": 264, "15x13x24": 264, "15x13x144": 264, "17x15x144": 264, "8x7x144": 264, "8x7x32": 264, "8x7x192": 264, "3x3x192": 264, "1x1x192": 264, "9x9x192": 264, "4x4x192": 264, "4x4x384": 264, "3x3x384": 264, "1x1x384": 264, "4x4x576": 264, "576": 264, "3x3x576": 264, "1x1x576": 264, "5x5x576": 264, "2x2x576": 264, "2x2x160": 264, "2x2x960": 264, "1x1x160": 264, "3x3x960": 264, "1x1x960": 264, "2x2x320": 264, "2x2x1280": 264, "1x1x320": 264, "925": 264, "120e1504bcad5f01e644acf9d21b66ff": 264, "14t21": 264, "975z": 264, "7mb": 264, "5mb": 264, "15x13x16": 264, "17x15x96": 264, "8x7x96": 264, "8x7x16": 264, "9x9x96": 264, "4x4x32": 264, "4x4x288": 264, "3x3x288": 264, "1x1x288": 264, "5x5x288": 264, "2x2x288": 264, "2x2x80": 264, "2x2x480": 264, "1x1x80": 264, "3x3x480": 264, "1x1x480": 264, "819": 264, "371": 264, "d226b3204bbaf021713d425e9bdf623c": 264, "895z": 264, "983": 264, "983kb": 264, "368": 264, "1x30x25x16": 264, "378": 264, "318": 264, "8x1x1x16": 264, "149": 264, "1x15x13x16": 264, "655": 264, "1x15x13x96": 264, "393": 264, "286": 264, "146": 264, "544": 264, "1x17x15x96": 264, "1x8x7x96": 264, "134": 264, "1x8x7x16": 264, "188": 264, "161": [264, 266], "158": 264, "1x9x9x96": 264, "1x4x4x32": 264, "192x1x1x32": 264, "1x4x4x192": 264, "1x3x3x192": 264, "32x1x1x192": 264, "295": 264, "48x1x1x192": 264, "221": 264, "288x1x1x48": 264, "1x4x4x288": 264, "1x3x3x288": 264, "48x1x1x288": 264, "1x5x5x288": 264, "1x2x2x288": 264, "80x1x1x288": 264, "1x2x2x80": 264, "313": 264, "480x1x1x80": 264, "1x2x2x480": 264, "1x3x3x480": 264, "232": 264, "80x1x1x480": 264, "160x1x1x480": 264, "1x2x2x160": 264, "1280x1x1x160": 264, "1x2x2x1280": 264, "2560": 264, "2047": [264, 266], "1x1280": 264, "8x1280": 264, "375422": 264, "unfortun": [264, 266], "realli": 264, "120m": 264, "overkil": 264, "228": 264, "201": 264, "121": 264, "606283": 264, "overhead": [265, 266, 267], "loos": [265, 267], "although": 265, "wer": 265, "tricki": 265, "pain": 265, "difficult": 265, "assist": 265, "inspect": 265, "problemat": 265, "leav": 265, "recov": 265, "quantization_report": [265, 267], "rmse": [265, 267], "evenli": [265, 267], "normalized_input_sampl": 265, "input_sampl": 265, "input_scaling_valu": 265, "reciproc": 265, "divis": 265, "hpp": 265, "namespac": 265, "uint16_t": 265, "source_input_data": 265, "sl_tflite_model_arrai": 265, "void": 265, "input_scal": 265, "pointer": 265, "tflitetensorview": 265, "tflite_micro_util": 265, "mean_and_std_en": 265, "samplewise_mean_std_tensor": 265, "preced": 265, "qunat": 265, "introduc": 265, "fusion": 265, "basi": 265, "matlab": 266, "cifar10_matlab_model": 266, "exportonnxnetwork": 266, "trainednet": 266, "straight": 266, "assumpt": 266, "necessarili": 266, "mini": 266, "nchw": 266, "nhwc": 266, "onnx_tf": 266, "onnsim": 266, "daquexian": 266, "openvino_dev": 266, "openvino2tensorflow": 266, "primarili": [266, 268], "pinto0309": 266, "tensorflow_dataset": 266, "onnx_model_archive_url": 266, "misc": 266, "onnx_model_archive_sha1": 266, "c53827fc8b765183381cdc338afb88f735479d97": 266, "cifar10_matlab_model_example_dir": 266, "webapg": 266, "onnx_model_path": 266, "working_dir": 266, "cifar10_matlab_model_onnx_to_tflit": 266, "model_nam": 266, "particularli": 266, "mapped_class_label": 266, "class_id_map": 266, "veru": 266, "onnx_model": 266, "tf_rep": 266, "x_test_channels_first": 266, "chw": 266, "tensorflow_addon": 266, "ensure_tf_instal": 266, "nightli": 266, "bug": 266, "578": 266, "964": 266, "679": 266, "556": 266, "287": 266, "085": 266, "073": 266, "673": 266, "onnxsim": 266, "simplified_onnx_model": 266, "success": 266, "simplified_onnx_model_path": 266, "doabl": 266, "mo": 266, "mo_main": 266, "shell_cmd": 266, "openvino_out_dir": 266, "__file__": 266, "input_model": 266, "fp32": 266, "7019": 266, "cdb9bec7210": 266, "xml": [266, 268], "intel": 266, "tm": 266, "cid": 266, "prod": 266, "campid": 266, "ww_2022_bu_iotg_openvino": 266, "upg_al": 266, "v11": 266, "dl": 266, "openvino2tensorflow_out_dir": 266, "openvino_xml_nam": 266, "nt": 266, "openvino2tensorflow_exe_cmd": 266, "model_output_path": 266, "output_saved_model": 266, "output_no_quant_float32_tflit": 266, "tflite_int8_model_path": 266, "tflite_quant_model": 266, "87295": 266, "mvp_estimators_v0": 266, "962": 266, "1x36x36x3": 266, "310": 266, "64x5x5x3": 266, "1x32x32x64": 266, "1x16x16x64": 266, "1x20x20x64": 266, "64x5x5x64": 266, "248": 266, "9u": 266, "1x4x4x64": 266, "64x4x4x64": 266, "10x1x1x64": 266, "1x1x1x10": 266, "36x36x3": 266, "32x32x64": 266, "5x5x3": 266, "16x16x64": 266, "20x20x64": 266, "5x5x64": 266, "1x1x10": 266, "909": 266, "429": 266, "949": 266, "889": 266, "796": 266, "778": 266, "389": 266, "investig": 267, "rnn": 267, "seri": 267, "predominantli": 267, "sentiment": 267, "tradit": 267, "feedforward": 267, "hidden": 267, "weather": 267, "forecast": 267, "hang": 267, "tend": 267, "achiev": 267, "spectrogram_uint16": 267, "normalized_spectrogram_float32": 267, "lstm_input": 267, "lstm_featur": 267, "surround": 267, "layernormlstmcel": 267, "op_nam": 267, "num_el": 267, "stddev": 267, "mean_error": 267, "max_abs_error": 267, "zero_point": 267, "3920": 267, "062017273": 267, "00017696062": 267, "23714127": 267, "0038493355": 267, "18038306": 267, "997680300000006": 267, "3439514403696602": 267, "11760": 267, "03295127": 267, "0004035881": 267, "12613823": 267, "0010864673": 267, "1565376": 267, "917088": 267, "21056668442429635": 267, "5880": 267, "035719264": 267, "0008537201": 267, "2155346": 267, "001277669": 267, "16985875": 267, "31398125": 267, "2104365896947685": 267, "1960": 267, "07850939": 267, "00044384212": 267, "18113996": 267, "0061679697": 267, "26804927": 267, "35256385": 267, "2929924888823545": 267, "028141052": 267, "167329e": 267, "09747819": 267, "00079393975": 267, "123283505": 267, "437293775": 267, "2285539861207166": 267, "061724134": 267, "01658498": 267, "44125158": 267, "0051669613": 267, "007843136": 267, "9999996800000002": 267, "164902700610854": 267, "38768843": 267, "002292617": 267, "72559375": 267, "16979334": 267, "2712529": 267, "1694895": 267, "3241368214696956": 267, "0008727249": 267, "00027066743": 267, "0026643767": 267, "2000795e": 267, "00390625": 267, "24554763491265805": 267, "pronunci": 268, "sad": 268, "excit": 268, "characterisit": 268, "50k": 268, "20k": 268, "sparingli": 268, "russian": 268, "smart": 268, "lid": 268, "react": 268, "closet": 268, "solv": 268, "cheap": 268, "januari": 268, "websit": 268, "wavenet": 268, "neural2": 268, "000004": 268, "usd": 268, "000016": 268, "markup": 268, "xmln": 268, "w3": 268, "2001": 268, "synthesi": 268, "lang": 268, "jennyneur": 268, "mstt": 268, "cheer": 268, "prosodi": 268, "220": 268, "credit": 268, "quota": 268, "humanlik": 268, "synthes": 268, "prebuilt": 268, "brand": 268, "polli": 268, "lifelik": 268, "engag": 268, "cognit": 268, "pivot": 268, "speech_kei": 268, "e8699507e7c04a4cb8afdba62986987c": 268, "speech_region": 268, "westus2": 268, "codelab": 268, "serivc": 268, "google_application_credenti": 268, "private_kei": 268, "private_key_id": 268, "client_email": 268, "neb6y5zodg2dyjmm": 268, "jdahcnaprd9": 268, "hamrg3jl2jisvzo": 268, "03aexjyoewtblwfpyxpnqyz4wkbgqdd": 268, "yvywcrbxeecn": 268, "client_id": 268, "gcp_service_account_json_path": 268, "gcp_kei": 268, "gcp_service_account_json": 268, "service_account": 268, "project_id": 268, "strang": 268, "firefli": 268, "374023": 268, "8e074b2dc4da026810d6b728e1588e79a745a08c": 268, "nmiievqibadanbgkqhkig9w0baqefaascbkcwggsjageaaoibaqcuq4fpo6ilib78": 268, "nmhyrhb1ei2pcegtthrlxbqwe6rswppttopqvplsbxs30frarpd6d4hgqel46gc2d": 268, "ncrhh8omrgkmb4pagzhcefjd": 268, "xjkcknsyipltqgbjau3pt": 268, "wmukihdyiyzdd6qjr3": 268, "nugghp8hkt1gxgcgdfkplwvoj9b3m6b5": 268, "3cvgbthciycccykhqnfon6mtee6ofmpz": 268, "nwxy3frewywjiwiiivpbqanoijs92gb": 268, "ffgsg2ta63tgszmbvvhjtd3a98ewmvwsz": 268, "nbipxjqh5qlh3ychdgt42mqbxrinn11kmyoc56a2ic4mvrq3i8oapos2l6uglwx9j": 268, "ns6sq5jw1agmbaaecggeat7ps2vknnk61fpvcanjszangwkonmfru48rgvn7rpetq": 268, "n9": 268, "gkgfzium3hlit5ek7jkzlmg4higcfkvrqjlpglsagi8rpvcubxs8xncljujvm3": 268, "nvhf9arln": 268, "s3nkedic8tpnv": 268, "ouji": 268, "yivhpqmewbsxmdtd2jd3vbsf34": 268, "7rou5dz": 268, "n56bgmbbneb6y5zodg2dyjmm": 268, "hamrg3jl2jisvzogrlenelkznrp": 268, "n9t0uwqiv5ejitovbzd": 268, "ezadffjftdrkfwv1qixemiak1atbs5bhknk5ecyffmpm": 268, "ncivgp3wrxq7nfrjktnwdjzeafjqw4ckwlmn4xc2fgqkbgqdjobnxjgo7gq1pfeiq": 268, "nvssuwjixy63tru6jwrrhr1b9xuph6vivh2dz4lpfpywer9lx6omtn6aizihtpq1i": 268, "n19eskh0h6hwbw2ydzwghzrmhb9xs5i": 268, "hibkwrz9nw77uwh1d9g": 268, "ejcn6a2zl2ig": 268, "nk03aexjyoewtblwfpyxpnqyz4wkbgqdd": 268, "yvywcrbxeecna0fohw8wiro6ds6g84m": 268, "nmczkr0yooxpb8zriim": 268, "mv7paccelasz4lzbc2hcb1mvv9p6o2ieuhqngabwlfwid": 268, "ng7cc7rm4qee87p5u4obuhpciuzpa3ueaqbhxmwd1oxw5rjvxenn": 268, "7g4jzkxeru": 268, "nqif7cw6zhwkbgby5dctjwdpssol8yfnc36jyitjufn43nms30xlifiidwmmtnpui": 268, "nrmom42sshi1sgtegslyboiij6zbf": 268, "vrmm4x1y9ahzsjyngnxw9bc": 268, "s5nlmrjcck": 268, "n6iw30jtumlivjgtumocqwsuaewbrmrszgjl4zin3xl": 268, "aifkcptgxfg7daogavz6b": 268, "njmuzkjpoirjfsvrkhuus7p2dhojr5n0hbyct9a09dwkfnyiu": 268, "awhqnib": 268, "pymv2m8": 268, "njttmms9orc6gzpus4r8m7ipa": 268, "myn": 268, "twhvrh3pbwxzqw3eiroqrepxhepuuyiwz6r": 268, "nuvpkw3rrl": 268, "wjihdqavo89wrk": 268, "gzldgynqyqixescgyeaj": 268, "8nsq1ugod7sqfpia": 268, "n3wur4a": 268, "uyt8": 268, "nuatk2ww": 268, "gtbc": 268, "eddjre1lz3f": 268, "uqgtsxlsv7t1mw4a7ekrkfl36p": 268, "nlnvefbtb3ucd8jj0lpbtoqru9i8n": 268, "a4fqopmljoyelgtyt1oi": 268, "vxfwya7cmrz": 268, "n49be21meuv3prv1qwrrteem": 268, "iam": 268, "gserviceaccount": 268, "109154742213348109867": 268, "auth_uri": 268, "oauth2": 268, "auth": 268, "token_uri": 268, "auth_provider_x509_cert_url": 268, "cert": 268, "client_x509_cert_url": 268, "x509": 268, "40strang": 268, "dg": 268, "aws_access_key_id": 268, "akiatzwwzr5twbunf6ix": 268, "aws_secret_access_kei": 268, "v0irhpugenwj1ca7savduf1uxw84bgkzqpowlfdr": 268, "aws_default_region": 268, "west": 268, "aag": 268, "nwarn": 268, "npress": 268, "623": 268, "52word": 268, "17word": 268}, "objects": {"mltk.core": [[114, 0, 1, "", "AudioDatasetMixin"], [162, 0, 1, "", "AutoEncoderEvaluationResults"], [162, 0, 1, "", "ClassifierEvaluationResults"], [115, 0, 1, "", "DatasetMixin"], [116, 0, 1, "", "EvaluateAutoEncoderMixin"], [117, 0, 1, "", "EvaluateClassifierMixin"], [118, 0, 1, "", "EvaluateMixin"], [162, 0, 1, "", "EvaluationResults"], [119, 0, 1, "", "ImageDatasetMixin"], [113, 3, 1, "", "KerasModel"], [121, 0, 1, "", "MltkDataset"], [122, 0, 1, "", "MltkModel"], [123, 0, 1, "", "MltkModelEvent"], [124, 0, 1, "", "SshMixin"], [177, 0, 1, "", "TfliteActivation"], [178, 0, 1, "", "TfliteAddLayer"], [180, 0, 1, "", "TfliteConv2DLayerOptions"], [179, 0, 1, "", "TfliteConv2dLayer"], [181, 0, 1, "", "TfliteConvParams"], [183, 0, 1, "", "TfliteDepthwiseConv2DLayerOptions"], [182, 0, 1, "", "TfliteDepthwiseConv2dLayer"], [184, 0, 1, "", "TfliteDepthwiseConvParams"], [185, 0, 1, "", "TfliteDequantizeLayer"], [187, 0, 1, "", "TfliteFullyConnectedLayer"], [188, 0, 1, "", "TfliteFullyConnectedLayerOptions"], [189, 0, 1, "", "TfliteFullyConnectedParams"], [191, 0, 1, "", "TfliteLayer"], [192, 0, 1, "", "TfliteModel"], [194, 0, 1, "", "TfliteModelParameters"], [193, 0, 1, "", "TflitePadding"], [196, 0, 1, "", "TflitePool2DLayerOptions"], [197, 0, 1, "", "TflitePoolParams"], [195, 0, 1, "", "TflitePooling2dLayer"], [198, 0, 1, "", "TfliteQuantization"], [199, 0, 1, "", "TfliteQuantizeLayer"], [200, 0, 1, "", "TfliteReshapeLayer"], [201, 0, 1, "", "TfliteShape"], [202, 0, 1, "", "TfliteTensor"], [203, 0, 1, "", "TfliteTransposeConvLayer"], [204, 0, 1, "", "TfliteTransposeConvLayerOptions"], [205, 0, 1, "", "TfliteTransposeConvParams"], [206, 0, 1, "", "TfliteUnidirectionalLstmLayer"], [207, 0, 1, "", "TfliteUnidirectionalLstmLayerOptions"], [125, 0, 1, "", "TrainMixin"], [127, 0, 1, "", "WeightsAndBiasesMixin"], [162, 4, 1, "", "evaluate_autoencoder"], [162, 4, 1, "", "evaluate_classifier"], [162, 4, 1, "", "evaluate_model"], [126, 4, 1, "", "list_mltk_models"], [126, 4, 1, "", "load_mltk_model"], [126, 4, 1, "", "load_mltk_model_with_path"], [126, 4, 1, "", "load_tflite_model"], [126, 4, 1, "", "load_tflite_or_keras_model"], [164, 4, 1, "", "profile_model"], [165, 4, 1, "", "quantize_model"], [166, 4, 1, "", "summarize_model"], [167, 4, 1, "", "train_model"], [168, 4, 1, "", "update_model_parameters"], [169, 4, 1, "", "view_model"]], "mltk.core.AudioDatasetMixin": [[114, 1, 1, "", "audio_classes"], [114, 1, 1, "", "audio_input_shape"], [114, 1, 1, "", "class_counts"], [114, 1, 1, "", "class_mode"], [114, 1, 1, "", "class_weights"], [114, 1, 1, "", "datagen"], [114, 1, 1, "", "datagen_context"], [114, 1, 1, "", "dataset"], [114, 1, 1, "", "follow_links"], [114, 1, 1, "", "frontend_settings"], [114, 2, 1, "", "get_datagen_creator"], [114, 2, 1, "", "get_shuffle_index_dir"], [114, 2, 1, "", "load_dataset"], [114, 1, 1, "", "loaded_subset"], [114, 1, 1, "", "sample_length_ms"], [114, 1, 1, "", "sample_rate_hz"], [114, 1, 1, "", "sample_weight"], [114, 1, 1, "", "shuffle"], [114, 1, 1, "", "shuffle_dataset_enabled"], [114, 1, 1, "", "steps_per_epoch"], [114, 2, 1, "", "summarize_dataset"], [114, 2, 1, "", "unload_dataset"], [114, 1, 1, "", "validation_batch_size"], [114, 1, 1, "", "validation_data"], [114, 1, 1, "", "validation_datagen"], [114, 1, 1, "", "validation_freq"], [114, 1, 1, "", "validation_split"], [114, 1, 1, "", "validation_steps"], [114, 1, 1, "", "x"], [114, 1, 1, "", "y"]], "mltk.core.AutoEncoderEvaluationResults": [[162, 2, 1, "", "__init__"], [162, 2, 1, "", "calculate"], [162, 1, 1, "", "class_stats"], [162, 1, 1, "", "classes"], [162, 2, 1, "", "generate_plots"], [162, 2, 1, "", "generate_summary"], [162, 1, 1, "", "overall_accuracy"], [162, 1, 1, "", "overall_fpr"], [162, 1, 1, "", "overall_pr_accuracy"], [162, 1, 1, "", "overall_precision"], [162, 1, 1, "", "overall_recall"], [162, 1, 1, "", "overall_roc_auc"], [162, 1, 1, "", "overall_thresholds"], [162, 1, 1, "", "overall_tpr"]], "mltk.core.ClassifierEvaluationResults": [[162, 2, 1, "", "__init__"], [162, 2, 1, "", "calculate"], [162, 1, 1, "", "class_accuracies"], [162, 1, 1, "", "classes"], [162, 1, 1, "", "confusion_matrix"], [162, 1, 1, "", "false_positive_rate"], [162, 1, 1, "", "fpr"], [162, 2, 1, "", "generate_plots"], [162, 2, 1, "", "generate_summary"], [162, 1, 1, "", "overall_accuracy"], [162, 1, 1, "", "precision"], [162, 1, 1, "", "recall"], [162, 1, 1, "", "roc_auc"], [162, 1, 1, "", "roc_auc_avg"], [162, 1, 1, "", "roc_thresholds"], [162, 1, 1, "", "tpr"]], "mltk.core.DatasetMixin": [[115, 1, 1, "", "class_counts"], [115, 1, 1, "", "class_weights"], [115, 1, 1, "", "dataset"], [115, 2, 1, "", "load_dataset"], [115, 1, 1, "", "loaded_subset"], [115, 1, 1, "", "sample_weight"], [115, 1, 1, "", "shuffle"], [115, 1, 1, "", "steps_per_epoch"], [115, 2, 1, "", "summarize_dataset"], [115, 2, 1, "", "unload_dataset"], [115, 1, 1, "", "validation_batch_size"], [115, 1, 1, "", "validation_data"], [115, 1, 1, "", "validation_freq"], [115, 1, 1, "", "validation_split"], [115, 1, 1, "", "validation_steps"], [115, 1, 1, "", "x"], [115, 1, 1, "", "y"]], "mltk.core.EvaluateAutoEncoderMixin": [[116, 1, 1, "", "eval_augment"], [116, 1, 1, "", "eval_classes"], [116, 1, 1, "", "eval_custom_function"], [116, 1, 1, "", "eval_max_samples_per_class"], [116, 1, 1, "", "eval_shuffle"], [116, 1, 1, "", "eval_steps_per_epoch"], [116, 2, 1, "", "get_scoring_function"], [116, 1, 1, "", "scoring_function"]], "mltk.core.EvaluateClassifierMixin": [[117, 1, 1, "", "eval_augment"], [117, 1, 1, "", "eval_custom_function"], [117, 1, 1, "", "eval_max_samples_per_class"], [117, 1, 1, "", "eval_shuffle"], [117, 1, 1, "", "eval_steps_per_epoch"]], "mltk.core.EvaluateMixin": [[118, 1, 1, "", "eval_custom_function"], [118, 1, 1, "", "eval_steps_per_epoch"]], "mltk.core.EvaluationResults": [[162, 2, 1, "", "__init__"], [162, 2, 1, "", "generate_plots"], [162, 2, 1, "", "generate_summary"], [162, 1, 1, "", "model_type"], [162, 1, 1, "", "name"]], "mltk.core.ImageDatasetMixin": [[119, 1, 1, "", "class_counts"], [119, 1, 1, "", "class_mode"], [119, 1, 1, "", "class_weights"], [119, 1, 1, "", "color_mode"], [119, 1, 1, "", "datagen"], [119, 1, 1, "", "datagen_context"], [119, 1, 1, "", "dataset"], [119, 1, 1, "", "follow_links"], [119, 2, 1, "", "get_datagen_creator"], [119, 2, 1, "", "get_shuffle_index_dir"], [119, 1, 1, "", "image_classes"], [119, 1, 1, "", "image_input_shape"], [119, 1, 1, "", "interpolation"], [119, 2, 1, "", "load_dataset"], [119, 1, 1, "", "loaded_subset"], [119, 1, 1, "", "sample_weight"], [119, 1, 1, "", "shuffle"], [119, 1, 1, "", "shuffle_dataset_enabled"], [119, 1, 1, "", "steps_per_epoch"], [119, 2, 1, "", "summarize_dataset"], [119, 1, 1, "", "target_size"], [119, 2, 1, "", "unload_dataset"], [119, 1, 1, "", "validation_batch_size"], [119, 1, 1, "", "validation_data"], [119, 1, 1, "", "validation_datagen"], [119, 1, 1, "", "validation_freq"], [119, 1, 1, "", "validation_split"], [119, 1, 1, "", "validation_steps"], [119, 1, 1, "", "x"], [119, 1, 1, "", "y"]], "mltk.core.MltkDataset": [[121, 2, 1, "", "load_dataset"], [121, 2, 1, "", "summarize_class_counts"], [121, 2, 1, "", "summarize_dataset"], [121, 2, 1, "", "unload_dataset"]], "mltk.core.MltkModel": [[122, 2, 1, "", "__init__"], [122, 2, 1, "", "add_archive_dir"], [122, 2, 1, "", "add_archive_file"], [122, 2, 1, "", "add_event_handler"], [122, 2, 1, "", "add_model_parameter_populate_callback"], [122, 2, 1, "", "add_tflite_metadata_entry"], [122, 1, 1, "", "archive_path"], [122, 1, 1, "", "attributes"], [122, 2, 1, "", "check_archive_file_is_writable"], [122, 1, 1, "", "classes"], [122, 1, 1, "", "cli"], [122, 2, 1, "", "create_log_dir"], [122, 2, 1, "", "create_logger"], [122, 1, 1, "", "description"], [122, 2, 1, "", "deserialize_tflite_metadata"], [122, 2, 1, "", "enable_test_mode"], [122, 2, 1, "", "get_archive_dir"], [122, 2, 1, "", "get_archive_file"], [122, 2, 1, "", "get_attribute"], [122, 2, 1, "", "get_tflite_metadata_summary"], [122, 1, 1, "", "h5_archive_path"], [122, 1, 1, "", "h5_log_dir_path"], [122, 1, 1, "", "input_shape"], [122, 1, 1, "", "keras_custom_objects"], [122, 1, 1, "", "log_dir"], [122, 1, 1, "", "model_parameters"], [122, 1, 1, "", "model_specification_path"], [122, 1, 1, "", "n_classes"], [122, 1, 1, "", "name"], [122, 2, 1, "", "populate_model_parameters"], [122, 2, 1, "", "serialize_tflite_metadata"], [122, 2, 1, "", "set_model_parameter"], [122, 2, 1, "", "summary"], [122, 1, 1, "", "test_mode_enabled"], [122, 1, 1, "", "tflite_archive_path"], [122, 1, 1, "", "tflite_log_dir_path"], [122, 1, 1, "", "tflite_metadata_entries"], [122, 2, 1, "", "trigger_event"], [122, 1, 1, "", "unquantized_tflite_log_dir_path"], [122, 1, 1, "", "version"]], "mltk.core.MltkModelEvent": [[123, 3, 1, "", "AFTER_BUILD_TRAIN_MODEL"], [123, 3, 1, "", "AFTER_LOAD_DATASET"], [123, 3, 1, "", "AFTER_MODEL_LOAD"], [123, 3, 1, "", "AFTER_PROFILE"], [123, 3, 1, "", "AFTER_QUANTIZE"], [123, 3, 1, "", "AFTER_SAVE_TRAIN_ARCHIVE"], [123, 3, 1, "", "AFTER_SAVE_TRAIN_MODEL"], [123, 3, 1, "", "AFTER_SAVE_TRAIN_RESULTS"], [123, 3, 1, "", "AFTER_TRAIN"], [123, 3, 1, "", "AFTER_UNLOAD_DATASET"], [123, 3, 1, "", "BEFORE_BUILD_TRAIN_MODEL"], [123, 3, 1, "", "BEFORE_LOAD_DATASET"], [123, 3, 1, "", "BEFORE_MODEL_LOAD"], [123, 3, 1, "", "BEFORE_QUANTIZE"], [123, 3, 1, "", "BEFORE_SAVE_TRAIN_ARCHIVE"], [123, 3, 1, "", "BEFORE_SAVE_TRAIN_MODEL"], [123, 3, 1, "", "BEFORE_SAVE_TRAIN_RESULTS"], [123, 3, 1, "", "BEFORE_TRAIN"], [123, 3, 1, "", "BEFORE_UNLOAD_DATASET"], [123, 3, 1, "", "EVALUATE_SHUTDOWN"], [123, 3, 1, "", "EVALUATE_STARTUP"], [123, 3, 1, "", "GENERATE_EVALUATE_PLOT"], [123, 3, 1, "", "POPULATE_TRAIN_CALLBACKS"], [123, 3, 1, "", "QUANTIZE_SHUTDOWN"], [123, 3, 1, "", "QUANTIZE_STARTUP"], [123, 3, 1, "", "SUMMARIZE_DATASET"], [123, 3, 1, "", "SUMMARIZE_MODEL"], [123, 3, 1, "", "TRAIN_SHUTDOWN"], [123, 3, 1, "", "TRAIN_STARTUP"], [123, 2, 1, "", "__init__"], [123, 2, 1, "", "__new__"], [123, 2, 1, "", "capitalize"], [123, 2, 1, "", "casefold"], [123, 2, 1, "", "center"], [123, 2, 1, "", "count"], [123, 2, 1, "", "encode"], [123, 2, 1, "", "endswith"], [123, 2, 1, "", "expandtabs"], [123, 2, 1, "", "find"], [123, 2, 1, "", "format"], [123, 2, 1, "", "format_map"], [123, 2, 1, "", "index"], [123, 2, 1, "", "isalnum"], [123, 2, 1, "", "isalpha"], [123, 2, 1, "", "isascii"], [123, 2, 1, "", "isdecimal"], [123, 2, 1, "", "isdigit"], [123, 2, 1, "", "isidentifier"], [123, 2, 1, "", "islower"], [123, 2, 1, "", "isnumeric"], [123, 2, 1, "", "isprintable"], [123, 2, 1, "", "isspace"], [123, 2, 1, "", "istitle"], [123, 2, 1, "", "isupper"], [123, 2, 1, "", "join"], [123, 2, 1, "", "ljust"], [123, 2, 1, "", "lower"], [123, 2, 1, "", "lstrip"], [123, 2, 1, "", "maketrans"], [123, 2, 1, "", "partition"], [123, 2, 1, "", "removeprefix"], [123, 2, 1, "", "removesuffix"], [123, 2, 1, "", "replace"], [123, 2, 1, "", "rfind"], [123, 2, 1, "", "rindex"], [123, 2, 1, "", "rjust"], [123, 2, 1, "", "rpartition"], [123, 2, 1, "", "rsplit"], [123, 2, 1, "", "rstrip"], [123, 2, 1, "", "split"], [123, 2, 1, "", "splitlines"], [123, 2, 1, "", "startswith"], [123, 2, 1, "", "strip"], [123, 2, 1, "", "swapcase"], [123, 2, 1, "", "title"], [123, 2, 1, "", "translate"], [123, 2, 1, "", "upper"], [123, 2, 1, "", "zfill"]], "mltk.core.SshMixin": [[124, 1, 1, "", "ssh_create_venv"], [124, 1, 1, "", "ssh_download_files"], [124, 1, 1, "", "ssh_environment"], [124, 1, 1, "", "ssh_remote_dir"], [124, 1, 1, "", "ssh_shutdown_cmds"], [124, 1, 1, "", "ssh_startup_cmds"], [124, 1, 1, "", "ssh_upload_files"]], "mltk.core.TfliteActivation": [[177, 3, 1, "", "NONE"], [177, 3, 1, "", "RELU"], [177, 3, 1, "", "RELU6"], [177, 3, 1, "", "RELU_N1_TO_1"], [177, 3, 1, "", "SIGN_BIT"], [177, 3, 1, "", "TANH"], [177, 2, 1, "", "__init__"], [177, 2, 1, "", "__new__"], [177, 2, 1, "", "as_integer_ratio"], [177, 2, 1, "", "bit_count"], [177, 2, 1, "", "bit_length"], [177, 2, 1, "", "conjugate"], [177, 3, 1, "", "denominator"], [177, 2, 1, "", "from_bytes"], [177, 3, 1, "", "imag"], [177, 2, 1, "", "is_integer"], [177, 3, 1, "", "numerator"], [177, 3, 1, "", "real"], [177, 2, 1, "", "to_bytes"], [177, 2, 1, "", "to_string"]], "mltk.core.TfliteAddLayer": [[178, 2, 1, "", "__init__"], [178, 1, 1, "", "activation"], [178, 2, 1, "", "from_flatbuffer"], [178, 2, 1, "", "get_input_data"], [178, 2, 1, "", "get_input_tensor"], [178, 2, 1, "", "get_output_data"], [178, 2, 1, "", "get_output_tensor"], [178, 1, 1, "", "index"], [178, 1, 1, "", "input1_data"], [178, 1, 1, "", "input1_tensor"], [178, 1, 1, "", "input2_data"], [178, 1, 1, "", "input2_tensor"], [178, 1, 1, "", "inputs"], [178, 1, 1, "", "metadata"], [178, 1, 1, "", "model"], [178, 1, 1, "", "n_inputs"], [178, 1, 1, "", "n_outputs"], [178, 1, 1, "", "name"], [178, 1, 1, "", "opcode"], [178, 1, 1, "", "opcode_str"], [178, 1, 1, "", "options"], [178, 1, 1, "", "output_data"], [178, 1, 1, "", "output_tensor"], [178, 1, 1, "", "outputs"]], "mltk.core.TfliteConv2DLayerOptions": [[180, 2, 1, "", "__init__"], [180, 1, 1, "", "activation"], [180, 1, 1, "", "activation_str"], [180, 1, 1, "", "options_type"], [180, 1, 1, "", "options_type_str"], [180, 1, 1, "", "padding"], [180, 1, 1, "", "padding_str"], [180, 1, 1, "", "stride_height"], [180, 1, 1, "", "stride_width"]], "mltk.core.TfliteConv2dLayer": [[179, 2, 1, "", "__init__"], [179, 1, 1, "", "activation"], [179, 1, 1, "", "bias_data"], [179, 1, 1, "", "bias_tensor"], [179, 1, 1, "", "filters"], [179, 1, 1, "", "filters_data"], [179, 1, 1, "", "filters_tensor"], [179, 2, 1, "", "from_flatbuffer"], [179, 2, 1, "", "get_input_data"], [179, 2, 1, "", "get_input_tensor"], [179, 2, 1, "", "get_output_data"], [179, 2, 1, "", "get_output_tensor"], [179, 1, 1, "", "index"], [179, 1, 1, "", "input_data"], [179, 1, 1, "", "input_tensor"], [179, 1, 1, "", "inputs"], [179, 1, 1, "", "kernel_size"], [179, 1, 1, "", "metadata"], [179, 1, 1, "", "model"], [179, 1, 1, "", "n_inputs"], [179, 1, 1, "", "n_outputs"], [179, 1, 1, "", "name"], [179, 1, 1, "", "opcode"], [179, 1, 1, "", "opcode_str"], [179, 1, 1, "", "options"], [179, 1, 1, "", "output_data"], [179, 1, 1, "", "output_tensor"], [179, 1, 1, "", "outputs"], [179, 1, 1, "", "padding"], [179, 1, 1, "", "params"], [179, 1, 1, "", "strides"], [179, 1, 1, "", "use_bias"]], "mltk.core.TfliteConvParams": [[181, 2, 1, "", "__init__"], [181, 2, 1, "", "calculate"], [181, 3, 1, "", "dilation_height_factor"], [181, 3, 1, "", "dilation_width_factor"], [181, 3, 1, "", "input_offset"], [181, 3, 1, "", "output_offset"], [181, 3, 1, "", "padding"], [181, 3, 1, "", "per_channel_output_multiplier"], [181, 3, 1, "", "per_channel_output_shift"], [181, 3, 1, "", "quantized_activation_max"], [181, 3, 1, "", "quantized_activation_min"], [181, 3, 1, "", "stride_height"], [181, 3, 1, "", "stride_width"], [181, 3, 1, "", "weights_offset"]], "mltk.core.TfliteDepthwiseConv2DLayerOptions": [[183, 2, 1, "", "__init__"], [183, 1, 1, "", "activation"], [183, 1, 1, "", "activation_str"], [183, 1, 1, "", "multiplier"], [183, 1, 1, "", "options_type"], [183, 1, 1, "", "options_type_str"], [183, 1, 1, "", "padding"], [183, 1, 1, "", "padding_str"], [183, 1, 1, "", "stride_height"], [183, 1, 1, "", "stride_width"]], "mltk.core.TfliteDepthwiseConv2dLayer": [[182, 2, 1, "", "__init__"], [182, 1, 1, "", "activation"], [182, 1, 1, "", "bias_data"], [182, 1, 1, "", "bias_tensor"], [182, 1, 1, "", "filters_data"], [182, 1, 1, "", "filters_tensor"], [182, 2, 1, "", "from_flatbuffer"], [182, 2, 1, "", "get_input_data"], [182, 2, 1, "", "get_input_tensor"], [182, 2, 1, "", "get_output_data"], [182, 2, 1, "", "get_output_tensor"], [182, 1, 1, "", "index"], [182, 1, 1, "", "input_data"], [182, 1, 1, "", "input_tensor"], [182, 1, 1, "", "inputs"], [182, 1, 1, "", "kernel_size"], [182, 1, 1, "", "metadata"], [182, 1, 1, "", "model"], [182, 1, 1, "", "multiplier"], [182, 1, 1, "", "n_inputs"], [182, 1, 1, "", "n_outputs"], [182, 1, 1, "", "name"], [182, 1, 1, "", "opcode"], [182, 1, 1, "", "opcode_str"], [182, 1, 1, "", "options"], [182, 1, 1, "", "output_data"], [182, 1, 1, "", "output_tensor"], [182, 1, 1, "", "outputs"], [182, 1, 1, "", "padding"], [182, 1, 1, "", "params"], [182, 1, 1, "", "strides"], [182, 1, 1, "", "use_bias"]], "mltk.core.TfliteDepthwiseConvParams": [[184, 2, 1, "", "__init__"], [184, 2, 1, "", "calculate"], [184, 3, 1, "", "depth_multiplier"], [184, 3, 1, "", "dilation_height_factor"], [184, 3, 1, "", "dilation_width_factor"], [184, 3, 1, "", "input_offset"], [184, 3, 1, "", "output_offset"], [184, 3, 1, "", "padding"], [184, 3, 1, "", "per_channel_output_multiplier"], [184, 3, 1, "", "per_channel_output_shift"], [184, 3, 1, "", "quantized_activation_max"], [184, 3, 1, "", "quantized_activation_min"], [184, 3, 1, "", "stride_height"], [184, 3, 1, "", "stride_width"], [184, 3, 1, "", "weights_offset"]], "mltk.core.TfliteDequantizeLayer": [[185, 2, 1, "", "__init__"], [185, 2, 1, "", "from_flatbuffer"], [185, 2, 1, "", "get_input_data"], [185, 2, 1, "", "get_input_tensor"], [185, 2, 1, "", "get_output_data"], [185, 2, 1, "", "get_output_tensor"], [185, 1, 1, "", "index"], [185, 1, 1, "", "input_data"], [185, 1, 1, "", "input_tensor"], [185, 1, 1, "", "inputs"], [185, 1, 1, "", "metadata"], [185, 1, 1, "", "model"], [185, 1, 1, "", "n_inputs"], [185, 1, 1, "", "n_outputs"], [185, 1, 1, "", "name"], [185, 1, 1, "", "opcode"], [185, 1, 1, "", "opcode_str"], [185, 1, 1, "", "options"], [185, 1, 1, "", "output_data"], [185, 1, 1, "", "output_tensor"], [185, 1, 1, "", "outputs"]], "mltk.core.TfliteFullyConnectedLayer": [[187, 2, 1, "", "__init__"], [187, 1, 1, "", "accumulator_depth"], [187, 1, 1, "", "activation"], [187, 1, 1, "", "bias_data"], [187, 1, 1, "", "bias_tensor"], [187, 2, 1, "", "from_flatbuffer"], [187, 2, 1, "", "get_input_data"], [187, 2, 1, "", "get_input_tensor"], [187, 2, 1, "", "get_output_data"], [187, 2, 1, "", "get_output_tensor"], [187, 1, 1, "", "index"], [187, 1, 1, "", "input_data"], [187, 1, 1, "", "input_tensor"], [187, 1, 1, "", "inputs"], [187, 1, 1, "", "metadata"], [187, 1, 1, "", "model"], [187, 1, 1, "", "n_inputs"], [187, 1, 1, "", "n_outputs"], [187, 1, 1, "", "name"], [187, 1, 1, "", "opcode"], [187, 1, 1, "", "opcode_str"], [187, 1, 1, "", "options"], [187, 1, 1, "", "output_data"], [187, 1, 1, "", "output_tensor"], [187, 1, 1, "", "outputs"], [187, 1, 1, "", "params"], [187, 1, 1, "", "units"], [187, 1, 1, "", "use_bias"], [187, 1, 1, "", "weights_data"], [187, 1, 1, "", "weights_tensor"]], "mltk.core.TfliteFullyConnectedLayerOptions": [[188, 2, 1, "", "__init__"], [188, 1, 1, "", "activation"], [188, 1, 1, "", "activation_str"], [188, 1, 1, "", "options_type"], [188, 1, 1, "", "options_type_str"]], "mltk.core.TfliteFullyConnectedParams": [[189, 2, 1, "", "__init__"], [189, 2, 1, "", "calculate"], [189, 3, 1, "", "input_offset"], [189, 3, 1, "", "output_multiplier"], [189, 3, 1, "", "output_offset"], [189, 3, 1, "", "output_shift"], [189, 3, 1, "", "quantized_activation_max"], [189, 3, 1, "", "quantized_activation_min"], [189, 3, 1, "", "weights_offset"]], "mltk.core.TfliteLayer": [[191, 2, 1, "", "__init__"], [191, 2, 1, "", "from_flatbuffer"], [191, 2, 1, "", "get_input_data"], [191, 2, 1, "", "get_input_tensor"], [191, 2, 1, "", "get_output_data"], [191, 2, 1, "", "get_output_tensor"], [191, 1, 1, "", "index"], [191, 1, 1, "", "inputs"], [191, 1, 1, "", "metadata"], [191, 1, 1, "", "model"], [191, 1, 1, "", "n_inputs"], [191, 1, 1, "", "n_outputs"], [191, 1, 1, "", "name"], [191, 1, 1, "", "opcode"], [191, 1, 1, "", "opcode_str"], [191, 1, 1, "", "options"], [191, 1, 1, "", "outputs"]], "mltk.core.TfliteModel": [[192, 2, 1, "", "__init__"], [192, 2, 1, "", "add_metadata"], [192, 2, 1, "", "dequantize_output_to_float32"], [192, 1, 1, "", "description"], [192, 1, 1, "", "filename"], [192, 1, 1, "", "flatbuffer_data"], [192, 1, 1, "", "flatbuffer_model"], [192, 1, 1, "", "flatbuffer_size"], [192, 1, 1, "", "flatbuffer_subgraph"], [192, 2, 1, "", "get_all_metadata"], [192, 2, 1, "", "get_flatbuffer_subgraph"], [192, 2, 1, "", "get_input_data"], [192, 2, 1, "", "get_input_tensor"], [192, 2, 1, "", "get_metadata"], [192, 2, 1, "", "get_output_data"], [192, 2, 1, "", "get_output_tensor"], [192, 2, 1, "", "get_tensor"], [192, 2, 1, "", "get_tensor_data"], [192, 1, 1, "", "inputs"], [192, 1, 1, "", "layers"], [192, 2, 1, "", "load_flatbuffer_file"], [192, 1, 1, "", "n_inputs"], [192, 1, 1, "", "n_outputs"], [192, 1, 1, "", "n_subgraphs"], [192, 1, 1, "", "name"], [192, 1, 1, "", "outputs"], [192, 1, 1, "", "path"], [192, 2, 1, "", "predict"], [192, 2, 1, "", "quantize_to_input_dtype"], [192, 2, 1, "", "regenerate_flatbuffer"], [192, 2, 1, "", "remove_metadata"], [192, 2, 1, "", "save"], [192, 1, 1, "", "selected_model_subgraph"], [192, 2, 1, "", "summary"], [192, 1, 1, "", "tensors"]], "mltk.core.TfliteModelParameters": [[194, 2, 1, "", "__init__"], [194, 2, 1, "", "__new__"], [194, 2, 1, "", "add_to_tflite_file"], [194, 2, 1, "", "add_to_tflite_flatbuffer"], [194, 2, 1, "", "add_to_tflite_model"], [194, 2, 1, "", "clear"], [194, 2, 1, "", "copy"], [194, 2, 1, "", "deserialize"], [194, 2, 1, "", "fromkeys"], [194, 2, 1, "", "get"], [194, 2, 1, "", "items"], [194, 2, 1, "", "keys"], [194, 2, 1, "", "load_from_tflite_file"], [194, 2, 1, "", "load_from_tflite_flatbuffer"], [194, 2, 1, "", "load_from_tflite_model"], [194, 2, 1, "", "pop"], [194, 2, 1, "", "popitem"], [194, 2, 1, "", "put"], [194, 2, 1, "", "serialize"], [194, 2, 1, "", "setdefault"], [194, 2, 1, "", "summary"], [194, 2, 1, "", "update"], [194, 2, 1, "", "values"]], "mltk.core.TflitePadding": [[193, 3, 1, "", "SAME"], [193, 3, 1, "", "VALID"], [193, 2, 1, "", "__init__"], [193, 2, 1, "", "__new__"], [193, 2, 1, "", "as_integer_ratio"], [193, 2, 1, "", "bit_count"], [193, 2, 1, "", "bit_length"], [193, 2, 1, "", "conjugate"], [193, 3, 1, "", "denominator"], [193, 2, 1, "", "from_bytes"], [193, 1, 1, "", "height"], [193, 3, 1, "", "imag"], [193, 2, 1, "", "is_integer"], [193, 3, 1, "", "numerator"], [193, 3, 1, "", "real"], [193, 2, 1, "", "to_bytes"], [193, 2, 1, "", "to_string"], [193, 1, 1, "", "width"]], "mltk.core.TflitePool2DLayerOptions": [[196, 2, 1, "", "__init__"], [196, 1, 1, "", "activation"], [196, 1, 1, "", "activation_str"], [196, 1, 1, "", "filter_height"], [196, 1, 1, "", "filter_width"], [196, 1, 1, "", "options_type"], [196, 1, 1, "", "options_type_str"], [196, 1, 1, "", "padding"], [196, 1, 1, "", "padding_str"], [196, 1, 1, "", "stride_height"], [196, 1, 1, "", "stride_width"]], "mltk.core.TflitePoolParams": [[197, 2, 1, "", "__init__"], [197, 2, 1, "", "calculate"], [197, 3, 1, "", "padding"], [197, 3, 1, "", "quantized_activation_max"], [197, 3, 1, "", "quantized_activation_min"], [197, 3, 1, "", "stride_height"], [197, 3, 1, "", "stride_width"]], "mltk.core.TflitePooling2dLayer": [[195, 2, 1, "", "__init__"], [195, 1, 1, "", "activation"], [195, 2, 1, "", "from_flatbuffer"], [195, 2, 1, "", "get_input_data"], [195, 2, 1, "", "get_input_tensor"], [195, 2, 1, "", "get_output_data"], [195, 2, 1, "", "get_output_tensor"], [195, 1, 1, "", "index"], [195, 1, 1, "", "input_data"], [195, 1, 1, "", "input_tensor"], [195, 1, 1, "", "inputs"], [195, 1, 1, "", "metadata"], [195, 1, 1, "", "model"], [195, 1, 1, "", "n_inputs"], [195, 1, 1, "", "n_outputs"], [195, 1, 1, "", "name"], [195, 1, 1, "", "opcode"], [195, 1, 1, "", "opcode_str"], [195, 1, 1, "", "options"], [195, 1, 1, "", "output_data"], [195, 1, 1, "", "output_tensor"], [195, 1, 1, "", "outputs"], [195, 1, 1, "", "padding"], [195, 1, 1, "", "params"], [195, 1, 1, "", "pool_size"], [195, 1, 1, "", "strides"]], "mltk.core.TfliteQuantization": [[198, 2, 1, "", "__init__"], [198, 1, 1, "", "n_channels"], [198, 1, 1, "", "quantization_dimension"], [198, 1, 1, "", "scale"], [198, 1, 1, "", "zeropoint"]], "mltk.core.TfliteQuantizeLayer": [[199, 2, 1, "", "__init__"], [199, 2, 1, "", "from_flatbuffer"], [199, 2, 1, "", "get_input_data"], [199, 2, 1, "", "get_input_tensor"], [199, 2, 1, "", "get_output_data"], [199, 2, 1, "", "get_output_tensor"], [199, 1, 1, "", "index"], [199, 1, 1, "", "input_data"], [199, 1, 1, "", "input_tensor"], [199, 1, 1, "", "inputs"], [199, 1, 1, "", "metadata"], [199, 1, 1, "", "model"], [199, 1, 1, "", "n_inputs"], [199, 1, 1, "", "n_outputs"], [199, 1, 1, "", "name"], [199, 1, 1, "", "opcode"], [199, 1, 1, "", "opcode_str"], [199, 1, 1, "", "options"], [199, 1, 1, "", "output_data"], [199, 1, 1, "", "output_tensor"], [199, 1, 1, "", "outputs"]], "mltk.core.TfliteReshapeLayer": [[200, 2, 1, "", "__init__"], [200, 2, 1, "", "from_flatbuffer"], [200, 2, 1, "", "get_input_data"], [200, 2, 1, "", "get_input_tensor"], [200, 2, 1, "", "get_output_data"], [200, 2, 1, "", "get_output_tensor"], [200, 1, 1, "", "index"], [200, 1, 1, "", "input_data"], [200, 1, 1, "", "input_tensor"], [200, 1, 1, "", "inputs"], [200, 1, 1, "", "metadata"], [200, 1, 1, "", "model"], [200, 1, 1, "", "n_input_elements"], [200, 1, 1, "", "n_inputs"], [200, 1, 1, "", "n_outputs"], [200, 1, 1, "", "name"], [200, 1, 1, "", "opcode"], [200, 1, 1, "", "opcode_str"], [200, 1, 1, "", "options"], [200, 1, 1, "", "output_data"], [200, 1, 1, "", "output_tensor"], [200, 1, 1, "", "outputs"], [200, 1, 1, "", "requires_copy"]], "mltk.core.TfliteShape": [[201, 2, 1, "", "__new__"], [201, 2, 1, "", "count"], [201, 1, 1, "", "flat_size"], [201, 2, 1, "", "index"]], "mltk.core.TfliteTensor": [[202, 2, 1, "", "__init__"], [202, 1, 1, "", "data"], [202, 1, 1, "", "dtype"], [202, 1, 1, "", "dtype_str"], [202, 1, 1, "", "index"], [202, 1, 1, "", "is_variable"], [202, 1, 1, "", "model"], [202, 1, 1, "", "quantization"], [202, 1, 1, "", "shape"], [202, 2, 1, "", "shape_dtype_str"], [202, 1, 1, "", "size_bytes"]], "mltk.core.TfliteTransposeConvLayer": [[203, 2, 1, "", "__init__"], [203, 1, 1, "", "bias_data"], [203, 1, 1, "", "bias_tensor"], [203, 1, 1, "", "filters"], [203, 1, 1, "", "filters_data"], [203, 1, 1, "", "filters_tensor"], [203, 2, 1, "", "from_flatbuffer"], [203, 2, 1, "", "get_input_data"], [203, 2, 1, "", "get_input_tensor"], [203, 2, 1, "", "get_output_data"], [203, 2, 1, "", "get_output_tensor"], [203, 1, 1, "", "index"], [203, 1, 1, "", "input_data"], [203, 1, 1, "", "input_tensor"], [203, 1, 1, "", "inputs"], [203, 1, 1, "", "kernel_size"], [203, 1, 1, "", "metadata"], [203, 1, 1, "", "model"], [203, 1, 1, "", "n_inputs"], [203, 1, 1, "", "n_outputs"], [203, 1, 1, "", "name"], [203, 1, 1, "", "opcode"], [203, 1, 1, "", "opcode_str"], [203, 1, 1, "", "options"], [203, 1, 1, "", "output_data"], [203, 1, 1, "", "output_tensor"], [203, 1, 1, "", "outputs"], [203, 1, 1, "", "padding"], [203, 1, 1, "", "params"], [203, 1, 1, "", "strides"], [203, 1, 1, "", "use_bias"]], "mltk.core.TfliteTransposeConvLayerOptions": [[204, 2, 1, "", "__init__"], [204, 1, 1, "", "options_type"], [204, 1, 1, "", "options_type_str"], [204, 1, 1, "", "padding"], [204, 1, 1, "", "padding_str"], [204, 1, 1, "", "stride_height"], [204, 1, 1, "", "stride_width"]], "mltk.core.TfliteTransposeConvParams": [[205, 2, 1, "", "__init__"], [205, 2, 1, "", "calculate"], [205, 3, 1, "", "input_offset"], [205, 3, 1, "", "output_offset"], [205, 3, 1, "", "padding"], [205, 3, 1, "", "per_channel_output_multiplier"], [205, 3, 1, "", "per_channel_output_shift"], [205, 3, 1, "", "quantized_activation_max"], [205, 3, 1, "", "quantized_activation_min"], [205, 3, 1, "", "stride_height"], [205, 3, 1, "", "stride_width"], [205, 3, 1, "", "weights_offset"]], "mltk.core.TfliteUnidirectionalLstmLayer": [[206, 2, 1, "", "__init__"], [206, 1, 1, "", "activation"], [206, 1, 1, "", "cell_clip"], [206, 1, 1, "", "cell_gate_bias_tensor"], [206, 1, 1, "", "cell_layer_norm_coeff_tensor"], [206, 1, 1, "", "cell_state_tensor"], [206, 1, 1, "", "cell_to_forget_weights_tensor"], [206, 1, 1, "", "cell_to_input_weights_tensor"], [206, 1, 1, "", "cell_to_output_weights_tensor"], [206, 1, 1, "", "forget_gate_bias_tensor"], [206, 1, 1, "", "forget_layer_norm_coeff_tensor"], [206, 2, 1, "", "from_flatbuffer"], [206, 2, 1, "", "get_input_data"], [206, 2, 1, "", "get_input_tensor"], [206, 2, 1, "", "get_output_data"], [206, 2, 1, "", "get_output_tensor"], [206, 1, 1, "", "index"], [206, 1, 1, "", "input_data"], [206, 1, 1, "", "input_gate_bias_tensor"], [206, 1, 1, "", "input_layer_norm_coeff_tensor"], [206, 1, 1, "", "input_tensor"], [206, 1, 1, "", "input_to_cell_weights_tensor"], [206, 1, 1, "", "input_to_forget_weights_tensor"], [206, 1, 1, "", "input_to_input_weights_tensor"], [206, 1, 1, "", "input_to_output_weights_tensor"], [206, 1, 1, "", "inputs"], [206, 1, 1, "", "is_time_major"], [206, 1, 1, "", "metadata"], [206, 1, 1, "", "model"], [206, 1, 1, "", "n_cells"], [206, 1, 1, "", "n_inputs"], [206, 1, 1, "", "n_outputs"], [206, 1, 1, "", "name"], [206, 1, 1, "", "opcode"], [206, 1, 1, "", "opcode_str"], [206, 1, 1, "", "options"], [206, 1, 1, "", "output_data"], [206, 1, 1, "", "output_gate_bias_tensor"], [206, 1, 1, "", "output_layer_norm_coeff_tensor"], [206, 1, 1, "", "output_state_tensor"], [206, 1, 1, "", "output_tensor"], [206, 1, 1, "", "outputs"], [206, 1, 1, "", "proj_clip"], [206, 1, 1, "", "projection_bias_tensor"], [206, 1, 1, "", "projection_weights_tensor"], [206, 1, 1, "", "recurrent_to_cell_weights_tensor"], [206, 1, 1, "", "recurrent_to_forget_weights_tensor"], [206, 1, 1, "", "recurrent_to_input_weights_tensor"], [206, 1, 1, "", "recurrent_to_output_weights_tensor"]], "mltk.core.TfliteUnidirectionalLstmLayerOptions": [[207, 2, 1, "", "__init__"], [207, 1, 1, "", "activation"], [207, 1, 1, "", "activation_str"], [207, 1, 1, "", "options_type"], [207, 1, 1, "", "options_type_str"]], "mltk.core.TrainMixin": [[125, 1, 1, "", "batch_size"], [125, 1, 1, "", "build_model_function"], [125, 1, 1, "", "checkpoint"], [125, 1, 1, "", "checkpoints_dir"], [125, 1, 1, "", "checkpoints_enabled"], [125, 1, 1, "", "early_stopping"], [125, 1, 1, "", "epochs"], [125, 2, 1, "", "get_checkpoint_path"], [125, 2, 1, "", "get_weights_path"], [125, 1, 1, "", "loss"], [125, 1, 1, "", "lr_schedule"], [125, 1, 1, "", "metrics"], [125, 1, 1, "", "on_save_keras_model"], [125, 1, 1, "", "on_training_complete"], [125, 1, 1, "", "optimizer"], [125, 1, 1, "", "reduce_lr_on_plateau"], [125, 1, 1, "", "tensorboard"], [125, 1, 1, "", "tflite_converter"], [125, 1, 1, "", "train_callbacks"], [125, 1, 1, "", "train_kwargs"], [125, 1, 1, "", "weights_dir"], [125, 1, 1, "", "weights_file_format"]], "mltk.core.WeightsAndBiasesMixin": [[127, 1, 1, "", "wandb_callback"], [127, 1, 1, "", "wandb_config"], [127, 1, 1, "", "wandb_init_kwargs"], [127, 1, 1, "", "wandb_is_disabled"], [127, 1, 1, "", "wandb_is_initialized"], [127, 2, 1, "", "wandb_log"], [127, 1, 1, "", "wandb_model_checkpoint_callback"], [127, 2, 1, "", "wandb_save"], [127, 1, 1, "", "wandb_session_id"]], "mltk.core.preprocess.audio.audio_feature_generator": [[83, 0, 1, "", "AudioFeatureGenerator"], [84, 0, 1, "", "AudioFeatureGeneratorSettings"]], "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator": [[83, 2, 1, "", "__init__"], [83, 2, 1, "", "activity_was_detected"], [83, 2, 1, "", "process_sample"]], "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings": [[84, 2, 1, "", "__init__"], [84, 2, 1, "", "__new__"], [84, 1, 1, "", "activity_detection_alpha_a"], [84, 1, 1, "", "activity_detection_alpha_b"], [84, 1, 1, "", "activity_detection_arm_threshold"], [84, 1, 1, "", "activity_detection_enable"], [84, 1, 1, "", "activity_detection_trip_threshold"], [84, 2, 1, "", "clear"], [84, 2, 1, "", "copy"], [84, 1, 1, "", "dc_notch_filter_coefficient"], [84, 1, 1, "", "dc_notch_filter_enable"], [84, 1, 1, "", "fft_length"], [84, 1, 1, "", "filterbank_lower_band_limit"], [84, 1, 1, "", "filterbank_n_channels"], [84, 1, 1, "", "filterbank_upper_band_limit"], [84, 2, 1, "", "fromkeys"], [84, 2, 1, "", "get"], [84, 2, 1, "", "items"], [84, 2, 1, "", "keys"], [84, 1, 1, "", "log_scale_enable"], [84, 1, 1, "", "log_scale_shift"], [84, 1, 1, "", "noise_reduction_enable"], [84, 1, 1, "", "noise_reduction_even_smoothing"], [84, 1, 1, "", "noise_reduction_min_signal_remaining"], [84, 1, 1, "", "noise_reduction_odd_smoothing"], [84, 1, 1, "", "noise_reduction_smoothing_bits"], [84, 1, 1, "", "pcan_enable"], [84, 1, 1, "", "pcan_gain_bits"], [84, 1, 1, "", "pcan_offset"], [84, 1, 1, "", "pcan_strength"], [84, 2, 1, "", "pop"], [84, 2, 1, "", "popitem"], [84, 1, 1, "", "quantize_dynamic_scale_enable"], [84, 1, 1, "", "quantize_dynamic_scale_range_db"], [84, 1, 1, "", "sample_length"], [84, 1, 1, "", "sample_length_ms"], [84, 1, 1, "", "sample_rate_hz"], [84, 2, 1, "", "setdefault"], [84, 1, 1, "", "spectrogram_shape"], [84, 2, 1, "", "update"], [84, 2, 1, "", "values"], [84, 1, 1, "", "window_size_ms"], [84, 1, 1, "", "window_step_ms"]], "mltk.core.preprocess.audio.parallel_generator": [[81, 0, 1, "", "ParallelAudioDataGenerator"], [82, 0, 1, "", "ParallelProcessParams"]], "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator": [[81, 2, 1, "", "__init__"], [81, 2, 1, "", "adjust_length"], [81, 2, 1, "", "apply_frontend"], [81, 2, 1, "", "apply_transform"], [81, 1, 1, "", "default_transform"], [81, 2, 1, "", "flow_from_directory"], [81, 2, 1, "", "get_random_transform"], [81, 1, 1, "", "sample_length"], [81, 1, 1, "", "sample_length_ms"], [81, 1, 1, "", "sample_rate_hz"], [81, 1, 1, "", "sample_shape"], [81, 2, 1, "", "standardize"]], "mltk.core.preprocess.audio.parallel_generator.ParallelProcessParams": [[82, 2, 1, "", "__init__"]], "mltk.core.preprocess.image.parallel_generator": [[86, 0, 1, "", "ParallelImageDataGenerator"], [87, 0, 1, "", "ParallelProcessParams"]], "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator": [[86, 2, 1, "", "__init__"], [86, 2, 1, "", "apply_transform"], [86, 1, 1, "", "default_transform"], [86, 2, 1, "", "fit"], [86, 2, 1, "", "flow"], [86, 2, 1, "", "flow_from_dataframe"], [86, 2, 1, "", "flow_from_directory"], [86, 2, 1, "", "get_random_transform"], [86, 2, 1, "", "random_transform"], [86, 2, 1, "", "standardize"]], "mltk.core.preprocess.image.parallel_generator.ParallelProcessParams": [[87, 2, 1, "", "__init__"]], "mltk.core.preprocess.utils": [[80, 5, 0, "-", "audio"], [85, 5, 0, "-", "image"], [89, 5, 0, "-", "list_directory"], [90, 5, 0, "-", "normalize"], [91, 5, 0, "-", "tf_dataset"]], "mltk.core.preprocess.utils.audio": [[80, 4, 1, "", "adjust_length"], [80, 4, 1, "", "apply_frontend"], [80, 4, 1, "", "read_audio_file"], [80, 4, 1, "", "write_audio_file"]], "mltk.core.preprocess.utils.image": [[85, 4, 1, "", "read_image_file"], [85, 4, 1, "", "write_image_file"]], "mltk.core.preprocess.utils.list_directory": [[89, 4, 1, "", "list_dataset_directory"], [89, 4, 1, "", "list_valid_filenames_in_directory"], [89, 4, 1, "", "shuffle_file_list_by_group"], [89, 4, 1, "", "split_file_list"]], "mltk.core.preprocess.utils.normalize": [[90, 4, 1, "", "normalize"]], "mltk.core.preprocess.utils.tf_dataset": [[91, 4, 1, "", "enable_numpy_behavior"], [91, 4, 1, "", "load_audio_directory"], [91, 4, 1, "", "load_image_directory"], [91, 4, 1, "", "parallel_process"]], "mltk.core.profiling_results": [[164, 0, 1, "", "ProfilingLayerResult"], [164, 0, 1, "", "ProfilingModelResults"]], "mltk.core.profiling_results.ProfilingLayerResult": [[164, 2, 1, "", "__init__"], [164, 1, 1, "", "accelerator_cycles"], [164, 1, 1, "", "cpu_cycles"], [164, 1, 1, "", "energy"], [164, 1, 1, "", "error_msg"], [164, 2, 1, "", "get_summary"], [164, 1, 1, "", "index"], [164, 1, 1, "", "input_dtype_str"], [164, 1, 1, "", "input_shape_str"], [164, 1, 1, "", "is_accelerated"], [164, 1, 1, "", "is_unsupported"], [164, 1, 1, "", "macs"], [164, 1, 1, "", "name"], [164, 1, 1, "", "opcode"], [164, 1, 1, "", "opcode_str"], [164, 1, 1, "", "ops"], [164, 1, 1, "", "options_str"], [164, 1, 1, "", "output_dtype_str"], [164, 1, 1, "", "output_shape_str"], [164, 1, 1, "", "tflite_layer"], [164, 1, 1, "", "time"]], "mltk.core.profiling_results.ProfilingModelResults": [[164, 2, 1, "", "__init__"], [164, 1, 1, "", "accelerator"], [164, 1, 1, "", "accelerator_cycles"], [164, 1, 1, "", "cpu_clock_rate"], [164, 1, 1, "", "cpu_cycles"], [164, 1, 1, "", "cpu_utilization"], [164, 1, 1, "", "energy"], [164, 1, 1, "", "flatbuffer_size"], [164, 2, 1, "", "generate_report"], [164, 2, 1, "", "get_summary"], [164, 1, 1, "", "input_dtype_str"], [164, 1, 1, "", "input_shape_str"], [164, 1, 1, "", "is_simulated"], [164, 1, 1, "", "layers"], [164, 1, 1, "", "macs"], [164, 1, 1, "", "n_layers"], [164, 1, 1, "", "n_unsupported_layers"], [164, 1, 1, "", "name"], [164, 1, 1, "", "ops"], [164, 1, 1, "", "output_dtype_str"], [164, 1, 1, "", "output_shape_str"], [164, 1, 1, "", "platform"], [164, 1, 1, "", "runtime_memory_bytes"], [164, 2, 1, "", "stat_total"], [164, 1, 1, "", "tflite_micro_model_details"], [164, 1, 1, "", "tflite_model"], [164, 1, 1, "", "time"], [164, 2, 1, "", "to_csv"], [164, 2, 1, "", "to_dict"], [164, 2, 1, "", "to_json"], [164, 2, 1, "", "to_string"], [164, 1, 1, "", "unsupported_layers"]], "mltk.core.tflite_micro": [[176, 0, 1, "", "TfliteMicro"], [172, 0, 1, "", "TfliteMicroLayerError"], [173, 0, 1, "", "TfliteMicroModel"], [174, 0, 1, "", "TfliteMicroModelDetails"], [175, 0, 1, "", "TfliteMicroProfiledLayerResult"]], "mltk.core.tflite_micro.TfliteMicro": [[176, 2, 1, "", "accelerator_is_supported"], [176, 2, 1, "", "add_accelerator_path"], [176, 2, 1, "", "api_version"], [176, 2, 1, "", "get_accelerator"], [176, 2, 1, "", "get_log_level"], [176, 2, 1, "", "get_logger"], [176, 2, 1, "", "get_supported_accelerators"], [176, 2, 1, "", "git_hash"], [176, 2, 1, "", "load_tflite_model"], [176, 2, 1, "", "normalize_accelerator_name"], [176, 2, 1, "", "profile_model"], [176, 2, 1, "", "record_model"], [176, 2, 1, "", "register_accelerator"], [176, 2, 1, "", "set_log_level"], [176, 2, 1, "", "set_logger"], [176, 2, 1, "", "unload_model"]], "mltk.core.tflite_micro.TfliteMicroLayerError": [[172, 2, 1, "", "__init__"], [172, 3, 1, "", "index"], [172, 3, 1, "", "msg"], [172, 3, 1, "", "name"]], "mltk.core.tflite_micro.TfliteMicroModel": [[173, 2, 1, "", "__init__"], [173, 1, 1, "", "accelerator"], [173, 1, 1, "", "details"], [173, 2, 1, "", "get_layer_error"], [173, 2, 1, "", "get_profiling_results"], [173, 2, 1, "", "get_recorded_data"], [173, 2, 1, "", "input"], [173, 1, 1, "", "input_size"], [173, 2, 1, "", "invoke"], [173, 1, 1, "", "is_profiler_enabled"], [173, 1, 1, "", "is_recorder_enabled"], [173, 1, 1, "", "is_tensor_recorder_enabled"], [173, 1, 1, "", "layer_errors"], [173, 2, 1, "", "output"], [173, 1, 1, "", "output_size"]], "mltk.core.tflite_micro.TfliteMicroModelDetails": [[174, 2, 1, "", "__init__"], [174, 1, 1, "", "accelerator"], [174, 1, 1, "", "classes"], [174, 1, 1, "", "date"], [174, 1, 1, "", "description"], [174, 1, 1, "", "hash"], [174, 1, 1, "", "memory_plan"], [174, 1, 1, "", "name"], [174, 1, 1, "", "runtime_memory_size"], [174, 1, 1, "", "version"]], "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult": [[175, 2, 1, "", "__init__"], [175, 2, 1, "", "__new__"], [175, 1, 1, "", "accelerator_cycles"], [175, 2, 1, "", "clear"], [175, 2, 1, "", "copy"], [175, 1, 1, "", "cpu_cycles"], [175, 3, 1, "", "default_factory"], [175, 1, 1, "", "energy"], [175, 2, 1, "", "fromkeys"], [175, 2, 1, "", "get"], [175, 2, 1, "", "items"], [175, 2, 1, "", "keys"], [175, 1, 1, "", "macs"], [175, 1, 1, "", "name"], [175, 1, 1, "", "ops"], [175, 2, 1, "", "pop"], [175, 2, 1, "", "popitem"], [175, 2, 1, "", "setdefault"], [175, 1, 1, "", "time"], [175, 2, 1, "", "update"], [175, 2, 1, "", "values"]], "mltk.core.tflite_micro.tflite_micro_accelerator": [[170, 0, 1, "", "TfliteMicroAccelerator"]], "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator": [[170, 2, 1, "", "__init__"], [170, 1, 1, "", "accelerator_wrapper"], [170, 1, 1, "", "active_variant"], [170, 1, 1, "", "api_version"], [170, 2, 1, "", "compile_model"], [170, 2, 1, "", "enable_data_recorder"], [170, 2, 1, "", "estimate_profiling_results"], [170, 1, 1, "", "git_hash"], [170, 1, 1, "", "name"], [170, 2, 1, "", "set_program_recorder_enabled"], [170, 1, 1, "", "supports_model_compilation"], [170, 1, 1, "", "variants"]], "mltk.core.tflite_model_parameters.flatbuffer_dictionary": [[186, 0, 1, "", "FlatbufferDictionary"]], "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary": [[186, 2, 1, "", "__init__"], [186, 2, 1, "", "deserialize"], [186, 2, 1, "", "put"], [186, 2, 1, "", "serialize"], [186, 2, 1, "", "summary"]], "mltk.core.train_model": [[167, 0, 1, "", "TrainingResults"]], "mltk.core.train_model.TrainingResults": [[167, 2, 1, "", "__init__"], [167, 2, 1, "", "asdict"], [167, 3, 1, "", "epochs"], [167, 2, 1, "", "get_best_metric"], [167, 3, 1, "", "history"], [167, 3, 1, "", "keras_model"], [167, 3, 1, "", "mltk_model"], [167, 1, 1, "", "model_archive_path"], [167, 3, 1, "", "params"]], "mltk.datasets.accelerometer": [[93, 5, 0, "-", "tflm_magic_wand"]], "mltk.datasets.accelerometer.tflm_magic_wand": [[93, 4, 1, "", "load_data"], [93, 4, 1, "", "prepare_data"]], "mltk.datasets.audio.background_noise": [[94, 5, 0, "-", "ambient"], [95, 5, 0, "-", "brd2601"], [96, 5, 0, "-", "esc50"]], "mltk.datasets.audio.background_noise.ambient": [[94, 6, 1, "", "DOWNLOAD_URLS"], [94, 4, 1, "", "download"]], "mltk.datasets.audio.background_noise.brd2601": [[95, 6, 1, "", "DOWNLOAD_URL"], [95, 6, 1, "", "VERIFY_SHA1"], [95, 4, 1, "", "download"]], "mltk.datasets.audio.background_noise.esc50": [[96, 6, 1, "", "DOWNLOAD_URL"], [96, 6, 1, "", "VERIFY_SHA1"], [96, 4, 1, "", "download"]], "mltk.datasets.audio": [[97, 5, 0, "-", "direction_commands"], [98, 5, 0, "-", "hey_gecko"], [99, 5, 0, "-", "mit_ir_survey"], [102, 5, 0, "-", "on_off"], [104, 5, 0, "-", "ten_digits"], [105, 5, 0, "-", "yes_no"]], "mltk.datasets.audio.direction_commands": [[97, 6, 1, "", "CLASSES"], [97, 6, 1, "", "DOWNLOAD_URL"], [97, 6, 1, "", "VERIFY_SHA1"], [97, 4, 1, "", "download"], [97, 4, 1, "", "generate_dataset"]], "mltk.datasets.audio.hey_gecko": [[98, 6, 1, "", "CLASSES"], [98, 6, 1, "", "DOWNLOAD_URL"], [98, 6, 1, "", "VERIFY_SHA1"], [98, 4, 1, "", "download"], [98, 4, 1, "", "generate_dataset"]], "mltk.datasets.audio.mit_ir_survey": [[99, 6, 1, "", "DOWNLOAD_URL"], [99, 6, 1, "", "VERIFY_SHA1"], [99, 4, 1, "", "apply_ir"], [99, 4, 1, "", "apply_random_ir"], [99, 4, 1, "", "download"], [99, 4, 1, "", "load_dataset"]], "mltk.datasets.audio.mlcommons": [[100, 5, 0, "-", "ml_commons_keywords"], [101, 5, 0, "-", "ml_commons_voice"]], "mltk.datasets.audio.mlcommons.ml_commons_keywords": [[100, 6, 1, "", "DOWNLOAD_URL1"], [100, 6, 1, "", "DOWNLOAD_URL2"], [100, 6, 1, "", "VERIFY_URL1_SHA1"], [100, 6, 1, "", "VERIFY_URL2_SHA1"], [100, 4, 1, "", "download"]], "mltk.datasets.audio.mlcommons.ml_commons_voice": [[101, 6, 1, "", "DOWNLOAD_URL"], [101, 6, 1, "", "VERIFY_SHA1"], [101, 4, 1, "", "download"]], "mltk.datasets.audio.on_off": [[102, 6, 1, "", "CLASSES"], [102, 6, 1, "", "DOWNLOAD_URL"], [102, 6, 1, "", "VERIFY_SHA1"], [102, 4, 1, "", "download"], [102, 4, 1, "", "generate_dataset"]], "mltk.datasets.audio.speech_commands": [[103, 5, 0, "-", "speech_commands_v2"]], "mltk.datasets.audio.speech_commands.speech_commands_v2": [[103, 6, 1, "", "CLASSES"], [103, 6, 1, "", "DOWNLOAD_URL"], [103, 6, 1, "", "VERIFY_SHA1"], [103, 4, 1, "", "list_valid_filenames_in_directory"], [103, 4, 1, "", "load_clean_data"], [103, 4, 1, "", "load_data"]], "mltk.datasets.audio.ten_digits": [[104, 6, 1, "", "CLASSES"], [104, 6, 1, "", "DOWNLOAD_URL"], [104, 6, 1, "", "VERIFY_SHA1"], [104, 4, 1, "", "download"], [104, 4, 1, "", "generate_dataset"]], "mltk.datasets.audio.yes_no": [[105, 6, 1, "", "CLASSES"], [105, 6, 1, "", "DOWNLOAD_URL"], [105, 6, 1, "", "VERIFY_SHA1"], [105, 4, 1, "", "download"], [105, 4, 1, "", "generate_dataset"]], "mltk.datasets.image": [[106, 5, 0, "-", "cifar10"], [107, 5, 0, "-", "fashion_mnist"], [108, 5, 0, "-", "mnist"], [109, 5, 0, "-", "rock_paper_scissors_v1"], [110, 5, 0, "-", "rock_paper_scissors_v2"]], "mltk.datasets.image.cifar10": [[106, 6, 1, "", "DOWNLOAD_URL"], [106, 6, 1, "", "VERIFY_SHA1"], [106, 4, 1, "", "load_data"], [106, 4, 1, "", "load_data_directory"]], "mltk.datasets.image.fashion_mnist": [[107, 6, 1, "", "CLASSES"], [107, 6, 1, "", "INPUT_SHAPE"], [107, 4, 1, "", "load_data"], [107, 4, 1, "", "load_data_directory"]], "mltk.datasets.image.mnist": [[108, 6, 1, "", "CLASSES"], [108, 6, 1, "", "DOWNLOAD_URL"], [108, 6, 1, "", "INPUT_SHAPE"], [108, 6, 1, "", "VERIFY_SHA1"], [108, 4, 1, "", "load_data"], [108, 4, 1, "", "load_data_directory"]], "mltk.datasets.image.rock_paper_scissors_v1": [[109, 6, 1, "", "CLASSES"], [109, 6, 1, "", "DOWNLOAD_URL"], [109, 6, 1, "", "INPUT_DEPTH"], [109, 6, 1, "", "INPUT_HEIGHT"], [109, 6, 1, "", "INPUT_SHAPE"], [109, 6, 1, "", "INPUT_WIDTH"], [109, 6, 1, "", "VERIFY_SHA1"], [109, 4, 1, "", "load_data"]], "mltk.datasets.image.rock_paper_scissors_v2": [[110, 6, 1, "", "CLASSES"], [110, 6, 1, "", "DOWNLOAD_URL"], [110, 6, 1, "", "INPUT_DEPTH"], [110, 6, 1, "", "INPUT_HEIGHT"], [110, 6, 1, "", "INPUT_SHAPE"], [110, 6, 1, "", "INPUT_WIDTH"], [110, 6, 1, "", "VERIFY_SHA1"], [110, 4, 1, "", "load_data"]], "mltk.models.examples": [[129, 5, 0, "-", "audio_example1"], [130, 5, 0, "-", "audio_tf_dataset"], [131, 5, 0, "-", "autoencoder_example"], [132, 5, 0, "-", "basic_example"], [133, 5, 0, "-", "basic_tf_dataset_example"], [134, 5, 0, "-", "binary_classification"], [135, 5, 0, "-", "conv1d_example"], [136, 5, 0, "-", "image_example1"], [137, 5, 0, "-", "image_tf_dataset"], [139, 5, 0, "-", "siamese_contrastive"]], "mltk.models.shared.dsconv_arm": [[128, 4, 1, "", "DepthwiseSeparableConv2D_ARM"]], "mltk.models.shared.fully_connected_autoencoder": [[128, 4, 1, "", "FullyConnectedAutoEncoder"]], "mltk.models.shared.mobilenet_v1": [[128, 4, 1, "", "MobileNetV1"]], "mltk.models.shared.mobilenet_v2": [[128, 4, 1, "", "MobileNetV2"]], "mltk.models.shared.resnet_v1": [[128, 4, 1, "", "ResNet10V1"]], "mltk.models.shared.tenet": [[128, 4, 1, "", "TENet"]], "mltk.models.siliconlabs": [[141, 5, 0, "-", "fingerprint_signature_generator"], [143, 5, 0, "-", "keyword_spotting_alexa"], [144, 5, 0, "-", "keyword_spotting_mobilenetv2"], [145, 5, 0, "-", "keyword_spotting_numbers"], [146, 5, 0, "-", "keyword_spotting_on_off"], [147, 5, 0, "-", "keyword_spotting_on_off_v2"], [148, 5, 0, "-", "keyword_spotting_on_off_v3"], [149, 5, 0, "-", "keyword_spotting_pacman"], [150, 5, 0, "-", "keyword_spotting_pacman_v2"], [151, 5, 0, "-", "keyword_spotting_pacman_v3"], [152, 5, 0, "-", "keyword_spotting_with_transfer_learning"], [153, 5, 0, "-", "rock_paper_scissors"]], "mltk.models.tflite_micro": [[155, 5, 0, "-", "tflite_micro_magic_wand"], [156, 5, 0, "-", "tflite_micro_speech"]], "mltk.models.tinyml": [[157, 5, 0, "-", "anomaly_detection"], [158, 5, 0, "-", "image_classification"], [160, 5, 0, "-", "keyword_spotting"], [161, 5, 0, "-", "visual_wake_words"]], "mltk.utils": [[208, 5, 0, "-", "archive"], [209, 5, 0, "-", "archive_downloader"], [218, 5, 0, "-", "bin2header"], [219, 5, 0, "-", "cmake"], [220, 5, 0, "-", "gpu"], [221, 5, 0, "-", "hasher"], [228, 5, 0, "-", "logger"], [229, 5, 0, "-", "path"], [231, 5, 0, "-", "python"], [234, 5, 0, "-", "shell_cmd"], [236, 5, 0, "-", "string_formatting"], [237, 5, 0, "-", "system"]], "mltk.utils.archive": [[208, 4, 1, "", "extract_archive"], [208, 4, 1, "", "gzip_directory_files"], [208, 4, 1, "", "gzip_file"]], "mltk.utils.archive_downloader": [[209, 4, 1, "", "download_url"], [209, 4, 1, "", "download_verify_extract"], [209, 4, 1, "", "verify_extract"], [209, 4, 1, "", "verify_file_hash"], [209, 4, 1, "", "verify_sha1"], [209, 4, 1, "", "verify_sha256"]], "mltk.utils.audio_dataset_generator": [[212, 0, 1, "", "AudioDatasetGenerator"], [210, 0, 1, "", "Augmentation"], [211, 0, 1, "", "GenerationConfig"], [214, 0, 1, "", "Keyword"], [215, 0, 1, "", "Voice"], [216, 0, 1, "", "VoicePitch"], [217, 0, 1, "", "VoiceRate"]], "mltk.utils.audio_dataset_generator.AudioDatasetGenerator": [[212, 2, 1, "", "__init__"], [212, 2, 1, "", "count_characters"], [212, 2, 1, "", "generate"], [212, 2, 1, "", "get_summary"], [212, 2, 1, "", "is_backend_loaded"], [212, 1, 1, "", "is_running"], [212, 2, 1, "", "join"], [212, 2, 1, "", "list_configurations"], [212, 2, 1, "", "list_languages"], [212, 2, 1, "", "list_supported_backends"], [212, 2, 1, "", "list_voices"], [212, 2, 1, "", "load_backend"], [212, 1, 1, "", "out_dir"], [212, 2, 1, "", "shutdown"]], "mltk.utils.audio_dataset_generator.Augmentation": [[210, 2, 1, "", "count"], [210, 2, 1, "", "index"], [210, 3, 1, "", "pitch"], [210, 3, 1, "", "rate"]], "mltk.utils.audio_dataset_generator.GenerationConfig": [[211, 2, 1, "", "__init__"], [211, 2, 1, "", "copy"], [211, 3, 1, "", "keyword"], [211, 3, 1, "", "keyword_group"], [211, 3, 1, "", "pitch"], [211, 3, 1, "", "rate"], [211, 3, 1, "", "voice"]], "mltk.utils.audio_dataset_generator.Keyword": [[214, 3, 1, "", "aliases"], [214, 2, 1, "", "as_list"], [214, 2, 1, "", "count"], [214, 2, 1, "", "index"], [214, 3, 1, "", "max_count"], [214, 3, 1, "", "value"]], "mltk.utils.audio_dataset_generator.Voice": [[215, 2, 1, "", "__init__"], [215, 3, 1, "", "backend"], [215, 2, 1, "", "hashable_value"], [215, 1, 1, "", "hex_hash"], [215, 3, 1, "", "language_code"], [215, 3, 1, "", "name"]], "mltk.utils.audio_dataset_generator.VoicePitch": [[216, 2, 1, "", "__init__"], [216, 2, 1, "", "__new__"], [216, 2, 1, "", "capitalize"], [216, 2, 1, "", "casefold"], [216, 2, 1, "", "center"], [216, 2, 1, "", "count"], [216, 2, 1, "", "encode"], [216, 2, 1, "", "endswith"], [216, 2, 1, "", "expandtabs"], [216, 2, 1, "", "find"], [216, 2, 1, "", "format"], [216, 2, 1, "", "format_map"], [216, 2, 1, "", "index"], [216, 2, 1, "", "isalnum"], [216, 2, 1, "", "isalpha"], [216, 2, 1, "", "isascii"], [216, 2, 1, "", "isdecimal"], [216, 2, 1, "", "isdigit"], [216, 2, 1, "", "isidentifier"], [216, 2, 1, "", "islower"], [216, 2, 1, "", "isnumeric"], [216, 2, 1, "", "isprintable"], [216, 2, 1, "", "isspace"], [216, 2, 1, "", "istitle"], [216, 2, 1, "", "isupper"], [216, 2, 1, "", "join"], [216, 2, 1, "", "ljust"], [216, 2, 1, "", "lower"], [216, 2, 1, "", "lstrip"], [216, 2, 1, "", "maketrans"], [216, 2, 1, "", "partition"], [216, 2, 1, "", "removeprefix"], [216, 2, 1, "", "removesuffix"], [216, 2, 1, "", "replace"], [216, 2, 1, "", "rfind"], [216, 2, 1, "", "rindex"], [216, 2, 1, "", "rjust"], [216, 2, 1, "", "rpartition"], [216, 2, 1, "", "rsplit"], [216, 2, 1, "", "rstrip"], [216, 2, 1, "", "split"], [216, 2, 1, "", "splitlines"], [216, 2, 1, "", "startswith"], [216, 2, 1, "", "strip"], [216, 2, 1, "", "swapcase"], [216, 2, 1, "", "title"], [216, 2, 1, "", "translate"], [216, 2, 1, "", "upper"], [216, 2, 1, "", "zfill"]], "mltk.utils.audio_dataset_generator.VoiceRate": [[217, 2, 1, "", "__init__"], [217, 2, 1, "", "__new__"], [217, 2, 1, "", "capitalize"], [217, 2, 1, "", "casefold"], [217, 2, 1, "", "center"], [217, 2, 1, "", "count"], [217, 2, 1, "", "encode"], [217, 2, 1, "", "endswith"], [217, 2, 1, "", "expandtabs"], [217, 2, 1, "", "find"], [217, 2, 1, "", "format"], [217, 2, 1, "", "format_map"], [217, 2, 1, "", "index"], [217, 2, 1, "", "isalnum"], [217, 2, 1, "", "isalpha"], [217, 2, 1, "", "isascii"], [217, 2, 1, "", "isdecimal"], [217, 2, 1, "", "isdigit"], [217, 2, 1, "", "isidentifier"], [217, 2, 1, "", "islower"], [217, 2, 1, "", "isnumeric"], [217, 2, 1, "", "isprintable"], [217, 2, 1, "", "isspace"], [217, 2, 1, "", "istitle"], [217, 2, 1, "", "isupper"], [217, 2, 1, "", "join"], [217, 2, 1, "", "ljust"], [217, 2, 1, "", "lower"], [217, 2, 1, "", "lstrip"], [217, 2, 1, "", "maketrans"], [217, 2, 1, "", "partition"], [217, 2, 1, "", "removeprefix"], [217, 2, 1, "", "removesuffix"], [217, 2, 1, "", "replace"], [217, 2, 1, "", "rfind"], [217, 2, 1, "", "rindex"], [217, 2, 1, "", "rjust"], [217, 2, 1, "", "rpartition"], [217, 2, 1, "", "rsplit"], [217, 2, 1, "", "rstrip"], [217, 2, 1, "", "split"], [217, 2, 1, "", "splitlines"], [217, 2, 1, "", "startswith"], [217, 2, 1, "", "strip"], [217, 2, 1, "", "swapcase"], [217, 2, 1, "", "title"], [217, 2, 1, "", "translate"], [217, 2, 1, "", "upper"], [217, 2, 1, "", "zfill"]], "mltk.utils.bin2header": [[218, 4, 1, "", "bin2header"], [218, 4, 1, "", "main"]], "mltk.utils.cmake": [[219, 4, 1, "", "build_mltk_target"], [219, 4, 1, "", "get_build_directory"], [219, 4, 1, "", "invoke_mltk_target"], [219, 4, 1, "", "parse_variables"]], "mltk.utils.gpu": [[220, 0, 1, "", "TensorflowCudaVersions"], [220, 4, 1, "", "check_tensorflow_cuda_compatibility_error"], [220, 4, 1, "", "deinitialize"], [220, 4, 1, "", "disable"], [220, 4, 1, "", "get_tensorflow_version_with_cudnn_version"], [220, 4, 1, "", "initialize"]], "mltk.utils.gpu.TensorflowCudaVersions": [[220, 2, 1, "", "__getnewargs__"], [220, 3, 1, "", "__match_args__"], [220, 3, 1, "", "__module__"], [220, 2, 1, "", "__new__"], [220, 2, 1, "", "__repr__"], [220, 3, 1, "", "__slots__"], [220, 3, 1, "", "cuda"], [220, 3, 1, "", "cudnn"], [220, 3, 1, "", "python_max"], [220, 3, 1, "", "python_min"], [220, 3, 1, "", "tensorflow"]], "mltk.utils.hasher": [[221, 4, 1, "", "generate_hash"], [221, 4, 1, "", "hash_file"], [221, 4, 1, "", "hash_object"]], "mltk.utils.jlink_stream": [[224, 0, 1, "", "JLinkDataStream"], [223, 0, 1, "", "JlinkCommandStream"], [226, 0, 1, "", "JlinkStream"], [227, 0, 1, "", "JlinkStreamOptions"]], "mltk.utils.jlink_stream.JLinkDataStream": [[224, 2, 1, "", "__init__"], [224, 1, 1, "", "buffer_hexdump"], [224, 1, 1, "", "buffer_unused"], [224, 1, 1, "", "buffer_used"], [224, 2, 1, "", "close"], [224, 1, 1, "", "end_time"], [224, 2, 1, "", "flush"], [224, 1, 1, "", "is_opened"], [224, 1, 1, "", "max_read_size"], [224, 1, 1, "", "mode"], [224, 1, 1, "", "name"], [224, 2, 1, "", "read"], [224, 2, 1, "", "read_all"], [224, 1, 1, "", "read_data_available"], [224, 1, 1, "", "timeout"], [224, 2, 1, "", "write"], [224, 1, 1, "", "write_data_available"]], "mltk.utils.jlink_stream.JlinkCommandStream": [[223, 2, 1, "", "__init__"], [223, 2, 1, "", "close"], [223, 2, 1, "", "issue"], [223, 2, 1, "", "open"]], "mltk.utils.jlink_stream.JlinkStream": [[226, 2, 1, "", "__init__"], [226, 2, 1, "", "close"], [226, 2, 1, "", "connect"], [226, 1, 1, "", "default_options"], [226, 2, 1, "", "disconnect"], [226, 1, 1, "", "is_connected"], [226, 2, 1, "", "open"], [226, 2, 1, "", "process"], [226, 2, 1, "", "read"], [226, 2, 1, "", "write"]], "mltk.utils.logger": [[228, 0, 1, "", "ConsoleLoggerLevelContext"], [228, 0, 1, "", "DummyLogger"], [228, 4, 1, "", "add_console_logger"], [228, 4, 1, "", "get_level"], [228, 4, 1, "", "get_logger"], [228, 4, 1, "", "make_filelike"], [228, 4, 1, "", "redirect_stream"], [228, 4, 1, "", "set_console_level"], [228, 4, 1, "", "timing_decorator"]], "mltk.utils.logger.ConsoleLoggerLevelContext": [[228, 3, 1, "", "__dict__"], [228, 2, 1, "", "__enter__"], [228, 2, 1, "", "__exit__"], [228, 2, 1, "", "__init__"], [228, 3, 1, "", "__module__"], [228, 3, 1, "", "__weakref__"]], "mltk.utils.logger.DummyLogger": [[228, 3, 1, "", "__dict__"], [228, 2, 1, "", "__init__"], [228, 3, 1, "", "__module__"], [228, 3, 1, "", "__weakref__"], [228, 2, 1, "", "debug"], [228, 2, 1, "", "error"], [228, 2, 1, "", "exception"], [228, 2, 1, "", "flush"], [228, 2, 1, "", "info"], [228, 2, 1, "", "warning"], [228, 2, 1, "", "write"]], "mltk.utils.path": [[229, 4, 1, "", "add_user_setting"], [229, 4, 1, "", "clean_directory"], [229, 4, 1, "", "copy_directory"], [229, 4, 1, "", "create_dir"], [229, 4, 1, "", "create_tempdir"], [229, 4, 1, "", "create_user_dir"], [229, 4, 1, "", "extension"], [229, 4, 1, "", "file_is_in_use"], [229, 4, 1, "", "file_is_newer"], [229, 4, 1, "", "fullpath"], [229, 4, 1, "", "get_actual_path"], [229, 4, 1, "", "get_user_setting"], [229, 4, 1, "", "has_filename"], [229, 4, 1, "", "pushd"], [229, 4, 1, "", "recursive_listdir"], [229, 4, 1, "", "remove_directory"], [229, 4, 1, "", "set_file_last_modified"], [229, 4, 1, "", "walk_with_depth"]], "mltk.utils.process_pool": [[230, 0, 1, "", "ProcessPool"]], "mltk.utils.process_pool.ProcessPool": [[230, 2, 1, "", "__init__"], [230, 2, 1, "", "create_batch"], [230, 1, 1, "", "is_running"], [230, 1, 1, "", "n_jobs"], [230, 1, 1, "", "name"], [230, 2, 1, "", "process"], [230, 2, 1, "", "shutdown"], [230, 2, 1, "", "start"]], "mltk.utils.python": [[231, 4, 1, "", "DefaultDict"], [231, 0, 1, "", "DictObject"], [231, 6, 1, "", "SHORT_VERSION"], [231, 4, 1, "", "append_exception_msg"], [231, 4, 1, "", "as_list"], [231, 4, 1, "", "contains_class_type"], [231, 4, 1, "", "debugger_is_active"], [231, 4, 1, "", "disable_warnings"], [231, 4, 1, "", "find_object_key_with_value"], [231, 4, 1, "", "find_object_value_with_key"], [231, 4, 1, "", "find_object_value_with_key_or_value"], [231, 4, 1, "", "flatten_list"], [231, 4, 1, "", "forward_method_kwargs"], [231, 4, 1, "", "get_case_insensitive"], [231, 4, 1, "", "import_module_at_path"], [231, 4, 1, "", "install_pip_package"], [231, 4, 1, "", "is_false"], [231, 4, 1, "", "is_true"], [231, 4, 1, "", "list_rindex"], [231, 4, 1, "", "load_json_safe"], [231, 4, 1, "", "merge_dict"], [231, 4, 1, "", "notebook_is_active"], [231, 4, 1, "", "prepend_exception_msg"], [231, 4, 1, "", "set_absl_log_level"], [231, 4, 1, "", "timeit"]], "mltk.utils.python.DictObject": [[231, 3, 1, "", "__dict__"], [231, 2, 1, "", "__getattr__"], [231, 3, 1, "", "__module__"], [231, 2, 1, "", "__setattr__"], [231, 3, 1, "", "__weakref__"]], "mltk.utils.serial_reader": [[233, 0, 1, "", "SerialReader"]], "mltk.utils.serial_reader.SerialReader": [[233, 2, 1, "", "__init__"], [233, 1, 1, "", "captured_data"], [233, 2, 1, "", "close"], [233, 1, 1, "", "error_message"], [233, 1, 1, "", "failed"], [233, 2, 1, "", "flush"], [233, 1, 1, "", "is_open"], [233, 2, 1, "", "list_ports"], [233, 2, 1, "", "open"], [233, 2, 1, "", "read"], [233, 2, 1, "", "resolve_port"], [233, 1, 1, "", "started"], [233, 1, 1, "", "stopped"], [233, 2, 1, "", "write"]], "mltk.utils.shell_cmd": [[234, 4, 1, "", "run_shell_cmd"]], "mltk.utils.signal_handler": [[235, 0, 1, "", "SignalHandler"]], "mltk.utils.signal_handler.SignalHandler": [[235, 2, 1, "", "__init__"]], "mltk.utils.string_formatting": [[236, 0, 1, "", "FormattedFloat"], [236, 0, 1, "", "FormattedInt"], [236, 4, 1, "", "convert_units"], [236, 4, 1, "", "format_units"], [236, 4, 1, "", "iso_time_filename_str"], [236, 4, 1, "", "iso_time_str"], [236, 4, 1, "", "pretty_time_str"]], "mltk.utils.string_formatting.FormattedFloat": [[236, 3, 1, "", "__dict__"], [236, 3, 1, "", "__module__"], [236, 2, 1, "", "__str__"], [236, 3, 1, "", "__weakref__"]], "mltk.utils.string_formatting.FormattedInt": [[236, 3, 1, "", "__dict__"], [236, 3, 1, "", "__module__"], [236, 2, 1, "", "__str__"]], "mltk.utils.system": [[237, 4, 1, "", "get_current_os"], [237, 4, 1, "", "get_username"], [237, 4, 1, "", "has_admin"], [237, 4, 1, "", "is_linux"], [237, 4, 1, "", "is_osx"], [237, 4, 1, "", "is_windows"], [237, 4, 1, "", "make_path_executable"], [237, 4, 1, "", "raise_signal"], [237, 4, 1, "", "send_signal"]], "mltk.utils.uart_stream": [[239, 0, 1, "", "UartStream"]], "mltk.utils.uart_stream.UartStream": [[239, 2, 1, "", "__init__"], [239, 1, 1, "", "baud"], [239, 2, 1, "", "close"], [239, 2, 1, "", "flush_input"], [239, 1, 1, "", "is_open"], [239, 1, 1, "", "is_synchronized"], [239, 2, 1, "", "list_ports"], [239, 2, 1, "", "open"], [239, 1, 1, "", "port"], [239, 2, 1, "", "read"], [239, 2, 1, "", "read_all"], [239, 2, 1, "", "read_command"], [239, 2, 1, "", "resolve_port"], [239, 1, 1, "", "rx_bytes_available"], [239, 2, 1, "", "synchronize"], [239, 2, 1, "", "synchronize_blocking"], [239, 1, 1, "", "tx_bytes_available"], [239, 2, 1, "", "wait"], [239, 2, 1, "", "write"], [239, 2, 1, "", "write_all"], [239, 2, 1, "", "write_command"]]}, "objtypes": {"0": "py:class", "1": "py:property", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:module", "6": "py:data"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "property", "Python property"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "module", "Python module"], "6": ["py", "data", "Python data"]}, "titleterms": {"uart": [0, 238], "stream": [0, 225, 238], "data": [0, 51, 57, 88, 249, 255, 256, 257, 258, 259, 260, 261, 265, 266, 267], "test": [0, 256, 258, 260, 262, 264], "setup": [0, 34, 37, 39, 43, 44, 58, 254, 263, 266, 268], "step": [0, 254, 256, 266, 267, 268], "audio": [1, 2, 35, 36, 80, 81, 82, 83, 84, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 213, 243, 259, 260, 261, 264, 267, 268], "featur": [1, 243, 255, 260, 261, 268], "gener": [1, 2, 37, 62, 67, 71, 94, 213, 243, 257, 258, 259, 260, 261, 268], "overview": [1, 3, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 79, 100, 101, 145, 242, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 268], "benefit": 1, "gecko": [1, 43, 98, 241], "sdk": [1, 43, 241], "compon": 1, "sourc": [1, 42, 45, 47, 48, 259, 261], "code": [1, 35, 36, 37, 38, 39, 41, 42, 44, 45, 47, 48, 263], "mltk": [1, 34, 43, 44, 45, 47, 48, 71, 76, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 260, 261, 263], "c": [1, 33, 40, 42, 44, 46, 241, 257, 259], "python": [1, 14, 34, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 65, 68, 69, 72, 74, 231, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 257, 258, 260, 261, 263, 266], "wrapper": [1, 34, 42, 44, 45, 46, 47, 48, 241], "usag": [1, 4, 6, 8, 10, 12, 15, 17, 19, 21, 23, 25, 27, 29, 30, 64, 120, 171, 190, 213, 225, 232, 238, 255], "visual": [1, 2, 35, 36, 37, 38, 39, 41, 44, 72, 252, 258, 259, 260], "util": [1, 2, 64, 80, 85, 89, 90, 91, 92, 126, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 258, 260], "classif": [2, 39, 61, 96, 244, 258], "classifi": [2, 35, 36, 39, 243, 259, 260], "us": [2, 51, 57, 63, 243, 257, 258, 260, 262, 267], "pc": [2, 35, 37, 39, 260, 262], "microphon": [2, 262], "simul": [2, 63, 245, 258, 260], "latenc": 2, "record": [2, 248, 260, 268], "dump": [2, 35, 37, 39, 259], "spectrogram": [2, 35, 157, 160, 260, 267], "develop": [2, 34, 42, 43, 44, 74, 241, 256, 259, 262], "board": [2, 262], "": [2, 51, 142], "from": [2, 70, 71, 147, 150, 254, 256, 257, 258, 259, 260, 261, 262, 266, 267], "updat": [2, 35, 36, 37, 39, 41, 62, 65, 74, 246, 249, 251, 258, 262, 264], "audiofeaturegener": [2, 45, 83, 243, 259, 264], "paramet": [2, 35, 36, 62, 67, 69, 241, 249, 251, 257, 258, 259, 260, 261], "synthet": [2, 259, 260, 268], "dataset": [2, 67, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 157, 158, 160, 161, 213, 256, 257, 258, 259, 260, 261, 266, 268], "keyword": [3, 100, 214, 259, 260, 261, 262, 264], "spot": [3, 259, 260, 261, 262], "classify_audio": [4, 35], "addit": [4, 6, 8, 10, 12, 15, 17, 19, 21, 23, 25, 27, 29, 30, 35, 36, 45, 47, 48, 67, 71], "document": [4, 6, 8, 10, 12, 15, 17, 19, 21, 23, 25, 27, 29, 30], "classify_imag": [6, 39], "command": [8, 14, 34, 35, 36, 37, 38, 39, 41, 45, 47, 48, 52, 61, 62, 63, 65, 68, 69, 71, 72, 77, 97, 103, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 241, 254, 257, 258, 259, 260, 261], "evalu": [10, 56, 61, 67, 145, 244, 257, 258, 260, 266, 267], "fingerprint_read": 12, "line": [14, 34, 35, 36, 37, 38, 39, 41, 52, 62, 71, 241, 254, 257, 258, 260, 261], "basic": [14, 62, 63, 67, 245, 255, 258, 260, 262], "enabl": [14, 265], "virtual": [14, 43, 44], "environ": [14, 43, 44, 71, 75, 263, 266], "format": [14, 266], "help": 14, "support": [14, 78, 241, 266], "oper": [14, 63, 163, 266], "profil": [15, 41, 61, 63, 64, 70, 129, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 245, 248, 256, 258, 259, 260, 261, 264, 266], "quantiz": [17, 61, 65, 156, 157, 158, 160, 161, 246, 265, 266, 267], "ssh": [19, 70, 71, 77, 241, 256], "summar": [21, 68, 247, 264], "tensorboard": [23, 70], "train": [25, 50, 55, 63, 67, 68, 69, 70, 71, 72, 147, 150, 156, 241, 245, 247, 250, 252, 255, 256, 257, 258, 259, 260, 261, 262, 264], "update_param": [27, 39, 41], "view": [29, 62, 72, 252], "view_audio": 30, "build": [33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 47, 48, 257, 259, 261], "option": [33, 44, 64, 71, 241, 256], "mltk_cmake_log_level": 33, "mltk_platform_nam": 33, "tflite_micro_acceler": [33, 37, 39, 41, 170], "mltk_target": 33, "mltk_enable_debug_info_in_release_build": 33, "mltk_enable_output_disassembli": 33, "model_profiler_model": [33, 41], "audio_classifier_model": 33, "instal": [34, 43, 44, 71, 74, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 260, 261, 263, 266], "tool": [34, 43, 44, 241], "0": [34, 43, 44], "o": [34, 43, 44], "1": [34, 43, 44, 61, 62, 63, 65, 68, 69, 70, 71, 72, 244, 245, 246, 247, 248, 249, 250, 251, 252, 263, 267], "cmake": [34, 35, 36, 37, 39, 41, 43, 44, 45, 47, 48, 52, 219], "2": [34, 43, 44, 61, 62, 63, 68, 69, 70, 71, 72, 244, 245, 247, 248, 249, 250, 251, 252, 263], "7": [34, 43, 44, 249], "zip": [34, 43, 44, 76], "3": [34, 43, 44, 61, 62, 63, 68, 69, 70, 71, 72, 244, 245, 247, 248, 249, 251, 252], "4": [34, 43, 44, 63, 68, 70, 71, 72, 245, 247, 249, 252], "git": [34, 43, 44], "5": [34, 43, 44, 70, 71, 249], "clone": [34, 43, 44], "repositori": [34, 43, 44], "sequenc": [34, 71, 258], "configur": [34, 44, 70, 71, 256, 258, 260, 262, 266], "set": [34, 37, 39, 41, 65, 67, 71, 77, 256, 258, 259, 260, 261, 262, 264, 267], "project": [34, 44], "specif": [34, 61, 62, 67, 69, 76, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 251, 256, 258, 260, 262, 264], "target": [34, 44], "run": [34, 35, 36, 37, 38, 39, 41, 43, 44, 52, 69, 70, 249, 250, 254, 257, 258, 259, 260, 261, 262, 264, 266], "output": [34, 39, 69, 248, 266], "execut": 34, "exampl": [34, 40, 42, 43, 44, 49, 61, 62, 63, 65, 67, 68, 69, 71, 72, 73, 77, 120, 138, 171, 190, 213, 225, 232, 238, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 268], "applic": [34, 43, 44, 257, 259, 261], "quick": [35, 36, 37, 38, 39, 41, 61, 62, 63, 65, 68, 69, 70, 71, 72, 76, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268], "link": [35, 36, 37, 38, 39, 41, 45, 47, 48, 225, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268], "behavior": [35, 36, 37, 39], "model": [35, 36, 37, 39, 41, 50, 51, 52, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 113, 120, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 171, 190, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "via": [35, 36, 37, 39, 41, 45, 47, 48, 62, 71, 241], "simplic": [35, 36, 37, 38, 39, 41, 43, 52, 260], "studio": [35, 36, 37, 38, 39, 41, 43, 44, 52, 260], "debug": [35, 36, 37, 38, 39, 41, 44, 50, 263, 267], "modif": [35, 254], "variabl": [35, 75], "verbos": 35, "window_m": 35, "threshold": [35, 257], "suppression_m": 35, "count": [35, 51, 256], "volume_gain": 35, "latency_m": 35, "audio_classifier_enable_audio_io": 35, "read": [35, 36, 256, 259, 261, 262, 264], "ble": 36, "pac": [36, 261], "man": [36, 261], "demo": [36, 257, 258, 259, 261], "fingerprint": [37, 257], "authent": [37, 257], "video": [37, 39, 257, 258, 259], "state": 37, "diagram": [37, 129, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161], "signatur": [37, 257], "fingeprint_read": 37, "hardwar": [37, 39, 63, 78, 245, 257, 258, 259, 261, 264], "imag": [37, 39, 85, 86, 87, 106, 107, 108, 109, 110, 111, 256, 258], "fingerprint_authenticator_model": 37, "hello": 38, "world": 38, "input": [39, 51, 57, 248, 265, 266, 267], "normal": [39, 90, 265, 267], "image_classifier_model": 39, "model_profiler_generate_op_resolver_head": 41, "model_profiler_model_memory_sect": 41, "model_profiler_runtime_memory_s": 41, "model_profiler_runtime_memory_sect": 41, "tflite_micro_accelerator_profiler_en": 41, "tflite_micro_recorder_en": 41, "mode": [42, 63], "script": [43, 44, 62, 241, 254, 258], "activ": [43, 44, 267], "add": [43, 62, 249, 254, 256, 258], "segger": 44, "gdb": 44, "server": [44, 64], "serial": [44, 232], "termin": 44, "6": [44, 249], "window": [44, 58, 71], "redistribut": 44, "packag": [44, 74, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 257, 258, 260, 261, 263], "vscode": [44, 73], "open": [44, 70], "workspac": 44, "recommend": [44, 254, 262, 264], "extens": [44, 263], "select": [44, 256, 259, 260, 261, 264], "interpret": [44, 248], "linux": [44, 54, 71], "creat": [44, 256, 257, 258, 259, 260, 261, 264], "file": [44, 60, 62, 71, 76, 77, 245, 248, 249, 264, 266], "user_opt": 44, "kit": [44, 259], "type": [44, 51, 57, 76], "Or": 44, "embed": [44, 52, 57, 241, 267], "arm": [44, 128], "gcc": 44, "download": [44, 64, 71, 245, 248, 249, 266], "pre": [45, 47, 48], "built": [45, 47, 48], "automat": [45, 47, 48], "manual": [45, 47, 48], "mvp": [47, 63, 245, 264], "tensorflow": [48, 58, 65, 67, 68, 72, 76, 93, 154, 171, 190, 241, 247, 252, 267], "lite": [48, 56, 65, 67, 68, 72, 76, 93, 154, 171, 190, 241, 243, 247, 248, 249, 252, 258, 260, 266, 267], "micro": [48, 93, 154, 171, 241, 243, 248], "api": [49, 61, 62, 63, 65, 67, 68, 69, 72, 112, 120, 171, 190, 213, 225, 232, 238, 244, 245, 246, 247, 248, 249, 250, 251, 252], "how": [50, 51, 52, 256, 263], "can": [50, 51], "i": [50, 51, 52, 55, 57, 58, 241, 256], "my": [50, 51, 52, 55, 256], "dure": [50, 56, 267], "reduc": [51, 262], "size": [51, 258, 267], "what": [51, 256], "ar": 51, "resourc": [51, 71], "requir": [51, 58, 257, 258, 259, 261, 266], "int8": [51, 267], "filter": 51, "increas": [51, 259], "stride": 51, "decreas": 51, "kernel": [51, 266], "fullyconnect": 51, "unit": 51, "pool": 51, "layer": [51, 63, 67, 69, 248, 249, 265, 267], "do": [52, 256], "an": [52, 71, 254, 256, 260, 264, 267], "devic": [52, 57, 63, 245, 258, 260, 267], "frequent": 53, "ask": 53, "question": 53, "why": [54, 56, 57, 241, 256], "isn": 54, "t": 54, "gpu": [54, 220, 256], "work": [54, 56, 71, 256, 263], "where": 55, "doe": [56, 70, 256, 263], "kera": [56, 67, 68, 72, 76, 113, 247, 252, 258, 260], "h5": [56, 61, 76, 244], "tf": [56, 243, 248, 249, 258, 260, 266], "tflite": [56, 61, 65, 76, 156, 157, 158, 160, 161, 243, 244, 245, 246, 248, 249], "return": [57, 251, 267], "correct": 57, "result": [57, 61, 64, 71, 256, 267], "preprocess": [57, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 257, 258, 260], "hint": 57, "just": 57, "float32": [57, 266, 267], "am": 58, "see": 58, "dll": 58, "error": [58, 267], "when": [58, 267], "import": [58, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 258], "your": [58, 70], "miss": 58, "nvidia": 58, "cuda": 58, "driver": 58, "guid": [59, 73], "archiv": [60, 65, 76, 208, 246], "content": [60, 255, 256, 257, 258, 259, 260, 261, 265, 268], "directori": [60, 71], "structur": 60, "refer": [61, 62, 63, 65, 68, 69, 70, 71, 72, 76, 111, 112, 120, 140, 171, 190, 213, 225, 232, 238], "non": 61, "v": [61, 68, 263, 266], "evaluateclassifiermixin": [61, 117], "confus": 61, "matrix": 61, "roc": 61, "precis": 61, "recal": 61, "true": 61, "posit": 61, "rate": [61, 259], "fals": 61, "evaluateautoencodermixin": [61, 116], "auto": [61, 128, 244], "encod": [61, 128, 244], "mixin": 62, "audiodatasetmixin": [62, 114], "imagedatasetmixin": [62, 119], "custom": [62, 255, 256], "json": 62, "metric": 63, "entir": 63, "per": 63, "physic": [63, 245, 258, 260], "acceler": [63, 264], "befor": [63, 68, 72, 245, 247, 252], "save": [64, 257], "local": [64, 70, 71, 74, 256, 258, 259, 260, 261], "http": [64, 70], "convert": [65, 67, 258, 260, 266, 267], "optim": [65, 264], "supported_op": 65, "inference_input_typ": 65, "inference_output_typ": 65, "representative_dataset": 65, "search": 66, "path": [66, 229, 266], "name": 67, "discover": 67, "mltkmodel": [67, 69, 76, 122], "class": [67, 258, 259, 260, 266, 268], "instanc": [67, 69, 251, 256], "section": 67, "layout": [67, 69, 258, 264], "note": [67, 69, 256, 258, 260, 268], "about": [67, 69, 256, 258, 260, 265, 266, 267, 268], "hardcod": [67, 69], "callback": [67, 70, 258, 260], "augment": [67, 210, 258, 259, 260, 268], "summari": [68, 129, 131, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 247, 248, 249, 258, 260], "extern": [68, 72, 247, 252], "dry": [69, 250, 258, 260], "100": 69, "epoch": [69, 250, 262], "resum": 69, "monitor": 70, "start": [70, 256, 259], "troubleshoot": 70, "tab": 70, "appear": 70, "remot": [70, 71, 256, 259], "session": [70, 71], "machin": [70, 242, 256, 257, 258, 260, 261], "revers": 70, "tunnel": 70, "localhost": 70, "6002": 70, "web": [70, 268], "browser": 70, "connect": [71, 128, 265], "client": [71, 256], "keypair": [71, 256], "hostnam": 71, "port": 71, "usernam": 71, "kei": [71, 256, 267], "filenam": 71, "upload": 71, "startup": 71, "shutdown": [71, 256], "sync": 71, "locat": 71, "host": 71, "identity_fil": 71, "sshmixin": [71, 124], "user_set": 71, "yaml": 71, "config": [71, 267], "without": 71, "wait": 71, "retriev": 71, "previou": 71, "new": [71, 256], "forcefulli": 71, "discard": 71, "notebook": [73, 257, 258, 266], "googl": [73, 74, 103, 268], "colab": [73, 74], "standard": 74, "mltk_model_path": 75, "mltk_cache_dir": 75, "mltk_user_settings_path": 75, "mltk_readonli": 75, "mltk_setup_py_dep": 75, "mltk_temp_dir": 75, "py": [76, 254], "object": [76, 257, 258, 260, 261], "tflitemodel": [76, 192, 251], "kerasmodel": 76, "model_path": 77, "brd2601": [78, 95], "brd2204": 78, "brd4166": 78, "brd4186": 78, "brd4401": 78, "brd2705": 78, "core": [80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "parallel_gener": [81, 82, 86, 87], "parallelaudiodatagener": 81, "parallelprocessparam": [82, 87], "audio_feature_gener": [83, 84], "audiofeaturegeneratorset": 84, "parallelimagedatagener": 86, "list_directori": 89, "tf_dataset": 91, "common": [92, 100, 101, 128], "acceleromet": [93, 111], "tflm_magic_wand": 93, "magic": 93, "wand": 93, "background_nois": [94, 95, 96], "ambient": 94, "background": [94, 95, 103], "nois": [94, 95, 103], "licens": [94, 99, 108, 146, 242], "esc50": 96, "esc": 96, "environment": 96, "sound": 96, "abstract": [96, 100, 101], "cite": 96, "direction_command": 97, "direct": 97, "hey_gecko": 98, "hei": 98, "mit_ir_survei": 99, "mit": 99, "impuls": [99, 260], "respons": [99, 260], "survei": 99, "credit": [99, 103, 256], "mlcommon": [100, 101], "ml_commons_keyword": 100, "ml": [100, 101, 259, 266], "ml_commons_voic": 101, "voic": [101, 215], "subset": 101, "on_off": 102, "On": [102, 260], "off": [102, 260], "speech_command": 103, "speech_commands_v2": 103, "speech": 103, "v2": [103, 110, 128], "histori": 103, "collect": 103, "organ": 103, "process": [103, 243], "citat": 103, "ten_digit": 104, "ten": 104, "digit": 104, "yes_no": 105, "ye": 105, "No": 105, "cifar10": 106, "fashion_mnist": 107, "fashion": 107, "mnist": [107, 108], "rock_paper_scissors_v1": 109, "rock": [109, 110, 258], "paper": [109, 110, 258], "scissor": [109, 110, 258], "v1": [109, 128, 147, 150], "rock_paper_scissors_v2": 110, "datasetmixin": 115, "evaluatemixin": 118, "mltkdataset": 121, "mltkmodelev": 123, "trainmixin": 125, "load_mltk_model": 126, "load_mltk_model_with_path": 126, "list_mltk_model": 126, "load_tflite_or_keras_model": 126, "load_tflite_model": 126, "weightsandbiasesmixin": 127, "architectur": [128, 145, 148, 151, 259, 260, 261], "depthwiseconv2d": 128, "fulli": [128, 265], "mobilenet": 128, "resnetv1": 128, "10": [128, 250], "tenet": 128, "audio_example1": 129, "report": [129, 131, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 265, 267], "audio_tf_dataset": 130, "autoencoder_exampl": 131, "basic_exampl": [132, 254, 263], "basic_tf_dataset_exampl": 133, "binary_classif": 134, "conv1d_exampl": 135, "image_example1": 136, "image_tf_dataset": 137, "siamese_contrast": 139, "fingerprint_signature_gener": 141, "silicon": [142, 242], "lab": [142, 242], "keyword_spotting_alexa": 143, "keyword_spotting_mobilenetv2": 144, "keyword_spotting_numb": 145, "keyword_spotting_on_off": 146, "keyword_spotting_on_off_v2": 147, "chang": [147, 150], "keyword_spotting_on_off_v3": 148, "keyword_spotting_pacman": 149, "keyword_spotting_pacman_v2": 150, "keyword_spotting_pacman_v3": 151, "keyword_spotting_with_transfer_learn": 152, "rock_paper_scissor": 153, "tflite_micro_magic_wand": 155, "tflite_micro_speech": 156, "topologi": [156, 157, 158, 160, 161], "perform": [156, 157, 158, 160, 161], "float": [156, 157, 158, 160, 161], "point": [156, 157, 158, 160, 161], "anomaly_detect": 157, "characterist": [157, 160], "image_classif": 158, "tinyml": 159, "keyword_spot": 160, "visual_wake_word": 161, "evaluate_model": 162, "evaluate_classifi": 162, "classifierevaluationresult": 162, "evaluate_autoencod": 162, "autoencoderevaluationresult": 162, "profile_model": 164, "profilingmodelresult": 164, "profilinglayerresult": 164, "quantize_model": 165, "summarize_model": 166, "train_model": 167, "trainingresult": 167, "update_model_paramet": 168, "view_model": 169, "tflite_micro": [170, 172, 173, 174, 175, 176], "tflitemicroacceler": 170, "tflitemicrolayererror": 172, "tflitemicromodel": 173, "tflitemicromodeldetail": 174, "tflitemicroprofiledlayerresult": 175, "tflitemicro": 176, "tfliteactiv": 177, "tfliteaddlay": 178, "tfliteconv2dlay": 179, "tfliteconv2dlayeropt": 180, "tfliteconvparam": 181, "tflitedepthwiseconv2dlay": 182, "tflitedepthwiseconv2dlayeropt": 183, "tflitedepthwiseconvparam": 184, "tflitedequantizelay": 185, "flatbufferdictionari": 186, "tflitemodelparamet": [186, 194], "flatbuff": 186, "schema": 186, "tflitefullyconnectedlay": 187, "tflitefullyconnectedlayeropt": 188, "tflitefullyconnectedparam": 189, "tflitelay": 191, "tflitepad": 193, "tflitepooling2dlay": 195, "tflitepool2dlayeropt": 196, "tflitepoolparam": 197, "tflitequant": 198, "tflitequantizelay": 199, "tflitereshapelay": 200, "tfliteshap": 201, "tflitetensor": 202, "tflitetransposeconvlay": 203, "tflitetransposeconvlayeropt": 204, "tflitetransposeconvparam": 205, "tfliteunidirectionallstmlay": 206, "tfliteunidirectionallstmlayeropt": 207, "archive_download": 209, "audio_dataset_gener": [210, 211, 212, 214, 215, 216, 217], "generationconfig": 211, "audiodatasetgener": 212, "voicepitch": 216, "voicer": 217, "bin2head": 218, "hasher": 221, "jlink_stream": [223, 224, 226, 227], "jlinkcommandstream": 223, "jlinkdatastream": 224, "j": 225, "jlinkstream": 226, "jlinkstreamopt": 227, "logger": 228, "process_pool": 230, "processpool": 230, "reader": 232, "serial_read": 233, "serialread": 233, "shell_cmd": 234, "signal_handl": 235, "signalhandl": 235, "string_format": 236, "system": [237, 259], "uart_stream": 239, "uartstream": 239, "tutori": [240, 253, 257, 258, 260, 261, 262, 264, 266], "onli": 241, "singl": 241, "need": 241, "comparison": 241, "other": [241, 242, 255, 256], "solut": 241, "lot": 241, "all": 241, "integr": 241, "cloud": [241, 255, 256, 258, 260, 261, 262, 264, 268], "log": [241, 255], "learn": [242, 257, 258, 260, 261, 262], "toolkit": 242, "inform": [242, 255], "load": [243, 248, 249, 262, 266], "sampl": [243, 260], "print": [248, 249], "tflm": 248, "each": 248, "tensor": 248, "iter": 249, "meta": 249, "infer": 249, "access": 249, "calcul": 249, "weight": [249, 255, 262, 267], "argument": 251, "exist": 254, "origin": 254, "mnist_convnet": 254, "modifi": [254, 256], "next": [254, 256, 266, 267, 268], "bias": 255, "disclaim": [255, 256], "default": 255, "vast": 256, "ai": 256, "nutshel": 256, "you": 256, "protect": 256, "provid": 256, "bill": 256, "price": 256, "should": 256, "trust": 256, "card": 256, "info": 256, "account": 256, "public": 256, "disk": 256, "space": 256, "login": 256, "cpu": [256, 258, 260], "suggest": 256, "flow": 256, "everyth": 256, "cli": 256, "thi": [257, 258, 260, 261, 262, 264, 266], "siames": 257, "network": [257, 258], "pair": 257, "loss": 257, "function": 257, "determin": [257, 259], "id": [258, 266], "convolut": 258, "neural": 258, "label": 258, "necessari": 258, "defin": [258, 260], "constraint": 258, "accuraci": [258, 260], "deploi": [258, 260], "alexa": [259, 268], "prerequisit": [259, 261], "efr32xg24": 259, "analog": 259, "speaker": 259, "amplifi": 259, "pinout": 259, "neg": [259, 268], "balanc": 259, "frontend": [259, 267], "baud": 259, "tl": 260, "dr": 260, "acquir": 260, "repres": 260, "unknown": 260, "final": 260, "engin": 260, "edg": 260, "random": 260, "crop": 260, "known": 260, "detect": [260, 262], "pipelin": 260, "time": 260, "live": 261, "tradeoff": 261, "modul": 261, "firmwar": 261, "webpag": 261, "transfer": 262, "concept": 262, "base": 262, "descript": [262, 264], "small": 262, "valu": 262, "learningrateschedul": 262, "initi": 262, "unknown_class_percentag": 262, "adjust": 264, "tip": 265, "analyz": [265, 267], "scale": 265, "constant": 265, "center": 265, "mean": 265, "std": 265, "batch": [265, 267], "conv2d": 265, "layernorm": [265, 267], "onnx": 266, "convers": 266, "consider": 266, "map": 266, "channel": 266, "first": 266, "last": 266, "depend": 266, "saniti": 266, "check": 266, "simplifi": 266, "openvino": 266, "intermedi": 266, "lstm": 267, "takeawai": 267, "forc": 267, "uint16": 267, "numpi": 267, "runtim": 267, "batchnorm": 267, "possibl": 267, "remark": 267, "real": 268, "peopl": 268, "languag": 268, "cost": 268, "platform": 268, "gcp": 268, "microsoft": 268, "azur": 268, "amazon": 268, "servic": 268, "aw": 268}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"UART Stream Data Test": [[0, "uart-stream-data-test"]], "Setup Steps": [[0, "setup-steps"]], "Audio Feature Generator": [[1, "audio-feature-generator"]], "Overview": [[1, "overview"], [60, "overview"], [61, "overview"], [62, "overview"], [63, "overview"], [65, "overview"], [67, "overview"], [68, "overview"], [69, "overview"], [70, "overview"], [71, "overview"], [72, "overview"], [79, "overview"], [100, "overview"], [101, "overview"], [242, "overview"], [256, "overview"], [257, "overview"], [258, "overview"], [260, "overview"], [261, "overview"], [263, "overview"], [264, "overview"], [266, "overview"], [268, "overview"]], "Benefits": [[1, "benefits"]], "Gecko SDK Component": [[1, "gecko-sdk-component"]], "Source Code": [[1, "source-code"], [1, "id1"], [42, "source-code"], [45, "source-code"], [47, "source-code"], [48, "source-code"]], "MLTK C++ Python Wrapper": [[1, "mltk-c-python-wrapper"]], "Usage": [[1, "usage"], [4, "usage"], [6, "usage"], [8, "usage"], [10, "usage"], [12, "usage"], [15, "usage"], [17, "usage"], [19, "usage"], [21, "usage"], [23, "usage"], [25, "usage"], [27, "usage"], [29, "usage"], [30, "usage"], [64, "usage"]], "Audio Visualizer Utility": [[1, "audio-visualizer-utility"]], "Audio Utilities": [[2, "audio-utilities"]], "Audio Classification Utility": [[2, "audio-classification-utility"]], "Classify using PC Microphone": [[2, "classify-using-pc-microphone"]], "Classify using PC Microphone with simulated latency": [[2, "classify-using-pc-microphone-with-simulated-latency"]], "Classify using PC Microphone and record audio": [[2, "classify-using-pc-microphone-and-record-audio"]], "Classify using PC Microphone and dump spectrograms": [[2, "classify-using-pc-microphone-and-dump-spectrograms"]], "Classify using development board\u2019s microphone": [[2, "classify-using-development-board-s-microphone"]], "Record audio from development board\u2019s microphone": [[2, "record-audio-from-development-board-s-microphone"]], "Dump spectrograms generated by development board": [[2, "dump-spectrograms-generated-by-development-board"]], "Update AudioFeatureGenerator parameters": [[2, "update-audiofeaturegenerator-parameters"]], "Audio Visualization Utility": [[2, "audio-visualization-utility"]], "Synthetic Audio Dataset Generator": [[2, "synthetic-audio-dataset-generator"]], "Keyword Spotting Overview": [[3, "keyword-spotting-overview"]], "classify_audio": [[4, "classify-audio"]], "Additional Documentation": [[4, "additional-documentation"], [6, "additional-documentation"], [8, "additional-documentation"], [10, "additional-documentation"], [12, "additional-documentation"], [15, "additional-documentation"], [17, "additional-documentation"], [19, "additional-documentation"], [21, "additional-documentation"], [23, "additional-documentation"], [25, "additional-documentation"], [27, "additional-documentation"], [29, "additional-documentation"], [30, "additional-documentation"]], "classify_image": [[6, "classify-image"]], "commander": [[8, "commander"], [77, "commander"]], "evaluate": [[10, "evaluate"]], "fingerprint_reader": [[12, "fingerprint-reader"]], "Command-Line": [[14, "command-line"]], "Command Basics": [[14, "command-basics"]], "Enable Python Virtual Environment": [[14, "enable-python-virtual-environment"]], "Command Format": [[14, "command-format"]], "Help": [[14, "help"]], "Supported Operations": [[14, "supported-operations"]], "profile": [[15, "profile"]], "quantize": [[17, "quantize"]], "ssh": [[19, "ssh"], [77, "ssh"]], "summarize": [[21, "summarize"]], "tensorboard": [[23, "tensorboard"]], "train": [[25, "train"]], "update_params": [[27, "update-params"]], "view": [[29, "view"]], "view_audio": [[30, "view-audio"]], "C++ Build Options": [[33, "c-build-options"]], "MLTK_CMAKE_LOG_LEVEL": [[33, "mltk-cmake-log-level"]], "MLTK_PLATFORM_NAME": [[33, "mltk-platform-name"]], "TFLITE_MICRO_ACCELERATOR": [[33, "tflite-micro-accelerator"], [37, "tflite-micro-accelerator"], [39, "tflite-micro-accelerator"], [41, "tflite-micro-accelerator"]], "MLTK_TARGET": [[33, "mltk-target"]], "MLTK_ENABLE_DEBUG_INFO_IN_RELEASE_BUILDS": [[33, "mltk-enable-debug-info-in-release-builds"]], "MLTK_ENABLE_OUTPUT_DISASSEMBLY": [[33, "mltk-enable-output-disassembly"]], "MODEL_PROFILER_MODEL": [[33, "model-profiler-model"], [41, "model-profiler-model"]], "AUDIO_CLASSIFIER_MODEL": [[33, "audio-classifier-model"]], "Command-Line Development": [[34, "command-line-development"]], "Install Tools": [[34, "install-tools"], [43, "install-tools"], [44, "install-tools"]], "0) Setup OS": [[34, "setup-os"], [43, "setup-os"], [44, "setup-os"]], "1) Install CMake": [[34, "install-cmake"], [43, "install-cmake"], [44, "install-cmake"]], "2) Install 7-Zip": [[34, "install-7-zip"], [43, "install-7-zip"], [44, "install-7-zip"]], "3) Install Python": [[34, "install-python"], [43, "install-python"], [44, "install-python"]], "4) Install GIT": [[34, "install-git"], [43, "install-git"]], "5) Clone the MLTK repository": [[34, "clone-the-mltk-repository"]], "Build Sequence": [[34, "build-sequence"]], "1) Configure Build Settings": [[34, "configure-build-settings"]], "2) Configure CMake Project": [[34, "configure-cmake-project"]], "3) Build CMake Project for a specific target": [[34, "build-cmake-project-for-a-specific-target"]], "4) Run the output executable": [[34, "run-the-output-executable"]], "Example Applications": [[34, "example-applications"], [43, "example-applications"], [44, "example-applications"]], "Python Wrappers": [[34, "python-wrappers"], [42, "python-wrappers"], [44, "python-wrappers"]], "Audio Classifier": [[35, "audio-classifier"]], "Quick Links": [[35, "quick-links"], [36, "quick-links"], [37, "quick-links"], [38, "quick-links"], [39, "quick-links"], [41, "quick-links"], [255, "quick-links"], [256, "quick-links"], [257, "quick-links"], [258, "quick-links"], [259, "quick-links"], [260, "quick-links"], [261, "quick-links"], [262, "quick-links"], [264, "quick-links"], [266, "quick-links"], [267, "quick-links"], [268, "quick-links"], [268, "id1"], [268, "id3"], [268, "id4"]], "Behavior": [[35, "behavior"], [36, "behavior"], [37, "behavior"], [39, "behavior"]], "Updating the model": [[35, "updating-the-model"], [36, "updating-the-model"], [37, "updating-the-model"], [39, "updating-the-model"], [41, "updating-the-model"]], "via Simplicity Studio": [[35, "via-simplicity-studio"], [36, "via-simplicity-studio"], [37, "via-simplicity-studio"], [39, "via-simplicity-studio"], [41, "via-simplicity-studio"]], "via classify_audio Command": [[35, "via-classify-audio-command"]], "via CMake": [[35, "via-cmake"], [36, "via-cmake"], [37, "via-cmake"], [39, "via-cmake"], [41, "via-cmake"]], "Build, Run, Debug": [[35, "build-run-debug"], [36, "build-run-debug"], [37, "build-run-debug"], [38, "build-run-debug"], [39, "build-run-debug"], [41, "build-run-debug"]], "Simplicity Studio": [[35, "simplicity-studio"], [36, "simplicity-studio"], [37, "simplicity-studio"], [38, "simplicity-studio"], [39, "simplicity-studio"], [41, "simplicity-studio"], [52, "simplicity-studio"]], "Visual Studio Code": [[35, "visual-studio-code"], [36, "visual-studio-code"], [37, "visual-studio-code"], [38, "visual-studio-code"], [39, "visual-studio-code"], [41, "visual-studio-code"]], "Command-line": [[35, "command-line"], [36, "command-line"], [37, "command-line"], [38, "command-line"], [39, "command-line"], [41, "command-line"]], "Dumping audio & spectrograms to PC": [[35, "dumping-audio-spectrograms-to-pc"]], "Model Parameters": [[35, "model-parameters"], [36, "model-parameters"], [62, "model-parameters"], [257, "model-parameters"], [258, "model-parameters"], [260, "model-parameters"]], "Modifications": [[35, "modifications"]], "CMake Variables": [[35, "cmake-variables"]], "VERBOSE": [[35, "verbose"]], "WINDOW_MS": [[35, "window-ms"]], "THRESHOLD": [[35, "threshold"]], "SUPPRESSION_MS": [[35, "suppression-ms"]], "COUNT": [[35, "count"]], "VOLUME_GAIN": [[35, "volume-gain"]], "LATENCY_MS": [[35, "latency-ms"]], "AUDIO_CLASSIFIER_ENABLE_AUDIO_IO": [[35, "audio-classifier-enable-audio-io"]], "Additional Reading": [[35, "additional-reading"], [36, "additional-reading"]], "BLE Audio Classifier": [[36, "ble-audio-classifier"]], "Pac-Man Demo": [[36, "pac-man-demo"]], "Fingerprint Authenticator": [[37, "fingerprint-authenticator"]], "Video": [[37, "video"], [39, "video"]], "State Diagram": [[37, "state-diagram"]], "Signature Generation Model": [[37, "signature-generation-model"]], "via fingeprint_reader Command": [[37, "via-fingeprint-reader-command"]], "Hardware Setup": [[37, "hardware-setup"], [39, "hardware-setup"]], "Dumping images to PC": [[37, "dumping-images-to-pc"], [39, "dumping-images-to-pc"]], "Build Settings": [[37, "build-settings"], [39, "build-settings"], [41, "build-settings"]], "FINGERPRINT_AUTHENTICATOR_MODEL": [[37, "fingerprint-authenticator-model"]], "Hello World": [[38, "hello-world"]], "Image Classifier": [[39, "image-classifier"]], "Classification Model": [[39, "classification-model"]], "Model Input": [[39, "model-input"]], "Model Input Normalization": [[39, "model-input-normalization"]], "Model Output": [[39, "model-output"]], "via classify_image Command": [[39, "via-classify-image-command"]], "via update_params command": [[39, "via-update-params-command"], [41, "via-update-params-command"]], "IMAGE_CLASSIFIER_MODEL": [[39, "image-classifier-model"]], "C++ Examples": [[40, "c-examples"]], "Model Profiler": [[41, "model-profiler"], [63, "model-profiler"], [258, "model-profiler"], [260, "model-profiler"]], "MODEL_PROFILER_GENERATE_OP_RESOLVER_HEADER": [[41, "model-profiler-generate-op-resolver-header"]], "MODEL_PROFILER_MODEL_MEMORY_SECTION": [[41, "model-profiler-model-memory-section"]], "MODEL_PROFILER_RUNTIME_MEMORY_SIZE": [[41, "model-profiler-runtime-memory-size"]], "MODEL_PROFILER_RUNTIME_MEMORY_SECTION": [[41, "model-profiler-runtime-memory-section"]], "TFLITE_MICRO_ACCELERATOR_PROFILER_ENABLED": [[41, "tflite-micro-accelerator-profiler-enabled"]], "TFLITE_MICRO_RECORDER_ENABLED": [[41, "tflite-micro-recorder-enabled"]], "C++ Development": [[42, "c-development"]], "Development Modes": [[42, "development-modes"]], "Examples": [[42, "examples"], [67, "examples"]], "Simplicity Studio Development": [[43, "simplicity-studio-development"]], "5) Install Simplicity Studio 5": [[43, "install-simplicity-studio-5"]], "Install MLTK": [[43, "install-mltk"], [44, "install-mltk"]], "1) Clone the MLTK repository": [[43, "clone-the-mltk-repository"], [44, "clone-the-mltk-repository"]], "2) Run the install script": [[43, "run-the-install-script"], [44, "run-the-install-script"]], "3) Activate the MLTK Python virtual environment": [[43, "activate-the-mltk-python-virtual-environment"], [44, "activate-the-mltk-python-virtual-environment"]], "Install the MLTK into the Gecko SDK": [[43, "install-the-mltk-into-the-gecko-sdk"]], "Add the MLTK Gecko SDK to Simplicity Studio": [[43, "add-the-mltk-gecko-sdk-to-simplicity-studio"]], "Visual Studio Code Development": [[44, "visual-studio-code-development"]], "4) Install Segger GDB Debug Server": [[44, "install-segger-gdb-debug-server"]], "5) Install a Serial Terminal": [[44, "install-a-serial-terminal"]], "6) Install GIT": [[44, "install-git"]], "7) Windows: Install the C++ Redistributable Package": [[44, "windows-install-the-c-redistributable-package"]], "VSCode Setup": [[44, "vscode-setup"]], "1) Install VSCode": [[44, "install-vscode"]], "2) Open the MLTK VSCode workspace": [[44, "open-the-mltk-vscode-workspace"]], "3) Install the recommended extensions": [[44, "install-the-recommended-extensions"]], "4) Select the Python Interpreter": [[44, "select-the-python-interpreter"]], "Build for Windows or Linux": [[44, "build-for-windows-or-linux"]], "1) Optionally create file: user_options.cmake": [[44, "optionally-create-file-user-options-cmake"]], "2) Select the CMake Kit": [[44, "select-the-cmake-kit"]], "3) Configure the CMake Project": [[44, "configure-the-cmake-project"], [44, "id1"]], "4) Select the build type and build target": [[44, "select-the-build-type-and-build-target"], [44, "id2"]], "5) Build and run application": [[44, "build-and-run-application"]], "6) Or debug application": [[44, "or-debug-application"]], "Build for embedded": [[44, "build-for-embedded"]], "0) Configure Serial Terminal": [[44, "configure-serial-terminal"]], "1) Create file: user_options.cmake": [[44, "create-file-user-options-cmake"]], "2) Select the MLTK-ARM-GCC CMake Kit": [[44, "select-the-mltk-arm-gcc-cmake-kit"]], "5) Build, download, and run application": [[44, "build-download-and-run-application"]], "6) Build, download, and debug application": [[44, "build-download-and-debug-application"]], "AudioFeatureGenerator Python Wrapper": [[45, "audiofeaturegenerator-python-wrapper"]], "Additional Links": [[45, "additional-links"], [47, "additional-links"], [48, "additional-links"]], "Building the Wrapper": [[45, "building-the-wrapper"], [47, "building-the-wrapper"], [48, "building-the-wrapper"]], "Pre-built": [[45, "pre-built"], [47, "pre-built"], [48, "pre-built"]], "Automatic Build": [[45, "automatic-build"], [47, "automatic-build"], [48, "automatic-build"]], "Manual build via MLTK command": [[45, "manual-build-via-mltk-command"], [47, "manual-build-via-mltk-command"], [48, "manual-build-via-mltk-command"]], "Manual build via CMake": [[45, "manual-build-via-cmake"], [47, "manual-build-via-cmake"], [48, "manual-build-via-cmake"]], "C++ Python Wrappers": [[46, "c-python-wrappers"]], "MVP Python Wrapper": [[47, "mvp-python-wrapper"]], "Tensorflow-Lite Micro Python Wrapper": [[48, "tensorflow-lite-micro-python-wrapper"]], "API Examples": [[49, "api-examples"]], "How can I debug my model during training?": [[50, "how-can-i-debug-my-model-during-training"]], "How can I reduce my model\u2019s size?": [[51, "how-can-i-reduce-my-model-s-size"]], "What are the model resource requirements?": [[51, "what-are-the-model-resource-requirements"]], "Reduce model input size": [[51, "reduce-model-input-size"]], "Use int8 model input data type": [[51, "use-int8-model-input-data-type"]], "Reduce Filter Count": [[51, "reduce-filter-count"]], "Increase Strides": [[51, "increase-strides"]], "Decrease kernel sizes": [[51, "decrease-kernel-sizes"]], "Reduce FullyConnected units": [[51, "reduce-fullyconnected-units"]], "Use pooling layers": [[51, "use-pooling-layers"]], "How do I run my model on an embedded device?": [[52, "how-do-i-run-my-model-on-an-embedded-device"]], "CMake": [[52, "cmake"]], "Command line": [[52, "command-line"]], "Frequently Asked Questions": [[53, "frequently-asked-questions"]], "Linux: Why isn\u2019t the GPU working?": [[54, "linux-why-isn-t-the-gpu-working"]], "Where is my trained model?": [[55, "where-is-my-trained-model"]], "Why does the Keras (.h5) model work during evaluation but the TF-Lite (.tflite) does not?": [[56, "why-does-the-keras-h5-model-work-during-evaluation-but-the-tf-lite-tflite-does-not"]], "Why is the model not returning correct results on the embedded device?": [[57, "why-is-the-model-not-returning-correct-results-on-the-embedded-device"]], "Input Data Preprocessing": [[57, "input-data-preprocessing"]], "Input Data Type": [[57, "input-data-type"]], "Hint: Just use float32": [[57, "hint-just-use-float32"]], "Windows: I am seeing a DLL error when importing Tensorflow": [[58, "windows-i-am-seeing-a-dll-error-when-importing-tensorflow"]], "Your setup is missing a required DLL": [[58, "your-setup-is-missing-a-required-dll"]], "Your setup requires the NVIDIA CUDA driver": [[58, "your-setup-requires-the-nvidia-cuda-driver"]], "Modeling Guides": [[59, "modeling-guides"]], "Model Archive File": [[60, "model-archive-file"]], "Contents": [[60, "contents"], [255, "contents"], [256, "contents"], [265, "contents"]], "Directory Structure": [[60, "directory-structure"]], "Model Evaluation": [[61, "model-evaluation"], [145, "model-evaluation"], [258, "model-evaluation"], [260, "model-evaluation"]], "Quick Reference": [[61, "quick-reference"], [62, "quick-reference"], [63, "quick-reference"], [65, "quick-reference"], [68, "quick-reference"], [69, "quick-reference"], [70, "quick-reference"], [71, "quick-reference"], [72, "quick-reference"], [76, "quick-reference"]], "Non-Quantized vs Quantized Model Evaluation": [[61, "non-quantized-vs-quantized-model-evaluation"]], "Model Profiling vs Model Evaluation": [[61, "model-profiling-vs-model-evaluation"]], "Model Specification": [[61, "model-specification"], [67, "model-specification"], [69, "model-specification"], [129, "model-specification"], [130, "model-specification"], [131, "model-specification"], [132, "id1"], [133, "id1"], [134, "model-specification"], [135, "model-specification"], [136, "model-specification"], [137, "model-specification"], [139, "model-specification"], [141, "model-specification"], [143, "model-specification"], [144, "model-specification"], [145, "model-specification"], [146, "model-specification"], [147, "model-specification"], [148, "model-specification"], [149, "model-specification"], [150, "model-specification"], [151, "model-specification"], [152, "model-specification"], [153, "model-specification"], [155, "model-specification"], [156, "model-specification"], [157, "model-specification"], [158, "model-specification"], [160, "model-specification"], [161, "model-specification"], [260, "model-specification"], [264, "model-specification"]], "Evaluation Results": [[61, "evaluation-results"], [267, "evaluation-results"]], "EvaluateClassifierMixin": [[61, "evaluateclassifiermixin"]], "Confusion Matrix": [[61, "confusion-matrix"]], "ROC": [[61, "roc"]], "Precision vs Recall": [[61, "precision-vs-recall"]], "True Positive Rate": [[61, "true-positive-rate"]], "False Positive Rate": [[61, "false-positive-rate"]], "EvaluateAutoEncoderMixin": [[61, "evaluateautoencodermixin"]], "Command": [[61, "command"], [62, "command"], [63, "command"], [65, "command"], [68, "command"], [69, "command"], [71, "command"], [72, "command"], [258, "command"], [260, "command"]], "Example 1: Evaluate Classification .h5 Model": [[61, "example-1-evaluate-classification-h5-model"], [244, "example-1-evaluate-classification-h5-model"]], "Example 2: Evaluate Classification .tflite Model": [[61, "example-2-evaluate-classification-tflite-model"], [244, "example-2-evaluate-classification-tflite-model"]], "Example 3: Evaluate Auto-Encoder .h5 Model": [[61, "example-3-evaluate-auto-encoder-h5-model"], [244, "example-3-evaluate-auto-encoder-h5-model"]], "Python API": [[61, "python-api"], [62, "python-api"], [63, "python-api"], [65, "python-api"], [68, "python-api"], [69, "python-api"], [72, "python-api"]], "Parameter Basics": [[62, "parameter-basics"]], "Viewing Parameters": [[62, "viewing-parameters"]], "General Parameters": [[62, "general-parameters"]], "Model Mixins": [[62, "model-mixins"]], "AudioDatasetMixin": [[62, "audiodatasetmixin"]], "ImageDatasetMixin": [[62, "imagedatasetmixin"]], "Custom Parameters": [[62, "custom-parameters"]], "Add Via Model Script": [[62, "add-via-model-script"]], "Add Via Command/API": [[62, "add-via-command-api"]], "Example 1: Update model specification": [[62, "example-1-update-model-specification"], [251, "example-1-update-model-specification"]], "Example 2: Update with command-line": [[62, "example-2-update-with-command-line"]], "Example 3: Update with .json file": [[62, "example-3-update-with-json-file"]], "Profiling Metrics": [[63, "profiling-metrics"]], "Entire Model Metrics": [[63, "entire-model-metrics"]], "Per Layer Metrics": [[63, "per-layer-metrics"]], "Modes of Operation": [[63, "modes-of-operation"]], "Basic Simulator Mode": [[63, "basic-simulator-mode"]], "Hardware Simulator Mode": [[63, "hardware-simulator-mode"]], "Physical Device Mode": [[63, "physical-device-mode"]], "Example 1: Profile in basic simulator": [[63, "example-1-profile-in-basic-simulator"]], "Example 2: Profile in MVP hardware simulator": [[63, "example-2-profile-in-mvp-hardware-simulator"]], "Example 3: Profile on physical device using MVP hardware accelerator": [[63, "example-3-profile-on-physical-device-using-mvp-hardware-accelerator"]], "Example 4: Profile model before training": [[63, "example-4-profile-model-before-training"], [245, "example-4-profile-model-before-training"]], "Model Profiler Utility": [[64, "model-profiler-utility"]], "Download": [[64, "download"]], "Saving the results": [[64, "saving-the-results"]], "Local HTTP server options": [[64, "local-http-server-options"]], "Model Quantization": [[65, "model-quantization"]], "Tensorflow-Lite Converter Settings": [[65, "tensorflow-lite-converter-settings"], [67, "tensorflow-lite-converter-settings"], [267, "tensorflow-lite-converter-settings"]], "optimizations": [[65, "optimizations"]], "supported_ops": [[65, "supported-ops"]], "inference_input_type": [[65, "inference-input-type"]], "inference_output_type": [[65, "inference-output-type"]], "representative_dataset": [[65, "representative-dataset"]], "Example 1: Update .tflite in model archive": [[65, "example-1-update-tflite-in-model-archive"], [246, "example-1-update-tflite-in-model-archive"]], "Model Search Path": [[66, "model-search-path"]], "Model Name": [[67, "model-name"]], "Discoverable Models": [[67, "discoverable-models"]], "MltkModel Class Instance": [[67, "mltkmodel-class-instance"]], "Specification Sections": [[67, "specification-sections"]], "Model Layout": [[67, "model-layout"], [69, "model-layout"]], "Note about hardcoding model layer parameters": [[67, "note-about-hardcoding-model-layer-parameters"], [69, "note-about-hardcoding-model-layer-parameters"]], "General Settings": [[67, "general-settings"]], "Basic Training Settings": [[67, "basic-training-settings"]], "Training Keras Callback Settings": [[67, "training-keras-callback-settings"]], "Basic Dataset Settings": [[67, "basic-dataset-settings"]], "Dataset Augmentation Settings": [[67, "dataset-augmentation-settings"]], "Tensorflow Dataset API": [[67, "tensorflow-dataset-api"]], "Evaluation Settings": [[67, "evaluation-settings"]], "Additional Parameters": [[67, "additional-parameters"]], "Model Summary": [[68, "model-summary"], [129, "model-summary"], [131, "model-summary"], [134, "model-summary"], [135, "model-summary"], [136, "model-summary"], [139, "model-summary"], [141, "model-summary"], [143, "model-summary"], [144, "model-summary"], [145, "model-summary"], [146, "model-summary"], [147, "model-summary"], [148, "model-summary"], [149, "model-summary"], [150, "model-summary"], [151, "model-summary"], [152, "model-summary"], [153, "model-summary"], [155, "model-summary"], [156, "model-summary"], [157, "model-summary"], [158, "model-summary"], [160, "model-summary"], [161, "model-summary"], [258, "model-summary"], [260, "model-summary"]], "Keras Model vs Tensorflow-Lite Model Summary": [[68, "keras-model-vs-tensorflow-lite-model-summary"]], "Example 1: Summarize Keras model": [[68, "example-1-summarize-keras-model"], [247, "example-1-summarize-keras-model"]], "Example 2: Summarize Tensorflow-Lite model": [[68, "example-2-summarize-tensorflow-lite-model"], [247, "example-2-summarize-tensorflow-lite-model"]], "Example 3: Summarize external Tensorflow-Lite model": [[68, "example-3-summarize-external-tensorflow-lite-model"], [247, "example-3-summarize-external-tensorflow-lite-model"]], "Example 4: Summarize model before training": [[68, "example-4-summarize-model-before-training"], [247, "example-4-summarize-model-before-training"]], "Model Training": [[69, "model-training"], [258, "model-training"], [260, "model-training"]], "MltkModel Instance": [[69, "mltkmodel-instance"]], "Training Output": [[69, "training-output"]], "Example 1: Train as a \u201cdry run\u201d": [[69, "example-1-train-as-a-dry-run"], [250, "example-1-train-as-a-dry-run"]], "Example 2: Train for 100 epochs": [[69, "example-2-train-for-100-epochs"]], "Example 3: Resume Training": [[69, "example-3-resume-training"]], "Model Training Monitor": [[70, "model-training-monitor"]], "1) Configure the Tensorboard callback": [[70, "configure-the-tensorboard-callback"], [70, "id1"]], "2) Train the model": [[70, "train-the-model"]], "3) Start Tensorboard": [[70, "start-tensorboard"]], "Model Training Profiler": [[70, "model-training-profiler"]], "Troubleshoot: Profile tab does not appear": [[70, "troubleshoot-profile-tab-does-not-appear"]], "Run Tensorboard from remote SSH session": [[70, "run-tensorboard-from-remote-ssh-session"]], "2) Train the model on the remote machine": [[70, "train-the-model-on-the-remote-machine"]], "3) Start Tensorboard on the remote machine": [[70, "start-tensorboard-on-the-remote-machine"]], "4) Open a reverse SSH tunnel on the local machine": [[70, "open-a-reverse-ssh-tunnel-on-the-local-machine"]], "5) Open http://localhost:6002 in your web-browser": [[70, "open-http-localhost-6002-in-your-web-browser"]], "Model Training via SSH": [[71, "model-training-via-ssh"]], "SSH Connection": [[71, "ssh-connection"]], "Installing an SSH client": [[71, "installing-an-ssh-client"]], "Windows": [[71, "windows"]], "Linux": [[71, "linux"]], "Generating a Keypair": [[71, "generating-a-keypair"]], "Additional Resources": [[71, "additional-resources"]], "Command sequence": [[71, "command-sequence"]], "Settings": [[71, "settings"], [77, "settings"]], "Remote Working Directory": [[71, "remote-working-directory"]], "Hostname": [[71, "hostname"]], "Port": [[71, "port"]], "Username": [[71, "username"]], "Key Filename": [[71, "key-filename"]], "Environment": [[71, "environment"]], "Upload Files": [[71, "upload-files"]], "Startup Commands": [[71, "startup-commands"]], "Download Files": [[71, "download-files"]], "Shutdown Commands": [[71, "shutdown-commands"]], "Sync Local MLTK": [[71, "sync-local-mltk"]], "Settings Locations": [[71, "settings-locations"]], "Command-line options": [[71, "command-line-options"]], "\u2013host": [[71, "host"]], "\u2013port": [[71, "id1"]], "\u2013identity_file": [[71, "identity-file"]], "SshMixin": [[71, "sshmixin"]], "Example": [[71, "example"], [71, "id2"], [71, "id3"], [77, "example"]], "~/.mltk/user_settings.yaml": [[71, "mltk-user-settings-yaml"]], "~/.ssh/config": [[71, "ssh-config"]], "Command Examples": [[71, "command-examples"]], "Example 1: Train with settings configured in user_settings.yaml": [[71, "example-1-train-with-settings-configured-in-user-settings-yaml"]], "Example 2: Train with settings on command-line": [[71, "example-2-train-with-settings-on-command-line"]], "Example 3: Train without wait for results": [[71, "example-3-train-without-wait-for-results"]], "Example 4: Retrieve results from previous training session": [[71, "example-4-retrieve-results-from-previous-training-session"]], "Example 5: Train new model, and forcefully discard previous": [[71, "example-5-train-new-model-and-forcefully-discard-previous"]], "Model Visualizer": [[72, "model-visualizer"]], "Example 1: View Keras model": [[72, "example-1-view-keras-model"], [252, "example-1-view-keras-model"]], "Example 2: View Tensorflow-Lite model": [[72, "example-2-view-tensorflow-lite-model"], [252, "example-2-view-tensorflow-lite-model"]], "Example 3: View external Tensorflow-Lite model": [[72, "example-3-view-external-tensorflow-lite-model"], [252, "example-3-view-external-tensorflow-lite-model"]], "Example 4: View model before training": [[72, "example-4-view-model-before-training"], [252, "example-4-view-model-before-training"]], "Notebook Examples Guide": [[73, "notebook-examples-guide"]], "VSCode Notebooks": [[73, "vscode-notebooks"]], "Google Colab": [[73, "google-colab"], [74, "google-colab"]], "Installation": [[74, "installation"], [242, "installation"]], "Standard Python Package": [[74, "standard-python-package"]], "Update Python Package": [[74, "update-python-package"]], "Local Development": [[74, "local-development"]], "Environment Variables": [[75, "environment-variables"]], "MLTK_MODEL_PATHS": [[75, "mltk-model-paths"]], "MLTK_CACHE_DIR": [[75, "mltk-cache-dir"]], "MLTK_USER_SETTINGS_PATH": [[75, "mltk-user-settings-path"]], "MLTK_READONLY": [[75, "mltk-readonly"]], "MLTK_SETUP_PY_DEPS": [[75, "mltk-setup-py-deps"]], "MLTK_TEMP_DIR": [[75, "mltk-temp-dir"]], "File Types": [[76, "file-types"]], ".tflite: Tensorflow-Lite Model": [[76, "tflite-tensorflow-lite-model"]], ".h5: Keras Model": [[76, "h5-keras-model"]], ".mltk.zip: MLTK Model Archive": [[76, "mltk-zip-mltk-model-archive"]], ".py: Model Specification": [[76, "py-model-specification"]], "Model Object Types": [[76, "model-object-types"]], "MltkModel": [[76, "mltkmodel"]], "TfliteModel": [[76, "tflitemodel"]], "KerasModel": [[76, "kerasmodel"]], "Settings File": [[77, "settings-file"]], "model_paths": [[77, "model-paths"]], "Supported Hardware": [[78, "supported-hardware"]], "BRD2601": [[78, "brd2601"]], "BRD2204": [[78, "brd2204"]], "BRD4166": [[78, "brd4166"]], "BRD4186": [[78, "brd4186"]], "BRD4401": [[78, "brd4401"]], "BRD2705": [[78, "brd2705"]], "mltk.core.preprocess.utils.audio": [[80, "module-mltk.core.preprocess.utils.audio"]], "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator": [[81, "mltk-core-preprocess-audio-parallel-generator-parallelaudiodatagenerator"]], "mltk.core.preprocess.audio.parallel_generator.ParallelProcessParams": [[82, "mltk-core-preprocess-audio-parallel-generator-parallelprocessparams"]], "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator": [[83, "mltk-core-preprocess-audio-audio-feature-generator-audiofeaturegenerator"]], "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings": [[84, "mltk-core-preprocess-audio-audio-feature-generator-audiofeaturegeneratorsettings"]], "mltk.core.preprocess.utils.image": [[85, "module-mltk.core.preprocess.utils.image"]], "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator": [[86, "mltk-core-preprocess-image-parallel-generator-parallelimagedatagenerator"]], "mltk.core.preprocess.image.parallel_generator.ParallelProcessParams": [[87, "mltk-core-preprocess-image-parallel-generator-parallelprocessparams"]], "Data Preprocessing": [[88, "data-preprocessing"]], "mltk.core.preprocess.utils.list_directory": [[89, "module-mltk.core.preprocess.utils.list_directory"]], "mltk.core.preprocess.utils.normalize": [[90, "module-mltk.core.preprocess.utils.normalize"]], "mltk.core.preprocess.utils.tf_dataset": [[91, "module-mltk.core.preprocess.utils.tf_dataset"]], "Common Utilities": [[92, "common-utilities"]], "mltk.datasets.accelerometer.tflm_magic_wand": [[93, "module-mltk.datasets.accelerometer.tflm_magic_wand"]], "Tensorflow-Lite Micro Magic Wand": [[93, "tensorflow-lite-micro-magic-wand"]], "mltk.datasets.audio.background_noise.ambient": [[94, "module-mltk.datasets.audio.background_noise.ambient"]], "Generic Background Noise": [[94, "generic-background-noise"]], "License": [[94, "license"], [99, "license"], [108, "license"], [146, "license"], [242, "license"]], "mltk.datasets.audio.background_noise.brd2601": [[95, "module-mltk.datasets.audio.background_noise.brd2601"]], "BRD2601 Background Noise": [[95, "brd2601-background-noise"]], "mltk.datasets.audio.background_noise.esc50": [[96, "module-mltk.datasets.audio.background_noise.esc50"]], "ESC: Dataset for Environmental Sound Classification": [[96, "esc-dataset-for-environmental-sound-classification"]], "Abstract": [[96, "abstract"], [100, "abstract"], [101, "abstract"]], "Citing": [[96, "citing"]], "mltk.datasets.audio.direction_commands": [[97, "module-mltk.datasets.audio.direction_commands"]], "Direction Commands": [[97, "direction-commands"]], "mltk.datasets.audio.hey_gecko": [[98, "module-mltk.datasets.audio.hey_gecko"]], "Hey Gecko": [[98, "hey-gecko"]], "mltk.datasets.audio.mit_ir_survey": [[99, "module-mltk.datasets.audio.mit_ir_survey"]], "MIT Impulse Response Survey": [[99, "mit-impulse-response-survey"]], "Credits": [[99, "credits"], [103, "credits"]], "mltk.datasets.audio.mlcommons.ml_commons_keywords": [[100, "module-mltk.datasets.audio.mlcommons.ml_commons_keywords"]], "ML Commons Keywords": [[100, "ml-commons-keywords"]], "mltk.datasets.audio.mlcommons.ml_commons_voice": [[101, "module-mltk.datasets.audio.mlcommons.ml_commons_voice"]], "ML Commons Voice Subset": [[101, "ml-commons-voice-subset"]], "mltk.datasets.audio.on_off": [[102, "module-mltk.datasets.audio.on_off"]], "On/Off": [[102, "on-off"]], "mltk.datasets.audio.speech_commands.speech_commands_v2": [[103, "module-mltk.datasets.audio.speech_commands.speech_commands_v2"]], "Google Speech Commands v2": [[103, "google-speech-commands-v2"]], "History": [[103, "history"]], "Collection": [[103, "collection"]], "Organization": [[103, "organization"]], "Processing": [[103, "processing"]], "Background Noise": [[103, "background-noise"]], "Citations": [[103, "citations"]], "mltk.datasets.audio.ten_digits": [[104, "module-mltk.datasets.audio.ten_digits"]], "Ten Digits": [[104, "ten-digits"]], "mltk.datasets.audio.yes_no": [[105, "module-mltk.datasets.audio.yes_no"]], "Yes/No": [[105, "yes-no"]], "mltk.datasets.image.cifar10": [[106, "module-mltk.datasets.image.cifar10"]], "CIFAR10": [[106, "cifar10"]], "mltk.datasets.image.fashion_mnist": [[107, "module-mltk.datasets.image.fashion_mnist"]], "Fashion-MNIST": [[107, "fashion-mnist"]], "mltk.datasets.image.mnist": [[108, "module-mltk.datasets.image.mnist"]], "MNIST": [[108, "mnist"]], "mltk.datasets.image.rock_paper_scissors_v1": [[109, "module-mltk.datasets.image.rock_paper_scissors_v1"]], "Rock, Paper, Scissors v1": [[109, "rock-paper-scissors-v1"]], "mltk.datasets.image.rock_paper_scissors_v2": [[110, "module-mltk.datasets.image.rock_paper_scissors_v2"]], "Rock, Paper, Scissors v2": [[110, "rock-paper-scissors-v2"]], "Reference Datasets": [[111, "reference-datasets"]], "Audio Datasets": [[111, "audio-datasets"]], "Image Datasets": [[111, "image-datasets"]], "Accelerometer Datasets": [[111, "accelerometer-datasets"]], "API Reference": [[112, "api-reference"], [120, "api-reference"], [171, "api-reference"], [190, "api-reference"], [213, "api-reference"], [225, "api-reference"], [232, "api-reference"], [238, "api-reference"]], "Keras Model": [[113, "keras-model"]], "mltk.core.AudioDatasetMixin": [[114, "mltk-core-audiodatasetmixin"]], "mltk.core.DatasetMixin": [[115, "mltk-core-datasetmixin"]], "mltk.core.EvaluateAutoEncoderMixin": [[116, "mltk-core-evaluateautoencodermixin"]], "mltk.core.EvaluateClassifierMixin": [[117, "mltk-core-evaluateclassifiermixin"]], "mltk.core.EvaluateMixin": [[118, "mltk-core-evaluatemixin"]], "mltk.core.ImageDatasetMixin": [[119, "mltk-core-imagedatasetmixin"]], "MLTK Model": [[120, "mltk-model"]], "Example Usage": [[120, "example-usage"], [171, "example-usage"], [190, "example-usage"], [213, "example-usage"], [225, "example-usage"], [232, "example-usage"], [238, "example-usage"]], "mltk.core.MltkDataset": [[121, "mltk-core-mltkdataset"]], "mltk.core.MltkModel": [[122, "mltk-core-mltkmodel"]], "mltk.core.MltkModelEvent": [[123, "mltk-core-mltkmodelevent"]], "mltk.core.SshMixin": [[124, "mltk-core-sshmixin"]], "mltk.core.TrainMixin": [[125, "mltk-core-trainmixin"]], "Model Utilities": [[126, "model-utilities"]], "load_mltk_model": [[126, "load-mltk-model"]], "load_mltk_model_with_path": [[126, "load-mltk-model-with-path"]], "list_mltk_models": [[126, "list-mltk-models"]], "load_tflite_or_keras_model": [[126, "load-tflite-or-keras-model"]], "load_tflite_model": [[126, "load-tflite-model"]], "mltk.core.WeightsAndBiasesMixin": [[127, "mltk-core-weightsandbiasesmixin"]], "Common Model Architectures": [[128, "common-model-architectures"]], "ARM DepthwiseConv2D": [[128, "arm-depthwiseconv2d"]], "Fully Connected Auto-encoder": [[128, "fully-connected-auto-encoder"]], "MobileNet v1": [[128, "mobilenet-v1"]], "MobileNet v2": [[128, "mobilenet-v2"]], "ResNetv1-10": [[128, "resnetv1-10"]], "TENet": [[128, "tenet"]], "audio_example1": [[129, "audio-example1"]], "Commands": [[129, "commands"], [130, "commands"], [131, "commands"], [132, "commands"], [133, "commands"], [134, "commands"], [135, "commands"], [136, "commands"], [137, "commands"], [139, "commands"], [141, "commands"], [143, "commands"], [144, "commands"], [145, "commands"], [146, "commands"], [147, "commands"], [148, "commands"], [149, "commands"], [150, "commands"], [151, "commands"], [152, "commands"], [153, "commands"], [155, "commands"], [156, "commands"], [157, "commands"], [158, "commands"], [160, "commands"], [161, "commands"]], "Model Profiling Report": [[129, "model-profiling-report"], [131, "model-profiling-report"], [136, "model-profiling-report"], [141, "model-profiling-report"], [143, "model-profiling-report"], [144, "model-profiling-report"], [145, "model-profiling-report"], [146, "model-profiling-report"], [147, "model-profiling-report"], [148, "model-profiling-report"], [149, "model-profiling-report"], [150, "model-profiling-report"], [151, "model-profiling-report"], [152, "model-profiling-report"], [153, "model-profiling-report"], [155, "model-profiling-report"], [156, "model-profiling-report"], [157, "model-profiling-report"], [158, "model-profiling-report"], [160, "model-profiling-report"], [161, "model-profiling-report"]], "Model Diagram": [[129, "model-diagram"], [131, "model-diagram"], [134, "model-diagram"], [135, "model-diagram"], [136, "model-diagram"], [139, "model-diagram"], [141, "model-diagram"], [143, "model-diagram"], [144, "model-diagram"], [145, "model-diagram"], [146, "model-diagram"], [147, "model-diagram"], [148, "model-diagram"], [149, "model-diagram"], [150, "model-diagram"], [151, "model-diagram"], [152, "model-diagram"], [153, "model-diagram"], [155, "model-diagram"], [156, "model-diagram"], [157, "model-diagram"], [158, "model-diagram"], [160, "model-diagram"], [161, "model-diagram"]], "audio_tf_dataset": [[130, "audio-tf-dataset"]], "autoencoder_example": [[131, "autoencoder-example"]], "basic_example": [[132, "basic-example"]], "basic_tf_dataset_example": [[133, "basic-tf-dataset-example"]], "binary_classification": [[134, "binary-classification"]], "conv1d_example": [[135, "conv1d-example"]], "image_example1": [[136, "image-example1"]], "image_tf_dataset": [[137, "image-tf-dataset"]], "Example Models": [[138, "example-models"]], "siamese_contrastive": [[139, "siamese-contrastive"]], "Reference Models": [[140, "reference-models"]], "fingerprint_signature_generator": [[141, "fingerprint-signature-generator"]], "Silicon Lab\u2019s Models": [[142, "silicon-lab-s-models"]], "keyword_spotting_alexa": [[143, "keyword-spotting-alexa"]], "Dataset": [[143, "dataset"], [144, "dataset"], [145, "dataset"], [146, "dataset"], [147, "dataset"], [148, "dataset"], [149, "dataset"], [150, "dataset"], [151, "dataset"], [152, "dataset"], [156, "dataset"], [157, "dataset"], [158, "dataset"], [160, "dataset"], [161, "dataset"], [257, "dataset"]], "Preprocessing": [[143, "preprocessing"], [144, "preprocessing"], [145, "preprocessing"], [146, "preprocessing"], [147, "preprocessing"], [148, "preprocessing"], [149, "preprocessing"], [150, "preprocessing"], [151, "preprocessing"], [152, "preprocessing"]], "keyword_spotting_mobilenetv2": [[144, "keyword-spotting-mobilenetv2"]], "keyword_spotting_numbers": [[145, "keyword-spotting-numbers"]], "Dataset Summary": [[145, "dataset-summary"], [148, "dataset-summary"], [151, "dataset-summary"], [260, "dataset-summary"]], "Model Architecture": [[145, "model-architecture"], [148, "model-architecture"], [151, "model-architecture"]], "Overview Diagram": [[145, "overview-diagram"]], "keyword_spotting_on_off": [[146, "keyword-spotting-on-off"]], "keyword_spotting_on_off_v2": [[147, "keyword-spotting-on-off-v2"]], "Training the Model": [[147, "training-the-model"], [150, "training-the-model"]], "Changes from v1": [[147, "changes-from-v1"], [150, "changes-from-v1"]], "keyword_spotting_on_off_v3": [[148, "keyword-spotting-on-off-v3"]], "keyword_spotting_pacman": [[149, "keyword-spotting-pacman"]], "keyword_spotting_pacman_v2": [[150, "keyword-spotting-pacman-v2"]], "keyword_spotting_pacman_v3": [[151, "keyword-spotting-pacman-v3"]], "keyword_spotting_with_transfer_learning": [[152, "keyword-spotting-with-transfer-learning"]], "rock_paper_scissors": [[153, "rock-paper-scissors"]], "Tensorflow-Lite Micro Models": [[154, "tensorflow-lite-micro-models"]], "tflite_micro_magic_wand": [[155, "tflite-micro-magic-wand"]], "tflite_micro_speech": [[156, "tflite-micro-speech"]], "Model Topology & Training": [[156, "model-topology-training"]], "Performance (floating point model)": [[156, "performance-floating-point-model"], [157, "performance-floating-point-model"], [158, "performance-floating-point-model"], [160, "performance-floating-point-model"], [161, "performance-floating-point-model"]], "Performance (quantized tflite model)": [[156, "performance-quantized-tflite-model"], [157, "performance-quantized-tflite-model"], [158, "performance-quantized-tflite-model"], [160, "performance-quantized-tflite-model"], [161, "performance-quantized-tflite-model"]], "anomaly_detection": [[157, "anomaly-detection"]], "Model Topology": [[157, "model-topology"], [158, "model-topology"], [160, "model-topology"], [161, "model-topology"]], "Spectrogram Characteristics": [[157, "spectrogram-characteristics"], [160, "spectrogram-characteristics"]], "image_classification": [[158, "image-classification"]], "TinyML Models": [[159, "tinyml-models"]], "keyword_spotting": [[160, "keyword-spotting"]], "visual_wake_words": [[161, "visual-wake-words"]], "evaluate_model": [[162, "evaluate-model"]], "evaluate_classifier": [[162, "evaluate-classifier"], [162, "id1"]], "ClassifierEvaluationResults": [[162, "classifierevaluationresults"]], "evaluate_autoencoder": [[162, "evaluate-autoencoder"]], "AutoEncoderEvaluationResults": [[162, "autoencoderevaluationresults"]], "Model Operations": [[163, "model-operations"]], "profile_model": [[164, "profile-model"]], "ProfilingModelResults": [[164, "profilingmodelresults"]], "ProfilingLayerResult": [[164, "profilinglayerresult"]], "quantize_model": [[165, "quantize-model"]], "summarize_model": [[166, "summarize-model"]], "train_model": [[167, "train-model"]], "TrainingResults": [[167, "trainingresults"]], "update_model_parameters": [[168, "update-model-parameters"]], "view_model": [[169, "view-model"]], "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator": [[170, "mltk-core-tflite-micro-tflite-micro-accelerator-tflitemicroaccelerator"]], "Tensorflow-Lite Micro Model": [[171, "tensorflow-lite-micro-model"]], "mltk.core.tflite_micro.TfliteMicroLayerError": [[172, "mltk-core-tflite-micro-tflitemicrolayererror"]], "mltk.core.tflite_micro.TfliteMicroModel": [[173, "mltk-core-tflite-micro-tflitemicromodel"]], "mltk.core.tflite_micro.TfliteMicroModelDetails": [[174, "mltk-core-tflite-micro-tflitemicromodeldetails"]], "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult": [[175, "mltk-core-tflite-micro-tflitemicroprofiledlayerresult"]], "mltk.core.tflite_micro.TfliteMicro": [[176, "mltk-core-tflite-micro-tflitemicro"]], "mltk.core.TfliteActivation": [[177, "mltk-core-tfliteactivation"]], "mltk.core.TfliteAddLayer": [[178, "mltk-core-tfliteaddlayer"]], "mltk.core.TfliteConv2dLayer": [[179, "mltk-core-tfliteconv2dlayer"]], "mltk.core.TfliteConv2DLayerOptions": [[180, "mltk-core-tfliteconv2dlayeroptions"]], "mltk.core.TfliteConvParams": [[181, "mltk-core-tfliteconvparams"]], "mltk.core.TfliteDepthwiseConv2dLayer": [[182, "mltk-core-tflitedepthwiseconv2dlayer"]], "mltk.core.TfliteDepthwiseConv2DLayerOptions": [[183, "mltk-core-tflitedepthwiseconv2dlayeroptions"]], "mltk.core.TfliteDepthwiseConvParams": [[184, "mltk-core-tflitedepthwiseconvparams"]], "mltk.core.TfliteDequantizeLayer": [[185, "mltk-core-tflitedequantizelayer"]], "FlatbufferDictionary": [[186, "flatbufferdictionary"]], "TfliteModelParameters Flatbuffer Schema": [[186, "tflitemodelparameters-flatbuffer-schema"]], "mltk.core.TfliteFullyConnectedLayer": [[187, "mltk-core-tflitefullyconnectedlayer"]], "mltk.core.TfliteFullyConnectedLayerOptions": [[188, "mltk-core-tflitefullyconnectedlayeroptions"]], "mltk.core.TfliteFullyConnectedParams": [[189, "mltk-core-tflitefullyconnectedparams"]], "Tensorflow-Lite Model": [[190, "tensorflow-lite-model"]], "mltk.core.TfliteLayer": [[191, "mltk-core-tflitelayer"]], "mltk.core.TfliteModel": [[192, "mltk-core-tflitemodel"]], "mltk.core.TflitePadding": [[193, "mltk-core-tflitepadding"]], "mltk.core.TfliteModelParameters": [[194, "mltk-core-tflitemodelparameters"]], "mltk.core.TflitePooling2dLayer": [[195, "mltk-core-tflitepooling2dlayer"]], "mltk.core.TflitePool2DLayerOptions": [[196, "mltk-core-tflitepool2dlayeroptions"]], "mltk.core.TflitePoolParams": [[197, "mltk-core-tflitepoolparams"]], "mltk.core.TfliteQuantization": [[198, "mltk-core-tflitequantization"]], "mltk.core.TfliteQuantizeLayer": [[199, "mltk-core-tflitequantizelayer"]], "mltk.core.TfliteReshapeLayer": [[200, "mltk-core-tflitereshapelayer"]], "mltk.core.TfliteShape": [[201, "mltk-core-tfliteshape"]], "mltk.core.TfliteTensor": [[202, "mltk-core-tflitetensor"]], "mltk.core.TfliteTransposeConvLayer": [[203, "mltk-core-tflitetransposeconvlayer"]], "mltk.core.TfliteTransposeConvLayerOptions": [[204, "mltk-core-tflitetransposeconvlayeroptions"]], "mltk.core.TfliteTransposeConvParams": [[205, "mltk-core-tflitetransposeconvparams"]], "mltk.core.TfliteUnidirectionalLstmLayer": [[206, "mltk-core-tfliteunidirectionallstmlayer"]], "mltk.core.TfliteUnidirectionalLstmLayerOptions": [[207, "mltk-core-tfliteunidirectionallstmlayeroptions"]], "mltk.utils.archive": [[208, "module-mltk.utils.archive"]], "mltk.utils.archive_downloader": [[209, "module-mltk.utils.archive_downloader"]], "mltk.utils.audio_dataset_generator.Augmentation": [[210, "mltk-utils-audio-dataset-generator-augmentation"]], "mltk.utils.audio_dataset_generator.GenerationConfig": [[211, "mltk-utils-audio-dataset-generator-generationconfig"]], "mltk.utils.audio_dataset_generator.AudioDatasetGenerator": [[212, "mltk-utils-audio-dataset-generator-audiodatasetgenerator"]], "Audio Dataset Generator": [[213, "audio-dataset-generator"]], "mltk.utils.audio_dataset_generator.Keyword": [[214, "mltk-utils-audio-dataset-generator-keyword"]], "mltk.utils.audio_dataset_generator.Voice": [[215, "mltk-utils-audio-dataset-generator-voice"]], "mltk.utils.audio_dataset_generator.VoicePitch": [[216, "mltk-utils-audio-dataset-generator-voicepitch"]], "mltk.utils.audio_dataset_generator.VoiceRate": [[217, "mltk-utils-audio-dataset-generator-voicerate"]], "mltk.utils.bin2header": [[218, "module-mltk.utils.bin2header"]], "mltk.utils.cmake": [[219, "module-mltk.utils.cmake"]], "mltk.utils.gpu": [[220, "module-mltk.utils.gpu"]], "mltk.utils.hasher": [[221, "module-mltk.utils.hasher"]], "Utilities": [[222, "utilities"]], "mltk.utils.jlink_stream.JlinkCommandStream": [[223, "mltk-utils-jlink-stream-jlinkcommandstream"]], "mltk.utils.jlink_stream.JLinkDataStream": [[224, "mltk-utils-jlink-stream-jlinkdatastream"]], "J-Link Stream": [[225, "j-link-stream"]], "mltk.utils.jlink_stream.JlinkStream": [[226, "mltk-utils-jlink-stream-jlinkstream"]], "mltk.utils.jlink_stream.JlinkStreamOptions": [[227, "mltk-utils-jlink-stream-jlinkstreamoptions"]], "mltk.utils.logger": [[228, "module-mltk.utils.logger"]], "mltk.utils.path": [[229, "module-mltk.utils.path"]], "mltk.utils.process_pool.ProcessPool": [[230, "mltk-utils-process-pool-processpool"]], "mltk.utils.python": [[231, "module-mltk.utils.python"]], "Serial Reader": [[232, "serial-reader"]], "mltk.utils.serial_reader.SerialReader": [[233, "mltk-utils-serial-reader-serialreader"]], "mltk.utils.shell_cmd": [[234, "module-mltk.utils.shell_cmd"]], "mltk.utils.signal_handler.SignalHandler": [[235, "mltk-utils-signal-handler-signalhandler"]], "mltk.utils.string_formatting": [[236, "module-mltk.utils.string_formatting"]], "mltk.utils.system": [[237, "module-mltk.utils.system"]], "UART Stream": [[238, "uart-stream"]], "mltk.utils.uart_stream.UartStream": [[239, "mltk-utils-uart-stream-uartstream"]], "Tutorials": [[240, "tutorials"], [253, "tutorials"]], "Why MLTK?": [[241, "why-mltk"]], "Only a single python script and command-line is needed": [[241, "only-a-single-python-script-and-command-line-is-needed"]], "Comparison with other solutions": [[241, "comparison-with-other-solutions"]], "Lots of tools, all optional": [[241, "lots-of-tools-all-optional"]], "C++ Python wrappers": [[241, "c-python-wrappers"]], "Embedded model parameters": [[241, "embedded-model-parameters"]], "Integration with Tensorflow": [[241, "integration-with-tensorflow"]], "Integration with Tensorflow-Lite": [[241, "integration-with-tensorflow-lite"]], "Integration with Tensorflow-Lite Micro": [[241, "integration-with-tensorflow-lite-micro"]], "Integration with the Gecko SDK": [[241, "integration-with-the-gecko-sdk"]], "Support for cloud development": [[241, "support-for-cloud-development"]], "Training via SSH": [[241, "training-via-ssh"]], "Logging to the cloud": [[241, "logging-to-the-cloud"]], "Silicon Labs Machine Learning Toolkit (MLTK)": [[242, "silicon-labs-machine-learning-toolkit-mltk"]], "Other Information": [[242, "other-information"]], "Audio Feature Generator Example": [[243, "audio-feature-generator-example"]], "Install the MLTK python package": [[243, "install-the-mltk-python-package"]], "Import the Python packages": [[243, "import-the-python-packages"]], "Load Audio Sample": [[243, "load-audio-sample"]], "Load the MLTK Model": [[243, "load-the-mltk-model"]], "Load the .tflite model": [[243, "load-the-tflite-model"]], "Process the audio sample in the AudioFeatureGenerator": [[243, "process-the-audio-sample-in-the-audiofeaturegenerator"]], "Classify the audio sample using TF-Lite": [[243, "classify-the-audio-sample-using-tf-lite"]], "Classify the audio using TF-Lite Micro": [[243, "classify-the-audio-using-tf-lite-micro"]], "Model Evaluation API Examples": [[244, "model-evaluation-api-examples"]], "Install MLTK Python Package": [[244, "install-mltk-python-package"], [245, "install-mltk-python-package"], [246, "install-mltk-python-package"], [247, "install-mltk-python-package"], [248, "install-mltk-python-package"], [249, "install-mltk-python-package"], [250, "install-mltk-python-package"], [251, "install-mltk-python-package"], [252, "install-mltk-python-package"], [257, "install-mltk-python-package"], [258, "install-mltk-python-package"], [260, "install-mltk-python-package"], [261, "install-mltk-python-package"]], "Import Python Packages": [[244, "import-python-packages"], [245, "import-python-packages"], [246, "import-python-packages"], [247, "import-python-packages"], [248, "import-python-packages"], [249, "import-python-packages"], [250, "import-python-packages"], [251, "import-python-packages"], [252, "import-python-packages"]], "Model Profiler API Examples": [[245, "model-profiler-api-examples"]], "Download .tflite model file": [[245, "download-tflite-model-file"], [248, "download-tflite-model-file"], [249, "download-tflite-model-file"]], "Example 1: Profile .tflite file in basic simulator": [[245, "example-1-profile-tflite-file-in-basic-simulator"]], "Example 2: Profile .tflite file in MVP hardware simulator": [[245, "example-2-profile-tflite-file-in-mvp-hardware-simulator"]], "Example 3: Profile .tflite file on physical device": [[245, "example-3-profile-tflite-file-on-physical-device"]], "Model Quantization API Examples": [[246, "model-quantization-api-examples"]], "Model Summary API Examples": [[247, "model-summary-api-examples"]], "TF-Lite Micro Model API Examples": [[248, "tf-lite-micro-model-api-examples"]], "Example 1: Load model and print summary": [[248, "example-1-load-model-and-print-summary"]], "Example 2: Profile .tflite in TFLM interpreter": [[248, "example-2-profile-tflite-in-tflm-interpreter"]], "Example 3: Record each layers\u2019 input/output tensor": [[248, "example-3-record-each-layers-input-output-tensor"]], "TF-Lite Model API Examples": [[249, "tf-lite-model-api-examples"]], "Example 1: Load .tflite and print summary": [[249, "example-1-load-tflite-and-print-summary"]], "Example 2: Iterate the model layers": [[249, "example-2-iterate-the-model-layers"]], "Example 3: Add meta data to .tflite": [[249, "example-3-add-meta-data-to-tflite"]], "Example 4: Add model parameters to the .tflite": [[249, "example-4-add-model-parameters-to-the-tflite"]], "Example 5: Run inference": [[249, "example-5-run-inference"]], "Example 6: Access calculated layer parameters": [[249, "example-6-access-calculated-layer-parameters"]], "Example 7: Update model weights": [[249, "example-7-update-model-weights"]], "Model Training API Examples": [[250, "model-training-api-examples"]], "Example 2: Train for 10 epochs": [[250, "example-2-train-for-10-epochs"]], "Update Model Parameters API Examples": [[251, "update-model-parameters-api-examples"]], "Example 2: Update with argument": [[251, "example-2-update-with-argument"]], "Example 3: Return TfliteModel instance": [[251, "example-3-return-tflitemodel-instance"]], "Model Visualizer API Examples": [[252, "model-visualizer-api-examples"]], "Add an Existing Script to the MLTK": [[254, "add-an-existing-script-to-the-mltk"]], "Setup": [[254, "setup"]], "Existing Script": [[254, "existing-script"]], "Original mnist_convnet.py": [[254, "original-mnist-convnet-py"]], "MLTK Modifications": [[254, "mltk-modifications"]], "Modified mnist_convnet.py": [[254, "modified-mnist-convnet-py"]], "Run the modified script": [[254, "run-the-modified-script"]], "Run from command-line": [[254, "run-from-command-line"]], "Recommended Modifications": [[254, "recommended-modifications"]], "basic_example.py": [[254, "basic-example-py"]], "Next Steps": [[254, "next-steps"], [256, "next-steps"], [266, "next-steps"], [267, "next-steps"], [268, "next-steps"]], "Cloud Logging with Weights & Biases": [[255, "cloud-logging-with-weights-biases"]], "Disclaimer": [[255, "disclaimer"], [256, "disclaimer"]], "Basic Usage": [[255, "basic-usage"]], "Logging Information": [[255, "logging-information"]], "Default Data": [[255, "default-data"]], "Custom Data": [[255, "custom-data"]], "Training and logging in the cloud": [[255, "training-and-logging-in-the-cloud"]], "Other Features": [[255, "other-features"]], "Cloud Training with vast.ai": [[256, "cloud-training-with-vast-ai"]], "About vast.ai": [[256, "about-vast-ai"]], "What is Vast.ai?": [[256, "what-is-vast-ai"]], "How does it work in a nutshell?": [[256, "how-does-it-work-in-a-nutshell"]], "How do you protect my data from other clients?": [[256, "how-do-you-protect-my-data-from-other-clients"]], "How do you protect my data from providers?": [[256, "how-do-you-protect-my-data-from-providers"]], "How does billing work?": [[256, "how-does-billing-work"], [256, "id1"]], "How does pricing work?": [[256, "how-does-pricing-work"]], "Why should I trust vast.ai with my credit card info?": [[256, "why-should-i-trust-vast-ai-with-my-credit-card-info"]], "MLTK Installation": [[256, "mltk-installation"]], "Create an SSH Keypair": [[256, "create-an-ssh-keypair"]], "Create a vast.ai Account": [[256, "create-a-vast-ai-account"]], "Create new account": [[256, "create-new-account"]], "Add public SSH key to account": [[256, "add-public-ssh-key-to-account"]], "Add credit to account": [[256, "add-credit-to-account"]], "Configure instance image": [[256, "configure-instance-image"]], "Configure disk space": [[256, "configure-disk-space"]], "Select a Cloud Machine": [[256, "select-a-cloud-machine"]], "SSH Client Login": [[256, "ssh-client-login"]], "Notes about selecting a machine": [[256, "notes-about-selecting-a-machine"]], "Note about GPU Count": [[256, "note-about-gpu-count"]], "Note about CPU Count": [[256, "note-about-cpu-count"]], "Configure Settings": [[256, "configure-settings"]], "Develop a Model": [[256, "develop-a-model"]], "Suggested Reading": [[256, "suggested-reading"]], "Example Development Flow": [[256, "example-development-flow"]], "Modify the model specification": [[256, "modify-the-model-specification"]], "Note about custom datasets": [[256, "note-about-custom-datasets"]], "Test everything works locally": [[256, "test-everything-works-locally"]], "Profile model locally": [[256, "profile-model-locally"]], "Train Model in Cloud": [[256, "train-model-in-cloud"]], "Start cloud instance": [[256, "start-cloud-instance"]], "Start remote training": [[256, "start-remote-training"]], "Other CLI options": [[256, "other-cli-options"]], "Training Results": [[256, "training-results"]], "Shutdown Cloud Instance": [[256, "shutdown-cloud-instance"]], "Fingerprint Authentication": [[257, "fingerprint-authentication"]], "Demo Video": [[257, "demo-video"], [258, "demo-video"], [259, "demo-video"]], "Objectives": [[257, "objectives"], [258, "objectives"], [260, "objectives"], [261, "objectives"]], "Content": [[257, "content"], [258, "content"], [259, "content"], [260, "content"], [261, "content"], [268, "content"]], "Running this tutorial from a notebook": [[257, "running-this-tutorial-from-a-notebook"], [258, "running-this-tutorial-from-a-notebook"], [266, "running-this-tutorial-from-a-notebook"]], "Running this tutorial from the command-line": [[257, "running-this-tutorial-from-the-command-line"], [258, "running-this-tutorial-from-the-command-line"], [260, "running-this-tutorial-from-the-command-line"], [261, "running-this-tutorial-from-the-command-line"]], "Required Hardware": [[257, "required-hardware"], [258, "required-hardware"], [259, "required-hardware"], [261, "required-hardware"]], "Signature Generation Machine Learning Model Overview": [[257, "signature-generation-machine-learning-model-overview"]], "Siamese Networks": [[257, "siamese-networks"]], "Creating the dataset": [[257, "creating-the-dataset"]], "Generating the dataset": [[257, "generating-the-dataset"]], "Data preprocessing": [[257, "data-preprocessing"], [258, "data-preprocessing"]], "Generating fingerprint pairs": [[257, "generating-fingerprint-pairs"]], "Creating the Model": [[257, "creating-the-model"]], "Loss Function": [[257, "loss-function"]], "Saving the model": [[257, "saving-the-model"]], "Train the model": [[257, "train-the-model"], [259, "train-the-model"]], "Evaluating the model": [[257, "evaluating-the-model"]], "Determining the threshold": [[257, "determining-the-threshold"]], "Running the model": [[257, "running-the-model"]], "Using the command-line": [[257, "using-the-command-line"]], "Building the C++ example application": [[257, "building-the-c-example-application"]], "Image Classification - Rock, Paper, Scissors": [[258, "image-classification-rock-paper-scissors"]], "Classification Machine Learning Models Overview": [[258, "classification-machine-learning-models-overview"]], "Class IDs": [[258, "class-ids"]], "Convolution Neural Networks": [[258, "convolution-neural-networks"]], "Creating a Labeled Dataset": [[258, "creating-a-labeled-dataset"]], "Rock, Paper, Scissors Dataset Overview": [[258, "rock-paper-scissors-dataset-overview"]], "Update the Dataset": [[258, "update-the-dataset"]], "Update Sequence": [[258, "update-sequence"]], "Creating the Model Specification": [[258, "creating-the-model-specification"]], "Create the specification script": [[258, "create-the-specification-script"]], "Add necessary imports": [[258, "add-necessary-imports"]], "Define Model Object": [[258, "define-model-object"], [260, "define-model-object"]], "Configure the general model settings": [[258, "configure-the-general-model-settings"], [260, "configure-the-general-model-settings"]], "Configure the basic training settings": [[258, "configure-the-basic-training-settings"], [260, "configure-the-basic-training-settings"]], "Configure the training callbacks": [[258, "configure-the-training-callbacks"], [260, "configure-the-training-callbacks"]], "Configure the TF-Lite Converter settings": [[258, "configure-the-tf-lite-converter-settings"], [260, "configure-the-tf-lite-converter-settings"]], "Configure the dataset settings": [[258, "configure-the-dataset-settings"]], "Configure the data augmentation settings": [[258, "configure-the-data-augmentation-settings"]], "Define the model layout": [[258, "define-the-model-layout"]], "Model Visualization": [[258, "model-visualization"], [260, "model-visualization"]], "Visualize Keras model": [[258, "visualize-keras-model"], [260, "visualize-keras-model"]], "Visualize TF-Lite model": [[258, "visualize-tf-lite-model"], [260, "visualize-tf-lite-model"]], "Profile in simulator": [[258, "profile-in-simulator"], [260, "profile-in-simulator"]], "Profile on physical device": [[258, "profile-on-physical-device"], [260, "profile-on-physical-device"]], "Note about CPU utilization": [[258, "note-about-cpu-utilization"], [260, "note-about-cpu-utilization"]], "Note about model size and hardware constraints": [[258, "note-about-model-size-and-hardware-constraints"]], "Train as a \u201cdry run\u201d": [[258, "train-as-a-dry-run"], [260, "train-as-a-dry-run"]], "Training locally": [[258, "training-locally"], [260, "training-locally"]], "Train in cloud": [[258, "train-in-cloud"], [260, "train-in-cloud"], [261, "train-in-cloud"], [262, "train-in-cloud"], [264, "train-in-cloud"]], "Note about model accuracy": [[258, "note-about-model-accuracy"], [260, "note-about-model-accuracy"]], "Model Testing": [[258, "model-testing"], [260, "model-testing"]], "Deploying the Model": [[258, "deploying-the-model"], [260, "deploying-the-model"]], "Using the MLTK": [[258, "using-the-mltk"], [260, "using-the-mltk"]], "Keyword Spotting - Alexa": [[259, "keyword-spotting-alexa"]], "Quick start": [[259, "quick-start"]], "System Overview": [[259, "system-overview"]], "Prerequisite Reading": [[259, "prerequisite-reading"], [261, "prerequisite-reading"]], "EFR32xG24 development kit": [[259, "efr32xg24-development-kit"]], "Analog speaker with amplifier": [[259, "analog-speaker-with-amplifier"]], "Pinout": [[259, "pinout"]], "Develop the ML Model": [[259, "develop-the-ml-model"]], "Create the dataset": [[259, "create-the-dataset"]], "Synthetic dataset generation": [[259, "synthetic-dataset-generation"]], "\u201cNegative\u201d class": [[259, "negative-class"]], "Class balance": [[259, "class-balance"]], "Select the model architecture": [[259, "select-the-model-architecture"]], "Determine the audio frontend parameters": [[259, "determine-the-audio-frontend-parameters"]], "Audio visualizer command": [[259, "audio-visualizer-command"]], "AudioFeatureGenerator settings": [[259, "audiofeaturegenerator-settings"]], "Profile the model": [[259, "profile-the-model"]], "Model profiler command": [[259, "model-profiler-command"]], "Data augmentations": [[259, "data-augmentations"]], "Dump augmentations": [[259, "dump-augmentations"]], "Local Training": [[259, "local-training"]], "Remote Training": [[259, "remote-training"]], "Run the trained model": [[259, "run-the-trained-model"]], "Classify audio command": [[259, "classify-audio-command"]], "Run the demo": [[259, "run-the-demo"]], "Build C++ application from source": [[259, "build-c-application-from-source"]], "Increase the BAUD rate": [[259, "increase-the-baud-rate"]], "Keyword Spotting - On/Off": [[260, "keyword-spotting-on-off"]], "Machine Learning and Keyword-Spotting Overview": [[260, "machine-learning-and-keyword-spotting-overview"]], "Dataset Selection and Preprocessing Parameters": [[260, "dataset-selection-and-preprocessing-parameters"]], "TL;DR": [[260, "tl-dr"]], "Acquire a Representative Dataset": [[260, "acquire-a-representative-dataset"]], "Synthetically Generated Dataset": [[260, "synthetically-generated-dataset"]], "Creating an \u201cUnknown\u201d Class": [[260, "creating-an-unknown-class"]], "Final note about the dataset": [[260, "final-note-about-the-dataset"]], "Feature Engineering": [[260, "feature-engineering"]], "Featuring Engineering on the Edge": [[260, "featuring-engineering-on-the-edge"]], "Data Augmentation": [[260, "data-augmentation"]], "Random Impulse Response": [[260, "random-impulse-response"]], "Random \u201cunknown\u201d samples by cropping \u201cknown\u201d samples": [[260, "random-unknown-samples-by-cropping-known-samples"]], "Define the model architecture": [[260, "define-the-model-architecture"]], "Audio Feature Generator Settings": [[260, "audio-feature-generator-settings"], [261, "audio-feature-generator-settings"]], "Configure the keywords to detect": [[260, "configure-the-keywords-to-detect"]], "Data Pipeline": [[260, "data-pipeline"]], "Audio Visualization": [[260, "audio-visualization"]], "Note about training time": [[260, "note-about-training-time"]], "Classify audio on PC": [[260, "classify-audio-on-pc"]], "Classify audio on device": [[260, "classify-audio-on-device"]], "Record audio and spectrograms from device": [[260, "record-audio-and-spectrograms-from-device"]], "Using Simplicity Studio": [[260, "using-simplicity-studio"]], "Keyword Spotting - Pac-Man": [[261, "keyword-spotting-pac-man"]], "Live Demo": [[261, "live-demo"]], "Creating the Machine Learning Model": [[261, "creating-the-machine-learning-model"]], "Select the dataset": [[261, "select-the-dataset"]], "Model Parameter Tradeoffs": [[261, "model-parameter-tradeoffs"]], "Module Architecture": [[261, "module-architecture"]], "Audio Data Generator": [[261, "audio-data-generator"]], "Profiling the model": [[261, "profiling-the-model"]], "Training the model": [[261, "training-the-model"]], "Creating the Firmware Application": [[261, "creating-the-firmware-application"]], "Creating the Pac-Man Webpage": [[261, "creating-the-pac-man-webpage"]], "Running the Demo": [[261, "running-the-demo"]], "Build firmware application from source": [[261, "build-firmware-application-from-source"]], "Run webpage locally": [[261, "run-webpage-locally"]], "Keyword Spotting with Transfer Learning": [[262, "keyword-spotting-with-transfer-learning"]], "Running this Tutorial": [[262, "running-this-tutorial"], [264, "running-this-tutorial"]], "Recommended Reading": [[262, "recommended-reading"], [264, "recommended-reading"]], "Basic Concept": [[262, "basic-concept"]], "Base Model Overview": [[262, "base-model-overview"]], "Test model using PC microphone": [[262, "test-model-using-pc-microphone"]], "Test model using development board": [[262, "test-model-using-development-board"]], "Configure Model Specification with Transfer Learning": [[262, "configure-model-specification-with-transfer-learning"]], "Update description": [[262, "update-description"]], "Set epochs to small value": [[262, "set-epochs-to-small-value"]], "Use LearningRateScheduler with small initial value": [[262, "use-learningratescheduler-with-small-initial-value"]], "Update the keywords to detect": [[262, "update-the-keywords-to-detect"]], "Reduce the \u201cunknown_class_percentage\u201d": [[262, "reduce-the-unknown-class-percentage"]], "Load the weights from the base model": [[262, "load-the-weights-from-the-base-model"]], "Train the Model": [[262, "train-the-model"], [264, "train-the-model"]], "Test the model": [[262, "test-the-model"]], "Model Debugging": [[263, "model-debugging"]], "Setup Environment": [[263, "setup-environment"]], "1) Install the MLTK Python Package": [[263, "install-the-mltk-python-package"]], "2) Install VS Code and the Python Extension": [[263, "install-vs-code-and-the-python-extension"]], "Debug model: basic_example": [[263, "debug-model-basic-example"]], "How does debugging work?": [[263, "how-does-debugging-work"]], "Model Optimization for MVP Hardware Accelerator": [[264, "model-optimization-for-mvp-hardware-accelerator"]], "Create the model specification file": [[264, "create-the-model-specification-file"]], "Update the model description": [[264, "update-the-model-description"]], "Update the Keywords": [[264, "update-the-keywords"]], "Update the AudioFeatureGenerator Settings": [[264, "update-the-audiofeaturegenerator-settings"]], "Select an audio file": [[264, "select-an-audio-file"]], "Adjust the AudioFeatureGenerator settings": [[264, "adjust-the-audiofeaturegenerator-settings"]], "Update Model Layout": [[264, "update-model-layout"]], "Summarize the model": [[264, "summarize-the-model"]], "Profile Model": [[264, "profile-model"]], "Test the Model": [[264, "test-the-model"]], "Model Quantization Tips": [[265, "model-quantization-tips"]], "Quantization Report": [[265, "quantization-report"], [267, "quantization-report"]], "Enabling the Quantization Report": [[265, "enabling-the-quantization-report"]], "Analyzing the Report": [[265, "analyzing-the-report"]], "Input Data Normalization": [[265, "input-data-normalization"]], "Scale by a constant": [[265, "scale-by-a-constant"]], "Center about mean and scale by STD": [[265, "center-about-mean-and-scale-by-std"]], "Normalization Layers": [[265, "normalization-layers"]], "Batch Normalization": [[265, "batch-normalization"]], "Conv2D + Batch Normalization": [[265, "conv2d-batch-normalization"]], "Fully Connected + Batch Normalization": [[265, "fully-connected-batch-normalization"]], "LayerNormalization": [[265, "layernormalization"]], "ONNX to TF-Lite Model Conversion": [[266, "onnx-to-tf-lite-model-conversion"]], "About this Tutorial": [[266, "about-this-tutorial"]], "Considerations": [[266, "considerations"]], "Input Data Format": [[266, "input-data-format"]], "Output Class ID Mapping": [[266, "output-class-id-mapping"]], "Supported ML Kernel Operations": [[266, "supported-ml-kernel-operations"]], "\u201cChannels-First\u201d vs \u201cChannels-Last\u201d": [[266, "channels-first-vs-channels-last"]], "Dataset Required for Quantization": [[266, "dataset-required-for-quantization"]], "Environment Setup": [[266, "environment-setup"]], "Install Python Dependencies": [[266, "install-python-dependencies"]], "Download ONNX Model": [[266, "download-onnx-model"]], "Configure Paths": [[266, "configure-paths"]], "Load the dataset": [[266, "load-the-dataset"]], "Sanity check: Evaluate the ONNX model": [[266, "sanity-check-evaluate-the-onnx-model"]], "Convert ONNX to Quantized TF-Lite Model File": [[266, "convert-onnx-to-quantized-tf-lite-model-file"]], "Simplify the ONNX model": [[266, "simplify-the-onnx-model"]], "Convert to OpenVino Intermediate Format": [[266, "convert-to-openvino-intermediate-format"]], "Convert from OpenVino to TF-Lite-Float32": [[266, "convert-from-openvino-to-tf-lite-float32"]], "Quantize the TF-Lite Model": [[266, "quantize-the-tf-lite-model"]], "Profile the Quantized Model": [[266, "profile-the-quantized-model"]], "Evaluate the Quantized Model": [[266, "evaluate-the-quantized-model"]], "Quantized LSTM": [[267, "quantized-lstm"]], "Key Takeaways": [[267, "key-takeaways"]], "About LSTMs": [[267, "about-lstms"]], "Quantizing an LSTM Model": [[267, "quantizing-an-lstm-model"]], "Model Settings": [[267, "model-settings"]], "LSTM Layer Config": [[267, "lstm-layer-config"]], "Force the batch size=1 during quantization": [[267, "force-the-batch-size-1-during-quantization"]], "Debugging Quantization Errors": [[267, "debugging-quantization-errors"]], "Analyzing the report": [[267, "analyzing-the-report"]], "Data Normalization": [[267, "data-normalization"]], "Normalize the input data": [[267, "normalize-the-input-data"]], "Return uint16 from the audio frontend": [[267, "return-uint16-from-the-audio-frontend"]], "Use NumPy to normalize the spectrogram": [[267, "use-numpy-to-normalize-the-spectrogram"]], "Use float32 for the quantized model input": [[267, "use-float32-for-the-quantized-model-input"]], "Normalize the spectrogram at runtime on the embedded device": [[267, "normalize-the-spectrogram-at-runtime-on-the-embedded-device"]], "Use BatchNormalization when possible": [[267, "use-batchnormalization-when-possible"]], "Use LayerNormalization": [[267, "use-layernormalization"]], "Float32 weights/activations": [[267, "float32-weights-activations"]], "int8 weights/activations": [[267, "int8-weights-activations"]], "Remarks": [[267, "remarks"]], "Synthetic Audio Dataset Generation": [[268, "synthetic-audio-dataset-generation"]], "Recording real people": [[268, "recording-real-people"]], "Synthetic generation": [[268, "synthetic-generation"]], "Note about synthetic augmentations": [[268, "note-about-synthetic-augmentations"]], "Note about languages": [[268, "note-about-languages"]], "Note about the \u201cnegative\u201d class": [[268, "note-about-the-negative-class"]], "Note about cost": [[268, "note-about-cost"]], "Google Cloud Platform (GCP) Setup": [[268, "google-cloud-platform-gcp-setup"]], "Features": [[268, "features"], [268, "id2"]], "Microsoft Azure Setup": [[268, "microsoft-azure-setup"]], "Amazon Web Services (AWS) Setup": [[268, "amazon-web-services-aws-setup"]], "Alexa Example": [[268, "alexa-example"]]}, "indexentries": {"adjust_length() (in module mltk.core.preprocess.utils.audio)": [[80, "mltk.core.preprocess.utils.audio.adjust_length"]], "apply_frontend() (in module mltk.core.preprocess.utils.audio)": [[80, "mltk.core.preprocess.utils.audio.apply_frontend"]], "mltk.core.preprocess.utils.audio": [[80, "module-mltk.core.preprocess.utils.audio"]], "module": [[80, "module-mltk.core.preprocess.utils.audio"], [85, "module-mltk.core.preprocess.utils.image"], [89, "module-mltk.core.preprocess.utils.list_directory"], [90, "module-mltk.core.preprocess.utils.normalize"], [91, "module-mltk.core.preprocess.utils.tf_dataset"], [93, "module-mltk.datasets.accelerometer.tflm_magic_wand"], [94, "module-mltk.datasets.audio.background_noise.ambient"], [95, "module-mltk.datasets.audio.background_noise.brd2601"], [96, "module-mltk.datasets.audio.background_noise.esc50"], [97, "module-mltk.datasets.audio.direction_commands"], [98, "module-mltk.datasets.audio.hey_gecko"], [99, "module-mltk.datasets.audio.mit_ir_survey"], [100, "module-mltk.datasets.audio.mlcommons.ml_commons_keywords"], [101, "module-mltk.datasets.audio.mlcommons.ml_commons_voice"], [102, "module-mltk.datasets.audio.on_off"], [103, "module-mltk.datasets.audio.speech_commands.speech_commands_v2"], [104, "module-mltk.datasets.audio.ten_digits"], [105, "module-mltk.datasets.audio.yes_no"], [106, "module-mltk.datasets.image.cifar10"], [107, "module-mltk.datasets.image.fashion_mnist"], [108, "module-mltk.datasets.image.mnist"], [109, "module-mltk.datasets.image.rock_paper_scissors_v1"], [110, "module-mltk.datasets.image.rock_paper_scissors_v2"], [129, "module-mltk.models.examples.audio_example1"], [130, "module-mltk.models.examples.audio_tf_dataset"], [131, "module-mltk.models.examples.autoencoder_example"], [132, "module-mltk.models.examples.basic_example"], [133, "module-mltk.models.examples.basic_tf_dataset_example"], [134, "module-mltk.models.examples.binary_classification"], [135, "module-mltk.models.examples.conv1d_example"], [136, "module-mltk.models.examples.image_example1"], [137, "module-mltk.models.examples.image_tf_dataset"], [139, "module-mltk.models.examples.siamese_contrastive"], [141, "module-mltk.models.siliconlabs.fingerprint_signature_generator"], [143, "module-mltk.models.siliconlabs.keyword_spotting_alexa"], [144, "module-mltk.models.siliconlabs.keyword_spotting_mobilenetv2"], [145, "module-mltk.models.siliconlabs.keyword_spotting_numbers"], [146, "module-mltk.models.siliconlabs.keyword_spotting_on_off"], [147, "module-mltk.models.siliconlabs.keyword_spotting_on_off_v2"], [148, "module-mltk.models.siliconlabs.keyword_spotting_on_off_v3"], [149, "module-mltk.models.siliconlabs.keyword_spotting_pacman"], [150, "module-mltk.models.siliconlabs.keyword_spotting_pacman_v2"], [151, "module-mltk.models.siliconlabs.keyword_spotting_pacman_v3"], [152, "module-mltk.models.siliconlabs.keyword_spotting_with_transfer_learning"], [153, "module-mltk.models.siliconlabs.rock_paper_scissors"], [155, "module-mltk.models.tflite_micro.tflite_micro_magic_wand"], [156, "module-mltk.models.tflite_micro.tflite_micro_speech"], [157, "module-mltk.models.tinyml.anomaly_detection"], [158, "module-mltk.models.tinyml.image_classification"], [160, "module-mltk.models.tinyml.keyword_spotting"], [161, "module-mltk.models.tinyml.visual_wake_words"], [208, "module-mltk.utils.archive"], [209, "module-mltk.utils.archive_downloader"], [218, "module-mltk.utils.bin2header"], [219, "module-mltk.utils.cmake"], [220, "module-mltk.utils.gpu"], [221, "module-mltk.utils.hasher"], [228, "module-mltk.utils.logger"], [229, "module-mltk.utils.path"], [231, "module-mltk.utils.python"], [234, "module-mltk.utils.shell_cmd"], [236, "module-mltk.utils.string_formatting"], [237, "module-mltk.utils.system"]], "read_audio_file() (in module mltk.core.preprocess.utils.audio)": [[80, "mltk.core.preprocess.utils.audio.read_audio_file"]], "write_audio_file() (in module mltk.core.preprocess.utils.audio)": [[80, "mltk.core.preprocess.utils.audio.write_audio_file"]], "parallelaudiodatagenerator (class in mltk.core.preprocess.audio.parallel_generator)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator"]], "__init__() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.__init__"]], "adjust_length() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.adjust_length"]], "apply_frontend() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.apply_frontend"]], "apply_transform() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.apply_transform"]], "default_transform (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.default_transform"]], "flow_from_directory() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.flow_from_directory"]], "get_random_transform() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.get_random_transform"]], "sample_length (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.sample_length"]], "sample_length_ms (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.sample_length_ms"]], "sample_rate_hz (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.sample_rate_hz"]], "sample_shape (parallelaudiodatagenerator property)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.sample_shape"]], "standardize() (parallelaudiodatagenerator method)": [[81, "mltk.core.preprocess.audio.parallel_generator.ParallelAudioDataGenerator.standardize"]], "parallelprocessparams (class in mltk.core.preprocess.audio.parallel_generator)": [[82, "mltk.core.preprocess.audio.parallel_generator.ParallelProcessParams"]], "__init__() (parallelprocessparams method)": [[82, "mltk.core.preprocess.audio.parallel_generator.ParallelProcessParams.__init__"], [87, "mltk.core.preprocess.image.parallel_generator.ParallelProcessParams.__init__"]], "audiofeaturegenerator (class in mltk.core.preprocess.audio.audio_feature_generator)": [[83, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator"]], "__init__() (audiofeaturegenerator method)": [[83, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator.__init__"]], "activity_was_detected() (audiofeaturegenerator method)": [[83, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator.activity_was_detected"]], "process_sample() (audiofeaturegenerator method)": [[83, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGenerator.process_sample"]], "audiofeaturegeneratorsettings (class in mltk.core.preprocess.audio.audio_feature_generator)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings"]], "__init__() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.__init__"]], "__new__() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.__new__"]], "activity_detection_alpha_a (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_alpha_a"]], "activity_detection_alpha_b (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_alpha_b"]], "activity_detection_arm_threshold (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_arm_threshold"]], "activity_detection_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_enable"]], "activity_detection_trip_threshold (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.activity_detection_trip_threshold"]], "clear() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.clear"]], "copy() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.copy"]], "dc_notch_filter_coefficient (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.dc_notch_filter_coefficient"]], "dc_notch_filter_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.dc_notch_filter_enable"]], "fft_length (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.fft_length"]], "filterbank_lower_band_limit (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.filterbank_lower_band_limit"]], "filterbank_n_channels (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.filterbank_n_channels"]], "filterbank_upper_band_limit (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.filterbank_upper_band_limit"]], "fromkeys() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.fromkeys"]], "get() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.get"]], "items() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.items"]], "keys() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.keys"]], "log_scale_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.log_scale_enable"]], "log_scale_shift (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.log_scale_shift"]], "noise_reduction_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_enable"]], "noise_reduction_even_smoothing (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_even_smoothing"]], "noise_reduction_min_signal_remaining (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_min_signal_remaining"]], "noise_reduction_odd_smoothing (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_odd_smoothing"]], "noise_reduction_smoothing_bits (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.noise_reduction_smoothing_bits"]], "pcan_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pcan_enable"]], "pcan_gain_bits (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pcan_gain_bits"]], "pcan_offset (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pcan_offset"]], "pcan_strength (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pcan_strength"]], "pop() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.pop"]], "popitem() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.popitem"]], "quantize_dynamic_scale_enable (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.quantize_dynamic_scale_enable"]], "quantize_dynamic_scale_range_db (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.quantize_dynamic_scale_range_db"]], "sample_length (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.sample_length"]], "sample_length_ms (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.sample_length_ms"]], "sample_rate_hz (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.sample_rate_hz"]], "setdefault() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.setdefault"]], "spectrogram_shape (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.spectrogram_shape"]], "update() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.update"]], "values() (audiofeaturegeneratorsettings method)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.values"]], "window_size_ms (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.window_size_ms"]], "window_step_ms (audiofeaturegeneratorsettings property)": [[84, "mltk.core.preprocess.audio.audio_feature_generator.AudioFeatureGeneratorSettings.window_step_ms"]], "mltk.core.preprocess.utils.image": [[85, "module-mltk.core.preprocess.utils.image"]], "read_image_file() (in module mltk.core.preprocess.utils.image)": [[85, "mltk.core.preprocess.utils.image.read_image_file"]], "write_image_file() (in module mltk.core.preprocess.utils.image)": [[85, "mltk.core.preprocess.utils.image.write_image_file"]], "parallelimagedatagenerator (class in mltk.core.preprocess.image.parallel_generator)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator"]], "__init__() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.__init__"]], "apply_transform() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.apply_transform"]], "default_transform (parallelimagedatagenerator property)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.default_transform"]], "fit() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.fit"]], "flow() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.flow"]], "flow_from_dataframe() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.flow_from_dataframe"]], "flow_from_directory() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.flow_from_directory"]], "get_random_transform() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.get_random_transform"]], "random_transform() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.random_transform"]], "standardize() (parallelimagedatagenerator method)": [[86, "mltk.core.preprocess.image.parallel_generator.ParallelImageDataGenerator.standardize"]], "parallelprocessparams (class in mltk.core.preprocess.image.parallel_generator)": [[87, "mltk.core.preprocess.image.parallel_generator.ParallelProcessParams"]], "list_dataset_directory() (in module mltk.core.preprocess.utils.list_directory)": [[89, "mltk.core.preprocess.utils.list_directory.list_dataset_directory"]], "list_valid_filenames_in_directory() (in module mltk.core.preprocess.utils.list_directory)": [[89, "mltk.core.preprocess.utils.list_directory.list_valid_filenames_in_directory"]], "mltk.core.preprocess.utils.list_directory": [[89, "module-mltk.core.preprocess.utils.list_directory"]], "shuffle_file_list_by_group() (in module mltk.core.preprocess.utils.list_directory)": [[89, "mltk.core.preprocess.utils.list_directory.shuffle_file_list_by_group"]], "split_file_list() (in module mltk.core.preprocess.utils.list_directory)": [[89, "mltk.core.preprocess.utils.list_directory.split_file_list"]], "mltk.core.preprocess.utils.normalize": [[90, "module-mltk.core.preprocess.utils.normalize"]], "normalize() (in module mltk.core.preprocess.utils.normalize)": [[90, "mltk.core.preprocess.utils.normalize.normalize"]], "enable_numpy_behavior() (in module mltk.core.preprocess.utils.tf_dataset)": [[91, "mltk.core.preprocess.utils.tf_dataset.enable_numpy_behavior"]], "load_audio_directory() (in module mltk.core.preprocess.utils.tf_dataset)": [[91, "mltk.core.preprocess.utils.tf_dataset.load_audio_directory"]], "load_image_directory() (in module mltk.core.preprocess.utils.tf_dataset)": [[91, "mltk.core.preprocess.utils.tf_dataset.load_image_directory"]], "mltk.core.preprocess.utils.tf_dataset": [[91, "module-mltk.core.preprocess.utils.tf_dataset"]], "parallel_process() (in module mltk.core.preprocess.utils.tf_dataset)": [[91, "mltk.core.preprocess.utils.tf_dataset.parallel_process"]], "load_data() (in module mltk.datasets.accelerometer.tflm_magic_wand)": [[93, "mltk.datasets.accelerometer.tflm_magic_wand.load_data"]], "mltk.datasets.accelerometer.tflm_magic_wand": [[93, "module-mltk.datasets.accelerometer.tflm_magic_wand"]], "prepare_data() (in module mltk.datasets.accelerometer.tflm_magic_wand)": [[93, "mltk.datasets.accelerometer.tflm_magic_wand.prepare_data"]], "download_urls (in module mltk.datasets.audio.background_noise.ambient)": [[94, "mltk.datasets.audio.background_noise.ambient.DOWNLOAD_URLS"]], "download() (in module mltk.datasets.audio.background_noise.ambient)": [[94, "mltk.datasets.audio.background_noise.ambient.download"]], "mltk.datasets.audio.background_noise.ambient": [[94, "module-mltk.datasets.audio.background_noise.ambient"]], "download_url (in module mltk.datasets.audio.background_noise.brd2601)": [[95, "mltk.datasets.audio.background_noise.brd2601.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.background_noise.brd2601)": [[95, "mltk.datasets.audio.background_noise.brd2601.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.background_noise.brd2601)": [[95, "mltk.datasets.audio.background_noise.brd2601.download"]], "mltk.datasets.audio.background_noise.brd2601": [[95, "module-mltk.datasets.audio.background_noise.brd2601"]], "download_url (in module mltk.datasets.audio.background_noise.esc50)": [[96, "mltk.datasets.audio.background_noise.esc50.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.background_noise.esc50)": [[96, "mltk.datasets.audio.background_noise.esc50.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.background_noise.esc50)": [[96, "mltk.datasets.audio.background_noise.esc50.download"]], "mltk.datasets.audio.background_noise.esc50": [[96, "module-mltk.datasets.audio.background_noise.esc50"]], "classes (in module mltk.datasets.audio.direction_commands)": [[97, "mltk.datasets.audio.direction_commands.CLASSES"]], "download_url (in module mltk.datasets.audio.direction_commands)": [[97, "mltk.datasets.audio.direction_commands.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.direction_commands)": [[97, "mltk.datasets.audio.direction_commands.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.direction_commands)": [[97, "mltk.datasets.audio.direction_commands.download"]], "generate_dataset() (in module mltk.datasets.audio.direction_commands)": [[97, "mltk.datasets.audio.direction_commands.generate_dataset"]], "mltk.datasets.audio.direction_commands": [[97, "module-mltk.datasets.audio.direction_commands"]], "classes (in module mltk.datasets.audio.hey_gecko)": [[98, "mltk.datasets.audio.hey_gecko.CLASSES"]], "download_url (in module mltk.datasets.audio.hey_gecko)": [[98, "mltk.datasets.audio.hey_gecko.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.hey_gecko)": [[98, "mltk.datasets.audio.hey_gecko.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.hey_gecko)": [[98, "mltk.datasets.audio.hey_gecko.download"]], "generate_dataset() (in module mltk.datasets.audio.hey_gecko)": [[98, "mltk.datasets.audio.hey_gecko.generate_dataset"]], "mltk.datasets.audio.hey_gecko": [[98, "module-mltk.datasets.audio.hey_gecko"]], "download_url (in module mltk.datasets.audio.mit_ir_survey)": [[99, "mltk.datasets.audio.mit_ir_survey.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.mit_ir_survey)": [[99, "mltk.datasets.audio.mit_ir_survey.VERIFY_SHA1"]], "apply_ir() (in module mltk.datasets.audio.mit_ir_survey)": [[99, "mltk.datasets.audio.mit_ir_survey.apply_ir"]], "apply_random_ir() (in module mltk.datasets.audio.mit_ir_survey)": [[99, "mltk.datasets.audio.mit_ir_survey.apply_random_ir"]], "download() (in module mltk.datasets.audio.mit_ir_survey)": [[99, "mltk.datasets.audio.mit_ir_survey.download"]], "load_dataset() (in module mltk.datasets.audio.mit_ir_survey)": [[99, "mltk.datasets.audio.mit_ir_survey.load_dataset"]], "mltk.datasets.audio.mit_ir_survey": [[99, "module-mltk.datasets.audio.mit_ir_survey"]], "download_url1 (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[100, "mltk.datasets.audio.mlcommons.ml_commons_keywords.DOWNLOAD_URL1"]], "download_url2 (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[100, "mltk.datasets.audio.mlcommons.ml_commons_keywords.DOWNLOAD_URL2"]], "verify_url1_sha1 (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[100, "mltk.datasets.audio.mlcommons.ml_commons_keywords.VERIFY_URL1_SHA1"]], "verify_url2_sha1 (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[100, "mltk.datasets.audio.mlcommons.ml_commons_keywords.VERIFY_URL2_SHA1"]], "download() (in module mltk.datasets.audio.mlcommons.ml_commons_keywords)": [[100, "mltk.datasets.audio.mlcommons.ml_commons_keywords.download"]], "mltk.datasets.audio.mlcommons.ml_commons_keywords": [[100, "module-mltk.datasets.audio.mlcommons.ml_commons_keywords"]], "download_url (in module mltk.datasets.audio.mlcommons.ml_commons_voice)": [[101, "mltk.datasets.audio.mlcommons.ml_commons_voice.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.mlcommons.ml_commons_voice)": [[101, "mltk.datasets.audio.mlcommons.ml_commons_voice.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.mlcommons.ml_commons_voice)": [[101, "mltk.datasets.audio.mlcommons.ml_commons_voice.download"]], "mltk.datasets.audio.mlcommons.ml_commons_voice": [[101, "module-mltk.datasets.audio.mlcommons.ml_commons_voice"]], "classes (in module mltk.datasets.audio.on_off)": [[102, "mltk.datasets.audio.on_off.CLASSES"]], "download_url (in module mltk.datasets.audio.on_off)": [[102, "mltk.datasets.audio.on_off.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.on_off)": [[102, "mltk.datasets.audio.on_off.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.on_off)": [[102, "mltk.datasets.audio.on_off.download"]], "generate_dataset() (in module mltk.datasets.audio.on_off)": [[102, "mltk.datasets.audio.on_off.generate_dataset"]], "mltk.datasets.audio.on_off": [[102, "module-mltk.datasets.audio.on_off"]], "classes (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[103, "mltk.datasets.audio.speech_commands.speech_commands_v2.CLASSES"]], "download_url (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[103, "mltk.datasets.audio.speech_commands.speech_commands_v2.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[103, "mltk.datasets.audio.speech_commands.speech_commands_v2.VERIFY_SHA1"]], "list_valid_filenames_in_directory() (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[103, "mltk.datasets.audio.speech_commands.speech_commands_v2.list_valid_filenames_in_directory"]], "load_clean_data() (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[103, "mltk.datasets.audio.speech_commands.speech_commands_v2.load_clean_data"]], "load_data() (in module mltk.datasets.audio.speech_commands.speech_commands_v2)": [[103, "mltk.datasets.audio.speech_commands.speech_commands_v2.load_data"]], "mltk.datasets.audio.speech_commands.speech_commands_v2": [[103, "module-mltk.datasets.audio.speech_commands.speech_commands_v2"]], "classes (in module mltk.datasets.audio.ten_digits)": [[104, "mltk.datasets.audio.ten_digits.CLASSES"]], "download_url (in module mltk.datasets.audio.ten_digits)": [[104, "mltk.datasets.audio.ten_digits.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.ten_digits)": [[104, "mltk.datasets.audio.ten_digits.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.ten_digits)": [[104, "mltk.datasets.audio.ten_digits.download"]], "generate_dataset() (in module mltk.datasets.audio.ten_digits)": [[104, "mltk.datasets.audio.ten_digits.generate_dataset"]], "mltk.datasets.audio.ten_digits": [[104, "module-mltk.datasets.audio.ten_digits"]], "classes (in module mltk.datasets.audio.yes_no)": [[105, "mltk.datasets.audio.yes_no.CLASSES"]], "download_url (in module mltk.datasets.audio.yes_no)": [[105, "mltk.datasets.audio.yes_no.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.audio.yes_no)": [[105, "mltk.datasets.audio.yes_no.VERIFY_SHA1"]], "download() (in module mltk.datasets.audio.yes_no)": [[105, "mltk.datasets.audio.yes_no.download"]], "generate_dataset() (in module mltk.datasets.audio.yes_no)": [[105, "mltk.datasets.audio.yes_no.generate_dataset"]], "mltk.datasets.audio.yes_no": [[105, "module-mltk.datasets.audio.yes_no"]], "download_url (in module mltk.datasets.image.cifar10)": [[106, "mltk.datasets.image.cifar10.DOWNLOAD_URL"]], "verify_sha1 (in module mltk.datasets.image.cifar10)": [[106, "mltk.datasets.image.cifar10.VERIFY_SHA1"]], "load_data() (in module mltk.datasets.image.cifar10)": [[106, "mltk.datasets.image.cifar10.load_data"]], "load_data_directory() (in module mltk.datasets.image.cifar10)": [[106, "mltk.datasets.image.cifar10.load_data_directory"]], "mltk.datasets.image.cifar10": [[106, "module-mltk.datasets.image.cifar10"]], "classes (in module mltk.datasets.image.fashion_mnist)": [[107, "mltk.datasets.image.fashion_mnist.CLASSES"]], "input_shape (in module mltk.datasets.image.fashion_mnist)": [[107, "mltk.datasets.image.fashion_mnist.INPUT_SHAPE"]], "load_data() (in module mltk.datasets.image.fashion_mnist)": [[107, "mltk.datasets.image.fashion_mnist.load_data"]], "load_data_directory() (in module mltk.datasets.image.fashion_mnist)": [[107, "mltk.datasets.image.fashion_mnist.load_data_directory"]], "mltk.datasets.image.fashion_mnist": [[107, "module-mltk.datasets.image.fashion_mnist"]], "classes (in module mltk.datasets.image.mnist)": [[108, "mltk.datasets.image.mnist.CLASSES"]], "download_url (in module mltk.datasets.image.mnist)": [[108, "mltk.datasets.image.mnist.DOWNLOAD_URL"]], "input_shape (in module mltk.datasets.image.mnist)": [[108, "mltk.datasets.image.mnist.INPUT_SHAPE"]], "verify_sha1 (in module mltk.datasets.image.mnist)": [[108, "mltk.datasets.image.mnist.VERIFY_SHA1"]], "load_data() (in module mltk.datasets.image.mnist)": [[108, "mltk.datasets.image.mnist.load_data"]], "load_data_directory() (in module mltk.datasets.image.mnist)": [[108, "mltk.datasets.image.mnist.load_data_directory"]], "mltk.datasets.image.mnist": [[108, "module-mltk.datasets.image.mnist"]], "classes (in module mltk.datasets.image.rock_paper_scissors_v1)": [[109, "mltk.datasets.image.rock_paper_scissors_v1.CLASSES"]], "download_url (in module mltk.datasets.image.rock_paper_scissors_v1)": [[109, "mltk.datasets.image.rock_paper_scissors_v1.DOWNLOAD_URL"]], "input_depth (in module mltk.datasets.image.rock_paper_scissors_v1)": [[109, "mltk.datasets.image.rock_paper_scissors_v1.INPUT_DEPTH"]], "input_height (in module mltk.datasets.image.rock_paper_scissors_v1)": [[109, "mltk.datasets.image.rock_paper_scissors_v1.INPUT_HEIGHT"]], "input_shape (in module mltk.datasets.image.rock_paper_scissors_v1)": [[109, "mltk.datasets.image.rock_paper_scissors_v1.INPUT_SHAPE"]], "input_width (in module mltk.datasets.image.rock_paper_scissors_v1)": [[109, "mltk.datasets.image.rock_paper_scissors_v1.INPUT_WIDTH"]], "verify_sha1 (in module mltk.datasets.image.rock_paper_scissors_v1)": [[109, "mltk.datasets.image.rock_paper_scissors_v1.VERIFY_SHA1"]], "load_data() (in module mltk.datasets.image.rock_paper_scissors_v1)": [[109, "mltk.datasets.image.rock_paper_scissors_v1.load_data"]], "mltk.datasets.image.rock_paper_scissors_v1": [[109, "module-mltk.datasets.image.rock_paper_scissors_v1"]], "classes (in module mltk.datasets.image.rock_paper_scissors_v2)": [[110, "mltk.datasets.image.rock_paper_scissors_v2.CLASSES"]], "download_url (in module mltk.datasets.image.rock_paper_scissors_v2)": [[110, "mltk.datasets.image.rock_paper_scissors_v2.DOWNLOAD_URL"]], "input_depth (in module mltk.datasets.image.rock_paper_scissors_v2)": [[110, "mltk.datasets.image.rock_paper_scissors_v2.INPUT_DEPTH"]], "input_height (in module mltk.datasets.image.rock_paper_scissors_v2)": [[110, "mltk.datasets.image.rock_paper_scissors_v2.INPUT_HEIGHT"]], "input_shape (in module mltk.datasets.image.rock_paper_scissors_v2)": [[110, "mltk.datasets.image.rock_paper_scissors_v2.INPUT_SHAPE"]], "input_width (in module mltk.datasets.image.rock_paper_scissors_v2)": [[110, "mltk.datasets.image.rock_paper_scissors_v2.INPUT_WIDTH"]], "verify_sha1 (in module mltk.datasets.image.rock_paper_scissors_v2)": [[110, "mltk.datasets.image.rock_paper_scissors_v2.VERIFY_SHA1"]], "load_data() (in module mltk.datasets.image.rock_paper_scissors_v2)": [[110, "mltk.datasets.image.rock_paper_scissors_v2.load_data"]], "mltk.datasets.image.rock_paper_scissors_v2": [[110, "module-mltk.datasets.image.rock_paper_scissors_v2"]], "kerasmodel (in module mltk.core)": [[113, "mltk.core.KerasModel"]], "audiodatasetmixin (class in mltk.core)": [[114, "mltk.core.AudioDatasetMixin"]], "audio_classes (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.audio_classes"]], "audio_input_shape (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.audio_input_shape"]], "class_counts (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.class_counts"]], "class_mode (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.class_mode"]], "class_weights (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.class_weights"]], "datagen (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.datagen"]], "datagen_context (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.datagen_context"]], "dataset (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.dataset"]], "follow_links (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.follow_links"]], "frontend_settings (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.frontend_settings"]], "get_datagen_creator() (audiodatasetmixin method)": [[114, "mltk.core.AudioDatasetMixin.get_datagen_creator"]], "get_shuffle_index_dir() (audiodatasetmixin method)": [[114, "mltk.core.AudioDatasetMixin.get_shuffle_index_dir"]], "load_dataset() (audiodatasetmixin method)": [[114, "mltk.core.AudioDatasetMixin.load_dataset"]], "loaded_subset (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.loaded_subset"]], "sample_length_ms (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.sample_length_ms"]], "sample_rate_hz (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.sample_rate_hz"]], "sample_weight (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.sample_weight"]], "shuffle (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.shuffle"]], "shuffle_dataset_enabled (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.shuffle_dataset_enabled"]], "steps_per_epoch (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.steps_per_epoch"]], "summarize_dataset() (audiodatasetmixin method)": [[114, "mltk.core.AudioDatasetMixin.summarize_dataset"]], "unload_dataset() (audiodatasetmixin method)": [[114, "mltk.core.AudioDatasetMixin.unload_dataset"]], "validation_batch_size (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.validation_batch_size"]], "validation_data (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.validation_data"]], "validation_datagen (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.validation_datagen"]], "validation_freq (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.validation_freq"]], "validation_split (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.validation_split"]], "validation_steps (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.validation_steps"]], "x (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.x"]], "y (audiodatasetmixin property)": [[114, "mltk.core.AudioDatasetMixin.y"]], "datasetmixin (class in mltk.core)": [[115, "mltk.core.DatasetMixin"]], "class_counts (datasetmixin property)": [[115, "mltk.core.DatasetMixin.class_counts"]], "class_weights (datasetmixin property)": [[115, "mltk.core.DatasetMixin.class_weights"]], "dataset (datasetmixin property)": [[115, "mltk.core.DatasetMixin.dataset"]], "load_dataset() (datasetmixin method)": [[115, "mltk.core.DatasetMixin.load_dataset"]], "loaded_subset (datasetmixin property)": [[115, "mltk.core.DatasetMixin.loaded_subset"]], "sample_weight (datasetmixin property)": [[115, "mltk.core.DatasetMixin.sample_weight"]], "shuffle (datasetmixin property)": [[115, "mltk.core.DatasetMixin.shuffle"]], "steps_per_epoch (datasetmixin property)": [[115, "mltk.core.DatasetMixin.steps_per_epoch"]], "summarize_dataset() (datasetmixin method)": [[115, "mltk.core.DatasetMixin.summarize_dataset"]], "unload_dataset() (datasetmixin method)": [[115, "mltk.core.DatasetMixin.unload_dataset"]], "validation_batch_size (datasetmixin property)": [[115, "mltk.core.DatasetMixin.validation_batch_size"]], "validation_data (datasetmixin property)": [[115, "mltk.core.DatasetMixin.validation_data"]], "validation_freq (datasetmixin property)": [[115, "mltk.core.DatasetMixin.validation_freq"]], "validation_split (datasetmixin property)": [[115, "mltk.core.DatasetMixin.validation_split"]], "validation_steps (datasetmixin property)": [[115, "mltk.core.DatasetMixin.validation_steps"]], "x (datasetmixin property)": [[115, "mltk.core.DatasetMixin.x"]], "y (datasetmixin property)": [[115, "mltk.core.DatasetMixin.y"]], "evaluateautoencodermixin (class in mltk.core)": [[116, "mltk.core.EvaluateAutoEncoderMixin"]], "eval_augment (evaluateautoencodermixin property)": [[116, "mltk.core.EvaluateAutoEncoderMixin.eval_augment"]], "eval_classes (evaluateautoencodermixin property)": [[116, "mltk.core.EvaluateAutoEncoderMixin.eval_classes"]], "eval_custom_function (evaluateautoencodermixin property)": [[116, "mltk.core.EvaluateAutoEncoderMixin.eval_custom_function"]], "eval_max_samples_per_class (evaluateautoencodermixin property)": [[116, "mltk.core.EvaluateAutoEncoderMixin.eval_max_samples_per_class"]], "eval_shuffle (evaluateautoencodermixin property)": [[116, "mltk.core.EvaluateAutoEncoderMixin.eval_shuffle"]], "eval_steps_per_epoch (evaluateautoencodermixin property)": [[116, "mltk.core.EvaluateAutoEncoderMixin.eval_steps_per_epoch"]], "get_scoring_function() (evaluateautoencodermixin method)": [[116, "mltk.core.EvaluateAutoEncoderMixin.get_scoring_function"]], "scoring_function (evaluateautoencodermixin property)": [[116, "mltk.core.EvaluateAutoEncoderMixin.scoring_function"]], "evaluateclassifiermixin (class in mltk.core)": [[117, "mltk.core.EvaluateClassifierMixin"]], "eval_augment (evaluateclassifiermixin property)": [[117, "mltk.core.EvaluateClassifierMixin.eval_augment"]], "eval_custom_function (evaluateclassifiermixin property)": [[117, "mltk.core.EvaluateClassifierMixin.eval_custom_function"]], "eval_max_samples_per_class (evaluateclassifiermixin property)": [[117, "mltk.core.EvaluateClassifierMixin.eval_max_samples_per_class"]], "eval_shuffle (evaluateclassifiermixin property)": [[117, "mltk.core.EvaluateClassifierMixin.eval_shuffle"]], "eval_steps_per_epoch (evaluateclassifiermixin property)": [[117, "mltk.core.EvaluateClassifierMixin.eval_steps_per_epoch"]], "evaluatemixin (class in mltk.core)": [[118, "mltk.core.EvaluateMixin"]], "eval_custom_function (evaluatemixin property)": [[118, "mltk.core.EvaluateMixin.eval_custom_function"]], "eval_steps_per_epoch (evaluatemixin property)": [[118, "mltk.core.EvaluateMixin.eval_steps_per_epoch"]], "imagedatasetmixin (class in mltk.core)": [[119, "mltk.core.ImageDatasetMixin"]], "class_counts (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.class_counts"]], "class_mode (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.class_mode"]], "class_weights (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.class_weights"]], "color_mode (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.color_mode"]], "datagen (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.datagen"]], "datagen_context (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.datagen_context"]], "dataset (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.dataset"]], "follow_links (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.follow_links"]], "get_datagen_creator() (imagedatasetmixin method)": [[119, "mltk.core.ImageDatasetMixin.get_datagen_creator"]], "get_shuffle_index_dir() (imagedatasetmixin method)": [[119, "mltk.core.ImageDatasetMixin.get_shuffle_index_dir"]], "image_classes (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.image_classes"]], "image_input_shape (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.image_input_shape"]], "interpolation (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.interpolation"]], "load_dataset() (imagedatasetmixin method)": [[119, "mltk.core.ImageDatasetMixin.load_dataset"]], "loaded_subset (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.loaded_subset"]], "sample_weight (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.sample_weight"]], "shuffle (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.shuffle"]], "shuffle_dataset_enabled (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.shuffle_dataset_enabled"]], "steps_per_epoch (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.steps_per_epoch"]], "summarize_dataset() (imagedatasetmixin method)": [[119, "mltk.core.ImageDatasetMixin.summarize_dataset"]], "target_size (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.target_size"]], "unload_dataset() (imagedatasetmixin method)": [[119, "mltk.core.ImageDatasetMixin.unload_dataset"]], "validation_batch_size (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.validation_batch_size"]], "validation_data (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.validation_data"]], "validation_datagen (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.validation_datagen"]], "validation_freq (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.validation_freq"]], "validation_split (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.validation_split"]], "validation_steps (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.validation_steps"]], "x (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.x"]], "y (imagedatasetmixin property)": [[119, "mltk.core.ImageDatasetMixin.y"]], "mltkdataset (class in mltk.core)": [[121, "mltk.core.MltkDataset"]], "load_dataset() (mltkdataset method)": [[121, "mltk.core.MltkDataset.load_dataset"]], "summarize_class_counts() (mltkdataset static method)": [[121, "mltk.core.MltkDataset.summarize_class_counts"]], "summarize_dataset() (mltkdataset method)": [[121, "mltk.core.MltkDataset.summarize_dataset"]], "unload_dataset() (mltkdataset method)": [[121, "mltk.core.MltkDataset.unload_dataset"]], "mltkmodel (class in mltk.core)": [[122, "mltk.core.MltkModel"]], "__init__() (mltkmodel method)": [[122, "mltk.core.MltkModel.__init__"]], "add_archive_dir() (mltkmodel method)": [[122, "mltk.core.MltkModel.add_archive_dir"]], "add_archive_file() (mltkmodel method)": [[122, "mltk.core.MltkModel.add_archive_file"]], "add_event_handler() (mltkmodel method)": [[122, "mltk.core.MltkModel.add_event_handler"]], "add_model_parameter_populate_callback() (mltkmodel method)": [[122, "mltk.core.MltkModel.add_model_parameter_populate_callback"]], "add_tflite_metadata_entry() (mltkmodel method)": [[122, "mltk.core.MltkModel.add_tflite_metadata_entry"]], "archive_path (mltkmodel property)": [[122, "mltk.core.MltkModel.archive_path"]], "attributes (mltkmodel property)": [[122, "mltk.core.MltkModel.attributes"]], "check_archive_file_is_writable() (mltkmodel method)": [[122, "mltk.core.MltkModel.check_archive_file_is_writable"]], "classes (mltkmodel property)": [[122, "mltk.core.MltkModel.classes"]], "cli (mltkmodel property)": [[122, "mltk.core.MltkModel.cli"]], "create_log_dir() (mltkmodel method)": [[122, "mltk.core.MltkModel.create_log_dir"]], "create_logger() (mltkmodel method)": [[122, "mltk.core.MltkModel.create_logger"]], "description (mltkmodel property)": [[122, "mltk.core.MltkModel.description"]], "deserialize_tflite_metadata() (mltkmodel method)": [[122, "mltk.core.MltkModel.deserialize_tflite_metadata"]], "enable_test_mode() (mltkmodel method)": [[122, "mltk.core.MltkModel.enable_test_mode"]], "get_archive_dir() (mltkmodel method)": [[122, "mltk.core.MltkModel.get_archive_dir"]], "get_archive_file() (mltkmodel method)": [[122, "mltk.core.MltkModel.get_archive_file"]], "get_attribute() (mltkmodel method)": [[122, "mltk.core.MltkModel.get_attribute"]], "get_tflite_metadata_summary() (mltkmodel method)": [[122, "mltk.core.MltkModel.get_tflite_metadata_summary"]], "h5_archive_path (mltkmodel property)": [[122, "mltk.core.MltkModel.h5_archive_path"]], "h5_log_dir_path (mltkmodel property)": [[122, "mltk.core.MltkModel.h5_log_dir_path"]], "input_shape (mltkmodel property)": [[122, "mltk.core.MltkModel.input_shape"]], "keras_custom_objects (mltkmodel property)": [[122, "mltk.core.MltkModel.keras_custom_objects"]], "log_dir (mltkmodel property)": [[122, "mltk.core.MltkModel.log_dir"]], "model_parameters (mltkmodel property)": [[122, "mltk.core.MltkModel.model_parameters"]], "model_specification_path (mltkmodel property)": [[122, "mltk.core.MltkModel.model_specification_path"]], "n_classes (mltkmodel property)": [[122, "mltk.core.MltkModel.n_classes"]], "name (mltkmodel property)": [[122, "mltk.core.MltkModel.name"]], "populate_model_parameters() (mltkmodel method)": [[122, "mltk.core.MltkModel.populate_model_parameters"]], "serialize_tflite_metadata() (mltkmodel method)": [[122, "mltk.core.MltkModel.serialize_tflite_metadata"]], "set_model_parameter() (mltkmodel method)": [[122, "mltk.core.MltkModel.set_model_parameter"]], "summary() (mltkmodel method)": [[122, "mltk.core.MltkModel.summary"]], "test_mode_enabled (mltkmodel property)": [[122, "mltk.core.MltkModel.test_mode_enabled"]], "tflite_archive_path (mltkmodel property)": [[122, "mltk.core.MltkModel.tflite_archive_path"]], "tflite_log_dir_path (mltkmodel property)": [[122, "mltk.core.MltkModel.tflite_log_dir_path"]], "tflite_metadata_entries (mltkmodel property)": [[122, "mltk.core.MltkModel.tflite_metadata_entries"]], "trigger_event() (mltkmodel method)": [[122, "mltk.core.MltkModel.trigger_event"]], "unquantized_tflite_log_dir_path (mltkmodel property)": [[122, "mltk.core.MltkModel.unquantized_tflite_log_dir_path"]], "version (mltkmodel property)": [[122, "mltk.core.MltkModel.version"]], "after_build_train_model (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.AFTER_BUILD_TRAIN_MODEL"]], "after_load_dataset (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.AFTER_LOAD_DATASET"]], "after_model_load (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.AFTER_MODEL_LOAD"]], "after_profile (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.AFTER_PROFILE"]], "after_quantize (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.AFTER_QUANTIZE"]], "after_save_train_archive (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.AFTER_SAVE_TRAIN_ARCHIVE"]], "after_save_train_model (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.AFTER_SAVE_TRAIN_MODEL"]], "after_save_train_results (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.AFTER_SAVE_TRAIN_RESULTS"]], "after_train (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.AFTER_TRAIN"]], "after_unload_dataset (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.AFTER_UNLOAD_DATASET"]], "before_build_train_model (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.BEFORE_BUILD_TRAIN_MODEL"]], "before_load_dataset (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.BEFORE_LOAD_DATASET"]], "before_model_load (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.BEFORE_MODEL_LOAD"]], "before_quantize (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.BEFORE_QUANTIZE"]], "before_save_train_archive (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.BEFORE_SAVE_TRAIN_ARCHIVE"]], "before_save_train_model (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.BEFORE_SAVE_TRAIN_MODEL"]], "before_save_train_results (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.BEFORE_SAVE_TRAIN_RESULTS"]], "before_train (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.BEFORE_TRAIN"]], "before_unload_dataset (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.BEFORE_UNLOAD_DATASET"]], "evaluate_shutdown (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.EVALUATE_SHUTDOWN"]], "evaluate_startup (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.EVALUATE_STARTUP"]], "generate_evaluate_plot (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.GENERATE_EVALUATE_PLOT"]], "mltkmodelevent (class in mltk.core)": [[123, "mltk.core.MltkModelEvent"]], "populate_train_callbacks (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.POPULATE_TRAIN_CALLBACKS"]], "quantize_shutdown (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.QUANTIZE_SHUTDOWN"]], "quantize_startup (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.QUANTIZE_STARTUP"]], "summarize_dataset (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.SUMMARIZE_DATASET"]], "summarize_model (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.SUMMARIZE_MODEL"]], "train_shutdown (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.TRAIN_SHUTDOWN"]], "train_startup (mltkmodelevent attribute)": [[123, "mltk.core.MltkModelEvent.TRAIN_STARTUP"]], "__init__() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.__init__"]], "__new__() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.__new__"]], "capitalize() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.capitalize"]], "casefold() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.casefold"]], "center() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.center"]], "count() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.count"]], "encode() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.encode"]], "endswith() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.endswith"]], "expandtabs() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.expandtabs"]], "find() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.find"]], "format() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.format"]], "format_map() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.format_map"]], "index() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.index"]], "isalnum() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.isalnum"]], "isalpha() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.isalpha"]], "isascii() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.isascii"]], "isdecimal() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.isdecimal"]], "isdigit() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.isdigit"]], "isidentifier() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.isidentifier"]], "islower() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.islower"]], "isnumeric() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.isnumeric"]], "isprintable() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.isprintable"]], "isspace() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.isspace"]], "istitle() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.istitle"]], "isupper() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.isupper"]], "join() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.join"]], "ljust() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.ljust"]], "lower() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.lower"]], "lstrip() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.lstrip"]], "maketrans() (mltkmodelevent static method)": [[123, "mltk.core.MltkModelEvent.maketrans"]], "partition() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.partition"]], "removeprefix() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.removeprefix"]], "removesuffix() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.removesuffix"]], "replace() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.replace"]], "rfind() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.rfind"]], "rindex() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.rindex"]], "rjust() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.rjust"]], "rpartition() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.rpartition"]], "rsplit() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.rsplit"]], "rstrip() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.rstrip"]], "split() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.split"]], "splitlines() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.splitlines"]], "startswith() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.startswith"]], "strip() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.strip"]], "swapcase() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.swapcase"]], "title() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.title"]], "translate() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.translate"]], "upper() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.upper"]], "zfill() (mltkmodelevent method)": [[123, "mltk.core.MltkModelEvent.zfill"]], "sshmixin (class in mltk.core)": [[124, "mltk.core.SshMixin"]], "ssh_create_venv (sshmixin property)": [[124, "mltk.core.SshMixin.ssh_create_venv"]], "ssh_download_files (sshmixin property)": [[124, "mltk.core.SshMixin.ssh_download_files"]], "ssh_environment (sshmixin property)": [[124, "mltk.core.SshMixin.ssh_environment"]], "ssh_remote_dir (sshmixin property)": [[124, "mltk.core.SshMixin.ssh_remote_dir"]], "ssh_shutdown_cmds (sshmixin property)": [[124, "mltk.core.SshMixin.ssh_shutdown_cmds"]], "ssh_startup_cmds (sshmixin property)": [[124, "mltk.core.SshMixin.ssh_startup_cmds"]], "ssh_upload_files (sshmixin property)": [[124, "mltk.core.SshMixin.ssh_upload_files"]], "trainmixin (class in mltk.core)": [[125, "mltk.core.TrainMixin"]], "batch_size (trainmixin property)": [[125, "mltk.core.TrainMixin.batch_size"]], "build_model_function (trainmixin property)": [[125, "mltk.core.TrainMixin.build_model_function"]], "checkpoint (trainmixin property)": [[125, "mltk.core.TrainMixin.checkpoint"]], "checkpoints_dir (trainmixin property)": [[125, "mltk.core.TrainMixin.checkpoints_dir"]], "checkpoints_enabled (trainmixin property)": [[125, "mltk.core.TrainMixin.checkpoints_enabled"]], "early_stopping (trainmixin property)": [[125, "mltk.core.TrainMixin.early_stopping"]], "epochs (trainmixin property)": [[125, "mltk.core.TrainMixin.epochs"]], "get_checkpoint_path() (trainmixin method)": [[125, "mltk.core.TrainMixin.get_checkpoint_path"]], "get_weights_path() (trainmixin method)": [[125, "mltk.core.TrainMixin.get_weights_path"]], "loss (trainmixin property)": [[125, "mltk.core.TrainMixin.loss"]], "lr_schedule (trainmixin property)": [[125, "mltk.core.TrainMixin.lr_schedule"]], "metrics (trainmixin property)": [[125, "mltk.core.TrainMixin.metrics"]], "on_save_keras_model (trainmixin property)": [[125, "mltk.core.TrainMixin.on_save_keras_model"]], "on_training_complete (trainmixin property)": [[125, "mltk.core.TrainMixin.on_training_complete"]], "optimizer (trainmixin property)": [[125, "mltk.core.TrainMixin.optimizer"]], "reduce_lr_on_plateau (trainmixin property)": [[125, "mltk.core.TrainMixin.reduce_lr_on_plateau"]], "tensorboard (trainmixin property)": [[125, "mltk.core.TrainMixin.tensorboard"]], "tflite_converter (trainmixin property)": [[125, "mltk.core.TrainMixin.tflite_converter"]], "train_callbacks (trainmixin property)": [[125, "mltk.core.TrainMixin.train_callbacks"]], "train_kwargs (trainmixin property)": [[125, "mltk.core.TrainMixin.train_kwargs"]], "weights_dir (trainmixin property)": [[125, "mltk.core.TrainMixin.weights_dir"]], "weights_file_format (trainmixin property)": [[125, "mltk.core.TrainMixin.weights_file_format"]], "list_mltk_models() (in module mltk.core)": [[126, "mltk.core.list_mltk_models"]], "load_mltk_model() (in module mltk.core)": [[126, "mltk.core.load_mltk_model"]], "load_mltk_model_with_path() (in module mltk.core)": [[126, "mltk.core.load_mltk_model_with_path"]], "load_tflite_model() (in module mltk.core)": [[126, "mltk.core.load_tflite_model"]], "load_tflite_or_keras_model() (in module mltk.core)": [[126, "mltk.core.load_tflite_or_keras_model"]], "weightsandbiasesmixin (class in mltk.core)": [[127, "mltk.core.WeightsAndBiasesMixin"]], "wandb_callback (weightsandbiasesmixin property)": [[127, "mltk.core.WeightsAndBiasesMixin.wandb_callback"]], "wandb_config (weightsandbiasesmixin property)": [[127, "mltk.core.WeightsAndBiasesMixin.wandb_config"]], "wandb_init_kwargs (weightsandbiasesmixin property)": [[127, "mltk.core.WeightsAndBiasesMixin.wandb_init_kwargs"]], "wandb_is_disabled (weightsandbiasesmixin property)": [[127, "mltk.core.WeightsAndBiasesMixin.wandb_is_disabled"]], "wandb_is_initialized (weightsandbiasesmixin property)": [[127, "mltk.core.WeightsAndBiasesMixin.wandb_is_initialized"]], "wandb_log() (weightsandbiasesmixin method)": [[127, "mltk.core.WeightsAndBiasesMixin.wandb_log"]], "wandb_model_checkpoint_callback (weightsandbiasesmixin property)": [[127, "mltk.core.WeightsAndBiasesMixin.wandb_model_checkpoint_callback"]], "wandb_save() (weightsandbiasesmixin method)": [[127, "mltk.core.WeightsAndBiasesMixin.wandb_save"]], "wandb_session_id (weightsandbiasesmixin property)": [[127, "mltk.core.WeightsAndBiasesMixin.wandb_session_id"]], "depthwiseseparableconv2d_arm() (in module mltk.models.shared.dsconv_arm)": [[128, "mltk.models.shared.dsconv_arm.DepthwiseSeparableConv2D_ARM"]], "fullyconnectedautoencoder() (in module mltk.models.shared.fully_connected_autoencoder)": [[128, "mltk.models.shared.fully_connected_autoencoder.FullyConnectedAutoEncoder"]], "mobilenetv1() (in module mltk.models.shared.mobilenet_v1)": [[128, "mltk.models.shared.mobilenet_v1.MobileNetV1"]], "mobilenetv2() (in module mltk.models.shared.mobilenet_v2)": [[128, "mltk.models.shared.mobilenet_v2.MobileNetV2"]], "resnet10v1() (in module mltk.models.shared.resnet_v1)": [[128, "mltk.models.shared.resnet_v1.ResNet10V1"]], "tenet() (in module mltk.models.shared.tenet)": [[128, "mltk.models.shared.tenet.TENet"]], "mltk.models.examples.audio_example1": [[129, "module-mltk.models.examples.audio_example1"]], "mltk.models.examples.audio_tf_dataset": [[130, "module-mltk.models.examples.audio_tf_dataset"]], "mltk.models.examples.autoencoder_example": [[131, "module-mltk.models.examples.autoencoder_example"]], "mltk.models.examples.basic_example": [[132, "module-mltk.models.examples.basic_example"]], "mltk.models.examples.basic_tf_dataset_example": [[133, "module-mltk.models.examples.basic_tf_dataset_example"]], "mltk.models.examples.binary_classification": [[134, "module-mltk.models.examples.binary_classification"]], "mltk.models.examples.conv1d_example": [[135, "module-mltk.models.examples.conv1d_example"]], "mltk.models.examples.image_example1": [[136, "module-mltk.models.examples.image_example1"]], "mltk.models.examples.image_tf_dataset": [[137, "module-mltk.models.examples.image_tf_dataset"]], "mltk.models.examples.siamese_contrastive": [[139, "module-mltk.models.examples.siamese_contrastive"]], "mltk.models.siliconlabs.fingerprint_signature_generator": [[141, "module-mltk.models.siliconlabs.fingerprint_signature_generator"]], "mltk.models.siliconlabs.keyword_spotting_alexa": [[143, "module-mltk.models.siliconlabs.keyword_spotting_alexa"]], "mltk.models.siliconlabs.keyword_spotting_mobilenetv2": [[144, "module-mltk.models.siliconlabs.keyword_spotting_mobilenetv2"]], "mltk.models.siliconlabs.keyword_spotting_numbers": [[145, "module-mltk.models.siliconlabs.keyword_spotting_numbers"]], "mltk.models.siliconlabs.keyword_spotting_on_off": [[146, "module-mltk.models.siliconlabs.keyword_spotting_on_off"]], "mltk.models.siliconlabs.keyword_spotting_on_off_v2": [[147, "module-mltk.models.siliconlabs.keyword_spotting_on_off_v2"]], "mltk.models.siliconlabs.keyword_spotting_on_off_v3": [[148, "module-mltk.models.siliconlabs.keyword_spotting_on_off_v3"]], "mltk.models.siliconlabs.keyword_spotting_pacman": [[149, "module-mltk.models.siliconlabs.keyword_spotting_pacman"]], "mltk.models.siliconlabs.keyword_spotting_pacman_v2": [[150, "module-mltk.models.siliconlabs.keyword_spotting_pacman_v2"]], "mltk.models.siliconlabs.keyword_spotting_pacman_v3": [[151, "module-mltk.models.siliconlabs.keyword_spotting_pacman_v3"]], "mltk.models.siliconlabs.keyword_spotting_with_transfer_learning": [[152, "module-mltk.models.siliconlabs.keyword_spotting_with_transfer_learning"]], "mltk.models.siliconlabs.rock_paper_scissors": [[153, "module-mltk.models.siliconlabs.rock_paper_scissors"]], "mltk.models.tflite_micro.tflite_micro_magic_wand": [[155, "module-mltk.models.tflite_micro.tflite_micro_magic_wand"]], "mltk.models.tflite_micro.tflite_micro_speech": [[156, "module-mltk.models.tflite_micro.tflite_micro_speech"]], "mltk.models.tinyml.anomaly_detection": [[157, "module-mltk.models.tinyml.anomaly_detection"]], "mltk.models.tinyml.image_classification": [[158, "module-mltk.models.tinyml.image_classification"]], "mltk.models.tinyml.keyword_spotting": [[160, "module-mltk.models.tinyml.keyword_spotting"]], "mltk.models.tinyml.visual_wake_words": [[161, "module-mltk.models.tinyml.visual_wake_words"]], "autoencoderevaluationresults (class in mltk.core)": [[162, "mltk.core.AutoEncoderEvaluationResults"]], "classifierevaluationresults (class in mltk.core)": [[162, "mltk.core.ClassifierEvaluationResults"]], "evaluationresults (class in mltk.core)": [[162, "mltk.core.EvaluationResults"]], "__init__() (autoencoderevaluationresults method)": [[162, "mltk.core.AutoEncoderEvaluationResults.__init__"]], "__init__() (classifierevaluationresults method)": [[162, "mltk.core.ClassifierEvaluationResults.__init__"]], "__init__() (evaluationresults method)": [[162, "mltk.core.EvaluationResults.__init__"]], "calculate() (autoencoderevaluationresults method)": [[162, "mltk.core.AutoEncoderEvaluationResults.calculate"]], "calculate() (classifierevaluationresults method)": [[162, "mltk.core.ClassifierEvaluationResults.calculate"]], "class_accuracies (classifierevaluationresults property)": [[162, "mltk.core.ClassifierEvaluationResults.class_accuracies"]], "class_stats (autoencoderevaluationresults property)": [[162, "mltk.core.AutoEncoderEvaluationResults.class_stats"]], "classes (autoencoderevaluationresults property)": [[162, "mltk.core.AutoEncoderEvaluationResults.classes"]], "classes (classifierevaluationresults property)": [[162, "mltk.core.ClassifierEvaluationResults.classes"]], "confusion_matrix (classifierevaluationresults property)": [[162, "mltk.core.ClassifierEvaluationResults.confusion_matrix"]], "evaluate_autoencoder() (in module mltk.core)": [[162, "mltk.core.evaluate_autoencoder"]], "evaluate_classifier() (in module mltk.core)": [[162, "mltk.core.evaluate_classifier"]], "evaluate_model() (in module mltk.core)": [[162, "mltk.core.evaluate_model"]], "false_positive_rate (classifierevaluationresults property)": [[162, "mltk.core.ClassifierEvaluationResults.false_positive_rate"]], "fpr (classifierevaluationresults property)": [[162, "mltk.core.ClassifierEvaluationResults.fpr"]], "generate_plots() (autoencoderevaluationresults method)": [[162, "mltk.core.AutoEncoderEvaluationResults.generate_plots"]], "generate_plots() (classifierevaluationresults method)": [[162, "mltk.core.ClassifierEvaluationResults.generate_plots"]], "generate_plots() (evaluationresults method)": [[162, "mltk.core.EvaluationResults.generate_plots"]], "generate_summary() (autoencoderevaluationresults method)": [[162, "mltk.core.AutoEncoderEvaluationResults.generate_summary"]], "generate_summary() (classifierevaluationresults method)": [[162, "mltk.core.ClassifierEvaluationResults.generate_summary"]], "generate_summary() (evaluationresults method)": [[162, "mltk.core.EvaluationResults.generate_summary"]], "model_type (evaluationresults property)": [[162, "mltk.core.EvaluationResults.model_type"]], "name (evaluationresults property)": [[162, "mltk.core.EvaluationResults.name"]], "overall_accuracy (autoencoderevaluationresults property)": [[162, "mltk.core.AutoEncoderEvaluationResults.overall_accuracy"]], "overall_accuracy (classifierevaluationresults property)": [[162, "mltk.core.ClassifierEvaluationResults.overall_accuracy"]], "overall_fpr (autoencoderevaluationresults property)": [[162, "mltk.core.AutoEncoderEvaluationResults.overall_fpr"]], "overall_pr_accuracy (autoencoderevaluationresults property)": [[162, "mltk.core.AutoEncoderEvaluationResults.overall_pr_accuracy"]], "overall_precision (autoencoderevaluationresults property)": [[162, "mltk.core.AutoEncoderEvaluationResults.overall_precision"]], "overall_recall (autoencoderevaluationresults property)": [[162, "mltk.core.AutoEncoderEvaluationResults.overall_recall"]], "overall_roc_auc (autoencoderevaluationresults property)": [[162, "mltk.core.AutoEncoderEvaluationResults.overall_roc_auc"]], "overall_thresholds (autoencoderevaluationresults property)": [[162, "mltk.core.AutoEncoderEvaluationResults.overall_thresholds"]], "overall_tpr (autoencoderevaluationresults property)": [[162, "mltk.core.AutoEncoderEvaluationResults.overall_tpr"]], "precision (classifierevaluationresults property)": [[162, "mltk.core.ClassifierEvaluationResults.precision"]], "recall (classifierevaluationresults property)": [[162, "mltk.core.ClassifierEvaluationResults.recall"]], "roc_auc (classifierevaluationresults property)": [[162, "mltk.core.ClassifierEvaluationResults.roc_auc"]], "roc_auc_avg (classifierevaluationresults property)": [[162, "mltk.core.ClassifierEvaluationResults.roc_auc_avg"]], "roc_thresholds (classifierevaluationresults property)": [[162, "mltk.core.ClassifierEvaluationResults.roc_thresholds"]], "tpr (classifierevaluationresults property)": [[162, "mltk.core.ClassifierEvaluationResults.tpr"]], "profilinglayerresult (class in mltk.core.profiling_results)": [[164, "mltk.core.profiling_results.ProfilingLayerResult"]], "profilingmodelresults (class in mltk.core.profiling_results)": [[164, "mltk.core.profiling_results.ProfilingModelResults"]], "__init__() (profilinglayerresult method)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.__init__"]], "__init__() (profilingmodelresults method)": [[164, "mltk.core.profiling_results.ProfilingModelResults.__init__"]], "accelerator (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.accelerator"]], "accelerator_cycles (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.accelerator_cycles"]], "accelerator_cycles (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.accelerator_cycles"]], "cpu_clock_rate (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.cpu_clock_rate"]], "cpu_cycles (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.cpu_cycles"]], "cpu_cycles (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.cpu_cycles"]], "cpu_utilization (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.cpu_utilization"]], "energy (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.energy"]], "energy (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.energy"]], "error_msg (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.error_msg"]], "flatbuffer_size (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.flatbuffer_size"]], "generate_report() (profilingmodelresults method)": [[164, "mltk.core.profiling_results.ProfilingModelResults.generate_report"]], "get_summary() (profilinglayerresult method)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.get_summary"]], "get_summary() (profilingmodelresults method)": [[164, "mltk.core.profiling_results.ProfilingModelResults.get_summary"]], "index (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.index"]], "input_dtype_str (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.input_dtype_str"]], "input_dtype_str (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.input_dtype_str"]], "input_shape_str (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.input_shape_str"]], "input_shape_str (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.input_shape_str"]], "is_accelerated (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.is_accelerated"]], "is_simulated (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.is_simulated"]], "is_unsupported (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.is_unsupported"]], "layers (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.layers"]], "macs (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.macs"]], "macs (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.macs"]], "n_layers (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.n_layers"]], "n_unsupported_layers (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.n_unsupported_layers"]], "name (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.name"]], "name (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.name"]], "opcode (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.opcode"]], "opcode_str (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.opcode_str"]], "ops (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.ops"]], "ops (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.ops"]], "options_str (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.options_str"]], "output_dtype_str (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.output_dtype_str"]], "output_dtype_str (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.output_dtype_str"]], "output_shape_str (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.output_shape_str"]], "output_shape_str (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.output_shape_str"]], "platform (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.platform"]], "profile_model() (in module mltk.core)": [[164, "mltk.core.profile_model"]], "runtime_memory_bytes (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.runtime_memory_bytes"]], "stat_total() (profilingmodelresults method)": [[164, "mltk.core.profiling_results.ProfilingModelResults.stat_total"]], "tflite_layer (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.tflite_layer"]], "tflite_micro_model_details (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.tflite_micro_model_details"]], "tflite_model (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.tflite_model"]], "time (profilinglayerresult property)": [[164, "mltk.core.profiling_results.ProfilingLayerResult.time"]], "time (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.time"]], "to_csv() (profilingmodelresults method)": [[164, "mltk.core.profiling_results.ProfilingModelResults.to_csv"]], "to_dict() (profilingmodelresults method)": [[164, "mltk.core.profiling_results.ProfilingModelResults.to_dict"]], "to_json() (profilingmodelresults method)": [[164, "mltk.core.profiling_results.ProfilingModelResults.to_json"]], "to_string() (profilingmodelresults method)": [[164, "mltk.core.profiling_results.ProfilingModelResults.to_string"]], "unsupported_layers (profilingmodelresults property)": [[164, "mltk.core.profiling_results.ProfilingModelResults.unsupported_layers"]], "quantize_model() (in module mltk.core)": [[165, "mltk.core.quantize_model"]], "summarize_model() (in module mltk.core)": [[166, "mltk.core.summarize_model"]], "trainingresults (class in mltk.core.train_model)": [[167, "mltk.core.train_model.TrainingResults"]], "__init__() (trainingresults method)": [[167, "mltk.core.train_model.TrainingResults.__init__"]], "asdict() (trainingresults method)": [[167, "mltk.core.train_model.TrainingResults.asdict"]], "epochs (trainingresults attribute)": [[167, "mltk.core.train_model.TrainingResults.epochs"]], "get_best_metric() (trainingresults method)": [[167, "mltk.core.train_model.TrainingResults.get_best_metric"]], "history (trainingresults attribute)": [[167, "mltk.core.train_model.TrainingResults.history"]], "keras_model (trainingresults attribute)": [[167, "mltk.core.train_model.TrainingResults.keras_model"]], "mltk_model (trainingresults attribute)": [[167, "mltk.core.train_model.TrainingResults.mltk_model"]], "model_archive_path (trainingresults property)": [[167, "mltk.core.train_model.TrainingResults.model_archive_path"]], "params (trainingresults attribute)": [[167, "mltk.core.train_model.TrainingResults.params"]], "train_model() (in module mltk.core)": [[167, "mltk.core.train_model"]], "update_model_parameters() (in module mltk.core)": [[168, "mltk.core.update_model_parameters"]], "view_model() (in module mltk.core)": [[169, "mltk.core.view_model"]], "tflitemicroaccelerator (class in mltk.core.tflite_micro.tflite_micro_accelerator)": [[170, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator"]], "__init__() (tflitemicroaccelerator method)": [[170, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.__init__"]], "accelerator_wrapper (tflitemicroaccelerator property)": [[170, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.accelerator_wrapper"]], "active_variant (tflitemicroaccelerator property)": [[170, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.active_variant"]], "api_version (tflitemicroaccelerator property)": [[170, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.api_version"]], "compile_model() (tflitemicroaccelerator method)": [[170, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.compile_model"]], "enable_data_recorder() (tflitemicroaccelerator method)": [[170, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.enable_data_recorder"]], "estimate_profiling_results() (tflitemicroaccelerator method)": [[170, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.estimate_profiling_results"]], "git_hash (tflitemicroaccelerator property)": [[170, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.git_hash"]], "name (tflitemicroaccelerator property)": [[170, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.name"]], "set_program_recorder_enabled() (tflitemicroaccelerator method)": [[170, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.set_program_recorder_enabled"]], "supports_model_compilation (tflitemicroaccelerator property)": [[170, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.supports_model_compilation"]], "variants (tflitemicroaccelerator property)": [[170, "mltk.core.tflite_micro.tflite_micro_accelerator.TfliteMicroAccelerator.variants"]], "tflitemicrolayererror (class in mltk.core.tflite_micro)": [[172, "mltk.core.tflite_micro.TfliteMicroLayerError"]], "__init__() (tflitemicrolayererror method)": [[172, "mltk.core.tflite_micro.TfliteMicroLayerError.__init__"]], "index (tflitemicrolayererror attribute)": [[172, "mltk.core.tflite_micro.TfliteMicroLayerError.index"]], "msg (tflitemicrolayererror attribute)": [[172, "mltk.core.tflite_micro.TfliteMicroLayerError.msg"]], "name (tflitemicrolayererror attribute)": [[172, "mltk.core.tflite_micro.TfliteMicroLayerError.name"]], "tflitemicromodel (class in mltk.core.tflite_micro)": [[173, "mltk.core.tflite_micro.TfliteMicroModel"]], "__init__() (tflitemicromodel method)": [[173, "mltk.core.tflite_micro.TfliteMicroModel.__init__"]], "accelerator (tflitemicromodel property)": [[173, "mltk.core.tflite_micro.TfliteMicroModel.accelerator"]], "details (tflitemicromodel property)": [[173, "mltk.core.tflite_micro.TfliteMicroModel.details"]], "get_layer_error() (tflitemicromodel method)": [[173, "mltk.core.tflite_micro.TfliteMicroModel.get_layer_error"]], "get_profiling_results() (tflitemicromodel method)": [[173, "mltk.core.tflite_micro.TfliteMicroModel.get_profiling_results"]], "get_recorded_data() (tflitemicromodel method)": [[173, "mltk.core.tflite_micro.TfliteMicroModel.get_recorded_data"]], "input() (tflitemicromodel method)": [[173, "mltk.core.tflite_micro.TfliteMicroModel.input"]], "input_size (tflitemicromodel property)": [[173, "mltk.core.tflite_micro.TfliteMicroModel.input_size"]], "invoke() (tflitemicromodel method)": [[173, "mltk.core.tflite_micro.TfliteMicroModel.invoke"]], "is_profiler_enabled (tflitemicromodel property)": [[173, "mltk.core.tflite_micro.TfliteMicroModel.is_profiler_enabled"]], "is_recorder_enabled (tflitemicromodel property)": [[173, "mltk.core.tflite_micro.TfliteMicroModel.is_recorder_enabled"]], "is_tensor_recorder_enabled (tflitemicromodel property)": [[173, "mltk.core.tflite_micro.TfliteMicroModel.is_tensor_recorder_enabled"]], "layer_errors (tflitemicromodel property)": [[173, "mltk.core.tflite_micro.TfliteMicroModel.layer_errors"]], "output() (tflitemicromodel method)": [[173, "mltk.core.tflite_micro.TfliteMicroModel.output"]], "output_size (tflitemicromodel property)": [[173, "mltk.core.tflite_micro.TfliteMicroModel.output_size"]], "tflitemicromodeldetails (class in mltk.core.tflite_micro)": [[174, "mltk.core.tflite_micro.TfliteMicroModelDetails"]], "__init__() (tflitemicromodeldetails method)": [[174, "mltk.core.tflite_micro.TfliteMicroModelDetails.__init__"]], "accelerator (tflitemicromodeldetails property)": [[174, "mltk.core.tflite_micro.TfliteMicroModelDetails.accelerator"]], "classes (tflitemicromodeldetails property)": [[174, "mltk.core.tflite_micro.TfliteMicroModelDetails.classes"]], "date (tflitemicromodeldetails property)": [[174, "mltk.core.tflite_micro.TfliteMicroModelDetails.date"]], "description (tflitemicromodeldetails property)": [[174, "mltk.core.tflite_micro.TfliteMicroModelDetails.description"]], "hash (tflitemicromodeldetails property)": [[174, "mltk.core.tflite_micro.TfliteMicroModelDetails.hash"]], "memory_plan (tflitemicromodeldetails property)": [[174, "mltk.core.tflite_micro.TfliteMicroModelDetails.memory_plan"]], "name (tflitemicromodeldetails property)": [[174, "mltk.core.tflite_micro.TfliteMicroModelDetails.name"]], "runtime_memory_size (tflitemicromodeldetails property)": [[174, "mltk.core.tflite_micro.TfliteMicroModelDetails.runtime_memory_size"]], "version (tflitemicromodeldetails property)": [[174, "mltk.core.tflite_micro.TfliteMicroModelDetails.version"]], "tflitemicroprofiledlayerresult (class in mltk.core.tflite_micro)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult"]], "__init__() (tflitemicroprofiledlayerresult method)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.__init__"]], "__new__() (tflitemicroprofiledlayerresult method)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.__new__"]], "accelerator_cycles (tflitemicroprofiledlayerresult property)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.accelerator_cycles"]], "clear() (tflitemicroprofiledlayerresult method)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.clear"]], "copy() (tflitemicroprofiledlayerresult method)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.copy"]], "cpu_cycles (tflitemicroprofiledlayerresult property)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.cpu_cycles"]], "default_factory (tflitemicroprofiledlayerresult attribute)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.default_factory"]], "energy (tflitemicroprofiledlayerresult property)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.energy"]], "fromkeys() (tflitemicroprofiledlayerresult method)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.fromkeys"]], "get() (tflitemicroprofiledlayerresult method)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.get"]], "items() (tflitemicroprofiledlayerresult method)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.items"]], "keys() (tflitemicroprofiledlayerresult method)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.keys"]], "macs (tflitemicroprofiledlayerresult property)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.macs"]], "name (tflitemicroprofiledlayerresult property)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.name"]], "ops (tflitemicroprofiledlayerresult property)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.ops"]], "pop() (tflitemicroprofiledlayerresult method)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.pop"]], "popitem() (tflitemicroprofiledlayerresult method)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.popitem"]], "setdefault() (tflitemicroprofiledlayerresult method)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.setdefault"]], "time (tflitemicroprofiledlayerresult property)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.time"]], "update() (tflitemicroprofiledlayerresult method)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.update"]], "values() (tflitemicroprofiledlayerresult method)": [[175, "mltk.core.tflite_micro.TfliteMicroProfiledLayerResult.values"]], "tflitemicro (class in mltk.core.tflite_micro)": [[176, "mltk.core.tflite_micro.TfliteMicro"]], "accelerator_is_supported() (tflitemicro static method)": [[176, "mltk.core.tflite_micro.TfliteMicro.accelerator_is_supported"]], "add_accelerator_path() (tflitemicro static method)": [[176, "mltk.core.tflite_micro.TfliteMicro.add_accelerator_path"]], "api_version() (tflitemicro static method)": [[176, "mltk.core.tflite_micro.TfliteMicro.api_version"]], "get_accelerator() (tflitemicro static method)": [[176, "mltk.core.tflite_micro.TfliteMicro.get_accelerator"]], "get_log_level() (tflitemicro static method)": [[176, "mltk.core.tflite_micro.TfliteMicro.get_log_level"]], "get_logger() (tflitemicro static method)": [[176, "mltk.core.tflite_micro.TfliteMicro.get_logger"]], "get_supported_accelerators() (tflitemicro static method)": [[176, "mltk.core.tflite_micro.TfliteMicro.get_supported_accelerators"]], "git_hash() (tflitemicro static method)": [[176, "mltk.core.tflite_micro.TfliteMicro.git_hash"]], "load_tflite_model() (tflitemicro static method)": [[176, "mltk.core.tflite_micro.TfliteMicro.load_tflite_model"]], "normalize_accelerator_name() (tflitemicro static method)": [[176, "mltk.core.tflite_micro.TfliteMicro.normalize_accelerator_name"]], "profile_model() (tflitemicro static method)": [[176, "mltk.core.tflite_micro.TfliteMicro.profile_model"]], "record_model() (tflitemicro static method)": [[176, "mltk.core.tflite_micro.TfliteMicro.record_model"]], "register_accelerator() (tflitemicro static method)": [[176, "mltk.core.tflite_micro.TfliteMicro.register_accelerator"]], "set_log_level() (tflitemicro static method)": [[176, "mltk.core.tflite_micro.TfliteMicro.set_log_level"]], "set_logger() (tflitemicro static method)": [[176, "mltk.core.tflite_micro.TfliteMicro.set_logger"]], "unload_model() (tflitemicro static method)": [[176, "mltk.core.tflite_micro.TfliteMicro.unload_model"]], "none (tfliteactivation attribute)": [[177, "mltk.core.TfliteActivation.NONE"]], "relu (tfliteactivation attribute)": [[177, "mltk.core.TfliteActivation.RELU"]], "relu6 (tfliteactivation attribute)": [[177, "mltk.core.TfliteActivation.RELU6"]], "relu_n1_to_1 (tfliteactivation attribute)": [[177, "mltk.core.TfliteActivation.RELU_N1_TO_1"]], "sign_bit (tfliteactivation attribute)": [[177, "mltk.core.TfliteActivation.SIGN_BIT"]], "tanh (tfliteactivation attribute)": [[177, "mltk.core.TfliteActivation.TANH"]], "tfliteactivation (class in mltk.core)": [[177, "mltk.core.TfliteActivation"]], "__init__() (tfliteactivation method)": [[177, "mltk.core.TfliteActivation.__init__"]], "__new__() (tfliteactivation method)": [[177, "mltk.core.TfliteActivation.__new__"]], "as_integer_ratio() (tfliteactivation method)": [[177, "mltk.core.TfliteActivation.as_integer_ratio"]], "bit_count() (tfliteactivation method)": [[177, "mltk.core.TfliteActivation.bit_count"]], "bit_length() (tfliteactivation method)": [[177, "mltk.core.TfliteActivation.bit_length"]], "conjugate() (tfliteactivation method)": [[177, "mltk.core.TfliteActivation.conjugate"]], "denominator (tfliteactivation attribute)": [[177, "mltk.core.TfliteActivation.denominator"]], "from_bytes() (tfliteactivation method)": [[177, "mltk.core.TfliteActivation.from_bytes"]], "imag (tfliteactivation attribute)": [[177, "mltk.core.TfliteActivation.imag"]], "is_integer() (tfliteactivation method)": [[177, "mltk.core.TfliteActivation.is_integer"]], "numerator (tfliteactivation attribute)": [[177, "mltk.core.TfliteActivation.numerator"]], "real (tfliteactivation attribute)": [[177, "mltk.core.TfliteActivation.real"]], "to_bytes() (tfliteactivation method)": [[177, "mltk.core.TfliteActivation.to_bytes"]], "to_string() (tfliteactivation method)": [[177, "mltk.core.TfliteActivation.to_string"]], "tfliteaddlayer (class in mltk.core)": [[178, "mltk.core.TfliteAddLayer"]], "__init__() (tfliteaddlayer method)": [[178, "mltk.core.TfliteAddLayer.__init__"]], "activation (tfliteaddlayer property)": [[178, "mltk.core.TfliteAddLayer.activation"]], "from_flatbuffer() (tfliteaddlayer static method)": [[178, "mltk.core.TfliteAddLayer.from_flatbuffer"]], "get_input_data() (tfliteaddlayer method)": [[178, "mltk.core.TfliteAddLayer.get_input_data"]], "get_input_tensor() (tfliteaddlayer method)": [[178, "mltk.core.TfliteAddLayer.get_input_tensor"]], "get_output_data() (tfliteaddlayer method)": [[178, "mltk.core.TfliteAddLayer.get_output_data"]], "get_output_tensor() (tfliteaddlayer method)": [[178, "mltk.core.TfliteAddLayer.get_output_tensor"]], "index (tfliteaddlayer property)": [[178, "mltk.core.TfliteAddLayer.index"]], "input1_data (tfliteaddlayer property)": [[178, "mltk.core.TfliteAddLayer.input1_data"]], "input1_tensor (tfliteaddlayer property)": [[178, "mltk.core.TfliteAddLayer.input1_tensor"]], "input2_data (tfliteaddlayer property)": [[178, "mltk.core.TfliteAddLayer.input2_data"]], "input2_tensor (tfliteaddlayer property)": [[178, "mltk.core.TfliteAddLayer.input2_tensor"]], "inputs (tfliteaddlayer property)": [[178, "mltk.core.TfliteAddLayer.inputs"]], "metadata (tfliteaddlayer property)": [[178, "mltk.core.TfliteAddLayer.metadata"]], "model (tfliteaddlayer property)": [[178, "mltk.core.TfliteAddLayer.model"]], "n_inputs (tfliteaddlayer property)": [[178, "mltk.core.TfliteAddLayer.n_inputs"]], "n_outputs (tfliteaddlayer property)": [[178, "mltk.core.TfliteAddLayer.n_outputs"]], "name (tfliteaddlayer property)": [[178, "mltk.core.TfliteAddLayer.name"]], "opcode (tfliteaddlayer property)": [[178, "mltk.core.TfliteAddLayer.opcode"]], "opcode_str (tfliteaddlayer property)": [[178, "mltk.core.TfliteAddLayer.opcode_str"]], "options (tfliteaddlayer property)": [[178, "mltk.core.TfliteAddLayer.options"]], "output_data (tfliteaddlayer property)": [[178, "mltk.core.TfliteAddLayer.output_data"]], "output_tensor (tfliteaddlayer property)": [[178, "mltk.core.TfliteAddLayer.output_tensor"]], "outputs (tfliteaddlayer property)": [[178, "mltk.core.TfliteAddLayer.outputs"]], "tfliteconv2dlayer (class in mltk.core)": [[179, "mltk.core.TfliteConv2dLayer"]], "__init__() (tfliteconv2dlayer method)": [[179, "mltk.core.TfliteConv2dLayer.__init__"]], "activation (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.activation"]], "bias_data (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.bias_data"]], "bias_tensor (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.bias_tensor"]], "filters (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.filters"]], "filters_data (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.filters_data"]], "filters_tensor (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.filters_tensor"]], "from_flatbuffer() (tfliteconv2dlayer static method)": [[179, "mltk.core.TfliteConv2dLayer.from_flatbuffer"]], "get_input_data() (tfliteconv2dlayer method)": [[179, "mltk.core.TfliteConv2dLayer.get_input_data"]], "get_input_tensor() (tfliteconv2dlayer method)": [[179, "mltk.core.TfliteConv2dLayer.get_input_tensor"]], "get_output_data() (tfliteconv2dlayer method)": [[179, "mltk.core.TfliteConv2dLayer.get_output_data"]], "get_output_tensor() (tfliteconv2dlayer method)": [[179, "mltk.core.TfliteConv2dLayer.get_output_tensor"]], "index (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.index"]], "input_data (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.input_data"]], "input_tensor (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.input_tensor"]], "inputs (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.inputs"]], "kernel_size (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.kernel_size"]], "metadata (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.metadata"]], "model (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.model"]], "n_inputs (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.n_inputs"]], "n_outputs (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.n_outputs"]], "name (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.name"]], "opcode (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.opcode"]], "opcode_str (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.opcode_str"]], "options (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.options"]], "output_data (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.output_data"]], "output_tensor (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.output_tensor"]], "outputs (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.outputs"]], "padding (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.padding"]], "params (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.params"]], "strides (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.strides"]], "use_bias (tfliteconv2dlayer property)": [[179, "mltk.core.TfliteConv2dLayer.use_bias"]], "tfliteconv2dlayeroptions (class in mltk.core)": [[180, "mltk.core.TfliteConv2DLayerOptions"]], "__init__() (tfliteconv2dlayeroptions method)": [[180, "mltk.core.TfliteConv2DLayerOptions.__init__"]], "activation (tfliteconv2dlayeroptions property)": [[180, "mltk.core.TfliteConv2DLayerOptions.activation"]], "activation_str (tfliteconv2dlayeroptions property)": [[180, "mltk.core.TfliteConv2DLayerOptions.activation_str"]], "options_type (tfliteconv2dlayeroptions property)": [[180, "mltk.core.TfliteConv2DLayerOptions.options_type"]], "options_type_str (tfliteconv2dlayeroptions property)": [[180, "mltk.core.TfliteConv2DLayerOptions.options_type_str"]], "padding (tfliteconv2dlayeroptions property)": [[180, "mltk.core.TfliteConv2DLayerOptions.padding"]], "padding_str (tfliteconv2dlayeroptions property)": [[180, "mltk.core.TfliteConv2DLayerOptions.padding_str"]], "stride_height (tfliteconv2dlayeroptions property)": [[180, "mltk.core.TfliteConv2DLayerOptions.stride_height"]], "stride_width (tfliteconv2dlayeroptions property)": [[180, "mltk.core.TfliteConv2DLayerOptions.stride_width"]], "tfliteconvparams (class in mltk.core)": [[181, "mltk.core.TfliteConvParams"]], "__init__() (tfliteconvparams method)": [[181, "mltk.core.TfliteConvParams.__init__"]], "calculate() (tfliteconvparams static method)": [[181, "mltk.core.TfliteConvParams.calculate"]], "dilation_height_factor (tfliteconvparams attribute)": [[181, "mltk.core.TfliteConvParams.dilation_height_factor"]], "dilation_width_factor (tfliteconvparams attribute)": [[181, "mltk.core.TfliteConvParams.dilation_width_factor"]], "input_offset (tfliteconvparams attribute)": [[181, "mltk.core.TfliteConvParams.input_offset"]], "output_offset (tfliteconvparams attribute)": [[181, "mltk.core.TfliteConvParams.output_offset"]], "padding (tfliteconvparams attribute)": [[181, "mltk.core.TfliteConvParams.padding"]], "per_channel_output_multiplier (tfliteconvparams attribute)": [[181, "mltk.core.TfliteConvParams.per_channel_output_multiplier"]], "per_channel_output_shift (tfliteconvparams attribute)": [[181, "mltk.core.TfliteConvParams.per_channel_output_shift"]], "quantized_activation_max (tfliteconvparams attribute)": [[181, "mltk.core.TfliteConvParams.quantized_activation_max"]], "quantized_activation_min (tfliteconvparams attribute)": [[181, "mltk.core.TfliteConvParams.quantized_activation_min"]], "stride_height (tfliteconvparams attribute)": [[181, "mltk.core.TfliteConvParams.stride_height"]], "stride_width (tfliteconvparams attribute)": [[181, "mltk.core.TfliteConvParams.stride_width"]], "weights_offset (tfliteconvparams attribute)": [[181, "mltk.core.TfliteConvParams.weights_offset"]], "tflitedepthwiseconv2dlayer (class in mltk.core)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer"]], "__init__() (tflitedepthwiseconv2dlayer method)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.__init__"]], "activation (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.activation"]], "bias_data (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.bias_data"]], "bias_tensor (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.bias_tensor"]], "filters_data (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.filters_data"]], "filters_tensor (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.filters_tensor"]], "from_flatbuffer() (tflitedepthwiseconv2dlayer static method)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.from_flatbuffer"]], "get_input_data() (tflitedepthwiseconv2dlayer method)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.get_input_data"]], "get_input_tensor() (tflitedepthwiseconv2dlayer method)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.get_input_tensor"]], "get_output_data() (tflitedepthwiseconv2dlayer method)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.get_output_data"]], "get_output_tensor() (tflitedepthwiseconv2dlayer method)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.get_output_tensor"]], "index (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.index"]], "input_data (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.input_data"]], "input_tensor (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.input_tensor"]], "inputs (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.inputs"]], "kernel_size (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.kernel_size"]], "metadata (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.metadata"]], "model (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.model"]], "multiplier (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.multiplier"]], "n_inputs (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.n_inputs"]], "n_outputs (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.n_outputs"]], "name (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.name"]], "opcode (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.opcode"]], "opcode_str (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.opcode_str"]], "options (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.options"]], "output_data (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.output_data"]], "output_tensor (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.output_tensor"]], "outputs (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.outputs"]], "padding (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.padding"]], "params (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.params"]], "strides (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.strides"]], "use_bias (tflitedepthwiseconv2dlayer property)": [[182, "mltk.core.TfliteDepthwiseConv2dLayer.use_bias"]], "tflitedepthwiseconv2dlayeroptions (class in mltk.core)": [[183, "mltk.core.TfliteDepthwiseConv2DLayerOptions"]], "__init__() (tflitedepthwiseconv2dlayeroptions method)": [[183, "mltk.core.TfliteDepthwiseConv2DLayerOptions.__init__"]], "activation (tflitedepthwiseconv2dlayeroptions property)": [[183, "mltk.core.TfliteDepthwiseConv2DLayerOptions.activation"]], "activation_str (tflitedepthwiseconv2dlayeroptions property)": [[183, "mltk.core.TfliteDepthwiseConv2DLayerOptions.activation_str"]], "multiplier (tflitedepthwiseconv2dlayeroptions property)": [[183, "mltk.core.TfliteDepthwiseConv2DLayerOptions.multiplier"]], "options_type (tflitedepthwiseconv2dlayeroptions property)": [[183, "mltk.core.TfliteDepthwiseConv2DLayerOptions.options_type"]], "options_type_str (tflitedepthwiseconv2dlayeroptions property)": [[183, "mltk.core.TfliteDepthwiseConv2DLayerOptions.options_type_str"]], "padding (tflitedepthwiseconv2dlayeroptions property)": [[183, "mltk.core.TfliteDepthwiseConv2DLayerOptions.padding"]], "padding_str (tflitedepthwiseconv2dlayeroptions property)": [[183, "mltk.core.TfliteDepthwiseConv2DLayerOptions.padding_str"]], "stride_height (tflitedepthwiseconv2dlayeroptions property)": [[183, "mltk.core.TfliteDepthwiseConv2DLayerOptions.stride_height"]], "stride_width (tflitedepthwiseconv2dlayeroptions property)": [[183, "mltk.core.TfliteDepthwiseConv2DLayerOptions.stride_width"]], "tflitedepthwiseconvparams (class in mltk.core)": [[184, "mltk.core.TfliteDepthwiseConvParams"]], "__init__() (tflitedepthwiseconvparams method)": [[184, "mltk.core.TfliteDepthwiseConvParams.__init__"]], "calculate() (tflitedepthwiseconvparams static method)": [[184, "mltk.core.TfliteDepthwiseConvParams.calculate"]], "depth_multiplier (tflitedepthwiseconvparams attribute)": [[184, "mltk.core.TfliteDepthwiseConvParams.depth_multiplier"]], "dilation_height_factor (tflitedepthwiseconvparams attribute)": [[184, "mltk.core.TfliteDepthwiseConvParams.dilation_height_factor"]], "dilation_width_factor (tflitedepthwiseconvparams attribute)": [[184, "mltk.core.TfliteDepthwiseConvParams.dilation_width_factor"]], "input_offset (tflitedepthwiseconvparams attribute)": [[184, "mltk.core.TfliteDepthwiseConvParams.input_offset"]], "output_offset (tflitedepthwiseconvparams attribute)": [[184, "mltk.core.TfliteDepthwiseConvParams.output_offset"]], "padding (tflitedepthwiseconvparams attribute)": [[184, "mltk.core.TfliteDepthwiseConvParams.padding"]], "per_channel_output_multiplier (tflitedepthwiseconvparams attribute)": [[184, "mltk.core.TfliteDepthwiseConvParams.per_channel_output_multiplier"]], "per_channel_output_shift (tflitedepthwiseconvparams attribute)": [[184, "mltk.core.TfliteDepthwiseConvParams.per_channel_output_shift"]], "quantized_activation_max (tflitedepthwiseconvparams attribute)": [[184, "mltk.core.TfliteDepthwiseConvParams.quantized_activation_max"]], "quantized_activation_min (tflitedepthwiseconvparams attribute)": [[184, "mltk.core.TfliteDepthwiseConvParams.quantized_activation_min"]], "stride_height (tflitedepthwiseconvparams attribute)": [[184, "mltk.core.TfliteDepthwiseConvParams.stride_height"]], "stride_width (tflitedepthwiseconvparams attribute)": [[184, "mltk.core.TfliteDepthwiseConvParams.stride_width"]], "weights_offset (tflitedepthwiseconvparams attribute)": [[184, "mltk.core.TfliteDepthwiseConvParams.weights_offset"]], "tflitedequantizelayer (class in mltk.core)": [[185, "mltk.core.TfliteDequantizeLayer"]], "__init__() (tflitedequantizelayer method)": [[185, "mltk.core.TfliteDequantizeLayer.__init__"]], "from_flatbuffer() (tflitedequantizelayer static method)": [[185, "mltk.core.TfliteDequantizeLayer.from_flatbuffer"]], "get_input_data() (tflitedequantizelayer method)": [[185, "mltk.core.TfliteDequantizeLayer.get_input_data"]], "get_input_tensor() (tflitedequantizelayer method)": [[185, "mltk.core.TfliteDequantizeLayer.get_input_tensor"]], "get_output_data() (tflitedequantizelayer method)": [[185, "mltk.core.TfliteDequantizeLayer.get_output_data"]], "get_output_tensor() (tflitedequantizelayer method)": [[185, "mltk.core.TfliteDequantizeLayer.get_output_tensor"]], "index (tflitedequantizelayer property)": [[185, "mltk.core.TfliteDequantizeLayer.index"]], "input_data (tflitedequantizelayer property)": [[185, "mltk.core.TfliteDequantizeLayer.input_data"]], "input_tensor (tflitedequantizelayer property)": [[185, "mltk.core.TfliteDequantizeLayer.input_tensor"]], "inputs (tflitedequantizelayer property)": [[185, "mltk.core.TfliteDequantizeLayer.inputs"]], "metadata (tflitedequantizelayer property)": [[185, "mltk.core.TfliteDequantizeLayer.metadata"]], "model (tflitedequantizelayer property)": [[185, "mltk.core.TfliteDequantizeLayer.model"]], "n_inputs (tflitedequantizelayer property)": [[185, "mltk.core.TfliteDequantizeLayer.n_inputs"]], "n_outputs (tflitedequantizelayer property)": [[185, "mltk.core.TfliteDequantizeLayer.n_outputs"]], "name (tflitedequantizelayer property)": [[185, "mltk.core.TfliteDequantizeLayer.name"]], "opcode (tflitedequantizelayer property)": [[185, "mltk.core.TfliteDequantizeLayer.opcode"]], "opcode_str (tflitedequantizelayer property)": [[185, "mltk.core.TfliteDequantizeLayer.opcode_str"]], "options (tflitedequantizelayer property)": [[185, "mltk.core.TfliteDequantizeLayer.options"]], "output_data (tflitedequantizelayer property)": [[185, "mltk.core.TfliteDequantizeLayer.output_data"]], "output_tensor (tflitedequantizelayer property)": [[185, "mltk.core.TfliteDequantizeLayer.output_tensor"]], "outputs (tflitedequantizelayer property)": [[185, "mltk.core.TfliteDequantizeLayer.outputs"]], "flatbufferdictionary (class in mltk.core.tflite_model_parameters.flatbuffer_dictionary)": [[186, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary"]], "__init__() (flatbufferdictionary method)": [[186, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.__init__"]], "deserialize() (flatbufferdictionary static method)": [[186, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.deserialize"]], "put() (flatbufferdictionary method)": [[186, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.put"]], "serialize() (flatbufferdictionary method)": [[186, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.serialize"]], "summary() (flatbufferdictionary method)": [[186, "mltk.core.tflite_model_parameters.flatbuffer_dictionary.FlatbufferDictionary.summary"]], "tflitefullyconnectedlayer (class in mltk.core)": [[187, "mltk.core.TfliteFullyConnectedLayer"]], "__init__() (tflitefullyconnectedlayer method)": [[187, "mltk.core.TfliteFullyConnectedLayer.__init__"]], "accumulator_depth (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.accumulator_depth"]], "activation (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.activation"]], "bias_data (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.bias_data"]], "bias_tensor (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.bias_tensor"]], "from_flatbuffer() (tflitefullyconnectedlayer static method)": [[187, "mltk.core.TfliteFullyConnectedLayer.from_flatbuffer"]], "get_input_data() (tflitefullyconnectedlayer method)": [[187, "mltk.core.TfliteFullyConnectedLayer.get_input_data"]], "get_input_tensor() (tflitefullyconnectedlayer method)": [[187, "mltk.core.TfliteFullyConnectedLayer.get_input_tensor"]], "get_output_data() (tflitefullyconnectedlayer method)": [[187, "mltk.core.TfliteFullyConnectedLayer.get_output_data"]], "get_output_tensor() (tflitefullyconnectedlayer method)": [[187, "mltk.core.TfliteFullyConnectedLayer.get_output_tensor"]], "index (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.index"]], "input_data (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.input_data"]], "input_tensor (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.input_tensor"]], "inputs (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.inputs"]], "metadata (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.metadata"]], "model (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.model"]], "n_inputs (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.n_inputs"]], "n_outputs (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.n_outputs"]], "name (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.name"]], "opcode (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.opcode"]], "opcode_str (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.opcode_str"]], "options (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.options"]], "output_data (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.output_data"]], "output_tensor (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.output_tensor"]], "outputs (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.outputs"]], "params (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.params"]], "units (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.units"]], "use_bias (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.use_bias"]], "weights_data (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.weights_data"]], "weights_tensor (tflitefullyconnectedlayer property)": [[187, "mltk.core.TfliteFullyConnectedLayer.weights_tensor"]], "tflitefullyconnectedlayeroptions (class in mltk.core)": [[188, "mltk.core.TfliteFullyConnectedLayerOptions"]], "__init__() (tflitefullyconnectedlayeroptions method)": [[188, "mltk.core.TfliteFullyConnectedLayerOptions.__init__"]], "activation (tflitefullyconnectedlayeroptions property)": [[188, "mltk.core.TfliteFullyConnectedLayerOptions.activation"]], "activation_str (tflitefullyconnectedlayeroptions property)": [[188, "mltk.core.TfliteFullyConnectedLayerOptions.activation_str"]], "options_type (tflitefullyconnectedlayeroptions property)": [[188, "mltk.core.TfliteFullyConnectedLayerOptions.options_type"]], "options_type_str (tflitefullyconnectedlayeroptions property)": [[188, "mltk.core.TfliteFullyConnectedLayerOptions.options_type_str"]], "tflitefullyconnectedparams (class in mltk.core)": [[189, "mltk.core.TfliteFullyConnectedParams"]], "__init__() (tflitefullyconnectedparams method)": [[189, "mltk.core.TfliteFullyConnectedParams.__init__"]], "calculate() (tflitefullyconnectedparams static method)": [[189, "mltk.core.TfliteFullyConnectedParams.calculate"]], "input_offset (tflitefullyconnectedparams attribute)": [[189, "mltk.core.TfliteFullyConnectedParams.input_offset"]], "output_multiplier (tflitefullyconnectedparams attribute)": [[189, "mltk.core.TfliteFullyConnectedParams.output_multiplier"]], "output_offset (tflitefullyconnectedparams attribute)": [[189, "mltk.core.TfliteFullyConnectedParams.output_offset"]], "output_shift (tflitefullyconnectedparams attribute)": [[189, "mltk.core.TfliteFullyConnectedParams.output_shift"]], "quantized_activation_max (tflitefullyconnectedparams attribute)": [[189, "mltk.core.TfliteFullyConnectedParams.quantized_activation_max"]], "quantized_activation_min (tflitefullyconnectedparams attribute)": [[189, "mltk.core.TfliteFullyConnectedParams.quantized_activation_min"]], "weights_offset (tflitefullyconnectedparams attribute)": [[189, "mltk.core.TfliteFullyConnectedParams.weights_offset"]], "tflitelayer (class in mltk.core)": [[191, "mltk.core.TfliteLayer"]], "__init__() (tflitelayer method)": [[191, "mltk.core.TfliteLayer.__init__"]], "from_flatbuffer() (tflitelayer static method)": [[191, "mltk.core.TfliteLayer.from_flatbuffer"]], "get_input_data() (tflitelayer method)": [[191, "mltk.core.TfliteLayer.get_input_data"]], "get_input_tensor() (tflitelayer method)": [[191, "mltk.core.TfliteLayer.get_input_tensor"]], "get_output_data() (tflitelayer method)": [[191, "mltk.core.TfliteLayer.get_output_data"]], "get_output_tensor() (tflitelayer method)": [[191, "mltk.core.TfliteLayer.get_output_tensor"]], "index (tflitelayer property)": [[191, "mltk.core.TfliteLayer.index"]], "inputs (tflitelayer property)": [[191, "mltk.core.TfliteLayer.inputs"]], "metadata (tflitelayer property)": [[191, "mltk.core.TfliteLayer.metadata"]], "model (tflitelayer property)": [[191, "mltk.core.TfliteLayer.model"]], "n_inputs (tflitelayer property)": [[191, "mltk.core.TfliteLayer.n_inputs"]], "n_outputs (tflitelayer property)": [[191, "mltk.core.TfliteLayer.n_outputs"]], "name (tflitelayer property)": [[191, "mltk.core.TfliteLayer.name"]], "opcode (tflitelayer property)": [[191, "mltk.core.TfliteLayer.opcode"]], "opcode_str (tflitelayer property)": [[191, "mltk.core.TfliteLayer.opcode_str"]], "options (tflitelayer property)": [[191, "mltk.core.TfliteLayer.options"]], "outputs (tflitelayer property)": [[191, "mltk.core.TfliteLayer.outputs"]], "tflitemodel (class in mltk.core)": [[192, "mltk.core.TfliteModel"]], "__init__() (tflitemodel method)": [[192, "mltk.core.TfliteModel.__init__"]], "add_metadata() (tflitemodel method)": [[192, "mltk.core.TfliteModel.add_metadata"]], "dequantize_output_to_float32() (tflitemodel method)": [[192, "mltk.core.TfliteModel.dequantize_output_to_float32"]], "description (tflitemodel property)": [[192, "mltk.core.TfliteModel.description"]], "filename (tflitemodel property)": [[192, "mltk.core.TfliteModel.filename"]], "flatbuffer_data (tflitemodel property)": [[192, "mltk.core.TfliteModel.flatbuffer_data"]], "flatbuffer_model (tflitemodel property)": [[192, "mltk.core.TfliteModel.flatbuffer_model"]], "flatbuffer_size (tflitemodel property)": [[192, "mltk.core.TfliteModel.flatbuffer_size"]], "flatbuffer_subgraph (tflitemodel property)": [[192, "mltk.core.TfliteModel.flatbuffer_subgraph"]], "get_all_metadata() (tflitemodel method)": [[192, "mltk.core.TfliteModel.get_all_metadata"]], "get_flatbuffer_subgraph() (tflitemodel method)": [[192, "mltk.core.TfliteModel.get_flatbuffer_subgraph"]], "get_input_data() (tflitemodel method)": [[192, "mltk.core.TfliteModel.get_input_data"]], "get_input_tensor() (tflitemodel method)": [[192, "mltk.core.TfliteModel.get_input_tensor"]], "get_metadata() (tflitemodel method)": [[192, "mltk.core.TfliteModel.get_metadata"]], "get_output_data() (tflitemodel method)": [[192, "mltk.core.TfliteModel.get_output_data"]], "get_output_tensor() (tflitemodel method)": [[192, "mltk.core.TfliteModel.get_output_tensor"]], "get_tensor() (tflitemodel method)": [[192, "mltk.core.TfliteModel.get_tensor"]], "get_tensor_data() (tflitemodel method)": [[192, "mltk.core.TfliteModel.get_tensor_data"]], "inputs (tflitemodel property)": [[192, "mltk.core.TfliteModel.inputs"]], "layers (tflitemodel property)": [[192, "mltk.core.TfliteModel.layers"]], "load_flatbuffer_file() (tflitemodel static method)": [[192, "mltk.core.TfliteModel.load_flatbuffer_file"]], "n_inputs (tflitemodel property)": [[192, "mltk.core.TfliteModel.n_inputs"]], "n_outputs (tflitemodel property)": [[192, "mltk.core.TfliteModel.n_outputs"]], "n_subgraphs (tflitemodel property)": [[192, "mltk.core.TfliteModel.n_subgraphs"]], "name (tflitemodel property)": [[192, "mltk.core.TfliteModel.name"]], "outputs (tflitemodel property)": [[192, "mltk.core.TfliteModel.outputs"]], "path (tflitemodel property)": [[192, "mltk.core.TfliteModel.path"]], "predict() (tflitemodel method)": [[192, "mltk.core.TfliteModel.predict"]], "quantize_to_input_dtype() (tflitemodel method)": [[192, "mltk.core.TfliteModel.quantize_to_input_dtype"]], "regenerate_flatbuffer() (tflitemodel method)": [[192, "mltk.core.TfliteModel.regenerate_flatbuffer"]], "remove_metadata() (tflitemodel method)": [[192, "mltk.core.TfliteModel.remove_metadata"]], "save() (tflitemodel method)": [[192, "mltk.core.TfliteModel.save"]], "selected_model_subgraph (tflitemodel property)": [[192, "mltk.core.TfliteModel.selected_model_subgraph"]], "summary() (tflitemodel method)": [[192, "mltk.core.TfliteModel.summary"]], "tensors (tflitemodel property)": [[192, "mltk.core.TfliteModel.tensors"]], "same (tflitepadding attribute)": [[193, "mltk.core.TflitePadding.SAME"]], "tflitepadding (class in mltk.core)": [[193, "mltk.core.TflitePadding"]], "valid (tflitepadding attribute)": [[193, "mltk.core.TflitePadding.VALID"]], "__init__() (tflitepadding method)": [[193, "mltk.core.TflitePadding.__init__"]], "__new__() (tflitepadding method)": [[193, "mltk.core.TflitePadding.__new__"]], "as_integer_ratio() (tflitepadding method)": [[193, "mltk.core.TflitePadding.as_integer_ratio"]], "bit_count() (tflitepadding method)": [[193, "mltk.core.TflitePadding.bit_count"]], "bit_length() (tflitepadding method)": [[193, "mltk.core.TflitePadding.bit_length"]], "conjugate() (tflitepadding method)": [[193, "mltk.core.TflitePadding.conjugate"]], "denominator (tflitepadding attribute)": [[193, "mltk.core.TflitePadding.denominator"]], "from_bytes() (tflitepadding method)": [[193, "mltk.core.TflitePadding.from_bytes"]], "height (tflitepadding property)": [[193, "mltk.core.TflitePadding.height"]], "imag (tflitepadding attribute)": [[193, "mltk.core.TflitePadding.imag"]], "is_integer() (tflitepadding method)": [[193, "mltk.core.TflitePadding.is_integer"]], "numerator (tflitepadding attribute)": [[193, "mltk.core.TflitePadding.numerator"]], "real (tflitepadding attribute)": [[193, "mltk.core.TflitePadding.real"]], "to_bytes() (tflitepadding method)": [[193, "mltk.core.TflitePadding.to_bytes"]], "to_string() (tflitepadding method)": [[193, "mltk.core.TflitePadding.to_string"]], "width (tflitepadding property)": [[193, "mltk.core.TflitePadding.width"]], "tflitemodelparameters (class in mltk.core)": [[194, "mltk.core.TfliteModelParameters"]], "__init__() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.__init__"]], "__new__() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.__new__"]], "add_to_tflite_file() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.add_to_tflite_file"]], "add_to_tflite_flatbuffer() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.add_to_tflite_flatbuffer"]], "add_to_tflite_model() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.add_to_tflite_model"]], "clear() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.clear"]], "copy() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.copy"]], "deserialize() (tflitemodelparameters static method)": [[194, "mltk.core.TfliteModelParameters.deserialize"]], "fromkeys() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.fromkeys"]], "get() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.get"]], "items() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.items"]], "keys() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.keys"]], "load_from_tflite_file() (tflitemodelparameters static method)": [[194, "mltk.core.TfliteModelParameters.load_from_tflite_file"]], "load_from_tflite_flatbuffer() (tflitemodelparameters static method)": [[194, "mltk.core.TfliteModelParameters.load_from_tflite_flatbuffer"]], "load_from_tflite_model() (tflitemodelparameters static method)": [[194, "mltk.core.TfliteModelParameters.load_from_tflite_model"]], "pop() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.pop"]], "popitem() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.popitem"]], "put() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.put"]], "serialize() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.serialize"]], "setdefault() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.setdefault"]], "summary() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.summary"]], "update() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.update"]], "values() (tflitemodelparameters method)": [[194, "mltk.core.TfliteModelParameters.values"]], "tflitepooling2dlayer (class in mltk.core)": [[195, "mltk.core.TflitePooling2dLayer"]], "__init__() (tflitepooling2dlayer method)": [[195, "mltk.core.TflitePooling2dLayer.__init__"]], "activation (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.activation"]], "from_flatbuffer() (tflitepooling2dlayer static method)": [[195, "mltk.core.TflitePooling2dLayer.from_flatbuffer"]], "get_input_data() (tflitepooling2dlayer method)": [[195, "mltk.core.TflitePooling2dLayer.get_input_data"]], "get_input_tensor() (tflitepooling2dlayer method)": [[195, "mltk.core.TflitePooling2dLayer.get_input_tensor"]], "get_output_data() (tflitepooling2dlayer method)": [[195, "mltk.core.TflitePooling2dLayer.get_output_data"]], "get_output_tensor() (tflitepooling2dlayer method)": [[195, "mltk.core.TflitePooling2dLayer.get_output_tensor"]], "index (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.index"]], "input_data (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.input_data"]], "input_tensor (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.input_tensor"]], "inputs (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.inputs"]], "metadata (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.metadata"]], "model (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.model"]], "n_inputs (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.n_inputs"]], "n_outputs (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.n_outputs"]], "name (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.name"]], "opcode (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.opcode"]], "opcode_str (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.opcode_str"]], "options (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.options"]], "output_data (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.output_data"]], "output_tensor (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.output_tensor"]], "outputs (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.outputs"]], "padding (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.padding"]], "params (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.params"]], "pool_size (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.pool_size"]], "strides (tflitepooling2dlayer property)": [[195, "mltk.core.TflitePooling2dLayer.strides"]], "tflitepool2dlayeroptions (class in mltk.core)": [[196, "mltk.core.TflitePool2DLayerOptions"]], "__init__() (tflitepool2dlayeroptions method)": [[196, "mltk.core.TflitePool2DLayerOptions.__init__"]], "activation (tflitepool2dlayeroptions property)": [[196, "mltk.core.TflitePool2DLayerOptions.activation"]], "activation_str (tflitepool2dlayeroptions property)": [[196, "mltk.core.TflitePool2DLayerOptions.activation_str"]], "filter_height (tflitepool2dlayeroptions property)": [[196, "mltk.core.TflitePool2DLayerOptions.filter_height"]], "filter_width (tflitepool2dlayeroptions property)": [[196, "mltk.core.TflitePool2DLayerOptions.filter_width"]], "options_type (tflitepool2dlayeroptions property)": [[196, "mltk.core.TflitePool2DLayerOptions.options_type"]], "options_type_str (tflitepool2dlayeroptions property)": [[196, "mltk.core.TflitePool2DLayerOptions.options_type_str"]], "padding (tflitepool2dlayeroptions property)": [[196, "mltk.core.TflitePool2DLayerOptions.padding"]], "padding_str (tflitepool2dlayeroptions property)": [[196, "mltk.core.TflitePool2DLayerOptions.padding_str"]], "stride_height (tflitepool2dlayeroptions property)": [[196, "mltk.core.TflitePool2DLayerOptions.stride_height"]], "stride_width (tflitepool2dlayeroptions property)": [[196, "mltk.core.TflitePool2DLayerOptions.stride_width"]], "tflitepoolparams (class in mltk.core)": [[197, "mltk.core.TflitePoolParams"]], "__init__() (tflitepoolparams method)": [[197, "mltk.core.TflitePoolParams.__init__"]], "calculate() (tflitepoolparams static method)": [[197, "mltk.core.TflitePoolParams.calculate"]], "padding (tflitepoolparams attribute)": [[197, "mltk.core.TflitePoolParams.padding"]], "quantized_activation_max (tflitepoolparams attribute)": [[197, "mltk.core.TflitePoolParams.quantized_activation_max"]], "quantized_activation_min (tflitepoolparams attribute)": [[197, "mltk.core.TflitePoolParams.quantized_activation_min"]], "stride_height (tflitepoolparams attribute)": [[197, "mltk.core.TflitePoolParams.stride_height"]], "stride_width (tflitepoolparams attribute)": [[197, "mltk.core.TflitePoolParams.stride_width"]], "tflitequantization (class in mltk.core)": [[198, "mltk.core.TfliteQuantization"]], "__init__() (tflitequantization method)": [[198, "mltk.core.TfliteQuantization.__init__"]], "n_channels (tflitequantization property)": [[198, "mltk.core.TfliteQuantization.n_channels"]], "quantization_dimension (tflitequantization property)": [[198, "mltk.core.TfliteQuantization.quantization_dimension"]], "scale (tflitequantization property)": [[198, "mltk.core.TfliteQuantization.scale"]], "zeropoint (tflitequantization property)": [[198, "mltk.core.TfliteQuantization.zeropoint"]], "tflitequantizelayer (class in mltk.core)": [[199, "mltk.core.TfliteQuantizeLayer"]], "__init__() (tflitequantizelayer method)": [[199, "mltk.core.TfliteQuantizeLayer.__init__"]], "from_flatbuffer() (tflitequantizelayer static method)": [[199, "mltk.core.TfliteQuantizeLayer.from_flatbuffer"]], "get_input_data() (tflitequantizelayer method)": [[199, "mltk.core.TfliteQuantizeLayer.get_input_data"]], "get_input_tensor() (tflitequantizelayer method)": [[199, "mltk.core.TfliteQuantizeLayer.get_input_tensor"]], "get_output_data() (tflitequantizelayer method)": [[199, "mltk.core.TfliteQuantizeLayer.get_output_data"]], "get_output_tensor() (tflitequantizelayer method)": [[199, "mltk.core.TfliteQuantizeLayer.get_output_tensor"]], "index (tflitequantizelayer property)": [[199, "mltk.core.TfliteQuantizeLayer.index"]], "input_data (tflitequantizelayer property)": [[199, "mltk.core.TfliteQuantizeLayer.input_data"]], "input_tensor (tflitequantizelayer property)": [[199, "mltk.core.TfliteQuantizeLayer.input_tensor"]], "inputs (tflitequantizelayer property)": [[199, "mltk.core.TfliteQuantizeLayer.inputs"]], "metadata (tflitequantizelayer property)": [[199, "mltk.core.TfliteQuantizeLayer.metadata"]], "model (tflitequantizelayer property)": [[199, "mltk.core.TfliteQuantizeLayer.model"]], "n_inputs (tflitequantizelayer property)": [[199, "mltk.core.TfliteQuantizeLayer.n_inputs"]], "n_outputs (tflitequantizelayer property)": [[199, "mltk.core.TfliteQuantizeLayer.n_outputs"]], "name (tflitequantizelayer property)": [[199, "mltk.core.TfliteQuantizeLayer.name"]], "opcode (tflitequantizelayer property)": [[199, "mltk.core.TfliteQuantizeLayer.opcode"]], "opcode_str (tflitequantizelayer property)": [[199, "mltk.core.TfliteQuantizeLayer.opcode_str"]], "options (tflitequantizelayer property)": [[199, "mltk.core.TfliteQuantizeLayer.options"]], "output_data (tflitequantizelayer property)": [[199, "mltk.core.TfliteQuantizeLayer.output_data"]], "output_tensor (tflitequantizelayer property)": [[199, "mltk.core.TfliteQuantizeLayer.output_tensor"]], "outputs (tflitequantizelayer property)": [[199, "mltk.core.TfliteQuantizeLayer.outputs"]], "tflitereshapelayer (class in mltk.core)": [[200, "mltk.core.TfliteReshapeLayer"]], "__init__() (tflitereshapelayer method)": [[200, "mltk.core.TfliteReshapeLayer.__init__"]], "from_flatbuffer() (tflitereshapelayer static method)": [[200, "mltk.core.TfliteReshapeLayer.from_flatbuffer"]], "get_input_data() (tflitereshapelayer method)": [[200, "mltk.core.TfliteReshapeLayer.get_input_data"]], "get_input_tensor() (tflitereshapelayer method)": [[200, "mltk.core.TfliteReshapeLayer.get_input_tensor"]], "get_output_data() (tflitereshapelayer method)": [[200, "mltk.core.TfliteReshapeLayer.get_output_data"]], "get_output_tensor() (tflitereshapelayer method)": [[200, "mltk.core.TfliteReshapeLayer.get_output_tensor"]], "index (tflitereshapelayer property)": [[200, "mltk.core.TfliteReshapeLayer.index"]], "input_data (tflitereshapelayer property)": [[200, "mltk.core.TfliteReshapeLayer.input_data"]], "input_tensor (tflitereshapelayer property)": [[200, "mltk.core.TfliteReshapeLayer.input_tensor"]], "inputs (tflitereshapelayer property)": [[200, "mltk.core.TfliteReshapeLayer.inputs"]], "metadata (tflitereshapelayer property)": [[200, "mltk.core.TfliteReshapeLayer.metadata"]], "model (tflitereshapelayer property)": [[200, "mltk.core.TfliteReshapeLayer.model"]], "n_input_elements (tflitereshapelayer property)": [[200, "mltk.core.TfliteReshapeLayer.n_input_elements"]], "n_inputs (tflitereshapelayer property)": [[200, "mltk.core.TfliteReshapeLayer.n_inputs"]], "n_outputs (tflitereshapelayer property)": [[200, "mltk.core.TfliteReshapeLayer.n_outputs"]], "name (tflitereshapelayer property)": [[200, "mltk.core.TfliteReshapeLayer.name"]], "opcode (tflitereshapelayer property)": [[200, "mltk.core.TfliteReshapeLayer.opcode"]], "opcode_str (tflitereshapelayer property)": [[200, "mltk.core.TfliteReshapeLayer.opcode_str"]], "options (tflitereshapelayer property)": [[200, "mltk.core.TfliteReshapeLayer.options"]], "output_data (tflitereshapelayer property)": [[200, "mltk.core.TfliteReshapeLayer.output_data"]], "output_tensor (tflitereshapelayer property)": [[200, "mltk.core.TfliteReshapeLayer.output_tensor"]], "outputs (tflitereshapelayer property)": [[200, "mltk.core.TfliteReshapeLayer.outputs"]], "requires_copy (tflitereshapelayer property)": [[200, "mltk.core.TfliteReshapeLayer.requires_copy"]], "tfliteshape (class in mltk.core)": [[201, "mltk.core.TfliteShape"]], "__new__() (tfliteshape static method)": [[201, "mltk.core.TfliteShape.__new__"]], "count() (tfliteshape method)": [[201, "mltk.core.TfliteShape.count"]], "flat_size (tfliteshape property)": [[201, "mltk.core.TfliteShape.flat_size"]], "index() (tfliteshape method)": [[201, "mltk.core.TfliteShape.index"]], "tflitetensor (class in mltk.core)": [[202, "mltk.core.TfliteTensor"]], "__init__() (tflitetensor method)": [[202, "mltk.core.TfliteTensor.__init__"]], "data (tflitetensor property)": [[202, "mltk.core.TfliteTensor.data"]], "dtype (tflitetensor property)": [[202, "mltk.core.TfliteTensor.dtype"]], "dtype_str (tflitetensor property)": [[202, "mltk.core.TfliteTensor.dtype_str"]], "index (tflitetensor property)": [[202, "mltk.core.TfliteTensor.index"]], "is_variable (tflitetensor property)": [[202, "mltk.core.TfliteTensor.is_variable"]], "model (tflitetensor property)": [[202, "mltk.core.TfliteTensor.model"]], "quantization (tflitetensor property)": [[202, "mltk.core.TfliteTensor.quantization"]], "shape (tflitetensor property)": [[202, "mltk.core.TfliteTensor.shape"]], "shape_dtype_str() (tflitetensor method)": [[202, "mltk.core.TfliteTensor.shape_dtype_str"]], "size_bytes (tflitetensor property)": [[202, "mltk.core.TfliteTensor.size_bytes"]], "tflitetransposeconvlayer (class in mltk.core)": [[203, "mltk.core.TfliteTransposeConvLayer"]], "__init__() (tflitetransposeconvlayer method)": [[203, "mltk.core.TfliteTransposeConvLayer.__init__"]], "bias_data (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.bias_data"]], "bias_tensor (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.bias_tensor"]], "filters (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.filters"]], "filters_data (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.filters_data"]], "filters_tensor (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.filters_tensor"]], "from_flatbuffer() (tflitetransposeconvlayer static method)": [[203, "mltk.core.TfliteTransposeConvLayer.from_flatbuffer"]], "get_input_data() (tflitetransposeconvlayer method)": [[203, "mltk.core.TfliteTransposeConvLayer.get_input_data"]], "get_input_tensor() (tflitetransposeconvlayer method)": [[203, "mltk.core.TfliteTransposeConvLayer.get_input_tensor"]], "get_output_data() (tflitetransposeconvlayer method)": [[203, "mltk.core.TfliteTransposeConvLayer.get_output_data"]], "get_output_tensor() (tflitetransposeconvlayer method)": [[203, "mltk.core.TfliteTransposeConvLayer.get_output_tensor"]], "index (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.index"]], "input_data (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.input_data"]], "input_tensor (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.input_tensor"]], "inputs (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.inputs"]], "kernel_size (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.kernel_size"]], "metadata (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.metadata"]], "model (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.model"]], "n_inputs (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.n_inputs"]], "n_outputs (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.n_outputs"]], "name (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.name"]], "opcode (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.opcode"]], "opcode_str (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.opcode_str"]], "options (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.options"]], "output_data (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.output_data"]], "output_tensor (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.output_tensor"]], "outputs (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.outputs"]], "padding (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.padding"]], "params (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.params"]], "strides (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.strides"]], "use_bias (tflitetransposeconvlayer property)": [[203, "mltk.core.TfliteTransposeConvLayer.use_bias"]], "tflitetransposeconvlayeroptions (class in mltk.core)": [[204, "mltk.core.TfliteTransposeConvLayerOptions"]], "__init__() (tflitetransposeconvlayeroptions method)": [[204, "mltk.core.TfliteTransposeConvLayerOptions.__init__"]], "options_type (tflitetransposeconvlayeroptions property)": [[204, "mltk.core.TfliteTransposeConvLayerOptions.options_type"]], "options_type_str (tflitetransposeconvlayeroptions property)": [[204, "mltk.core.TfliteTransposeConvLayerOptions.options_type_str"]], "padding (tflitetransposeconvlayeroptions property)": [[204, "mltk.core.TfliteTransposeConvLayerOptions.padding"]], "padding_str (tflitetransposeconvlayeroptions property)": [[204, "mltk.core.TfliteTransposeConvLayerOptions.padding_str"]], "stride_height (tflitetransposeconvlayeroptions property)": [[204, "mltk.core.TfliteTransposeConvLayerOptions.stride_height"]], "stride_width (tflitetransposeconvlayeroptions property)": [[204, "mltk.core.TfliteTransposeConvLayerOptions.stride_width"]], "tflitetransposeconvparams (class in mltk.core)": [[205, "mltk.core.TfliteTransposeConvParams"]], "__init__() (tflitetransposeconvparams method)": [[205, "mltk.core.TfliteTransposeConvParams.__init__"]], "calculate() (tflitetransposeconvparams static method)": [[205, "mltk.core.TfliteTransposeConvParams.calculate"]], "input_offset (tflitetransposeconvparams attribute)": [[205, "mltk.core.TfliteTransposeConvParams.input_offset"]], "output_offset (tflitetransposeconvparams attribute)": [[205, "mltk.core.TfliteTransposeConvParams.output_offset"]], "padding (tflitetransposeconvparams attribute)": [[205, "mltk.core.TfliteTransposeConvParams.padding"]], "per_channel_output_multiplier (tflitetransposeconvparams attribute)": [[205, "mltk.core.TfliteTransposeConvParams.per_channel_output_multiplier"]], "per_channel_output_shift (tflitetransposeconvparams attribute)": [[205, "mltk.core.TfliteTransposeConvParams.per_channel_output_shift"]], "quantized_activation_max (tflitetransposeconvparams attribute)": [[205, "mltk.core.TfliteTransposeConvParams.quantized_activation_max"]], "quantized_activation_min (tflitetransposeconvparams attribute)": [[205, "mltk.core.TfliteTransposeConvParams.quantized_activation_min"]], "stride_height (tflitetransposeconvparams attribute)": [[205, "mltk.core.TfliteTransposeConvParams.stride_height"]], "stride_width (tflitetransposeconvparams attribute)": [[205, "mltk.core.TfliteTransposeConvParams.stride_width"]], "weights_offset (tflitetransposeconvparams attribute)": [[205, "mltk.core.TfliteTransposeConvParams.weights_offset"]], "tfliteunidirectionallstmlayer (class in mltk.core)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer"]], "__init__() (tfliteunidirectionallstmlayer method)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.__init__"]], "activation (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.activation"]], "cell_clip (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.cell_clip"]], "cell_gate_bias_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.cell_gate_bias_tensor"]], "cell_layer_norm_coeff_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.cell_layer_norm_coeff_tensor"]], "cell_state_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.cell_state_tensor"]], "cell_to_forget_weights_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.cell_to_forget_weights_tensor"]], "cell_to_input_weights_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.cell_to_input_weights_tensor"]], "cell_to_output_weights_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.cell_to_output_weights_tensor"]], "forget_gate_bias_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.forget_gate_bias_tensor"]], "forget_layer_norm_coeff_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.forget_layer_norm_coeff_tensor"]], "from_flatbuffer() (tfliteunidirectionallstmlayer static method)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.from_flatbuffer"]], "get_input_data() (tfliteunidirectionallstmlayer method)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.get_input_data"]], "get_input_tensor() (tfliteunidirectionallstmlayer method)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.get_input_tensor"]], "get_output_data() (tfliteunidirectionallstmlayer method)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.get_output_data"]], "get_output_tensor() (tfliteunidirectionallstmlayer method)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.get_output_tensor"]], "index (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.index"]], "input_data (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.input_data"]], "input_gate_bias_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.input_gate_bias_tensor"]], "input_layer_norm_coeff_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.input_layer_norm_coeff_tensor"]], "input_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.input_tensor"]], "input_to_cell_weights_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.input_to_cell_weights_tensor"]], "input_to_forget_weights_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.input_to_forget_weights_tensor"]], "input_to_input_weights_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.input_to_input_weights_tensor"]], "input_to_output_weights_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.input_to_output_weights_tensor"]], "inputs (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.inputs"]], "is_time_major (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.is_time_major"]], "metadata (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.metadata"]], "model (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.model"]], "n_cells (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.n_cells"]], "n_inputs (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.n_inputs"]], "n_outputs (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.n_outputs"]], "name (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.name"]], "opcode (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.opcode"]], "opcode_str (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.opcode_str"]], "options (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.options"]], "output_data (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.output_data"]], "output_gate_bias_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.output_gate_bias_tensor"]], "output_layer_norm_coeff_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.output_layer_norm_coeff_tensor"]], "output_state_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.output_state_tensor"]], "output_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.output_tensor"]], "outputs (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.outputs"]], "proj_clip (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.proj_clip"]], "projection_bias_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.projection_bias_tensor"]], "projection_weights_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.projection_weights_tensor"]], "recurrent_to_cell_weights_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.recurrent_to_cell_weights_tensor"]], "recurrent_to_forget_weights_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.recurrent_to_forget_weights_tensor"]], "recurrent_to_input_weights_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.recurrent_to_input_weights_tensor"]], "recurrent_to_output_weights_tensor (tfliteunidirectionallstmlayer property)": [[206, "mltk.core.TfliteUnidirectionalLstmLayer.recurrent_to_output_weights_tensor"]], "tfliteunidirectionallstmlayeroptions (class in mltk.core)": [[207, "mltk.core.TfliteUnidirectionalLstmLayerOptions"]], "__init__() (tfliteunidirectionallstmlayeroptions method)": [[207, "mltk.core.TfliteUnidirectionalLstmLayerOptions.__init__"]], "activation (tfliteunidirectionallstmlayeroptions property)": [[207, "mltk.core.TfliteUnidirectionalLstmLayerOptions.activation"]], "activation_str (tfliteunidirectionallstmlayeroptions property)": [[207, "mltk.core.TfliteUnidirectionalLstmLayerOptions.activation_str"]], "options_type (tfliteunidirectionallstmlayeroptions property)": [[207, "mltk.core.TfliteUnidirectionalLstmLayerOptions.options_type"]], "options_type_str (tfliteunidirectionallstmlayeroptions property)": [[207, "mltk.core.TfliteUnidirectionalLstmLayerOptions.options_type_str"]], "extract_archive() (in module mltk.utils.archive)": [[208, "mltk.utils.archive.extract_archive"]], "gzip_directory_files() (in module mltk.utils.archive)": [[208, "mltk.utils.archive.gzip_directory_files"]], "gzip_file() (in module mltk.utils.archive)": [[208, "mltk.utils.archive.gzip_file"]], "mltk.utils.archive": [[208, "module-mltk.utils.archive"]], "download_url() (in module mltk.utils.archive_downloader)": [[209, "mltk.utils.archive_downloader.download_url"]], "download_verify_extract() (in module mltk.utils.archive_downloader)": [[209, "mltk.utils.archive_downloader.download_verify_extract"]], "mltk.utils.archive_downloader": [[209, "module-mltk.utils.archive_downloader"]], "verify_extract() (in module mltk.utils.archive_downloader)": [[209, "mltk.utils.archive_downloader.verify_extract"]], "verify_file_hash() (in module mltk.utils.archive_downloader)": [[209, "mltk.utils.archive_downloader.verify_file_hash"]], "verify_sha1() (in module mltk.utils.archive_downloader)": [[209, "mltk.utils.archive_downloader.verify_sha1"]], "verify_sha256() (in module mltk.utils.archive_downloader)": [[209, "mltk.utils.archive_downloader.verify_sha256"]], "augmentation (class in mltk.utils.audio_dataset_generator)": [[210, "mltk.utils.audio_dataset_generator.Augmentation"]], "count() (augmentation method)": [[210, "mltk.utils.audio_dataset_generator.Augmentation.count"]], "index() (augmentation method)": [[210, "mltk.utils.audio_dataset_generator.Augmentation.index"]], "pitch (augmentation attribute)": [[210, "mltk.utils.audio_dataset_generator.Augmentation.pitch"]], "rate (augmentation attribute)": [[210, "mltk.utils.audio_dataset_generator.Augmentation.rate"]], "generationconfig (class in mltk.utils.audio_dataset_generator)": [[211, "mltk.utils.audio_dataset_generator.GenerationConfig"]], "__init__() (generationconfig method)": [[211, "mltk.utils.audio_dataset_generator.GenerationConfig.__init__"]], "copy() (generationconfig method)": [[211, "mltk.utils.audio_dataset_generator.GenerationConfig.copy"]], "keyword (generationconfig attribute)": [[211, "mltk.utils.audio_dataset_generator.GenerationConfig.keyword"]], "keyword_group (generationconfig attribute)": [[211, "mltk.utils.audio_dataset_generator.GenerationConfig.keyword_group"]], "pitch (generationconfig attribute)": [[211, "mltk.utils.audio_dataset_generator.GenerationConfig.pitch"]], "rate (generationconfig attribute)": [[211, "mltk.utils.audio_dataset_generator.GenerationConfig.rate"]], "voice (generationconfig attribute)": [[211, "mltk.utils.audio_dataset_generator.GenerationConfig.voice"]], "audiodatasetgenerator (class in mltk.utils.audio_dataset_generator)": [[212, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator"]], "__init__() (audiodatasetgenerator method)": [[212, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.__init__"]], "count_characters() (audiodatasetgenerator method)": [[212, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.count_characters"]], "generate() (audiodatasetgenerator method)": [[212, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.generate"]], "get_summary() (audiodatasetgenerator method)": [[212, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.get_summary"]], "is_backend_loaded() (audiodatasetgenerator method)": [[212, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.is_backend_loaded"]], "is_running (audiodatasetgenerator property)": [[212, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.is_running"]], "join() (audiodatasetgenerator method)": [[212, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.join"]], "list_configurations() (audiodatasetgenerator method)": [[212, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.list_configurations"]], "list_languages() (audiodatasetgenerator method)": [[212, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.list_languages"]], "list_supported_backends() (audiodatasetgenerator static method)": [[212, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.list_supported_backends"]], "list_voices() (audiodatasetgenerator method)": [[212, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.list_voices"]], "load_backend() (audiodatasetgenerator method)": [[212, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.load_backend"]], "out_dir (audiodatasetgenerator property)": [[212, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.out_dir"]], "shutdown() (audiodatasetgenerator method)": [[212, "mltk.utils.audio_dataset_generator.AudioDatasetGenerator.shutdown"]], "keyword (class in mltk.utils.audio_dataset_generator)": [[214, "mltk.utils.audio_dataset_generator.Keyword"]], "aliases (keyword attribute)": [[214, "mltk.utils.audio_dataset_generator.Keyword.aliases"]], "as_list() (keyword method)": [[214, "mltk.utils.audio_dataset_generator.Keyword.as_list"]], "count() (keyword method)": [[214, "mltk.utils.audio_dataset_generator.Keyword.count"]], "index() (keyword method)": [[214, "mltk.utils.audio_dataset_generator.Keyword.index"]], "max_count (keyword attribute)": [[214, "mltk.utils.audio_dataset_generator.Keyword.max_count"]], "value (keyword attribute)": [[214, "mltk.utils.audio_dataset_generator.Keyword.value"]], "voice (class in mltk.utils.audio_dataset_generator)": [[215, "mltk.utils.audio_dataset_generator.Voice"]], "__init__() (voice method)": [[215, "mltk.utils.audio_dataset_generator.Voice.__init__"]], "backend (voice attribute)": [[215, "mltk.utils.audio_dataset_generator.Voice.backend"]], "hashable_value() (voice method)": [[215, "mltk.utils.audio_dataset_generator.Voice.hashable_value"]], "hex_hash (voice property)": [[215, "mltk.utils.audio_dataset_generator.Voice.hex_hash"]], "language_code (voice attribute)": [[215, "mltk.utils.audio_dataset_generator.Voice.language_code"]], "name (voice attribute)": [[215, "mltk.utils.audio_dataset_generator.Voice.name"]], "voicepitch (class in mltk.utils.audio_dataset_generator)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch"]], "__init__() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.__init__"]], "__new__() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.__new__"]], "capitalize() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.capitalize"]], "casefold() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.casefold"]], "center() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.center"]], "count() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.count"]], "encode() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.encode"]], "endswith() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.endswith"]], "expandtabs() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.expandtabs"]], "find() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.find"]], "format() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.format"]], "format_map() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.format_map"]], "index() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.index"]], "isalnum() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.isalnum"]], "isalpha() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.isalpha"]], "isascii() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.isascii"]], "isdecimal() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.isdecimal"]], "isdigit() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.isdigit"]], "isidentifier() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.isidentifier"]], "islower() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.islower"]], "isnumeric() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.isnumeric"]], "isprintable() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.isprintable"]], "isspace() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.isspace"]], "istitle() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.istitle"]], "isupper() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.isupper"]], "join() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.join"]], "ljust() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.ljust"]], "lower() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.lower"]], "lstrip() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.lstrip"]], "maketrans() (voicepitch static method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.maketrans"]], "partition() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.partition"]], "removeprefix() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.removeprefix"]], "removesuffix() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.removesuffix"]], "replace() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.replace"]], "rfind() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.rfind"]], "rindex() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.rindex"]], "rjust() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.rjust"]], "rpartition() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.rpartition"]], "rsplit() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.rsplit"]], "rstrip() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.rstrip"]], "split() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.split"]], "splitlines() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.splitlines"]], "startswith() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.startswith"]], "strip() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.strip"]], "swapcase() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.swapcase"]], "title() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.title"]], "translate() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.translate"]], "upper() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.upper"]], "zfill() (voicepitch method)": [[216, "mltk.utils.audio_dataset_generator.VoicePitch.zfill"]], "voicerate (class in mltk.utils.audio_dataset_generator)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate"]], "__init__() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.__init__"]], "__new__() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.__new__"]], "capitalize() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.capitalize"]], "casefold() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.casefold"]], "center() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.center"]], "count() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.count"]], "encode() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.encode"]], "endswith() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.endswith"]], "expandtabs() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.expandtabs"]], "find() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.find"]], "format() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.format"]], "format_map() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.format_map"]], "index() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.index"]], "isalnum() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.isalnum"]], "isalpha() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.isalpha"]], "isascii() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.isascii"]], "isdecimal() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.isdecimal"]], "isdigit() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.isdigit"]], "isidentifier() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.isidentifier"]], "islower() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.islower"]], "isnumeric() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.isnumeric"]], "isprintable() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.isprintable"]], "isspace() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.isspace"]], "istitle() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.istitle"]], "isupper() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.isupper"]], "join() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.join"]], "ljust() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.ljust"]], "lower() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.lower"]], "lstrip() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.lstrip"]], "maketrans() (voicerate static method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.maketrans"]], "partition() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.partition"]], "removeprefix() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.removeprefix"]], "removesuffix() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.removesuffix"]], "replace() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.replace"]], "rfind() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.rfind"]], "rindex() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.rindex"]], "rjust() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.rjust"]], "rpartition() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.rpartition"]], "rsplit() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.rsplit"]], "rstrip() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.rstrip"]], "split() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.split"]], "splitlines() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.splitlines"]], "startswith() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.startswith"]], "strip() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.strip"]], "swapcase() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.swapcase"]], "title() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.title"]], "translate() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.translate"]], "upper() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.upper"]], "zfill() (voicerate method)": [[217, "mltk.utils.audio_dataset_generator.VoiceRate.zfill"]], "bin2header() (in module mltk.utils.bin2header)": [[218, "mltk.utils.bin2header.bin2header"]], "main() (in module mltk.utils.bin2header)": [[218, "mltk.utils.bin2header.main"]], "mltk.utils.bin2header": [[218, "module-mltk.utils.bin2header"]], "build_mltk_target() (in module mltk.utils.cmake)": [[219, "mltk.utils.cmake.build_mltk_target"]], "get_build_directory() (in module mltk.utils.cmake)": [[219, "mltk.utils.cmake.get_build_directory"]], "invoke_mltk_target() (in module mltk.utils.cmake)": [[219, "mltk.utils.cmake.invoke_mltk_target"]], "mltk.utils.cmake": [[219, "module-mltk.utils.cmake"]], "parse_variables() (in module mltk.utils.cmake)": [[219, "mltk.utils.cmake.parse_variables"]], "tensorflowcudaversions (class in mltk.utils.gpu)": [[220, "mltk.utils.gpu.TensorflowCudaVersions"]], "__getnewargs__() (tensorflowcudaversions method)": [[220, "mltk.utils.gpu.TensorflowCudaVersions.__getnewargs__"]], "__match_args__ (tensorflowcudaversions attribute)": [[220, "mltk.utils.gpu.TensorflowCudaVersions.__match_args__"]], "__module__ (tensorflowcudaversions attribute)": [[220, "mltk.utils.gpu.TensorflowCudaVersions.__module__"]], "__new__() (tensorflowcudaversions static method)": [[220, "mltk.utils.gpu.TensorflowCudaVersions.__new__"]], "__repr__() (tensorflowcudaversions method)": [[220, "mltk.utils.gpu.TensorflowCudaVersions.__repr__"]], "__slots__ (tensorflowcudaversions attribute)": [[220, "mltk.utils.gpu.TensorflowCudaVersions.__slots__"]], "check_tensorflow_cuda_compatibility_error() (in module mltk.utils.gpu)": [[220, "mltk.utils.gpu.check_tensorflow_cuda_compatibility_error"]], "cuda (tensorflowcudaversions attribute)": [[220, "mltk.utils.gpu.TensorflowCudaVersions.cuda"]], "cudnn (tensorflowcudaversions attribute)": [[220, "mltk.utils.gpu.TensorflowCudaVersions.cudnn"]], "deinitialize() (in module mltk.utils.gpu)": [[220, "mltk.utils.gpu.deinitialize"]], "disable() (in module mltk.utils.gpu)": [[220, "mltk.utils.gpu.disable"]], "get_tensorflow_version_with_cudnn_version() (in module mltk.utils.gpu)": [[220, "mltk.utils.gpu.get_tensorflow_version_with_cudnn_version"]], "initialize() (in module mltk.utils.gpu)": [[220, "mltk.utils.gpu.initialize"]], "mltk.utils.gpu": [[220, "module-mltk.utils.gpu"]], "python_max (tensorflowcudaversions attribute)": [[220, "mltk.utils.gpu.TensorflowCudaVersions.python_max"]], "python_min (tensorflowcudaversions attribute)": [[220, "mltk.utils.gpu.TensorflowCudaVersions.python_min"]], "tensorflow (tensorflowcudaversions attribute)": [[220, "mltk.utils.gpu.TensorflowCudaVersions.tensorflow"]], "generate_hash() (in module mltk.utils.hasher)": [[221, "mltk.utils.hasher.generate_hash"]], "hash_file() (in module mltk.utils.hasher)": [[221, "mltk.utils.hasher.hash_file"]], "hash_object() (in module mltk.utils.hasher)": [[221, "mltk.utils.hasher.hash_object"]], "mltk.utils.hasher": [[221, "module-mltk.utils.hasher"]], "jlinkcommandstream (class in mltk.utils.jlink_stream)": [[223, "mltk.utils.jlink_stream.JlinkCommandStream"]], "__init__() (jlinkcommandstream method)": [[223, "mltk.utils.jlink_stream.JlinkCommandStream.__init__"]], "close() (jlinkcommandstream method)": [[223, "mltk.utils.jlink_stream.JlinkCommandStream.close"]], "issue() (jlinkcommandstream method)": [[223, "mltk.utils.jlink_stream.JlinkCommandStream.issue"]], "open() (jlinkcommandstream method)": [[223, "mltk.utils.jlink_stream.JlinkCommandStream.open"]], "jlinkdatastream (class in mltk.utils.jlink_stream)": [[224, "mltk.utils.jlink_stream.JLinkDataStream"]], "__init__() (jlinkdatastream method)": [[224, "mltk.utils.jlink_stream.JLinkDataStream.__init__"]], "buffer_hexdump (jlinkdatastream property)": [[224, "mltk.utils.jlink_stream.JLinkDataStream.buffer_hexdump"]], "buffer_unused (jlinkdatastream property)": [[224, "mltk.utils.jlink_stream.JLinkDataStream.buffer_unused"]], "buffer_used (jlinkdatastream property)": [[224, "mltk.utils.jlink_stream.JLinkDataStream.buffer_used"]], "close() (jlinkdatastream method)": [[224, "mltk.utils.jlink_stream.JLinkDataStream.close"]], "end_time (jlinkdatastream property)": [[224, "mltk.utils.jlink_stream.JLinkDataStream.end_time"]], "flush() (jlinkdatastream method)": [[224, "mltk.utils.jlink_stream.JLinkDataStream.flush"]], "is_opened (jlinkdatastream property)": [[224, "mltk.utils.jlink_stream.JLinkDataStream.is_opened"]], "max_read_size (jlinkdatastream property)": [[224, "mltk.utils.jlink_stream.JLinkDataStream.max_read_size"]], "mode (jlinkdatastream property)": [[224, "mltk.utils.jlink_stream.JLinkDataStream.mode"]], "name (jlinkdatastream property)": [[224, "mltk.utils.jlink_stream.JLinkDataStream.name"]], "read() (jlinkdatastream method)": [[224, "mltk.utils.jlink_stream.JLinkDataStream.read"]], "read_all() (jlinkdatastream method)": [[224, "mltk.utils.jlink_stream.JLinkDataStream.read_all"]], "read_data_available (jlinkdatastream property)": [[224, "mltk.utils.jlink_stream.JLinkDataStream.read_data_available"]], "timeout (jlinkdatastream property)": [[224, "mltk.utils.jlink_stream.JLinkDataStream.timeout"]], "write() (jlinkdatastream method)": [[224, "mltk.utils.jlink_stream.JLinkDataStream.write"]], "write_data_available (jlinkdatastream property)": [[224, "mltk.utils.jlink_stream.JLinkDataStream.write_data_available"]], "jlinkstream (class in mltk.utils.jlink_stream)": [[226, "mltk.utils.jlink_stream.JlinkStream"]], "__init__() (jlinkstream method)": [[226, "mltk.utils.jlink_stream.JlinkStream.__init__"]], "close() (jlinkstream method)": [[226, "mltk.utils.jlink_stream.JlinkStream.close"]], "connect() (jlinkstream method)": [[226, "mltk.utils.jlink_stream.JlinkStream.connect"]], "default_options (jlinkstream property)": [[226, "mltk.utils.jlink_stream.JlinkStream.default_options"]], "disconnect() (jlinkstream method)": [[226, "mltk.utils.jlink_stream.JlinkStream.disconnect"]], "is_connected (jlinkstream property)": [[226, "mltk.utils.jlink_stream.JlinkStream.is_connected"]], "open() (jlinkstream method)": [[226, "mltk.utils.jlink_stream.JlinkStream.open"]], "process() (jlinkstream method)": [[226, "mltk.utils.jlink_stream.JlinkStream.process"]], "read() (jlinkstream method)": [[226, "mltk.utils.jlink_stream.JlinkStream.read"]], "write() (jlinkstream method)": [[226, "mltk.utils.jlink_stream.JlinkStream.write"]], "jlinkstreamoptions (class in mltk.utils.jlink_stream)": [[227, "mltk.utils.jlink_stream.JlinkStreamOptions"]], "consoleloggerlevelcontext (class in mltk.utils.logger)": [[228, "mltk.utils.logger.ConsoleLoggerLevelContext"]], "dummylogger (class in mltk.utils.logger)": [[228, "mltk.utils.logger.DummyLogger"]], "__dict__ (consoleloggerlevelcontext attribute)": [[228, "mltk.utils.logger.ConsoleLoggerLevelContext.__dict__"]], "__dict__ (dummylogger attribute)": [[228, "mltk.utils.logger.DummyLogger.__dict__"]], "__enter__() (consoleloggerlevelcontext method)": [[228, "mltk.utils.logger.ConsoleLoggerLevelContext.__enter__"]], "__exit__() (consoleloggerlevelcontext method)": [[228, "mltk.utils.logger.ConsoleLoggerLevelContext.__exit__"]], "__init__() (consoleloggerlevelcontext method)": [[228, "mltk.utils.logger.ConsoleLoggerLevelContext.__init__"]], "__init__() (dummylogger method)": [[228, "mltk.utils.logger.DummyLogger.__init__"]], "__module__ (consoleloggerlevelcontext attribute)": [[228, "mltk.utils.logger.ConsoleLoggerLevelContext.__module__"]], "__module__ (dummylogger attribute)": [[228, "mltk.utils.logger.DummyLogger.__module__"]], "__weakref__ (consoleloggerlevelcontext attribute)": [[228, "mltk.utils.logger.ConsoleLoggerLevelContext.__weakref__"]], "__weakref__ (dummylogger attribute)": [[228, "mltk.utils.logger.DummyLogger.__weakref__"]], "add_console_logger() (in module mltk.utils.logger)": [[228, "mltk.utils.logger.add_console_logger"]], "debug() (dummylogger method)": [[228, "mltk.utils.logger.DummyLogger.debug"]], "error() (dummylogger method)": [[228, "mltk.utils.logger.DummyLogger.error"]], "exception() (dummylogger method)": [[228, "mltk.utils.logger.DummyLogger.exception"]], "flush() (dummylogger method)": [[228, "mltk.utils.logger.DummyLogger.flush"]], "get_level() (in module mltk.utils.logger)": [[228, "mltk.utils.logger.get_level"]], "get_logger() (in module mltk.utils.logger)": [[228, "mltk.utils.logger.get_logger"]], "info() (dummylogger method)": [[228, "mltk.utils.logger.DummyLogger.info"]], "make_filelike() (in module mltk.utils.logger)": [[228, "mltk.utils.logger.make_filelike"]], "mltk.utils.logger": [[228, "module-mltk.utils.logger"]], "redirect_stream() (in module mltk.utils.logger)": [[228, "mltk.utils.logger.redirect_stream"]], "set_console_level() (in module mltk.utils.logger)": [[228, "mltk.utils.logger.set_console_level"]], "timing_decorator() (in module mltk.utils.logger)": [[228, "mltk.utils.logger.timing_decorator"]], "warning() (dummylogger method)": [[228, "mltk.utils.logger.DummyLogger.warning"]], "write() (dummylogger method)": [[228, "mltk.utils.logger.DummyLogger.write"]], "add_user_setting() (in module mltk.utils.path)": [[229, "mltk.utils.path.add_user_setting"]], "clean_directory() (in module mltk.utils.path)": [[229, "mltk.utils.path.clean_directory"]], "copy_directory() (in module mltk.utils.path)": [[229, "mltk.utils.path.copy_directory"]], "create_dir() (in module mltk.utils.path)": [[229, "mltk.utils.path.create_dir"]], "create_tempdir() (in module mltk.utils.path)": [[229, "mltk.utils.path.create_tempdir"]], "create_user_dir() (in module mltk.utils.path)": [[229, "mltk.utils.path.create_user_dir"]], "extension() (in module mltk.utils.path)": [[229, "mltk.utils.path.extension"]], "file_is_in_use() (in module mltk.utils.path)": [[229, "mltk.utils.path.file_is_in_use"]], "file_is_newer() (in module mltk.utils.path)": [[229, "mltk.utils.path.file_is_newer"]], "fullpath() (in module mltk.utils.path)": [[229, "mltk.utils.path.fullpath"]], "get_actual_path() (in module mltk.utils.path)": [[229, "mltk.utils.path.get_actual_path"]], "get_user_setting() (in module mltk.utils.path)": [[229, "mltk.utils.path.get_user_setting"]], "has_filename() (in module mltk.utils.path)": [[229, "mltk.utils.path.has_filename"]], "mltk.utils.path": [[229, "module-mltk.utils.path"]], "pushd() (in module mltk.utils.path)": [[229, "mltk.utils.path.pushd"]], "recursive_listdir() (in module mltk.utils.path)": [[229, "mltk.utils.path.recursive_listdir"]], "remove_directory() (in module mltk.utils.path)": [[229, "mltk.utils.path.remove_directory"]], "set_file_last_modified() (in module mltk.utils.path)": [[229, "mltk.utils.path.set_file_last_modified"]], "walk_with_depth() (in module mltk.utils.path)": [[229, "mltk.utils.path.walk_with_depth"]], "processpool (class in mltk.utils.process_pool)": [[230, "mltk.utils.process_pool.ProcessPool"]], "__init__() (processpool method)": [[230, "mltk.utils.process_pool.ProcessPool.__init__"]], "create_batch() (processpool method)": [[230, "mltk.utils.process_pool.ProcessPool.create_batch"]], "is_running (processpool property)": [[230, "mltk.utils.process_pool.ProcessPool.is_running"]], "n_jobs (processpool property)": [[230, "mltk.utils.process_pool.ProcessPool.n_jobs"]], "name (processpool property)": [[230, "mltk.utils.process_pool.ProcessPool.name"]], "process() (processpool method)": [[230, "mltk.utils.process_pool.ProcessPool.process"]], "shutdown() (processpool method)": [[230, "mltk.utils.process_pool.ProcessPool.shutdown"]], "start() (processpool method)": [[230, "mltk.utils.process_pool.ProcessPool.start"]], "defaultdict() (in module mltk.utils.python)": [[231, "mltk.utils.python.DefaultDict"]], "dictobject (class in mltk.utils.python)": [[231, "mltk.utils.python.DictObject"]], "short_version (in module mltk.utils.python)": [[231, "mltk.utils.python.SHORT_VERSION"]], "__dict__ (dictobject attribute)": [[231, "mltk.utils.python.DictObject.__dict__"]], "__getattr__() (dictobject method)": [[231, "mltk.utils.python.DictObject.__getattr__"]], "__module__ (dictobject attribute)": [[231, "mltk.utils.python.DictObject.__module__"]], "__setattr__() (dictobject method)": [[231, "mltk.utils.python.DictObject.__setattr__"]], "__weakref__ (dictobject attribute)": [[231, "mltk.utils.python.DictObject.__weakref__"]], "append_exception_msg() (in module mltk.utils.python)": [[231, "mltk.utils.python.append_exception_msg"]], "as_list() (in module mltk.utils.python)": [[231, "mltk.utils.python.as_list"]], "contains_class_type() (in module mltk.utils.python)": [[231, "mltk.utils.python.contains_class_type"]], "debugger_is_active() (in module mltk.utils.python)": [[231, "mltk.utils.python.debugger_is_active"]], "disable_warnings() (in module mltk.utils.python)": [[231, "mltk.utils.python.disable_warnings"]], "find_object_key_with_value() (in module mltk.utils.python)": [[231, "mltk.utils.python.find_object_key_with_value"]], "find_object_value_with_key() (in module mltk.utils.python)": [[231, "mltk.utils.python.find_object_value_with_key"]], "find_object_value_with_key_or_value() (in module mltk.utils.python)": [[231, "mltk.utils.python.find_object_value_with_key_or_value"]], "flatten_list() (in module mltk.utils.python)": [[231, "mltk.utils.python.flatten_list"]], "forward_method_kwargs() (in module mltk.utils.python)": [[231, "mltk.utils.python.forward_method_kwargs"]], "get_case_insensitive() (in module mltk.utils.python)": [[231, "mltk.utils.python.get_case_insensitive"]], "import_module_at_path() (in module mltk.utils.python)": [[231, "mltk.utils.python.import_module_at_path"]], "install_pip_package() (in module mltk.utils.python)": [[231, "mltk.utils.python.install_pip_package"]], "is_false() (in module mltk.utils.python)": [[231, "mltk.utils.python.is_false"]], "is_true() (in module mltk.utils.python)": [[231, "mltk.utils.python.is_true"]], "list_rindex() (in module mltk.utils.python)": [[231, "mltk.utils.python.list_rindex"]], "load_json_safe() (in module mltk.utils.python)": [[231, "mltk.utils.python.load_json_safe"]], "merge_dict() (in module mltk.utils.python)": [[231, "mltk.utils.python.merge_dict"]], "mltk.utils.python": [[231, "module-mltk.utils.python"]], "notebook_is_active() (in module mltk.utils.python)": [[231, "mltk.utils.python.notebook_is_active"]], "prepend_exception_msg() (in module mltk.utils.python)": [[231, "mltk.utils.python.prepend_exception_msg"]], "set_absl_log_level() (in module mltk.utils.python)": [[231, "mltk.utils.python.set_absl_log_level"]], "timeit() (in module mltk.utils.python)": [[231, "mltk.utils.python.timeit"]], "serialreader (class in mltk.utils.serial_reader)": [[233, "mltk.utils.serial_reader.SerialReader"]], "__init__() (serialreader method)": [[233, "mltk.utils.serial_reader.SerialReader.__init__"]], "captured_data (serialreader property)": [[233, "mltk.utils.serial_reader.SerialReader.captured_data"]], "close() (serialreader method)": [[233, "mltk.utils.serial_reader.SerialReader.close"]], "error_message (serialreader property)": [[233, "mltk.utils.serial_reader.SerialReader.error_message"]], "failed (serialreader property)": [[233, "mltk.utils.serial_reader.SerialReader.failed"]], "flush() (serialreader method)": [[233, "mltk.utils.serial_reader.SerialReader.flush"]], "is_open (serialreader property)": [[233, "mltk.utils.serial_reader.SerialReader.is_open"]], "list_ports() (serialreader static method)": [[233, "mltk.utils.serial_reader.SerialReader.list_ports"]], "open() (serialreader method)": [[233, "mltk.utils.serial_reader.SerialReader.open"]], "read() (serialreader method)": [[233, "mltk.utils.serial_reader.SerialReader.read"]], "resolve_port() (serialreader static method)": [[233, "mltk.utils.serial_reader.SerialReader.resolve_port"]], "started (serialreader property)": [[233, "mltk.utils.serial_reader.SerialReader.started"]], "stopped (serialreader property)": [[233, "mltk.utils.serial_reader.SerialReader.stopped"]], "write() (serialreader method)": [[233, "mltk.utils.serial_reader.SerialReader.write"]], "mltk.utils.shell_cmd": [[234, "module-mltk.utils.shell_cmd"]], "run_shell_cmd() (in module mltk.utils.shell_cmd)": [[234, "mltk.utils.shell_cmd.run_shell_cmd"]], "signalhandler (class in mltk.utils.signal_handler)": [[235, "mltk.utils.signal_handler.SignalHandler"]], "__init__() (signalhandler method)": [[235, "mltk.utils.signal_handler.SignalHandler.__init__"]], "formattedfloat (class in mltk.utils.string_formatting)": [[236, "mltk.utils.string_formatting.FormattedFloat"]], "formattedint (class in mltk.utils.string_formatting)": [[236, "mltk.utils.string_formatting.FormattedInt"]], "__dict__ (formattedfloat attribute)": [[236, "mltk.utils.string_formatting.FormattedFloat.__dict__"]], "__dict__ (formattedint attribute)": [[236, "mltk.utils.string_formatting.FormattedInt.__dict__"]], "__module__ (formattedfloat attribute)": [[236, "mltk.utils.string_formatting.FormattedFloat.__module__"]], "__module__ (formattedint attribute)": [[236, "mltk.utils.string_formatting.FormattedInt.__module__"]], "__str__() (formattedfloat method)": [[236, "mltk.utils.string_formatting.FormattedFloat.__str__"]], "__str__() (formattedint method)": [[236, "mltk.utils.string_formatting.FormattedInt.__str__"]], "__weakref__ (formattedfloat attribute)": [[236, "mltk.utils.string_formatting.FormattedFloat.__weakref__"]], "convert_units() (in module mltk.utils.string_formatting)": [[236, "mltk.utils.string_formatting.convert_units"]], "format_units() (in module mltk.utils.string_formatting)": [[236, "mltk.utils.string_formatting.format_units"]], "iso_time_filename_str() (in module mltk.utils.string_formatting)": [[236, "mltk.utils.string_formatting.iso_time_filename_str"]], "iso_time_str() (in module mltk.utils.string_formatting)": [[236, "mltk.utils.string_formatting.iso_time_str"]], "mltk.utils.string_formatting": [[236, "module-mltk.utils.string_formatting"]], "pretty_time_str() (in module mltk.utils.string_formatting)": [[236, "mltk.utils.string_formatting.pretty_time_str"]], "get_current_os() (in module mltk.utils.system)": [[237, "mltk.utils.system.get_current_os"]], "get_username() (in module mltk.utils.system)": [[237, "mltk.utils.system.get_username"]], "has_admin() (in module mltk.utils.system)": [[237, "mltk.utils.system.has_admin"]], "is_linux() (in module mltk.utils.system)": [[237, "mltk.utils.system.is_linux"]], "is_osx() (in module mltk.utils.system)": [[237, "mltk.utils.system.is_osx"]], "is_windows() (in module mltk.utils.system)": [[237, "mltk.utils.system.is_windows"]], "make_path_executable() (in module mltk.utils.system)": [[237, "mltk.utils.system.make_path_executable"]], "mltk.utils.system": [[237, "module-mltk.utils.system"]], "raise_signal() (in module mltk.utils.system)": [[237, "mltk.utils.system.raise_signal"]], "send_signal() (in module mltk.utils.system)": [[237, "mltk.utils.system.send_signal"]], "uartstream (class in mltk.utils.uart_stream)": [[239, "mltk.utils.uart_stream.UartStream"]], "__init__() (uartstream method)": [[239, "mltk.utils.uart_stream.UartStream.__init__"]], "baud (uartstream property)": [[239, "mltk.utils.uart_stream.UartStream.baud"]], "close() (uartstream method)": [[239, "mltk.utils.uart_stream.UartStream.close"]], "flush_input() (uartstream method)": [[239, "mltk.utils.uart_stream.UartStream.flush_input"]], "is_open (uartstream property)": [[239, "mltk.utils.uart_stream.UartStream.is_open"]], "is_synchronized (uartstream property)": [[239, "mltk.utils.uart_stream.UartStream.is_synchronized"]], "list_ports() (uartstream static method)": [[239, "mltk.utils.uart_stream.UartStream.list_ports"]], "open() (uartstream method)": [[239, "mltk.utils.uart_stream.UartStream.open"]], "port (uartstream property)": [[239, "mltk.utils.uart_stream.UartStream.port"]], "read() (uartstream method)": [[239, "mltk.utils.uart_stream.UartStream.read"]], "read_all() (uartstream method)": [[239, "mltk.utils.uart_stream.UartStream.read_all"]], "read_command() (uartstream method)": [[239, "mltk.utils.uart_stream.UartStream.read_command"]], "resolve_port() (uartstream static method)": [[239, "mltk.utils.uart_stream.UartStream.resolve_port"]], "rx_bytes_available (uartstream property)": [[239, "mltk.utils.uart_stream.UartStream.rx_bytes_available"]], "synchronize() (uartstream method)": [[239, "mltk.utils.uart_stream.UartStream.synchronize"]], "synchronize_blocking() (uartstream method)": [[239, "mltk.utils.uart_stream.UartStream.synchronize_blocking"]], "tx_bytes_available (uartstream property)": [[239, "mltk.utils.uart_stream.UartStream.tx_bytes_available"]], "wait() (uartstream method)": [[239, "mltk.utils.uart_stream.UartStream.wait"]], "write() (uartstream method)": [[239, "mltk.utils.uart_stream.UartStream.write"]], "write_all() (uartstream method)": [[239, "mltk.utils.uart_stream.UartStream.write_all"]], "write_command() (uartstream method)": [[239, "mltk.utils.uart_stream.UartStream.write_command"]]}})